<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\fftools\ffmpeg.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctype.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdatomic.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_IO_H</name></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;io.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_UNISTD_H</name></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavformat/avformat.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavdevice/avdevice.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libswresample/swresample.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/opt.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/channel_layout.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/parseutils.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/samplefmt.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/fifo.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/hwcontext.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/intreadwrite.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/dict.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/display.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/mathematics.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/pixdesc.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avstring.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/libm.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/imgutils.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/timestamp.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/bprint.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/time.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/thread.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/threadmessage.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavcodec/mathops.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavformat/os_support.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavfilter/avfilter.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavfilter/buffersrc.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavfilter/buffersink.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_SYS_RESOURCE_H</name></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/time.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/resource.h&gt;</cpp:file></cpp:include>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>HAVE_GETPROCESSTIMES</name></expr></cpp:elif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;windows.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_GETPROCESSMEMORYINFO</name></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;windows.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;psapi.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_SETCONSOLECTRLHANDLER</name></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;windows.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_SYS_SELECT_H</name></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/select.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_TERMIOS_H</name></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fcntl.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/ioctl.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/time.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;termios.h&gt;</cpp:file></cpp:include>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>HAVE_KBHIT</name></expr></cpp:elif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;conio.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;time.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ffmpeg.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cmdutils.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avassert.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name></type> <name><name>program_name</name><index>[]</index></name> <init>= <expr><literal type="string">"ffmpeg"</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>program_birth_year</name> <init>= <expr><literal type="number">2000</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>FILE</name> <modifier>*</modifier></type><name>vstats_file</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>forced_keyframes_const_names</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="string">"n"</literal></expr>,

<expr><literal type="string">"n_forced"</literal></expr>,

<expr><literal type="string">"prev_forced_n"</literal></expr>,

<expr><literal type="string">"prev_forced_t"</literal></expr>,

<expr><literal type="string">"t"</literal></expr>,

<expr><name>NULL</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<typedef>typedef <type><struct>struct <name>BenchmarkTimeStamps</name> <block>{

<decl_stmt><decl><type><name>int64_t</name></type> <name>real_usec</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>user_usec</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>sys_usec</name></decl>;</decl_stmt>

}</block></struct></type> <name>BenchmarkTimeStamps</name>;</typedef>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>do_video_stats</name><parameter_list>(<parameter><decl><type><name>OutputStream</name> <modifier>*</modifier></type><name>ost</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>frame_size</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>BenchmarkTimeStamps</name></type> <name>get_benchmark_time_stamps</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int64_t</name></type> <name>getmaxrss</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>ifilter_has_all_input_formats</name><parameter_list>(<parameter><decl><type><name>FilterGraph</name> <modifier>*</modifier></type><name>fg</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>run_as_daemon</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>nb_frames_dup</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>unsigned</name></type> <name>dup_warning</name> <init>= <expr><literal type="number">1000</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>nb_frames_drop</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int64_t</name></type> <name><name>decode_error_stat</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>want_sdp</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>BenchmarkTimeStamps</name></type> <name>current_time</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>progress_avio</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>subtitle_out</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>InputStream</name> <modifier>*</modifier><modifier>*</modifier></type><name>input_streams</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>nb_input_streams</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>InputFile</name> <modifier>*</modifier><modifier>*</modifier></type><name>input_files</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>nb_input_files</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>OutputStream</name> <modifier>*</modifier><modifier>*</modifier></type><name>output_streams</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>nb_output_streams</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>OutputFile</name> <modifier>*</modifier><modifier>*</modifier></type><name>output_files</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>nb_output_files</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>FilterGraph</name> <modifier>*</modifier><modifier>*</modifier></type><name>filtergraphs</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>nb_filtergraphs</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_TERMIOS_H</name></expr></cpp:if>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>termios</name></name></type> <name>oldtty</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>restore_tty</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_THREADS</name></expr></cpp:if>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>free_input_threads</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>int</name></type> <name>sub2video_get_blank_frame</name><parameter_list>(<parameter><decl><type><name>InputStream</name> <modifier>*</modifier></type><name>ist</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>frame</name> <init>= <expr><name><name>ist</name><operator>-&gt;</operator><name>sub2video</name><operator>.</operator><name>frame</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_frame_unref</name><argument_list>(<argument><expr><name>frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ist</name><operator>-&gt;</operator><name>sub2video</name><operator>.</operator><name>frame</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator> <ternary><condition><expr><name><name>ist</name><operator>-&gt;</operator><name>dec_ctx</name><operator>-&gt;</operator><name>width</name></name></expr> ?</condition><then> <expr><name><name>ist</name><operator>-&gt;</operator><name>dec_ctx</name><operator>-&gt;</operator><name>width</name></name></expr> </then><else>: <expr><name><name>ist</name><operator>-&gt;</operator><name>sub2video</name><operator>.</operator><name>w</name></name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ist</name><operator>-&gt;</operator><name>sub2video</name><operator>.</operator><name>frame</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <ternary><condition><expr><name><name>ist</name><operator>-&gt;</operator><name>dec_ctx</name><operator>-&gt;</operator><name>height</name></name></expr> ?</condition><then> <expr><name><name>ist</name><operator>-&gt;</operator><name>dec_ctx</name><operator>-&gt;</operator><name>height</name></name></expr> </then><else>: <expr><name><name>ist</name><operator>-&gt;</operator><name>sub2video</name><operator>.</operator><name>h</name></name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ist</name><operator>-&gt;</operator><name>sub2video</name><operator>.</operator><name>frame</name><operator>-&gt;</operator><name>format</name></name> <operator>=</operator> <name>AV_PIX_FMT_RGB32</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>av_frame_get_buffer</name><argument_list>(<argument><expr><name>frame</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>frame</name><operator>-&gt;</operator><name>height</name></name> <operator>*</operator> <name><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>sub2video_copy_rect</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_linesize</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>,

<parameter><decl><type><name>AVSubtitleRect</name> <modifier>*</modifier></type><name>r</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>pal</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>dst2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>src2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>SUBTITLE_BITMAP</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"sub2video: non-bitmap subtitle\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>x</name></name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>r</name><operator>-&gt;</operator><name>x</name></name> <operator>+</operator> <name><name>r</name><operator>-&gt;</operator><name>w</name></name> <operator>&gt;</operator> <name>w</name> <operator>||</operator> <name><name>r</name><operator>-&gt;</operator><name>y</name></name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>r</name><operator>-&gt;</operator><name>y</name></name> <operator>+</operator> <name><name>r</name><operator>-&gt;</operator><name>h</name></name> <operator>&gt;</operator> <name>h</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"sub2video: rectangle (%d %d %d %d) overflowing %d %d\n"</literal></expr></argument>,

<argument><expr><name><name>r</name><operator>-&gt;</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>y</name></name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>w</name></name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>h</name></name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>

)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name><name>r</name><operator>-&gt;</operator><name>y</name></name> <operator>*</operator> <name>dst_linesize</name> <operator>+</operator> <name><name>r</name><operator>-&gt;</operator><name>x</name></name> <operator>*</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>src</name> <operator>=</operator> <name><name>r</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>pal</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><name><name>r</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name><name>r</name><operator>-&gt;</operator><name>h</name></name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>dst2</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><name>dst</name></expr>;</expr_stmt>

<expr_stmt><expr><name>src2</name> <operator>=</operator> <name>src</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name><name>r</name><operator>-&gt;</operator><name>w</name></name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><operator>(</operator><name>dst2</name><operator>++</operator><operator>)</operator> <operator>=</operator> <name><name>pal</name><index>[<expr><operator>*</operator><operator>(</operator><name>src2</name><operator>++</operator><operator>)</operator></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dst_linesize</name></expr>;</expr_stmt>

<expr_stmt><expr><name>src</name> <operator>+=</operator> <name><name>r</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>sub2video_push_ref</name><parameter_list>(<parameter><decl><type><name>InputStream</name> <modifier>*</modifier></type><name>ist</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>pts</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>frame</name> <init>= <expr><name><name>ist</name><operator>-&gt;</operator><name>sub2video</name><operator>.</operator><name>frame</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_assert1</name><argument_list>(<argument><expr><name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ist</name><operator>-&gt;</operator><name>sub2video</name><operator>.</operator><name>last_pts</name></name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>pts</name></name> <operator>=</operator> <name>pts</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ist</name><operator>-&gt;</operator><name>nb_filters</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>av_buffersrc_add_frame_flags</name><argument_list>(<argument><expr><name><name>ist</name><operator>-&gt;</operator><name>filters</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>filter</name></expr></argument>, <argument><expr><name>frame</name></expr></argument>,

<argument><expr><name>AV_BUFFERSRC_FLAG_KEEP_REF</name> <operator>|</operator>

<name>AV_BUFFERSRC_FLAG_PUSH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>AVERROR_EOF</name> <operator>&amp;&amp;</operator> <name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Error while add the frame to buffer source(%s).\n"</literal></expr></argument>,

<argument><expr><call><name>av_err2str</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>sub2video_update</name><parameter_list>(<parameter><decl><type><name>InputStream</name> <modifier>*</modifier></type><name>ist</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>heartbeat_pts</name></decl></parameter>, <parameter><decl><type><name>AVSubtitle</name> <modifier>*</modifier></type><name>sub</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>frame</name> <init>= <expr><name><name>ist</name><operator>-&gt;</operator><name>sub2video</name><operator>.</operator><name>frame</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int8_t</name> <modifier>*</modifier></type><name>dst</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>dst_linesize</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>num_rects</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>pts</name></decl>, <decl><type ref="prev"/><name>end_pts</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>frame</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>sub</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>pts</name> <operator>=</operator> <call><name>av_rescale_q</name><argument_list>(<argument><expr><name><name>sub</name><operator>-&gt;</operator><name>pts</name></name> <operator>+</operator> <name><name>sub</name><operator>-&gt;</operator><name>start_display_time</name></name> <operator>*</operator> <literal type="number">1000LL</literal></expr></argument>,

<argument><expr><name>AV_TIME_BASE_Q</name></expr></argument>, <argument><expr><name><name>ist</name><operator>-&gt;</operator><name>st</name><operator>-&gt;</operator><name>time_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>end_pts</name> <operator>=</operator> <call><name>av_rescale_q</name><argument_list>(<argument><expr><name><name>sub</name><operator>-&gt;</operator><name>pts</name></name> <operator>+</operator> <name><name>sub</name><operator>-&gt;</operator><name>end_display_time</name></name> <operator>*</operator> <literal type="number">1000LL</literal></expr></argument>,

<argument><expr><name>AV_TIME_BASE_Q</name></expr></argument>, <argument><expr><name><name>ist</name><operator>-&gt;</operator><name>st</name><operator>-&gt;</operator><name>time_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>num_rects</name> <operator>=</operator> <name><name>sub</name><operator>-&gt;</operator><name>num_rects</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>pts</name> <operator>=</operator> <ternary><condition><expr><name><name>ist</name><operator>-&gt;</operator><name>sub2video</name><operator>.</operator><name>initialize</name></name></expr> ?</condition><then>

<expr><name>heartbeat_pts</name></expr> </then><else>: <expr><name><name>ist</name><operator>-&gt;</operator><name>sub2video</name><operator>.</operator><name>end_pts</name></name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>end_pts</name> <operator>=</operator> <name>INT64_MAX</name></expr>;</expr_stmt>

<expr_stmt><expr><name>num_rects</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>sub2video_get_blank_frame</name><argument_list>(<argument><expr><name>ist</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>ist</name><operator>-&gt;</operator><name>dec_ctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"Impossible to get a blank canvas.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>dst</name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>data</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>dst_linesize</name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_rects</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>sub2video_copy_rect</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_linesize</name></expr></argument>, <argument><expr><name><name>frame</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>frame</name><operator>-&gt;</operator><name>height</name></name></expr></argument>, <argument><expr><name><name>sub</name><operator>-&gt;</operator><name>rects</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>sub2video_push_ref</name><argument_list>(<argument><expr><name>ist</name></expr></argument>, <argument><expr><name>pts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ist</name><operator>-&gt;</operator><name>sub2video</name><operator>.</operator><name>end_pts</name></name> <operator>=</operator> <name>end_pts</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ist</name><operator>-&gt;</operator><name>sub2video</name><operator>.</operator><name>initialize</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>sub2video_heartbeat</name><parameter_list>(<parameter><decl><type><name>InputStream</name> <modifier>*</modifier></type><name>ist</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>pts</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>InputFile</name> <modifier>*</modifier></type><name>infile</name> <init>= <expr><name><name>input_files</name><index>[<expr><name><name>ist</name><operator>-&gt;</operator><name>file_index</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>nb_reqs</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>pts2</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>infile</name><operator>-&gt;</operator><name>nb_streams</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>InputStream</name> <modifier>*</modifier></type><name>ist2</name> <init>= <expr><name><name>input_streams</name><index>[<expr><name><name>infile</name><operator>-&gt;</operator><name>ist_index</name></name> <operator>+</operator> <name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ist2</name><operator>-&gt;</operator><name>sub2video</name><operator>.</operator><name>frame</name></name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name>pts2</name> <operator>=</operator> <call><name>av_rescale_q</name><argument_list>(<argument><expr><name>pts</name></expr></argument>, <argument><expr><name><name>ist</name><operator>-&gt;</operator><name>st</name><operator>-&gt;</operator><name>time_base</name></name></expr></argument>, <argument><expr><name><name>ist2</name><operator>-&gt;</operator><name>st</name><operator>-&gt;</operator><name>time_base</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>pts2</name> <operator>&lt;=</operator> <name><name>ist2</name><operator>-&gt;</operator><name>sub2video</name><operator>.</operator><name>last_pts</name></name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>pts2</name> <operator>&gt;=</operator> <name><name>ist2</name><operator>-&gt;</operator><name>sub2video</name><operator>.</operator><name>end_pts</name></name> <operator>||</operator> <name><name>ist2</name><operator>-&gt;</operator><name>sub2video</name><operator>.</operator><name>initialize</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>sub2video_update</name><argument_list>(<argument><expr><name>ist2</name></expr></argument>, <argument><expr><name>pts2</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>nb_reqs</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>ist2</name><operator>-&gt;</operator><name>nb_filters</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name>nb_reqs</name> <operator>+=</operator> <call><name>av_buffersrc_get_nb_failed_requests</name><argument_list>(<argument><expr><name><name>ist2</name><operator>-&gt;</operator><name>filters</name><index>[<expr><name>j</name></expr>]</index></name><operator>-&gt;</operator><name>filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name>nb_reqs</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>sub2video_push_ref</name><argument_list>(<argument><expr><name>ist2</name></expr></argument>, <argument><expr><name>pts2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>sub2video_flush</name><parameter_list>(<parameter><decl><type><name>InputStream</name> <modifier>*</modifier></type><name>ist</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ist</name><operator>-&gt;</operator><name>sub2video</name><operator>.</operator><name>end_pts</name></name> <operator>&lt;</operator> <name>INT64_MAX</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>sub2video_update</name><argument_list>(<argument><expr><name>ist</name></expr></argument>, <argument><expr><name>INT64_MAX</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ist</name><operator>-&gt;</operator><name>nb_filters</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>av_buffersrc_add_frame</name><argument_list>(<argument><expr><name><name>ist</name><operator>-&gt;</operator><name>filters</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>filter</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>AVERROR_EOF</name> <operator>&amp;&amp;</operator> <name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Flush the frame error.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>term_exit_sigsafe</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_TERMIOS_H</name></expr></cpp:if>

<if_stmt><if>if<condition>(<expr><name>restore_tty</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>tcsetattr</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>TCSANOW</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>oldtty</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>term_exit</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_QUIET</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>term_exit_sigsafe</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>volatile</specifier> <name>int</name></type> <name>received_sigterm</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>volatile</specifier> <name>int</name></type> <name>received_nb_signals</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>atomic_int</name></type> <name>transcode_init_done</name> <init>= <expr><call><name>ATOMIC_VAR_INIT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>volatile</specifier> <name>int</name></type> <name>ffmpeg_exited</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>main_return_code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>sigterm_handler</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>sig</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name>received_sigterm</name> <operator>=</operator> <name>sig</name></expr>;</expr_stmt>

<expr_stmt><expr><name>received_nb_signals</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>term_exit_sigsafe</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>received_nb_signals</name> <operator>&gt;</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>write</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"Received &gt; 3 system signals, hard exiting\n"</literal></expr></argument>,

<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><literal type="string">"Received &gt; 3 system signals, hard exiting\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> </block_content>}</block></if></if_stmt><empty_stmt>;</empty_stmt>

<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">123</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_SETCONSOLECTRLHANDLER</name></expr></cpp:if>

<function><type><specifier>static</specifier> <name>BOOL</name> <name>WINAPI</name></type> <name>CtrlHandler</name><parameter_list>(<parameter><decl><type><name>DWORD</name></type> <name>fdwCtrlType</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"\nReceived windows signal %ld\n"</literal></expr></argument>, <argument><expr><name>fdwCtrlType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>fdwCtrlType</name></expr>)</condition>

<block>{<block_content>

<case>case <expr><name>CTRL_C_EVENT</name></expr>:</case>

<case>case <expr><name>CTRL_BREAK_EVENT</name></expr>:</case>

<expr_stmt><expr><call><name>sigterm_handler</name><argument_list>(<argument><expr><name>SIGINT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>TRUE</name></expr>;</return>

<case>case <expr><name>CTRL_CLOSE_EVENT</name></expr>:</case>

<case>case <expr><name>CTRL_LOGOFF_EVENT</name></expr>:</case>

<case>case <expr><name>CTRL_SHUTDOWN_EVENT</name></expr>:</case>

<expr_stmt><expr><call><name>sigterm_handler</name><argument_list>(<argument><expr><name>SIGTERM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>!</operator><name>ffmpeg_exited</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>Sleep</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<return>return <expr><name>TRUE</name></expr>;</return>

<default>default:</default>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Received unknown windows signal %ld\n"</literal></expr></argument>, <argument><expr><name>fdwCtrlType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>FALSE</name></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>void</name></type> <name>term_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_TERMIOS_H</name></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>run_as_daemon</name> <operator>&amp;&amp;</operator> <name>stdin_interaction</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>termios</name></name></type> <name>tty</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>tcgetattr</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>tty</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>oldtty</name> <operator>=</operator> <name>tty</name></expr>;</expr_stmt>

<expr_stmt><expr><name>restore_tty</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tty</name><operator>.</operator><name>c_iflag</name></name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>IGNBRK</name><operator>|</operator><name>BRKINT</name><operator>|</operator><name>PARMRK</name><operator>|</operator><name>ISTRIP</name>

<operator>|</operator><name>INLCR</name><operator>|</operator><name>IGNCR</name><operator>|</operator><name>ICRNL</name><operator>|</operator><name>IXON</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tty</name><operator>.</operator><name>c_oflag</name></name> <operator>|=</operator> <name>OPOST</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tty</name><operator>.</operator><name>c_lflag</name></name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>ECHO</name><operator>|</operator><name>ECHONL</name><operator>|</operator><name>ICANON</name><operator>|</operator><name>IEXTEN</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tty</name><operator>.</operator><name>c_cflag</name></name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>CSIZE</name><operator>|</operator><name>PARENB</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tty</name><operator>.</operator><name>c_cflag</name></name> <operator>|=</operator> <name>CS8</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tty</name><operator>.</operator><name>c_cc</name><index>[<expr><name>VMIN</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tty</name><operator>.</operator><name>c_cc</name><index>[<expr><name>VTIME</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tcsetattr</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>TCSANOW</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tty</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>signal</name><argument_list>(<argument><expr><name>SIGQUIT</name></expr></argument>, <argument><expr><name>sigterm_handler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>signal</name><argument_list>(<argument><expr><name>SIGINT</name></expr></argument> , <argument><expr><name>sigterm_handler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>signal</name><argument_list>(<argument><expr><name>SIGTERM</name></expr></argument>, <argument><expr><name>sigterm_handler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIGXCPU</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>signal</name><argument_list>(<argument><expr><name>SIGXCPU</name></expr></argument>, <argument><expr><name>sigterm_handler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIGPIPE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>signal</name><argument_list>(<argument><expr><name>SIGPIPE</name></expr></argument>, <argument><expr><name>SIG_IGN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_SETCONSOLECTRLHANDLER</name></expr></cpp:if>

<expr_stmt><expr><call><name>SetConsoleCtrlHandler</name><argument_list>(<argument><expr><operator>(</operator><name>PHANDLER_ROUTINE</name><operator>)</operator> <name>CtrlHandler</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>read_key</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>ch</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_TERMIOS_H</name></expr></cpp:if>

<decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>tv</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>fd_set</name></type> <name>rfds</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>FD_ZERO</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rfds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>FD_SET</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>rfds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tv</name><operator>.</operator><name>tv_sec</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tv</name><operator>.</operator><name>tv_usec</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>select</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>rfds</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>read</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>ch</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>n</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ch</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>n</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>HAVE_KBHIT</name></expr></cpp:elif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_PEEKNAMEDPIPE</name></expr></cpp:if>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>is_pipe</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>HANDLE</name></type> <name>input_handle</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>dw</name></decl>, <decl><type ref="prev"/><name>nchars</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>input_handle</name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name>input_handle</name> <operator>=</operator> <call><name>GetStdHandle</name><argument_list>(<argument><expr><name>STD_INPUT_HANDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>is_pipe</name> <operator>=</operator> <operator>!</operator><call><name>GetConsoleMode</name><argument_list>(<argument><expr><name>input_handle</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>is_pipe</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>PeekNamedPipe</name><argument_list>(<argument><expr><name>input_handle</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nchars</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>nchars</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>ch</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ch</name></expr>;</return>

</block_content>}</block></if><else>else<block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if<condition>(<expr><call><name>kbhit</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return<expr><operator>(</operator><call><name>getch</name><argument_list>()</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>decode_interrupt_cb</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name>received_nb_signals</name> <operator>&gt;</operator> <call><name>atomic_load</name><argument_list>(<argument><expr><operator>&amp;</operator><name>transcode_init_done</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>const</specifier> <name>AVIOInterruptCB</name></type> <name>int_cb</name> <init>= <expr><block>{ <expr><name>decode_interrupt_cb</name></expr>, <expr><name>NULL</name></expr> }</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ffmpeg_cleanup</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>ret</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>do_benchmark</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>maxrss</name> <init>= <expr><call><name>getmaxrss</name><argument_list>()</argument_list></call> <operator>/</operator> <literal type="number">1024</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"bench: maxrss=%ikB\n"</literal></expr></argument>, <argument><expr><name>maxrss</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nb_filtergraphs</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>FilterGraph</name> <modifier>*</modifier></type><name>fg</name> <init>= <expr><name><name>filtergraphs</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>avfilter_graph_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fg</name><operator>-&gt;</operator><name>graph</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>fg</name><operator>-&gt;</operator><name>nb_inputs</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<while>while <condition>(<expr><call><name>av_fifo_size</name><argument_list>(<argument><expr><name><name>fg</name><operator>-&gt;</operator><name>inputs</name><index>[<expr><name>j</name></expr>]</index></name><operator>-&gt;</operator><name>frame_queue</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>frame</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_fifo_generic_read</name><argument_list>(<argument><expr><name><name>fg</name><operator>-&gt;</operator><name>inputs</name><index>[<expr><name>j</name></expr>]</index></name><operator>-&gt;</operator><name>frame_queue</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>frame</name></expr></argument>,

<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>frame</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>av_fifo_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fg</name><operator>-&gt;</operator><name>inputs</name><index>[<expr><name>j</name></expr>]</index></name><operator>-&gt;</operator><name>frame_queue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>fg</name><operator>-&gt;</operator><name>inputs</name><index>[<expr><name>j</name></expr>]</index></name><operator>-&gt;</operator><name><name>ist</name><operator>-&gt;</operator><name>sub2video</name><operator>.</operator><name>sub_queue</name></name></expr>)</condition> <block>{<block_content>

<while>while <condition>(<expr><call><name>av_fifo_size</name><argument_list>(<argument><expr><name><name>fg</name><operator>-&gt;</operator><name>inputs</name><index>[<expr><name>j</name></expr>]</index></name><operator>-&gt;</operator><name><name>ist</name><operator>-&gt;</operator><name>sub2video</name><operator>.</operator><name>sub_queue</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>AVSubtitle</name></type> <name>sub</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_fifo_generic_read</name><argument_list>(<argument><expr><name><name>fg</name><operator>-&gt;</operator><name>inputs</name><index>[<expr><name>j</name></expr>]</index></name><operator>-&gt;</operator><name><name>ist</name><operator>-&gt;</operator><name>sub2video</name><operator>.</operator><name>sub_queue</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>sub</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sub</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avsubtitle_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sub</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>av_fifo_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fg</name><operator>-&gt;</operator><name>inputs</name><index>[<expr><name>j</name></expr>]</index></name><operator>-&gt;</operator><name><name>ist</name><operator>-&gt;</operator><name>sub2video</name><operator>.</operator><name>sub_queue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_buffer_unref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fg</name><operator>-&gt;</operator><name>inputs</name><index>[<expr><name>j</name></expr>]</index></name><operator>-&gt;</operator><name>hw_frames_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fg</name><operator>-&gt;</operator><name>inputs</name><index>[<expr><name>j</name></expr>]</index></name><operator>-&gt;</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fg</name><operator>-&gt;</operator><name>inputs</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fg</name><operator>-&gt;</operator><name>inputs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>fg</name><operator>-&gt;</operator><name>nb_outputs</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fg</name><operator>-&gt;</operator><name>outputs</name><index>[<expr><name>j</name></expr>]</index></name><operator>-&gt;</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fg</name><operator>-&gt;</operator><name>outputs</name><index>[<expr><name>j</name></expr>]</index></name><operator>-&gt;</operator><name>formats</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fg</name><operator>-&gt;</operator><name>outputs</name><index>[<expr><name>j</name></expr>]</index></name><operator>-&gt;</operator><name>channel_layouts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fg</name><operator>-&gt;</operator><name>outputs</name><index>[<expr><name>j</name></expr>]</index></name><operator>-&gt;</operator><name>sample_rates</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fg</name><operator>-&gt;</operator><name>outputs</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fg</name><operator>-&gt;</operator><name>outputs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fg</name><operator>-&gt;</operator><name>graph_desc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>filtergraphs</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>filtergraphs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>subtitle_out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nb_output_files</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>OutputFile</name> <modifier>*</modifier></type><name>of</name> <init>= <expr><name><name>output_files</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>of</name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <name><name>of</name><operator>-&gt;</operator><name>ctx</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>s</name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>oformat</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>oformat</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AVFMT_NOFILE</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>avio_closep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>avformat_free_context</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_dict_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>of</name><operator>-&gt;</operator><name>opts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>output_files</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nb_output_streams</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>OutputStream</name> <modifier>*</modifier></type><name>ost</name> <init>= <expr><name><name>output_streams</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ost</name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>ost</name><operator>-&gt;</operator><name>nb_bitstream_filters</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_bsf_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ost</name><operator>-&gt;</operator><name>bsf_ctx</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ost</name><operator>-&gt;</operator><name>bsf_ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ost</name><operator>-&gt;</operator><name>filtered_frame</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ost</name><operator>-&gt;</operator><name>last_frame</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_dict_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ost</name><operator>-&gt;</operator><name>encoder_opts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ost</name><operator>-&gt;</operator><name>forced_keyframes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_expr_free</name><argument_list>(<argument><expr><name><name>ost</name><operator>-&gt;</operator><name>forced_keyframes_pexpr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ost</name><operator>-&gt;</operator><name>avfilter</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ost</name><operator>-&gt;</operator><name>logfile_prefix</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ost</name><operator>-&gt;</operator><name>audio_channels_map</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ost</name><operator>-&gt;</operator><name>audio_channels_mapped</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_dict_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ost</name><operator>-&gt;</operator><name>sws_dict</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_dict_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ost</name><operator>-&gt;</operator><name>swr_opts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avcodec_free_context</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ost</name><operator>-&gt;</operator><name>enc_ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avcodec_parameters_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ost</name><operator>-&gt;</operator><name>ref_par</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ost</name><operator>-&gt;</operator><name>muxing_queue</name></name></expr>)</condition> <block>{<block_content>

<while>while <condition>(<expr><call><name>av_fifo_size</name><argument_list>(<argument><expr><name><name>ost</name><operator>-&gt;</operator><name>muxing_queue</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>AVPacket</name></type> <name>pkt</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_fifo_generic_read</name><argument_list>(<argument><expr><name><name>ost</name><operator>-&gt;</operator><name>muxing_queue</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pkt</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>pkt</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_packet_unref</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>av_fifo_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ost</name><operator>-&gt;</operator><name>muxing_queue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>output_streams</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_THREADS</name></expr></cpp:if>

<expr_stmt><expr><call><name>free_input_threads</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nb_input_files</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>avformat_close_input</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>input_files</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>input_files</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nb_input_streams</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>InputStream</name> <modifier>*</modifier></type><name>ist</name> <init>= <expr><name><name>input_streams</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ist</name><operator>-&gt;</operator><name>decoded_frame</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ist</name><operator>-&gt;</operator><name>filter_frame</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_dict_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ist</name><operator>-&gt;</operator><name>decoder_opts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avsubtitle_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ist</name><operator>-&gt;</operator><name>prev_sub</name><operator>.</operator><name>subtitle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ist</name><operator>-&gt;</operator><name>sub2video</name><operator>.</operator><name>frame</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ist</name><operator>-&gt;</operator><name>filters</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ist</name><operator>-&gt;</operator><name>hwaccel_device</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ist</name><operator>-&gt;</operator><name>dts_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avcodec_free_context</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ist</name><operator>-&gt;</operator><name>dec_ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>input_streams</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>vstats_file</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>fclose</name><argument_list>(<argument><expr><name>vstats_file</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"Error closing vstats file, loss of information possible: %s\n"</literal></expr></argument>,

<argument><expr><call><name>av_err2str</name><argument_list>(<argument><expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>vstats_filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>input_streams</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>input_files</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>output_streams</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>output_files</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>uninit_opts</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avformat_network_deinit</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>received_sigterm</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"Exiting normally, received signal %d.\n"</literal></expr></argument>,

<argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name>received_sigterm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>ret</name> <operator>&amp;&amp;</operator> <call><name>atomic_load</name><argument_list>(<argument><expr><operator>&amp;</operator><name>transcode_init_done</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"Conversion failed!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>term_exit</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ffmpeg_exited</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>remove_avoptions</name><parameter_list>(<parameter><decl><type><name>AVDictionary</name> <modifier>*</modifier><modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>AVDictionary</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVDictionaryEntry</name> <modifier>*</modifier></type><name>t</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><operator>(</operator><name>t</name> <operator>=</operator> <call><name>av_dict_get</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><name>AV_DICT_IGNORE_SUFFIX</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_dict_set</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name><name>t</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_DICT_MATCH_CASE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>assert_avoptions</name><parameter_list>(<parameter><decl><type><name>AVDictionary</name> <modifier>*</modifier></type><name>m</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVDictionaryEntry</name> <modifier>*</modifier></type><name>t</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>t</name> <operator>=</operator> <call><name>av_dict_get</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_DICT_IGNORE_SUFFIX</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_FATAL</name></expr></argument>, <argument><expr><literal type="string">"Option %s not found.\n"</literal></expr></argument>, <argument><expr><name><name>t</name><operator>-&gt;</operator><name>key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>exit_program</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>abort_codec_experimental</name><parameter_list>(<parameter><decl><type><name>AVCodec</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>encoder</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>exit_program</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>update_benchmark</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>do_benchmark_all</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>BenchmarkTimeStamps</name></type> <name>t</name> <init>= <expr><call><name>get_benchmark_time_stamps</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>va_list</name></type> <name>va</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>fmt</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>va</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vsnprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>va</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>va</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>,

<argument><expr><literal type="string">"bench: %8"</literal> <name>PRIu64</name> <literal type="string">" user %8"</literal> <name>PRIu64</name> <literal type="string">" sys %8"</literal> <name>PRIu64</name> <literal type="string">" real %s \n"</literal></expr></argument>,

<argument><expr><name><name>t</name><operator>.</operator><name>user_usec</name></name> <operator>-</operator> <name><name>current_time</name><operator>.</operator><name>user_usec</name></name></expr></argument>,

<argument><expr><name><name>t</name><operator>.</operator><name>sys_usec</name></name> <operator>-</operator> <name><name>current_time</name><operator>.</operator><name>sys_usec</name></name></expr></argument>,

<argument><expr><name><name>t</name><operator>.</operator><name>real_usec</name></name> <operator>-</operator> <name><name>current_time</name><operator>.</operator><name>real_usec</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>current_time</name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>close_all_output_streams</name><parameter_list>(<parameter><decl><type><name>OutputStream</name> <modifier>*</modifier></type><name>ost</name></decl></parameter>, <parameter><decl><type><name>OSTFinished</name></type> <name>this_stream</name></decl></parameter>, <parameter><decl><type><name>OSTFinished</name></type> <name>others</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nb_output_streams</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>OutputStream</name> <modifier>*</modifier></type><name>ost2</name> <init>= <expr><name><name>output_streams</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>ost2</name><operator>-&gt;</operator><name>finished</name></name> <operator>|=</operator> <ternary><condition><expr><name>ost</name> <operator>==</operator> <name>ost2</name></expr> ?</condition><then> <expr><name>this_stream</name></expr> </then><else>: <expr><name>others</name></expr></else></ternary></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>write_packet</name><parameter_list>(<parameter><decl><type><name>OutputFile</name> <modifier>*</modifier></type><name>of</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>, <parameter><decl><type><name>OutputStream</name> <modifier>*</modifier></type><name>ost</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>unqueue</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>of</name><operator>-&gt;</operator><name>ctx</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVStream</name> <modifier>*</modifier></type><name>st</name> <init>= <expr><name><name>ost</name><operator>-&gt;</operator><name>st</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_type</name></name> <operator>==</operator> <name>AVMEDIA_TYPE_VIDEO</name> <operator>&amp;&amp;</operator> <name><name>ost</name><operator>-&gt;</operator><name>encoding_needed</name></name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><name>unqueue</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>ost</name><operator>-&gt;</operator><name>frame_number</name></name> <operator>&gt;=</operator> <name><name>ost</name><operator>-&gt;</operator><name>max_frames</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_packet_unref</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ost</name><operator>-&gt;</operator><name>frame_number</name></name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>of</name><operator>-&gt;</operator><name>header_written</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>AVPacket</name></type> <name>tmp_pkt</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>av_fifo_space</name><argument_list>(<argument><expr><name><name>ost</name><operator>-&gt;</operator><name>muxing_queue</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>new_size</name> <init>= <expr><call><name>FFMIN</name><argument_list>(<argument><expr><literal type="number">2</literal> <operator>*</operator> <call><name>av_fifo_size</name><argument_list>(<argument><expr><name><name>ost</name><operator>-&gt;</operator><name>muxing_queue</name></name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name><name>ost</name><operator>-&gt;</operator><name>max_muxing_queue_size</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>new_size</name> <operator>&lt;=</operator> <call><name>av_fifo_size</name><argument_list>(<argument><expr><name><name>ost</name><operator>-&gt;</operator><name>muxing_queue</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"Too many packets buffered for output stream %d:%d.\n"</literal></expr></argument>,

<argument><expr><name><name>ost</name><operator>-&gt;</operator><name>file_index</name></name></expr></argument>, <argument><expr><name><name>ost</name><operator>-&gt;</operator><name>st</name><operator>-&gt;</operator><name>index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>exit_program</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>av_fifo_realloc2</name><argument_list>(<argument><expr><name><name>ost</name><operator>-&gt;</operator><name>muxing_queue</name></name></expr></argument>, <argument><expr><name>new_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>exit_program</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>av_packet_make_refcounted</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>exit_program</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_packet_move_ref</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tmp_pkt</name></expr></argument>, <argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_fifo_generic_write</name><argument_list>(<argument><expr><name><name>ost</name><operator>-&gt;</operator><name>muxing_queue</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmp_pkt</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tmp_pkt</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_type</name></name> <operator>==</operator> <name>AVMEDIA_TYPE_VIDEO</name> <operator>&amp;&amp;</operator> <name>video_sync_method</name> <operator>==</operator> <name>VSYNC_DROP</name><operator>)</operator> <operator>||</operator>

<operator>(</operator><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_type</name></name> <operator>==</operator> <name>AVMEDIA_TYPE_AUDIO</name> <operator>&amp;&amp;</operator> <name>audio_sync_method</name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>pts</name></name> <operator>=</operator> <name><name>pkt</name><operator>-&gt;</operator><name>dts</name></name> <operator>=</operator> <name>AV_NOPTS_VALUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_type</name></name> <operator>==</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>sd</name> <init>= <expr><call><name>av_packet_get_side_data</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>, <argument><expr><name>AV_PKT_DATA_QUALITY_STATS</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>ost</name><operator>-&gt;</operator><name>quality</name></name> <operator>=</operator> <ternary><condition><expr><name>sd</name></expr> ?</condition><then> <expr><call><name>AV_RL32</name><argument_list>(<argument><expr><name>sd</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ost</name><operator>-&gt;</operator><name>pict_type</name></name> <operator>=</operator> <ternary><condition><expr><name>sd</name></expr> ?</condition><then> <expr><name><name>sd</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr> </then><else>: <expr><name>AV_PICTURE_TYPE_NONE</name></expr></else></ternary></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name><name>ost</name><operator>-&gt;</operator><name>error</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>sd</name> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;</operator> <name><name>sd</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ost</name><operator>-&gt;</operator><name>error</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>AV_RL64</name><argument_list>(<argument><expr><name>sd</name> <operator>+</operator> <literal type="number">8</literal> <operator>+</operator> <literal type="number">8</literal><operator>*</operator><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ost</name><operator>-&gt;</operator><name>error</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>ost</name><operator>-&gt;</operator><name>frame_rate</name><operator>.</operator><name>num</name></name> <operator>&amp;&amp;</operator> <name><name>ost</name><operator>-&gt;</operator><name>is_cfr</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>pkt</name><operator>-&gt;</operator><name>duration</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Overriding packet duration by frame rate, this should not happen\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>duration</name></name> <operator>=</operator> <call><name>av_rescale_q</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name>av_inv_q</name><argument_list>(<argument><expr><name><name>ost</name><operator>-&gt;</operator><name>frame_rate</name></name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name><name>ost</name><operator>-&gt;</operator><name>mux_timebase</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_packet_rescale_ts</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>, <argument><expr><name><name>ost</name><operator>-&gt;</operator><name>mux_timebase</name></name></expr></argument>, <argument><expr><name><name>ost</name><operator>-&gt;</operator><name>st</name><operator>-&gt;</operator><name>time_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>oformat</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AVFMT_NOTIMESTAMPS</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>pkt</name><operator>-&gt;</operator><name>dts</name></name> <operator>!=</operator> <name>AV_NOPTS_VALUE</name> <operator>&amp;&amp;</operator>

<name><name>pkt</name><operator>-&gt;</operator><name>pts</name></name> <operator>!=</operator> <name>AV_NOPTS_VALUE</name> <operator>&amp;&amp;</operator>

<name><name>pkt</name><operator>-&gt;</operator><name>dts</name></name> <operator>&gt;</operator> <name><name>pkt</name><operator>-&gt;</operator><name>pts</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Invalid DTS: %"</literal><name>PRId64</name><literal type="string">" PTS: %"</literal><name>PRId64</name><literal type="string">" in output stream %d:%d, replacing by guess\n"</literal></expr></argument>,

<argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>dts</name></name></expr></argument>, <argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>pts</name></name></expr></argument>,

<argument><expr><name><name>ost</name><operator>-&gt;</operator><name>file_index</name></name></expr></argument>, <argument><expr><name><name>ost</name><operator>-&gt;</operator><name>st</name><operator>-&gt;</operator><name>index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>pts</name></name> <operator>=</operator>

<name><name>pkt</name><operator>-&gt;</operator><name>dts</name></name> <operator>=</operator> <name><name>pkt</name><operator>-&gt;</operator><name>pts</name></name> <operator>+</operator> <name><name>pkt</name><operator>-&gt;</operator><name>dts</name></name> <operator>+</operator> <name><name>ost</name><operator>-&gt;</operator><name>last_mux_dts</name></name> <operator>+</operator> <literal type="number">1</literal>

<operator>-</operator> <call><name>FFMIN3</name><argument_list>(<argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>pts</name></name></expr></argument>, <argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>dts</name></name></expr></argument>, <argument><expr><name><name>ost</name><operator>-&gt;</operator><name>last_mux_dts</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call>

<operator>-</operator> <call><name>FFMAX3</name><argument_list>(<argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>pts</name></name></expr></argument>, <argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>dts</name></name></expr></argument>, <argument><expr><name><name>ost</name><operator>-&gt;</operator><name>last_mux_dts</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_type</name></name> <operator>==</operator> <name>AVMEDIA_TYPE_AUDIO</name> <operator>||</operator> <name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_type</name></name> <operator>==</operator> <name>AVMEDIA_TYPE_VIDEO</name> <operator>||</operator> <name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_type</name></name> <operator>==</operator> <name>AVMEDIA_TYPE_SUBTITLE</name><operator>)</operator> <operator>&amp;&amp;</operator>

<name><name>pkt</name><operator>-&gt;</operator><name>dts</name></name> <operator>!=</operator> <name>AV_NOPTS_VALUE</name> <operator>&amp;&amp;</operator>

<operator>!</operator><operator>(</operator><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_VP9</name> <operator>&amp;&amp;</operator> <name><name>ost</name><operator>-&gt;</operator><name>stream_copy</name></name><operator>)</operator> <operator>&amp;&amp;</operator>

<name><name>ost</name><operator>-&gt;</operator><name>last_mux_dts</name></name> <operator>!=</operator> <name>AV_NOPTS_VALUE</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int64_t</name></type> <name>max</name> <init>= <expr><name><name>ost</name><operator>-&gt;</operator><name>last_mux_dts</name></name> <operator>+</operator> <operator>!</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>oformat</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AVFMT_TS_NONSTRICT</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pkt</name><operator>-&gt;</operator><name>dts</name></name> <operator>&lt;</operator> <name>max</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>loglevel</name> <init>= <expr><ternary><condition><expr><name>max</name> <operator>-</operator> <name><name>pkt</name><operator>-&gt;</operator><name>dts</name></name> <operator>&gt;</operator> <literal type="number">2</literal> <operator>||</operator> <name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_type</name></name> <operator>==</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr> ?</condition><then> <expr><name>AV_LOG_WARNING</name></expr> </then><else>: <expr><name>AV_LOG_DEBUG</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>exit_on_error</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>loglevel</name> <operator>=</operator> <name>AV_LOG_ERROR</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>loglevel</name></expr></argument>, <argument><expr><literal type="string">"Non-monotonous DTS in output stream "</literal>

<literal type="string">"%d:%d; previous: %"</literal><name>PRId64</name><literal type="string">", current: %"</literal><name>PRId64</name><literal type="string">"; "</literal></expr></argument>,

<argument><expr><name><name>ost</name><operator>-&gt;</operator><name>file_index</name></name></expr></argument>, <argument><expr><name><name>ost</name><operator>-&gt;</operator><name>st</name><operator>-&gt;</operator><name>index</name></name></expr></argument>, <argument><expr><name><name>ost</name><operator>-&gt;</operator><name>last_mux_dts</name></name></expr></argument>, <argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>dts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>exit_on_error</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_FATAL</name></expr></argument>, <argument><expr><literal type="string">"aborting.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>exit_program</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>loglevel</name></expr></argument>, <argument><expr><literal type="string">"changing to %"</literal><name>PRId64</name><literal type="string">". This may result "</literal>

<literal type="string">"in incorrect timestamps in the output file.\n"</literal></expr></argument>,

<argument><expr><name>max</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pkt</name><operator>-&gt;</operator><name>pts</name></name> <operator>&gt;=</operator> <name><name>pkt</name><operator>-&gt;</operator><name>dts</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>pts</name></name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>pts</name></name></expr></argument>, <argument><expr><name>max</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>dts</name></name> <operator>=</operator> <name>max</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ost</name><operator>-&gt;</operator><name>last_mux_dts</name></name> <operator>=</operator> <name><name>pkt</name><operator>-&gt;</operator><name>dts</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ost</name><operator>-&gt;</operator><name>data_size</name></name> <operator>+=</operator> <name><name>pkt</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ost</name><operator>-&gt;</operator><name>packets_written</name></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>stream_index</name></name> <operator>=</operator> <name><name>ost</name><operator>-&gt;</operator><name>index</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>debug_ts</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"muxer &lt;- type:%s "</literal>

<literal type="string">"pkt_pts:%s pkt_pts_time:%s pkt_dts:%s pkt_dts_time:%s size:%d\n"</literal></expr></argument>,

<argument><expr><call><name>av_get_media_type_string</name><argument_list>(<argument><expr><name><name>ost</name><operator>-&gt;</operator><name>enc_ctx</name><operator>-&gt;</operator><name>codec_type</name></name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>av_ts2str</name><argument_list>(<argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>pts</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>av_ts2timestr</name><argument_list>(<argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>pts</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ost</name><operator>-&gt;</operator><name>st</name><operator>-&gt;</operator><name>time_base</name></name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>av_ts2str</name><argument_list>(<argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>dts</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>av_ts2timestr</name><argument_list>(<argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>dts</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ost</name><operator>-&gt;</operator><name>st</name><operator>-&gt;</operator><name>time_base</name></name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>size</name></name></expr></argument>

)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>av_interleaved_write_frame</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>print_error</name><argument_list>(<argument><expr><literal type="string">"av_interleaved_write_frame()"</literal></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>main_return_code</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>close_all_output_streams</name><argument_list>(<argument><expr><name>ost</name></expr></argument>, <argument><expr><name>MUXER_FINISHED</name> <operator>|</operator> <name>ENCODER_FINISHED</name></expr></argument>, <argument><expr><name>ENCODER_FINISHED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_packet_unref</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>close_output_stream</name><parameter_list>(<parameter><decl><type><name>OutputStream</name> <modifier>*</modifier></type><name>ost</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>OutputFile</name> <modifier>*</modifier></type><name>of</name> <init>= <expr><name><name>output_files</name><index>[<expr><name><name>ost</name><operator>-&gt;</operator><name>file_index</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>ost</name><operator>-&gt;</operator><name>finished</name></name> <operator>|=</operator> <name>ENCODER_FINISHED</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>of</name><operator>-&gt;</operator><name>shortest</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int64_t</name></type> <name>end</name> <init>= <expr><call><name>av_rescale_q</name><argument_list>(<argument><expr><name><name>ost</name><operator>-&gt;</operator><name>sync_opts</name></name> <operator>-</operator> <name><name>ost</name><operator>-&gt;</operator><name>first_pts</name></name></expr></argument>, <argument><expr><name><name>ost</name><operator>-&gt;</operator><name>enc_ctx</name><operator>-&gt;</operator><name>time_base</name></name></expr></argument>, <argument><expr><name>AV_TIME_BASE_Q</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>of</name><operator>-&gt;</operator><name>recording_time</name></name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name><name>of</name><operator>-&gt;</operator><name>recording_time</name></name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>output_packet</name><parameter_list>(<parameter><decl><type><name>OutputFile</name> <modifier>*</modifier></type><name>of</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>,

<parameter><decl><type><name>OutputStream</name> <modifier>*</modifier></type><name>ost</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>eof</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ost</name><operator>-&gt;</operator><name>nb_bitstream_filters</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>idx</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>av_bsf_send_packet</name><argument_list>(<argument><expr><name><name>ost</name><operator>-&gt;</operator><name>bsf_ctx</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><ternary><condition><expr><name>eof</name></expr> ?</condition><then> <expr><name>NULL</name></expr> </then><else>: <expr><name>pkt</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>finish</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>eof</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>idx</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<while>while <condition>(<expr><name>idx</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>av_bsf_receive_packet</name><argument_list>(<argument><expr><name><name>ost</name><operator>-&gt;</operator><name>bsf_ctx</name><index>[<expr><name>idx</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>EAGAIN</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>idx</name><operator>--</operator></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>ret</name> <operator>==</operator> <name>AVERROR_EOF</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>eof</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>finish</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>&lt;</operator> <name><name>ost</name><operator>-&gt;</operator><name>nb_bitstream_filters</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>av_bsf_send_packet</name><argument_list>(<argument><expr><name><name>ost</name><operator>-&gt;</operator><name>bsf_ctx</name><index>[<expr><name>idx</name></expr>]</index></name></expr></argument>, <argument><expr><ternary><condition><expr><name>eof</name></expr> ?</condition><then> <expr><name>NULL</name></expr> </then><else>: <expr><name>pkt</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>finish</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>idx</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>eof</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>eof</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>finish</name>;</goto></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>write_packet</name><argument_list>(<argument><expr><name>of</name></expr></argument>, <argument><expr><name>pkt</name></expr></argument>, <argument><expr><name>ost</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></while>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><name>eof</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>write_packet</name><argument_list>(<argument><expr><name>of</name></expr></argument>, <argument><expr><name>pkt</name></expr></argument>, <argument><expr><name>ost</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<label><name>finish</name>:</label>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>ret</name> <operator>!=</operator> <name>AVERROR_EOF</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Error applying bitstream filters to an output "</literal>

<literal type="string">"packet for stream #%d:%d.\n"</literal></expr></argument>, <argument><expr><name><name>ost</name><operator>-&gt;</operator><name>file_index</name></name></expr></argument>, <argument><expr><name><name>ost</name><operator>-&gt;</operator><name>index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>exit_on_error</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>exit_program</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>check_recording_time</name><parameter_list>(<parameter><decl><type><name>OutputStream</name> <modifier>*</modifier></type><name>ost</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>OutputFile</name> <modifier>*</modifier></type><name>of</name> <init>= <expr><name><name>output_files</name><index>[<expr><name><name>ost</name><operator>-&gt;</operator><name>file_index</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>of</name><operator>-&gt;</operator><name>recording_time</name></name> <operator>!=</operator> <name>INT64_MAX</name> <operator>&amp;&amp;</operator>

<call><name>av_compare_ts</name><argument_list>(<argument><expr><name><name>ost</name><operator>-&gt;</operator><name>sync_opts</name></name> <operator>-</operator> <name><name>ost</name><operator>-&gt;</operator><name>first_pts</name></name></expr></argument>, <argument><expr><name><name>ost</name><operator>-&gt;</operator><name>enc_ctx</name><operator>-&gt;</operator><name>time_base</name></name></expr></argument>, <argument><expr><name><name>of</name><operator>-&gt;</operator><name>recording_time</name></name></expr></argument>,

<argument><expr><name>AV_TIME_BASE_Q</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>close_output_stream</name><argument_list>(<argument><expr><name>ost</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>do_audio_out</name><parameter_list>(<parameter><decl><type><name>OutputFile</name> <modifier>*</modifier></type><name>of</name></decl></parameter>, <parameter><decl><type><name>OutputStream</name> <modifier>*</modifier></type><name>ost</name></decl></parameter>,

<parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>frame</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>enc</name> <init>= <expr><name><name>ost</name><operator>-&gt;</operator><name>enc_ctx</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVPacket</name></type> <name>pkt</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_init_packet</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pkt</name><operator>.</operator><name>data</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pkt</name><operator>.</operator><name>size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>check_recording_time</name><argument_list>(<argument><expr><name>ost</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>frame</name><operator>-&gt;</operator><name>pts</name></name> <operator>==</operator> <name>AV_NOPTS_VALUE</name> <operator>||</operator> <name>audio_sync_method</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>pts</name></name> <operator>=</operator> <name><name>ost</name><operator>-&gt;</operator><name>sync_opts</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>ost</name><operator>-&gt;</operator><name>sync_opts</name></name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>pts</name></name> <operator>+</operator> <name><name>frame</name><operator>-&gt;</operator><name>nb_samples</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ost</name><operator>-&gt;</operator><name>samples_encoded</name></name> <operator>+=</operator> <name><name>frame</name><operator>-&gt;</operator><name>nb_samples</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ost</name><operator>-&gt;</operator><name>frames_encoded</name></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name><name>pkt</name><operator>.</operator><name>size</name></name> <operator>||</operator> <operator>!</operator><name><name>pkt</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>update_benchmark</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>debug_ts</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"encoder &lt;- type:audio "</literal>

<literal type="string">"frame_pts:%s frame_pts_time:%s time_base:%d/%d\n"</literal></expr></argument>,

<argument><expr><call><name>av_ts2str</name><argument_list>(<argument><expr><name><name>frame</name><operator>-&gt;</operator><name>pts</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>av_ts2timestr</name><argument_list>(<argument><expr><name><name>frame</name><operator>-&gt;</operator><name>pts</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>enc</name><operator>-&gt;</operator><name>time_base</name></name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name><name>enc</name><operator>-&gt;</operator><name>time_base</name><operator>.</operator><name>num</name></name></expr></argument>, <argument><expr><name><name>enc</name><operator>-&gt;</operator><name>time_base</name><operator>.</operator><name>den</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>avcodec_send_frame</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><name>frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>avcodec_receive_packet</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>EAGAIN</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>update_benchmark</name><argument_list>(<argument><expr><literal type="string">"encode_audio %d.%d"</literal></expr></argument>, <argument><expr><name><name>ost</name><operator>-&gt;</operator><name>file_index</name></name></expr></argument>, <argument><expr><name><name>ost</name><operator>-&gt;</operator><name>index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_packet_rescale_ts</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pkt</name></expr></argument>, <argument><expr><name><name>enc</name><operator>-&gt;</operator><name>time_base</name></name></expr></argument>, <argument><expr><name><name>ost</name><operator>-&gt;</operator><name>mux_timebase</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>debug_ts</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"encoder -&gt; type:audio "</literal>

<literal type="string">"pkt_pts:%s pkt_pts_time:%s pkt_dts:%s pkt_dts_time:%s\n"</literal></expr></argument>,

<argument><expr><call><name>av_ts2str</name><argument_list>(<argument><expr><name><name>pkt</name><operator>.</operator><name>pts</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>av_ts2timestr</name><argument_list>(<argument><expr><name><name>pkt</name><operator>.</operator><name>pts</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>enc</name><operator>-&gt;</operator><name>time_base</name></name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>av_ts2str</name><argument_list>(<argument><expr><name><name>pkt</name><operator>.</operator><name>dts</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>av_ts2timestr</name><argument_list>(<argument><expr><name><name>pkt</name><operator>.</operator><name>dts</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>enc</name><operator>-&gt;</operator><name>time_base</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>output_packet</name><argument_list>(<argument><expr><name>of</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pkt</name></expr></argument>, <argument><expr><name>ost</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<return>return;</return>

<label><name>error</name>:</label>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_FATAL</name></expr></argument>, <argument><expr><literal type="string">"Audio encoding failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>exit_program</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>do_subtitle_out</name><parameter_list>(<parameter><decl><type><name>OutputFile</name> <modifier>*</modifier></type><name>of</name></decl></parameter>,

<parameter><decl><type><name>OutputStream</name> <modifier>*</modifier></type><name>ost</name></decl></parameter>,

<parameter><decl><type><name>AVSubtitle</name> <modifier>*</modifier></type><name>sub</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>subtitle_out_max_size</name> <init>= <expr><literal type="number">1024</literal> <operator>*</operator> <literal type="number">1024</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>subtitle_out_size</name></decl>, <decl><type ref="prev"/><name>nb</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>enc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVPacket</name></type> <name>pkt</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>pts</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sub</name><operator>-&gt;</operator><name>pts</name></name> <operator>==</operator> <name>AV_NOPTS_VALUE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Subtitle packets must have a pts\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>exit_on_error</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>exit_program</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>enc</name> <operator>=</operator> <name><name>ost</name><operator>-&gt;</operator><name>enc_ctx</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>subtitle_out</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>subtitle_out</name> <operator>=</operator> <call><name>av_malloc</name><argument_list>(<argument><expr><name>subtitle_out_max_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>subtitle_out</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_FATAL</name></expr></argument>, <argument><expr><literal type="string">"Failed to allocate subtitle_out\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>exit_program</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>enc</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_DVB_SUBTITLE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>nb</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>nb</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>pts</name> <operator>=</operator> <name><name>sub</name><operator>-&gt;</operator><name>pts</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>output_files</name><index>[<expr><name><name>ost</name><operator>-&gt;</operator><name>file_index</name></name></expr>]</index></name><operator>-&gt;</operator><name>start_time</name> <operator>!=</operator> <name>AV_NOPTS_VALUE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>pts</name> <operator>-=</operator> <name><name>output_files</name><index>[<expr><name><name>ost</name><operator>-&gt;</operator><name>file_index</name></name></expr>]</index></name><operator>-&gt;</operator><name>start_time</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nb</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name></type> <name>save_num_rects</name> <init>= <expr><name><name>sub</name><operator>-&gt;</operator><name>num_rects</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>ost</name><operator>-&gt;</operator><name>sync_opts</name></name> <operator>=</operator> <call><name>av_rescale_q</name><argument_list>(<argument><expr><name>pts</name></expr></argument>, <argument><expr><name>AV_TIME_BASE_Q</name></expr></argument>, <argument><expr><name><name>enc</name><operator>-&gt;</operator><name>time_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>check_recording_time</name><argument_list>(<argument><expr><name>ost</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>sub</name><operator>-&gt;</operator><name>pts</name></name> <operator>=</operator> <name>pts</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sub</name><operator>-&gt;</operator><name>pts</name></name> <operator>+=</operator> <macro><name>av_rescale_q</name><argument_list>(<argument>sub-&gt;start_display_time</argument>, <argument>(AVRational){ <literal type="number">1</literal></argument>, <argument><literal type="number">1000</literal> }</argument>, <argument>AV_TIME_BASE_Q</argument>)</argument_list></macro></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sub</name><operator>-&gt;</operator><name>end_display_time</name></name> <operator>-=</operator> <name><name>sub</name><operator>-&gt;</operator><name>start_display_time</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sub</name><operator>-&gt;</operator><name>start_display_time</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>sub</name><operator>-&gt;</operator><name>num_rects</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>ost</name><operator>-&gt;</operator><name>frames_encoded</name></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>subtitle_out_size</name> <operator>=</operator> <call><name>avcodec_encode_subtitle</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><name>subtitle_out</name></expr></argument>,

<argument><expr><name>subtitle_out_max_size</name></expr></argument>, <argument><expr><name>sub</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>sub</name><operator>-&gt;</operator><name>num_rects</name></name> <operator>=</operator> <name>save_num_rects</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>subtitle_out_size</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_FATAL</name></expr></argument>, <argument><expr><literal type="string">"Subtitle encoding failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>exit_program</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_init_packet</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pkt</name><operator>.</operator><name>data</name></name> <operator>=</operator> <name>subtitle_out</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pkt</name><operator>.</operator><name>size</name></name> <operator>=</operator> <name>subtitle_out_size</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pkt</name><operator>.</operator><name>pts</name></name> <operator>=</operator> <call><name>av_rescale_q</name><argument_list>(<argument><expr><name><name>sub</name><operator>-&gt;</operator><name>pts</name></name></expr></argument>, <argument><expr><name>AV_TIME_BASE_Q</name></expr></argument>, <argument><expr><name><name>ost</name><operator>-&gt;</operator><name>mux_timebase</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pkt</name><operator>.</operator><name>duration</name></name> <operator>=</operator> <macro><name>av_rescale_q</name><argument_list>(<argument>sub-&gt;end_display_time</argument>, <argument>(AVRational){ <literal type="number">1</literal></argument>, <argument><literal type="number">1000</literal> }</argument>, <argument>ost-&gt;mux_timebase</argument>)</argument_list></macro></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>enc</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_DVB_SUBTITLE</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>pkt</name><operator>.</operator><name>pts</name></name> <operator>+=</operator> <macro><name>av_rescale_q</name><argument_list>(<argument>sub-&gt;start_display_time</argument>, <argument>(AVRational){ <literal type="number">1</literal></argument>, <argument><literal type="number">1000</literal> }</argument>, <argument>ost-&gt;mux_timebase</argument>)</argument_list></macro></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>pkt</name><operator>.</operator><name>pts</name></name> <operator>+=</operator> <macro><name>av_rescale_q</name><argument_list>(<argument>sub-&gt;end_display_time</argument>, <argument>(AVRational){ <literal type="number">1</literal></argument>, <argument><literal type="number">1000</literal> }</argument>, <argument>ost-&gt;mux_timebase</argument>)</argument_list></macro></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>pkt</name><operator>.</operator><name>dts</name></name> <operator>=</operator> <name><name>pkt</name><operator>.</operator><name>pts</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>output_packet</name><argument_list>(<argument><expr><name>of</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pkt</name></expr></argument>, <argument><expr><name>ost</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>do_video_out</name><parameter_list>(<parameter><decl><type><name>OutputFile</name> <modifier>*</modifier></type><name>of</name></decl></parameter>,

<parameter><decl><type><name>OutputStream</name> <modifier>*</modifier></type><name>ost</name></decl></parameter>,

<parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>next_picture</name></decl></parameter>,

<parameter><decl><type><name>double</name></type> <name>sync_ipts</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>, <decl><type ref="prev"/><name>format_video_sync</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVPacket</name></type> <name>pkt</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>enc</name> <init>= <expr><name><name>ost</name><operator>-&gt;</operator><name>enc_ctx</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVCodecParameters</name> <modifier>*</modifier></type><name>mux_par</name> <init>= <expr><name><name>ost</name><operator>-&gt;</operator><name>st</name><operator>-&gt;</operator><name>codecpar</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVRational</name></type> <name>frame_rate</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>nb_frames</name></decl>, <decl><type ref="prev"/><name>nb0_frames</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>delta</name></decl>, <decl><type ref="prev"/><name>delta0</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>duration</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>frame_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>InputStream</name> <modifier>*</modifier></type><name>ist</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>filter</name> <init>= <expr><name><name>ost</name><operator>-&gt;</operator><name>filter</name><operator>-&gt;</operator><name>filter</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ost</name><operator>-&gt;</operator><name>source_index</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>ist</name> <operator>=</operator> <name><name>input_streams</name><index>[<expr><name><name>ost</name><operator>-&gt;</operator><name>source_index</name></name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>frame_rate</name> <operator>=</operator> <call><name>av_buffersink_get_frame_rate</name><argument_list>(<argument><expr><name>filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>frame_rate</name><operator>.</operator><name>num</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>frame_rate</name><operator>.</operator><name>den</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>duration</name> <operator>=</operator> <literal type="number">1</literal><operator>/</operator><operator>(</operator><call><name>av_q2d</name><argument_list>(<argument><expr><name>frame_rate</name></expr></argument>)</argument_list></call> <operator>*</operator> <call><name>av_q2d</name><argument_list>(<argument><expr><name><name>enc</name><operator>-&gt;</operator><name>time_base</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>ist</name> <operator>&amp;&amp;</operator> <name><name>ist</name><operator>-&gt;</operator><name>st</name><operator>-&gt;</operator><name>start_time</name></name> <operator>!=</operator> <name>AV_NOPTS_VALUE</name> <operator>&amp;&amp;</operator> <name><name>ist</name><operator>-&gt;</operator><name>st</name><operator>-&gt;</operator><name>first_dts</name></name> <operator>!=</operator> <name>AV_NOPTS_VALUE</name> <operator>&amp;&amp;</operator> <name><name>ost</name><operator>-&gt;</operator><name>frame_rate</name><operator>.</operator><name>num</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>duration</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>duration</name></expr></argument>, <argument><expr><literal type="number">1</literal><operator>/</operator><operator>(</operator><call><name>av_q2d</name><argument_list>(<argument><expr><name><name>ost</name><operator>-&gt;</operator><name>frame_rate</name></name></expr></argument>)</argument_list></call> <operator>*</operator> <call><name>av_q2d</name><argument_list>(<argument><expr><name><name>enc</name><operator>-&gt;</operator><name>time_base</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ost</name><operator>-&gt;</operator><name>filters_script</name></name> <operator>&amp;&amp;</operator>

<operator>!</operator><name><name>ost</name><operator>-&gt;</operator><name>filters</name></name> <operator>&amp;&amp;</operator>

<operator>(</operator><name>nb_filtergraphs</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <operator>!</operator><name><name>filtergraphs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>graph_desc</name><operator>)</operator> <operator>&amp;&amp;</operator>

<name>next_picture</name> <operator>&amp;&amp;</operator>

<name>ist</name> <operator>&amp;&amp;</operator>

<call><name>lrintf</name><argument_list>(<argument><expr><name><name>next_picture</name><operator>-&gt;</operator><name>pkt_duration</name></name> <operator>*</operator> <call><name>av_q2d</name><argument_list>(<argument><expr><name><name>ist</name><operator>-&gt;</operator><name>st</name><operator>-&gt;</operator><name>time_base</name></name></expr></argument>)</argument_list></call> <operator>/</operator> <call><name>av_q2d</name><argument_list>(<argument><expr><name><name>enc</name><operator>-&gt;</operator><name>time_base</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>duration</name> <operator>=</operator> <call><name>lrintf</name><argument_list>(<argument><expr><name><name>next_picture</name><operator>-&gt;</operator><name>pkt_duration</name></name> <operator>*</operator> <call><name>av_q2d</name><argument_list>(<argument><expr><name><name>ist</name><operator>-&gt;</operator><name>st</name><operator>-&gt;</operator><name>time_base</name></name></expr></argument>)</argument_list></call> <operator>/</operator> <call><name>av_q2d</name><argument_list>(<argument><expr><name><name>enc</name><operator>-&gt;</operator><name>time_base</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>next_picture</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>nb0_frames</name> <operator>=</operator> <name>nb_frames</name> <operator>=</operator> <call><name>mid_pred</name><argument_list>(<argument><expr><name><name>ost</name><operator>-&gt;</operator><name>last_nb0_frames</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,

<argument><expr><name><name>ost</name><operator>-&gt;</operator><name>last_nb0_frames</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,

<argument><expr><name><name>ost</name><operator>-&gt;</operator><name>last_nb0_frames</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>delta0</name> <operator>=</operator> <name>sync_ipts</name> <operator>-</operator> <name><name>ost</name><operator>-&gt;</operator><name>sync_opts</name></name></expr>;</expr_stmt> 

<expr_stmt><expr><name>delta</name> <operator>=</operator> <name>delta0</name> <operator>+</operator> <name>duration</name></expr>;</expr_stmt>

<expr_stmt><expr><name>nb0_frames</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name>nb_frames</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>format_video_sync</name> <operator>=</operator> <name>video_sync_method</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>format_video_sync</name> <operator>==</operator> <name>VSYNC_AUTO</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>of</name><operator>-&gt;</operator><name>ctx</name><operator>-&gt;</operator><name>oformat</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="string">"avi"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>format_video_sync</name> <operator>=</operator> <name>VSYNC_VFR</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>format_video_sync</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>of</name><operator>-&gt;</operator><name>ctx</name><operator>-&gt;</operator><name>oformat</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AVFMT_VARIABLE_FPS</name><operator>)</operator></expr> ?</condition><then> <expr><operator>(</operator><ternary><condition><expr><operator>(</operator><name><name>of</name><operator>-&gt;</operator><name>ctx</name><operator>-&gt;</operator><name>oformat</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AVFMT_NOTIMESTAMPS</name><operator>)</operator></expr> ?</condition><then> <expr><name>VSYNC_PASSTHROUGH</name></expr> </then><else>: <expr><name>VSYNC_VFR</name></expr></else></ternary><operator>)</operator></expr> </then><else>: <expr><name>VSYNC_CFR</name></expr></else></ternary></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>( <expr><name>ist</name>

<operator>&amp;&amp;</operator> <name>format_video_sync</name> <operator>==</operator> <name>VSYNC_CFR</name>

<operator>&amp;&amp;</operator> <name><name>input_files</name><index>[<expr><name><name>ist</name><operator>-&gt;</operator><name>file_index</name></name></expr>]</index></name><operator>-&gt;</operator><name><name>ctx</name><operator>-&gt;</operator><name>nb_streams</name></name> <operator>==</operator> <literal type="number">1</literal>

<operator>&amp;&amp;</operator> <name><name>input_files</name><index>[<expr><name><name>ist</name><operator>-&gt;</operator><name>file_index</name></name></expr>]</index></name><operator>-&gt;</operator><name>input_ts_offset</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>format_video_sync</name> <operator>=</operator> <name>VSYNC_VSCFR</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>format_video_sync</name> <operator>==</operator> <name>VSYNC_CFR</name> <operator>&amp;&amp;</operator> <name>copy_ts</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>format_video_sync</name> <operator>=</operator> <name>VSYNC_VSCFR</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ost</name><operator>-&gt;</operator><name>is_cfr</name></name> <operator>=</operator> <operator>(</operator><name>format_video_sync</name> <operator>==</operator> <name>VSYNC_CFR</name> <operator>||</operator> <name>format_video_sync</name> <operator>==</operator> <name>VSYNC_VSCFR</name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>delta0</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>&amp;&amp;</operator>

<name>delta</name></expr></argument> &gt;</argument_list></name> <literal type="number">0</literal> <operator>&amp;&amp;</operator>

<name>format_video_sync</name> <operator>!=</operator> <name>VSYNC_PASSTHROUGH</name> <operator>&amp;&amp;</operator>

<name>format_video_sync</name> <operator>!=</operator> <name>VSYNC_DROP</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>delta0</name> <operator>&lt;</operator> <operator>-</operator><literal type="number">0.6</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_VERBOSE</name></expr></argument>, <argument><expr><literal type="string">"Past duration %f too large\n"</literal></expr></argument>, <argument><expr><operator>-</operator><name>delta0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Clipping frame in rate conversion by %f\n"</literal></expr></argument>, <argument><expr><operator>-</operator><name>delta0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>sync_ipts</name> <operator>=</operator> <name><name>ost</name><operator>-&gt;</operator><name>sync_opts</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>duration</name> <operator>+=</operator> <name>delta0</name></expr>;</expr_stmt>

<expr_stmt><expr><name>delta0</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><name>format_video_sync</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>VSYNC_VSCFR</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>ost</name><operator>-&gt;</operator><name>frame_number</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>delta0</name> <operator>&gt;=</operator> <literal type="number">0.5</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Not duplicating %d initial frames\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><call><name>lrintf</name><argument_list>(<argument><expr><name>delta0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>delta</name> <operator>=</operator> <name>duration</name></expr>;</expr_stmt>

<expr_stmt><expr><name>delta0</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ost</name><operator>-&gt;</operator><name>sync_opts</name></name> <operator>=</operator> <call><name>lrint</name><argument_list>(<argument><expr><name>sync_ipts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<case>case <expr><name>VSYNC_CFR</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name>frame_drop_threshold</name> <operator>&amp;&amp;</operator> <name>delta</name> <operator>&lt;</operator> <name>frame_drop_threshold</name> <operator>&amp;&amp;</operator> <name><name>ost</name><operator>-&gt;</operator><name>frame_number</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>nb_frames</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>delta</name> <operator>&lt;</operator> <operator>-</operator><literal type="number">1.1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>nb_frames</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>delta</name> <operator>&gt;</operator> <literal type="number">1.1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>nb_frames</name> <operator>=</operator> <call><name>lrintf</name><argument_list>(<argument><expr><name>delta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>delta0</name> <operator>&gt;</operator> <literal type="number">1.1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>nb0_frames</name> <operator>=</operator> <call><name>lrintf</name><argument_list>(<argument><expr><name>delta0</name> <operator>-</operator> <literal type="number">0.6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><name>VSYNC_VFR</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name>delta</name> <operator>&lt;=</operator> <operator>-</operator><literal type="number">0.6</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>nb_frames</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>delta</name> <operator>&gt;</operator> <literal type="number">0.6</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ost</name><operator>-&gt;</operator><name>sync_opts</name></name> <operator>=</operator> <call><name>lrint</name><argument_list>(<argument><expr><name>sync_ipts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<break>break;</break>

<case>case <expr><name>VSYNC_DROP</name></expr>:</case>

<case>case <expr><name>VSYNC_PASSTHROUGH</name></expr>:</case>

<expr_stmt><expr><name><name>ost</name><operator>-&gt;</operator><name>sync_opts</name></name> <operator>=</operator> <call><name>lrint</name><argument_list>(<argument><expr><name>sync_ipts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></switch>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>nb_frames</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>nb_frames</name></expr></argument>, <argument><expr><name><name>ost</name><operator>-&gt;</operator><name>max_frames</name></name> <operator>-</operator> <name><name>ost</name><operator>-&gt;</operator><name>frame_number</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>nb0_frames</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>nb0_frames</name></expr></argument>, <argument><expr><name>nb_frames</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name><name>ost</name><operator>-&gt;</operator><name>last_nb0_frames</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>,

<argument><expr><name><name>ost</name><operator>-&gt;</operator><name>last_nb0_frames</name></name></expr></argument>,

<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>ost</name><operator>-&gt;</operator><name>last_nb0_frames</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name><name>ost</name><operator>-&gt;</operator><name>last_nb0_frames</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ost</name><operator>-&gt;</operator><name>last_nb0_frames</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>nb0_frames</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>nb0_frames</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>ost</name><operator>-&gt;</operator><name>last_dropped</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>nb_frames_drop</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_VERBOSE</name></expr></argument>,

<argument><expr><literal type="string">"*** dropping frame %d from stream %d at ts %"</literal><name>PRId64</name><literal type="string">"\n"</literal></expr></argument>,

<argument><expr><name><name>ost</name><operator>-&gt;</operator><name>frame_number</name></name></expr></argument>, <argument><expr><name><name>ost</name><operator>-&gt;</operator><name>st</name><operator>-&gt;</operator><name>index</name></name></expr></argument>, <argument><expr><name><name>ost</name><operator>-&gt;</operator><name>last_frame</name><operator>-&gt;</operator><name>pts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>nb_frames</name> <operator>&gt;</operator> <operator>(</operator><name>nb0_frames</name> <operator>&amp;&amp;</operator> <name><name>ost</name><operator>-&gt;</operator><name>last_dropped</name></name><operator>)</operator> <operator>+</operator> <operator>(</operator><name>nb_frames</name> <operator>&gt;</operator> <name>nb0_frames</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>nb_frames</name> <operator>&gt;</operator> <name>dts_error_threshold</name> <operator>*</operator> <literal type="number">30</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"%d frame duplication too large, skipping\n"</literal></expr></argument>, <argument><expr><name>nb_frames</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>nb_frames_drop</name><operator>++</operator></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>nb_frames_dup</name> <operator>+=</operator> <name>nb_frames</name> <operator>-</operator> <operator>(</operator><name>nb0_frames</name> <operator>&amp;&amp;</operator> <name><name>ost</name><operator>-&gt;</operator><name>last_dropped</name></name><operator>)</operator> <operator>-</operator> <operator>(</operator><name>nb_frames</name> <operator>&gt;</operator> <name>nb0_frames</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_VERBOSE</name></expr></argument>, <argument><expr><literal type="string">"*** %d dup!\n"</literal></expr></argument>, <argument><expr><name>nb_frames</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>nb_frames_dup</name> <operator>&gt;</operator> <name>dup_warning</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"More than %d frames duplicated\n"</literal></expr></argument>, <argument><expr><name>dup_warning</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dup_warning</name> <operator>*=</operator> <literal type="number">10</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ost</name><operator>-&gt;</operator><name>last_dropped</name></name> <operator>=</operator> <name>nb_frames</name> <operator>==</operator> <name>nb0_frames</name> <operator>&amp;&amp;</operator> <name>next_picture</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nb_frames</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>in_picture</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>forced_keyframe</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>pts_time</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_init_packet</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pkt</name><operator>.</operator><name>data</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pkt</name><operator>.</operator><name>size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <name>nb0_frames</name> <operator>&amp;&amp;</operator> <name><name>ost</name><operator>-&gt;</operator><name>last_frame</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>in_picture</name> <operator>=</operator> <name><name>ost</name><operator>-&gt;</operator><name>last_frame</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>in_picture</name> <operator>=</operator> <name>next_picture</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>in_picture</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>in_picture</name><operator>-&gt;</operator><name>pts</name></name> <operator>=</operator> <name><name>ost</name><operator>-&gt;</operator><name>sync_opts</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>check_recording_time</name><argument_list>(<argument><expr><name>ost</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>enc</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <operator>(</operator><name>AV_CODEC_FLAG_INTERLACED_DCT</name> <operator>|</operator> <name>AV_CODEC_FLAG_INTERLACED_ME</name><operator>)</operator> <operator>&amp;&amp;</operator>

<name><name>ost</name><operator>-&gt;</operator><name>top_field_first</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>in_picture</name><operator>-&gt;</operator><name>top_field_first</name></name> <operator>=</operator> <operator>!</operator><operator>!</operator><name><name>ost</name><operator>-&gt;</operator><name>top_field_first</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>in_picture</name><operator>-&gt;</operator><name>interlaced_frame</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>enc</name><operator>-&gt;</operator><name>codec</name><operator>-&gt;</operator><name>id</name></name> <operator>==</operator> <name>AV_CODEC_ID_MJPEG</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>mux_par</name><operator>-&gt;</operator><name>field_order</name></name> <operator>=</operator> <ternary><condition><expr><name><name>in_picture</name><operator>-&gt;</operator><name>top_field_first</name></name></expr> ?</condition><then> <expr><name>AV_FIELD_TT</name></expr></then><else>:<expr><name>AV_FIELD_BB</name></expr></else></ternary></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>mux_par</name><operator>-&gt;</operator><name>field_order</name></name> <operator>=</operator> <ternary><condition><expr><name><name>in_picture</name><operator>-&gt;</operator><name>top_field_first</name></name></expr> ?</condition><then> <expr><name>AV_FIELD_TB</name></expr></then><else>:<expr><name>AV_FIELD_BT</name></expr></else></ternary></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>mux_par</name><operator>-&gt;</operator><name>field_order</name></name> <operator>=</operator> <name>AV_FIELD_PROGRESSIVE</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>in_picture</name><operator>-&gt;</operator><name>quality</name></name> <operator>=</operator> <name><name>enc</name><operator>-&gt;</operator><name>global_quality</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>in_picture</name><operator>-&gt;</operator><name>pict_type</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ost</name><operator>-&gt;</operator><name>forced_kf_ref_pts</name></name> <operator>==</operator> <name>AV_NOPTS_VALUE</name> <operator>&amp;&amp;</operator>

<name><name>in_picture</name><operator>-&gt;</operator><name>pts</name></name> <operator>!=</operator> <name>AV_NOPTS_VALUE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ost</name><operator>-&gt;</operator><name>forced_kf_ref_pts</name></name> <operator>=</operator> <name><name>in_picture</name><operator>-&gt;</operator><name>pts</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>pts_time</name> <operator>=</operator> <ternary><condition><expr><name><name>in_picture</name><operator>-&gt;</operator><name>pts</name></name> <operator>!=</operator> <name>AV_NOPTS_VALUE</name></expr> ?</condition><then>

<expr><operator>(</operator><name><name>in_picture</name><operator>-&gt;</operator><name>pts</name></name> <operator>-</operator> <name><name>ost</name><operator>-&gt;</operator><name>forced_kf_ref_pts</name></name><operator>)</operator> <operator>*</operator> <call><name>av_q2d</name><argument_list>(<argument><expr><name><name>enc</name><operator>-&gt;</operator><name>time_base</name></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>NAN</name></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ost</name><operator>-&gt;</operator><name>forced_kf_index</name></name> <operator>&lt;</operator> <name><name>ost</name><operator>-&gt;</operator><name>forced_kf_count</name></name> <operator>&amp;&amp;</operator>

<name><name>in_picture</name><operator>-&gt;</operator><name>pts</name></name> <operator>&gt;=</operator> <name><name>ost</name><operator>-&gt;</operator><name>forced_kf_pts</name><index>[<expr><name><name>ost</name><operator>-&gt;</operator><name>forced_kf_index</name></name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ost</name><operator>-&gt;</operator><name>forced_kf_index</name></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>forced_keyframe</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>ost</name><operator>-&gt;</operator><name>forced_keyframes_pexpr</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>double</name></type> <name>res</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>ost</name><operator>-&gt;</operator><name>forced_keyframes_expr_const_values</name><index>[<expr><name>FKF_T</name></expr>]</index></name> <operator>=</operator> <name>pts_time</name></expr>;</expr_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>av_expr_eval</name><argument_list>(<argument><expr><name><name>ost</name><operator>-&gt;</operator><name>forced_keyframes_pexpr</name></name></expr></argument>,

<argument><expr><name><name>ost</name><operator>-&gt;</operator><name>forced_keyframes_expr_const_values</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_dlog</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"force_key_frame: n:%f n_forced:%f prev_forced_n:%f t:%f prev_forced_t:%f -&gt; res:%f\n"</literal></expr></argument>,

<argument><expr><name><name>ost</name><operator>-&gt;</operator><name>forced_keyframes_expr_const_values</name><index>[<expr><name>FKF_N</name></expr>]</index></name></expr></argument>,

<argument><expr><name><name>ost</name><operator>-&gt;</operator><name>forced_keyframes_expr_const_values</name><index>[<expr><name>FKF_N_FORCED</name></expr>]</index></name></expr></argument>,

<argument><expr><name><name>ost</name><operator>-&gt;</operator><name>forced_keyframes_expr_const_values</name><index>[<expr><name>FKF_PREV_FORCED_N</name></expr>]</index></name></expr></argument>,

<argument><expr><name><name>ost</name><operator>-&gt;</operator><name>forced_keyframes_expr_const_values</name><index>[<expr><name>FKF_T</name></expr>]</index></name></expr></argument>,

<argument><expr><name><name>ost</name><operator>-&gt;</operator><name>forced_keyframes_expr_const_values</name><index>[<expr><name>FKF_PREV_FORCED_T</name></expr>]</index></name></expr></argument>,

<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>res</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>forced_keyframe</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ost</name><operator>-&gt;</operator><name>forced_keyframes_expr_const_values</name><index>[<expr><name>FKF_PREV_FORCED_N</name></expr>]</index></name> <operator>=</operator>

<name><name>ost</name><operator>-&gt;</operator><name>forced_keyframes_expr_const_values</name><index>[<expr><name>FKF_N</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ost</name><operator>-&gt;</operator><name>forced_keyframes_expr_const_values</name><index>[<expr><name>FKF_PREV_FORCED_T</name></expr>]</index></name> <operator>=</operator>

<name><name>ost</name><operator>-&gt;</operator><name>forced_keyframes_expr_const_values</name><index>[<expr><name>FKF_T</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ost</name><operator>-&gt;</operator><name>forced_keyframes_expr_const_values</name><index>[<expr><name>FKF_N_FORCED</name></expr>]</index></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ost</name><operator>-&gt;</operator><name>forced_keyframes_expr_const_values</name><index>[<expr><name>FKF_N</name></expr>]</index></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>( <expr><name><name>ost</name><operator>-&gt;</operator><name>forced_keyframes</name></name>

<operator>&amp;&amp;</operator> <operator>!</operator><call><name>strncmp</name><argument_list>(<argument><expr><name><name>ost</name><operator>-&gt;</operator><name>forced_keyframes</name></name></expr></argument>, <argument><expr><literal type="string">"source"</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call>

<operator>&amp;&amp;</operator> <name><name>in_picture</name><operator>-&gt;</operator><name>key_frame</name></name><operator>==</operator><literal type="number">1</literal>

<operator>&amp;&amp;</operator> <operator>!</operator><name>i</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>forced_keyframe</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>forced_keyframe</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>in_picture</name><operator>-&gt;</operator><name>pict_type</name></name> <operator>=</operator> <name>AV_PICTURE_TYPE_I</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Forced keyframe at time %f\n"</literal></expr></argument>, <argument><expr><name>pts_time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>update_benchmark</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>debug_ts</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"encoder &lt;- type:video "</literal>

<literal type="string">"frame_pts:%s frame_pts_time:%s time_base:%d/%d\n"</literal></expr></argument>,

<argument><expr><call><name>av_ts2str</name><argument_list>(<argument><expr><name><name>in_picture</name><operator>-&gt;</operator><name>pts</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>av_ts2timestr</name><argument_list>(<argument><expr><name><name>in_picture</name><operator>-&gt;</operator><name>pts</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>enc</name><operator>-&gt;</operator><name>time_base</name></name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name><name>enc</name><operator>-&gt;</operator><name>time_base</name><operator>.</operator><name>num</name></name></expr></argument>, <argument><expr><name><name>enc</name><operator>-&gt;</operator><name>time_base</name><operator>.</operator><name>den</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ost</name><operator>-&gt;</operator><name>frames_encoded</name></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>avcodec_send_frame</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><name>in_picture</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_frame_remove_side_data</name><argument_list>(<argument><expr><name>in_picture</name></expr></argument>, <argument><expr><name>AV_FRAME_DATA_A53_CC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>avcodec_receive_packet</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>update_benchmark</name><argument_list>(<argument><expr><literal type="string">"encode_video %d.%d"</literal></expr></argument>, <argument><expr><name><name>ost</name><operator>-&gt;</operator><name>file_index</name></name></expr></argument>, <argument><expr><name><name>ost</name><operator>-&gt;</operator><name>index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>EAGAIN</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>debug_ts</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"encoder -&gt; type:video "</literal>

<literal type="string">"pkt_pts:%s pkt_pts_time:%s pkt_dts:%s pkt_dts_time:%s\n"</literal></expr></argument>,

<argument><expr><call><name>av_ts2str</name><argument_list>(<argument><expr><name><name>pkt</name><operator>.</operator><name>pts</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>av_ts2timestr</name><argument_list>(<argument><expr><name><name>pkt</name><operator>.</operator><name>pts</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>enc</name><operator>-&gt;</operator><name>time_base</name></name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>av_ts2str</name><argument_list>(<argument><expr><name><name>pkt</name><operator>.</operator><name>dts</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>av_ts2timestr</name><argument_list>(<argument><expr><name><name>pkt</name><operator>.</operator><name>dts</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>enc</name><operator>-&gt;</operator><name>time_base</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pkt</name><operator>.</operator><name>pts</name></name> <operator>==</operator> <name>AV_NOPTS_VALUE</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>enc</name><operator>-&gt;</operator><name>codec</name><operator>-&gt;</operator><name>capabilities</name></name> <operator>&amp;</operator> <name>AV_CODEC_CAP_DELAY</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>pkt</name><operator>.</operator><name>pts</name></name> <operator>=</operator> <name><name>ost</name><operator>-&gt;</operator><name>sync_opts</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_packet_rescale_ts</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pkt</name></expr></argument>, <argument><expr><name><name>enc</name><operator>-&gt;</operator><name>time_base</name></name></expr></argument>, <argument><expr><name><name>ost</name><operator>-&gt;</operator><name>mux_timebase</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>debug_ts</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"encoder -&gt; type:video "</literal>

<literal type="string">"pkt_pts:%s pkt_pts_time:%s pkt_dts:%s pkt_dts_time:%s\n"</literal></expr></argument>,

<argument><expr><call><name>av_ts2str</name><argument_list>(<argument><expr><name><name>pkt</name><operator>.</operator><name>pts</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>av_ts2timestr</name><argument_list>(<argument><expr><name><name>pkt</name><operator>.</operator><name>pts</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ost</name><operator>-&gt;</operator><name>mux_timebase</name></name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>av_ts2str</name><argument_list>(<argument><expr><name><name>pkt</name><operator>.</operator><name>dts</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>av_ts2timestr</name><argument_list>(<argument><expr><name><name>pkt</name><operator>.</operator><name>dts</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ost</name><operator>-&gt;</operator><name>mux_timebase</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>frame_size</name> <operator>=</operator> <name><name>pkt</name><operator>.</operator><name>size</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>output_packet</name><argument_list>(<argument><expr><name>of</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pkt</name></expr></argument>, <argument><expr><name>ost</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ost</name><operator>-&gt;</operator><name>logfile</name></name> <operator>&amp;&amp;</operator> <name><name>enc</name><operator>-&gt;</operator><name>stats_out</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name><name>ost</name><operator>-&gt;</operator><name>logfile</name></name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>enc</name><operator>-&gt;</operator><name>stats_out</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></while>

<expr_stmt><expr><name><name>ost</name><operator>-&gt;</operator><name>sync_opts</name></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ost</name><operator>-&gt;</operator><name>frame_number</name></name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>vstats_filename</name> <operator>&amp;&amp;</operator> <name>frame_size</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>do_video_stats</name><argument_list>(<argument><expr><name>ost</name></expr></argument>, <argument><expr><name>frame_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ost</name><operator>-&gt;</operator><name>last_frame</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ost</name><operator>-&gt;</operator><name>last_frame</name></name> <operator>=</operator> <call><name>av_frame_alloc</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_frame_unref</name><argument_list>(<argument><expr><name><name>ost</name><operator>-&gt;</operator><name>last_frame</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>next_picture</name> <operator>&amp;&amp;</operator> <name><name>ost</name><operator>-&gt;</operator><name>last_frame</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_frame_ref</name><argument_list>(<argument><expr><name><name>ost</name><operator>-&gt;</operator><name>last_frame</name></name></expr></argument>, <argument><expr><name>next_picture</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ost</name><operator>-&gt;</operator><name>last_frame</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<return>return;</return>

<label><name>error</name>:</label>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_FATAL</name></expr></argument>, <argument><expr><literal type="string">"Video encoding failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>exit_program</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>double</name></type> <name>psnr</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>d</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">10.0</literal> <operator>*</operator> <call><name>log10</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>do_video_stats</name><parameter_list>(<parameter><decl><type><name>OutputStream</name> <modifier>*</modifier></type><name>ost</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>frame_size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>enc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>frame_number</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>ti1</name></decl>, <decl><type ref="prev"/><name>bitrate</name></decl>, <decl><type ref="prev"/><name>avg_bitrate</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>vstats_file</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>vstats_file</name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><name>vstats_filename</name></expr></argument>, <argument><expr><literal type="string">"w"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>vstats_file</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>perror</name><argument_list>(<argument><expr><literal type="string">"fopen"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>exit_program</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>enc</name> <operator>=</operator> <name><name>ost</name><operator>-&gt;</operator><name>enc_ctx</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>enc</name><operator>-&gt;</operator><name>codec_type</name></name> <operator>==</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>frame_number</name> <operator>=</operator> <name><name>ost</name><operator>-&gt;</operator><name>st</name><operator>-&gt;</operator><name>nb_frames</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>vstats_version</name> <operator>&lt;=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>vstats_file</name></expr></argument>, <argument><expr><literal type="string">"frame= %5d q= %2.1f "</literal></expr></argument>, <argument><expr><name>frame_number</name></expr></argument>,

<argument><expr><name><name>ost</name><operator>-&gt;</operator><name>quality</name></name> <operator>/</operator> <operator>(</operator><name>float</name><operator>)</operator><name>FF_QP2LAMBDA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>vstats_file</name></expr></argument>, <argument><expr><literal type="string">"out= %2d st= %2d frame= %5d q= %2.1f "</literal></expr></argument>, <argument><expr><name><name>ost</name><operator>-&gt;</operator><name>file_index</name></name></expr></argument>, <argument><expr><name><name>ost</name><operator>-&gt;</operator><name>index</name></name></expr></argument>, <argument><expr><name>frame_number</name></expr></argument>,

<argument><expr><name><name>ost</name><operator>-&gt;</operator><name>quality</name></name> <operator>/</operator> <operator>(</operator><name>float</name><operator>)</operator><name>FF_QP2LAMBDA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ost</name><operator>-&gt;</operator><name>error</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>&gt;=</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>enc</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_CODEC_FLAG_PSNR</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>vstats_file</name></expr></argument>, <argument><expr><literal type="string">"PSNR= %6.2f "</literal></expr></argument>, <argument><expr><call><name>psnr</name><argument_list>(<argument><expr><name><name>ost</name><operator>-&gt;</operator><name>error</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>/</operator> <operator>(</operator><name><name>enc</name><operator>-&gt;</operator><name>width</name></name> <operator>*</operator> <name><name>enc</name><operator>-&gt;</operator><name>height</name></name> <operator>*</operator> <literal type="number">255.0</literal> <operator>*</operator> <literal type="number">255.0</literal><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>vstats_file</name></expr></argument>,<argument><expr><literal type="string">"f_size= %6d "</literal></expr></argument>, <argument><expr><name>frame_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ti1</name> <operator>=</operator> <call><name>av_stream_get_end_pts</name><argument_list>(<argument><expr><name><name>ost</name><operator>-&gt;</operator><name>st</name></name></expr></argument>)</argument_list></call> <operator>*</operator> <call><name>av_q2d</name><argument_list>(<argument><expr><name><name>ost</name><operator>-&gt;</operator><name>st</name><operator>-&gt;</operator><name>time_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ti1</name> <operator>&lt;</operator> <literal type="number">0.01</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>ti1</name> <operator>=</operator> <literal type="number">0.01</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>bitrate</name> <operator>=</operator> <operator>(</operator><name>frame_size</name> <operator>*</operator> <literal type="number">8</literal><operator>)</operator> <operator>/</operator> <call><name>av_q2d</name><argument_list>(<argument><expr><name><name>enc</name><operator>-&gt;</operator><name>time_base</name></name></expr></argument>)</argument_list></call> <operator>/</operator> <literal type="number">1000.0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>avg_bitrate</name> <operator>=</operator> <operator>(</operator><name>double</name><operator>)</operator><operator>(</operator><name><name>ost</name><operator>-&gt;</operator><name>data_size</name></name> <operator>*</operator> <literal type="number">8</literal><operator>)</operator> <operator>/</operator> <name>ti1</name> <operator>/</operator> <literal type="number">1000.0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>vstats_file</name></expr></argument>, <argument><expr><literal type="string">"s_size= %8.0fkB time= %0.3f br= %7.1fkbits/s avg_br= %7.1fkbits/s "</literal></expr></argument>,

<argument><expr><operator>(</operator><name>double</name><operator>)</operator><name><name>ost</name><operator>-&gt;</operator><name>data_size</name></name> <operator>/</operator> <literal type="number">1024</literal></expr></argument>, <argument><expr><name>ti1</name></expr></argument>, <argument><expr><name>bitrate</name></expr></argument>, <argument><expr><name>avg_bitrate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>vstats_file</name></expr></argument>, <argument><expr><literal type="string">"type= %c\n"</literal></expr></argument>, <argument><expr><call><name>av_get_picture_type_char</name><argument_list>(<argument><expr><name><name>ost</name><operator>-&gt;</operator><name>pict_type</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>init_output_stream</name><parameter_list>(<parameter><decl><type><name>OutputStream</name> <modifier>*</modifier></type><name>ost</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>error</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>error_len</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>void</name></type> <name>finish_output_stream</name><parameter_list>(<parameter><decl><type><name>OutputStream</name> <modifier>*</modifier></type><name>ost</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>OutputFile</name> <modifier>*</modifier></type><name>of</name> <init>= <expr><name><name>output_files</name><index>[<expr><name><name>ost</name><operator>-&gt;</operator><name>file_index</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>ost</name><operator>-&gt;</operator><name>finished</name></name> <operator>=</operator> <name>ENCODER_FINISHED</name> <operator>|</operator> <name>MUXER_FINISHED</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>of</name><operator>-&gt;</operator><name>shortest</name></name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>of</name><operator>-&gt;</operator><name>ctx</name><operator>-&gt;</operator><name>nb_streams</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>output_streams</name><index>[<expr><name><name>of</name><operator>-&gt;</operator><name>ost_index</name></name> <operator>+</operator> <name>i</name></expr>]</index></name><operator>-&gt;</operator><name>finished</name> <operator>=</operator> <name>ENCODER_FINISHED</name> <operator>|</operator> <name>MUXER_FINISHED</name></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>reap_filters</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>flush</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>filtered_frame</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nb_output_streams</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>OutputStream</name> <modifier>*</modifier></type><name>ost</name> <init>= <expr><name><name>output_streams</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>OutputFile</name> <modifier>*</modifier></type><name>of</name> <init>= <expr><name><name>output_files</name><index>[<expr><name><name>ost</name><operator>-&gt;</operator><name>file_index</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>filter</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>enc</name> <init>= <expr><name><name>ost</name><operator>-&gt;</operator><name>enc_ctx</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ost</name><operator>-&gt;</operator><name>filter</name></name> <operator>||</operator> <operator>!</operator><name><name>ost</name><operator>-&gt;</operator><name>filter</name><operator>-&gt;</operator><name>graph</name><operator>-&gt;</operator><name>graph</name></name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name>filter</name> <operator>=</operator> <name><name>ost</name><operator>-&gt;</operator><name>filter</name><operator>-&gt;</operator><name>filter</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ost</name><operator>-&gt;</operator><name>initialized</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>error</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>init_output_stream</name><argument_list>(<argument><expr><name>ost</name></expr></argument>, <argument><expr><name>error</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>error</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Error initializing output stream %d:%d -- %s\n"</literal></expr></argument>,

<argument><expr><name><name>ost</name><operator>-&gt;</operator><name>file_index</name></name></expr></argument>, <argument><expr><name><name>ost</name><operator>-&gt;</operator><name>index</name></name></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>exit_program</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ost</name><operator>-&gt;</operator><name>filtered_frame</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>ost</name><operator>-&gt;</operator><name>filtered_frame</name></name> <operator>=</operator> <call><name>av_frame_alloc</name><argument_list>()</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>filtered_frame</name> <operator>=</operator> <name><name>ost</name><operator>-&gt;</operator><name>filtered_frame</name></name></expr>;</expr_stmt>

<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>double</name></type> <name>float_pts</name> <init>= <expr><name>AV_NOPTS_VALUE</name></expr></init></decl>;</decl_stmt> 

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>av_buffersink_get_frame_flags</name><argument_list>(<argument><expr><name>filter</name></expr></argument>, <argument><expr><name>filtered_frame</name></expr></argument>,

<argument><expr><name>AV_BUFFERSINK_FLAG_NO_REQUEST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>EAGAIN</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>ret</name> <operator>!=</operator> <name>AVERROR_EOF</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>,

<argument><expr><literal type="string">"Error in av_buffersink_get_frame_flags(): %s\n"</literal></expr></argument>, <argument><expr><call><name>av_err2str</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>flush</name> <operator>&amp;&amp;</operator> <name>ret</name> <operator>==</operator> <name>AVERROR_EOF</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>av_buffersink_get_type</name><argument_list>(<argument><expr><name>filter</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>do_video_out</name><argument_list>(<argument><expr><name>of</name></expr></argument>, <argument><expr><name>ost</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_NOPTS_VALUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ost</name><operator>-&gt;</operator><name>finished</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_frame_unref</name><argument_list>(<argument><expr><name>filtered_frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>filtered_frame</name><operator>-&gt;</operator><name>pts</name></name> <operator>!=</operator> <name>AV_NOPTS_VALUE</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int64_t</name></type> <name>start_time</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name><name>of</name><operator>-&gt;</operator><name>start_time</name></name> <operator>==</operator> <name>AV_NOPTS_VALUE</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name><name>of</name><operator>-&gt;</operator><name>start_time</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVRational</name></type> <name>filter_tb</name> <init>= <expr><call><name>av_buffersink_get_time_base</name><argument_list>(<argument><expr><name>filter</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVRational</name></type> <name>tb</name> <init>= <expr><name><name>enc</name><operator>-&gt;</operator><name>time_base</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>extra_bits</name> <init>= <expr><call><name>av_clip</name><argument_list>(<argument><expr><literal type="number">29</literal> <operator>-</operator> <call><name>av_log2</name><argument_list>(<argument><expr><name><name>tb</name><operator>.</operator><name>den</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>tb</name><operator>.</operator><name>den</name></name> <operator>&lt;&lt;=</operator> <name>extra_bits</name></expr>;</expr_stmt>

<expr_stmt><expr><name>float_pts</name> <operator>=</operator>

<call><name>av_rescale_q</name><argument_list>(<argument><expr><name><name>filtered_frame</name><operator>-&gt;</operator><name>pts</name></name></expr></argument>, <argument><expr><name>filter_tb</name></expr></argument>, <argument><expr><name>tb</name></expr></argument>)</argument_list></call> <operator>-</operator>

<call><name>av_rescale_q</name><argument_list>(<argument><expr><name>start_time</name></expr></argument>, <argument><expr><name>AV_TIME_BASE_Q</name></expr></argument>, <argument><expr><name>tb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>float_pts</name> <operator>/=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>extra_bits</name></expr>;</expr_stmt>

<expr_stmt><expr><name>float_pts</name> <operator>+=</operator> <call><name>FFSIGN</name><argument_list>(<argument><expr><name>float_pts</name></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">1.0</literal> <operator>/</operator> <operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">17</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>filtered_frame</name><operator>-&gt;</operator><name>pts</name></name> <operator>=</operator>

<call><name>av_rescale_q</name><argument_list>(<argument><expr><name><name>filtered_frame</name><operator>-&gt;</operator><name>pts</name></name></expr></argument>, <argument><expr><name>filter_tb</name></expr></argument>, <argument><expr><name><name>enc</name><operator>-&gt;</operator><name>time_base</name></name></expr></argument>)</argument_list></call> <operator>-</operator>

<call><name>av_rescale_q</name><argument_list>(<argument><expr><name>start_time</name></expr></argument>, <argument><expr><name>AV_TIME_BASE_Q</name></expr></argument>, <argument><expr><name><name>enc</name><operator>-&gt;</operator><name>time_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><call><name>av_buffersink_get_type</name><argument_list>(<argument><expr><name>filter</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<case>case <expr><name>AVMEDIA_TYPE_VIDEO</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ost</name><operator>-&gt;</operator><name>frame_aspect_ratio</name><operator>.</operator><name>num</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>enc</name><operator>-&gt;</operator><name>sample_aspect_ratio</name></name> <operator>=</operator> <name><name>filtered_frame</name><operator>-&gt;</operator><name>sample_aspect_ratio</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>debug_ts</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"filter -&gt; pts:%s pts_time:%s exact:%f time_base:%d/%d\n"</literal></expr></argument>,

<argument><expr><call><name>av_ts2str</name><argument_list>(<argument><expr><name><name>filtered_frame</name><operator>-&gt;</operator><name>pts</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>av_ts2timestr</name><argument_list>(<argument><expr><name><name>filtered_frame</name><operator>-&gt;</operator><name>pts</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>enc</name><operator>-&gt;</operator><name>time_base</name></name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>float_pts</name></expr></argument>,

<argument><expr><name><name>enc</name><operator>-&gt;</operator><name>time_base</name><operator>.</operator><name>num</name></name></expr></argument>, <argument><expr><name><name>enc</name><operator>-&gt;</operator><name>time_base</name><operator>.</operator><name>den</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>do_video_out</name><argument_list>(<argument><expr><name>of</name></expr></argument>, <argument><expr><name>ost</name></expr></argument>, <argument><expr><name>filtered_frame</name></expr></argument>, <argument><expr><name>float_pts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AVMEDIA_TYPE_AUDIO</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>enc</name><operator>-&gt;</operator><name>codec</name><operator>-&gt;</operator><name>capabilities</name></name> <operator>&amp;</operator> <name>AV_CODEC_CAP_PARAM_CHANGE</name><operator>)</operator> <operator>&amp;&amp;</operator>

<name><name>enc</name><operator>-&gt;</operator><name>channels</name></name> <operator>!=</operator> <name><name>filtered_frame</name><operator>-&gt;</operator><name>channels</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"Audio filter graph output is not normalized and encoder does not support parameter changes\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>do_audio_out</name><argument_list>(<argument><expr><name>of</name></expr></argument>, <argument><expr><name>ost</name></expr></argument>, <argument><expr><name>filtered_frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></switch>

<expr_stmt><expr><call><name>av_frame_unref</name><argument_list>(<argument><expr><name>filtered_frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>print_final_stats</name><parameter_list>(<parameter><decl><type><name>int64_t</name></type> <name>total_size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>video_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>audio_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>extra_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>other_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>subtitle_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>data_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>percent</name> <init>= <expr><operator>-</operator><literal type="number">1.0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>pass1_used</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nb_output_streams</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>OutputStream</name> <modifier>*</modifier></type><name>ost</name> <init>= <expr><name><name>output_streams</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>ost</name><operator>-&gt;</operator><name>enc_ctx</name><operator>-&gt;</operator><name>codec_type</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>AVMEDIA_TYPE_VIDEO</name></expr>:</case> <expr_stmt><expr><name>video_size</name> <operator>+=</operator> <name><name>ost</name><operator>-&gt;</operator><name>data_size</name></name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>AVMEDIA_TYPE_AUDIO</name></expr>:</case> <expr_stmt><expr><name>audio_size</name> <operator>+=</operator> <name><name>ost</name><operator>-&gt;</operator><name>data_size</name></name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>AVMEDIA_TYPE_SUBTITLE</name></expr>:</case> <expr_stmt><expr><name>subtitle_size</name> <operator>+=</operator> <name><name>ost</name><operator>-&gt;</operator><name>data_size</name></name></expr>;</expr_stmt> <break>break;</break>

<default>default:</default> <expr_stmt><expr><name>other_size</name> <operator>+=</operator> <name><name>ost</name><operator>-&gt;</operator><name>data_size</name></name></expr>;</expr_stmt> <break>break;</break>

</block_content>}</block></switch>

<expr_stmt><expr><name>extra_size</name> <operator>+=</operator> <name><name>ost</name><operator>-&gt;</operator><name>enc_ctx</name><operator>-&gt;</operator><name>extradata_size</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>data_size</name> <operator>+=</operator> <name><name>ost</name><operator>-&gt;</operator><name>data_size</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><operator>(</operator><name><name>ost</name><operator>-&gt;</operator><name>enc_ctx</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <operator>(</operator><name>AV_CODEC_FLAG_PASS1</name> <operator>|</operator> <name>AV_CODEC_FLAG_PASS2</name><operator>)</operator><operator>)</operator>

<operator>!=</operator> <name>AV_CODEC_FLAG_PASS1</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>pass1_used</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>data_size</name> <operator>&amp;&amp;</operator> <name>total_size</name><operator>&gt;</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>total_size</name> <operator>&gt;=</operator> <name>data_size</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>percent</name> <operator>=</operator> <literal type="number">100.0</literal> <operator>*</operator> <operator>(</operator><name>total_size</name> <operator>-</operator> <name>data_size</name><operator>)</operator> <operator>/</operator> <name>data_size</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"video:%1.0fkB audio:%1.0fkB subtitle:%1.0fkB other streams:%1.0fkB global headers:%1.0fkB muxing overhead: "</literal></expr></argument>,

<argument><expr><name>video_size</name> <operator>/</operator> <literal type="number">1024.0</literal></expr></argument>,

<argument><expr><name>audio_size</name> <operator>/</operator> <literal type="number">1024.0</literal></expr></argument>,

<argument><expr><name>subtitle_size</name> <operator>/</operator> <literal type="number">1024.0</literal></expr></argument>,

<argument><expr><name>other_size</name> <operator>/</operator> <literal type="number">1024.0</literal></expr></argument>,

<argument><expr><name>extra_size</name> <operator>/</operator> <literal type="number">1024.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>percent</name> <operator>&gt;=</operator> <literal type="number">0.0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"%f%%"</literal></expr></argument>, <argument><expr><name>percent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"unknown"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nb_input_files</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>InputFile</name> <modifier>*</modifier></type><name>f</name> <init>= <expr><name><name>input_files</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>total_packets</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>total_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_VERBOSE</name></expr></argument>, <argument><expr><literal type="string">"Input file #%d (%s):\n"</literal></expr></argument>,

<argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>ctx</name><operator>-&gt;</operator><name>url</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>f</name><operator>-&gt;</operator><name>nb_streams</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>InputStream</name> <modifier>*</modifier></type><name>ist</name> <init>= <expr><name><name>input_streams</name><index>[<expr><name><name>f</name><operator>-&gt;</operator><name>ist_index</name></name> <operator>+</operator> <name>j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>AVMediaType</name></name></type> <name>type</name> <init>= <expr><name><name>ist</name><operator>-&gt;</operator><name>dec_ctx</name><operator>-&gt;</operator><name>codec_type</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>total_size</name> <operator>+=</operator> <name><name>ist</name><operator>-&gt;</operator><name>data_size</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>total_packets</name> <operator>+=</operator> <name><name>ist</name><operator>-&gt;</operator><name>nb_packets</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_VERBOSE</name></expr></argument>, <argument><expr><literal type="string">" Input stream #%d:%d (%s): "</literal></expr></argument>,

<argument><expr><name>i</name></expr></argument>, <argument><expr><name>j</name></expr></argument>, <argument><expr><call><name>media_type_string</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_VERBOSE</name></expr></argument>, <argument><expr><literal type="string">"%"</literal><name>PRIu64</name><literal type="string">" packets read (%"</literal><name>PRIu64</name><literal type="string">" bytes); "</literal></expr></argument>,

<argument><expr><name><name>ist</name><operator>-&gt;</operator><name>nb_packets</name></name></expr></argument>, <argument><expr><name><name>ist</name><operator>-&gt;</operator><name>data_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ist</name><operator>-&gt;</operator><name>decoding_needed</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_VERBOSE</name></expr></argument>, <argument><expr><literal type="string">"%"</literal><name>PRIu64</name><literal type="string">" frames decoded"</literal></expr></argument>,

<argument><expr><name><name>ist</name><operator>-&gt;</operator><name>frames_decoded</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>AVMEDIA_TYPE_AUDIO</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_VERBOSE</name></expr></argument>, <argument><expr><literal type="string">" (%"</literal><name>PRIu64</name><literal type="string">" samples)"</literal></expr></argument>, <argument><expr><name><name>ist</name><operator>-&gt;</operator><name>samples_decoded</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_VERBOSE</name></expr></argument>, <argument><expr><literal type="string">"; "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_VERBOSE</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_VERBOSE</name></expr></argument>, <argument><expr><literal type="string">" Total: %"</literal><name>PRIu64</name><literal type="string">" packets (%"</literal><name>PRIu64</name><literal type="string">" bytes) demuxed\n"</literal></expr></argument>,

<argument><expr><name>total_packets</name></expr></argument>, <argument><expr><name>total_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nb_output_files</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>OutputFile</name> <modifier>*</modifier></type><name>of</name> <init>= <expr><name><name>output_files</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>total_packets</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>total_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_VERBOSE</name></expr></argument>, <argument><expr><literal type="string">"Output file #%d (%s):\n"</literal></expr></argument>,

<argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>of</name><operator>-&gt;</operator><name>ctx</name><operator>-&gt;</operator><name>url</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>of</name><operator>-&gt;</operator><name>ctx</name><operator>-&gt;</operator><name>nb_streams</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>OutputStream</name> <modifier>*</modifier></type><name>ost</name> <init>= <expr><name><name>output_streams</name><index>[<expr><name><name>of</name><operator>-&gt;</operator><name>ost_index</name></name> <operator>+</operator> <name>j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>AVMediaType</name></name></type> <name>type</name> <init>= <expr><name><name>ost</name><operator>-&gt;</operator><name>enc_ctx</name><operator>-&gt;</operator><name>codec_type</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>total_size</name> <operator>+=</operator> <name><name>ost</name><operator>-&gt;</operator><name>data_size</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>total_packets</name> <operator>+=</operator> <name><name>ost</name><operator>-&gt;</operator><name>packets_written</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_VERBOSE</name></expr></argument>, <argument><expr><literal type="string">" Output stream #%d:%d (%s): "</literal></expr></argument>,

<argument><expr><name>i</name></expr></argument>, <argument><expr><name>j</name></expr></argument>, <argument><expr><call><name>media_type_string</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ost</name><operator>-&gt;</operator><name>encoding_needed</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_VERBOSE</name></expr></argument>, <argument><expr><literal type="string">"%"</literal><name>PRIu64</name><literal type="string">" frames encoded"</literal></expr></argument>,

<argument><expr><name><name>ost</name><operator>-&gt;</operator><name>frames_encoded</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>AVMEDIA_TYPE_AUDIO</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_VERBOSE</name></expr></argument>, <argument><expr><literal type="string">" (%"</literal><name>PRIu64</name><literal type="string">" samples)"</literal></expr></argument>, <argument><expr><name><name>ost</name><operator>-&gt;</operator><name>samples_encoded</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_VERBOSE</name></expr></argument>, <argument><expr><literal type="string">"; "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_VERBOSE</name></expr></argument>, <argument><expr><literal type="string">"%"</literal><name>PRIu64</name><literal type="string">" packets muxed (%"</literal><name>PRIu64</name><literal type="string">" bytes); "</literal></expr></argument>,

<argument><expr><name><name>ost</name><operator>-&gt;</operator><name>packets_written</name></name></expr></argument>, <argument><expr><name><name>ost</name><operator>-&gt;</operator><name>data_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_VERBOSE</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_VERBOSE</name></expr></argument>, <argument><expr><literal type="string">" Total: %"</literal><name>PRIu64</name><literal type="string">" packets (%"</literal><name>PRIu64</name><literal type="string">" bytes) muxed\n"</literal></expr></argument>,

<argument><expr><name>total_packets</name></expr></argument>, <argument><expr><name>total_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if<condition>(<expr><name>video_size</name> <operator>+</operator> <name>data_size</name> <operator>+</operator> <name>audio_size</name> <operator>+</operator> <name>subtitle_size</name> <operator>+</operator> <name>extra_size</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Output file is empty, nothing was encoded "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>pass1_used</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"(check -ss / -t / -frames parameters if used)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>print_report</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>is_last_report</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>timer_start</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>cur_time</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVBPrint</name></type> <name>buf</name></decl>, <decl><type ref="prev"/><name>buf_script</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>OutputStream</name> <modifier>*</modifier></type><name>ost</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>oc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>total_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>enc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>frame_number</name></decl>, <decl><type ref="prev"/><name>vid</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>bitrate</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>speed</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>pts</name> <init>= <expr><name>INT64_MIN</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int64_t</name></type> <name>last_time</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name><name>qp_histogram</name><index>[<expr><literal type="number">52</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>hours</name></decl>, <decl><type ref="prev"/><name>mins</name></decl>, <decl><type ref="prev"/><name>secs</name></decl>, <decl><type ref="prev"/><name>us</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>hours_sign</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>t</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>print_stats</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>is_last_report</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>progress_avio</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>is_last_report</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>last_time</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>last_time</name> <operator>=</operator> <name>cur_time</name></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>cur_time</name> <operator>-</operator> <name>last_time</name><operator>)</operator> <operator>&lt;</operator> <literal type="number">500000</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>last_time</name> <operator>=</operator> <name>cur_time</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>t</name> <operator>=</operator> <operator>(</operator><name>cur_time</name><operator>-</operator><name>timer_start</name><operator>)</operator> <operator>/</operator> <literal type="number">1000000.0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>oc</name> <operator>=</operator> <name><name>output_files</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>ctx</name></expr>;</expr_stmt>

<expr_stmt><expr><name>total_size</name> <operator>=</operator> <call><name>avio_size</name><argument_list>(<argument><expr><name><name>oc</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>total_size</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><name>total_size</name> <operator>=</operator> <call><name>avio_tell</name><argument_list>(<argument><expr><name><name>oc</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>vid</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_bprint_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>AV_BPRINT_SIZE_AUTOMATIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_bprint_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf_script</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>AV_BPRINT_SIZE_AUTOMATIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nb_output_streams</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>q</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>ost</name> <operator>=</operator> <name><name>output_streams</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>enc</name> <operator>=</operator> <name><name>ost</name><operator>-&gt;</operator><name>enc_ctx</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ost</name><operator>-&gt;</operator><name>stream_copy</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>q</name> <operator>=</operator> <name><name>ost</name><operator>-&gt;</operator><name>quality</name></name> <operator>/</operator> <operator>(</operator><name>float</name><operator>)</operator> <name>FF_QP2LAMBDA</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>vid</name> <operator>&amp;&amp;</operator> <name><name>enc</name><operator>-&gt;</operator><name>codec_type</name></name> <operator>==</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_bprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><literal type="string">"q=%2.1f "</literal></expr></argument>, <argument><expr><name>q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_bprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf_script</name></expr></argument>, <argument><expr><literal type="string">"stream_%d_%d_q=%.1f\n"</literal></expr></argument>,

<argument><expr><name><name>ost</name><operator>-&gt;</operator><name>file_index</name></name></expr></argument>, <argument><expr><name><name>ost</name><operator>-&gt;</operator><name>index</name></name></expr></argument>, <argument><expr><name>q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>vid</name> <operator>&amp;&amp;</operator> <name><name>enc</name><operator>-&gt;</operator><name>codec_type</name></name> <operator>==</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>fps</name></decl>;</decl_stmt>

<expr_stmt><expr><name>frame_number</name> <operator>=</operator> <name><name>ost</name><operator>-&gt;</operator><name>frame_number</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>fps</name> <operator>=</operator> <ternary><condition><expr><name>t</name> <operator>&gt;</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><name>frame_number</name> <operator>/</operator> <name>t</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_bprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><literal type="string">"frame=%5d fps=%3.*f q=%3.1f "</literal></expr></argument>,

<argument><expr><name>frame_number</name></expr></argument>, <argument><expr><name>fps</name> <operator>&lt;</operator> <literal type="number">9.95</literal></expr></argument>, <argument><expr><name>fps</name></expr></argument>, <argument><expr><name>q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_bprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf_script</name></expr></argument>, <argument><expr><literal type="string">"frame=%d\n"</literal></expr></argument>, <argument><expr><name>frame_number</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_bprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf_script</name></expr></argument>, <argument><expr><literal type="string">"fps=%.2f\n"</literal></expr></argument>, <argument><expr><name>fps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_bprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf_script</name></expr></argument>, <argument><expr><literal type="string">"stream_%d_%d_q=%.1f\n"</literal></expr></argument>,

<argument><expr><name><name>ost</name><operator>-&gt;</operator><name>file_index</name></name></expr></argument>, <argument><expr><name><name>ost</name><operator>-&gt;</operator><name>index</name></name></expr></argument>, <argument><expr><name>q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>is_last_report</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_bprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><literal type="string">"L"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>qp_hist</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>qp</name> <init>= <expr><call><name>lrintf</name><argument_list>(<argument><expr><name>q</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>qp</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>qp</name> <operator>&lt;</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>qp_histogram</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>qp_histogram</name><index>[<expr><name>qp</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">32</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_bprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><literal type="string">"%X"</literal></expr></argument>, <argument><expr><call><name>av_log2</name><argument_list>(<argument><expr><name><name>qp_histogram</name><index>[<expr><name>j</name></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>enc</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_CODEC_FLAG_PSNR</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>ost</name><operator>-&gt;</operator><name>pict_type</name></name> <operator>!=</operator> <name>AV_PICTURE_TYPE_NONE</name> <operator>||</operator> <name>is_last_report</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>error</name></decl>, <decl><type ref="prev"/><name>error_sum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>scale</name></decl>, <decl><type ref="prev"/><name>scale_sum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>p</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>type</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'Y'</literal></expr>,<expr><literal type="char">'U'</literal></expr>,<expr><literal type="char">'V'</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_bprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><literal type="string">"PSNR="</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>is_last_report</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>error</name> <operator>=</operator> <name><name>enc</name><operator>-&gt;</operator><name>error</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>scale</name> <operator>=</operator> <name><name>enc</name><operator>-&gt;</operator><name>width</name></name> <operator>*</operator> <name><name>enc</name><operator>-&gt;</operator><name>height</name></name> <operator>*</operator> <literal type="number">255.0</literal> <operator>*</operator> <literal type="number">255.0</literal> <operator>*</operator> <name>frame_number</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>error</name> <operator>=</operator> <name><name>ost</name><operator>-&gt;</operator><name>error</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>scale</name> <operator>=</operator> <name><name>enc</name><operator>-&gt;</operator><name>width</name></name> <operator>*</operator> <name><name>enc</name><operator>-&gt;</operator><name>height</name></name> <operator>*</operator> <literal type="number">255.0</literal> <operator>*</operator> <literal type="number">255.0</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>j</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>scale</name> <operator>/=</operator> <literal type="number">4</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>error_sum</name> <operator>+=</operator> <name>error</name></expr>;</expr_stmt>

<expr_stmt><expr><name>scale_sum</name> <operator>+=</operator> <name>scale</name></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>psnr</name><argument_list>(<argument><expr><name>error</name> <operator>/</operator> <name>scale</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_bprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><literal type="string">"%c:%2.2f "</literal></expr></argument>, <argument><expr><name><name>type</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_bprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf_script</name></expr></argument>, <argument><expr><literal type="string">"stream_%d_%d_psnr_%c=%2.2f\n"</literal></expr></argument>,

<argument><expr><name><name>ost</name><operator>-&gt;</operator><name>file_index</name></name></expr></argument>, <argument><expr><name><name>ost</name><operator>-&gt;</operator><name>index</name></name></expr></argument>, <argument><expr><name><name>type</name><index>[<expr><name>j</name></expr>]</index></name> <operator>|</operator> <literal type="number">32</literal></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>psnr</name><argument_list>(<argument><expr><name>error_sum</name> <operator>/</operator> <name>scale_sum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_bprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><literal type="string">"*:%2.2f "</literal></expr></argument>, <argument><expr><call><name>psnr</name><argument_list>(<argument><expr><name>error_sum</name> <operator>/</operator> <name>scale_sum</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_bprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf_script</name></expr></argument>, <argument><expr><literal type="string">"stream_%d_%d_psnr_all=%2.2f\n"</literal></expr></argument>,

<argument><expr><name><name>ost</name><operator>-&gt;</operator><name>file_index</name></name></expr></argument>, <argument><expr><name><name>ost</name><operator>-&gt;</operator><name>index</name></name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>vid</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>av_stream_get_end_pts</name><argument_list>(<argument><expr><name><name>ost</name><operator>-&gt;</operator><name>st</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>AV_NOPTS_VALUE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>pts</name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name>pts</name></expr></argument>, <argument><expr><call><name>av_rescale_q</name><argument_list>(<argument><expr><call><name>av_stream_get_end_pts</name><argument_list>(<argument><expr><name><name>ost</name><operator>-&gt;</operator><name>st</name></name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name><name>ost</name><operator>-&gt;</operator><name>st</name><operator>-&gt;</operator><name>time_base</name></name></expr></argument>, <argument><expr><name>AV_TIME_BASE_Q</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>is_last_report</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>nb_frames_drop</name> <operator>+=</operator> <name><name>ost</name><operator>-&gt;</operator><name>last_dropped</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>secs</name> <operator>=</operator> <call><name>FFABS</name><argument_list>(<argument><expr><name>pts</name></expr></argument>)</argument_list></call> <operator>/</operator> <name>AV_TIME_BASE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>us</name> <operator>=</operator> <call><name>FFABS</name><argument_list>(<argument><expr><name>pts</name></expr></argument>)</argument_list></call> <operator>%</operator> <name>AV_TIME_BASE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>mins</name> <operator>=</operator> <name>secs</name> <operator>/</operator> <literal type="number">60</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>secs</name> <operator>%=</operator> <literal type="number">60</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>hours</name> <operator>=</operator> <name>mins</name> <operator>/</operator> <literal type="number">60</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>mins</name> <operator>%=</operator> <literal type="number">60</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>hours_sign</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>pts</name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">"-"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>bitrate</name> <operator>=</operator> <ternary><condition><expr><name>pts</name> <operator>&amp;&amp;</operator> <name>total_size</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>total_size</name> <operator>*</operator> <literal type="number">8</literal> <operator>/</operator> <operator>(</operator><name>pts</name> <operator>/</operator> <literal type="number">1000.0</literal><operator>)</operator></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>speed</name> <operator>=</operator> <ternary><condition><expr><name>t</name> <operator>!=</operator> <literal type="number">0.0</literal></expr> ?</condition><then> <expr><operator>(</operator><name>double</name><operator>)</operator><name>pts</name> <operator>/</operator> <name>AV_TIME_BASE</name> <operator>/</operator> <name>t</name></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>total_size</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>av_bprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><literal type="string">"size=N/A time="</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>av_bprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><literal type="string">"size=%8.0fkB time="</literal></expr></argument>, <argument><expr><name>total_size</name> <operator>/</operator> <literal type="number">1024.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>pts</name> <operator>==</operator> <name>AV_NOPTS_VALUE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_bprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><literal type="string">"N/A "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>av_bprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><literal type="string">"%s%02d:%02d:%02d.%02d "</literal></expr></argument>,

<argument><expr><name>hours_sign</name></expr></argument>, <argument><expr><name>hours</name></expr></argument>, <argument><expr><name>mins</name></expr></argument>, <argument><expr><name>secs</name></expr></argument>, <argument><expr><operator>(</operator><literal type="number">100</literal> <operator>*</operator> <name>us</name><operator>)</operator> <operator>/</operator> <name>AV_TIME_BASE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>bitrate</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_bprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><literal type="string">"bitrate=N/A"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_bprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf_script</name></expr></argument>, <argument><expr><literal type="string">"bitrate=N/A\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if><else>else<block>{<block_content>

<expr_stmt><expr><call><name>av_bprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><literal type="string">"bitrate=%6.1fkbits/s"</literal></expr></argument>, <argument><expr><name>bitrate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_bprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf_script</name></expr></argument>, <argument><expr><literal type="string">"bitrate=%6.1fkbits/s\n"</literal></expr></argument>, <argument><expr><name>bitrate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>total_size</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>av_bprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf_script</name></expr></argument>, <argument><expr><literal type="string">"total_size=N/A\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>av_bprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf_script</name></expr></argument>, <argument><expr><literal type="string">"total_size=%"</literal><name>PRId64</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name>total_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>pts</name> <operator>==</operator> <name>AV_NOPTS_VALUE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_bprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf_script</name></expr></argument>, <argument><expr><literal type="string">"out_time_us=N/A\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_bprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf_script</name></expr></argument>, <argument><expr><literal type="string">"out_time_ms=N/A\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_bprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf_script</name></expr></argument>, <argument><expr><literal type="string">"out_time=N/A\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>av_bprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf_script</name></expr></argument>, <argument><expr><literal type="string">"out_time_us=%"</literal><name>PRId64</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name>pts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_bprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf_script</name></expr></argument>, <argument><expr><literal type="string">"out_time_ms=%"</literal><name>PRId64</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name>pts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_bprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf_script</name></expr></argument>, <argument><expr><literal type="string">"out_time=%s%02d:%02d:%02d.%06d\n"</literal></expr></argument>,

<argument><expr><name>hours_sign</name></expr></argument>, <argument><expr><name>hours</name></expr></argument>, <argument><expr><name>mins</name></expr></argument>, <argument><expr><name>secs</name></expr></argument>, <argument><expr><name>us</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>nb_frames_dup</name> <operator>||</operator> <name>nb_frames_drop</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_bprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><literal type="string">" dup=%d drop=%d"</literal></expr></argument>, <argument><expr><name>nb_frames_dup</name></expr></argument>, <argument><expr><name>nb_frames_drop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_bprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf_script</name></expr></argument>, <argument><expr><literal type="string">"dup_frames=%d\n"</literal></expr></argument>, <argument><expr><name>nb_frames_dup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_bprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf_script</name></expr></argument>, <argument><expr><literal type="string">"drop_frames=%d\n"</literal></expr></argument>, <argument><expr><name>nb_frames_drop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>speed</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_bprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><literal type="string">" speed=N/A"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_bprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf_script</name></expr></argument>, <argument><expr><literal type="string">"speed=N/A\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>av_bprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><literal type="string">" speed=%4.3gx"</literal></expr></argument>, <argument><expr><name>speed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_bprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf_script</name></expr></argument>, <argument><expr><literal type="string">"speed=%4.3gx\n"</literal></expr></argument>, <argument><expr><name>speed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>print_stats</name> <operator>||</operator> <name>is_last_report</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name></type> <name>end</name> <init>= <expr><ternary><condition><expr><name>is_last_report</name></expr> ?</condition><then> <expr><literal type="char">'\n'</literal></expr> </then><else>: <expr><literal type="char">'\r'</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>print_stats</name><operator>==</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>AV_LOG_INFO</name> <operator>&gt;</operator> <call><name>av_log_get_level</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%s %c"</literal></expr></argument>, <argument><expr><name><name>buf</name><operator>.</operator><name>str</name></name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"%s %c"</literal></expr></argument>, <argument><expr><name><name>buf</name><operator>.</operator><name>str</name></name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_bprint_finalize</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>progress_avio</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_bprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf_script</name></expr></argument>, <argument><expr><literal type="string">"progress=%s\n"</literal></expr></argument>,

<argument><expr><ternary><condition><expr><name>is_last_report</name></expr> ?</condition><then> <expr><literal type="string">"end"</literal></expr> </then><else>: <expr><literal type="string">"continue"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_write</name><argument_list>(<argument><expr><name>progress_avio</name></expr></argument>, <argument><expr><name><name>buf_script</name><operator>.</operator><name>str</name></name></expr></argument>,

<argument><expr><call><name>FFMIN</name><argument_list>(<argument><expr><name><name>buf_script</name><operator>.</operator><name>len</name></name></expr></argument>, <argument><expr><name><name>buf_script</name><operator>.</operator><name>size</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_flush</name><argument_list>(<argument><expr><name>progress_avio</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_bprint_finalize</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf_script</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>is_last_report</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>avio_closep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>progress_avio</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"Error closing progress log, loss of information possible: %s\n"</literal></expr></argument>, <argument><expr><call><name>av_err2str</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>is_last_report</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>print_final_stats</name><argument_list>(<argument><expr><name>total_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ifilter_parameters_from_codecpar</name><parameter_list>(<parameter><decl><type><name>InputFilter</name> <modifier>*</modifier></type><name>ifilter</name></decl></parameter>, <parameter><decl><type><name>AVCodecParameters</name> <modifier>*</modifier></type><name>par</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>ifilter</name><operator>-&gt;</operator><name>format</name></name> <operator>=</operator> <name><name>par</name><operator>-&gt;</operator><name>format</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ifilter</name><operator>-&gt;</operator><name>sample_rate</name></name> <operator>=</operator> <name><name>par</name><operator>-&gt;</operator><name>sample_rate</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ifilter</name><operator>-&gt;</operator><name>channels</name></name> <operator>=</operator> <name><name>par</name><operator>-&gt;</operator><name>channels</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ifilter</name><operator>-&gt;</operator><name>channel_layout</name></name> <operator>=</operator> <name><name>par</name><operator>-&gt;</operator><name>channel_layout</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ifilter</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator> <name><name>par</name><operator>-&gt;</operator><name>width</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ifilter</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <name><name>par</name><operator>-&gt;</operator><name>height</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ifilter</name><operator>-&gt;</operator><name>sample_aspect_ratio</name></name> <operator>=</operator> <name><name>par</name><operator>-&gt;</operator><name>sample_aspect_ratio</name></name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>flush_encoders</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nb_output_streams</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>OutputStream</name> <modifier>*</modifier></type><name>ost</name> <init>= <expr><name><name>output_streams</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>enc</name> <init>= <expr><name><name>ost</name><operator>-&gt;</operator><name>enc_ctx</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>OutputFile</name> <modifier>*</modifier></type><name>of</name> <init>= <expr><name><name>output_files</name><index>[<expr><name><name>ost</name><operator>-&gt;</operator><name>file_index</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ost</name><operator>-&gt;</operator><name>encoding_needed</name></name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ost</name><operator>-&gt;</operator><name>initialized</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>FilterGraph</name> <modifier>*</modifier></type><name>fg</name> <init>= <expr><name><name>ost</name><operator>-&gt;</operator><name>filter</name><operator>-&gt;</operator><name>graph</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>error</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>,

<argument><expr><literal type="string">"Finishing stream %d:%d without any data written to it.\n"</literal></expr></argument>,

<argument><expr><name><name>ost</name><operator>-&gt;</operator><name>file_index</name></name></expr></argument>, <argument><expr><name><name>ost</name><operator>-&gt;</operator><name>st</name><operator>-&gt;</operator><name>index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ost</name><operator>-&gt;</operator><name>filter</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>fg</name><operator>-&gt;</operator><name>graph</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name><name>fg</name><operator>-&gt;</operator><name>nb_inputs</name></name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>InputFilter</name> <modifier>*</modifier></type><name>ifilter</name> <init>= <expr><name><name>fg</name><operator>-&gt;</operator><name>inputs</name><index>[<expr><name>x</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ifilter</name><operator>-&gt;</operator><name>format</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ifilter_parameters_from_codecpar</name><argument_list>(<argument><expr><name>ifilter</name></expr></argument>, <argument><expr><name><name>ifilter</name><operator>-&gt;</operator><name>ist</name><operator>-&gt;</operator><name>st</name><operator>-&gt;</operator><name>codecpar</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ifilter_has_all_input_formats</name><argument_list>(<argument><expr><name>fg</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>configure_filtergraph</name><argument_list>(<argument><expr><name>fg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Error configuring filter graph\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>exit_program</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>finish_output_stream</name><argument_list>(<argument><expr><name>ost</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>init_output_stream</name><argument_list>(<argument><expr><name>ost</name></expr></argument>, <argument><expr><name>error</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>error</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Error initializing output stream %d:%d -- %s\n"</literal></expr></argument>,

<argument><expr><name><name>ost</name><operator>-&gt;</operator><name>file_index</name></name></expr></argument>, <argument><expr><name><name>ost</name><operator>-&gt;</operator><name>index</name></name></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>exit_program</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>enc</name><operator>-&gt;</operator><name>codec_type</name></name> <operator>==</operator> <name>AVMEDIA_TYPE_AUDIO</name> <operator>&amp;&amp;</operator> <name><name>enc</name><operator>-&gt;</operator><name>frame_size</name></name> <operator>&lt;=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>enc</name><operator>-&gt;</operator><name>codec_type</name></name> <operator>!=</operator> <name>AVMEDIA_TYPE_VIDEO</name> <operator>&amp;&amp;</operator> <name><name>enc</name><operator>-&gt;</operator><name>codec_type</name></name> <operator>!=</operator> <name>AVMEDIA_TYPE_AUDIO</name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>desc</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVPacket</name></type> <name>pkt</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>pkt_size</name></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>enc</name><operator>-&gt;</operator><name>codec_type</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>AVMEDIA_TYPE_AUDIO</name></expr>:</case>

<expr_stmt><expr><name>desc</name> <operator>=</operator> <literal type="string">"audio"</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AVMEDIA_TYPE_VIDEO</name></expr>:</case>

<expr_stmt><expr><name>desc</name> <operator>=</operator> <literal type="string">"video"</literal></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></switch>

<expr_stmt><expr><call><name>av_init_packet</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pkt</name><operator>.</operator><name>data</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pkt</name><operator>.</operator><name>size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>update_benchmark</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>avcodec_receive_packet</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pkt</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>EAGAIN</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>avcodec_send_frame</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_FATAL</name></expr></argument>, <argument><expr><literal type="string">"%s encoding failed: %s\n"</literal></expr></argument>,

<argument><expr><name>desc</name></expr></argument>,

<argument><expr><call><name>av_err2str</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>exit_program</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>update_benchmark</name><argument_list>(<argument><expr><literal type="string">"flush_%s %d.%d"</literal></expr></argument>, <argument><expr><name>desc</name></expr></argument>, <argument><expr><name><name>ost</name><operator>-&gt;</operator><name>file_index</name></name></expr></argument>, <argument><expr><name><name>ost</name><operator>-&gt;</operator><name>index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>ret</name> <operator>!=</operator> <name>AVERROR_EOF</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_FATAL</name></expr></argument>, <argument><expr><literal type="string">"%s encoding failed: %s\n"</literal></expr></argument>,

<argument><expr><name>desc</name></expr></argument>,

<argument><expr><call><name>av_err2str</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>exit_program</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ost</name><operator>-&gt;</operator><name>logfile</name></name> <operator>&amp;&amp;</operator> <name><name>enc</name><operator>-&gt;</operator><name>stats_out</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name><name>ost</name><operator>-&gt;</operator><name>logfile</name></name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>enc</name><operator>-&gt;</operator><name>stats_out</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>AVERROR_EOF</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>output_packet</name><argument_list>(<argument><expr><name>of</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pkt</name></expr></argument>, <argument><expr><name>ost</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ost</name><operator>-&gt;</operator><name>finished</name></name> <operator>&amp;</operator> <name>MUXER_FINISHED</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_packet_unref</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_packet_rescale_ts</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pkt</name></expr></argument>, <argument><expr><name><name>enc</name><operator>-&gt;</operator><name>time_base</name></name></expr></argument>, <argument><expr><name><name>ost</name><operator>-&gt;</operator><name>mux_timebase</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pkt_size</name> <operator>=</operator> <name><name>pkt</name><operator>.</operator><name>size</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>output_packet</name><argument_list>(<argument><expr><name>of</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pkt</name></expr></argument>, <argument><expr><name>ost</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ost</name><operator>-&gt;</operator><name>enc_ctx</name><operator>-&gt;</operator><name>codec_type</name></name> <operator>==</operator> <name>AVMEDIA_TYPE_VIDEO</name> <operator>&amp;&amp;</operator> <name>vstats_filename</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>do_video_stats</name><argument_list>(<argument><expr><name>ost</name></expr></argument>, <argument><expr><name>pkt_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>check_output_constraints</name><parameter_list>(<parameter><decl><type><name>InputStream</name> <modifier>*</modifier></type><name>ist</name></decl></parameter>, <parameter><decl><type><name>OutputStream</name> <modifier>*</modifier></type><name>ost</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>OutputFile</name> <modifier>*</modifier></type><name>of</name> <init>= <expr><name><name>output_files</name><index>[<expr><name><name>ost</name><operator>-&gt;</operator><name>file_index</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ist_index</name> <init>= <expr><name><name>input_files</name><index>[<expr><name><name>ist</name><operator>-&gt;</operator><name>file_index</name></name></expr>]</index></name><operator>-&gt;</operator><name>ist_index</name> <operator>+</operator> <name><name>ist</name><operator>-&gt;</operator><name>st</name><operator>-&gt;</operator><name>index</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ost</name><operator>-&gt;</operator><name>source_index</name></name> <operator>!=</operator> <name>ist_index</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ost</name><operator>-&gt;</operator><name>finished</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>of</name><operator>-&gt;</operator><name>start_time</name></name> <operator>!=</operator> <name>AV_NOPTS_VALUE</name> <operator>&amp;&amp;</operator> <name><name>ist</name><operator>-&gt;</operator><name>pts</name></name> <operator>&lt;</operator> <name><name>of</name><operator>-&gt;</operator><name>start_time</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>do_streamcopy</name><parameter_list>(<parameter><decl><type><name>InputStream</name> <modifier>*</modifier></type><name>ist</name></decl></parameter>, <parameter><decl><type><name>OutputStream</name> <modifier>*</modifier></type><name>ost</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>AVPacket</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>OutputFile</name> <modifier>*</modifier></type><name>of</name> <init>= <expr><name><name>output_files</name><index>[<expr><name><name>ost</name><operator>-&gt;</operator><name>file_index</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>InputFile</name> <modifier>*</modifier></type><name>f</name> <init>= <expr><name><name>input_files</name> <index>[<expr><name><name>ist</name><operator>-&gt;</operator><name>file_index</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>start_time</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name><name>of</name><operator>-&gt;</operator><name>start_time</name></name> <operator>==</operator> <name>AV_NOPTS_VALUE</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name><name>of</name><operator>-&gt;</operator><name>start_time</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>ost_tb_start_time</name> <init>= <expr><call><name>av_rescale_q</name><argument_list>(<argument><expr><name>start_time</name></expr></argument>, <argument><expr><name>AV_TIME_BASE_Q</name></expr></argument>, <argument><expr><name><name>ost</name><operator>-&gt;</operator><name>mux_timebase</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVPacket</name></type> <name>opkt</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>pkt</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_init_packet</name><argument_list>(<argument><expr><operator>&amp;</operator><name>opkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>opkt</name><operator>.</operator><name>data</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>opkt</name><operator>.</operator><name>size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>output_packet</name><argument_list>(<argument><expr><name>of</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>opkt</name></expr></argument>, <argument><expr><name>ost</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>!</operator><name><name>ost</name><operator>-&gt;</operator><name>frame_number</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>pkt</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_PKT_FLAG_KEY</name><operator>)</operator><operator>)</operator> <operator>&amp;&amp;</operator>

<operator>!</operator><name><name>ost</name><operator>-&gt;</operator><name>copy_initial_nonkeyframes</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ost</name><operator>-&gt;</operator><name>frame_number</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>ost</name><operator>-&gt;</operator><name>copy_prior_start</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int64_t</name></type> <name>comp_start</name> <init>= <expr><name>start_time</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>copy_ts</name> <operator>&amp;&amp;</operator> <name><name>f</name><operator>-&gt;</operator><name>start_time</name></name> <operator>!=</operator> <name>AV_NOPTS_VALUE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>comp_start</name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name>start_time</name></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>start_time</name></name> <operator>+</operator> <name><name>f</name><operator>-&gt;</operator><name>ts_offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><ternary><condition><expr><name><name>pkt</name><operator>-&gt;</operator><name>pts</name></name> <operator>==</operator> <name>AV_NOPTS_VALUE</name></expr> ?</condition><then>

<expr><name><name>ist</name><operator>-&gt;</operator><name>pts</name></name> <operator>&lt;</operator> <name>comp_start</name></expr> </then><else>:

<expr><name><name>pkt</name><operator>-&gt;</operator><name>pts</name></name> <operator>&lt;</operator> <call><name>av_rescale_q</name><argument_list>(<argument><expr><name>comp_start</name></expr></argument>, <argument><expr><name>AV_TIME_BASE_Q</name></expr></argument>, <argument><expr><name><name>ist</name><operator>-&gt;</operator><name>st</name><operator>-&gt;</operator><name>time_base</name></name></expr></argument>)</argument_list></call></expr></else></ternary></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>of</name><operator>-&gt;</operator><name>recording_time</name></name> <operator>!=</operator> <name>INT64_MAX</name> <operator>&amp;&amp;</operator>

<name><name>ist</name><operator>-&gt;</operator><name>pts</name></name> <operator>&gt;=</operator> <name><name>of</name><operator>-&gt;</operator><name>recording_time</name></name> <operator>+</operator> <name>start_time</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>close_output_stream</name><argument_list>(<argument><expr><name>ost</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>recording_time</name></name> <operator>!=</operator> <name>INT64_MAX</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>start_time</name> <operator>=</operator> <name><name>f</name><operator>-&gt;</operator><name>ctx</name><operator>-&gt;</operator><name>start_time</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>start_time</name></name> <operator>!=</operator> <name>AV_NOPTS_VALUE</name> <operator>&amp;&amp;</operator> <name>copy_ts</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>start_time</name> <operator>+=</operator> <name><name>f</name><operator>-&gt;</operator><name>start_time</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ist</name><operator>-&gt;</operator><name>pts</name></name> <operator>&gt;=</operator> <name><name>f</name><operator>-&gt;</operator><name>recording_time</name></name> <operator>+</operator> <name>start_time</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>close_output_stream</name><argument_list>(<argument><expr><name>ost</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ost</name><operator>-&gt;</operator><name>enc_ctx</name><operator>-&gt;</operator><name>codec_type</name></name> <operator>==</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ost</name><operator>-&gt;</operator><name>sync_opts</name></name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>av_packet_ref</name><argument_list>(<argument><expr><operator>&amp;</operator><name>opkt</name></expr></argument>, <argument><expr><name>pkt</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>exit_program</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pkt</name><operator>-&gt;</operator><name>pts</name></name> <operator>!=</operator> <name>AV_NOPTS_VALUE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>opkt</name><operator>.</operator><name>pts</name></name> <operator>=</operator> <call><name>av_rescale_q</name><argument_list>(<argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>pts</name></name></expr></argument>, <argument><expr><name><name>ist</name><operator>-&gt;</operator><name>st</name><operator>-&gt;</operator><name>time_base</name></name></expr></argument>, <argument><expr><name><name>ost</name><operator>-&gt;</operator><name>mux_timebase</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <name>ost_tb_start_time</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pkt</name><operator>-&gt;</operator><name>dts</name></name> <operator>==</operator> <name>AV_NOPTS_VALUE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>opkt</name><operator>.</operator><name>dts</name></name> <operator>=</operator> <call><name>av_rescale_q</name><argument_list>(<argument><expr><name><name>ist</name><operator>-&gt;</operator><name>dts</name></name></expr></argument>, <argument><expr><name>AV_TIME_BASE_Q</name></expr></argument>, <argument><expr><name><name>ost</name><operator>-&gt;</operator><name>mux_timebase</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>ost</name><operator>-&gt;</operator><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_type</name></name> <operator>==</operator> <name>AVMEDIA_TYPE_AUDIO</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>duration</name> <init>= <expr><call><name>av_get_audio_frame_duration</name><argument_list>(<argument><expr><name><name>ist</name><operator>-&gt;</operator><name>dec_ctx</name></name></expr></argument>, <argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>duration</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>duration</name> <operator>=</operator> <name><name>ist</name><operator>-&gt;</operator><name>dec_ctx</name><operator>-&gt;</operator><name>frame_size</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>opkt</name><operator>.</operator><name>dts</name></name> <operator>=</operator> <macro><name>av_rescale_delta</name><argument_list>(<argument>ist-&gt;st-&gt;time_base</argument>, <argument>pkt-&gt;dts</argument>,

<argument>(AVRational){<literal type="number">1</literal></argument>, <argument>ist-&gt;dec_ctx-&gt;sample_rate}</argument>, <argument>duration</argument>,

<argument>&amp;ist-&gt;filter_in_rescale_delta_last</argument>, <argument>ost-&gt;mux_timebase</argument>)</argument_list></macro></expr>;</expr_stmt>

<expr_stmt><expr><name><name>opkt</name><operator>.</operator><name>pts</name></name> <operator>=</operator> <name><name>opkt</name><operator>.</operator><name>dts</name></name> <operator>-</operator> <name>ost_tb_start_time</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>opkt</name><operator>.</operator><name>dts</name></name> <operator>=</operator> <call><name>av_rescale_q</name><argument_list>(<argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>dts</name></name></expr></argument>, <argument><expr><name><name>ist</name><operator>-&gt;</operator><name>st</name><operator>-&gt;</operator><name>time_base</name></name></expr></argument>, <argument><expr><name><name>ost</name><operator>-&gt;</operator><name>mux_timebase</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>opkt</name><operator>.</operator><name>dts</name></name> <operator>-=</operator> <name>ost_tb_start_time</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>opkt</name><operator>.</operator><name>duration</name></name> <operator>=</operator> <call><name>av_rescale_q</name><argument_list>(<argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>duration</name></name></expr></argument>, <argument><expr><name><name>ist</name><operator>-&gt;</operator><name>st</name><operator>-&gt;</operator><name>time_base</name></name></expr></argument>, <argument><expr><name><name>ost</name><operator>-&gt;</operator><name>mux_timebase</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>output_packet</name><argument_list>(<argument><expr><name>of</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>opkt</name></expr></argument>, <argument><expr><name>ost</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>guess_input_channel_layout</name><parameter_list>(<parameter><decl><type><name>InputStream</name> <modifier>*</modifier></type><name>ist</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>dec</name> <init>= <expr><name><name>ist</name><operator>-&gt;</operator><name>dec_ctx</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>dec</name><operator>-&gt;</operator><name>channel_layout</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>layout_name</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>dec</name><operator>-&gt;</operator><name>channels</name></name> <operator>&gt;</operator> <name><name>ist</name><operator>-&gt;</operator><name>guess_layout_max</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>dec</name><operator>-&gt;</operator><name>channel_layout</name></name> <operator>=</operator> <call><name>av_get_default_channel_layout</name><argument_list>(<argument><expr><name><name>dec</name><operator>-&gt;</operator><name>channels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>dec</name><operator>-&gt;</operator><name>channel_layout</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_get_channel_layout_string</name><argument_list>(<argument><expr><name>layout_name</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>layout_name</name></expr></argument>)</argument_list></sizeof></expr></argument>,

<argument><expr><name><name>dec</name><operator>-&gt;</operator><name>channels</name></name></expr></argument>, <argument><expr><name><name>dec</name><operator>-&gt;</operator><name>channel_layout</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Guessed Channel Layout for Input Stream "</literal>

<literal type="string">"#%d.%d : %s\n"</literal></expr></argument>, <argument><expr><name><name>ist</name><operator>-&gt;</operator><name>file_index</name></name></expr></argument>, <argument><expr><name><name>ist</name><operator>-&gt;</operator><name>st</name><operator>-&gt;</operator><name>index</name></name></expr></argument>, <argument><expr><name>layout_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>check_decode_result</name><parameter_list>(<parameter><decl><type><name>InputStream</name> <modifier>*</modifier></type><name>ist</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>got_output</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ret</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>got_output</name> <operator>||</operator> <name>ret</name><operator>&lt;</operator><literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>decode_error_stat</name><index>[<expr><name>ret</name><operator>&lt;</operator><literal type="number">0</literal></expr>]</index></name> <operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>exit_on_error</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>exit_program</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>got_output</name> <operator>&amp;&amp;</operator> <name>ist</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>ist</name><operator>-&gt;</operator><name>decoded_frame</name><operator>-&gt;</operator><name>decode_error_flags</name></name> <operator>||</operator> <operator>(</operator><name><name>ist</name><operator>-&gt;</operator><name>decoded_frame</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_FRAME_FLAG_CORRUPT</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><ternary><condition><expr><name>exit_on_error</name></expr> ?</condition><then> <expr><name>AV_LOG_FATAL</name></expr> </then><else>: <expr><name>AV_LOG_WARNING</name></expr></else></ternary></expr></argument>,

<argument><expr><literal type="string">"%s: corrupt decoded frame in stream %d\n"</literal></expr></argument>, <argument><expr><name><name>input_files</name><index>[<expr><name><name>ist</name><operator>-&gt;</operator><name>file_index</name></name></expr>]</index></name><operator>-&gt;</operator><name><name>ctx</name><operator>-&gt;</operator><name>url</name></name></expr></argument>, <argument><expr><name><name>ist</name><operator>-&gt;</operator><name>st</name><operator>-&gt;</operator><name>index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>exit_on_error</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>exit_program</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ifilter_has_all_input_formats</name><parameter_list>(<parameter><decl><type><name>FilterGraph</name> <modifier>*</modifier></type><name>fg</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>fg</name><operator>-&gt;</operator><name>nb_inputs</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>fg</name><operator>-&gt;</operator><name>inputs</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>format</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>fg</name><operator>-&gt;</operator><name>inputs</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>type</name> <operator>==</operator> <name>AVMEDIA_TYPE_AUDIO</name> <operator>||</operator>

<name><name>fg</name><operator>-&gt;</operator><name>inputs</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>type</name> <operator>==</operator> <name>AVMEDIA_TYPE_VIDEO</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ifilter_send_frame</name><parameter_list>(<parameter><decl><type><name>InputFilter</name> <modifier>*</modifier></type><name>ifilter</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>frame</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>FilterGraph</name> <modifier>*</modifier></type><name>fg</name> <init>= <expr><name><name>ifilter</name><operator>-&gt;</operator><name>graph</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>need_reinit</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name>need_reinit</name> <operator>=</operator> <name><name>ifilter</name><operator>-&gt;</operator><name>format</name></name> <operator>!=</operator> <name><name>frame</name><operator>-&gt;</operator><name>format</name></name></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>ifilter</name><operator>-&gt;</operator><name>ist</name><operator>-&gt;</operator><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_type</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>AVMEDIA_TYPE_AUDIO</name></expr>:</case>

<expr_stmt><expr><name>need_reinit</name> <operator>|=</operator> <name><name>ifilter</name><operator>-&gt;</operator><name>sample_rate</name></name> <operator>!=</operator> <name><name>frame</name><operator>-&gt;</operator><name>sample_rate</name></name> <operator>||</operator>

<name><name>ifilter</name><operator>-&gt;</operator><name>channels</name></name> <operator>!=</operator> <name><name>frame</name><operator>-&gt;</operator><name>channels</name></name> <operator>||</operator>

<name><name>ifilter</name><operator>-&gt;</operator><name>channel_layout</name></name> <operator>!=</operator> <name><name>frame</name><operator>-&gt;</operator><name>channel_layout</name></name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AVMEDIA_TYPE_VIDEO</name></expr>:</case>

<expr_stmt><expr><name>need_reinit</name> <operator>|=</operator> <name><name>ifilter</name><operator>-&gt;</operator><name>width</name></name> <operator>!=</operator> <name><name>frame</name><operator>-&gt;</operator><name>width</name></name> <operator>||</operator>

<name><name>ifilter</name><operator>-&gt;</operator><name>height</name></name> <operator>!=</operator> <name><name>frame</name><operator>-&gt;</operator><name>height</name></name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ifilter</name><operator>-&gt;</operator><name>ist</name><operator>-&gt;</operator><name>reinit_filters</name></name> <operator>&amp;&amp;</operator> <name><name>fg</name><operator>-&gt;</operator><name>graph</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>need_reinit</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>!</operator><name><name>ifilter</name><operator>-&gt;</operator><name>hw_frames_ctx</name></name> <operator>!=</operator> <operator>!</operator><operator>!</operator><name><name>frame</name><operator>-&gt;</operator><name>hw_frames_ctx</name></name> <operator>||</operator>

<operator>(</operator><name><name>ifilter</name><operator>-&gt;</operator><name>hw_frames_ctx</name></name> <operator>&amp;&amp;</operator> <name><name>ifilter</name><operator>-&gt;</operator><name>hw_frames_ctx</name><operator>-&gt;</operator><name>data</name></name> <operator>!=</operator> <name><name>frame</name><operator>-&gt;</operator><name>hw_frames_ctx</name><operator>-&gt;</operator><name>data</name></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>need_reinit</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>need_reinit</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ifilter_parameters_from_frame</name><argument_list>(<argument><expr><name>ifilter</name></expr></argument>, <argument><expr><name>frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>need_reinit</name> <operator>||</operator> <operator>!</operator><name><name>fg</name><operator>-&gt;</operator><name>graph</name></name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>fg</name><operator>-&gt;</operator><name>nb_inputs</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ifilter_has_all_input_formats</name><argument_list>(<argument><expr><name>fg</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>tmp</name> <init>= <expr><call><name>av_frame_clone</name><argument_list>(<argument><expr><name>frame</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>tmp</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_frame_unref</name><argument_list>(<argument><expr><name>frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>av_fifo_space</name><argument_list>(<argument><expr><name><name>ifilter</name><operator>-&gt;</operator><name>frame_queue</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>av_fifo_realloc2</name><argument_list>(<argument><expr><name><name>ifilter</name><operator>-&gt;</operator><name>frame_queue</name></name></expr></argument>, <argument><expr><literal type="number">2</literal> <operator>*</operator> <call><name>av_fifo_size</name><argument_list>(<argument><expr><name><name>ifilter</name><operator>-&gt;</operator><name>frame_queue</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_fifo_generic_write</name><argument_list>(<argument><expr><name><name>ifilter</name><operator>-&gt;</operator><name>frame_queue</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmp</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>reap_filters</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>ret</name> <operator>!=</operator> <name>AVERROR_EOF</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Error while filtering: %s\n"</literal></expr></argument>, <argument><expr><call><name>av_err2str</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>configure_filtergraph</name><argument_list>(<argument><expr><name>fg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Error reinitializing filters!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>av_buffersrc_add_frame_flags</name><argument_list>(<argument><expr><name><name>ifilter</name><operator>-&gt;</operator><name>filter</name></name></expr></argument>, <argument><expr><name>frame</name></expr></argument>, <argument><expr><name>AV_BUFFERSRC_FLAG_PUSH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>AVERROR_EOF</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Error while filtering: %s\n"</literal></expr></argument>, <argument><expr><call><name>av_err2str</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ifilter_send_eof</name><parameter_list>(<parameter><decl><type><name>InputFilter</name> <modifier>*</modifier></type><name>ifilter</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>pts</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>ifilter</name><operator>-&gt;</operator><name>eof</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ifilter</name><operator>-&gt;</operator><name>filter</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>av_buffersrc_close</name><argument_list>(<argument><expr><name><name>ifilter</name><operator>-&gt;</operator><name>filter</name></name></expr></argument>, <argument><expr><name>pts</name></expr></argument>, <argument><expr><name>AV_BUFFERSRC_FLAG_PUSH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>ifilter</name><operator>-&gt;</operator><name>format</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ifilter_parameters_from_codecpar</name><argument_list>(<argument><expr><name>ifilter</name></expr></argument>, <argument><expr><name><name>ifilter</name><operator>-&gt;</operator><name>ist</name><operator>-&gt;</operator><name>st</name><operator>-&gt;</operator><name>codecpar</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ifilter</name><operator>-&gt;</operator><name>format</name></name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>ifilter</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>AVMEDIA_TYPE_AUDIO</name> <operator>||</operator> <name><name>ifilter</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>AVMEDIA_TYPE_VIDEO</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Cannot determine format of input stream %d:%d after EOF\n"</literal></expr></argument>, <argument><expr><name><name>ifilter</name><operator>-&gt;</operator><name>ist</name><operator>-&gt;</operator><name>file_index</name></name></expr></argument>, <argument><expr><name><name>ifilter</name><operator>-&gt;</operator><name>ist</name><operator>-&gt;</operator><name>st</name><operator>-&gt;</operator><name>index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>decode</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>frame</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>got_frame</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>got_frame</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>pkt</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>avcodec_send_packet</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>ret</name> <operator>!=</operator> <name>AVERROR_EOF</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>avcodec_receive_frame</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>ret</name> <operator>!=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>EAGAIN</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>got_frame</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>send_frame_to_filters</name><parameter_list>(<parameter><decl><type><name>InputStream</name> <modifier>*</modifier></type><name>ist</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>decoded_frame</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>f</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_assert1</name><argument_list>(<argument><expr><name><name>ist</name><operator>-&gt;</operator><name>nb_filters</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ist</name><operator>-&gt;</operator><name>nb_filters</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <name><name>ist</name><operator>-&gt;</operator><name>nb_filters</name></name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>f</name> <operator>=</operator> <name><name>ist</name><operator>-&gt;</operator><name>filter_frame</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>av_frame_ref</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>decoded_frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>f</name> <operator>=</operator> <name>decoded_frame</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ifilter_send_frame</name><argument_list>(<argument><expr><name><name>ist</name><operator>-&gt;</operator><name>filters</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>AVERROR_EOF</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"Failed to inject frame into filter network: %s\n"</literal></expr></argument>, <argument><expr><call><name>av_err2str</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>decode_audio</name><parameter_list>(<parameter><decl><type><name>InputStream</name> <modifier>*</modifier></type><name>ist</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>got_output</name></decl></parameter>,

<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>decode_failed</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>decoded_frame</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name> <init>= <expr><name><name>ist</name><operator>-&gt;</operator><name>dec_ctx</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>, <decl><type ref="prev"/><name>err</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVRational</name></type> <name>decoded_frame_tb</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ist</name><operator>-&gt;</operator><name>decoded_frame</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>ist</name><operator>-&gt;</operator><name>decoded_frame</name></name> <operator>=</operator> <call><name>av_frame_alloc</name><argument_list>()</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ist</name><operator>-&gt;</operator><name>filter_frame</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>ist</name><operator>-&gt;</operator><name>filter_frame</name></name> <operator>=</operator> <call><name>av_frame_alloc</name><argument_list>()</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>decoded_frame</name> <operator>=</operator> <name><name>ist</name><operator>-&gt;</operator><name>decoded_frame</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>update_benchmark</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>decode</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>decoded_frame</name></expr></argument>, <argument><expr><name>got_output</name></expr></argument>, <argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>update_benchmark</name><argument_list>(<argument><expr><literal type="string">"decode_audio %d.%d"</literal></expr></argument>, <argument><expr><name><name>ist</name><operator>-&gt;</operator><name>file_index</name></name></expr></argument>, <argument><expr><name><name>ist</name><operator>-&gt;</operator><name>st</name><operator>-&gt;</operator><name>index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>decode_failed</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>sample_rate</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Sample rate %d invalid\n"</literal></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>sample_rate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>AVERROR_INVALIDDATA</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>AVERROR_EOF</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>check_decode_result</name><argument_list>(<argument><expr><name>ist</name></expr></argument>, <argument><expr><name>got_output</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>got_output</name> <operator>||</operator> <name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>ist</name><operator>-&gt;</operator><name>samples_decoded</name></name> <operator>+=</operator> <name><name>decoded_frame</name><operator>-&gt;</operator><name>nb_samples</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ist</name><operator>-&gt;</operator><name>frames_decoded</name></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ist</name><operator>-&gt;</operator><name>next_pts</name></name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>int64_t</name><operator>)</operator><name>AV_TIME_BASE</name> <operator>*</operator> <name><name>decoded_frame</name><operator>-&gt;</operator><name>nb_samples</name></name><operator>)</operator> <operator>/</operator>

<name><name>avctx</name><operator>-&gt;</operator><name>sample_rate</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ist</name><operator>-&gt;</operator><name>next_dts</name></name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>int64_t</name><operator>)</operator><name>AV_TIME_BASE</name> <operator>*</operator> <name><name>decoded_frame</name><operator>-&gt;</operator><name>nb_samples</name></name><operator>)</operator> <operator>/</operator>

<name><name>avctx</name><operator>-&gt;</operator><name>sample_rate</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>decoded_frame</name><operator>-&gt;</operator><name>pts</name></name> <operator>!=</operator> <name>AV_NOPTS_VALUE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>decoded_frame_tb</name> <operator>=</operator> <name><name>ist</name><operator>-&gt;</operator><name>st</name><operator>-&gt;</operator><name>time_base</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>pkt</name> <operator>&amp;&amp;</operator> <name><name>pkt</name><operator>-&gt;</operator><name>pts</name></name> <operator>!=</operator> <name>AV_NOPTS_VALUE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>decoded_frame</name><operator>-&gt;</operator><name>pts</name></name> <operator>=</operator> <name><name>pkt</name><operator>-&gt;</operator><name>pts</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>decoded_frame_tb</name> <operator>=</operator> <name><name>ist</name><operator>-&gt;</operator><name>st</name><operator>-&gt;</operator><name>time_base</name></name></expr>;</expr_stmt>

</block_content>}</block></if><else>else <block>{<block_content>

<expr_stmt><expr><name><name>decoded_frame</name><operator>-&gt;</operator><name>pts</name></name> <operator>=</operator> <name><name>ist</name><operator>-&gt;</operator><name>dts</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>decoded_frame_tb</name> <operator>=</operator> <name>AV_TIME_BASE_Q</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>decoded_frame</name><operator>-&gt;</operator><name>pts</name></name> <operator>!=</operator> <name>AV_NOPTS_VALUE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>decoded_frame</name><operator>-&gt;</operator><name>pts</name></name> <operator>=</operator> <macro><name>av_rescale_delta</name><argument_list>(<argument>decoded_frame_tb</argument>, <argument>decoded_frame-&gt;pts</argument>,

<argument>(AVRational){<literal type="number">1</literal></argument>, <argument>avctx-&gt;sample_rate}</argument>, <argument>decoded_frame-&gt;nb_samples</argument>, <argument>&amp;ist-&gt;filter_in_rescale_delta_last</argument>,

<argument>(AVRational){<literal type="number">1</literal></argument>, <argument>avctx-&gt;sample_rate}</argument>)</argument_list></macro></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>ist</name><operator>-&gt;</operator><name>nb_samples</name></name> <operator>=</operator> <name><name>decoded_frame</name><operator>-&gt;</operator><name>nb_samples</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>send_frame_to_filters</name><argument_list>(<argument><expr><name>ist</name></expr></argument>, <argument><expr><name>decoded_frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_frame_unref</name><argument_list>(<argument><expr><name><name>ist</name><operator>-&gt;</operator><name>filter_frame</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_frame_unref</name><argument_list>(<argument><expr><name>decoded_frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><ternary><condition><expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>err</name></expr> </then><else>: <expr><name>ret</name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>decode_video</name><parameter_list>(<parameter><decl><type><name>InputStream</name> <modifier>*</modifier></type><name>ist</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>got_output</name></decl></parameter>, <parameter><decl><type><name>int64_t</name> <modifier>*</modifier></type><name>duration_pts</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>eof</name></decl></parameter>,

<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>decode_failed</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>decoded_frame</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>err</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>best_effort_timestamp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>dts</name> <init>= <expr><name>AV_NOPTS_VALUE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVPacket</name></type> <name>avpkt</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>eof</name> <operator>&amp;&amp;</operator> <name>pkt</name> <operator>&amp;&amp;</operator> <name><name>pkt</name><operator>-&gt;</operator><name>size</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ist</name><operator>-&gt;</operator><name>decoded_frame</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>ist</name><operator>-&gt;</operator><name>decoded_frame</name></name> <operator>=</operator> <call><name>av_frame_alloc</name><argument_list>()</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ist</name><operator>-&gt;</operator><name>filter_frame</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>ist</name><operator>-&gt;</operator><name>filter_frame</name></name> <operator>=</operator> <call><name>av_frame_alloc</name><argument_list>()</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>decoded_frame</name> <operator>=</operator> <name><name>ist</name><operator>-&gt;</operator><name>decoded_frame</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ist</name><operator>-&gt;</operator><name>dts</name></name> <operator>!=</operator> <name>AV_NOPTS_VALUE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>dts</name> <operator>=</operator> <call><name>av_rescale_q</name><argument_list>(<argument><expr><name><name>ist</name><operator>-&gt;</operator><name>dts</name></name></expr></argument>, <argument><expr><name>AV_TIME_BASE_Q</name></expr></argument>, <argument><expr><name><name>ist</name><operator>-&gt;</operator><name>st</name><operator>-&gt;</operator><name>time_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>pkt</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>avpkt</name> <operator>=</operator> <operator>*</operator><name>pkt</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avpkt</name><operator>.</operator><name>dts</name></name> <operator>=</operator> <name>dts</name></expr>;</expr_stmt> 

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>eof</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>new</name> <init>= <expr><call><name>av_realloc_array</name><argument_list>(<argument><expr><name><name>ist</name><operator>-&gt;</operator><name>dts_buffer</name></name></expr></argument>, <argument><expr><name><name>ist</name><operator>-&gt;</operator><name>nb_dts_buffer</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>ist</name><operator>-&gt;</operator><name>dts_buffer</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>new</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>ist</name><operator>-&gt;</operator><name>dts_buffer</name></name> <operator>=</operator> <name>new</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ist</name><operator>-&gt;</operator><name>dts_buffer</name><index>[<expr><name><name>ist</name><operator>-&gt;</operator><name>nb_dts_buffer</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>dts</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>update_benchmark</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>decode</name><argument_list>(<argument><expr><name><name>ist</name><operator>-&gt;</operator><name>dec_ctx</name></name></expr></argument>, <argument><expr><name>decoded_frame</name></expr></argument>, <argument><expr><name>got_output</name></expr></argument>, <argument><expr><ternary><condition><expr><name>pkt</name></expr> ?</condition><then> <expr><operator>&amp;</operator><name>avpkt</name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>update_benchmark</name><argument_list>(<argument><expr><literal type="string">"decode_video %d.%d"</literal></expr></argument>, <argument><expr><name><name>ist</name><operator>-&gt;</operator><name>file_index</name></name></expr></argument>, <argument><expr><name><name>ist</name><operator>-&gt;</operator><name>st</name><operator>-&gt;</operator><name>index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>decode_failed</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ist</name><operator>-&gt;</operator><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>video_delay</name></name> <operator>&lt;</operator> <name><name>ist</name><operator>-&gt;</operator><name>dec_ctx</name><operator>-&gt;</operator><name>has_b_frames</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>ist</name><operator>-&gt;</operator><name>dec_ctx</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_H264</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ist</name><operator>-&gt;</operator><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>video_delay</name></name> <operator>=</operator> <name><name>ist</name><operator>-&gt;</operator><name>dec_ctx</name><operator>-&gt;</operator><name>has_b_frames</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>ist</name><operator>-&gt;</operator><name>dec_ctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>,

<argument><expr><literal type="string">"video_delay is larger in decoder than demuxer %d &gt; %d.\n"</literal>

<literal type="string">"If you want to help, upload a sample "</literal>

<literal type="string">"of this file to ftp://upload.ffmpeg.org/incoming/ "</literal>

<literal type="string">"and contact the ffmpeg-devel mailing list. (ffmpeg-devel@ffmpeg.org)\n"</literal></expr></argument>,

<argument><expr><name><name>ist</name><operator>-&gt;</operator><name>dec_ctx</name><operator>-&gt;</operator><name>has_b_frames</name></name></expr></argument>,

<argument><expr><name><name>ist</name><operator>-&gt;</operator><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>video_delay</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>AVERROR_EOF</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>check_decode_result</name><argument_list>(<argument><expr><name>ist</name></expr></argument>, <argument><expr><name>got_output</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>got_output</name> <operator>&amp;&amp;</operator> <name>ret</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>ist</name><operator>-&gt;</operator><name>dec_ctx</name><operator>-&gt;</operator><name>width</name></name> <operator>!=</operator> <name><name>decoded_frame</name><operator>-&gt;</operator><name>width</name></name> <operator>||</operator>

<name><name>ist</name><operator>-&gt;</operator><name>dec_ctx</name><operator>-&gt;</operator><name>height</name></name> <operator>!=</operator> <name><name>decoded_frame</name><operator>-&gt;</operator><name>height</name></name> <operator>||</operator>

<name><name>ist</name><operator>-&gt;</operator><name>dec_ctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>!=</operator> <name><name>decoded_frame</name><operator>-&gt;</operator><name>format</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Frame parameters mismatch context %d,%d,%d != %d,%d,%d\n"</literal></expr></argument>,

<argument><expr><name><name>decoded_frame</name><operator>-&gt;</operator><name>width</name></name></expr></argument>,

<argument><expr><name><name>decoded_frame</name><operator>-&gt;</operator><name>height</name></name></expr></argument>,

<argument><expr><name><name>decoded_frame</name><operator>-&gt;</operator><name>format</name></name></expr></argument>,

<argument><expr><name><name>ist</name><operator>-&gt;</operator><name>dec_ctx</name><operator>-&gt;</operator><name>width</name></name></expr></argument>,

<argument><expr><name><name>ist</name><operator>-&gt;</operator><name>dec_ctx</name><operator>-&gt;</operator><name>height</name></name></expr></argument>,

<argument><expr><name><name>ist</name><operator>-&gt;</operator><name>dec_ctx</name><operator>-&gt;</operator><name>pix_fmt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>got_output</name> <operator>||</operator> <name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>ist</name><operator>-&gt;</operator><name>top_field_first</name></name><operator>&gt;=</operator><literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>decoded_frame</name><operator>-&gt;</operator><name>top_field_first</name></name> <operator>=</operator> <name><name>ist</name><operator>-&gt;</operator><name>top_field_first</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>ist</name><operator>-&gt;</operator><name>frames_decoded</name></name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ist</name><operator>-&gt;</operator><name>hwaccel_retrieve_data</name></name> <operator>&amp;&amp;</operator> <name><name>decoded_frame</name><operator>-&gt;</operator><name>format</name></name> <operator>==</operator> <name><name>ist</name><operator>-&gt;</operator><name>hwaccel_pix_fmt</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name><name>ist</name><operator>-&gt;</operator><name>hwaccel_retrieve_data</name></name><argument_list>(<argument><expr><name><name>ist</name><operator>-&gt;</operator><name>dec_ctx</name></name></expr></argument>, <argument><expr><name>decoded_frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ist</name><operator>-&gt;</operator><name>hwaccel_retrieved_pix_fmt</name></name> <operator>=</operator> <name><name>decoded_frame</name><operator>-&gt;</operator><name>format</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>best_effort_timestamp</name><operator>=</operator> <name><name>decoded_frame</name><operator>-&gt;</operator><name>best_effort_timestamp</name></name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>duration_pts</name> <operator>=</operator> <name><name>decoded_frame</name><operator>-&gt;</operator><name>pkt_duration</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ist</name><operator>-&gt;</operator><name>framerate</name><operator>.</operator><name>num</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>best_effort_timestamp</name> <operator>=</operator> <name><name>ist</name><operator>-&gt;</operator><name>cfr_next_pts</name></name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>eof</name> <operator>&amp;&amp;</operator> <name>best_effort_timestamp</name> <operator>==</operator> <name>AV_NOPTS_VALUE</name> <operator>&amp;&amp;</operator> <name><name>ist</name><operator>-&gt;</operator><name>nb_dts_buffer</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>best_effort_timestamp</name> <operator>=</operator> <name><name>ist</name><operator>-&gt;</operator><name>dts_buffer</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ist</name><operator>-&gt;</operator><name>nb_dts_buffer</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ist</name><operator>-&gt;</operator><name>dts_buffer</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>ist</name><operator>-&gt;</operator><name>dts_buffer</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name><name>ist</name><operator>-&gt;</operator><name>nb_dts_buffer</name></name><operator>--</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>best_effort_timestamp</name> <operator>!=</operator> <name>AV_NOPTS_VALUE</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int64_t</name></type> <name>ts</name> <init>= <expr><call><name>av_rescale_q</name><argument_list>(<argument><expr><name><name>decoded_frame</name><operator>-&gt;</operator><name>pts</name></name> <operator>=</operator> <name>best_effort_timestamp</name></expr></argument>, <argument><expr><name><name>ist</name><operator>-&gt;</operator><name>st</name><operator>-&gt;</operator><name>time_base</name></name></expr></argument>, <argument><expr><name>AV_TIME_BASE_Q</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ts</name> <operator>!=</operator> <name>AV_NOPTS_VALUE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ist</name><operator>-&gt;</operator><name>next_pts</name></name> <operator>=</operator> <name><name>ist</name><operator>-&gt;</operator><name>pts</name></name> <operator>=</operator> <name>ts</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>debug_ts</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"decoder -&gt; ist_index:%d type:video "</literal>

<literal type="string">"frame_pts:%s frame_pts_time:%s best_effort_ts:%"</literal><name>PRId64</name><literal type="string">" best_effort_ts_time:%s keyframe:%d frame_type:%d time_base:%d/%d\n"</literal></expr></argument>,

<argument><expr><name><name>ist</name><operator>-&gt;</operator><name>st</name><operator>-&gt;</operator><name>index</name></name></expr></argument>, <argument><expr><call><name>av_ts2str</name><argument_list>(<argument><expr><name><name>decoded_frame</name><operator>-&gt;</operator><name>pts</name></name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>av_ts2timestr</name><argument_list>(<argument><expr><name><name>decoded_frame</name><operator>-&gt;</operator><name>pts</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ist</name><operator>-&gt;</operator><name>st</name><operator>-&gt;</operator><name>time_base</name></name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>best_effort_timestamp</name></expr></argument>,

<argument><expr><call><name>av_ts2timestr</name><argument_list>(<argument><expr><name>best_effort_timestamp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ist</name><operator>-&gt;</operator><name>st</name><operator>-&gt;</operator><name>time_base</name></name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name><name>decoded_frame</name><operator>-&gt;</operator><name>key_frame</name></name></expr></argument>, <argument><expr><name><name>decoded_frame</name><operator>-&gt;</operator><name>pict_type</name></name></expr></argument>,

<argument><expr><name><name>ist</name><operator>-&gt;</operator><name>st</name><operator>-&gt;</operator><name>time_base</name><operator>.</operator><name>num</name></name></expr></argument>, <argument><expr><name><name>ist</name><operator>-&gt;</operator><name>st</name><operator>-&gt;</operator><name>time_base</name><operator>.</operator><name>den</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ist</name><operator>-&gt;</operator><name>st</name><operator>-&gt;</operator><name>sample_aspect_ratio</name><operator>.</operator><name>num</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>decoded_frame</name><operator>-&gt;</operator><name>sample_aspect_ratio</name></name> <operator>=</operator> <name><name>ist</name><operator>-&gt;</operator><name>st</name><operator>-&gt;</operator><name>sample_aspect_ratio</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>send_frame_to_filters</name><argument_list>(<argument><expr><name>ist</name></expr></argument>, <argument><expr><name>decoded_frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>fail</name>:</label>

<expr_stmt><expr><call><name>av_frame_unref</name><argument_list>(<argument><expr><name><name>ist</name><operator>-&gt;</operator><name>filter_frame</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_frame_unref</name><argument_list>(<argument><expr><name>decoded_frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><ternary><condition><expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>err</name></expr> </then><else>: <expr><name>ret</name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>transcode_subtitles</name><parameter_list>(<parameter><decl><type><name>InputStream</name> <modifier>*</modifier></type><name>ist</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>got_output</name></decl></parameter>,

<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>decode_failed</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVSubtitle</name></type> <name>subtitle</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>free_sub</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>ret</name> <init>= <expr><call><name>avcodec_decode_subtitle2</name><argument_list>(<argument><expr><name><name>ist</name><operator>-&gt;</operator><name>dec_ctx</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>subtitle</name></expr></argument>, <argument><expr><name>got_output</name></expr></argument>, <argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>check_decode_result</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>got_output</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <operator>!</operator><operator>*</operator><name>got_output</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>decode_failed</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pkt</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>sub2video_flush</name><argument_list>(<argument><expr><name>ist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ist</name><operator>-&gt;</operator><name>fix_sub_duration</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>end</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ist</name><operator>-&gt;</operator><name>prev_sub</name><operator>.</operator><name>got_output</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>end</name> <operator>=</operator> <call><name>av_rescale</name><argument_list>(<argument><expr><name><name>subtitle</name><operator>.</operator><name>pts</name></name> <operator>-</operator> <name><name>ist</name><operator>-&gt;</operator><name>prev_sub</name><operator>.</operator><name>subtitle</name><operator>.</operator><name>pts</name></name></expr></argument>,

<argument><expr><literal type="number">1000</literal></expr></argument>, <argument><expr><name>AV_TIME_BASE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>end</name> <operator>&lt;</operator> <name><name>ist</name><operator>-&gt;</operator><name>prev_sub</name><operator>.</operator><name>subtitle</name><operator>.</operator><name>end_display_time</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>ist</name><operator>-&gt;</operator><name>dec_ctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>,

<argument><expr><literal type="string">"Subtitle duration reduced from %"</literal><name>PRId32</name><literal type="string">" to %d%s\n"</literal></expr></argument>,

<argument><expr><name><name>ist</name><operator>-&gt;</operator><name>prev_sub</name><operator>.</operator><name>subtitle</name><operator>.</operator><name>end_display_time</name></name></expr></argument>, <argument><expr><name>end</name></expr></argument>,

<argument><expr><ternary><condition><expr><name>end</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="string">", dropping it"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ist</name><operator>-&gt;</operator><name>prev_sub</name><operator>.</operator><name>subtitle</name><operator>.</operator><name>end_display_time</name></name> <operator>=</operator> <name>end</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>FFSWAP</name><argument_list>(<argument><expr><name>int</name></expr></argument>, <argument><expr><operator>*</operator><name>got_output</name></expr></argument>, <argument><expr><name><name>ist</name><operator>-&gt;</operator><name>prev_sub</name><operator>.</operator><name>got_output</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>FFSWAP</name><argument_list>(<argument><expr><name>int</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>, <argument><expr><name><name>ist</name><operator>-&gt;</operator><name>prev_sub</name><operator>.</operator><name>ret</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>FFSWAP</name><argument_list>(<argument><expr><name>AVSubtitle</name></expr></argument>, <argument><expr><name>subtitle</name></expr></argument>, <argument><expr><name><name>ist</name><operator>-&gt;</operator><name>prev_sub</name><operator>.</operator><name>subtitle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>end</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>out</name>;</goto></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>got_output</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ist</name><operator>-&gt;</operator><name>sub2video</name><operator>.</operator><name>frame</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>sub2video_update</name><argument_list>(<argument><expr><name>ist</name></expr></argument>, <argument><expr><name>INT64_MIN</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>subtitle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>ist</name><operator>-&gt;</operator><name>nb_filters</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ist</name><operator>-&gt;</operator><name>sub2video</name><operator>.</operator><name>sub_queue</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ist</name><operator>-&gt;</operator><name>sub2video</name><operator>.</operator><name>sub_queue</name></name> <operator>=</operator> <call><name>av_fifo_alloc</name><argument_list>(<argument><expr><literal type="number">8</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>AVSubtitle</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ist</name><operator>-&gt;</operator><name>sub2video</name><operator>.</operator><name>sub_queue</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>exit_program</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>av_fifo_space</name><argument_list>(<argument><expr><name><name>ist</name><operator>-&gt;</operator><name>sub2video</name><operator>.</operator><name>sub_queue</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>av_fifo_realloc2</name><argument_list>(<argument><expr><name><name>ist</name><operator>-&gt;</operator><name>sub2video</name><operator>.</operator><name>sub_queue</name></name></expr></argument>, <argument><expr><literal type="number">2</literal> <operator>*</operator> <call><name>av_fifo_size</name><argument_list>(<argument><expr><name><name>ist</name><operator>-&gt;</operator><name>sub2video</name><operator>.</operator><name>sub_queue</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>exit_program</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_fifo_generic_write</name><argument_list>(<argument><expr><name><name>ist</name><operator>-&gt;</operator><name>sub2video</name><operator>.</operator><name>sub_queue</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>subtitle</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>subtitle</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>free_sub</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>subtitle</name><operator>.</operator><name>num_rects</name></name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>out</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>ist</name><operator>-&gt;</operator><name>frames_decoded</name></name><operator>++</operator></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nb_output_streams</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>OutputStream</name> <modifier>*</modifier></type><name>ost</name> <init>= <expr><name><name>output_streams</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>check_output_constraints</name><argument_list>(<argument><expr><name>ist</name></expr></argument>, <argument><expr><name>ost</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><name><name>ost</name><operator>-&gt;</operator><name>encoding_needed</name></name>

<operator>||</operator> <name><name>ost</name><operator>-&gt;</operator><name>enc</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>AVMEDIA_TYPE_SUBTITLE</name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>do_subtitle_out</name><argument_list>(<argument><expr><name><name>output_files</name><index>[<expr><name><name>ost</name><operator>-&gt;</operator><name>file_index</name></name></expr>]</index></name></expr></argument>, <argument><expr><name>ost</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>subtitle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<label><name>out</name>:</label>

<if_stmt><if>if <condition>(<expr><name>free_sub</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>avsubtitle_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>subtitle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>send_filter_eof</name><parameter_list>(<parameter><decl><type><name>InputStream</name> <modifier>*</modifier></type><name>ist</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>pts</name> <init>= <expr><call><name>av_rescale_q_rnd</name><argument_list>(<argument><expr><name><name>ist</name><operator>-&gt;</operator><name>pts</name></name></expr></argument>, <argument><expr><name>AV_TIME_BASE_Q</name></expr></argument>, <argument><expr><name><name>ist</name><operator>-&gt;</operator><name>st</name><operator>-&gt;</operator><name>time_base</name></name></expr></argument>,

<argument><expr><name>AV_ROUND_NEAR_INF</name> <operator>|</operator> <name>AV_ROUND_PASS_MINMAX</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ist</name><operator>-&gt;</operator><name>nb_filters</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ifilter_send_eof</name><argument_list>(<argument><expr><name><name>ist</name><operator>-&gt;</operator><name>filters</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>pts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>process_input_packet</name><parameter_list>(<parameter><decl><type><name>InputStream</name> <modifier>*</modifier></type><name>ist</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>AVPacket</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>no_eof</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>repeating</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>eof_reached</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVPacket</name></type> <name>avpkt</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ist</name><operator>-&gt;</operator><name>saw_first_ts</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ist</name><operator>-&gt;</operator><name>dts</name></name> <operator>=</operator> <ternary><condition><expr><name><name>ist</name><operator>-&gt;</operator><name>st</name><operator>-&gt;</operator><name>avg_frame_rate</name><operator>.</operator><name>num</name></name></expr> ?</condition><then> <expr><operator>-</operator> <name><name>ist</name><operator>-&gt;</operator><name>dec_ctx</name><operator>-&gt;</operator><name>has_b_frames</name></name> <operator>*</operator> <name>AV_TIME_BASE</name> <operator>/</operator> <call><name>av_q2d</name><argument_list>(<argument><expr><name><name>ist</name><operator>-&gt;</operator><name>st</name><operator>-&gt;</operator><name>avg_frame_rate</name></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ist</name><operator>-&gt;</operator><name>pts</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>pkt</name> <operator>&amp;&amp;</operator> <name><name>pkt</name><operator>-&gt;</operator><name>pts</name></name> <operator>!=</operator> <name>AV_NOPTS_VALUE</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>ist</name><operator>-&gt;</operator><name>decoding_needed</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ist</name><operator>-&gt;</operator><name>dts</name></name> <operator>+=</operator> <call><name>av_rescale_q</name><argument_list>(<argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>pts</name></name></expr></argument>, <argument><expr><name><name>ist</name><operator>-&gt;</operator><name>st</name><operator>-&gt;</operator><name>time_base</name></name></expr></argument>, <argument><expr><name>AV_TIME_BASE_Q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ist</name><operator>-&gt;</operator><name>pts</name></name> <operator>=</operator> <name><name>ist</name><operator>-&gt;</operator><name>dts</name></name></expr>;</expr_stmt> 

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ist</name><operator>-&gt;</operator><name>saw_first_ts</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ist</name><operator>-&gt;</operator><name>next_dts</name></name> <operator>==</operator> <name>AV_NOPTS_VALUE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ist</name><operator>-&gt;</operator><name>next_dts</name></name> <operator>=</operator> <name><name>ist</name><operator>-&gt;</operator><name>dts</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ist</name><operator>-&gt;</operator><name>next_pts</name></name> <operator>==</operator> <name>AV_NOPTS_VALUE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ist</name><operator>-&gt;</operator><name>next_pts</name></name> <operator>=</operator> <name><name>ist</name><operator>-&gt;</operator><name>pts</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>pkt</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_init_packet</name><argument_list>(<argument><expr><operator>&amp;</operator><name>avpkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avpkt</name><operator>.</operator><name>data</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avpkt</name><operator>.</operator><name>size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>avpkt</name> <operator>=</operator> <operator>*</operator><name>pkt</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>pkt</name> <operator>&amp;&amp;</operator> <name><name>pkt</name><operator>-&gt;</operator><name>dts</name></name> <operator>!=</operator> <name>AV_NOPTS_VALUE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ist</name><operator>-&gt;</operator><name>next_dts</name></name> <operator>=</operator> <name><name>ist</name><operator>-&gt;</operator><name>dts</name></name> <operator>=</operator> <call><name>av_rescale_q</name><argument_list>(<argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>dts</name></name></expr></argument>, <argument><expr><name><name>ist</name><operator>-&gt;</operator><name>st</name><operator>-&gt;</operator><name>time_base</name></name></expr></argument>, <argument><expr><name>AV_TIME_BASE_Q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ist</name><operator>-&gt;</operator><name>dec_ctx</name><operator>-&gt;</operator><name>codec_type</name></name> <operator>!=</operator> <name>AVMEDIA_TYPE_VIDEO</name> <operator>||</operator> <operator>!</operator><name><name>ist</name><operator>-&gt;</operator><name>decoding_needed</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ist</name><operator>-&gt;</operator><name>next_pts</name></name> <operator>=</operator> <name><name>ist</name><operator>-&gt;</operator><name>pts</name></name> <operator>=</operator> <name><name>ist</name><operator>-&gt;</operator><name>dts</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><name><name>ist</name><operator>-&gt;</operator><name>decoding_needed</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int64_t</name></type> <name>duration_dts</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>duration_pts</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>got_output</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>decode_failed</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>ist</name><operator>-&gt;</operator><name>pts</name></name> <operator>=</operator> <name><name>ist</name><operator>-&gt;</operator><name>next_pts</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ist</name><operator>-&gt;</operator><name>dts</name></name> <operator>=</operator> <name><name>ist</name><operator>-&gt;</operator><name>next_dts</name></name></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>ist</name><operator>-&gt;</operator><name>dec_ctx</name><operator>-&gt;</operator><name>codec_type</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>AVMEDIA_TYPE_AUDIO</name></expr>:</case>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>decode_audio</name> <argument_list>(<argument><expr><name>ist</name></expr></argument>, <argument><expr><ternary><condition><expr><name>repeating</name></expr> ?</condition><then> <expr><name>NULL</name></expr> </then><else>: <expr><operator>&amp;</operator><name>avpkt</name></expr></else></ternary></expr></argument>, <argument><expr><operator>&amp;</operator><name>got_output</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>decode_failed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AVMEDIA_TYPE_VIDEO</name></expr>:</case>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>decode_video</name> <argument_list>(<argument><expr><name>ist</name></expr></argument>, <argument><expr><ternary><condition><expr><name>repeating</name></expr> ?</condition><then> <expr><name>NULL</name></expr> </then><else>: <expr><operator>&amp;</operator><name>avpkt</name></expr></else></ternary></expr></argument>, <argument><expr><operator>&amp;</operator><name>got_output</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>duration_pts</name></expr></argument>, <argument><expr><operator>!</operator><name>pkt</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>decode_failed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>repeating</name> <operator>||</operator> <operator>!</operator><name>pkt</name> <operator>||</operator> <name>got_output</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>pkt</name> <operator>&amp;&amp;</operator> <name><name>pkt</name><operator>-&gt;</operator><name>duration</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>duration_dts</name> <operator>=</operator> <call><name>av_rescale_q</name><argument_list>(<argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>duration</name></name></expr></argument>, <argument><expr><name><name>ist</name><operator>-&gt;</operator><name>st</name><operator>-&gt;</operator><name>time_base</name></name></expr></argument>, <argument><expr><name>AV_TIME_BASE_Q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name><name>ist</name><operator>-&gt;</operator><name>dec_ctx</name><operator>-&gt;</operator><name>framerate</name><operator>.</operator><name>num</name></name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>ist</name><operator>-&gt;</operator><name>dec_ctx</name><operator>-&gt;</operator><name>framerate</name><operator>.</operator><name>den</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ticks</name><init>= <expr><ternary><condition><expr><call><name>av_stream_get_parser</name><argument_list>(<argument><expr><name><name>ist</name><operator>-&gt;</operator><name>st</name></name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><call><name>av_stream_get_parser</name><argument_list>(<argument><expr><name><name>ist</name><operator>-&gt;</operator><name>st</name></name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>repeat_pict</name><operator>+</operator><literal type="number">1</literal></expr> </then><else>: <expr><name><name>ist</name><operator>-&gt;</operator><name>dec_ctx</name><operator>-&gt;</operator><name>ticks_per_frame</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>duration_dts</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>int64_t</name><operator>)</operator><name>AV_TIME_BASE</name> <operator>*</operator>

<name><name>ist</name><operator>-&gt;</operator><name>dec_ctx</name><operator>-&gt;</operator><name>framerate</name><operator>.</operator><name>den</name></name> <operator>*</operator> <name>ticks</name><operator>)</operator> <operator>/</operator>

<name><name>ist</name><operator>-&gt;</operator><name>dec_ctx</name><operator>-&gt;</operator><name>framerate</name><operator>.</operator><name>num</name></name> <operator>/</operator> <name><name>ist</name><operator>-&gt;</operator><name>dec_ctx</name><operator>-&gt;</operator><name>ticks_per_frame</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>ist</name><operator>-&gt;</operator><name>dts</name></name> <operator>!=</operator> <name>AV_NOPTS_VALUE</name> <operator>&amp;&amp;</operator> <name>duration_dts</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ist</name><operator>-&gt;</operator><name>next_dts</name></name> <operator>+=</operator> <name>duration_dts</name></expr>;</expr_stmt>

</block_content>}</block></if><else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ist</name><operator>-&gt;</operator><name>next_dts</name></name> <operator>=</operator> <name>AV_NOPTS_VALUE</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>got_output</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>duration_pts</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ist</name><operator>-&gt;</operator><name>next_pts</name></name> <operator>+=</operator> <call><name>av_rescale_q</name><argument_list>(<argument><expr><name>duration_pts</name></expr></argument>, <argument><expr><name><name>ist</name><operator>-&gt;</operator><name>st</name><operator>-&gt;</operator><name>time_base</name></name></expr></argument>, <argument><expr><name>AV_TIME_BASE_Q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>ist</name><operator>-&gt;</operator><name>next_pts</name></name> <operator>+=</operator> <name>duration_dts</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><name>AVMEDIA_TYPE_SUBTITLE</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name>repeating</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>transcode_subtitles</name><argument_list>(<argument><expr><name>ist</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>avpkt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>got_output</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>decode_failed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>pkt</name> <operator>&amp;&amp;</operator> <name>ret</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>AVERROR_EOF</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<break>break;</break>

<default>default:</default>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>AVERROR_EOF</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>eof_reached</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>decode_failed</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Error while decoding stream #%d:%d: %s\n"</literal></expr></argument>,

<argument><expr><name><name>ist</name><operator>-&gt;</operator><name>file_index</name></name></expr></argument>, <argument><expr><name><name>ist</name><operator>-&gt;</operator><name>st</name><operator>-&gt;</operator><name>index</name></name></expr></argument>, <argument><expr><call><name>av_err2str</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_FATAL</name></expr></argument>, <argument><expr><literal type="string">"Error while processing the decoded "</literal>

<literal type="string">"data for stream #%d:%d\n"</literal></expr></argument>, <argument><expr><name><name>ist</name><operator>-&gt;</operator><name>file_index</name></name></expr></argument>, <argument><expr><name><name>ist</name><operator>-&gt;</operator><name>st</name><operator>-&gt;</operator><name>index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>decode_failed</name> <operator>||</operator> <name>exit_on_error</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>exit_program</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>got_output</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ist</name><operator>-&gt;</operator><name>got_output</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>got_output</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>pkt</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>repeating</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>pkt</name> <operator>&amp;&amp;</operator> <name><name>ist</name><operator>-&gt;</operator><name>decoding_needed</name></name> <operator>&amp;&amp;</operator> <name>eof_reached</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>no_eof</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>send_filter_eof</name><argument_list>(<argument><expr><name>ist</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_FATAL</name></expr></argument>, <argument><expr><literal type="string">"Error marking filters as finished\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>exit_program</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ist</name><operator>-&gt;</operator><name>decoding_needed</name></name> <operator>&amp;&amp;</operator> <name>pkt</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ist</name><operator>-&gt;</operator><name>dts</name></name> <operator>=</operator> <name><name>ist</name><operator>-&gt;</operator><name>next_dts</name></name></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>ist</name><operator>-&gt;</operator><name>dec_ctx</name><operator>-&gt;</operator><name>codec_type</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>AVMEDIA_TYPE_AUDIO</name></expr>:</case>

<expr_stmt><expr><call><name>av_assert1</name><argument_list>(<argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>duration</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ist</name><operator>-&gt;</operator><name>dec_ctx</name><operator>-&gt;</operator><name>sample_rate</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ist</name><operator>-&gt;</operator><name>next_dts</name></name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>int64_t</name><operator>)</operator><name>AV_TIME_BASE</name> <operator>*</operator> <name><name>ist</name><operator>-&gt;</operator><name>dec_ctx</name><operator>-&gt;</operator><name>frame_size</name></name><operator>)</operator> <operator>/</operator>

<name><name>ist</name><operator>-&gt;</operator><name>dec_ctx</name><operator>-&gt;</operator><name>sample_rate</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>ist</name><operator>-&gt;</operator><name>next_dts</name></name> <operator>+=</operator> <call><name>av_rescale_q</name><argument_list>(<argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>duration</name></name></expr></argument>, <argument><expr><name><name>ist</name><operator>-&gt;</operator><name>st</name><operator>-&gt;</operator><name>time_base</name></name></expr></argument>, <argument><expr><name>AV_TIME_BASE_Q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<case>case <expr><name>AVMEDIA_TYPE_VIDEO</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>ist</name><operator>-&gt;</operator><name>framerate</name><operator>.</operator><name>num</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>AVRational</name></type> <name>time_base_q</name> <init>= <expr><name>AV_TIME_BASE_Q</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>next_dts</name> <init>= <expr><call><name>av_rescale_q</name><argument_list>(<argument><expr><name><name>ist</name><operator>-&gt;</operator><name>next_dts</name></name></expr></argument>, <argument><expr><name>time_base_q</name></expr></argument>, <argument><expr><call><name>av_inv_q</name><argument_list>(<argument><expr><name><name>ist</name><operator>-&gt;</operator><name>framerate</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>ist</name><operator>-&gt;</operator><name>next_dts</name></name> <operator>=</operator> <call><name>av_rescale_q</name><argument_list>(<argument><expr><name>next_dts</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><call><name>av_inv_q</name><argument_list>(<argument><expr><name><name>ist</name><operator>-&gt;</operator><name>framerate</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>time_base_q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pkt</name><operator>-&gt;</operator><name>duration</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ist</name><operator>-&gt;</operator><name>next_dts</name></name> <operator>+=</operator> <call><name>av_rescale_q</name><argument_list>(<argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>duration</name></name></expr></argument>, <argument><expr><name><name>ist</name><operator>-&gt;</operator><name>st</name><operator>-&gt;</operator><name>time_base</name></name></expr></argument>, <argument><expr><name>AV_TIME_BASE_Q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name><name>ist</name><operator>-&gt;</operator><name>dec_ctx</name><operator>-&gt;</operator><name>framerate</name><operator>.</operator><name>num</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ticks</name><init>= <expr><ternary><condition><expr><call><name>av_stream_get_parser</name><argument_list>(<argument><expr><name><name>ist</name><operator>-&gt;</operator><name>st</name></name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><call><name>av_stream_get_parser</name><argument_list>(<argument><expr><name><name>ist</name><operator>-&gt;</operator><name>st</name></name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>repeat_pict</name> <operator>+</operator> <literal type="number">1</literal></expr> </then><else>: <expr><name><name>ist</name><operator>-&gt;</operator><name>dec_ctx</name><operator>-&gt;</operator><name>ticks_per_frame</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>ist</name><operator>-&gt;</operator><name>next_dts</name></name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>int64_t</name><operator>)</operator><name>AV_TIME_BASE</name> <operator>*</operator>

<name><name>ist</name><operator>-&gt;</operator><name>dec_ctx</name><operator>-&gt;</operator><name>framerate</name><operator>.</operator><name>den</name></name> <operator>*</operator> <name>ticks</name><operator>)</operator> <operator>/</operator>

<name><name>ist</name><operator>-&gt;</operator><name>dec_ctx</name><operator>-&gt;</operator><name>framerate</name><operator>.</operator><name>num</name></name> <operator>/</operator> <name><name>ist</name><operator>-&gt;</operator><name>dec_ctx</name><operator>-&gt;</operator><name>ticks_per_frame</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

</block_content>}</block></switch>

<expr_stmt><expr><name><name>ist</name><operator>-&gt;</operator><name>pts</name></name> <operator>=</operator> <name><name>ist</name><operator>-&gt;</operator><name>dts</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ist</name><operator>-&gt;</operator><name>next_pts</name></name> <operator>=</operator> <name><name>ist</name><operator>-&gt;</operator><name>next_dts</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nb_output_streams</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>OutputStream</name> <modifier>*</modifier></type><name>ost</name> <init>= <expr><name><name>output_streams</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>check_output_constraints</name><argument_list>(<argument><expr><name>ist</name></expr></argument>, <argument><expr><name>ost</name></expr></argument>)</argument_list></call> <operator>||</operator> <name><name>ost</name><operator>-&gt;</operator><name>encoding_needed</name></name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>do_streamcopy</name><argument_list>(<argument><expr><name>ist</name></expr></argument>, <argument><expr><name>ost</name></expr></argument>, <argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><operator>!</operator><name>eof_reached</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>print_sdp</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>sdp</name><index>[<expr><literal type="number">16384</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>sdp_pb</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFormatContext</name> <modifier>*</modifier><modifier>*</modifier></type><name>avc</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nb_output_files</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>output_files</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>header_written</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>avc</name> <operator>=</operator> <call><name>av_malloc_array</name><argument_list>(<argument><expr><name>nb_output_files</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>avc</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>avc</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>exit_program</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nb_output_files</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>output_files</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name><name>ctx</name><operator>-&gt;</operator><name>oformat</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="string">"rtp"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>avc</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>output_files</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>ctx</name></expr>;</expr_stmt>

<expr_stmt><expr><name>j</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>j</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_sdp_create</name><argument_list>(<argument><expr><name>avc</name></expr></argument>, <argument><expr><name>j</name></expr></argument>, <argument><expr><name>sdp</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sdp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>sdp_filename</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"SDP:\n%s\n"</literal></expr></argument>, <argument><expr><name>sdp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>avio_open2</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sdp_pb</name></expr></argument>, <argument><expr><name>sdp_filename</name></expr></argument>, <argument><expr><name>AVIO_FLAG_WRITE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>int_cb</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to open sdp file '%s'\n"</literal></expr></argument>, <argument><expr><name>sdp_filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>avio_print</name><argument_list>(<argument><expr><name>sdp_pb</name></expr></argument>, <argument><expr><name>sdp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_closep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sdp_pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sdp_filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<label><name>fail</name>:</label>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>avc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>get_format</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>enum</name> <name>AVPixelFormat</name></name> <modifier>*</modifier></type><name>pix_fmts</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>InputStream</name> <modifier>*</modifier></type><name>ist</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>opaque</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>enum</name> <name>AVPixelFormat</name></name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name>pix_fmts</name></expr>;</init> <condition><expr><operator>*</operator><name>p</name> <operator>!=</operator> <name>AV_PIX_FMT_NONE</name></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>AVPixFmtDescriptor</name> <modifier>*</modifier></type><name>desc</name> <init>= <expr><call><name>av_pix_fmt_desc_get</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>AVCodecHWConfig</name> <modifier>*</modifier></type><name>config</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>desc</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_PIX_FMT_FLAG_HWACCEL</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ist</name><operator>-&gt;</operator><name>hwaccel_id</name></name> <operator>==</operator> <name>HWACCEL_GENERIC</name> <operator>||</operator>

<name><name>ist</name><operator>-&gt;</operator><name>hwaccel_id</name></name> <operator>==</operator> <name>HWACCEL_AUTO</name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init><condition>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>config</name> <operator>=</operator> <call><name>avcodec_get_hw_config</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>codec</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>config</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>config</name><operator>-&gt;</operator><name>methods</name></name> <operator>&amp;</operator>

<name>AV_CODEC_HW_CONFIG_METHOD_HW_DEVICE_CTX</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>config</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>==</operator> <operator>*</operator><name>p</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>config</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>config</name><operator>-&gt;</operator><name>device_type</name></name> <operator>!=</operator> <name><name>ist</name><operator>-&gt;</operator><name>hwaccel_device_type</name></name></expr>)</condition> <block>{<block_content>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>hwaccel_decode_init</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>ist</name><operator>-&gt;</operator><name>hwaccel_id</name></name> <operator>==</operator> <name>HWACCEL_GENERIC</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_FATAL</name></expr></argument>,

<argument><expr><literal type="string">"%s hwaccel requested for input stream #%d:%d, "</literal>

<literal type="string">"but cannot be initialized.\n"</literal></expr></argument>,

<argument><expr><call><name>av_hwdevice_get_type_name</name><argument_list>(<argument><expr><name><name>config</name><operator>-&gt;</operator><name>device_type</name></name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name><name>ist</name><operator>-&gt;</operator><name>file_index</name></name></expr></argument>, <argument><expr><name><name>ist</name><operator>-&gt;</operator><name>st</name><operator>-&gt;</operator><name>index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AV_PIX_FMT_NONE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>HWAccel</name> <modifier>*</modifier></type><name>hwaccel</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>hwaccels</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>hwaccels</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>pix_fmt</name> <operator>==</operator> <operator>*</operator><name>p</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>hwaccel</name> <operator>=</operator> <operator>&amp;</operator><name><name>hwaccels</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>hwaccel</name></expr>)</condition> <block>{<block_content>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>hwaccel</name><operator>-&gt;</operator><name>id</name></name> <operator>!=</operator> <name><name>ist</name><operator>-&gt;</operator><name>hwaccel_id</name></name></expr>)</condition> <block>{<block_content>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name><name>hwaccel</name><operator>-&gt;</operator><name>init</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_FATAL</name></expr></argument>,

<argument><expr><literal type="string">"%s hwaccel requested for input stream #%d:%d, "</literal>

<literal type="string">"but cannot be initialized.\n"</literal></expr></argument>, <argument><expr><name><name>hwaccel</name><operator>-&gt;</operator><name>name</name></name></expr></argument>,

<argument><expr><name><name>ist</name><operator>-&gt;</operator><name>file_index</name></name></expr></argument>, <argument><expr><name><name>ist</name><operator>-&gt;</operator><name>st</name><operator>-&gt;</operator><name>index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AV_PIX_FMT_NONE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ist</name><operator>-&gt;</operator><name>hw_frames_ctx</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>hw_frames_ctx</name></name> <operator>=</operator> <call><name>av_buffer_ref</name><argument_list>(<argument><expr><name><name>ist</name><operator>-&gt;</operator><name>hw_frames_ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>hw_frames_ctx</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AV_PIX_FMT_NONE</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ist</name><operator>-&gt;</operator><name>hwaccel_pix_fmt</name></name> <operator>=</operator> <operator>*</operator><name>p</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></for>

<return>return <expr><operator>*</operator><name>p</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>get_buffer</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>frame</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>InputStream</name> <modifier>*</modifier></type><name>ist</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>opaque</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ist</name><operator>-&gt;</operator><name>hwaccel_get_buffer</name></name> <operator>&amp;&amp;</operator> <name><name>frame</name><operator>-&gt;</operator><name>format</name></name> <operator>==</operator> <name><name>ist</name><operator>-&gt;</operator><name>hwaccel_pix_fmt</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name><name>ist</name><operator>-&gt;</operator><name>hwaccel_get_buffer</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>frame</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>avcodec_default_get_buffer2</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>frame</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>init_input_stream</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>ist_index</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>error</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>error_len</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>InputStream</name> <modifier>*</modifier></type><name>ist</name> <init>= <expr><name><name>input_streams</name><index>[<expr><name>ist_index</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ist</name><operator>-&gt;</operator><name>decoding_needed</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>AVCodec</name> <modifier>*</modifier></type><name>codec</name> <init>= <expr><name><name>ist</name><operator>-&gt;</operator><name>dec</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>codec</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>error</name></expr></argument>, <argument><expr><name>error_len</name></expr></argument>, <argument><expr><literal type="string">"Decoder (codec %s) not found for input stream #%d:%d"</literal></expr></argument>,

<argument><expr><call><name>avcodec_get_name</name><argument_list>(<argument><expr><name><name>ist</name><operator>-&gt;</operator><name>dec_ctx</name><operator>-&gt;</operator><name>codec_id</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>ist</name><operator>-&gt;</operator><name>file_index</name></name></expr></argument>, <argument><expr><name><name>ist</name><operator>-&gt;</operator><name>st</name><operator>-&gt;</operator><name>index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ist</name><operator>-&gt;</operator><name>dec_ctx</name><operator>-&gt;</operator><name>opaque</name></name> <operator>=</operator> <name>ist</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ist</name><operator>-&gt;</operator><name>dec_ctx</name><operator>-&gt;</operator><name>get_format</name></name> <operator>=</operator> <name>get_format</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ist</name><operator>-&gt;</operator><name>dec_ctx</name><operator>-&gt;</operator><name>get_buffer2</name></name> <operator>=</operator> <name>get_buffer</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ist</name><operator>-&gt;</operator><name>dec_ctx</name><operator>-&gt;</operator><name>thread_safe_callbacks</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_opt_set_int</name><argument_list>(<argument><expr><name><name>ist</name><operator>-&gt;</operator><name>dec_ctx</name></name></expr></argument>, <argument><expr><literal type="string">"refcounted_frames"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ist</name><operator>-&gt;</operator><name>dec_ctx</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_DVB_SUBTITLE</name> <operator>&amp;&amp;</operator>

<operator>(</operator><name><name>ist</name><operator>-&gt;</operator><name>decoding_needed</name></name> <operator>&amp;</operator> <name>DECODING_FOR_OST</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_dict_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ist</name><operator>-&gt;</operator><name>decoder_opts</name></name></expr></argument>, <argument><expr><literal type="string">"compute_edt"</literal></expr></argument>, <argument><expr><literal type="string">"1"</literal></expr></argument>, <argument><expr><name>AV_DICT_DONT_OVERWRITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ist</name><operator>-&gt;</operator><name>decoding_needed</name></name> <operator>&amp;</operator> <name>DECODING_FOR_FILTER</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Warning using DVB subtitles for filtering and output at the same time is not fully supported, also see -compute_edt [0|1]\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_dict_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ist</name><operator>-&gt;</operator><name>decoder_opts</name></name></expr></argument>, <argument><expr><literal type="string">"sub_text_format"</literal></expr></argument>, <argument><expr><literal type="string">"ass"</literal></expr></argument>, <argument><expr><name>AV_DICT_DONT_OVERWRITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ist</name><operator>-&gt;</operator><name>dec_ctx</name><operator>-&gt;</operator><name>pkt_timebase</name></name> <operator>=</operator> <name><name>ist</name><operator>-&gt;</operator><name>st</name><operator>-&gt;</operator><name>time_base</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>av_dict_get</name><argument_list>(<argument><expr><name><name>ist</name><operator>-&gt;</operator><name>decoder_opts</name></name></expr></argument>, <argument><expr><literal type="string">"threads"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_dict_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ist</name><operator>-&gt;</operator><name>decoder_opts</name></name></expr></argument>, <argument><expr><literal type="string">"threads"</literal></expr></argument>, <argument><expr><literal type="string">"auto"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ist</name><operator>-&gt;</operator><name>st</name><operator>-&gt;</operator><name>disposition</name></name> <operator>&amp;</operator> <name>AV_DISPOSITION_ATTACHED_PIC</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_dict_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ist</name><operator>-&gt;</operator><name>decoder_opts</name></name></expr></argument>, <argument><expr><literal type="string">"threads"</literal></expr></argument>, <argument><expr><literal type="string">"1"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>hw_device_setup_for_decode</name><argument_list>(<argument><expr><name>ist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>error</name></expr></argument>, <argument><expr><name>error_len</name></expr></argument>, <argument><expr><literal type="string">"Device setup failed for "</literal>

<literal type="string">"decoder on input stream #%d:%d : %s"</literal></expr></argument>,

<argument><expr><name><name>ist</name><operator>-&gt;</operator><name>file_index</name></name></expr></argument>, <argument><expr><name><name>ist</name><operator>-&gt;</operator><name>st</name><operator>-&gt;</operator><name>index</name></name></expr></argument>, <argument><expr><call><name>av_err2str</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>avcodec_open2</name><argument_list>(<argument><expr><name><name>ist</name><operator>-&gt;</operator><name>dec_ctx</name></name></expr></argument>, <argument><expr><name>codec</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ist</name><operator>-&gt;</operator><name>decoder_opts</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>AVERROR_EXPERIMENTAL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>abort_codec_experimental</name><argument_list>(<argument><expr><name>codec</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>error</name></expr></argument>, <argument><expr><name>error_len</name></expr></argument>,

<argument><expr><literal type="string">"Error while opening decoder for input stream "</literal>

<literal type="string">"#%d:%d : %s"</literal></expr></argument>,

<argument><expr><name><name>ist</name><operator>-&gt;</operator><name>file_index</name></name></expr></argument>, <argument><expr><name><name>ist</name><operator>-&gt;</operator><name>st</name><operator>-&gt;</operator><name>index</name></name></expr></argument>, <argument><expr><call><name>av_err2str</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>assert_avoptions</name><argument_list>(<argument><expr><name><name>ist</name><operator>-&gt;</operator><name>decoder_opts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ist</name><operator>-&gt;</operator><name>next_pts</name></name> <operator>=</operator> <name>AV_NOPTS_VALUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ist</name><operator>-&gt;</operator><name>next_dts</name></name> <operator>=</operator> <name>AV_NOPTS_VALUE</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>InputStream</name> <modifier>*</modifier></type><name>get_input_stream</name><parameter_list>(<parameter><decl><type><name>OutputStream</name> <modifier>*</modifier></type><name>ost</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>ost</name><operator>-&gt;</operator><name>source_index</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name><name>input_streams</name><index>[<expr><name><name>ost</name><operator>-&gt;</operator><name>source_index</name></name></expr>]</index></name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>compare_int64</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>FFDIFFSIGN</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><specifier>const</specifier> <name>int64_t</name> <operator>*</operator><operator>)</operator><name>a</name></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><specifier>const</specifier> <name>int64_t</name> <operator>*</operator><operator>)</operator><name>b</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>check_init_output_file</name><parameter_list>(<parameter><decl><type><name>OutputFile</name> <modifier>*</modifier></type><name>of</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>file_index</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>of</name><operator>-&gt;</operator><name>ctx</name><operator>-&gt;</operator><name>nb_streams</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>OutputStream</name> <modifier>*</modifier></type><name>ost</name> <init>= <expr><name><name>output_streams</name><index>[<expr><name><name>of</name><operator>-&gt;</operator><name>ost_index</name></name> <operator>+</operator> <name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ost</name><operator>-&gt;</operator><name>initialized</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>of</name><operator>-&gt;</operator><name>ctx</name><operator>-&gt;</operator><name>interrupt_callback</name></name> <operator>=</operator> <name>int_cb</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>avformat_write_header</name><argument_list>(<argument><expr><name><name>of</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>of</name><operator>-&gt;</operator><name>opts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"Could not write header for output file #%d "</literal>

<literal type="string">"(incorrect codec parameters ?): %s\n"</literal></expr></argument>,

<argument><expr><name>file_index</name></expr></argument>, <argument><expr><call><name>av_err2str</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>of</name><operator>-&gt;</operator><name>header_written</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_dump_format</name><argument_list>(<argument><expr><name><name>of</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>, <argument><expr><name>file_index</name></expr></argument>, <argument><expr><name><name>of</name><operator>-&gt;</operator><name>ctx</name><operator>-&gt;</operator><name>url</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>sdp_filename</name> <operator>||</operator> <name>want_sdp</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>print_sdp</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>of</name><operator>-&gt;</operator><name>ctx</name><operator>-&gt;</operator><name>nb_streams</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>OutputStream</name> <modifier>*</modifier></type><name>ost</name> <init>= <expr><name><name>output_streams</name><index>[<expr><name><name>of</name><operator>-&gt;</operator><name>ost_index</name></name> <operator>+</operator> <name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>av_fifo_size</name><argument_list>(<argument><expr><name><name>ost</name><operator>-&gt;</operator><name>muxing_queue</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ost</name><operator>-&gt;</operator><name>mux_timebase</name></name> <operator>=</operator> <name><name>ost</name><operator>-&gt;</operator><name>st</name><operator>-&gt;</operator><name>time_base</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<while>while <condition>(<expr><call><name>av_fifo_size</name><argument_list>(<argument><expr><name><name>ost</name><operator>-&gt;</operator><name>muxing_queue</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>AVPacket</name></type> <name>pkt</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_fifo_generic_read</name><argument_list>(<argument><expr><name><name>ost</name><operator>-&gt;</operator><name>muxing_queue</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pkt</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>pkt</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>write_packet</name><argument_list>(<argument><expr><name>of</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pkt</name></expr></argument>, <argument><expr><name>ost</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>init_output_bsfs</name><parameter_list>(<parameter><decl><type><name>OutputStream</name> <modifier>*</modifier></type><name>ost</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVBSFContext</name> <modifier>*</modifier></type><name>ctx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ost</name><operator>-&gt;</operator><name>nb_bitstream_filters</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ost</name><operator>-&gt;</operator><name>nb_bitstream_filters</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>ctx</name> <operator>=</operator> <name><name>ost</name><operator>-&gt;</operator><name>bsf_ctx</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>avcodec_parameters_copy</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>par_in</name></name></expr></argument>,

<argument><expr><ternary><condition><expr><name>i</name></expr> ?</condition><then> <expr><name><name>ost</name><operator>-&gt;</operator><name>bsf_ctx</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>par_out</name></expr> </then><else>: <expr><name><name>ost</name><operator>-&gt;</operator><name>st</name><operator>-&gt;</operator><name>codecpar</name></name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>time_base_in</name></name> <operator>=</operator> <ternary><condition><expr><name>i</name></expr> ?</condition><then> <expr><name><name>ost</name><operator>-&gt;</operator><name>bsf_ctx</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>time_base_out</name></expr> </then><else>: <expr><name><name>ost</name><operator>-&gt;</operator><name>st</name><operator>-&gt;</operator><name>time_base</name></name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>av_bsf_init</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Error initializing bitstream filter: %s\n"</literal></expr></argument>,

<argument><expr><name><name>ost</name><operator>-&gt;</operator><name>bsf_ctx</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name><name>filter</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>ctx</name> <operator>=</operator> <name><name>ost</name><operator>-&gt;</operator><name>bsf_ctx</name><index>[<expr><name><name>ost</name><operator>-&gt;</operator><name>nb_bitstream_filters</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>avcodec_parameters_copy</name><argument_list>(<argument><expr><name><name>ost</name><operator>-&gt;</operator><name>st</name><operator>-&gt;</operator><name>codecpar</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>par_out</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>ost</name><operator>-&gt;</operator><name>st</name><operator>-&gt;</operator><name>time_base</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>time_base_out</name></name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>init_output_stream_streamcopy</name><parameter_list>(<parameter><decl><type><name>OutputStream</name> <modifier>*</modifier></type><name>ost</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>OutputFile</name> <modifier>*</modifier></type><name>of</name> <init>= <expr><name><name>output_files</name><index>[<expr><name><name>ost</name><operator>-&gt;</operator><name>file_index</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>InputStream</name> <modifier>*</modifier></type><name>ist</name> <init>= <expr><call><name>get_input_stream</name><argument_list>(<argument><expr><name>ost</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVCodecParameters</name> <modifier>*</modifier></type><name>par_dst</name> <init>= <expr><name><name>ost</name><operator>-&gt;</operator><name>st</name><operator>-&gt;</operator><name>codecpar</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVCodecParameters</name> <modifier>*</modifier></type><name>par_src</name> <init>= <expr><name><name>ost</name><operator>-&gt;</operator><name>ref_par</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVRational</name></type> <name>sar</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>codec_tag</name> <init>= <expr><name><name>par_dst</name><operator>-&gt;</operator><name>codec_tag</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name>ist</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>ost</name><operator>-&gt;</operator><name>filter</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>avcodec_parameters_to_context</name><argument_list>(<argument><expr><name><name>ost</name><operator>-&gt;</operator><name>enc_ctx</name></name></expr></argument>, <argument><expr><name><name>ist</name><operator>-&gt;</operator><name>st</name><operator>-&gt;</operator><name>codecpar</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>av_opt_set_dict</name><argument_list>(<argument><expr><name><name>ost</name><operator>-&gt;</operator><name>enc_ctx</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ost</name><operator>-&gt;</operator><name>encoder_opts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_FATAL</name></expr></argument>,

<argument><expr><literal type="string">"Error setting up codec context options.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>avcodec_parameters_from_context</name><argument_list>(<argument><expr><name>par_src</name></expr></argument>, <argument><expr><name><name>ost</name><operator>-&gt;</operator><name>enc_ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_FATAL</name></expr></argument>,

<argument><expr><literal type="string">"Error getting reference codec parameters.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>codec_tag</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>codec_tag_tmp</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>of</name><operator>-&gt;</operator><name>ctx</name><operator>-&gt;</operator><name>oformat</name><operator>-&gt;</operator><name>codec_tag</name></name> <operator>||</operator>

<call><name>av_codec_get_id</name> <argument_list>(<argument><expr><name><name>of</name><operator>-&gt;</operator><name>ctx</name><operator>-&gt;</operator><name>oformat</name><operator>-&gt;</operator><name>codec_tag</name></name></expr></argument>, <argument><expr><name><name>par_src</name><operator>-&gt;</operator><name>codec_tag</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name><name>par_src</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>||</operator>

<operator>!</operator><call><name>av_codec_get_tag2</name><argument_list>(<argument><expr><name><name>of</name><operator>-&gt;</operator><name>ctx</name><operator>-&gt;</operator><name>oformat</name><operator>-&gt;</operator><name>codec_tag</name></name></expr></argument>, <argument><expr><name><name>par_src</name><operator>-&gt;</operator><name>codec_id</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>codec_tag_tmp</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>codec_tag</name> <operator>=</operator> <name><name>par_src</name><operator>-&gt;</operator><name>codec_tag</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>avcodec_parameters_copy</name><argument_list>(<argument><expr><name>par_dst</name></expr></argument>, <argument><expr><name>par_src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>par_dst</name><operator>-&gt;</operator><name>codec_tag</name></name> <operator>=</operator> <name>codec_tag</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ost</name><operator>-&gt;</operator><name>frame_rate</name><operator>.</operator><name>num</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ost</name><operator>-&gt;</operator><name>frame_rate</name></name> <operator>=</operator> <name><name>ist</name><operator>-&gt;</operator><name>framerate</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>ost</name><operator>-&gt;</operator><name>st</name><operator>-&gt;</operator><name>avg_frame_rate</name></name> <operator>=</operator> <name><name>ost</name><operator>-&gt;</operator><name>frame_rate</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>avformat_transfer_internal_stream_timing_info</name><argument_list>(<argument><expr><name><name>of</name><operator>-&gt;</operator><name>ctx</name><operator>-&gt;</operator><name>oformat</name></name></expr></argument>, <argument><expr><name><name>ost</name><operator>-&gt;</operator><name>st</name></name></expr></argument>, <argument><expr><name><name>ist</name><operator>-&gt;</operator><name>st</name></name></expr></argument>, <argument><expr><name>copy_tb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ost</name><operator>-&gt;</operator><name>st</name><operator>-&gt;</operator><name>time_base</name><operator>.</operator><name>num</name></name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>ost</name><operator>-&gt;</operator><name>st</name><operator>-&gt;</operator><name>time_base</name><operator>.</operator><name>den</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ost</name><operator>-&gt;</operator><name>st</name><operator>-&gt;</operator><name>time_base</name></name> <operator>=</operator> <macro><name>av_add_q</name><argument_list>(<argument>av_stream_get_codec_timebase(ost-&gt;st)</argument>, <argument>(AVRational){<literal type="number">0</literal></argument>, <argument><literal type="number">1</literal>}</argument>)</argument_list></macro></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ost</name><operator>-&gt;</operator><name>st</name><operator>-&gt;</operator><name>duration</name></name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>ist</name><operator>-&gt;</operator><name>st</name><operator>-&gt;</operator><name>duration</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ost</name><operator>-&gt;</operator><name>st</name><operator>-&gt;</operator><name>duration</name></name> <operator>=</operator> <call><name>av_rescale_q</name><argument_list>(<argument><expr><name><name>ist</name><operator>-&gt;</operator><name>st</name><operator>-&gt;</operator><name>duration</name></name></expr></argument>, <argument><expr><name><name>ist</name><operator>-&gt;</operator><name>st</name><operator>-&gt;</operator><name>time_base</name></name></expr></argument>, <argument><expr><name><name>ost</name><operator>-&gt;</operator><name>st</name><operator>-&gt;</operator><name>time_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>ost</name><operator>-&gt;</operator><name>st</name><operator>-&gt;</operator><name>disposition</name></name> <operator>=</operator> <name><name>ist</name><operator>-&gt;</operator><name>st</name><operator>-&gt;</operator><name>disposition</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ist</name><operator>-&gt;</operator><name>st</name><operator>-&gt;</operator><name>nb_side_data</name></name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ist</name><operator>-&gt;</operator><name>st</name><operator>-&gt;</operator><name>nb_side_data</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>AVPacketSideData</name> <modifier>*</modifier></type><name>sd_src</name> <init>= <expr><operator>&amp;</operator><name><name>ist</name><operator>-&gt;</operator><name>st</name><operator>-&gt;</operator><name>side_data</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst_data</name></decl>;</decl_stmt>

<expr_stmt><expr><name>dst_data</name> <operator>=</operator> <call><name>av_stream_new_side_data</name><argument_list>(<argument><expr><name><name>ost</name><operator>-&gt;</operator><name>st</name></name></expr></argument>, <argument><expr><name><name>sd_src</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name><name>sd_src</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>dst_data</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>dst_data</name></expr></argument>, <argument><expr><name><name>sd_src</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>sd_src</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ost</name><operator>-&gt;</operator><name>rotate_overridden</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>sd</name> <init>= <expr><call><name>av_stream_new_side_data</name><argument_list>(<argument><expr><name><name>ost</name><operator>-&gt;</operator><name>st</name></name></expr></argument>, <argument><expr><name>AV_PKT_DATA_DISPLAYMATRIX</name></expr></argument>,

<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int32_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <literal type="number">9</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>sd</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_display_rotation_set</name><argument_list>(<argument><expr><operator>(</operator><name>int32_t</name> <operator>*</operator><operator>)</operator><name>sd</name></expr></argument>, <argument><expr><operator>-</operator><name><name>ost</name><operator>-&gt;</operator><name>rotate_override_value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><name><name>par_dst</name><operator>-&gt;</operator><name>codec_type</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>AVMEDIA_TYPE_AUDIO</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name>audio_volume</name> <operator>!=</operator> <literal type="number">256</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_FATAL</name></expr></argument>, <argument><expr><literal type="string">"-acodec copy and -vol are incompatible (frames are not decoded)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>exit_program</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>par_dst</name><operator>-&gt;</operator><name>block_align</name></name> <operator>==</operator> <literal type="number">1</literal> <operator>||</operator> <name><name>par_dst</name><operator>-&gt;</operator><name>block_align</name></name> <operator>==</operator> <literal type="number">1152</literal> <operator>||</operator> <name><name>par_dst</name><operator>-&gt;</operator><name>block_align</name></name> <operator>==</operator> <literal type="number">576</literal><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>par_dst</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_MP3</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>par_dst</name><operator>-&gt;</operator><name>block_align</name></name><operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>par_dst</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_AC3</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>par_dst</name><operator>-&gt;</operator><name>block_align</name></name><operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<break>break;</break>

<case>case <expr><name>AVMEDIA_TYPE_VIDEO</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>ost</name><operator>-&gt;</operator><name>frame_aspect_ratio</name><operator>.</operator><name>num</name></name></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name>sar</name> <operator>=</operator>

<macro><name>av_mul_q</name><argument_list>(<argument>ost-&gt;frame_aspect_ratio</argument>,

<argument>(AVRational){ par_dst-&gt;height</argument>, <argument>par_dst-&gt;width }</argument>)</argument_list></macro></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Overriding aspect ratio "</literal>

<literal type="string">"with stream copy may produce invalid files\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name><name>ist</name><operator>-&gt;</operator><name>st</name><operator>-&gt;</operator><name>sample_aspect_ratio</name><operator>.</operator><name>num</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>sar</name> <operator>=</operator> <name><name>ist</name><operator>-&gt;</operator><name>st</name><operator>-&gt;</operator><name>sample_aspect_ratio</name></name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>sar</name> <operator>=</operator> <name><name>par_src</name><operator>-&gt;</operator><name>sample_aspect_ratio</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>ost</name><operator>-&gt;</operator><name>st</name><operator>-&gt;</operator><name>sample_aspect_ratio</name></name> <operator>=</operator> <name><name>par_dst</name><operator>-&gt;</operator><name>sample_aspect_ratio</name></name> <operator>=</operator> <name>sar</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ost</name><operator>-&gt;</operator><name>st</name><operator>-&gt;</operator><name>avg_frame_rate</name></name> <operator>=</operator> <name><name>ist</name><operator>-&gt;</operator><name>st</name><operator>-&gt;</operator><name>avg_frame_rate</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ost</name><operator>-&gt;</operator><name>st</name><operator>-&gt;</operator><name>r_frame_rate</name></name> <operator>=</operator> <name><name>ist</name><operator>-&gt;</operator><name>st</name><operator>-&gt;</operator><name>r_frame_rate</name></name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<expr_stmt><expr><name><name>ost</name><operator>-&gt;</operator><name>mux_timebase</name></name> <operator>=</operator> <name><name>ist</name><operator>-&gt;</operator><name>st</name><operator>-&gt;</operator><name>time_base</name></name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>set_encoder_id</name><parameter_list>(<parameter><decl><type><name>OutputFile</name> <modifier>*</modifier></type><name>of</name></decl></parameter>, <parameter><decl><type><name>OutputStream</name> <modifier>*</modifier></type><name>ost</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVDictionaryEntry</name> <modifier>*</modifier></type><name>e</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>encoder_string</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>encoder_string_len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>format_flags</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>codec_flags</name> <init>= <expr><name><name>ost</name><operator>-&gt;</operator><name>enc_ctx</name><operator>-&gt;</operator><name>flags</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>av_dict_get</name><argument_list>(<argument><expr><name><name>ost</name><operator>-&gt;</operator><name>st</name><operator>-&gt;</operator><name>metadata</name></name></expr></argument>, <argument><expr><literal type="string">"encoder"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>e</name> <operator>=</operator> <call><name>av_dict_get</name><argument_list>(<argument><expr><name><name>of</name><operator>-&gt;</operator><name>opts</name></name></expr></argument>, <argument><expr><literal type="string">"fflags"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>e</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>AVOption</name> <modifier>*</modifier></type><name>o</name> <init>= <expr><call><name>av_opt_find</name><argument_list>(<argument><expr><name><name>of</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>, <argument><expr><literal type="string">"fflags"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>o</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_opt_eval_flags</name><argument_list>(<argument><expr><name><name>of</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>, <argument><expr><name>o</name></expr></argument>, <argument><expr><name><name>e</name><operator>-&gt;</operator><name>value</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>format_flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>e</name> <operator>=</operator> <call><name>av_dict_get</name><argument_list>(<argument><expr><name><name>ost</name><operator>-&gt;</operator><name>encoder_opts</name></name></expr></argument>, <argument><expr><literal type="string">"flags"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>e</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>AVOption</name> <modifier>*</modifier></type><name>o</name> <init>= <expr><call><name>av_opt_find</name><argument_list>(<argument><expr><name><name>ost</name><operator>-&gt;</operator><name>enc_ctx</name></name></expr></argument>, <argument><expr><literal type="string">"flags"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>o</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_opt_eval_flags</name><argument_list>(<argument><expr><name><name>ost</name><operator>-&gt;</operator><name>enc_ctx</name></name></expr></argument>, <argument><expr><name>o</name></expr></argument>, <argument><expr><name><name>e</name><operator>-&gt;</operator><name>value</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>codec_flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>encoder_string_len</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>LIBAVCODEC_IDENT</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>ost</name><operator>-&gt;</operator><name>enc</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>encoder_string</name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><name>encoder_string_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>encoder_string</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>exit_program</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>format_flags</name> <operator>&amp;</operator> <name>AVFMT_FLAG_BITEXACT</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>codec_flags</name> <operator>&amp;</operator> <name>AV_CODEC_FLAG_BITEXACT</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_strlcpy</name><argument_list>(<argument><expr><name>encoder_string</name></expr></argument>, <argument><expr><name>LIBAVCODEC_IDENT</name> <literal type="string">" "</literal></expr></argument>, <argument><expr><name>encoder_string_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_strlcpy</name><argument_list>(<argument><expr><name>encoder_string</name></expr></argument>, <argument><expr><literal type="string">"Lavc "</literal></expr></argument>, <argument><expr><name>encoder_string_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>av_strlcat</name><argument_list>(<argument><expr><name>encoder_string</name></expr></argument>, <argument><expr><name><name>ost</name><operator>-&gt;</operator><name>enc</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>encoder_string_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_dict_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ost</name><operator>-&gt;</operator><name>st</name><operator>-&gt;</operator><name>metadata</name></name></expr></argument>, <argument><expr><literal type="string">"encoder"</literal></expr></argument>, <argument><expr><name>encoder_string</name></expr></argument>,

<argument><expr><name>AV_DICT_DONT_STRDUP_VAL</name> <operator>|</operator> <name>AV_DICT_DONT_OVERWRITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>parse_forced_key_frames</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>kf</name></decl></parameter>, <parameter><decl><type><name>OutputStream</name> <modifier>*</modifier></type><name>ost</name></decl></parameter>,

<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>size</name></decl>, <decl><type ref="prev"/><name>index</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>t</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>pts</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name>kf</name></expr>;</init> <condition><expr><operator>*</operator><name>p</name></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">','</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>

<expr_stmt><expr><name>size</name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>

<expr_stmt><expr><name>pts</name> <operator>=</operator> <call><name>av_malloc_array</name><argument_list>(<argument><expr><name>size</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>pts</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>pts</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_FATAL</name></expr></argument>, <argument><expr><literal type="string">"Could not allocate forced key frames array.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>exit_program</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name>kf</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>next</name> <init>= <expr><call><name>strchr</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="char">','</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>next</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>next</name><operator>++</operator> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>memcmp</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"chapters"</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>avf</name> <init>= <expr><name><name>output_files</name><index>[<expr><name><name>ost</name><operator>-&gt;</operator><name>file_index</name></name></expr>]</index></name><operator>-&gt;</operator><name>ctx</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avf</name><operator>-&gt;</operator><name>nb_chapters</name></name> <operator>&gt;</operator> <name>INT_MAX</name> <operator>-</operator> <name>size</name> <operator>||</operator>

<operator>!</operator><operator>(</operator><name>pts</name> <operator>=</operator> <call><name>av_realloc_f</name><argument_list>(<argument><expr><name>pts</name></expr></argument>, <argument><expr><name>size</name> <operator>+=</operator> <name><name>avf</name><operator>-&gt;</operator><name>nb_chapters</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>,

<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>pts</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_FATAL</name></expr></argument>,

<argument><expr><literal type="string">"Could not allocate forced key frames array.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>exit_program</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>t</name> <operator>=</operator> <ternary><condition><expr><name><name>p</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr> ?</condition><then> <expr><call><name>parse_time_or_die</name><argument_list>(<argument><expr><literal type="string">"force_key_frames"</literal></expr></argument>, <argument><expr><name>p</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>t</name> <operator>=</operator> <call><name>av_rescale_q</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name>AV_TIME_BASE_Q</name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>time_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>avf</name><operator>-&gt;</operator><name>nb_chapters</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>AVChapter</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><name><name>avf</name><operator>-&gt;</operator><name>chapters</name><index>[<expr><name>j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_assert1</name><argument_list>(<argument><expr><name>index</name> <operator>&lt;</operator> <name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pts</name><index>[<expr><name>index</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <call><name>av_rescale_q</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>start</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>time_base</name></name></expr></argument>,

<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>time_base</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <name>t</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>t</name> <operator>=</operator> <call><name>parse_time_or_die</name><argument_list>(<argument><expr><literal type="string">"force_key_frames"</literal></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_assert1</name><argument_list>(<argument><expr><name>index</name> <operator>&lt;</operator> <name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pts</name><index>[<expr><name>index</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <call><name>av_rescale_q</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name>AV_TIME_BASE_Q</name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>time_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name>next</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name>index</name> <operator>==</operator> <name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>qsort</name><argument_list>(<argument><expr><name>pts</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>pts</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>compare_int64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ost</name><operator>-&gt;</operator><name>forced_kf_count</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ost</name><operator>-&gt;</operator><name>forced_kf_pts</name></name> <operator>=</operator> <name>pts</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>init_encoder_time_base</name><parameter_list>(<parameter><decl><type><name>OutputStream</name> <modifier>*</modifier></type><name>ost</name></decl></parameter>, <parameter><decl><type><name>AVRational</name></type> <name>default_time_base</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>InputStream</name> <modifier>*</modifier></type><name>ist</name> <init>= <expr><call><name>get_input_stream</name><argument_list>(<argument><expr><name>ost</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>enc_ctx</name> <init>= <expr><name><name>ost</name><operator>-&gt;</operator><name>enc_ctx</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>oc</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ost</name><operator>-&gt;</operator><name>enc_timebase</name><operator>.</operator><name>num</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>enc_ctx</name><operator>-&gt;</operator><name>time_base</name></name> <operator>=</operator> <name><name>ost</name><operator>-&gt;</operator><name>enc_timebase</name></name></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ost</name><operator>-&gt;</operator><name>enc_timebase</name><operator>.</operator><name>num</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>ist</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>enc_ctx</name><operator>-&gt;</operator><name>time_base</name></name> <operator>=</operator> <name><name>ist</name><operator>-&gt;</operator><name>st</name><operator>-&gt;</operator><name>time_base</name></name></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>oc</name> <operator>=</operator> <name><name>output_files</name><index>[<expr><name><name>ost</name><operator>-&gt;</operator><name>file_index</name></name></expr>]</index></name><operator>-&gt;</operator><name>ctx</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>oc</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Input stream data not available, using default time base\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>enc_ctx</name><operator>-&gt;</operator><name>time_base</name></name> <operator>=</operator> <name>default_time_base</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>init_output_stream_encode</name><parameter_list>(<parameter><decl><type><name>OutputStream</name> <modifier>*</modifier></type><name>ost</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>InputStream</name> <modifier>*</modifier></type><name>ist</name> <init>= <expr><call><name>get_input_stream</name><argument_list>(<argument><expr><name>ost</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>enc_ctx</name> <init>= <expr><name><name>ost</name><operator>-&gt;</operator><name>enc_ctx</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>dec_ctx</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>oc</name> <init>= <expr><name><name>output_files</name><index>[<expr><name><name>ost</name><operator>-&gt;</operator><name>file_index</name></name></expr>]</index></name><operator>-&gt;</operator><name>ctx</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>set_encoder_id</name><argument_list>(<argument><expr><name><name>output_files</name><index>[<expr><name><name>ost</name><operator>-&gt;</operator><name>file_index</name></name></expr>]</index></name></expr></argument>, <argument><expr><name>ost</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_dict_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ost</name><operator>-&gt;</operator><name>st</name><operator>-&gt;</operator><name>metadata</name></name></expr></argument>, <argument><expr><literal type="string">"rotate"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ist</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ost</name><operator>-&gt;</operator><name>st</name><operator>-&gt;</operator><name>disposition</name></name> <operator>=</operator> <name><name>ist</name><operator>-&gt;</operator><name>st</name><operator>-&gt;</operator><name>disposition</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>dec_ctx</name> <operator>=</operator> <name><name>ist</name><operator>-&gt;</operator><name>dec_ctx</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>enc_ctx</name><operator>-&gt;</operator><name>chroma_sample_location</name></name> <operator>=</operator> <name><name>dec_ctx</name><operator>-&gt;</operator><name>chroma_sample_location</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>oc</name><operator>-&gt;</operator><name>nb_streams</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>AVStream</name> <modifier>*</modifier></type><name>st</name> <init>= <expr><name><name>oc</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name>j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>st</name> <operator>!=</operator> <name><name>ost</name><operator>-&gt;</operator><name>st</name></name> <operator>&amp;&amp;</operator> <name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_type</name></name> <operator>==</operator> <name><name>ost</name><operator>-&gt;</operator><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_type</name></name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>j</name> <operator>==</operator> <name><name>oc</name><operator>-&gt;</operator><name>nb_streams</name></name></expr>)</condition><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name><name>ost</name><operator>-&gt;</operator><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_type</name></name> <operator>==</operator> <name>AVMEDIA_TYPE_AUDIO</name> <operator>||</operator>

<name><name>ost</name><operator>-&gt;</operator><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_type</name></name> <operator>==</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ost</name><operator>-&gt;</operator><name>st</name><operator>-&gt;</operator><name>disposition</name></name> <operator>=</operator> <name>AV_DISPOSITION_DEFAULT</name></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>enc_ctx</name><operator>-&gt;</operator><name>codec_type</name></name> <operator>==</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ost</name><operator>-&gt;</operator><name>frame_rate</name><operator>.</operator><name>num</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ost</name><operator>-&gt;</operator><name>frame_rate</name></name> <operator>=</operator> <call><name>av_buffersink_get_frame_rate</name><argument_list>(<argument><expr><name><name>ost</name><operator>-&gt;</operator><name>filter</name><operator>-&gt;</operator><name>filter</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ist</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>ost</name><operator>-&gt;</operator><name>frame_rate</name><operator>.</operator><name>num</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ost</name><operator>-&gt;</operator><name>frame_rate</name></name> <operator>=</operator> <name><name>ist</name><operator>-&gt;</operator><name>framerate</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ist</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>ost</name><operator>-&gt;</operator><name>frame_rate</name><operator>.</operator><name>num</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ost</name><operator>-&gt;</operator><name>frame_rate</name></name> <operator>=</operator> <name><name>ist</name><operator>-&gt;</operator><name>st</name><operator>-&gt;</operator><name>r_frame_rate</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ist</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>ost</name><operator>-&gt;</operator><name>frame_rate</name><operator>.</operator><name>num</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ost</name><operator>-&gt;</operator><name>frame_rate</name></name> <operator>=</operator> <operator>(</operator><name>AVRational</name><operator>)</operator><block>{<expr><literal type="number">25</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>,

<argument><expr><literal type="string">"No information "</literal>

<literal type="string">"about the input framerate is available. Falling "</literal>

<literal type="string">"back to a default value of 25fps for output stream #%d:%d. Use the -r option "</literal>

<literal type="string">"if you want a different framerate.\n"</literal></expr></argument>,

<argument><expr><name><name>ost</name><operator>-&gt;</operator><name>file_index</name></name></expr></argument>, <argument><expr><name><name>ost</name><operator>-&gt;</operator><name>index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ost</name><operator>-&gt;</operator><name>enc</name><operator>-&gt;</operator><name>supported_framerates</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>ost</name><operator>-&gt;</operator><name>force_fps</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>idx</name> <init>= <expr><call><name>av_find_nearest_q_idx</name><argument_list>(<argument><expr><name><name>ost</name><operator>-&gt;</operator><name>frame_rate</name></name></expr></argument>, <argument><expr><name><name>ost</name><operator>-&gt;</operator><name>enc</name><operator>-&gt;</operator><name>supported_framerates</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>ost</name><operator>-&gt;</operator><name>frame_rate</name></name> <operator>=</operator> <name><name>ost</name><operator>-&gt;</operator><name>enc</name><operator>-&gt;</operator><name>supported_framerates</name><index>[<expr><name>idx</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>enc_ctx</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_MPEG4</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_reduce</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ost</name><operator>-&gt;</operator><name>frame_rate</name><operator>.</operator><name>num</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ost</name><operator>-&gt;</operator><name>frame_rate</name><operator>.</operator><name>den</name></name></expr></argument>,

<argument><expr><name><name>ost</name><operator>-&gt;</operator><name>frame_rate</name><operator>.</operator><name>num</name></name></expr></argument>, <argument><expr><name><name>ost</name><operator>-&gt;</operator><name>frame_rate</name><operator>.</operator><name>den</name></name></expr></argument>, <argument><expr><literal type="number">65535</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><name><name>enc_ctx</name><operator>-&gt;</operator><name>codec_type</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>AVMEDIA_TYPE_AUDIO</name></expr>:</case>

<expr_stmt><expr><name><name>enc_ctx</name><operator>-&gt;</operator><name>sample_fmt</name></name> <operator>=</operator> <call><name>av_buffersink_get_format</name><argument_list>(<argument><expr><name><name>ost</name><operator>-&gt;</operator><name>filter</name><operator>-&gt;</operator><name>filter</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>dec_ctx</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>enc_ctx</name><operator>-&gt;</operator><name>bits_per_raw_sample</name></name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name><name>dec_ctx</name><operator>-&gt;</operator><name>bits_per_raw_sample</name></name></expr></argument>,

<argument><expr><call><name>av_get_bytes_per_sample</name><argument_list>(<argument><expr><name><name>enc_ctx</name><operator>-&gt;</operator><name>sample_fmt</name></name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>enc_ctx</name><operator>-&gt;</operator><name>sample_rate</name></name> <operator>=</operator> <call><name>av_buffersink_get_sample_rate</name><argument_list>(<argument><expr><name><name>ost</name><operator>-&gt;</operator><name>filter</name><operator>-&gt;</operator><name>filter</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>enc_ctx</name><operator>-&gt;</operator><name>channel_layout</name></name> <operator>=</operator> <call><name>av_buffersink_get_channel_layout</name><argument_list>(<argument><expr><name><name>ost</name><operator>-&gt;</operator><name>filter</name><operator>-&gt;</operator><name>filter</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>enc_ctx</name><operator>-&gt;</operator><name>channels</name></name> <operator>=</operator> <call><name>av_buffersink_get_channels</name><argument_list>(<argument><expr><name><name>ost</name><operator>-&gt;</operator><name>filter</name><operator>-&gt;</operator><name>filter</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>init_encoder_time_base</name><argument_list>(<argument><expr><name>ost</name></expr></argument>, <argument><expr><call><name>av_make_q</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>enc_ctx</name><operator>-&gt;</operator><name>sample_rate</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AVMEDIA_TYPE_VIDEO</name></expr>:</case>

<expr_stmt><expr><call><name>init_encoder_time_base</name><argument_list>(<argument><expr><name>ost</name></expr></argument>, <argument><expr><call><name>av_inv_q</name><argument_list>(<argument><expr><name><name>ost</name><operator>-&gt;</operator><name>frame_rate</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>enc_ctx</name><operator>-&gt;</operator><name>time_base</name><operator>.</operator><name>num</name></name> <operator>&amp;&amp;</operator> <name><name>enc_ctx</name><operator>-&gt;</operator><name>time_base</name><operator>.</operator><name>den</name></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>enc_ctx</name><operator>-&gt;</operator><name>time_base</name></name> <operator>=</operator> <call><name>av_buffersink_get_time_base</name><argument_list>(<argument><expr><name><name>ost</name><operator>-&gt;</operator><name>filter</name><operator>-&gt;</operator><name>filter</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>( <expr><call><name>av_q2d</name><argument_list>(<argument><expr><name><name>enc_ctx</name><operator>-&gt;</operator><name>time_base</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0.001</literal> <operator>&amp;&amp;</operator> <name>video_sync_method</name> <operator>!=</operator> <name>VSYNC_PASSTHROUGH</name>

<operator>&amp;&amp;</operator> <operator>(</operator><name>video_sync_method</name> <operator>==</operator> <name>VSYNC_CFR</name> <operator>||</operator> <name>video_sync_method</name> <operator>==</operator> <name>VSYNC_VSCFR</name> <operator>||</operator> <operator>(</operator><name>video_sync_method</name> <operator>==</operator> <name>VSYNC_AUTO</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>oc</name><operator>-&gt;</operator><name>oformat</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AVFMT_VARIABLE_FPS</name><operator>)</operator><operator>)</operator><operator>)</operator></expr>)</condition><block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>oc</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Frame rate very high for a muxer not efficiently supporting it.\n"</literal>

<literal type="string">"Please consider specifying a lower framerate, a different muxer or -vsync 2\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>enc_ctx</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator> <call><name>av_buffersink_get_w</name><argument_list>(<argument><expr><name><name>ost</name><operator>-&gt;</operator><name>filter</name><operator>-&gt;</operator><name>filter</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>enc_ctx</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <call><name>av_buffersink_get_h</name><argument_list>(<argument><expr><name><name>ost</name><operator>-&gt;</operator><name>filter</name><operator>-&gt;</operator><name>filter</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>enc_ctx</name><operator>-&gt;</operator><name>sample_aspect_ratio</name></name> <operator>=</operator> <name><name>ost</name><operator>-&gt;</operator><name>st</name><operator>-&gt;</operator><name>sample_aspect_ratio</name></name> <operator>=</operator>

<ternary><condition><expr><name><name>ost</name><operator>-&gt;</operator><name>frame_aspect_ratio</name><operator>.</operator><name>num</name></name></expr> ?</condition><then> 

<macro><name>av_mul_q</name><argument_list>(<argument>ost-&gt;frame_aspect_ratio</argument>, <argument>(AVRational){ enc_ctx-&gt;height</argument>, <argument>enc_ctx-&gt;width }</argument>)</argument_list></macro> </then><else>:

<expr><call><name>av_buffersink_get_sample_aspect_ratio</name><argument_list>(<argument><expr><name><name>ost</name><operator>-&gt;</operator><name>filter</name><operator>-&gt;</operator><name>filter</name></name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>enc_ctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <call><name>av_buffersink_get_format</name><argument_list>(<argument><expr><name><name>ost</name><operator>-&gt;</operator><name>filter</name><operator>-&gt;</operator><name>filter</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>dec_ctx</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>enc_ctx</name><operator>-&gt;</operator><name>bits_per_raw_sample</name></name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name><name>dec_ctx</name><operator>-&gt;</operator><name>bits_per_raw_sample</name></name></expr></argument>,

<argument><expr><call><name>av_pix_fmt_desc_get</name><argument_list>(<argument><expr><name><name>enc_ctx</name><operator>-&gt;</operator><name>pix_fmt</name></name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>comp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>depth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>enc_ctx</name><operator>-&gt;</operator><name>framerate</name></name> <operator>=</operator> <name><name>ost</name><operator>-&gt;</operator><name>frame_rate</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ost</name><operator>-&gt;</operator><name>st</name><operator>-&gt;</operator><name>avg_frame_rate</name></name> <operator>=</operator> <name><name>ost</name><operator>-&gt;</operator><name>frame_rate</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>dec_ctx</name> <operator>||</operator>

<name><name>enc_ctx</name><operator>-&gt;</operator><name>width</name></name> <operator>!=</operator> <name><name>dec_ctx</name><operator>-&gt;</operator><name>width</name></name> <operator>||</operator>

<name><name>enc_ctx</name><operator>-&gt;</operator><name>height</name></name> <operator>!=</operator> <name><name>dec_ctx</name><operator>-&gt;</operator><name>height</name></name> <operator>||</operator>

<name><name>enc_ctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>!=</operator> <name><name>dec_ctx</name><operator>-&gt;</operator><name>pix_fmt</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>enc_ctx</name><operator>-&gt;</operator><name>bits_per_raw_sample</name></name> <operator>=</operator> <name>frame_bits_per_raw_sample</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ost</name><operator>-&gt;</operator><name>top_field_first</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>enc_ctx</name><operator>-&gt;</operator><name>field_order</name></name> <operator>=</operator> <name>AV_FIELD_BB</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>ost</name><operator>-&gt;</operator><name>top_field_first</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>enc_ctx</name><operator>-&gt;</operator><name>field_order</name></name> <operator>=</operator> <name>AV_FIELD_TT</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ost</name><operator>-&gt;</operator><name>forced_keyframes</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strncmp</name><argument_list>(<argument><expr><name><name>ost</name><operator>-&gt;</operator><name>forced_keyframes</name></name></expr></argument>, <argument><expr><literal type="string">"expr:"</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>av_expr_parse</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ost</name><operator>-&gt;</operator><name>forced_keyframes_pexpr</name></name></expr></argument>, <argument><expr><name><name>ost</name><operator>-&gt;</operator><name>forced_keyframes</name></name><operator>+</operator><literal type="number">5</literal></expr></argument>,

<argument><expr><name>forced_keyframes_const_names</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"Invalid force_key_frames expression '%s'\n"</literal></expr></argument>, <argument><expr><name><name>ost</name><operator>-&gt;</operator><name>forced_keyframes</name></name><operator>+</operator><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ost</name><operator>-&gt;</operator><name>forced_keyframes_expr_const_values</name><index>[<expr><name>FKF_N</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ost</name><operator>-&gt;</operator><name>forced_keyframes_expr_const_values</name><index>[<expr><name>FKF_N_FORCED</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ost</name><operator>-&gt;</operator><name>forced_keyframes_expr_const_values</name><index>[<expr><name>FKF_PREV_FORCED_N</name></expr>]</index></name> <operator>=</operator> <name>NAN</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ost</name><operator>-&gt;</operator><name>forced_keyframes_expr_const_values</name><index>[<expr><name>FKF_PREV_FORCED_T</name></expr>]</index></name> <operator>=</operator> <name>NAN</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><name><name>ost</name><operator>-&gt;</operator><name>forced_keyframes</name></name></expr></argument>, <argument><expr><literal type="string">"source"</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>parse_forced_key_frames</name><argument_list>(<argument><expr><name><name>ost</name><operator>-&gt;</operator><name>forced_keyframes</name></name></expr></argument>, <argument><expr><name>ost</name></expr></argument>, <argument><expr><name><name>ost</name><operator>-&gt;</operator><name>enc_ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><name>AVMEDIA_TYPE_SUBTITLE</name></expr>:</case>

<expr_stmt><expr><name><name>enc_ctx</name><operator>-&gt;</operator><name>time_base</name></name> <operator>=</operator> <name>AV_TIME_BASE_Q</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>enc_ctx</name><operator>-&gt;</operator><name>width</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>enc_ctx</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator> <name><name>input_streams</name><index>[<expr><name><name>ost</name><operator>-&gt;</operator><name>source_index</name></name></expr>]</index></name><operator>-&gt;</operator><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>width</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>enc_ctx</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <name><name>input_streams</name><index>[<expr><name><name>ost</name><operator>-&gt;</operator><name>source_index</name></name></expr>]</index></name><operator>-&gt;</operator><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>height</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><name>AVMEDIA_TYPE_DATA</name></expr>:</case>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<expr_stmt><expr><name><name>ost</name><operator>-&gt;</operator><name>mux_timebase</name></name> <operator>=</operator> <name><name>enc_ctx</name><operator>-&gt;</operator><name>time_base</name></name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>init_output_stream</name><parameter_list>(<parameter><decl><type><name>OutputStream</name> <modifier>*</modifier></type><name>ost</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>error</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>error_len</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ost</name><operator>-&gt;</operator><name>encoding_needed</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>AVCodec</name> <modifier>*</modifier></type><name>codec</name> <init>= <expr><name><name>ost</name><operator>-&gt;</operator><name>enc</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>dec</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>InputStream</name> <modifier>*</modifier></type><name>ist</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>init_output_stream_encode</name><argument_list>(<argument><expr><name>ost</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ist</name> <operator>=</operator> <call><name>get_input_stream</name><argument_list>(<argument><expr><name>ost</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>dec</name> <operator>=</operator> <name><name>ist</name><operator>-&gt;</operator><name>dec_ctx</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>dec</name> <operator>&amp;&amp;</operator> <name><name>dec</name><operator>-&gt;</operator><name>subtitle_header</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ost</name><operator>-&gt;</operator><name>enc_ctx</name><operator>-&gt;</operator><name>subtitle_header</name></name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><name><name>dec</name><operator>-&gt;</operator><name>subtitle_header_size</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ost</name><operator>-&gt;</operator><name>enc_ctx</name><operator>-&gt;</operator><name>subtitle_header</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>ost</name><operator>-&gt;</operator><name>enc_ctx</name><operator>-&gt;</operator><name>subtitle_header</name></name></expr></argument>, <argument><expr><name><name>dec</name><operator>-&gt;</operator><name>subtitle_header</name></name></expr></argument>, <argument><expr><name><name>dec</name><operator>-&gt;</operator><name>subtitle_header_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ost</name><operator>-&gt;</operator><name>enc_ctx</name><operator>-&gt;</operator><name>subtitle_header_size</name></name> <operator>=</operator> <name><name>dec</name><operator>-&gt;</operator><name>subtitle_header_size</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>av_dict_get</name><argument_list>(<argument><expr><name><name>ost</name><operator>-&gt;</operator><name>encoder_opts</name></name></expr></argument>, <argument><expr><literal type="string">"threads"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_dict_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ost</name><operator>-&gt;</operator><name>encoder_opts</name></name></expr></argument>, <argument><expr><literal type="string">"threads"</literal></expr></argument>, <argument><expr><literal type="string">"auto"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ost</name><operator>-&gt;</operator><name>enc</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>AVMEDIA_TYPE_AUDIO</name> <operator>&amp;&amp;</operator>

<operator>!</operator><name><name>codec</name><operator>-&gt;</operator><name>defaults</name></name> <operator>&amp;&amp;</operator>

<operator>!</operator><call><name>av_dict_get</name><argument_list>(<argument><expr><name><name>ost</name><operator>-&gt;</operator><name>encoder_opts</name></name></expr></argument>, <argument><expr><literal type="string">"b"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>

<operator>!</operator><call><name>av_dict_get</name><argument_list>(<argument><expr><name><name>ost</name><operator>-&gt;</operator><name>encoder_opts</name></name></expr></argument>, <argument><expr><literal type="string">"ab"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_dict_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ost</name><operator>-&gt;</operator><name>encoder_opts</name></name></expr></argument>, <argument><expr><literal type="string">"b"</literal></expr></argument>, <argument><expr><literal type="string">"128000"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ost</name><operator>-&gt;</operator><name>filter</name></name> <operator>&amp;&amp;</operator> <call><name>av_buffersink_get_hw_frames_ctx</name><argument_list>(<argument><expr><name><name>ost</name><operator>-&gt;</operator><name>filter</name><operator>-&gt;</operator><name>filter</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>

<operator>(</operator><operator>(</operator><name>AVHWFramesContext</name><operator>*</operator><operator>)</operator><call><name>av_buffersink_get_hw_frames_ctx</name><argument_list>(<argument><expr><name><name>ost</name><operator>-&gt;</operator><name>filter</name><operator>-&gt;</operator><name>filter</name></name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>data</name><operator>)</operator><operator>-&gt;</operator><name>format</name> <operator>==</operator>

<call><name>av_buffersink_get_format</name><argument_list>(<argument><expr><name><name>ost</name><operator>-&gt;</operator><name>filter</name><operator>-&gt;</operator><name>filter</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ost</name><operator>-&gt;</operator><name>enc_ctx</name><operator>-&gt;</operator><name>hw_frames_ctx</name></name> <operator>=</operator> <call><name>av_buffer_ref</name><argument_list>(<argument><expr><call><name>av_buffersink_get_hw_frames_ctx</name><argument_list>(<argument><expr><name><name>ost</name><operator>-&gt;</operator><name>filter</name><operator>-&gt;</operator><name>filter</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ost</name><operator>-&gt;</operator><name>enc_ctx</name><operator>-&gt;</operator><name>hw_frames_ctx</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>hw_device_setup_for_encode</name><argument_list>(<argument><expr><name>ost</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>error</name></expr></argument>, <argument><expr><name>error_len</name></expr></argument>, <argument><expr><literal type="string">"Device setup failed for "</literal>

<literal type="string">"encoder on output stream #%d:%d : %s"</literal></expr></argument>,

<argument><expr><name><name>ost</name><operator>-&gt;</operator><name>file_index</name></name></expr></argument>, <argument><expr><name><name>ost</name><operator>-&gt;</operator><name>index</name></name></expr></argument>, <argument><expr><call><name>av_err2str</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ist</name> <operator>&amp;&amp;</operator> <name><name>ist</name><operator>-&gt;</operator><name>dec</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>AVMEDIA_TYPE_SUBTITLE</name> <operator>&amp;&amp;</operator> <name><name>ost</name><operator>-&gt;</operator><name>enc</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>AVMEDIA_TYPE_SUBTITLE</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>input_props</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>output_props</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVCodecDescriptor</name> <specifier>const</specifier> <modifier>*</modifier></type><name>input_descriptor</name> <init>=

<expr><call><name>avcodec_descriptor_get</name><argument_list>(<argument><expr><name><name>dec</name><operator>-&gt;</operator><name>codec_id</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVCodecDescriptor</name> <specifier>const</specifier> <modifier>*</modifier></type><name>output_descriptor</name> <init>=

<expr><call><name>avcodec_descriptor_get</name><argument_list>(<argument><expr><name><name>ost</name><operator>-&gt;</operator><name>enc_ctx</name><operator>-&gt;</operator><name>codec_id</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>input_descriptor</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>input_props</name> <operator>=</operator> <name><name>input_descriptor</name><operator>-&gt;</operator><name>props</name></name> <operator>&amp;</operator> <operator>(</operator><name>AV_CODEC_PROP_TEXT_SUB</name> <operator>|</operator> <name>AV_CODEC_PROP_BITMAP_SUB</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>output_descriptor</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>output_props</name> <operator>=</operator> <name><name>output_descriptor</name><operator>-&gt;</operator><name>props</name></name> <operator>&amp;</operator> <operator>(</operator><name>AV_CODEC_PROP_TEXT_SUB</name> <operator>|</operator> <name>AV_CODEC_PROP_BITMAP_SUB</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>input_props</name> <operator>&amp;&amp;</operator> <name>output_props</name> <operator>&amp;&amp;</operator> <name>input_props</name> <operator>!=</operator> <name>output_props</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>error</name></expr></argument>, <argument><expr><name>error_len</name></expr></argument>,

<argument><expr><literal type="string">"Subtitle encoding currently only possible from text to text "</literal>

<literal type="string">"or bitmap to bitmap"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>avcodec_open2</name><argument_list>(<argument><expr><name><name>ost</name><operator>-&gt;</operator><name>enc_ctx</name></name></expr></argument>, <argument><expr><name>codec</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ost</name><operator>-&gt;</operator><name>encoder_opts</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>AVERROR_EXPERIMENTAL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>abort_codec_experimental</name><argument_list>(<argument><expr><name>codec</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>error</name></expr></argument>, <argument><expr><name>error_len</name></expr></argument>,

<argument><expr><literal type="string">"Error while opening encoder for output stream #%d:%d - "</literal>

<literal type="string">"maybe incorrect parameters such as bit_rate, rate, width or height"</literal></expr></argument>,

<argument><expr><name><name>ost</name><operator>-&gt;</operator><name>file_index</name></name></expr></argument>, <argument><expr><name><name>ost</name><operator>-&gt;</operator><name>index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ost</name><operator>-&gt;</operator><name>enc</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>AVMEDIA_TYPE_AUDIO</name> <operator>&amp;&amp;</operator>

<operator>!</operator><operator>(</operator><name><name>ost</name><operator>-&gt;</operator><name>enc</name><operator>-&gt;</operator><name>capabilities</name></name> <operator>&amp;</operator> <name>AV_CODEC_CAP_VARIABLE_FRAME_SIZE</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_buffersink_set_frame_size</name><argument_list>(<argument><expr><name><name>ost</name><operator>-&gt;</operator><name>filter</name><operator>-&gt;</operator><name>filter</name></name></expr></argument>,

<argument><expr><name><name>ost</name><operator>-&gt;</operator><name>enc_ctx</name><operator>-&gt;</operator><name>frame_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>assert_avoptions</name><argument_list>(<argument><expr><name><name>ost</name><operator>-&gt;</operator><name>encoder_opts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ost</name><operator>-&gt;</operator><name>enc_ctx</name><operator>-&gt;</operator><name>bit_rate</name></name> <operator>&amp;&amp;</operator> <name><name>ost</name><operator>-&gt;</operator><name>enc_ctx</name><operator>-&gt;</operator><name>bit_rate</name></name> <operator>&lt;</operator> <literal type="number">1000</literal> <operator>&amp;&amp;</operator>

<name><name>ost</name><operator>-&gt;</operator><name>enc_ctx</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>!=</operator> <name>AV_CODEC_ID_CODEC2</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"The bitrate parameter is set too low."</literal>

<literal type="string">" It takes bits/s as argument, not kbits/s\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>avcodec_parameters_from_context</name><argument_list>(<argument><expr><name><name>ost</name><operator>-&gt;</operator><name>st</name><operator>-&gt;</operator><name>codecpar</name></name></expr></argument>, <argument><expr><name><name>ost</name><operator>-&gt;</operator><name>enc_ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_FATAL</name></expr></argument>,

<argument><expr><literal type="string">"Error initializing the output stream codec context.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>exit_program</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>avcodec_copy_context</name><argument_list>(<argument><expr><name><name>ost</name><operator>-&gt;</operator><name>st</name><operator>-&gt;</operator><name>codec</name></name></expr></argument>, <argument><expr><name><name>ost</name><operator>-&gt;</operator><name>enc_ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ost</name><operator>-&gt;</operator><name>enc_ctx</name><operator>-&gt;</operator><name>nb_coded_side_data</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ost</name><operator>-&gt;</operator><name>enc_ctx</name><operator>-&gt;</operator><name>nb_coded_side_data</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>AVPacketSideData</name> <modifier>*</modifier></type><name>sd_src</name> <init>= <expr><operator>&amp;</operator><name><name>ost</name><operator>-&gt;</operator><name>enc_ctx</name><operator>-&gt;</operator><name>coded_side_data</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst_data</name></decl>;</decl_stmt>

<expr_stmt><expr><name>dst_data</name> <operator>=</operator> <call><name>av_stream_new_side_data</name><argument_list>(<argument><expr><name><name>ost</name><operator>-&gt;</operator><name>st</name></name></expr></argument>, <argument><expr><name><name>sd_src</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name><name>sd_src</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>dst_data</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>dst_data</name></expr></argument>, <argument><expr><name><name>sd_src</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>sd_src</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ist</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ist</name><operator>-&gt;</operator><name>st</name><operator>-&gt;</operator><name>nb_side_data</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>AVPacketSideData</name> <modifier>*</modifier></type><name>sd</name> <init>= <expr><operator>&amp;</operator><name><name>ist</name><operator>-&gt;</operator><name>st</name><operator>-&gt;</operator><name>side_data</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sd</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>AV_PKT_DATA_CPB_PROPERTIES</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><call><name>av_stream_new_side_data</name><argument_list>(<argument><expr><name><name>ost</name><operator>-&gt;</operator><name>st</name></name></expr></argument>, <argument><expr><name><name>sd</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name><name>sd</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>dst</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name><name>sd</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>sd</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ist</name><operator>-&gt;</operator><name>autorotate</name></name> <operator>&amp;&amp;</operator> <name><name>sd</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>AV_PKT_DATA_DISPLAYMATRIX</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_display_rotation_set</name><argument_list>(<argument><expr><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><name>dst</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ost</name><operator>-&gt;</operator><name>st</name><operator>-&gt;</operator><name>time_base</name><operator>.</operator><name>num</name></name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>ost</name><operator>-&gt;</operator><name>st</name><operator>-&gt;</operator><name>time_base</name><operator>.</operator><name>den</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ost</name><operator>-&gt;</operator><name>st</name><operator>-&gt;</operator><name>time_base</name></name> <operator>=</operator> <macro><name>av_add_q</name><argument_list>(<argument>ost-&gt;enc_ctx-&gt;time_base</argument>, <argument>(AVRational){<literal type="number">0</literal></argument>, <argument><literal type="number">1</literal>}</argument>)</argument_list></macro></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ost</name><operator>-&gt;</operator><name>st</name><operator>-&gt;</operator><name>duration</name></name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>ist</name> <operator>&amp;&amp;</operator> <name><name>ist</name><operator>-&gt;</operator><name>st</name><operator>-&gt;</operator><name>duration</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ost</name><operator>-&gt;</operator><name>st</name><operator>-&gt;</operator><name>duration</name></name> <operator>=</operator> <call><name>av_rescale_q</name><argument_list>(<argument><expr><name><name>ist</name><operator>-&gt;</operator><name>st</name><operator>-&gt;</operator><name>duration</name></name></expr></argument>, <argument><expr><name><name>ist</name><operator>-&gt;</operator><name>st</name><operator>-&gt;</operator><name>time_base</name></name></expr></argument>, <argument><expr><name><name>ost</name><operator>-&gt;</operator><name>st</name><operator>-&gt;</operator><name>time_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>ost</name><operator>-&gt;</operator><name>st</name><operator>-&gt;</operator><name>codec</name><operator>-&gt;</operator><name>codec</name></name><operator>=</operator> <name><name>ost</name><operator>-&gt;</operator><name>enc_ctx</name><operator>-&gt;</operator><name>codec</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>ost</name><operator>-&gt;</operator><name>stream_copy</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>init_output_stream_streamcopy</name><argument_list>(<argument><expr><name>ost</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ost</name><operator>-&gt;</operator><name>disposition</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVOption</name></type> <name><name>opts</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><literal type="string">"disposition"</literal></expr> , <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_FLAGS</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0</literal></expr> }</block></expr>, <expr><name>INT64_MIN</name></expr>, <expr><name>INT64_MAX</name></expr>, <expr><operator>.</operator><name>unit</name> <operator>=</operator> <literal type="string">"flags"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"default"</literal></expr> , <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>AV_DISPOSITION_DEFAULT</name></expr> }</block></expr>, <expr><operator>.</operator><name>unit</name> <operator>=</operator> <literal type="string">"flags"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"dub"</literal></expr> , <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>AV_DISPOSITION_DUB</name></expr> }</block></expr>, <expr><operator>.</operator><name>unit</name> <operator>=</operator> <literal type="string">"flags"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"original"</literal></expr> , <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>AV_DISPOSITION_ORIGINAL</name></expr> }</block></expr>, <expr><operator>.</operator><name>unit</name> <operator>=</operator> <literal type="string">"flags"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"comment"</literal></expr> , <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>AV_DISPOSITION_COMMENT</name></expr> }</block></expr>, <expr><operator>.</operator><name>unit</name> <operator>=</operator> <literal type="string">"flags"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"lyrics"</literal></expr> , <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>AV_DISPOSITION_LYRICS</name></expr> }</block></expr>, <expr><operator>.</operator><name>unit</name> <operator>=</operator> <literal type="string">"flags"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"karaoke"</literal></expr> , <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>AV_DISPOSITION_KARAOKE</name></expr> }</block></expr>, <expr><operator>.</operator><name>unit</name> <operator>=</operator> <literal type="string">"flags"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"forced"</literal></expr> , <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>AV_DISPOSITION_FORCED</name></expr> }</block></expr>, <expr><operator>.</operator><name>unit</name> <operator>=</operator> <literal type="string">"flags"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"hearing_impaired"</literal></expr> , <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>AV_DISPOSITION_HEARING_IMPAIRED</name></expr> }</block></expr>, <expr><operator>.</operator><name>unit</name> <operator>=</operator> <literal type="string">"flags"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"visual_impaired"</literal></expr> , <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>AV_DISPOSITION_VISUAL_IMPAIRED</name></expr> }</block></expr>, <expr><operator>.</operator><name>unit</name> <operator>=</operator> <literal type="string">"flags"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"clean_effects"</literal></expr> , <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>AV_DISPOSITION_CLEAN_EFFECTS</name></expr> }</block></expr>, <expr><operator>.</operator><name>unit</name> <operator>=</operator> <literal type="string">"flags"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"attached_pic"</literal></expr> , <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>AV_DISPOSITION_ATTACHED_PIC</name></expr> }</block></expr>, <expr><operator>.</operator><name>unit</name> <operator>=</operator> <literal type="string">"flags"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"captions"</literal></expr> , <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>AV_DISPOSITION_CAPTIONS</name></expr> }</block></expr>, <expr><operator>.</operator><name>unit</name> <operator>=</operator> <literal type="string">"flags"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"descriptions"</literal></expr> , <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>AV_DISPOSITION_DESCRIPTIONS</name></expr> }</block></expr>, <expr><operator>.</operator><name>unit</name> <operator>=</operator> <literal type="string">"flags"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"dependent"</literal></expr> , <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>AV_DISPOSITION_DEPENDENT</name></expr> }</block></expr>, <expr><operator>.</operator><name>unit</name> <operator>=</operator> <literal type="string">"flags"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"metadata"</literal></expr> , <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>AV_DISPOSITION_METADATA</name></expr> }</block></expr>, <expr><operator>.</operator><name>unit</name> <operator>=</operator> <literal type="string">"flags"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVClass</name></type> <name>class</name> <init>= <expr><block>{

<expr><operator>.</operator><name>class_name</name> <operator>=</operator> <literal type="string">""</literal></expr>,

<expr><operator>.</operator><name>item_name</name> <operator>=</operator> <name>av_default_item_name</name></expr>,

<expr><operator>.</operator><name>option</name> <operator>=</operator> <name>opts</name></expr>,

<expr><operator>.</operator><name>version</name> <operator>=</operator> <name>LIBAVUTIL_VERSION_INT</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>AVClass</name> <modifier>*</modifier></type><name>pclass</name> <init>= <expr><operator>&amp;</operator><name>class</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>av_opt_eval_flags</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pclass</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>opts</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>ost</name><operator>-&gt;</operator><name>disposition</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ost</name><operator>-&gt;</operator><name>st</name><operator>-&gt;</operator><name>disposition</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>init_output_bsfs</name><argument_list>(<argument><expr><name>ost</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>ost</name><operator>-&gt;</operator><name>initialized</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>check_init_output_file</name><argument_list>(<argument><expr><name><name>output_files</name><index>[<expr><name><name>ost</name><operator>-&gt;</operator><name>file_index</name></name></expr>]</index></name></expr></argument>, <argument><expr><name><name>ost</name><operator>-&gt;</operator><name>file_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>report_new_stream</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>input_index</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>InputFile</name> <modifier>*</modifier></type><name>file</name> <init>= <expr><name><name>input_files</name><index>[<expr><name>input_index</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVStream</name> <modifier>*</modifier></type><name>st</name> <init>= <expr><name><name>file</name><operator>-&gt;</operator><name>ctx</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name><name>pkt</name><operator>-&gt;</operator><name>stream_index</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pkt</name><operator>-&gt;</operator><name>stream_index</name></name> <operator>&lt;</operator> <name><name>file</name><operator>-&gt;</operator><name>nb_streams_warn</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>file</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>,

<argument><expr><literal type="string">"New %s stream %d:%d at pos:%"</literal><name>PRId64</name><literal type="string">" and DTS:%ss\n"</literal></expr></argument>,

<argument><expr><call><name>av_get_media_type_string</name><argument_list>(<argument><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_type</name></name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>input_index</name></expr></argument>, <argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>stream_index</name></name></expr></argument>,

<argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>pos</name></name></expr></argument>, <argument><expr><call><name>av_ts2timestr</name><argument_list>(<argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>dts</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>st</name><operator>-&gt;</operator><name>time_base</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>nb_streams_warn</name></name> <operator>=</operator> <name><name>pkt</name><operator>-&gt;</operator><name>stream_index</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>transcode_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>oc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>OutputStream</name> <modifier>*</modifier></type><name>ost</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>InputStream</name> <modifier>*</modifier></type><name>ist</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>error</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nb_filtergraphs</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>FilterGraph</name> <modifier>*</modifier></type><name>fg</name> <init>= <expr><name><name>filtergraphs</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>fg</name><operator>-&gt;</operator><name>nb_outputs</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>OutputFilter</name> <modifier>*</modifier></type><name>ofilter</name> <init>= <expr><name><name>fg</name><operator>-&gt;</operator><name>outputs</name><index>[<expr><name>j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ofilter</name><operator>-&gt;</operator><name>ost</name></name> <operator>||</operator> <name><name>ofilter</name><operator>-&gt;</operator><name>ost</name><operator>-&gt;</operator><name>source_index</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>fg</name><operator>-&gt;</operator><name>nb_inputs</name></name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <name>nb_input_streams</name><operator>-</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>k</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr> ;</condition> <incr><expr><name>k</name><operator>--</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name><name>fg</name><operator>-&gt;</operator><name>inputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>ist</name> <operator>==</operator> <name><name>input_streams</name><index>[<expr><name>k</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt></block_content></block></for>

<expr_stmt><expr><name><name>ofilter</name><operator>-&gt;</operator><name>ost</name><operator>-&gt;</operator><name>source_index</name></name> <operator>=</operator> <name>k</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nb_input_files</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>InputFile</name> <modifier>*</modifier></type><name>ifile</name> <init>= <expr><name><name>input_files</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ifile</name><operator>-&gt;</operator><name>rate_emu</name></name></expr>)</condition><block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>ifile</name><operator>-&gt;</operator><name>nb_streams</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>input_streams</name><index>[<expr><name>j</name> <operator>+</operator> <name><name>ifile</name><operator>-&gt;</operator><name>ist_index</name></name></expr>]</index></name><operator>-&gt;</operator><name>start</name> <operator>=</operator> <call><name>av_gettime_relative</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></for></block_content></block></if></if_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nb_input_streams</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>init_input_stream</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>error</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>error</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nb_output_streams</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>ost</name> <operator>=</operator> <name><name>output_streams</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avcodec_close</name><argument_list>(<argument><expr><name><name>ost</name><operator>-&gt;</operator><name>enc_ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<goto>goto <name>dump_format</name>;</goto>

</block_content>}</block></if></if_stmt></block_content></block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nb_output_streams</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>output_streams</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>filter</name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>init_output_stream</name><argument_list>(<argument><expr><name><name>output_streams</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>error</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>error</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>dump_format</name>;</goto></block_content></block></if></if_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nb_input_files</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>InputFile</name> <modifier>*</modifier></type><name>ifile</name> <init>= <expr><name><name>input_files</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>ifile</name><operator>-&gt;</operator><name>ctx</name><operator>-&gt;</operator><name>nb_programs</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>AVProgram</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name><name>ifile</name><operator>-&gt;</operator><name>ctx</name><operator>-&gt;</operator><name>programs</name><index>[<expr><name>j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>discard</name> <init>= <expr><name>AVDISCARD_ALL</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name><name>p</name><operator>-&gt;</operator><name>nb_stream_indexes</name></name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>input_streams</name><index>[<expr><name><name>ifile</name><operator>-&gt;</operator><name>ist_index</name></name> <operator>+</operator> <name><name>p</name><operator>-&gt;</operator><name>stream_index</name><index>[<expr><name>k</name></expr>]</index></name></expr>]</index></name><operator>-&gt;</operator><name>discard</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>discard</name> <operator>=</operator> <name>AVDISCARD_DEFAULT</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt></block_content></block></for>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>discard</name></name> <operator>=</operator> <name>discard</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nb_output_files</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>oc</name> <operator>=</operator> <name><name>output_files</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>ctx</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>oc</name><operator>-&gt;</operator><name>oformat</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AVFMT_NOSTREAMS</name> <operator>&amp;&amp;</operator> <name><name>oc</name><operator>-&gt;</operator><name>nb_streams</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>check_init_output_file</name><argument_list>(<argument><expr><name><name>output_files</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>dump_format</name>;</goto></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<label><name>dump_format</name>:</label>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"Stream mapping:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nb_input_streams</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>ist</name> <operator>=</operator> <name><name>input_streams</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>ist</name><operator>-&gt;</operator><name>nb_filters</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>filtergraph_is_simple</name><argument_list>(<argument><expr><name><name>ist</name><operator>-&gt;</operator><name>filters</name><index>[<expr><name>j</name></expr>]</index></name><operator>-&gt;</operator><name>graph</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">" Stream #%d:%d (%s) -&gt; %s"</literal></expr></argument>,

<argument><expr><name><name>ist</name><operator>-&gt;</operator><name>file_index</name></name></expr></argument>, <argument><expr><name><name>ist</name><operator>-&gt;</operator><name>st</name><operator>-&gt;</operator><name>index</name></name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>ist</name><operator>-&gt;</operator><name>dec</name></name></expr> ?</condition><then> <expr><name><name>ist</name><operator>-&gt;</operator><name>dec</name><operator>-&gt;</operator><name>name</name></name></expr> </then><else>: <expr><literal type="string">"?"</literal></expr></else></ternary></expr></argument>,

<argument><expr><name><name>ist</name><operator>-&gt;</operator><name>filters</name><index>[<expr><name>j</name></expr>]</index></name><operator>-&gt;</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>nb_filtergraphs</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">" (graph %d)"</literal></expr></argument>, <argument><expr><name><name>ist</name><operator>-&gt;</operator><name>filters</name><index>[<expr><name>j</name></expr>]</index></name><operator>-&gt;</operator><name><name>graph</name><operator>-&gt;</operator><name>index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nb_output_streams</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>ost</name> <operator>=</operator> <name><name>output_streams</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ost</name><operator>-&gt;</operator><name>attachment_filename</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">" File %s -&gt; Stream #%d:%d\n"</literal></expr></argument>,

<argument><expr><name><name>ost</name><operator>-&gt;</operator><name>attachment_filename</name></name></expr></argument>, <argument><expr><name><name>ost</name><operator>-&gt;</operator><name>file_index</name></name></expr></argument>, <argument><expr><name><name>ost</name><operator>-&gt;</operator><name>index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ost</name><operator>-&gt;</operator><name>filter</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>filtergraph_is_simple</name><argument_list>(<argument><expr><name><name>ost</name><operator>-&gt;</operator><name>filter</name><operator>-&gt;</operator><name>graph</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">" %s"</literal></expr></argument>, <argument><expr><name><name>ost</name><operator>-&gt;</operator><name>filter</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>nb_filtergraphs</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">" (graph %d)"</literal></expr></argument>, <argument><expr><name><name>ost</name><operator>-&gt;</operator><name>filter</name><operator>-&gt;</operator><name>graph</name><operator>-&gt;</operator><name>index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">" -&gt; Stream #%d:%d (%s)\n"</literal></expr></argument>, <argument><expr><name><name>ost</name><operator>-&gt;</operator><name>file_index</name></name></expr></argument>,

<argument><expr><name><name>ost</name><operator>-&gt;</operator><name>index</name></name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>ost</name><operator>-&gt;</operator><name>enc</name></name></expr> ?</condition><then> <expr><name><name>ost</name><operator>-&gt;</operator><name>enc</name><operator>-&gt;</operator><name>name</name></name></expr> </then><else>: <expr><literal type="string">"?"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">" Stream #%d:%d -&gt; #%d:%d"</literal></expr></argument>,

<argument><expr><name><name>input_streams</name><index>[<expr><name><name>ost</name><operator>-&gt;</operator><name>source_index</name></name></expr>]</index></name><operator>-&gt;</operator><name>file_index</name></expr></argument>,

<argument><expr><name><name>input_streams</name><index>[<expr><name><name>ost</name><operator>-&gt;</operator><name>source_index</name></name></expr>]</index></name><operator>-&gt;</operator><name><name>st</name><operator>-&gt;</operator><name>index</name></name></expr></argument>,

<argument><expr><name><name>ost</name><operator>-&gt;</operator><name>file_index</name></name></expr></argument>,

<argument><expr><name><name>ost</name><operator>-&gt;</operator><name>index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ost</name><operator>-&gt;</operator><name>sync_ist</name></name> <operator>!=</operator> <name><name>input_streams</name><index>[<expr><name><name>ost</name><operator>-&gt;</operator><name>source_index</name></name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">" [sync #%d:%d]"</literal></expr></argument>,

<argument><expr><name><name>ost</name><operator>-&gt;</operator><name>sync_ist</name><operator>-&gt;</operator><name>file_index</name></name></expr></argument>,

<argument><expr><name><name>ost</name><operator>-&gt;</operator><name>sync_ist</name><operator>-&gt;</operator><name>st</name><operator>-&gt;</operator><name>index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ost</name><operator>-&gt;</operator><name>stream_copy</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">" (copy)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>AVCodec</name> <modifier>*</modifier></type><name>in_codec</name> <init>= <expr><name><name>input_streams</name><index>[<expr><name><name>ost</name><operator>-&gt;</operator><name>source_index</name></name></expr>]</index></name><operator>-&gt;</operator><name>dec</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>AVCodec</name> <modifier>*</modifier></type><name>out_codec</name> <init>= <expr><name><name>ost</name><operator>-&gt;</operator><name>enc</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>decoder_name</name> <init>= <expr><literal type="string">"?"</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>in_codec_name</name> <init>= <expr><literal type="string">"?"</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>encoder_name</name> <init>= <expr><literal type="string">"?"</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>out_codec_name</name> <init>= <expr><literal type="string">"?"</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>AVCodecDescriptor</name> <modifier>*</modifier></type><name>desc</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>in_codec</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>decoder_name</name> <operator>=</operator> <name><name>in_codec</name><operator>-&gt;</operator><name>name</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>desc</name> <operator>=</operator> <call><name>avcodec_descriptor_get</name><argument_list>(<argument><expr><name><name>in_codec</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>desc</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>in_codec_name</name> <operator>=</operator> <name><name>desc</name><operator>-&gt;</operator><name>name</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>decoder_name</name></expr></argument>, <argument><expr><name>in_codec_name</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>decoder_name</name> <operator>=</operator> <literal type="string">"native"</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>out_codec</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>encoder_name</name> <operator>=</operator> <name><name>out_codec</name><operator>-&gt;</operator><name>name</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>desc</name> <operator>=</operator> <call><name>avcodec_descriptor_get</name><argument_list>(<argument><expr><name><name>out_codec</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>desc</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>out_codec_name</name> <operator>=</operator> <name><name>desc</name><operator>-&gt;</operator><name>name</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>encoder_name</name></expr></argument>, <argument><expr><name>out_codec_name</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>encoder_name</name> <operator>=</operator> <literal type="string">"native"</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">" (%s (%s) -&gt; %s (%s))"</literal></expr></argument>,

<argument><expr><name>in_codec_name</name></expr></argument>, <argument><expr><name>decoder_name</name></expr></argument>,

<argument><expr><name>out_codec_name</name></expr></argument>, <argument><expr><name>encoder_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>atomic_store</name><argument_list>(<argument><expr><operator>&amp;</operator><name>transcode_init_done</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>need_output</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nb_output_streams</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>OutputStream</name> <modifier>*</modifier></type><name>ost</name> <init>= <expr><name><name>output_streams</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>OutputFile</name> <modifier>*</modifier></type><name>of</name> <init>= <expr><name><name>output_files</name><index>[<expr><name><name>ost</name><operator>-&gt;</operator><name>file_index</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>os</name> <init>= <expr><name><name>output_files</name><index>[<expr><name><name>ost</name><operator>-&gt;</operator><name>file_index</name></name></expr>]</index></name><operator>-&gt;</operator><name>ctx</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ost</name><operator>-&gt;</operator><name>finished</name></name> <operator>||</operator>

<operator>(</operator><name><name>os</name><operator>-&gt;</operator><name>pb</name></name> <operator>&amp;&amp;</operator> <call><name>avio_tell</name><argument_list>(<argument><expr><name><name>os</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <name><name>of</name><operator>-&gt;</operator><name>limit_filesize</name></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ost</name><operator>-&gt;</operator><name>frame_number</name></name> <operator>&gt;=</operator> <name><name>ost</name><operator>-&gt;</operator><name>max_frames</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>of</name><operator>-&gt;</operator><name>ctx</name><operator>-&gt;</operator><name>nb_streams</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>close_output_stream</name><argument_list>(<argument><expr><name><name>output_streams</name><index>[<expr><name><name>of</name><operator>-&gt;</operator><name>ost_index</name></name> <operator>+</operator> <name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>OutputStream</name> <modifier>*</modifier></type><name>choose_output</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>opts_min</name> <init>= <expr><name>INT64_MAX</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>OutputStream</name> <modifier>*</modifier></type><name>ost_min</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nb_output_streams</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>OutputStream</name> <modifier>*</modifier></type><name>ost</name> <init>= <expr><name><name>output_streams</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>opts</name> <init>= <expr><ternary><condition><expr><name><name>ost</name><operator>-&gt;</operator><name>st</name><operator>-&gt;</operator><name>cur_dts</name></name> <operator>==</operator> <name>AV_NOPTS_VALUE</name></expr> ?</condition><then> <expr><name>INT64_MIN</name></expr> </then><else>:

<expr><call><name>av_rescale_q</name><argument_list>(<argument><expr><name><name>ost</name><operator>-&gt;</operator><name>st</name><operator>-&gt;</operator><name>cur_dts</name></name></expr></argument>, <argument><expr><name><name>ost</name><operator>-&gt;</operator><name>st</name><operator>-&gt;</operator><name>time_base</name></name></expr></argument>,

<argument><expr><name>AV_TIME_BASE_Q</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ost</name><operator>-&gt;</operator><name>st</name><operator>-&gt;</operator><name>cur_dts</name></name> <operator>==</operator> <name>AV_NOPTS_VALUE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>,

<argument><expr><literal type="string">"cur_dts is invalid st:%d (%d) [init:%d i_done:%d finish:%d] (this is harmless if it occurs once at the start per stream)\n"</literal></expr></argument>,

<argument><expr><name><name>ost</name><operator>-&gt;</operator><name>st</name><operator>-&gt;</operator><name>index</name></name></expr></argument>, <argument><expr><name><name>ost</name><operator>-&gt;</operator><name>st</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name><name>ost</name><operator>-&gt;</operator><name>initialized</name></name></expr></argument>, <argument><expr><name><name>ost</name><operator>-&gt;</operator><name>inputs_done</name></name></expr></argument>, <argument><expr><name><name>ost</name><operator>-&gt;</operator><name>finished</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ost</name><operator>-&gt;</operator><name>initialized</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>ost</name><operator>-&gt;</operator><name>inputs_done</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ost</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ost</name><operator>-&gt;</operator><name>finished</name></name> <operator>&amp;&amp;</operator> <name>opts</name> <operator>&lt;</operator> <name>opts_min</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>opts_min</name> <operator>=</operator> <name>opts</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ost_min</name> <operator>=</operator> <ternary><condition><expr><name><name>ost</name><operator>-&gt;</operator><name>unavailable</name></name></expr> ?</condition><then> <expr><name>NULL</name></expr> </then><else>: <expr><name>ost</name></expr></else></ternary></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>ost_min</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>set_tty_echo</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>on</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_TERMIOS_H</name></expr></cpp:if>

<decl_stmt><decl><type><name><name>struct</name> <name>termios</name></name></type> <name>tty</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>tcgetattr</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>tty</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>on</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>tty</name><operator>.</operator><name>c_lflag</name></name> <operator>|=</operator> <name>ECHO</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name><name>tty</name><operator>.</operator><name>c_lflag</name></name> <operator>&amp;=</operator> <operator>~</operator><name>ECHO</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>tcsetattr</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>TCSANOW</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tty</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>check_keyboard_interaction</name><parameter_list>(<parameter><decl><type><name>int64_t</name></type> <name>cur_time</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>, <decl><type ref="prev"/><name>key</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int64_t</name></type> <name>last_time</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>received_nb_signals</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_EXIT</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>cur_time</name> <operator>-</operator> <name>last_time</name> <operator>&gt;=</operator> <literal type="number">100000</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name>run_as_daemon</name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name>key</name> <operator>=</operator> <call><name>read_key</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>last_time</name> <operator>=</operator> <name>cur_time</name></expr>;</expr_stmt>

</block_content>}</block></if><else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>key</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>key</name> <operator>==</operator> <literal type="char">'q'</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_EXIT</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>key</name> <operator>==</operator> <literal type="char">'+'</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>av_log_set_level</name><argument_list>(<argument><expr><call><name>av_log_get_level</name><argument_list>()</argument_list></call><operator>+</operator><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>key</name> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>av_log_set_level</name><argument_list>(<argument><expr><call><name>av_log_get_level</name><argument_list>()</argument_list></call><operator>-</operator><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>key</name> <operator>==</operator> <literal type="char">'s'</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>qp_hist</name> <operator>^=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>key</name> <operator>==</operator> <literal type="char">'h'</literal></expr>)</condition><block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>do_hex_dump</name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name>do_hex_dump</name> <operator>=</operator> <name>do_pkt_dump</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name>do_pkt_dump</name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name>do_hex_dump</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>do_pkt_dump</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>av_log_set_level</name><argument_list>(<argument><expr><name>AV_LOG_DEBUG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>key</name> <operator>==</operator> <literal type="char">'c'</literal> <operator>||</operator> <name>key</name> <operator>==</operator> <literal type="char">'C'</literal></expr>)</condition><block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">4096</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>target</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>command</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>arg</name><index>[<expr><literal type="number">256</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>time</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>k</name></decl>, <decl><type ref="prev"/><name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"\nEnter command: &lt;target&gt;|all &lt;time&gt;|-1 &lt;command&gt;[ &lt;argument&gt;]\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_tty_echo</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>(</operator><name>k</name> <operator>=</operator> <call><name>read_key</name><argument_list>()</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="char">'\n'</literal> <operator>&amp;&amp;</operator> <name>k</name> <operator>!=</operator> <literal type="char">'\r'</literal> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name>k</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>buf</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>k</name></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></while>

<expr_stmt><expr><name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_tty_echo</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>k</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>

<operator>(</operator><name>n</name> <operator>=</operator> <call><name>sscanf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"%63[^ ] %lf %255[^ ] %255[^\n]"</literal></expr></argument>, <argument><expr><name>target</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>time</name></expr></argument>, <argument><expr><name>command</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;=</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Processing command target:%s time:%f command:%s arg:%s"</literal></expr></argument>,

<argument><expr><name>target</name></expr></argument>, <argument><expr><name>time</name></expr></argument>, <argument><expr><name>command</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nb_filtergraphs</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>FilterGraph</name> <modifier>*</modifier></type><name>fg</name> <init>= <expr><name><name>filtergraphs</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>fg</name><operator>-&gt;</operator><name>graph</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>time</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>avfilter_graph_send_command</name><argument_list>(<argument><expr><name><name>fg</name><operator>-&gt;</operator><name>graph</name></name></expr></argument>, <argument><expr><name>target</name></expr></argument>, <argument><expr><name>command</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>,

<argument><expr><ternary><condition><expr><name>key</name> <operator>==</operator> <literal type="char">'c'</literal></expr> ?</condition><then> <expr><name>AVFILTER_CMD_FLAG_ONE</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Command reply for stream %d: ret:%d res:\n%s"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>key</name> <operator>==</operator> <literal type="char">'c'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Queuing commands only on filters supporting the specific command is unsupported\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>AVERROR_PATCHWELCOME</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>avfilter_graph_queue_command</name><argument_list>(<argument><expr><name><name>fg</name><operator>-&gt;</operator><name>graph</name></name></expr></argument>, <argument><expr><name>target</name></expr></argument>, <argument><expr><name>command</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Queuing command failed with error %s\n"</literal></expr></argument>, <argument><expr><call><name>av_err2str</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"Parse error, at least 3 arguments were expected, "</literal>

<literal type="string">"only %d given in string '%s'\n"</literal></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>key</name> <operator>==</operator> <literal type="char">'d'</literal> <operator>||</operator> <name>key</name> <operator>==</operator> <literal type="char">'D'</literal></expr>)</condition><block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>debug</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>key</name> <operator>==</operator> <literal type="char">'D'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>debug</name> <operator>=</operator> <name><name>input_streams</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name><name>st</name><operator>-&gt;</operator><name>codec</name><operator>-&gt;</operator><name>debug</name></name><operator>&lt;&lt;</operator><literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>debug</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>debug</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<while>while<condition>(<expr><name>debug</name> <operator>&amp;</operator> <operator>(</operator><name>FF_DEBUG_DCT_COEFF</name>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>FF_API_DEBUG_MV</name></expr></cpp:if>

<operator>|</operator><name>FF_DEBUG_VIS_QP</name><operator>|</operator><name>FF_DEBUG_VIS_MB_TYPE</name>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<operator>)</operator></expr>)</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><name>debug</name> <operator>+=</operator> <name>debug</name></expr>;</expr_stmt></block_content></block></while>

</block_content>}</block></if><else>else<block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_tty_echo</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>(</operator><name>k</name> <operator>=</operator> <call><name>read_key</name><argument_list>()</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="char">'\n'</literal> <operator>&amp;&amp;</operator> <name>k</name> <operator>!=</operator> <literal type="char">'\r'</literal> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name>k</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>buf</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>k</name></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></while>

<expr_stmt><expr><name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_tty_echo</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>k</name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <call><name>sscanf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>debug</name></expr></argument>)</argument_list></call><operator>!=</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,<argument><expr><literal type="string">"error parsing debug value\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>nb_input_streams</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>input_streams</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name><name>st</name><operator>-&gt;</operator><name>codec</name><operator>-&gt;</operator><name>debug</name></name> <operator>=</operator> <name>debug</name></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>nb_output_streams</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>OutputStream</name> <modifier>*</modifier></type><name>ost</name> <init>= <expr><name><name>output_streams</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>ost</name><operator>-&gt;</operator><name>enc_ctx</name><operator>-&gt;</operator><name>debug</name></name> <operator>=</operator> <name>debug</name></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if<condition>(<expr><name>debug</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>av_log_set_level</name><argument_list>(<argument><expr><name>AV_LOG_DEBUG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,<argument><expr><literal type="string">"debug=%d\n"</literal></expr></argument>, <argument><expr><name>debug</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>key</name> <operator>==</operator> <literal type="char">'?'</literal></expr>)</condition><block>{<block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"key function\n"</literal>

<literal type="string">"? show this help\n"</literal>

<literal type="string">"+ increase verbosity\n"</literal>

<literal type="string">"- decrease verbosity\n"</literal>

<literal type="string">"c Send command to first matching filter supporting it\n"</literal>

<literal type="string">"C Send/Queue command to all matching filters\n"</literal>

<literal type="string">"D cycle through available debug modes\n"</literal>

<literal type="string">"h dump packets/hex press to cycle through the 3 states\n"</literal>

<literal type="string">"q quit\n"</literal>

<literal type="string">"s Show QP histogram\n"</literal></expr></argument>

)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_THREADS</name></expr></cpp:if>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>input_thread</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>InputFile</name> <modifier>*</modifier></type><name>f</name> <init>= <expr><name>arg</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>flags</name> <init>= <expr><ternary><condition><expr><name><name>f</name><operator>-&gt;</operator><name>non_blocking</name></name></expr> ?</condition><then> <expr><name>AV_THREAD_MESSAGE_NONBLOCK</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>AVPacket</name></type> <name>pkt</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>av_read_frame</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>EAGAIN</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_usleep</name><argument_list>(<argument><expr><literal type="number">10000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_thread_message_queue_set_err_recv</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>in_thread_queue</name></name></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>av_thread_message_queue_send</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>in_thread_queue</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pkt</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;&amp;</operator> <name>ret</name> <operator>==</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>EAGAIN</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>flags</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>av_thread_message_queue_send</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>in_thread_queue</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pkt</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>,

<argument><expr><literal type="string">"Thread message queue blocking; consider raising the "</literal>

<literal type="string">"thread_queue_size option (current value: %d)\n"</literal></expr></argument>,

<argument><expr><name><name>f</name><operator>-&gt;</operator><name>thread_queue_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>AVERROR_EOF</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"Unable to send packet to main thread: %s\n"</literal></expr></argument>,

<argument><expr><call><name>av_err2str</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_packet_unref</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_thread_message_queue_set_err_recv</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>in_thread_queue</name></name></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></while>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>free_input_thread</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>InputFile</name> <modifier>*</modifier></type><name>f</name> <init>= <expr><name><name>input_files</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVPacket</name></type> <name>pkt</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>f</name> <operator>||</operator> <operator>!</operator><name><name>f</name><operator>-&gt;</operator><name>in_thread_queue</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_thread_message_queue_set_err_send</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>in_thread_queue</name></name></expr></argument>, <argument><expr><name>AVERROR_EOF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><call><name>av_thread_message_queue_recv</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>in_thread_queue</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pkt</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_packet_unref</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><call><name>pthread_join</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>thread</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>joined</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_thread_message_queue_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>in_thread_queue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>free_input_threads</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nb_input_files</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>free_input_thread</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>init_input_thread</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>InputFile</name> <modifier>*</modifier></type><name>f</name> <init>= <expr><name><name>input_files</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>nb_input_files</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><ternary><condition><expr><name><name>f</name><operator>-&gt;</operator><name>ctx</name><operator>-&gt;</operator><name>pb</name></name></expr> ?</condition><then> <expr><operator>!</operator><name><name>f</name><operator>-&gt;</operator><name>ctx</name><operator>-&gt;</operator><name>pb</name><operator>-&gt;</operator><name>seekable</name></name></expr> </then><else>:

<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>ctx</name><operator>-&gt;</operator><name>iformat</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="string">"lavfi"</literal></expr></argument>)</argument_list></call></expr></else></ternary></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>non_blocking</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>av_thread_message_queue_alloc</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>in_thread_queue</name></name></expr></argument>,

<argument><expr><name><name>f</name><operator>-&gt;</operator><name>thread_queue_size</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>AVPacket</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>pthread_create</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>thread</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>input_thread</name></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"pthread_create failed: %s. Try to increase `ulimit -v` or decrease `ulimit -s`.\n"</literal></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_thread_message_queue_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>in_thread_queue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>init_input_threads</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nb_input_files</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>init_input_thread</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>get_input_packet_mt</name><parameter_list>(<parameter><decl><type><name>InputFile</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>av_thread_message_queue_recv</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>in_thread_queue</name></name></expr></argument>, <argument><expr><name>pkt</name></expr></argument>,

<argument><expr><ternary><condition><expr><name><name>f</name><operator>-&gt;</operator><name>non_blocking</name></name></expr> ?</condition><then>

<expr><name>AV_THREAD_MESSAGE_NONBLOCK</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>int</name></type> <name>get_input_packet</name><parameter_list>(<parameter><decl><type><name>InputFile</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>rate_emu</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>f</name><operator>-&gt;</operator><name>nb_streams</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>InputStream</name> <modifier>*</modifier></type><name>ist</name> <init>= <expr><name><name>input_streams</name><index>[<expr><name><name>f</name><operator>-&gt;</operator><name>ist_index</name></name> <operator>+</operator> <name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>pts</name> <init>= <expr><call><name>av_rescale</name><argument_list>(<argument><expr><name><name>ist</name><operator>-&gt;</operator><name>dts</name></name></expr></argument>, <argument><expr><literal type="number">1000000</literal></expr></argument>, <argument><expr><name>AV_TIME_BASE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>now</name> <init>= <expr><call><name>av_gettime_relative</name><argument_list>()</argument_list></call> <operator>-</operator> <name><name>ist</name><operator>-&gt;</operator><name>start</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>pts</name> <operator>&gt;</operator> <name>now</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EAGAIN</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_THREADS</name></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><name>nb_input_files</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>get_input_packet_mt</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><call><name>av_read_frame</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>, <argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>got_eagain</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nb_output_streams</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name><name>output_streams</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>unavailable</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>reset_eagain</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nb_input_files</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>input_files</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>eagain</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nb_output_streams</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>output_streams</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>unavailable</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>AVRational</name></type> <name>duration_max</name><parameter_list>(<parameter><decl><type><name>int64_t</name></type> <name>tmp</name></decl></parameter>, <parameter><decl><type><name>int64_t</name> <modifier>*</modifier></type><name>duration</name></decl></parameter>, <parameter><decl><type><name>AVRational</name></type> <name>tmp_time_base</name></decl></parameter>,

<parameter><decl><type><name>AVRational</name></type> <name>time_base</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>duration</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>duration</name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>

<return>return <expr><name>tmp_time_base</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>av_compare_ts</name><argument_list>(<argument><expr><operator>*</operator><name>duration</name></expr></argument>, <argument><expr><name>time_base</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>tmp_time_base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>duration</name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>

<return>return <expr><name>tmp_time_base</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>time_base</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>seek_to_start</name><parameter_list>(<parameter><decl><type><name>InputFile</name> <modifier>*</modifier></type><name>ifile</name></decl></parameter>, <parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>is</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>InputStream</name> <modifier>*</modifier></type><name>ist</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>, <decl><type ref="prev"/><name>has_audio</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>duration</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>avformat_seek_file</name><argument_list>(<argument><expr><name>is</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>INT64_MIN</name></expr></argument>, <argument><expr><name><name>is</name><operator>-&gt;</operator><name>start_time</name></name></expr></argument>, <argument><expr><name><name>is</name><operator>-&gt;</operator><name>start_time</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ifile</name><operator>-&gt;</operator><name>nb_streams</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>ist</name> <operator>=</operator> <name><name>input_streams</name><index>[<expr><name><name>ifile</name><operator>-&gt;</operator><name>ist_index</name></name> <operator>+</operator> <name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>avctx</name> <operator>=</operator> <name><name>ist</name><operator>-&gt;</operator><name>dec_ctx</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>codec_type</name></name> <operator>==</operator> <name>AVMEDIA_TYPE_AUDIO</name> <operator>&amp;&amp;</operator> <name><name>ist</name><operator>-&gt;</operator><name>nb_samples</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>has_audio</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ifile</name><operator>-&gt;</operator><name>nb_streams</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>ist</name> <operator>=</operator> <name><name>input_streams</name><index>[<expr><name><name>ifile</name><operator>-&gt;</operator><name>ist_index</name></name> <operator>+</operator> <name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>avctx</name> <operator>=</operator> <name><name>ist</name><operator>-&gt;</operator><name>dec_ctx</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>has_audio</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>codec_type</name></name> <operator>==</operator> <name>AVMEDIA_TYPE_AUDIO</name> <operator>&amp;&amp;</operator> <name><name>ist</name><operator>-&gt;</operator><name>nb_samples</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>AVRational</name></type> <name>sample_rate</name> <init>= <expr><block>{<expr><literal type="number">1</literal></expr>, <expr><name><name>avctx</name><operator>-&gt;</operator><name>sample_rate</name></name></expr>}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>duration</name> <operator>=</operator> <call><name>av_rescale_q</name><argument_list>(<argument><expr><name><name>ist</name><operator>-&gt;</operator><name>nb_samples</name></name></expr></argument>, <argument><expr><name>sample_rate</name></expr></argument>, <argument><expr><name><name>ist</name><operator>-&gt;</operator><name>st</name><operator>-&gt;</operator><name>time_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<continue>continue;</continue>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>ist</name><operator>-&gt;</operator><name>framerate</name><operator>.</operator><name>num</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>duration</name> <operator>=</operator> <call><name>av_rescale_q</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name>av_inv_q</name><argument_list>(<argument><expr><name><name>ist</name><operator>-&gt;</operator><name>framerate</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>ist</name><operator>-&gt;</operator><name>st</name><operator>-&gt;</operator><name>time_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>ist</name><operator>-&gt;</operator><name>st</name><operator>-&gt;</operator><name>avg_frame_rate</name><operator>.</operator><name>num</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>duration</name> <operator>=</operator> <call><name>av_rescale_q</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name>av_inv_q</name><argument_list>(<argument><expr><name><name>ist</name><operator>-&gt;</operator><name>st</name><operator>-&gt;</operator><name>avg_frame_rate</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>ist</name><operator>-&gt;</operator><name>st</name><operator>-&gt;</operator><name>time_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>duration</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ifile</name><operator>-&gt;</operator><name>duration</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ifile</name><operator>-&gt;</operator><name>time_base</name></name> <operator>=</operator> <name><name>ist</name><operator>-&gt;</operator><name>st</name><operator>-&gt;</operator><name>time_base</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ist</name><operator>-&gt;</operator><name>max_pts</name></name> <operator>&gt;</operator> <name><name>ist</name><operator>-&gt;</operator><name>min_pts</name></name> <operator>&amp;&amp;</operator> <name><name>ist</name><operator>-&gt;</operator><name>max_pts</name></name> <operator>-</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>ist</name><operator>-&gt;</operator><name>min_pts</name></name> <operator>&lt;</operator> <name>INT64_MAX</name> <operator>-</operator> <name>duration</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>duration</name> <operator>+=</operator> <name><name>ist</name><operator>-&gt;</operator><name>max_pts</name></name> <operator>-</operator> <name><name>ist</name><operator>-&gt;</operator><name>min_pts</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>ifile</name><operator>-&gt;</operator><name>time_base</name></name> <operator>=</operator> <call><name>duration_max</name><argument_list>(<argument><expr><name>duration</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ifile</name><operator>-&gt;</operator><name>duration</name></name></expr></argument>, <argument><expr><name><name>ist</name><operator>-&gt;</operator><name>st</name><operator>-&gt;</operator><name>time_base</name></name></expr></argument>,

<argument><expr><name><name>ifile</name><operator>-&gt;</operator><name>time_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>ifile</name><operator>-&gt;</operator><name>loop</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ifile</name><operator>-&gt;</operator><name>loop</name></name><operator>--</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>process_input</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>file_index</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>InputFile</name> <modifier>*</modifier></type><name>ifile</name> <init>= <expr><name><name>input_files</name><index>[<expr><name>file_index</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>is</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>InputStream</name> <modifier>*</modifier></type><name>ist</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVPacket</name></type> <name>pkt</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>, <decl><type ref="prev"/><name>thread_ret</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>duration</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>pkt_dts</name></decl>;</decl_stmt>

<expr_stmt><expr><name>is</name> <operator>=</operator> <name><name>ifile</name><operator>-&gt;</operator><name>ctx</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>get_input_packet</name><argument_list>(<argument><expr><name>ifile</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>EAGAIN</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ifile</name><operator>-&gt;</operator><name>eagain</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>ifile</name><operator>-&gt;</operator><name>loop</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ifile</name><operator>-&gt;</operator><name>nb_streams</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>ist</name> <operator>=</operator> <name><name>input_streams</name><index>[<expr><name><name>ifile</name><operator>-&gt;</operator><name>ist_index</name></name> <operator>+</operator> <name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>avctx</name> <operator>=</operator> <name><name>ist</name><operator>-&gt;</operator><name>dec_ctx</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ist</name><operator>-&gt;</operator><name>decoding_needed</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>process_input_packet</name><argument_list>(<argument><expr><name>ist</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name><operator>&gt;</operator><literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>avcodec_flush_buffers</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_THREADS</name></expr></cpp:if>

<expr_stmt><expr><call><name>free_input_thread</name><argument_list>(<argument><expr><name>file_index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>seek_to_start</name><argument_list>(<argument><expr><name>ifile</name></expr></argument>, <argument><expr><name>is</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_THREADS</name></expr></cpp:if>

<expr_stmt><expr><name>thread_ret</name> <operator>=</operator> <call><name>init_input_thread</name><argument_list>(<argument><expr><name>file_index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>thread_ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>thread_ret</name></expr>;</return></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Seek to start failed.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>get_input_packet</name><argument_list>(<argument><expr><name>ifile</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>EAGAIN</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ifile</name><operator>-&gt;</operator><name>eagain</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>AVERROR_EOF</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>print_error</name><argument_list>(<argument><expr><name><name>is</name><operator>-&gt;</operator><name>url</name></name></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>exit_on_error</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>exit_program</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ifile</name><operator>-&gt;</operator><name>nb_streams</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>ist</name> <operator>=</operator> <name><name>input_streams</name><index>[<expr><name><name>ifile</name><operator>-&gt;</operator><name>ist_index</name></name> <operator>+</operator> <name>i</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ist</name><operator>-&gt;</operator><name>decoding_needed</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>process_input_packet</name><argument_list>(<argument><expr><name>ist</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name><operator>&gt;</operator><literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>nb_output_streams</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>OutputStream</name> <modifier>*</modifier></type><name>ost</name> <init>= <expr><name><name>output_streams</name><index>[<expr><name>j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ost</name><operator>-&gt;</operator><name>source_index</name></name> <operator>==</operator> <name><name>ifile</name><operator>-&gt;</operator><name>ist_index</name></name> <operator>+</operator> <name>i</name> <operator>&amp;&amp;</operator>

<operator>(</operator><name><name>ost</name><operator>-&gt;</operator><name>stream_copy</name></name> <operator>||</operator> <name><name>ost</name><operator>-&gt;</operator><name>enc</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>AVMEDIA_TYPE_SUBTITLE</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>finish_output_stream</name><argument_list>(<argument><expr><name>ost</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<expr_stmt><expr><name><name>ifile</name><operator>-&gt;</operator><name>eof_reached</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EAGAIN</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>reset_eagain</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>do_pkt_dump</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_pkt_dump_log2</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pkt</name></expr></argument>, <argument><expr><name>do_hex_dump</name></expr></argument>,

<argument><expr><name><name>is</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name><name>pkt</name><operator>.</operator><name>stream_index</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pkt</name><operator>.</operator><name>stream_index</name></name> <operator>&gt;=</operator> <name><name>ifile</name><operator>-&gt;</operator><name>nb_streams</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>report_new_stream</name><argument_list>(<argument><expr><name>file_index</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>discard_packet</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ist</name> <operator>=</operator> <name><name>input_streams</name><index>[<expr><name><name>ifile</name><operator>-&gt;</operator><name>ist_index</name></name> <operator>+</operator> <name><name>pkt</name><operator>.</operator><name>stream_index</name></name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ist</name><operator>-&gt;</operator><name>data_size</name></name> <operator>+=</operator> <name><name>pkt</name><operator>.</operator><name>size</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ist</name><operator>-&gt;</operator><name>nb_packets</name></name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ist</name><operator>-&gt;</operator><name>discard</name></name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>discard_packet</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pkt</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_PKT_FLAG_CORRUPT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><ternary><condition><expr><name>exit_on_error</name></expr> ?</condition><then> <expr><name>AV_LOG_FATAL</name></expr> </then><else>: <expr><name>AV_LOG_WARNING</name></expr></else></ternary></expr></argument>,

<argument><expr><literal type="string">"%s: corrupt input packet in stream %d\n"</literal></expr></argument>, <argument><expr><name><name>is</name><operator>-&gt;</operator><name>url</name></name></expr></argument>, <argument><expr><name><name>pkt</name><operator>.</operator><name>stream_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>exit_on_error</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>exit_program</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>debug_ts</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"demuxer -&gt; ist_index:%d type:%s "</literal>

<literal type="string">"next_dts:%s next_dts_time:%s next_pts:%s next_pts_time:%s pkt_pts:%s pkt_pts_time:%s pkt_dts:%s pkt_dts_time:%s off:%s off_time:%s\n"</literal></expr></argument>,

<argument><expr><name><name>ifile</name><operator>-&gt;</operator><name>ist_index</name></name> <operator>+</operator> <name><name>pkt</name><operator>.</operator><name>stream_index</name></name></expr></argument>, <argument><expr><call><name>av_get_media_type_string</name><argument_list>(<argument><expr><name><name>ist</name><operator>-&gt;</operator><name>dec_ctx</name><operator>-&gt;</operator><name>codec_type</name></name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>av_ts2str</name><argument_list>(<argument><expr><name><name>ist</name><operator>-&gt;</operator><name>next_dts</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>av_ts2timestr</name><argument_list>(<argument><expr><name><name>ist</name><operator>-&gt;</operator><name>next_dts</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>AV_TIME_BASE_Q</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>av_ts2str</name><argument_list>(<argument><expr><name><name>ist</name><operator>-&gt;</operator><name>next_pts</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>av_ts2timestr</name><argument_list>(<argument><expr><name><name>ist</name><operator>-&gt;</operator><name>next_pts</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>AV_TIME_BASE_Q</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>av_ts2str</name><argument_list>(<argument><expr><name><name>pkt</name><operator>.</operator><name>pts</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>av_ts2timestr</name><argument_list>(<argument><expr><name><name>pkt</name><operator>.</operator><name>pts</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ist</name><operator>-&gt;</operator><name>st</name><operator>-&gt;</operator><name>time_base</name></name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>av_ts2str</name><argument_list>(<argument><expr><name><name>pkt</name><operator>.</operator><name>dts</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>av_ts2timestr</name><argument_list>(<argument><expr><name><name>pkt</name><operator>.</operator><name>dts</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ist</name><operator>-&gt;</operator><name>st</name><operator>-&gt;</operator><name>time_base</name></name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>av_ts2str</name><argument_list>(<argument><expr><name><name>input_files</name><index>[<expr><name><name>ist</name><operator>-&gt;</operator><name>file_index</name></name></expr>]</index></name><operator>-&gt;</operator><name>ts_offset</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>av_ts2timestr</name><argument_list>(<argument><expr><name><name>input_files</name><index>[<expr><name><name>ist</name><operator>-&gt;</operator><name>file_index</name></name></expr>]</index></name><operator>-&gt;</operator><name>ts_offset</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>AV_TIME_BASE_Q</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>ist</name><operator>-&gt;</operator><name>wrap_correction_done</name></name> <operator>&amp;&amp;</operator> <name><name>is</name><operator>-&gt;</operator><name>start_time</name></name> <operator>!=</operator> <name>AV_NOPTS_VALUE</name> <operator>&amp;&amp;</operator> <name><name>ist</name><operator>-&gt;</operator><name>st</name><operator>-&gt;</operator><name>pts_wrap_bits</name></name> <operator>&lt;</operator> <literal type="number">64</literal></expr>)</condition><block>{<block_content>

<decl_stmt><decl><type><name>int64_t</name></type> <name>stime</name></decl>, <decl><type ref="prev"/><name>stime2</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>( <expr><name><name>ist</name><operator>-&gt;</operator><name>next_dts</name></name> <operator>==</operator> <name>AV_NOPTS_VALUE</name>

<operator>&amp;&amp;</operator> <name><name>ifile</name><operator>-&gt;</operator><name>ts_offset</name></name> <operator>==</operator> <operator>-</operator><name><name>is</name><operator>-&gt;</operator><name>start_time</name></name>

<operator>&amp;&amp;</operator> <operator>(</operator><name><name>is</name><operator>-&gt;</operator><name>iformat</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AVFMT_TS_DISCONT</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int64_t</name></type> <name>new_start_time</name> <init>= <expr><name>INT64_MAX</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>is</name><operator>-&gt;</operator><name>nb_streams</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>AVStream</name> <modifier>*</modifier></type><name>st</name> <init>= <expr><name><name>is</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>st</name><operator>-&gt;</operator><name>discard</name></name> <operator>==</operator> <name>AVDISCARD_ALL</name> <operator>||</operator> <name><name>st</name><operator>-&gt;</operator><name>start_time</name></name> <operator>==</operator> <name>AV_NOPTS_VALUE</name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name>new_start_time</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>new_start_time</name></expr></argument>, <argument><expr><call><name>av_rescale_q</name><argument_list>(<argument><expr><name><name>st</name><operator>-&gt;</operator><name>start_time</name></name></expr></argument>, <argument><expr><name><name>st</name><operator>-&gt;</operator><name>time_base</name></name></expr></argument>, <argument><expr><name>AV_TIME_BASE_Q</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>new_start_time</name> <operator>&gt;</operator> <name><name>is</name><operator>-&gt;</operator><name>start_time</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>is</name></expr></argument>, <argument><expr><name>AV_LOG_VERBOSE</name></expr></argument>, <argument><expr><literal type="string">"Correcting start time by %"</literal><name>PRId64</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name>new_start_time</name> <operator>-</operator> <name><name>is</name><operator>-&gt;</operator><name>start_time</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ifile</name><operator>-&gt;</operator><name>ts_offset</name></name> <operator>=</operator> <operator>-</operator><name>new_start_time</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>stime</name> <operator>=</operator> <call><name>av_rescale_q</name><argument_list>(<argument><expr><name><name>is</name><operator>-&gt;</operator><name>start_time</name></name></expr></argument>, <argument><expr><name>AV_TIME_BASE_Q</name></expr></argument>, <argument><expr><name><name>ist</name><operator>-&gt;</operator><name>st</name><operator>-&gt;</operator><name>time_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>stime2</name><operator>=</operator> <name>stime</name> <operator>+</operator> <operator>(</operator><literal type="number">1ULL</literal><operator>&lt;&lt;</operator><name><name>ist</name><operator>-&gt;</operator><name>st</name><operator>-&gt;</operator><name>pts_wrap_bits</name></name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ist</name><operator>-&gt;</operator><name>wrap_correction_done</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>stime2</name> <operator>&gt;</operator> <name>stime</name> <operator>&amp;&amp;</operator> <name><name>pkt</name><operator>.</operator><name>dts</name></name> <operator>!=</operator> <name>AV_NOPTS_VALUE</name> <operator>&amp;&amp;</operator> <name><name>pkt</name><operator>.</operator><name>dts</name></name> <operator>&gt;</operator> <name>stime</name> <operator>+</operator> <operator>(</operator><literal type="number">1LL</literal><operator>&lt;&lt;</operator><operator>(</operator><name><name>ist</name><operator>-&gt;</operator><name>st</name><operator>-&gt;</operator><name>pts_wrap_bits</name></name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>pkt</name><operator>.</operator><name>dts</name></name> <operator>-=</operator> <literal type="number">1ULL</literal><operator>&lt;&lt;</operator><name><name>ist</name><operator>-&gt;</operator><name>st</name><operator>-&gt;</operator><name>pts_wrap_bits</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ist</name><operator>-&gt;</operator><name>wrap_correction_done</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>stime2</name> <operator>&gt;</operator> <name>stime</name> <operator>&amp;&amp;</operator> <name><name>pkt</name><operator>.</operator><name>pts</name></name> <operator>!=</operator> <name>AV_NOPTS_VALUE</name> <operator>&amp;&amp;</operator> <name><name>pkt</name><operator>.</operator><name>pts</name></name> <operator>&gt;</operator> <name>stime</name> <operator>+</operator> <operator>(</operator><literal type="number">1LL</literal><operator>&lt;&lt;</operator><operator>(</operator><name><name>ist</name><operator>-&gt;</operator><name>st</name><operator>-&gt;</operator><name>pts_wrap_bits</name></name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>pkt</name><operator>.</operator><name>pts</name></name> <operator>-=</operator> <literal type="number">1ULL</literal><operator>&lt;&lt;</operator><name><name>ist</name><operator>-&gt;</operator><name>st</name><operator>-&gt;</operator><name>pts_wrap_bits</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ist</name><operator>-&gt;</operator><name>wrap_correction_done</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ist</name><operator>-&gt;</operator><name>nb_packets</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ist</name><operator>-&gt;</operator><name>st</name><operator>-&gt;</operator><name>nb_side_data</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>AVPacketSideData</name> <modifier>*</modifier></type><name>src_sd</name> <init>= <expr><operator>&amp;</operator><name><name>ist</name><operator>-&gt;</operator><name>st</name><operator>-&gt;</operator><name>side_data</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst_data</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>src_sd</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>AV_PKT_DATA_DISPLAYMATRIX</name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>av_packet_get_side_data</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pkt</name></expr></argument>, <argument><expr><name><name>src_sd</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name>dst_data</name> <operator>=</operator> <call><name>av_packet_new_side_data</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pkt</name></expr></argument>, <argument><expr><name><name>src_sd</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name><name>src_sd</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>dst_data</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>exit_program</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>dst_data</name></expr></argument>, <argument><expr><name><name>src_sd</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>src_sd</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pkt</name><operator>.</operator><name>dts</name></name> <operator>!=</operator> <name>AV_NOPTS_VALUE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>pkt</name><operator>.</operator><name>dts</name></name> <operator>+=</operator> <call><name>av_rescale_q</name><argument_list>(<argument><expr><name><name>ifile</name><operator>-&gt;</operator><name>ts_offset</name></name></expr></argument>, <argument><expr><name>AV_TIME_BASE_Q</name></expr></argument>, <argument><expr><name><name>ist</name><operator>-&gt;</operator><name>st</name><operator>-&gt;</operator><name>time_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pkt</name><operator>.</operator><name>pts</name></name> <operator>!=</operator> <name>AV_NOPTS_VALUE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>pkt</name><operator>.</operator><name>pts</name></name> <operator>+=</operator> <call><name>av_rescale_q</name><argument_list>(<argument><expr><name><name>ifile</name><operator>-&gt;</operator><name>ts_offset</name></name></expr></argument>, <argument><expr><name>AV_TIME_BASE_Q</name></expr></argument>, <argument><expr><name><name>ist</name><operator>-&gt;</operator><name>st</name><operator>-&gt;</operator><name>time_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pkt</name><operator>.</operator><name>pts</name></name> <operator>!=</operator> <name>AV_NOPTS_VALUE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>pkt</name><operator>.</operator><name>pts</name></name> <operator>*=</operator> <name><name>ist</name><operator>-&gt;</operator><name>ts_scale</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pkt</name><operator>.</operator><name>dts</name></name> <operator>!=</operator> <name>AV_NOPTS_VALUE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>pkt</name><operator>.</operator><name>dts</name></name> <operator>*=</operator> <name><name>ist</name><operator>-&gt;</operator><name>ts_scale</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>pkt_dts</name> <operator>=</operator> <call><name>av_rescale_q_rnd</name><argument_list>(<argument><expr><name><name>pkt</name><operator>.</operator><name>dts</name></name></expr></argument>, <argument><expr><name><name>ist</name><operator>-&gt;</operator><name>st</name><operator>-&gt;</operator><name>time_base</name></name></expr></argument>, <argument><expr><name>AV_TIME_BASE_Q</name></expr></argument>, <argument><expr><name>AV_ROUND_NEAR_INF</name><operator>|</operator><name>AV_ROUND_PASS_MINMAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>ist</name><operator>-&gt;</operator><name>dec_ctx</name><operator>-&gt;</operator><name>codec_type</name></name> <operator>==</operator> <name>AVMEDIA_TYPE_VIDEO</name> <operator>||</operator>

<name><name>ist</name><operator>-&gt;</operator><name>dec_ctx</name><operator>-&gt;</operator><name>codec_type</name></name> <operator>==</operator> <name>AVMEDIA_TYPE_AUDIO</name><operator>)</operator> <operator>&amp;&amp;</operator>

<name>pkt_dts</name> <operator>!=</operator> <name>AV_NOPTS_VALUE</name> <operator>&amp;&amp;</operator> <name><name>ist</name><operator>-&gt;</operator><name>next_dts</name></name> <operator>==</operator> <name>AV_NOPTS_VALUE</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>copy_ts</name>

<operator>&amp;&amp;</operator> <operator>(</operator><name><name>is</name><operator>-&gt;</operator><name>iformat</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AVFMT_TS_DISCONT</name><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>ifile</name><operator>-&gt;</operator><name>last_ts</name></name> <operator>!=</operator> <name>AV_NOPTS_VALUE</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int64_t</name></type> <name>delta</name> <init>= <expr><name>pkt_dts</name> <operator>-</operator> <name><name>ifile</name><operator>-&gt;</operator><name>last_ts</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>delta</name> <argument_list type="generic">&lt; <argument><expr><operator>-</operator><literal type="number">1LL</literal><operator>*</operator><name>dts_delta_threshold</name><operator>*</operator><name>AV_TIME_BASE</name> <operator>||</operator>

<name>delta</name></expr></argument> &gt;</argument_list></name> <literal type="number">1LL</literal><operator>*</operator><name>dts_delta_threshold</name><operator>*</operator><name>AV_TIME_BASE</name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name><name>ifile</name><operator>-&gt;</operator><name>ts_offset</name></name> <operator>-=</operator> <name>delta</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>,

<argument><expr><literal type="string">"Inter stream timestamp discontinuity %"</literal><name>PRId64</name><literal type="string">", new offset= %"</literal><name>PRId64</name><literal type="string">"\n"</literal></expr></argument>,

<argument><expr><name>delta</name></expr></argument>, <argument><expr><name><name>ifile</name><operator>-&gt;</operator><name>ts_offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pkt</name><operator>.</operator><name>dts</name></name> <operator>-=</operator> <call><name>av_rescale_q</name><argument_list>(<argument><expr><name>delta</name></expr></argument>, <argument><expr><name>AV_TIME_BASE_Q</name></expr></argument>, <argument><expr><name><name>ist</name><operator>-&gt;</operator><name>st</name><operator>-&gt;</operator><name>time_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pkt</name><operator>.</operator><name>pts</name></name> <operator>!=</operator> <name>AV_NOPTS_VALUE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>pkt</name><operator>.</operator><name>pts</name></name> <operator>-=</operator> <call><name>av_rescale_q</name><argument_list>(<argument><expr><name>delta</name></expr></argument>, <argument><expr><name>AV_TIME_BASE_Q</name></expr></argument>, <argument><expr><name><name>ist</name><operator>-&gt;</operator><name>st</name><operator>-&gt;</operator><name>time_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>duration</name> <operator>=</operator> <call><name>av_rescale_q</name><argument_list>(<argument><expr><name><name>ifile</name><operator>-&gt;</operator><name>duration</name></name></expr></argument>, <argument><expr><name><name>ifile</name><operator>-&gt;</operator><name>time_base</name></name></expr></argument>, <argument><expr><name><name>ist</name><operator>-&gt;</operator><name>st</name><operator>-&gt;</operator><name>time_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pkt</name><operator>.</operator><name>pts</name></name> <operator>!=</operator> <name>AV_NOPTS_VALUE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>pkt</name><operator>.</operator><name>pts</name></name> <operator>+=</operator> <name>duration</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ist</name><operator>-&gt;</operator><name>max_pts</name></name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name><name>pkt</name><operator>.</operator><name>pts</name></name></expr></argument>, <argument><expr><name><name>ist</name><operator>-&gt;</operator><name>max_pts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ist</name><operator>-&gt;</operator><name>min_pts</name></name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name><name>pkt</name><operator>.</operator><name>pts</name></name></expr></argument>, <argument><expr><name><name>ist</name><operator>-&gt;</operator><name>min_pts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pkt</name><operator>.</operator><name>dts</name></name> <operator>!=</operator> <name>AV_NOPTS_VALUE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>pkt</name><operator>.</operator><name>dts</name></name> <operator>+=</operator> <name>duration</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>pkt_dts</name> <operator>=</operator> <call><name>av_rescale_q_rnd</name><argument_list>(<argument><expr><name><name>pkt</name><operator>.</operator><name>dts</name></name></expr></argument>, <argument><expr><name><name>ist</name><operator>-&gt;</operator><name>st</name><operator>-&gt;</operator><name>time_base</name></name></expr></argument>, <argument><expr><name>AV_TIME_BASE_Q</name></expr></argument>, <argument><expr><name>AV_ROUND_NEAR_INF</name><operator>|</operator><name>AV_ROUND_PASS_MINMAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>ist</name><operator>-&gt;</operator><name>dec_ctx</name><operator>-&gt;</operator><name>codec_type</name></name> <operator>==</operator> <name>AVMEDIA_TYPE_VIDEO</name> <operator>||</operator>

<name><name>ist</name><operator>-&gt;</operator><name>dec_ctx</name><operator>-&gt;</operator><name>codec_type</name></name> <operator>==</operator> <name>AVMEDIA_TYPE_AUDIO</name><operator>)</operator> <operator>&amp;&amp;</operator>

<name>pkt_dts</name> <operator>!=</operator> <name>AV_NOPTS_VALUE</name> <operator>&amp;&amp;</operator> <name><name>ist</name><operator>-&gt;</operator><name>next_dts</name></name> <operator>!=</operator> <name>AV_NOPTS_VALUE</name> <operator>&amp;&amp;</operator>

<operator>!</operator><name>copy_ts</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int64_t</name></type> <name>delta</name> <init>= <expr><name>pkt_dts</name> <operator>-</operator> <name><name>ist</name><operator>-&gt;</operator><name>next_dts</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>is</name><operator>-&gt;</operator><name>iformat</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AVFMT_TS_DISCONT</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>delta</name> <argument_list type="generic">&lt; <argument><expr><operator>-</operator><literal type="number">1LL</literal><operator>*</operator><name>dts_delta_threshold</name><operator>*</operator><name>AV_TIME_BASE</name> <operator>||</operator>

<name>delta</name></expr></argument> &gt;</argument_list></name> <literal type="number">1LL</literal><operator>*</operator><name>dts_delta_threshold</name><operator>*</operator><name>AV_TIME_BASE</name> <operator>||</operator>

<name>pkt_dts</name> <operator>+</operator> <name>AV_TIME_BASE</name><operator>/</operator><literal type="number">10</literal> <operator>&lt;</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name><name>ist</name><operator>-&gt;</operator><name>pts</name></name></expr></argument>, <argument><expr><name><name>ist</name><operator>-&gt;</operator><name>dts</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ifile</name><operator>-&gt;</operator><name>ts_offset</name></name> <operator>-=</operator> <name>delta</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>,

<argument><expr><literal type="string">"timestamp discontinuity for stream #%d:%d "</literal>

<literal type="string">"(id=%d, type=%s): %"</literal><name>PRId64</name><literal type="string">", new offset= %"</literal><name>PRId64</name><literal type="string">"\n"</literal></expr></argument>,

<argument><expr><name><name>ist</name><operator>-&gt;</operator><name>file_index</name></name></expr></argument>, <argument><expr><name><name>ist</name><operator>-&gt;</operator><name>st</name><operator>-&gt;</operator><name>index</name></name></expr></argument>, <argument><expr><name><name>ist</name><operator>-&gt;</operator><name>st</name><operator>-&gt;</operator><name>id</name></name></expr></argument>,

<argument><expr><call><name>av_get_media_type_string</name><argument_list>(<argument><expr><name><name>ist</name><operator>-&gt;</operator><name>dec_ctx</name><operator>-&gt;</operator><name>codec_type</name></name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>delta</name></expr></argument>, <argument><expr><name><name>ifile</name><operator>-&gt;</operator><name>ts_offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pkt</name><operator>.</operator><name>dts</name></name> <operator>-=</operator> <call><name>av_rescale_q</name><argument_list>(<argument><expr><name>delta</name></expr></argument>, <argument><expr><name>AV_TIME_BASE_Q</name></expr></argument>, <argument><expr><name><name>ist</name><operator>-&gt;</operator><name>st</name><operator>-&gt;</operator><name>time_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pkt</name><operator>.</operator><name>pts</name></name> <operator>!=</operator> <name>AV_NOPTS_VALUE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>pkt</name><operator>.</operator><name>pts</name></name> <operator>-=</operator> <call><name>av_rescale_q</name><argument_list>(<argument><expr><name>delta</name></expr></argument>, <argument><expr><name>AV_TIME_BASE_Q</name></expr></argument>, <argument><expr><name><name>ist</name><operator>-&gt;</operator><name>st</name><operator>-&gt;</operator><name>time_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>( <expr><name><name>delta</name> <argument_list type="generic">&lt; <argument><expr><operator>-</operator><literal type="number">1LL</literal><operator>*</operator><name>dts_error_threshold</name><operator>*</operator><name>AV_TIME_BASE</name> <operator>||</operator>

<name>delta</name></expr></argument> &gt;</argument_list></name> <literal type="number">1LL</literal><operator>*</operator><name>dts_error_threshold</name><operator>*</operator><name>AV_TIME_BASE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"DTS %"</literal><name>PRId64</name><literal type="string">", next:%"</literal><name>PRId64</name><literal type="string">" st:%d invalid dropping\n"</literal></expr></argument>, <argument><expr><name><name>pkt</name><operator>.</operator><name>dts</name></name></expr></argument>, <argument><expr><name><name>ist</name><operator>-&gt;</operator><name>next_dts</name></name></expr></argument>, <argument><expr><name><name>pkt</name><operator>.</operator><name>stream_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pkt</name><operator>.</operator><name>dts</name></name> <operator>=</operator> <name>AV_NOPTS_VALUE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pkt</name><operator>.</operator><name>pts</name></name> <operator>!=</operator> <name>AV_NOPTS_VALUE</name></expr>)</condition><block>{<block_content>

<decl_stmt><decl><type><name>int64_t</name></type> <name>pkt_pts</name> <init>= <expr><call><name>av_rescale_q</name><argument_list>(<argument><expr><name><name>pkt</name><operator>.</operator><name>pts</name></name></expr></argument>, <argument><expr><name><name>ist</name><operator>-&gt;</operator><name>st</name><operator>-&gt;</operator><name>time_base</name></name></expr></argument>, <argument><expr><name>AV_TIME_BASE_Q</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>delta</name> <operator>=</operator> <name>pkt_pts</name> <operator>-</operator> <name><name>ist</name><operator>-&gt;</operator><name>next_dts</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><name><name>delta</name> <argument_list type="generic">&lt; <argument><expr><operator>-</operator><literal type="number">1LL</literal><operator>*</operator><name>dts_error_threshold</name><operator>*</operator><name>AV_TIME_BASE</name> <operator>||</operator>

<name>delta</name></expr></argument> &gt;</argument_list></name> <literal type="number">1LL</literal><operator>*</operator><name>dts_error_threshold</name><operator>*</operator><name>AV_TIME_BASE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"PTS %"</literal><name>PRId64</name><literal type="string">", next:%"</literal><name>PRId64</name><literal type="string">" invalid dropping st:%d\n"</literal></expr></argument>, <argument><expr><name><name>pkt</name><operator>.</operator><name>pts</name></name></expr></argument>, <argument><expr><name><name>ist</name><operator>-&gt;</operator><name>next_dts</name></name></expr></argument>, <argument><expr><name><name>pkt</name><operator>.</operator><name>stream_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pkt</name><operator>.</operator><name>pts</name></name> <operator>=</operator> <name>AV_NOPTS_VALUE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pkt</name><operator>.</operator><name>dts</name></name> <operator>!=</operator> <name>AV_NOPTS_VALUE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ifile</name><operator>-&gt;</operator><name>last_ts</name></name> <operator>=</operator> <call><name>av_rescale_q</name><argument_list>(<argument><expr><name><name>pkt</name><operator>.</operator><name>dts</name></name></expr></argument>, <argument><expr><name><name>ist</name><operator>-&gt;</operator><name>st</name><operator>-&gt;</operator><name>time_base</name></name></expr></argument>, <argument><expr><name>AV_TIME_BASE_Q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>debug_ts</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"demuxer+ffmpeg -&gt; ist_index:%d type:%s pkt_pts:%s pkt_pts_time:%s pkt_dts:%s pkt_dts_time:%s off:%s off_time:%s\n"</literal></expr></argument>,

<argument><expr><name><name>ifile</name><operator>-&gt;</operator><name>ist_index</name></name> <operator>+</operator> <name><name>pkt</name><operator>.</operator><name>stream_index</name></name></expr></argument>, <argument><expr><call><name>av_get_media_type_string</name><argument_list>(<argument><expr><name><name>ist</name><operator>-&gt;</operator><name>dec_ctx</name><operator>-&gt;</operator><name>codec_type</name></name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>av_ts2str</name><argument_list>(<argument><expr><name><name>pkt</name><operator>.</operator><name>pts</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>av_ts2timestr</name><argument_list>(<argument><expr><name><name>pkt</name><operator>.</operator><name>pts</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ist</name><operator>-&gt;</operator><name>st</name><operator>-&gt;</operator><name>time_base</name></name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>av_ts2str</name><argument_list>(<argument><expr><name><name>pkt</name><operator>.</operator><name>dts</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>av_ts2timestr</name><argument_list>(<argument><expr><name><name>pkt</name><operator>.</operator><name>dts</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ist</name><operator>-&gt;</operator><name>st</name><operator>-&gt;</operator><name>time_base</name></name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>av_ts2str</name><argument_list>(<argument><expr><name><name>input_files</name><index>[<expr><name><name>ist</name><operator>-&gt;</operator><name>file_index</name></name></expr>]</index></name><operator>-&gt;</operator><name>ts_offset</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>av_ts2timestr</name><argument_list>(<argument><expr><name><name>input_files</name><index>[<expr><name><name>ist</name><operator>-&gt;</operator><name>file_index</name></name></expr>]</index></name><operator>-&gt;</operator><name>ts_offset</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>AV_TIME_BASE_Q</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>sub2video_heartbeat</name><argument_list>(<argument><expr><name>ist</name></expr></argument>, <argument><expr><name><name>pkt</name><operator>.</operator><name>pts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>process_input_packet</name><argument_list>(<argument><expr><name>ist</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pkt</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>discard_packet</name>:</label>

<expr_stmt><expr><call><name>av_packet_unref</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>transcode_from_filter</name><parameter_list>(<parameter><decl><type><name>FilterGraph</name> <modifier>*</modifier></type><name>graph</name></decl></parameter>, <parameter><decl><type><name>InputStream</name> <modifier>*</modifier><modifier>*</modifier></type><name>best_ist</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>nb_requests</name></decl>, <decl><type ref="prev"/><name>nb_requests_max</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>InputFilter</name> <modifier>*</modifier></type><name>ifilter</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>InputStream</name> <modifier>*</modifier></type><name>ist</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>best_ist</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>avfilter_graph_request_oldest</name><argument_list>(<argument><expr><name><name>graph</name><operator>-&gt;</operator><name>graph</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>reap_filters</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>AVERROR_EOF</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>reap_filters</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>graph</name><operator>-&gt;</operator><name>nb_outputs</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>close_output_stream</name><argument_list>(<argument><expr><name><name>graph</name><operator>-&gt;</operator><name>outputs</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>ost</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>EAGAIN</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>graph</name><operator>-&gt;</operator><name>nb_inputs</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>ifilter</name> <operator>=</operator> <name><name>graph</name><operator>-&gt;</operator><name>inputs</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>ist</name> <operator>=</operator> <name><name>ifilter</name><operator>-&gt;</operator><name>ist</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>input_files</name><index>[<expr><name><name>ist</name><operator>-&gt;</operator><name>file_index</name></name></expr>]</index></name><operator>-&gt;</operator><name>eagain</name> <operator>||</operator>

<name><name>input_files</name><index>[<expr><name><name>ist</name><operator>-&gt;</operator><name>file_index</name></name></expr>]</index></name><operator>-&gt;</operator><name>eof_reached</name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name>nb_requests</name> <operator>=</operator> <call><name>av_buffersrc_get_nb_failed_requests</name><argument_list>(<argument><expr><name><name>ifilter</name><operator>-&gt;</operator><name>filter</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>nb_requests</name> <operator>&gt;</operator> <name>nb_requests_max</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>nb_requests_max</name> <operator>=</operator> <name>nb_requests</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>best_ist</name> <operator>=</operator> <name>ist</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>best_ist</name></expr>)</condition><block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>graph</name><operator>-&gt;</operator><name>nb_outputs</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>graph</name><operator>-&gt;</operator><name>outputs</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name><name>ost</name><operator>-&gt;</operator><name>unavailable</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></for></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>transcode_step</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>OutputStream</name> <modifier>*</modifier></type><name>ost</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>InputStream</name> <modifier>*</modifier></type><name>ist</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ost</name> <operator>=</operator> <call><name>choose_output</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ost</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>got_eagain</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>reset_eagain</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_usleep</name><argument_list>(<argument><expr><literal type="number">10000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_VERBOSE</name></expr></argument>, <argument><expr><literal type="string">"No more inputs to read from, finishing.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_EOF</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ost</name><operator>-&gt;</operator><name>filter</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>ost</name><operator>-&gt;</operator><name>filter</name><operator>-&gt;</operator><name>graph</name><operator>-&gt;</operator><name>graph</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>ifilter_has_all_input_formats</name><argument_list>(<argument><expr><name><name>ost</name><operator>-&gt;</operator><name>filter</name><operator>-&gt;</operator><name>graph</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>configure_filtergraph</name><argument_list>(<argument><expr><name><name>ost</name><operator>-&gt;</operator><name>filter</name><operator>-&gt;</operator><name>graph</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Error reinitializing filters!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ost</name><operator>-&gt;</operator><name>filter</name></name> <operator>&amp;&amp;</operator> <name><name>ost</name><operator>-&gt;</operator><name>filter</name><operator>-&gt;</operator><name>graph</name><operator>-&gt;</operator><name>graph</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ost</name><operator>-&gt;</operator><name>initialized</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>error</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>init_output_stream</name><argument_list>(<argument><expr><name>ost</name></expr></argument>, <argument><expr><name>error</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>error</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Error initializing output stream %d:%d -- %s\n"</literal></expr></argument>,

<argument><expr><name><name>ost</name><operator>-&gt;</operator><name>file_index</name></name></expr></argument>, <argument><expr><name><name>ost</name><operator>-&gt;</operator><name>index</name></name></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>exit_program</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>transcode_from_filter</name><argument_list>(<argument><expr><name><name>ost</name><operator>-&gt;</operator><name>filter</name><operator>-&gt;</operator><name>graph</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ist</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ist</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>ost</name><operator>-&gt;</operator><name>filter</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ost</name><operator>-&gt;</operator><name>filter</name><operator>-&gt;</operator><name>graph</name><operator>-&gt;</operator><name>nb_inputs</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>InputFilter</name> <modifier>*</modifier></type><name>ifilter</name> <init>= <expr><name><name>ost</name><operator>-&gt;</operator><name>filter</name><operator>-&gt;</operator><name>graph</name><operator>-&gt;</operator><name>inputs</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ifilter</name><operator>-&gt;</operator><name>ist</name><operator>-&gt;</operator><name>got_output</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>input_files</name><index>[<expr><name><name>ifilter</name><operator>-&gt;</operator><name>ist</name><operator>-&gt;</operator><name>file_index</name></name></expr>]</index></name><operator>-&gt;</operator><name>eof_reached</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ist</name> <operator>=</operator> <name><name>ifilter</name><operator>-&gt;</operator><name>ist</name></name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ist</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ost</name><operator>-&gt;</operator><name>inputs_done</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name><name>ost</name><operator>-&gt;</operator><name>source_index</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ist</name> <operator>=</operator> <name><name>input_streams</name><index>[<expr><name><name>ost</name><operator>-&gt;</operator><name>source_index</name></name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>process_input</name><argument_list>(<argument><expr><name><name>ist</name><operator>-&gt;</operator><name>file_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>EAGAIN</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>input_files</name><index>[<expr><name><name>ist</name><operator>-&gt;</operator><name>file_index</name></name></expr>]</index></name><operator>-&gt;</operator><name>eagain</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ost</name><operator>-&gt;</operator><name>unavailable</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><ternary><condition><expr><name>ret</name> <operator>==</operator> <name>AVERROR_EOF</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name>ret</name></expr></else></ternary></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>reap_filters</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>transcode</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>os</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>OutputStream</name> <modifier>*</modifier></type><name>ost</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>InputStream</name> <modifier>*</modifier></type><name>ist</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>timer_start</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>total_packets_written</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>transcode_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>stdin_interaction</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"Press [q] to stop, [?] for help\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>timer_start</name> <operator>=</operator> <call><name>av_gettime_relative</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_THREADS</name></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>init_input_threads</name><argument_list>()</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<while>while <condition>(<expr><operator>!</operator><name>received_sigterm</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int64_t</name></type> <name>cur_time</name><init>= <expr><call><name>av_gettime_relative</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>stdin_interaction</name></expr>)</condition><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><call><name>check_keyboard_interaction</name><argument_list>(<argument><expr><name>cur_time</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>need_output</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_VERBOSE</name></expr></argument>, <argument><expr><literal type="string">"No more output streams to write to, finishing.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>transcode_step</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>ret</name> <operator>!=</operator> <name>AVERROR_EOF</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Error while filtering: %s\n"</literal></expr></argument>, <argument><expr><call><name>av_err2str</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>print_report</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>timer_start</name></expr></argument>, <argument><expr><name>cur_time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_THREADS</name></expr></cpp:if>

<expr_stmt><expr><call><name>free_input_threads</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nb_input_streams</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>ist</name> <operator>=</operator> <name><name>input_streams</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>input_files</name><index>[<expr><name><name>ist</name><operator>-&gt;</operator><name>file_index</name></name></expr>]</index></name><operator>-&gt;</operator><name>eof_reached</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>process_input_packet</name><argument_list>(<argument><expr><name>ist</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>flush_encoders</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>term_exit</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nb_output_files</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>os</name> <operator>=</operator> <name><name>output_files</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>ctx</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>output_files</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>header_written</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"Nothing was written into output file %d (%s), because "</literal>

<literal type="string">"at least one of its streams received no packets.\n"</literal></expr></argument>,

<argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>os</name><operator>-&gt;</operator><name>url</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>av_write_trailer</name><argument_list>(<argument><expr><name>os</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Error writing trailer of %s: %s\n"</literal></expr></argument>, <argument><expr><name><name>os</name><operator>-&gt;</operator><name>url</name></name></expr></argument>, <argument><expr><call><name>av_err2str</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>exit_on_error</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>exit_program</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>print_report</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>timer_start</name></expr></argument>, <argument><expr><call><name>av_gettime_relative</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nb_output_streams</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>ost</name> <operator>=</operator> <name><name>output_streams</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ost</name><operator>-&gt;</operator><name>encoding_needed</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ost</name><operator>-&gt;</operator><name>enc_ctx</name><operator>-&gt;</operator><name>stats_in</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>total_packets_written</name> <operator>+=</operator> <name><name>ost</name><operator>-&gt;</operator><name>packets_written</name></name></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>total_packets_written</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>abort_on_flags</name> <operator>&amp;</operator> <name>ABORT_ON_FLAG_EMPTY_OUTPUT</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_FATAL</name></expr></argument>, <argument><expr><literal type="string">"Empty output\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>exit_program</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nb_input_streams</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>ist</name> <operator>=</operator> <name><name>input_streams</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ist</name><operator>-&gt;</operator><name>decoding_needed</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>avcodec_close</name><argument_list>(<argument><expr><name><name>ist</name><operator>-&gt;</operator><name>dec_ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ist</name><operator>-&gt;</operator><name>hwaccel_uninit</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name><name>ist</name><operator>-&gt;</operator><name>hwaccel_uninit</name></name><argument_list>(<argument><expr><name><name>ist</name><operator>-&gt;</operator><name>dec_ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>av_buffer_unref</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hw_device_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>hw_device_free_all</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<label><name>fail</name>:</label>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_THREADS</name></expr></cpp:if>

<expr_stmt><expr><call><name>free_input_threads</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>output_streams</name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nb_output_streams</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>ost</name> <operator>=</operator> <name><name>output_streams</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ost</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>ost</name><operator>-&gt;</operator><name>logfile</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>fclose</name><argument_list>(<argument><expr><name><name>ost</name><operator>-&gt;</operator><name>logfile</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"Error closing logfile, loss of information possible: %s\n"</literal></expr></argument>,

<argument><expr><call><name>av_err2str</name><argument_list>(<argument><expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>ost</name><operator>-&gt;</operator><name>logfile</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ost</name><operator>-&gt;</operator><name>forced_kf_pts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ost</name><operator>-&gt;</operator><name>apad</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ost</name><operator>-&gt;</operator><name>disposition</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_dict_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ost</name><operator>-&gt;</operator><name>encoder_opts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_dict_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ost</name><operator>-&gt;</operator><name>sws_dict</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_dict_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ost</name><operator>-&gt;</operator><name>swr_opts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_dict_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ost</name><operator>-&gt;</operator><name>resample_opts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>BenchmarkTimeStamps</name></type> <name>get_benchmark_time_stamps</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>BenchmarkTimeStamps</name></type> <name>time_stamps</name> <init>= <expr><block>{ <macro><name>av_gettime_relative</name><argument_list>()</argument_list></macro> }</block></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_GETRUSAGE</name></expr></cpp:if>

<decl_stmt><decl><type><name><name>struct</name> <name>rusage</name></name></type> <name>rusage</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>getrusage</name><argument_list>(<argument><expr><name>RUSAGE_SELF</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rusage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>time_stamps</name><operator>.</operator><name>user_usec</name></name> <operator>=</operator>

<operator>(</operator><name><name>rusage</name><operator>.</operator><name>ru_utime</name><operator>.</operator><name>tv_sec</name></name> <operator>*</operator> <literal type="number">1000000LL</literal><operator>)</operator> <operator>+</operator> <name><name>rusage</name><operator>.</operator><name>ru_utime</name><operator>.</operator><name>tv_usec</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>time_stamps</name><operator>.</operator><name>sys_usec</name></name> <operator>=</operator>

<operator>(</operator><name><name>rusage</name><operator>.</operator><name>ru_stime</name><operator>.</operator><name>tv_sec</name></name> <operator>*</operator> <literal type="number">1000000LL</literal><operator>)</operator> <operator>+</operator> <name><name>rusage</name><operator>.</operator><name>ru_stime</name><operator>.</operator><name>tv_usec</name></name></expr>;</expr_stmt>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>HAVE_GETPROCESSTIMES</name></expr></cpp:elif>

<decl_stmt><decl><type><name>HANDLE</name></type> <name>proc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>FILETIME</name></type> <name>c</name></decl>, <decl><type ref="prev"/><name>e</name></decl>, <decl><type ref="prev"/><name>k</name></decl>, <decl><type ref="prev"/><name>u</name></decl>;</decl_stmt>

<expr_stmt><expr><name>proc</name> <operator>=</operator> <call><name>GetCurrentProcess</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GetProcessTimes</name><argument_list>(<argument><expr><name>proc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>c</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>e</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>k</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>u</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>time_stamps</name><operator>.</operator><name>user_usec</name></name> <operator>=</operator>

<operator>(</operator><operator>(</operator><name>int64_t</name><operator>)</operator><name><name>u</name><operator>.</operator><name>dwHighDateTime</name></name> <operator>&lt;&lt;</operator> <literal type="number">32</literal> <operator>|</operator> <name><name>u</name><operator>.</operator><name>dwLowDateTime</name></name><operator>)</operator> <operator>/</operator> <literal type="number">10</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>time_stamps</name><operator>.</operator><name>sys_usec</name></name> <operator>=</operator>

<operator>(</operator><operator>(</operator><name>int64_t</name><operator>)</operator><name><name>k</name><operator>.</operator><name>dwHighDateTime</name></name> <operator>&lt;&lt;</operator> <literal type="number">32</literal> <operator>|</operator> <name><name>k</name><operator>.</operator><name>dwLowDateTime</name></name><operator>)</operator> <operator>/</operator> <literal type="number">10</literal></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><name><name>time_stamps</name><operator>.</operator><name>user_usec</name></name> <operator>=</operator> <name><name>time_stamps</name><operator>.</operator><name>sys_usec</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>time_stamps</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int64_t</name></type> <name>getmaxrss</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_GETRUSAGE</name> <operator>&amp;&amp;</operator> <name>HAVE_STRUCT_RUSAGE_RU_MAXRSS</name></expr></cpp:if>

<decl_stmt><decl><type><name><name>struct</name> <name>rusage</name></name></type> <name>rusage</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>getrusage</name><argument_list>(<argument><expr><name>RUSAGE_SELF</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rusage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>int64_t</name><operator>)</operator><name><name>rusage</name><operator>.</operator><name>ru_maxrss</name></name> <operator>*</operator> <literal type="number">1024</literal></expr>;</return>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>HAVE_GETPROCESSMEMORYINFO</name></expr></cpp:elif>

<decl_stmt><decl><type><name>HANDLE</name></type> <name>proc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PROCESS_MEMORY_COUNTERS</name></type> <name>memcounters</name></decl>;</decl_stmt>

<expr_stmt><expr><name>proc</name> <operator>=</operator> <call><name>GetCurrentProcess</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>memcounters</name><operator>.</operator><name>cb</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>memcounters</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GetProcessMemoryInfo</name><argument_list>(<argument><expr><name>proc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>memcounters</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>memcounters</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name><name>memcounters</name><operator>.</operator><name>PeakPagefileUsage</name></name></expr>;</return>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>log_callback_null</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>level</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>vl</name></decl></parameter>)</parameter_list>

<block>{<block_content>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>BenchmarkTimeStamps</name></type> <name>ti</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>init_dynload</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>register_exit</name><argument_list>(<argument><expr><name>ffmpeg_cleanup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>setvbuf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>,<argument><expr><name>_IONBF</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>av_log_set_flags</name><argument_list>(<argument><expr><name>AV_LOG_SKIP_REPEATED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>parse_loglevel</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>argc</name><operator>&gt;</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"-d"</literal></expr></argument>)</argument_list></call></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name>run_as_daemon</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log_set_callback</name><argument_list>(<argument><expr><name>log_callback_null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>argc</name><operator>--</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>argv</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_AVDEVICE</name></expr></cpp:if>

<expr_stmt><expr><call><name>avdevice_register_all</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>avformat_network_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>show_banner</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ffmpeg_parse_options</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>exit_program</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>nb_output_files</name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>nb_input_files</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>show_usage</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Use -h to get full help or, even better, run 'man %s'\n"</literal></expr></argument>, <argument><expr><name>program_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>exit_program</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>nb_output_files</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_FATAL</name></expr></argument>, <argument><expr><literal type="string">"At least one output file must be specified\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>exit_program</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nb_output_files</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>output_files</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name><name>ctx</name><operator>-&gt;</operator><name>oformat</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="string">"rtp"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>want_sdp</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>current_time</name> <operator>=</operator> <name>ti</name> <operator>=</operator> <call><name>get_benchmark_time_stamps</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>transcode</name><argument_list>()</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>exit_program</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>do_benchmark</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int64_t</name></type> <name>utime</name></decl>, <decl><type ref="prev"/><name>stime</name></decl>, <decl><type ref="prev"/><name>rtime</name></decl>;</decl_stmt>

<expr_stmt><expr><name>current_time</name> <operator>=</operator> <call><name>get_benchmark_time_stamps</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>utime</name> <operator>=</operator> <name><name>current_time</name><operator>.</operator><name>user_usec</name></name> <operator>-</operator> <name><name>ti</name><operator>.</operator><name>user_usec</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>stime</name> <operator>=</operator> <name><name>current_time</name><operator>.</operator><name>sys_usec</name></name> <operator>-</operator> <name><name>ti</name><operator>.</operator><name>sys_usec</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>rtime</name> <operator>=</operator> <name><name>current_time</name><operator>.</operator><name>real_usec</name></name> <operator>-</operator> <name><name>ti</name><operator>.</operator><name>real_usec</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>,

<argument><expr><literal type="string">"bench: utime=%0.3fs stime=%0.3fs rtime=%0.3fs\n"</literal></expr></argument>,

<argument><expr><name>utime</name> <operator>/</operator> <literal type="number">1000000.0</literal></expr></argument>, <argument><expr><name>stime</name> <operator>/</operator> <literal type="number">1000000.0</literal></expr></argument>, <argument><expr><name>rtime</name> <operator>/</operator> <literal type="number">1000000.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"%"</literal><name>PRIu64</name><literal type="string">" frames successfully decoded, %"</literal><name>PRIu64</name><literal type="string">" decoding errors\n"</literal></expr></argument>,

<argument><expr><name><name>decode_error_stat</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>decode_error_stat</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>decode_error_stat</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>decode_error_stat</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator> <operator>*</operator> <name>max_error_rate</name> <operator>&lt;</operator> <name><name>decode_error_stat</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>exit_program</name><argument_list>(<argument><expr><literal type="number">69</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>exit_program</name><argument_list>(<argument><expr><ternary><condition><expr><name>received_nb_signals</name></expr> ?</condition><then> <expr><literal type="number">255</literal></expr> </then><else>: <expr><name>main_return_code</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>main_return_code</name></expr>;</return>

</block_content>}</block></function>

</unit>
