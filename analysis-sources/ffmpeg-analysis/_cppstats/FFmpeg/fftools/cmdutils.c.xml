<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\fftools\cmdutils.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"compat/va_copy.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavformat/avformat.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavfilter/avfilter.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavdevice/avdevice.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavresample/avresample.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libswscale/swscale.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libswresample/swresample.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libpostproc/postprocess.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/attributes.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avassert.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avstring.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/bprint.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/display.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/mathematics.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/imgutils.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/libm.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/parseutils.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/pixdesc.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/eval.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/dict.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/opt.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/cpu.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/ffversion.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/version.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cmdutils.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_NETWORK</name></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavformat/network.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_SYS_RESOURCE_H</name></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/time.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/resource.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;windows.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>init_report</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>env</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>AVDictionary</name> <modifier>*</modifier></type><name>sws_dict</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVDictionary</name> <modifier>*</modifier></type><name>swr_opts</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVDictionary</name> <modifier>*</modifier></type><name>format_opts</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>codec_opts</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>resample_opts</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>FILE</name> <modifier>*</modifier></type><name>report_file</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>report_file_level</name> <init>= <expr><name>AV_LOG_DEBUG</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>hide_banner</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<enum>enum <name>show_muxdemuxers</name> <block>{

<decl><name>SHOW_DEFAULT</name></decl>,

<decl><name>SHOW_DEMUXERS</name></decl>,

<decl><name>SHOW_MUXERS</name></decl>,

}</block>;</enum>

<function><type><name>void</name></type> <name>init_opts</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>av_dict_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sws_dict</name></expr></argument>, <argument><expr><literal type="string">"flags"</literal></expr></argument>, <argument><expr><literal type="string">"bicubic"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>uninit_opts</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>av_dict_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>swr_opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_dict_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sws_dict</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_dict_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>format_opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_dict_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>codec_opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_dict_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>resample_opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>log_callback_help</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>level</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>vl</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>vfprintf</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>vl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>log_callback_report</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>level</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>vl</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>va_list</name></type> <name>vl2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>line</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>print_prefix</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>va_copy</name><argument_list>(<argument><expr><name>vl2</name></expr></argument>, <argument><expr><name>vl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log_default_callback</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>level</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>vl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log_format_line</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>level</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>vl2</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>print_prefix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>vl2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>report_file_level</name> <operator>&gt;=</operator> <name>level</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fputs</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><name>report_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name>report_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>init_dynload</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_SETDLLDIRECTORY</name> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><call><name>SetDllDirectory</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function_decl><type><specifier>static</specifier> <name>void</name></type> (<modifier>*</modifier><name>program_exit</name>)<parameter_list>(<parameter><decl><type><name>int</name></type> <name>ret</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>void</name></type> <name>register_exit</name><parameter_list>(<parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>cb</name>)<parameter_list>(<parameter><decl><type><name>int</name></type> <name>ret</name></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name>program_exit</name> <operator>=</operator> <name>cb</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>exit_program</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>ret</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>program_exit</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>program_exit</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>double</name></type> <name>parse_number_or_die</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>context</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>numstr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>,

<parameter><decl><type><name>double</name></type> <name>min</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>max</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>tail</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>error</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>d</name> <init>= <expr><call><name>av_strtod</name><argument_list>(<argument><expr><name>numstr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tail</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>tail</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>error</name> <operator>=</operator> <literal type="string">"Expected number for %s but found: %s\n"</literal></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>d</name> <argument_list type="generic">&lt; <argument><expr><name>min</name> <operator>||</operator> <name>d</name></expr></argument> &gt;</argument_list></name> <name>max</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>error</name> <operator>=</operator> <literal type="string">"The value for %s was %s which is not within %f - %f\n"</literal></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>type</name> <operator>==</operator> <name>OPT_INT64</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><name>d</name> <operator>!=</operator> <name>d</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>error</name> <operator>=</operator> <literal type="string">"Expected int64 for %s but found %s\n"</literal></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>type</name> <operator>==</operator> <name>OPT_INT</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>int</name><operator>)</operator><name>d</name> <operator>!=</operator> <name>d</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>error</name> <operator>=</operator> <literal type="string">"Expected int for %s but found %s\n"</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<return>return <expr><name>d</name></expr>;</return></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_FATAL</name></expr></argument>, <argument><expr><name>error</name></expr></argument>, <argument><expr><name>context</name></expr></argument>, <argument><expr><name>numstr</name></expr></argument>, <argument><expr><name>min</name></expr></argument>, <argument><expr><name>max</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>exit_program</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int64_t</name></type> <name>parse_time_or_die</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>context</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>timestr</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>is_duration</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int64_t</name></type> <name>us</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>av_parse_time</name><argument_list>(<argument><expr><operator>&amp;</operator><name>us</name></expr></argument>, <argument><expr><name>timestr</name></expr></argument>, <argument><expr><name>is_duration</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_FATAL</name></expr></argument>, <argument><expr><literal type="string">"Invalid %s specification for %s: %s\n"</literal></expr></argument>,

<argument><expr><ternary><condition><expr><name>is_duration</name></expr> ?</condition><then> <expr><literal type="string">"duration"</literal></expr> </then><else>: <expr><literal type="string">"date"</literal></expr></else></ternary></expr></argument>, <argument><expr><name>context</name></expr></argument>, <argument><expr><name>timestr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>exit_program</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>us</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>show_help_options</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>OptionDef</name> <modifier>*</modifier></type><name>options</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>msg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>req_flags</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>rej_flags</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>alt_flags</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>OptionDef</name> <modifier>*</modifier></type><name>po</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>first</name></decl>;</decl_stmt>

<expr_stmt><expr><name>first</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>po</name> <operator>=</operator> <name>options</name></expr>;</init> <condition><expr><name><name>po</name><operator>-&gt;</operator><name>name</name></name></expr>;</condition> <incr><expr><name>po</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name><name>po</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>req_flags</name><operator>)</operator> <operator>!=</operator> <name>req_flags</name><operator>)</operator> <operator>||</operator>

<operator>(</operator><name>alt_flags</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>po</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>alt_flags</name><operator>)</operator><operator>)</operator> <operator>||</operator>

<operator>(</operator><name><name>po</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>rej_flags</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>first</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>first</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_strlcpy</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>po</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>po</name><operator>-&gt;</operator><name>argname</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_strlcat</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_strlcat</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>po</name><operator>-&gt;</operator><name>argname</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"-%-17s %s\n"</literal></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>po</name><operator>-&gt;</operator><name>help</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>show_help_children</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>AVClass</name> <modifier>*</modifier></type><name>class</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>AVClass</name> <modifier>*</modifier></type><name>child</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>class</name><operator>-&gt;</operator><name>option</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_opt_show2</name><argument_list>(<argument><expr><operator>&amp;</operator><name>class</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><name>child</name> <operator>=</operator> <call><name>av_opt_child_class_next</name><argument_list>(<argument><expr><name>class</name></expr></argument>, <argument><expr><name>child</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>show_help_children</name><argument_list>(<argument><expr><name>child</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>OptionDef</name> <modifier>*</modifier></type><name>find_option</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>OptionDef</name> <modifier>*</modifier></type><name>po</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>strchr</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="char">':'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><ternary><condition><expr><name>p</name></expr> ?</condition><then> <expr><name>p</name> <operator>-</operator> <name>name</name></expr> </then><else>: <expr><call><name>strlen</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name><name>po</name><operator>-&gt;</operator><name>name</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strncmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>po</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>po</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>len</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>po</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<return>return <expr><name>po</name></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_COMMANDLINETOARGVW</name> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;shellapi.h&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name><modifier>*</modifier><modifier>*</modifier></type> <name>win32_argv_utf8</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>win32_argc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>prepare_app_arguments</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>argc_ptr</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier><modifier>*</modifier></type><name>argv_ptr</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>argstr_flat</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>wchar_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv_w</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>buffsize</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>offset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>win32_argv_utf8</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>argc_ptr</name> <operator>=</operator> <name>win32_argc</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>argv_ptr</name> <operator>=</operator> <name>win32_argv_utf8</name></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>win32_argc</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>argv_w</name> <operator>=</operator> <call><name>CommandLineToArgvW</name><argument_list>(<argument><expr><call><name>GetCommandLineW</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>win32_argc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>win32_argc</name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <operator>!</operator><name>argv_w</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>win32_argc</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name>buffsize</name> <operator>+=</operator> <call><name>WideCharToMultiByte</name><argument_list>(<argument><expr><name>CP_UTF8</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>argv_w</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>win32_argv_utf8</name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name>win32_argc</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <name>buffsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>argstr_flat</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>win32_argv_utf8</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name>win32_argc</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>win32_argv_utf8</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>LocalFree</name><argument_list>(<argument><expr><name>argv_w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>win32_argc</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>win32_argv_utf8</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>&amp;</operator><name><name>argstr_flat</name><index>[<expr><name>offset</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>offset</name> <operator>+=</operator> <call><name>WideCharToMultiByte</name><argument_list>(<argument><expr><name>CP_UTF8</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>argv_w</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>argstr_flat</name><index>[<expr><name>offset</name></expr>]</index></name></expr></argument>,

<argument><expr><name>buffsize</name> <operator>-</operator> <name>offset</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>win32_argv_utf8</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LocalFree</name><argument_list>(<argument><expr><name>argv_w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>argc_ptr</name> <operator>=</operator> <name>win32_argc</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>argv_ptr</name> <operator>=</operator> <name>win32_argv_utf8</name></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>prepare_app_arguments</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>argc_ptr</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier><modifier>*</modifier></type><name>argv_ptr</name></decl></parameter>)</parameter_list>

<block>{<block_content>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<function><type><specifier>static</specifier> <name>int</name></type> <name>write_option</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>optctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>OptionDef</name> <modifier>*</modifier></type><name>po</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>opt</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><ternary><condition><expr><name><name>po</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <operator>(</operator><name>OPT_OFFSET</name> <operator>|</operator> <name>OPT_SPEC</name><operator>)</operator></expr> ?</condition><then>

<expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><name>optctx</name> <operator>+</operator> <name><name>po</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>off</name></name></expr> </then><else>: <expr><name><name>po</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>dst_ptr</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>dstcount</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>po</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>OPT_SPEC</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>SpecifierOpt</name> <modifier>*</modifier><modifier>*</modifier></type><name>so</name> <init>= <expr><name>dst</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>strchr</name><argument_list>(<argument><expr><name>opt</name></expr></argument>, <argument><expr><literal type="char">':'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name></decl>;</decl_stmt>

<expr_stmt><expr><name>dstcount</name> <operator>=</operator> <operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>so</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>so</name> <operator>=</operator> <call><name>grow_array</name><argument_list>(<argument><expr><operator>*</operator><name>so</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><operator>*</operator><name>so</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>dstcount</name></expr></argument>, <argument><expr><operator>*</operator><name>dstcount</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>av_strdup</name><argument_list>(<argument><expr><ternary><condition><expr><name>p</name></expr> ?</condition><then> <expr><name>p</name> <operator>+</operator> <literal type="number">1</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>str</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>so</name><operator>)</operator><index>[<expr><operator>*</operator><name>dstcount</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index><operator>.</operator><name>specifier</name> <operator>=</operator> <name>str</name></expr>;</expr_stmt>

<expr_stmt><expr><name>dst</name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><operator>*</operator><name>so</name><operator>)</operator><index>[<expr><operator>*</operator><name>dstcount</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index><operator>.</operator><name>u</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>po</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>OPT_STRING</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name></decl>;</decl_stmt>

<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>av_strdup</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>str</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>*</operator><operator>)</operator><name>dst</name> <operator>=</operator> <name>str</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>po</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>OPT_BOOL</name> <operator>||</operator> <name><name>po</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>OPT_INT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>=</operator> <call><name>parse_number_or_die</name><argument_list>(<argument><expr><name>opt</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><name>OPT_INT64</name></expr></argument>, <argument><expr><name>INT_MIN</name></expr></argument>, <argument><expr><name>INT_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>po</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>OPT_INT64</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><operator>(</operator><name>int64_t</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>=</operator> <call><name>parse_number_or_die</name><argument_list>(<argument><expr><name>opt</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><name>OPT_INT64</name></expr></argument>, <argument><expr><name>INT64_MIN</name></expr></argument>, <argument><expr><name>INT64_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>po</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>OPT_TIME</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><operator>(</operator><name>int64_t</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>=</operator> <call><name>parse_time_or_die</name><argument_list>(<argument><expr><name>opt</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>po</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>OPT_FLOAT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>=</operator> <call><name>parse_number_or_die</name><argument_list>(<argument><expr><name>opt</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><name>OPT_FLOAT</name></expr></argument>, <argument><expr><operator>-</operator><name>INFINITY</name></expr></argument>, <argument><expr><name>INFINITY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>po</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>OPT_DOUBLE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><operator>(</operator><name>double</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>=</operator> <call><name>parse_number_or_die</name><argument_list>(<argument><expr><name>opt</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><name>OPT_DOUBLE</name></expr></argument>, <argument><expr><operator>-</operator><name>INFINITY</name></expr></argument>, <argument><expr><name>INFINITY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>po</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>func_arg</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name><name>po</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>func_arg</name></name><argument_list>(<argument><expr><name>optctx</name></expr></argument>, <argument><expr><name>opt</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"Failed to set value '%s' for option '%s': %s\n"</literal></expr></argument>,

<argument><expr><name>arg</name></expr></argument>, <argument><expr><name>opt</name></expr></argument>, <argument><expr><call><name>av_err2str</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>po</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>OPT_EXIT</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>exit_program</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>parse_option</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>optctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>opt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>OptionDef</name> <modifier>*</modifier></type><name>options</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>OptionDef</name> <modifier>*</modifier></type><name>po</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name>po</name> <operator>=</operator> <call><name>find_option</name><argument_list>(<argument><expr><name>options</name></expr></argument>, <argument><expr><name>opt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>po</name><operator>-&gt;</operator><name>name</name></name> <operator>&amp;&amp;</operator> <name><name>opt</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'n'</literal> <operator>&amp;&amp;</operator> <name><name>opt</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'o'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>po</name> <operator>=</operator> <call><name>find_option</name><argument_list>(<argument><expr><name>options</name></expr></argument>, <argument><expr><name>opt</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>po</name><operator>-&gt;</operator><name>name</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>po</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>OPT_BOOL</name><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>arg</name> <operator>=</operator> <literal type="string">"0"</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>po</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>OPT_BOOL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>arg</name> <operator>=</operator> <literal type="string">"1"</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>po</name><operator>-&gt;</operator><name>name</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>po</name> <operator>=</operator> <call><name>find_option</name><argument_list>(<argument><expr><name>options</name></expr></argument>, <argument><expr><literal type="string">"default"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>po</name><operator>-&gt;</operator><name>name</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Unrecognized option '%s'\n"</literal></expr></argument>, <argument><expr><name>opt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>po</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>HAS_ARG</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>arg</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Missing argument for option '%s'\n"</literal></expr></argument>, <argument><expr><name>opt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>write_option</name><argument_list>(<argument><expr><name>optctx</name></expr></argument>, <argument><expr><name>po</name></expr></argument>, <argument><expr><name>opt</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><operator>!</operator><operator>!</operator><operator>(</operator><name><name>po</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>HAS_ARG</name><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>parse_options</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>optctx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>OptionDef</name> <modifier>*</modifier></type><name>options</name></decl></parameter>,

<parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>parse_arg_function</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>opt</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>optindex</name></decl>, <decl><type ref="prev"/><name>handleoptions</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>prepare_app_arguments</name><argument_list>(<argument><expr><operator>&amp;</operator><name>argc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>optindex</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<while>while <condition>(<expr><name>optindex</name> <operator>&lt;</operator> <name>argc</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>opt</name> <operator>=</operator> <name><name>argv</name><index>[<expr><name>optindex</name><operator>++</operator></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>handleoptions</name> <operator>&amp;&amp;</operator> <name><name>opt</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'-'</literal> <operator>&amp;&amp;</operator> <name><name>opt</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>opt</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'-'</literal> <operator>&amp;&amp;</operator> <name><name>opt</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>handleoptions</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>opt</name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>parse_option</name><argument_list>(<argument><expr><name>optctx</name></expr></argument>, <argument><expr><name>opt</name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><name>optindex</name></expr>]</index></name></expr></argument>, <argument><expr><name>options</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>exit_program</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>optindex</name> <operator>+=</operator> <name>ret</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>parse_arg_function</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>parse_arg_function</name><argument_list>(<argument><expr><name>optctx</name></expr></argument>, <argument><expr><name>opt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></while>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>parse_optgroup</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>optctx</name></decl></parameter>, <parameter><decl><type><name>OptionGroup</name> <modifier>*</modifier></type><name>g</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Parsing a group of options: %s %s.\n"</literal></expr></argument>,

<argument><expr><name><name>g</name><operator>-&gt;</operator><name>group_def</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>g</name><operator>-&gt;</operator><name>arg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>g</name><operator>-&gt;</operator><name>nb_opts</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>Option</name> <modifier>*</modifier></type><name>o</name> <init>= <expr><operator>&amp;</operator><name><name>g</name><operator>-&gt;</operator><name>opts</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>g</name><operator>-&gt;</operator><name>group_def</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;&amp;</operator>

<operator>!</operator><operator>(</operator><name><name>g</name><operator>-&gt;</operator><name>group_def</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name><name>o</name><operator>-&gt;</operator><name>opt</name><operator>-&gt;</operator><name>flags</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Option %s (%s) cannot be applied to "</literal>

<literal type="string">"%s %s -- you are trying to apply an input option to an "</literal>

<literal type="string">"output file or vice versa. Move this option before the "</literal>

<literal type="string">"file it belongs to.\n"</literal></expr></argument>, <argument><expr><name><name>o</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><name><name>o</name><operator>-&gt;</operator><name>opt</name><operator>-&gt;</operator><name>help</name></name></expr></argument>,

<argument><expr><name><name>g</name><operator>-&gt;</operator><name>group_def</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>g</name><operator>-&gt;</operator><name>arg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Applying option %s (%s) with argument %s.\n"</literal></expr></argument>,

<argument><expr><name><name>o</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><name><name>o</name><operator>-&gt;</operator><name>opt</name><operator>-&gt;</operator><name>help</name></name></expr></argument>, <argument><expr><name><name>o</name><operator>-&gt;</operator><name>val</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>write_option</name><argument_list>(<argument><expr><name>optctx</name></expr></argument>, <argument><expr><name><name>o</name><operator>-&gt;</operator><name>opt</name></name></expr></argument>, <argument><expr><name><name>o</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><name><name>o</name><operator>-&gt;</operator><name>val</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Successfully parsed a group of options.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>locate_option</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>OptionDef</name> <modifier>*</modifier></type><name>options</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>optname</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>OptionDef</name> <modifier>*</modifier></type><name>po</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>argc</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cur_opt</name> <init>= <expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>cur_opt</name><operator>++</operator> <operator>!=</operator> <literal type="char">'-'</literal></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name>po</name> <operator>=</operator> <call><name>find_option</name><argument_list>(<argument><expr><name>options</name></expr></argument>, <argument><expr><name>cur_opt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>po</name><operator>-&gt;</operator><name>name</name></name> <operator>&amp;&amp;</operator> <name><name>cur_opt</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'n'</literal> <operator>&amp;&amp;</operator> <name><name>cur_opt</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'o'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>po</name> <operator>=</operator> <call><name>find_option</name><argument_list>(<argument><expr><name>options</name></expr></argument>, <argument><expr><name>cur_opt</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>!</operator><name><name>po</name><operator>-&gt;</operator><name>name</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>cur_opt</name></expr></argument>, <argument><expr><name>optname</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator>

<operator>(</operator><name><name>po</name><operator>-&gt;</operator><name>name</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>optname</name></expr></argument>, <argument><expr><name><name>po</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>i</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>po</name><operator>-&gt;</operator><name>name</name></name> <operator>||</operator> <name><name>po</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>HAS_ARG</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>dump_argument</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name>a</name></expr>;</init> <condition><expr><operator>*</operator><name>p</name></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><operator>(</operator><operator>*</operator><name>p</name> <operator>&gt;=</operator> <literal type="char">'+'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name> <operator>&lt;=</operator> <literal type="char">':'</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>*</operator><name>p</name> <operator>&gt;=</operator> <literal type="char">'@'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name> <operator>&lt;=</operator> <literal type="char">'Z'</literal><operator>)</operator> <operator>||</operator>

<operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'_'</literal> <operator>||</operator> <operator>(</operator><operator>*</operator><name>p</name> <operator>&gt;=</operator> <literal type="char">'a'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name> <operator>&lt;=</operator> <literal type="char">'z'</literal><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>p</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fputs</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>report_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>fputc</name><argument_list>(<argument><expr><literal type="char">'"'</literal></expr></argument>, <argument><expr><name>report_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name>a</name></expr>;</init> <condition><expr><operator>*</operator><name>p</name></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'\\'</literal> <operator>||</operator> <operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'"'</literal> <operator>||</operator> <operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'$'</literal> <operator>||</operator> <operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'`'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>report_file</name></expr></argument>, <argument><expr><literal type="string">"\\%c"</literal></expr></argument>, <argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><operator>*</operator><name><name>p</name> <argument_list type="generic">&lt; <argument><expr><literal type="char">' '</literal> <operator>||</operator> <operator>*</operator><name>p</name></expr></argument> &gt;</argument_list></name> <literal type="char">'~'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>report_file</name></expr></argument>, <argument><expr><literal type="string">"\\x%02x"</literal></expr></argument>, <argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fputc</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>, <argument><expr><name>report_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>fputc</name><argument_list>(<argument><expr><literal type="char">'"'</literal></expr></argument>, <argument><expr><name>report_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>check_options</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>OptionDef</name> <modifier>*</modifier></type><name>po</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<while>while <condition>(<expr><name><name>po</name><operator>-&gt;</operator><name>name</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>po</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>OPT_PERFILE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name><name>po</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <operator>(</operator><name>OPT_INPUT</name> <operator>|</operator> <name>OPT_OUTPUT</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>po</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>parse_loglevel</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>OptionDef</name> <modifier>*</modifier></type><name>options</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>idx</name> <init>= <expr><call><name>locate_option</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><name>options</name></expr></argument>, <argument><expr><literal type="string">"loglevel"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>env</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>check_options</name><argument_list>(<argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>idx</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>idx</name> <operator>=</operator> <call><name>locate_option</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><name>options</name></expr></argument>, <argument><expr><literal type="string">"v"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>&amp;&amp;</operator> <name><name>argv</name><index>[<expr><name>idx</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>opt_loglevel</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"loglevel"</literal></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><name>idx</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>idx</name> <operator>=</operator> <call><name>locate_option</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><name>options</name></expr></argument>, <argument><expr><literal type="string">"report"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>env</name> <operator>=</operator> <call><name>getenv</name><argument_list>(<argument><expr><literal type="string">"FFREPORT"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator> <name>idx</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>init_report</name><argument_list>(<argument><expr><name>env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>report_file</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>report_file</name></expr></argument>, <argument><expr><literal type="string">"Command line:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>argc</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>dump_argument</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fputc</name><argument_list>(<argument><expr><ternary><condition><expr><name>i</name> <operator>&lt;</operator> <name>argc</name> <operator>-</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><literal type="char">' '</literal></expr> </then><else>: <expr><literal type="char">'\n'</literal></expr></else></ternary></expr></argument>, <argument><expr><name>report_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name>report_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>idx</name> <operator>=</operator> <call><name>locate_option</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><name>options</name></expr></argument>, <argument><expr><literal type="string">"hide_banner"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>idx</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>hide_banner</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>AVOption</name> <modifier>*</modifier></type><name>opt_find</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>unit</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>opt_flags</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>search_flags</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>AVOption</name> <modifier>*</modifier></type><name>o</name> <init>= <expr><call><name>av_opt_find</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>unit</name></expr></argument>, <argument><expr><name>opt_flags</name></expr></argument>, <argument><expr><name>search_flags</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>o</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>o</name><operator>-&gt;</operator><name>flags</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>o</name></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLAGS</name></cpp:macro> <cpp:value>(o-&gt;type == AV_OPT_TYPE_FLAGS &amp;&amp; (arg[0]=='-' || arg[0]=='+')) ? AV_DICT_APPEND : 0</cpp:value></cpp:define>

<function><type><name>int</name></type> <name>opt_default</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>optctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>opt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>AVOption</name> <modifier>*</modifier></type><name>o</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>consumed</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>opt_stripped</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>AVClass</name> <modifier>*</modifier></type><name>cc</name> <init>= <expr><call><name>avcodec_get_class</name><argument_list>()</argument_list></call></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>fc</name> <init>= <expr><call><name>avformat_get_class</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_AVRESAMPLE</name></expr></cpp:if>

<decl_stmt><decl><type><specifier>const</specifier> <name>AVClass</name> <modifier>*</modifier></type><name>rc</name> <init>= <expr><call><name>avresample_get_class</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_SWSCALE</name></expr></cpp:if>

<decl_stmt><decl><type><specifier>const</specifier> <name>AVClass</name> <modifier>*</modifier></type><name>sc</name> <init>= <expr><call><name>sws_get_class</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_SWRESAMPLE</name></expr></cpp:if>

<decl_stmt><decl><type><specifier>const</specifier> <name>AVClass</name> <modifier>*</modifier></type><name>swr_class</name> <init>= <expr><call><name>swr_get_class</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>opt</name></expr></argument>, <argument><expr><literal type="string">"debug"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>opt</name></expr></argument>, <argument><expr><literal type="string">"fdebug"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_log_set_level</name><argument_list>(<argument><expr><name>AV_LOG_DEBUG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>p</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>opt</name></expr></argument>, <argument><expr><literal type="char">':'</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name>opt</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>opt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_strlcpy</name><argument_list>(<argument><expr><name>opt_stripped</name></expr></argument>, <argument><expr><name>opt</name></expr></argument>, <argument><expr><call><name>FFMIN</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>opt_stripped</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>p</name> <operator>-</operator> <name>opt</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>o</name> <operator>=</operator> <call><name>opt_find</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cc</name></expr></argument>, <argument><expr><name>opt_stripped</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><name>AV_OPT_SEARCH_CHILDREN</name> <operator>|</operator> <name>AV_OPT_SEARCH_FAKE_OBJ</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator>

<operator>(</operator><operator>(</operator><name><name>opt</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'v'</literal> <operator>||</operator> <name><name>opt</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'a'</literal> <operator>||</operator> <name><name>opt</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'s'</literal><operator>)</operator> <operator>&amp;&amp;</operator>

<operator>(</operator><name>o</name> <operator>=</operator> <call><name>opt_find</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cc</name></expr></argument>, <argument><expr><name>opt</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>AV_OPT_SEARCH_FAKE_OBJ</name></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_dict_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name>codec_opts</name></expr></argument>, <argument><expr><name>opt</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><name>FLAGS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>consumed</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>o</name> <operator>=</operator> <call><name>opt_find</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fc</name></expr></argument>, <argument><expr><name>opt</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><name>AV_OPT_SEARCH_CHILDREN</name> <operator>|</operator> <name>AV_OPT_SEARCH_FAKE_OBJ</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_dict_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name>format_opts</name></expr></argument>, <argument><expr><name>opt</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><name>FLAGS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>consumed</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_VERBOSE</name></expr></argument>, <argument><expr><literal type="string">"Routing option %s to both codec and muxer layer\n"</literal></expr></argument>, <argument><expr><name>opt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>consumed</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_SWSCALE</name></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>consumed</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>o</name> <operator>=</operator> <call><name>opt_find</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sc</name></expr></argument>, <argument><expr><name>opt</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><name>AV_OPT_SEARCH_CHILDREN</name> <operator>|</operator> <name>AV_OPT_SEARCH_FAKE_OBJ</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>SwsContext</name></name> <modifier>*</modifier></type><name>sws</name> <init>= <expr><call><name>sws_alloc_context</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>av_opt_set</name><argument_list>(<argument><expr><name>sws</name></expr></argument>, <argument><expr><name>opt</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>sws_freeContext</name><argument_list>(<argument><expr><name>sws</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>opt</name></expr></argument>, <argument><expr><literal type="string">"srcw"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>opt</name></expr></argument>, <argument><expr><literal type="string">"srch"</literal></expr></argument>)</argument_list></call> <operator>||</operator>

<operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>opt</name></expr></argument>, <argument><expr><literal type="string">"dstw"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>opt</name></expr></argument>, <argument><expr><literal type="string">"dsth"</literal></expr></argument>)</argument_list></call> <operator>||</operator>

<operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>opt</name></expr></argument>, <argument><expr><literal type="string">"src_format"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>opt</name></expr></argument>, <argument><expr><literal type="string">"dst_format"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Directly using swscale dimensions/format options is not supported, please use the -s or -pix_fmt options\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Error setting option %s.\n"</literal></expr></argument>, <argument><expr><name>opt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_dict_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sws_dict</name></expr></argument>, <argument><expr><name>opt</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><name>FLAGS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>consumed</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>consumed</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>opt</name></expr></argument>, <argument><expr><literal type="string">"sws_flags"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Ignoring %s %s, due to disabled swscale\n"</literal></expr></argument>, <argument><expr><name>opt</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>consumed</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_SWRESAMPLE</name></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>consumed</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>o</name><operator>=</operator><call><name>opt_find</name><argument_list>(<argument><expr><operator>&amp;</operator><name>swr_class</name></expr></argument>, <argument><expr><name>opt</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><name>AV_OPT_SEARCH_CHILDREN</name> <operator>|</operator> <name>AV_OPT_SEARCH_FAKE_OBJ</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>SwrContext</name></name> <modifier>*</modifier></type><name>swr</name> <init>= <expr><call><name>swr_alloc</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>av_opt_set</name><argument_list>(<argument><expr><name>swr</name></expr></argument>, <argument><expr><name>opt</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>swr_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>swr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Error setting option %s.\n"</literal></expr></argument>, <argument><expr><name>opt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_dict_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name>swr_opts</name></expr></argument>, <argument><expr><name>opt</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><name>FLAGS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>consumed</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_AVRESAMPLE</name></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>o</name><operator>=</operator><call><name>opt_find</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>, <argument><expr><name>opt</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><name>AV_OPT_SEARCH_CHILDREN</name> <operator>|</operator> <name>AV_OPT_SEARCH_FAKE_OBJ</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_dict_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name>resample_opts</name></expr></argument>, <argument><expr><name>opt</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><name>FLAGS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>consumed</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>consumed</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>AVERROR_OPTION_NOT_FOUND</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>match_group_separator</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>OptionGroupDef</name> <modifier>*</modifier></type><name>groups</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nb_groups</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>opt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nb_groups</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>OptionGroupDef</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>&amp;</operator><name><name>groups</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>sep</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>sep</name></name></expr></argument>, <argument><expr><name>opt</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>i</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>finish_group</name><parameter_list>(<parameter><decl><type><name>OptionParseContext</name> <modifier>*</modifier></type><name>octx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>group_idx</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>OptionGroupList</name> <modifier>*</modifier></type><name>l</name> <init>= <expr><operator>&amp;</operator><name><name>octx</name><operator>-&gt;</operator><name>groups</name><index>[<expr><name>group_idx</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>OptionGroup</name> <modifier>*</modifier></type><name>g</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>GROW_ARRAY</name><argument_list>(<argument><expr><name><name>l</name><operator>-&gt;</operator><name>groups</name></name></expr></argument>, <argument><expr><name><name>l</name><operator>-&gt;</operator><name>nb_groups</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>g</name> <operator>=</operator> <operator>&amp;</operator><name><name>l</name><operator>-&gt;</operator><name>groups</name><index>[<expr><name><name>l</name><operator>-&gt;</operator><name>nb_groups</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>g</name> <operator>=</operator> <name><name>octx</name><operator>-&gt;</operator><name>cur_group</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>arg</name></name> <operator>=</operator> <name>arg</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>group_def</name></name> <operator>=</operator> <name><name>l</name><operator>-&gt;</operator><name>group_def</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>sws_dict</name></name> <operator>=</operator> <name>sws_dict</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>swr_opts</name></name> <operator>=</operator> <name>swr_opts</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>codec_opts</name></name> <operator>=</operator> <name>codec_opts</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>format_opts</name></name> <operator>=</operator> <name>format_opts</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>resample_opts</name></name> <operator>=</operator> <name>resample_opts</name></expr>;</expr_stmt>

<expr_stmt><expr><name>codec_opts</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>format_opts</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>resample_opts</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>sws_dict</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>swr_opts</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>init_opts</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>octx</name><operator>-&gt;</operator><name>cur_group</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>octx</name><operator>-&gt;</operator><name>cur_group</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>add_opt</name><parameter_list>(<parameter><decl><type><name>OptionParseContext</name> <modifier>*</modifier></type><name>octx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>OptionDef</name> <modifier>*</modifier></type><name>opt</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>val</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>global</name> <init>= <expr><operator>!</operator><operator>(</operator><name><name>opt</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <operator>(</operator><name>OPT_PERFILE</name> <operator>|</operator> <name>OPT_SPEC</name> <operator>|</operator> <name>OPT_OFFSET</name><operator>)</operator><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>OptionGroup</name> <modifier>*</modifier></type><name>g</name> <init>= <expr><ternary><condition><expr><name>global</name></expr> ?</condition><then> <expr><operator>&amp;</operator><name><name>octx</name><operator>-&gt;</operator><name>global_opts</name></name></expr> </then><else>: <expr><operator>&amp;</operator><name><name>octx</name><operator>-&gt;</operator><name>cur_group</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>GROW_ARRAY</name><argument_list>(<argument><expr><name><name>g</name><operator>-&gt;</operator><name>opts</name></name></expr></argument>, <argument><expr><name><name>g</name><operator>-&gt;</operator><name>nb_opts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>opts</name><index>[<expr><name><name>g</name><operator>-&gt;</operator><name>nb_opts</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>opt</name> <operator>=</operator> <name>opt</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>opts</name><index>[<expr><name><name>g</name><operator>-&gt;</operator><name>nb_opts</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>key</name> <operator>=</operator> <name>key</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>opts</name><index>[<expr><name><name>g</name><operator>-&gt;</operator><name>nb_opts</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>val</name> <operator>=</operator> <name>val</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>init_parse_context</name><parameter_list>(<parameter><decl><type><name>OptionParseContext</name> <modifier>*</modifier></type><name>octx</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>OptionGroupDef</name> <modifier>*</modifier></type><name>groups</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nb_groups</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>OptionGroupDef</name></type> <name>global_group</name> <init>= <expr><block>{ <expr><literal type="string">"global"</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>octx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>octx</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>octx</name><operator>-&gt;</operator><name>nb_groups</name></name> <operator>=</operator> <name>nb_groups</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>octx</name><operator>-&gt;</operator><name>groups</name></name> <operator>=</operator> <call><name>av_mallocz_array</name><argument_list>(<argument><expr><name><name>octx</name><operator>-&gt;</operator><name>nb_groups</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>octx</name><operator>-&gt;</operator><name>groups</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>octx</name><operator>-&gt;</operator><name>groups</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>exit_program</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>octx</name><operator>-&gt;</operator><name>nb_groups</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>octx</name><operator>-&gt;</operator><name>groups</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>group_def</name> <operator>=</operator> <operator>&amp;</operator><name><name>groups</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name><name>octx</name><operator>-&gt;</operator><name>global_opts</name><operator>.</operator><name>group_def</name></name> <operator>=</operator> <operator>&amp;</operator><name>global_group</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>octx</name><operator>-&gt;</operator><name>global_opts</name><operator>.</operator><name>arg</name></name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>init_opts</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>uninit_parse_context</name><parameter_list>(<parameter><decl><type><name>OptionParseContext</name> <modifier>*</modifier></type><name>octx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>octx</name><operator>-&gt;</operator><name>nb_groups</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>OptionGroupList</name> <modifier>*</modifier></type><name>l</name> <init>= <expr><operator>&amp;</operator><name><name>octx</name><operator>-&gt;</operator><name>groups</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>l</name><operator>-&gt;</operator><name>nb_groups</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>l</name><operator>-&gt;</operator><name>groups</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_dict_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>l</name><operator>-&gt;</operator><name>groups</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>codec_opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_dict_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>l</name><operator>-&gt;</operator><name>groups</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>format_opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_dict_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>l</name><operator>-&gt;</operator><name>groups</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>resample_opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_dict_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>l</name><operator>-&gt;</operator><name>groups</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>sws_dict</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_dict_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>l</name><operator>-&gt;</operator><name>groups</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>swr_opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>l</name><operator>-&gt;</operator><name>groups</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>octx</name><operator>-&gt;</operator><name>groups</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>octx</name><operator>-&gt;</operator><name>cur_group</name><operator>.</operator><name>opts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>octx</name><operator>-&gt;</operator><name>global_opts</name><operator>.</operator><name>opts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>uninit_opts</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>split_commandline</name><parameter_list>(<parameter><decl><type><name>OptionParseContext</name> <modifier>*</modifier></type><name>octx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name><name>argv</name><index>[]</index></name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>OptionDef</name> <modifier>*</modifier></type><name>options</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>OptionGroupDef</name> <modifier>*</modifier></type><name>groups</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nb_groups</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>optindex</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>dashdash</name> <init>= <expr><operator>-</operator><literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>prepare_app_arguments</name><argument_list>(<argument><expr><operator>&amp;</operator><name>argc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>init_parse_context</name><argument_list>(<argument><expr><name>octx</name></expr></argument>, <argument><expr><name>groups</name></expr></argument>, <argument><expr><name>nb_groups</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Splitting the commandline.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><name>optindex</name> <operator>&lt;</operator> <name>argc</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>opt</name> <init>= <expr><name><name>argv</name><index>[<expr><name>optindex</name><operator>++</operator></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>arg</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>OptionDef</name> <modifier>*</modifier></type><name>po</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Reading option '%s' ..."</literal></expr></argument>, <argument><expr><name>opt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>opt</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'-'</literal> <operator>&amp;&amp;</operator> <name><name>opt</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'-'</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>opt</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>dashdash</name> <operator>=</operator> <name>optindex</name></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>opt</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'-'</literal> <operator>||</operator> <operator>!</operator><name><name>opt</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>||</operator> <name>dashdash</name><operator>+</operator><literal type="number">1</literal> <operator>==</operator> <name>optindex</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>finish_group</name><argument_list>(<argument><expr><name>octx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>opt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">" matched as %s.\n"</literal></expr></argument>, <argument><expr><name><name>groups</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>opt</name><operator>++</operator></expr>;</expr_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GET_ARG</name><parameter_list>(<parameter><type><name>arg</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { arg = argv[optindex++]; if (!arg) { av_log(NULL, AV_LOG_ERROR, "Missing argument for option '%s'.\n", opt);return AVERROR(EINVAL); } } while (0)</cpp:value></cpp:define>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>match_group_separator</name><argument_list>(<argument><expr><name>groups</name></expr></argument>, <argument><expr><name>nb_groups</name></expr></argument>, <argument><expr><name>opt</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>GET_ARG</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>finish_group</name><argument_list>(<argument><expr><name>octx</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">" matched as %s with argument '%s'.\n"</literal></expr></argument>,

<argument><expr><name><name>groups</name><index>[<expr><name>ret</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>po</name> <operator>=</operator> <call><name>find_option</name><argument_list>(<argument><expr><name>options</name></expr></argument>, <argument><expr><name>opt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>po</name><operator>-&gt;</operator><name>name</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>po</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>OPT_EXIT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>arg</name> <operator>=</operator> <name><name>argv</name><index>[<expr><name>optindex</name><operator>++</operator></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>po</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>HAS_ARG</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>GET_ARG</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>arg</name> <operator>=</operator> <literal type="string">"1"</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>add_opt</name><argument_list>(<argument><expr><name>octx</name></expr></argument>, <argument><expr><name>po</name></expr></argument>, <argument><expr><name>opt</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">" matched as option '%s' (%s) with "</literal>

<literal type="string">"argument '%s'.\n"</literal></expr></argument>, <argument><expr><name><name>po</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>po</name><operator>-&gt;</operator><name>help</name></name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>argv</name><index>[<expr><name>optindex</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>opt_default</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>opt</name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><name>optindex</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">" matched as AVOption '%s' with "</literal>

<literal type="string">"argument '%s'.\n"</literal></expr></argument>, <argument><expr><name>opt</name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><name>optindex</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>optindex</name><operator>++</operator></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>AVERROR_OPTION_NOT_FOUND</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Error parsing option '%s' "</literal>

<literal type="string">"with argument '%s'.\n"</literal></expr></argument>, <argument><expr><name>opt</name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><name>optindex</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>opt</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'n'</literal> <operator>&amp;&amp;</operator> <name><name>opt</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'o'</literal> <operator>&amp;&amp;</operator>

<operator>(</operator><name>po</name> <operator>=</operator> <call><name>find_option</name><argument_list>(<argument><expr><name>options</name></expr></argument>, <argument><expr><name>opt</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator>

<name><name>po</name><operator>-&gt;</operator><name>name</name></name> <operator>&amp;&amp;</operator> <name><name>po</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>OPT_BOOL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>add_opt</name><argument_list>(<argument><expr><name>octx</name></expr></argument>, <argument><expr><name>po</name></expr></argument>, <argument><expr><name>opt</name></expr></argument>, <argument><expr><literal type="string">"0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">" matched as option '%s' (%s) with "</literal>

<literal type="string">"argument 0.\n"</literal></expr></argument>, <argument><expr><name><name>po</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>po</name><operator>-&gt;</operator><name>help</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Unrecognized option '%s'.\n"</literal></expr></argument>, <argument><expr><name>opt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_OPTION_NOT_FOUND</name></expr>;</return>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name><name>octx</name><operator>-&gt;</operator><name>cur_group</name><operator>.</operator><name>nb_opts</name></name> <operator>||</operator> <name>codec_opts</name> <operator>||</operator> <name>format_opts</name> <operator>||</operator> <name>resample_opts</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Trailing option(s) found in the "</literal>

<literal type="string">"command: may be ignored.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Finished splitting the commandline.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>opt_cpuflags</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>optctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>opt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>flags</name> <init>= <expr><call><name>av_get_cpu_flags</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>av_parse_cpu_caps</name><argument_list>(<argument><expr><operator>&amp;</operator><name>flags</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_force_cpu_flags</name><argument_list>(<argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>opt_loglevel</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>optctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>opt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<struct><specifier>const</specifier> struct <block>{ <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>int</name></type> <name>level</name></decl>;</decl_stmt> }</block> <decl><name><name>log_levels</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><literal type="string">"quiet"</literal></expr> , <expr><name>AV_LOG_QUIET</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"panic"</literal></expr> , <expr><name>AV_LOG_PANIC</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"fatal"</literal></expr> , <expr><name>AV_LOG_FATAL</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"error"</literal></expr> , <expr><name>AV_LOG_ERROR</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"warning"</literal></expr>, <expr><name>AV_LOG_WARNING</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"info"</literal></expr> , <expr><name>AV_LOG_INFO</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"verbose"</literal></expr>, <expr><name>AV_LOG_VERBOSE</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"debug"</literal></expr> , <expr><name>AV_LOG_DEBUG</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"trace"</literal></expr> , <expr><name>AV_LOG_TRACE</name></expr> }</block></expr>,

}</block></expr></init></decl>;</struct>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>token</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>tail</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>flags</name> <init>= <expr><call><name>av_log_get_flags</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>level</name> <init>= <expr><call><name>av_log_get_level</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>cmd</name></decl>, <decl><type ref="prev"/><name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>*</operator><name>arg</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>token</name> <operator>=</operator> <name>arg</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>token</name> <operator>==</operator> <literal type="char">'+'</literal> <operator>||</operator> <operator>*</operator><name>token</name> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>cmd</name> <operator>=</operator> <operator>*</operator><name>token</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>cmd</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>i</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>cmd</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>flags</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strncmp</name><argument_list>(<argument><expr><name>token</name></expr></argument>, <argument><expr><literal type="string">"repeat"</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>cmd</name> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>AV_LOG_SKIP_REPEATED</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>flags</name> <operator>&amp;=</operator> <operator>~</operator><name>AV_LOG_SKIP_REPEATED</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>arg</name> <operator>=</operator> <name>token</name> <operator>+</operator> <literal type="number">6</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strncmp</name><argument_list>(<argument><expr><name>token</name></expr></argument>, <argument><expr><literal type="string">"level"</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>cmd</name> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>flags</name> <operator>&amp;=</operator> <operator>~</operator><name>AV_LOG_PRINT_LEVEL</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>AV_LOG_PRINT_LEVEL</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>arg</name> <operator>=</operator> <name>token</name> <operator>+</operator> <literal type="number">5</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<break>break;</break>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>arg</name></expr>)</condition> <block>{<block_content>

<goto>goto <name>end</name>;</goto>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>*</operator><name>arg</name> <operator>==</operator> <literal type="char">'+'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>arg</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><name>i</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>flags</name> <operator>=</operator> <call><name>av_log_get_flags</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>log_levels</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>log_levels</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>level</name> <operator>=</operator> <name><name>log_levels</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>level</name></expr>;</expr_stmt>

<goto>goto <name>end</name>;</goto>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>level</name> <operator>=</operator> <call><name>strtol</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tail</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>tail</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_FATAL</name></expr></argument>, <argument><expr><literal type="string">"Invalid loglevel \"%s\". "</literal>

<literal type="string">"Possible levels are numbers or:\n"</literal></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>log_levels</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_FATAL</name></expr></argument>, <argument><expr><literal type="string">"\"%s\"\n"</literal></expr></argument>, <argument><expr><name><name>log_levels</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>exit_program</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<label><name>end</name>:</label>

<expr_stmt><expr><call><name>av_log_set_flags</name><argument_list>(<argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log_set_level</name><argument_list>(<argument><expr><name>level</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>expand_filename_template</name><parameter_list>(<parameter><decl><type><name>AVBPrint</name> <modifier>*</modifier></type><name>bp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>template</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>tm</name></name> <modifier>*</modifier></type><name>tm</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>

<while>while <condition>(<expr><operator>(</operator><name>c</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>template</name><operator>++</operator><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'%'</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>c</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>template</name><operator>++</operator><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<switch>switch <condition>(<expr><name>c</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="char">'p'</literal></expr>:</case>

<expr_stmt><expr><call><name>av_bprintf</name><argument_list>(<argument><expr><name>bp</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>program_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'t'</literal></expr>:</case>

<expr_stmt><expr><call><name>av_bprintf</name><argument_list>(<argument><expr><name>bp</name></expr></argument>, <argument><expr><literal type="string">"%04d%02d%02d-%02d%02d%02d"</literal></expr></argument>,

<argument><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_year</name></name> <operator>+</operator> <literal type="number">1900</literal></expr></argument>, <argument><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_mon</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_mday</name></name></expr></argument>,

<argument><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_hour</name></name></expr></argument>, <argument><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_min</name></name></expr></argument>, <argument><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_sec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'%'</literal></expr>:</case>

<expr_stmt><expr><call><name>av_bprint_chars</name><argument_list>(<argument><expr><name>bp</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>av_bprint_chars</name><argument_list>(<argument><expr><name>bp</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></while>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>init_report</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>env</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>filename_template</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>key</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>val</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>, <decl><type ref="prev"/><name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>prog_loglevel</name></decl>, <decl><type ref="prev"/><name>envlevel</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>time_t</name></type> <name>now</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>tm</name></name> <modifier>*</modifier></type><name>tm</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVBPrint</name></type> <name>filename</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>report_file</name></expr>)</condition><block type="pseudo"><block_content> 

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>time</name><argument_list>(<argument><expr><operator>&amp;</operator><name>now</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tm</name> <operator>=</operator> <call><name>localtime</name><argument_list>(<argument><expr><operator>&amp;</operator><name>now</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><name>env</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>env</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>av_opt_get_key_value</name><argument_list>(<argument><expr><operator>&amp;</operator><name>env</name></expr></argument>, <argument><expr><literal type="string">"="</literal></expr></argument>, <argument><expr><literal type="string">":"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>count</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"Failed to parse FFREPORT environment variable: %s\n"</literal></expr></argument>,

<argument><expr><call><name>av_err2str</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>env</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>env</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>count</name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="string">"file"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>filename_template</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>filename_template</name> <operator>=</operator> <name>val</name></expr>;</expr_stmt>

<expr_stmt><expr><name>val</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="string">"level"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>tail</name></decl>;</decl_stmt>

<expr_stmt><expr><name>report_file_level</name> <operator>=</operator> <call><name>strtol</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tail</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>tail</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_FATAL</name></expr></argument>, <argument><expr><literal type="string">"Invalid report file level\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>exit_program</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>envlevel</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Unknown key '%s' in FFREPORT\n"</literal></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>av_bprint_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>filename</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>AV_BPRINT_SIZE_AUTOMATIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>expand_filename_template</name><argument_list>(<argument><expr><operator>&amp;</operator><name>filename</name></expr></argument>,

<argument><expr><call><name>av_x_if_null</name><argument_list>(<argument><expr><name>filename_template</name></expr></argument>, <argument><expr><literal type="string">"%p-%t.log"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>tm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>filename_template</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>av_bprint_is_complete</name><argument_list>(<argument><expr><operator>&amp;</operator><name>filename</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Out of memory building report file name\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>prog_loglevel</name> <operator>=</operator> <call><name>av_log_get_level</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>envlevel</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>report_file_level</name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name>report_file_level</name></expr></argument>, <argument><expr><name>prog_loglevel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>report_file</name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><name><name>filename</name><operator>.</operator><name>str</name></name></expr></argument>, <argument><expr><literal type="string">"w"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>report_file</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to open report \"%s\": %s\n"</literal></expr></argument>,

<argument><expr><name><name>filename</name><operator>.</operator><name>str</name></name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_log_set_callback</name><argument_list>(<argument><expr><name>log_callback_report</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>,

<argument><expr><literal type="string">"%s started on %04d-%02d-%02d at %02d:%02d:%02d\n"</literal>

<literal type="string">"Report written to \"%s\"\n"</literal>

<literal type="string">"Log level: %d\n"</literal></expr></argument>,

<argument><expr><name>program_name</name></expr></argument>,

<argument><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_year</name></name> <operator>+</operator> <literal type="number">1900</literal></expr></argument>, <argument><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_mon</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_mday</name></name></expr></argument>,

<argument><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_hour</name></name></expr></argument>, <argument><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_min</name></name></expr></argument>, <argument><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_sec</name></name></expr></argument>,

<argument><expr><name><name>filename</name><operator>.</operator><name>str</name></name></expr></argument>, <argument><expr><name>report_file_level</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_bprint_finalize</name><argument_list>(<argument><expr><operator>&amp;</operator><name>filename</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>opt_report</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>optctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>opt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>init_report</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>opt_max_alloc</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>optctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>opt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>tail</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>max</name></decl>;</decl_stmt>

<expr_stmt><expr><name>max</name> <operator>=</operator> <call><name>strtol</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tail</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>tail</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_FATAL</name></expr></argument>, <argument><expr><literal type="string">"Invalid max_alloc \"%s\".\n"</literal></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>exit_program</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_max_alloc</name><argument_list>(<argument><expr><name>max</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>opt_timelimit</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>optctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>opt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_SETRLIMIT</name></expr></cpp:if>

<decl_stmt><decl><type><name>int</name></type> <name>lim</name> <init>= <expr><call><name>parse_number_or_die</name><argument_list>(<argument><expr><name>opt</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><name>OPT_INT64</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>INT_MAX</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>rlimit</name></name></type> <name>rl</name> <init>= <expr><block>{ <expr><name>lim</name></expr>, <expr><name>lim</name> <operator>+</operator> <literal type="number">1</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>setrlimit</name><argument_list>(<argument><expr><name>RLIMIT_CPU</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rl</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>perror</name><argument_list>(<argument><expr><literal type="string">"setrlimit"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"-%s not implemented on this OS\n"</literal></expr></argument>, <argument><expr><name>opt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>print_error</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>err</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>errbuf</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>errbuf_ptr</name> <init>= <expr><name>errbuf</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>av_strerror</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><name>errbuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>errbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>errbuf_ptr</name> <operator>=</operator> <call><name>strerror</name><argument_list>(<argument><expr><call><name>AVUNERROR</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"%s: %s\n"</literal></expr></argument>, <argument><expr><name>filename</name></expr></argument>, <argument><expr><name>errbuf_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>warned_cfg</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INDENT</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHOW_VERSION</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHOW_CONFIG</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHOW_COPYRIGHT</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PRINT_LIB_INFO</name><parameter_list>(<parameter><type><name>libname</name></type></parameter>, <parameter><type><name>LIBNAME</name></type></parameter>, <parameter><type><name>flags</name></type></parameter>, <parameter><type><name>level</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>if (CONFIG_##LIBNAME) { const char *indent = flags &amp; INDENT? " " : ""; if (flags &amp; SHOW_VERSION) { unsigned int version = libname##_version(); av_log(NULL, level, "%slib%-11s %2d.%3d.%3d / %2d.%3d.%3d\n", indent, #libname, LIB##LIBNAME##_VERSION_MAJOR, LIB##LIBNAME##_VERSION_MINOR, LIB##LIBNAME##_VERSION_MICRO, AV_VERSION_MAJOR(version), AV_VERSION_MINOR(version),AV_VERSION_MICRO(version)); } if (flags &amp; SHOW_CONFIG) { const char *cfg = libname##_configuration(); if (strcmp(FFMPEG_CONFIGURATION, cfg)) { if (!warned_cfg) { av_log(NULL, level, "%sWARNING: library configuration mismatch\n", indent); warned_cfg = 1; } av_log(NULL, level, "%s%-11s configuration: %s\n", indent, #libname, cfg); } } }</cpp:value></cpp:define> 

<function><type><specifier>static</specifier> <name>void</name></type> <name>print_all_libs_info</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>level</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>PRINT_LIB_INFO</name><argument_list>(<argument><expr><name>avutil</name></expr></argument>, <argument><expr><name>AVUTIL</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>level</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PRINT_LIB_INFO</name><argument_list>(<argument><expr><name>avcodec</name></expr></argument>, <argument><expr><name>AVCODEC</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>level</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PRINT_LIB_INFO</name><argument_list>(<argument><expr><name>avformat</name></expr></argument>, <argument><expr><name>AVFORMAT</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>level</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PRINT_LIB_INFO</name><argument_list>(<argument><expr><name>avdevice</name></expr></argument>, <argument><expr><name>AVDEVICE</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>level</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PRINT_LIB_INFO</name><argument_list>(<argument><expr><name>avfilter</name></expr></argument>, <argument><expr><name>AVFILTER</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>level</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PRINT_LIB_INFO</name><argument_list>(<argument><expr><name>avresample</name></expr></argument>, <argument><expr><name>AVRESAMPLE</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>level</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PRINT_LIB_INFO</name><argument_list>(<argument><expr><name>swscale</name></expr></argument>, <argument><expr><name>SWSCALE</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>level</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PRINT_LIB_INFO</name><argument_list>(<argument><expr><name>swresample</name></expr></argument>, <argument><expr><name>SWRESAMPLE</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>level</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PRINT_LIB_INFO</name><argument_list>(<argument><expr><name>postproc</name></expr></argument>, <argument><expr><name>POSTPROC</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>level</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>print_program_info</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>level</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>indent</name> <init>= <expr><ternary><condition><expr><name>flags</name> <operator>&amp;</operator> <name>INDENT</name></expr>?</condition><then> <expr><literal type="string">" "</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>level</name></expr></argument>, <argument><expr><literal type="string">"%s version "</literal> <name>FFMPEG_VERSION</name></expr></argument>, <argument><expr><name>program_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>SHOW_COPYRIGHT</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>level</name></expr></argument>, <argument><expr><literal type="string">" Copyright (c) %d-%d the FFmpeg developers"</literal></expr></argument>,

<argument><expr><name>program_birth_year</name></expr></argument>, <argument><expr><name>CONFIG_THIS_YEAR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>level</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>level</name></expr></argument>, <argument><expr><literal type="string">"%sbuilt with %s\n"</literal></expr></argument>, <argument><expr><name>indent</name></expr></argument>, <argument><expr><name>CC_IDENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>level</name></expr></argument>, <argument><expr><literal type="string">"%sconfiguration: "</literal> <name>FFMPEG_CONFIGURATION</name> <literal type="string">"\n"</literal></expr></argument>, <argument><expr><name>indent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>print_buildconf</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>level</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>indent</name> <init>= <expr><ternary><condition><expr><name>flags</name> <operator>&amp;</operator> <name>INDENT</name></expr> ?</condition><then> <expr><literal type="string">" "</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>str</name><index>[]</index></name> <init>= <expr><block>{ <expr><name>FFMPEG_CONFIGURATION</name></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>conflist</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>remove_tilde</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>splitconf</name></decl>;</decl_stmt>

<while>while <condition>(<expr><operator>(</operator><name>conflist</name> <operator>=</operator> <call><name>strstr</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">" --"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name>conflist</name></expr></argument>, <argument><expr><literal type="string">"~--"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<while>while <condition>(<expr><operator>(</operator><name>remove_tilde</name> <operator>=</operator> <call><name>strstr</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"pkg-config~"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name>remove_tilde</name></expr></argument>, <argument><expr><literal type="string">"pkg-config "</literal></expr></argument>, <argument><expr><literal type="number">11</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><name>splitconf</name> <operator>=</operator> <call><name>strtok</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"~"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>level</name></expr></argument>, <argument><expr><literal type="string">"\n%sconfiguration:\n"</literal></expr></argument>, <argument><expr><name>indent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><name>splitconf</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>level</name></expr></argument>, <argument><expr><literal type="string">"%s%s%s\n"</literal></expr></argument>, <argument><expr><name>indent</name></expr></argument>, <argument><expr><name>indent</name></expr></argument>, <argument><expr><name>splitconf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>splitconf</name> <operator>=</operator> <call><name>strtok</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"~"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>show_banner</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>OptionDef</name> <modifier>*</modifier></type><name>options</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>idx</name> <init>= <expr><call><name>locate_option</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><name>options</name></expr></argument>, <argument><expr><literal type="string">"version"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>hide_banner</name> <operator>||</operator> <name>idx</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>print_program_info</name> <argument_list>(<argument><expr><name>INDENT</name><operator>|</operator><name>SHOW_COPYRIGHT</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>print_all_libs_info</name><argument_list>(<argument><expr><name>INDENT</name><operator>|</operator><name>SHOW_CONFIG</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>print_all_libs_info</name><argument_list>(<argument><expr><name>INDENT</name><operator>|</operator><name>SHOW_VERSION</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>show_version</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>optctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>opt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>av_log_set_callback</name><argument_list>(<argument><expr><name>log_callback_help</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>print_program_info</name> <argument_list>(<argument><expr><name>SHOW_COPYRIGHT</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>print_all_libs_info</name><argument_list>(<argument><expr><name>SHOW_VERSION</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>show_buildconf</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>optctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>opt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>av_log_set_callback</name><argument_list>(<argument><expr><name>log_callback_help</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>print_buildconf</name> <argument_list>(<argument><expr><name>INDENT</name><operator>|</operator><literal type="number">0</literal></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>show_license</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>optctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>opt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_NONFREE</name></expr></cpp:if>

<expr_stmt><expr><call><name>printf</name><argument_list>(

<argument><expr><literal type="string">"This version of %s has nonfree parts compiled in.\n"</literal>

<literal type="string">"Therefore it is not legally redistributable.\n"</literal></expr></argument>,

<argument><expr><name>program_name</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>CONFIG_GPLV3</name></expr></cpp:elif>

<expr_stmt><expr><call><name>printf</name><argument_list>(

<argument><expr><literal type="string">"%s is free software; you can redistribute it and/or modify\n"</literal>

<literal type="string">"it under the terms of the GNU General Public License as published by\n"</literal>

<literal type="string">"the Free Software Foundation; either version 3 of the License, or\n"</literal>

<literal type="string">"(at your option) any later version.\n"</literal>

<literal type="string">"\n"</literal>

<literal type="string">"%s is distributed in the hope that it will be useful,\n"</literal>

<literal type="string">"but WITHOUT ANY WARRANTY; without even the implied warranty of\n"</literal>

<literal type="string">"MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n"</literal>

<literal type="string">"GNU General Public License for more details.\n"</literal>

<literal type="string">"\n"</literal>

<literal type="string">"You should have received a copy of the GNU General Public License\n"</literal>

<literal type="string">"along with %s. If not, see &lt;http://www.gnu.org/licenses/&gt;.\n"</literal></expr></argument>,

<argument><expr><name>program_name</name></expr></argument>, <argument><expr><name>program_name</name></expr></argument>, <argument><expr><name>program_name</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>CONFIG_GPL</name></expr></cpp:elif>

<expr_stmt><expr><call><name>printf</name><argument_list>(

<argument><expr><literal type="string">"%s is free software; you can redistribute it and/or modify\n"</literal>

<literal type="string">"it under the terms of the GNU General Public License as published by\n"</literal>

<literal type="string">"the Free Software Foundation; either version 2 of the License, or\n"</literal>

<literal type="string">"(at your option) any later version.\n"</literal>

<literal type="string">"\n"</literal>

<literal type="string">"%s is distributed in the hope that it will be useful,\n"</literal>

<literal type="string">"but WITHOUT ANY WARRANTY; without even the implied warranty of\n"</literal>

<literal type="string">"MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n"</literal>

<literal type="string">"GNU General Public License for more details.\n"</literal>

<literal type="string">"\n"</literal>

<literal type="string">"You should have received a copy of the GNU General Public License\n"</literal>

<literal type="string">"along with %s; if not, write to the Free Software\n"</literal>

<literal type="string">"Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA\n"</literal></expr></argument>,

<argument><expr><name>program_name</name></expr></argument>, <argument><expr><name>program_name</name></expr></argument>, <argument><expr><name>program_name</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>CONFIG_LGPLV3</name></expr></cpp:elif>

<expr_stmt><expr><call><name>printf</name><argument_list>(

<argument><expr><literal type="string">"%s is free software; you can redistribute it and/or modify\n"</literal>

<literal type="string">"it under the terms of the GNU Lesser General Public License as published by\n"</literal>

<literal type="string">"the Free Software Foundation; either version 3 of the License, or\n"</literal>

<literal type="string">"(at your option) any later version.\n"</literal>

<literal type="string">"\n"</literal>

<literal type="string">"%s is distributed in the hope that it will be useful,\n"</literal>

<literal type="string">"but WITHOUT ANY WARRANTY; without even the implied warranty of\n"</literal>

<literal type="string">"MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n"</literal>

<literal type="string">"GNU Lesser General Public License for more details.\n"</literal>

<literal type="string">"\n"</literal>

<literal type="string">"You should have received a copy of the GNU Lesser General Public License\n"</literal>

<literal type="string">"along with %s. If not, see &lt;http://www.gnu.org/licenses/&gt;.\n"</literal></expr></argument>,

<argument><expr><name>program_name</name></expr></argument>, <argument><expr><name>program_name</name></expr></argument>, <argument><expr><name>program_name</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><call><name>printf</name><argument_list>(

<argument><expr><literal type="string">"%s is free software; you can redistribute it and/or\n"</literal>

<literal type="string">"modify it under the terms of the GNU Lesser General Public\n"</literal>

<literal type="string">"License as published by the Free Software Foundation; either\n"</literal>

<literal type="string">"version 2.1 of the License, or (at your option) any later version.\n"</literal>

<literal type="string">"\n"</literal>

<literal type="string">"%s is distributed in the hope that it will be useful,\n"</literal>

<literal type="string">"but WITHOUT ANY WARRANTY; without even the implied warranty of\n"</literal>

<literal type="string">"MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n"</literal>

<literal type="string">"Lesser General Public License for more details.\n"</literal>

<literal type="string">"\n"</literal>

<literal type="string">"You should have received a copy of the GNU Lesser General Public\n"</literal>

<literal type="string">"License along with %s; if not, write to the Free Software\n"</literal>

<literal type="string">"Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA\n"</literal></expr></argument>,

<argument><expr><name>program_name</name></expr></argument>, <argument><expr><name>program_name</name></expr></argument>, <argument><expr><name>program_name</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>is_device</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>AVClass</name> <modifier>*</modifier></type><name>avclass</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>avclass</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>AV_IS_INPUT_DEVICE</name><argument_list>(<argument><expr><name><name>avclass</name><operator>-&gt;</operator><name>category</name></name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>AV_IS_OUTPUT_DEVICE</name><argument_list>(<argument><expr><name><name>avclass</name><operator>-&gt;</operator><name>category</name></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>show_formats_devices</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>optctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>opt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>device_only</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>muxdemuxers</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>ifmt_opaque</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>AVInputFormat</name> <modifier>*</modifier></type><name>ifmt</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>ofmt_opaque</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>AVOutputFormat</name> <modifier>*</modifier></type><name>ofmt</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>last_name</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>is_dev</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s\n"</literal>

<literal type="string">" D. = Demuxing supported\n"</literal>

<literal type="string">" .E = Muxing supported\n"</literal>

<literal type="string">" --\n"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>device_only</name></expr> ?</condition><then> <expr><literal type="string">"Devices:"</literal></expr> </then><else>: <expr><literal type="string">"File formats:"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>last_name</name> <operator>=</operator> <literal type="string">"000"</literal></expr>;</expr_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>decode</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>encode</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>long_name</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>muxdemuxers</name> <operator>!=</operator><name>SHOW_DEMUXERS</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ofmt_opaque</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>(</operator><name>ofmt</name> <operator>=</operator> <call><name>av_muxer_iterate</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ofmt_opaque</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>is_dev</name> <operator>=</operator> <call><name>is_device</name><argument_list>(<argument><expr><name><name>ofmt</name><operator>-&gt;</operator><name>priv_class</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>is_dev</name> <operator>&amp;&amp;</operator> <name>device_only</name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>!</operator><name>name</name> <operator>||</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name><name>ofmt</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator>

<call><name>strcmp</name><argument_list>(<argument><expr><name><name>ofmt</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>last_name</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>name</name> <operator>=</operator> <name><name>ofmt</name><operator>-&gt;</operator><name>name</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>long_name</name> <operator>=</operator> <name><name>ofmt</name><operator>-&gt;</operator><name>long_name</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>encode</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></while>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>muxdemuxers</name> <operator>!=</operator> <name>SHOW_MUXERS</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ifmt_opaque</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>(</operator><name>ifmt</name> <operator>=</operator> <call><name>av_demuxer_iterate</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ifmt_opaque</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>is_dev</name> <operator>=</operator> <call><name>is_device</name><argument_list>(<argument><expr><name><name>ifmt</name><operator>-&gt;</operator><name>priv_class</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>is_dev</name> <operator>&amp;&amp;</operator> <name>device_only</name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>!</operator><name>name</name> <operator>||</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name><name>ifmt</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator>

<call><name>strcmp</name><argument_list>(<argument><expr><name><name>ifmt</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>last_name</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>name</name> <operator>=</operator> <name><name>ifmt</name><operator>-&gt;</operator><name>name</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>long_name</name> <operator>=</operator> <name><name>ifmt</name><operator>-&gt;</operator><name>long_name</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>encode</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>name</name> <operator>&amp;&amp;</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name><name>ifmt</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>decode</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></while>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>name</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>last_name</name> <operator>=</operator> <name>name</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" %s%s %-15s %s\n"</literal></expr></argument>,

<argument><expr><ternary><condition><expr><name>decode</name></expr> ?</condition><then> <expr><literal type="string">"D"</literal></expr> </then><else>: <expr><literal type="string">" "</literal></expr></else></ternary></expr></argument>,

<argument><expr><ternary><condition><expr><name>encode</name></expr> ?</condition><then> <expr><literal type="string">"E"</literal></expr> </then><else>: <expr><literal type="string">" "</literal></expr></else></ternary></expr></argument>,

<argument><expr><name>name</name></expr></argument>,

<argument><expr><ternary><condition><expr><name>long_name</name></expr> ?</condition><then> <expr><name>long_name</name></expr></then><else>:<expr><literal type="string">" "</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>show_formats</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>optctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>opt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>show_formats_devices</name><argument_list>(<argument><expr><name>optctx</name></expr></argument>, <argument><expr><name>opt</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>SHOW_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>show_muxers</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>optctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>opt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>show_formats_devices</name><argument_list>(<argument><expr><name>optctx</name></expr></argument>, <argument><expr><name>opt</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>SHOW_MUXERS</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>show_demuxers</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>optctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>opt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>show_formats_devices</name><argument_list>(<argument><expr><name>optctx</name></expr></argument>, <argument><expr><name>opt</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>SHOW_DEMUXERS</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>show_devices</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>optctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>opt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>show_formats_devices</name><argument_list>(<argument><expr><name>optctx</name></expr></argument>, <argument><expr><name>opt</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>SHOW_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PRINT_CODEC_SUPPORTED</name><parameter_list>(<parameter><type><name>codec</name></type></parameter>, <parameter><type><name>field</name></type></parameter>, <parameter><type><name>type</name></type></parameter>, <parameter><type><name>list_name</name></type></parameter>, <parameter><type><name>term</name></type></parameter>, <parameter><type><name>get_name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>if (codec-&gt;field) { const type *p = codec-&gt;field; printf(" Supported " list_name ":"); while (*p != term) { get_name(*p); printf(" %s", name); p++; } printf("\n"); }</cpp:value></cpp:define> 

<function><type><specifier>static</specifier> <name>void</name></type> <name>print_codec</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>AVCodec</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>encoder</name> <init>= <expr><call><name>av_codec_is_encoder</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s %s [%s]:\n"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>encoder</name></expr> ?</condition><then> <expr><literal type="string">"Encoder"</literal></expr> </then><else>: <expr><literal type="string">"Decoder"</literal></expr></else></ternary></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>name</name></name></expr></argument>,

<argument><expr><ternary><condition><expr><name><name>c</name><operator>-&gt;</operator><name>long_name</name></name></expr> ?</condition><then> <expr><name><name>c</name><operator>-&gt;</operator><name>long_name</name></name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" General capabilities: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>capabilities</name></name> <operator>&amp;</operator> <name>AV_CODEC_CAP_DRAW_HORIZ_BAND</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"horizband "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>capabilities</name></name> <operator>&amp;</operator> <name>AV_CODEC_CAP_DR1</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"dr1 "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>capabilities</name></name> <operator>&amp;</operator> <name>AV_CODEC_CAP_TRUNCATED</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"trunc "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>capabilities</name></name> <operator>&amp;</operator> <name>AV_CODEC_CAP_DELAY</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"delay "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>capabilities</name></name> <operator>&amp;</operator> <name>AV_CODEC_CAP_SMALL_LAST_FRAME</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"small "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>capabilities</name></name> <operator>&amp;</operator> <name>AV_CODEC_CAP_SUBFRAMES</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"subframes "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>capabilities</name></name> <operator>&amp;</operator> <name>AV_CODEC_CAP_EXPERIMENTAL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"exp "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>capabilities</name></name> <operator>&amp;</operator> <name>AV_CODEC_CAP_CHANNEL_CONF</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"chconf "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>capabilities</name></name> <operator>&amp;</operator> <name>AV_CODEC_CAP_PARAM_CHANGE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"paramchange "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>capabilities</name></name> <operator>&amp;</operator> <name>AV_CODEC_CAP_VARIABLE_FRAME_SIZE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"variable "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>capabilities</name></name> <operator>&amp;</operator> <operator>(</operator><name>AV_CODEC_CAP_FRAME_THREADS</name> <operator>|</operator>

<name>AV_CODEC_CAP_SLICE_THREADS</name> <operator>|</operator>

<name>AV_CODEC_CAP_AUTO_THREADS</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"threads "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>capabilities</name></name> <operator>&amp;</operator> <name>AV_CODEC_CAP_AVOID_PROBING</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"avoidprobe "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>capabilities</name></name> <operator>&amp;</operator> <name>AV_CODEC_CAP_INTRA_ONLY</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"intraonly "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>capabilities</name></name> <operator>&amp;</operator> <name>AV_CODEC_CAP_LOSSLESS</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"lossless "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>capabilities</name></name> <operator>&amp;</operator> <name>AV_CODEC_CAP_HARDWARE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"hardware "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>capabilities</name></name> <operator>&amp;</operator> <name>AV_CODEC_CAP_HYBRID</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"hybrid "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>c</name><operator>-&gt;</operator><name>capabilities</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"none"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>AVMEDIA_TYPE_VIDEO</name> <operator>||</operator>

<name><name>c</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>AVMEDIA_TYPE_AUDIO</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" Threading capabilities: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>capabilities</name></name> <operator>&amp;</operator> <operator>(</operator><name>AV_CODEC_CAP_FRAME_THREADS</name> <operator>|</operator>

<name>AV_CODEC_CAP_SLICE_THREADS</name> <operator>|</operator>

<name>AV_CODEC_CAP_AUTO_THREADS</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<case>case <expr><name>AV_CODEC_CAP_FRAME_THREADS</name> <operator>|</operator>

<name>AV_CODEC_CAP_SLICE_THREADS</name></expr>:</case> <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"frame and slice"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>AV_CODEC_CAP_FRAME_THREADS</name></expr>:</case> <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"frame"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>AV_CODEC_CAP_SLICE_THREADS</name></expr>:</case> <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"slice"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>AV_CODEC_CAP_AUTO_THREADS</name></expr> :</case> <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"auto"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<default>default:</default> <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"none"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

</block_content>}</block></switch>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>avcodec_get_hw_config</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" Supported hardware devices: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init><condition>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>AVCodecHWConfig</name> <modifier>*</modifier></type><name>config</name> <init>= <expr><call><name>avcodec_get_hw_config</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>config</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s "</literal></expr></argument>, <argument><expr><call><name>av_hwdevice_get_type_name</name><argument_list>(<argument><expr><name><name>config</name><operator>-&gt;</operator><name>device_type</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>supported_framerates</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>AVRational</name> <modifier>*</modifier></type><name>fps</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>supported_framerates</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" Supported framerates:"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><name><name>fps</name><operator>-&gt;</operator><name>num</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" %d/%d"</literal></expr></argument>, <argument><expr><name><name>fps</name><operator>-&gt;</operator><name>num</name></name></expr></argument>, <argument><expr><name><name>fps</name><operator>-&gt;</operator><name>den</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>fps</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>PRINT_CODEC_SUPPORTED</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>pix_fmts</name></expr></argument>, <argument><expr>enum <name>AVPixelFormat</name></expr></argument>, <argument><expr><literal type="string">"pixel formats"</literal></expr></argument>,

<argument><expr><name>AV_PIX_FMT_NONE</name></expr></argument>, <argument><expr><name>GET_PIX_FMT_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PRINT_CODEC_SUPPORTED</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>supported_samplerates</name></expr></argument>, <argument><expr><name>int</name></expr></argument>, <argument><expr><literal type="string">"sample rates"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><name>GET_SAMPLE_RATE_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PRINT_CODEC_SUPPORTED</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>sample_fmts</name></expr></argument>, <argument><expr>enum <name>AVSampleFormat</name></expr></argument>, <argument><expr><literal type="string">"sample formats"</literal></expr></argument>,

<argument><expr><name>AV_SAMPLE_FMT_NONE</name></expr></argument>, <argument><expr><name>GET_SAMPLE_FMT_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PRINT_CODEC_SUPPORTED</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>channel_layouts</name></expr></argument>, <argument><expr><name>uint64_t</name></expr></argument>, <argument><expr><literal type="string">"channel layouts"</literal></expr></argument>,

<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>GET_CH_LAYOUT_DESC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>priv_class</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>show_help_children</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>priv_class</name></name></expr></argument>,

<argument><expr><name>AV_OPT_FLAG_ENCODING_PARAM</name> <operator>|</operator>

<name>AV_OPT_FLAG_DECODING_PARAM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name></type> <name>get_media_type_char</name><parameter_list>(<parameter><decl><type><name><name>enum</name> <name>AVMediaType</name></name></type> <name>type</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<switch>switch <condition>(<expr><name>type</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>AVMEDIA_TYPE_VIDEO</name></expr>:</case> <return>return <expr><literal type="char">'V'</literal></expr>;</return>

<case>case <expr><name>AVMEDIA_TYPE_AUDIO</name></expr>:</case> <return>return <expr><literal type="char">'A'</literal></expr>;</return>

<case>case <expr><name>AVMEDIA_TYPE_DATA</name></expr>:</case> <return>return <expr><literal type="char">'D'</literal></expr>;</return>

<case>case <expr><name>AVMEDIA_TYPE_SUBTITLE</name></expr>:</case> <return>return <expr><literal type="char">'S'</literal></expr>;</return>

<case>case <expr><name>AVMEDIA_TYPE_ATTACHMENT</name></expr>:</case><return>return <expr><literal type="char">'T'</literal></expr>;</return>

<default>default:</default> <return>return <expr><literal type="char">'?'</literal></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>AVCodec</name> <modifier>*</modifier></type><name>next_codec_for_id</name><parameter_list>(<parameter><decl><type><name><name>enum</name> <name>AVCodecID</name></name></type> <name>id</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>AVCodec</name> <modifier>*</modifier></type><name>prev</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>encoder</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<while>while <condition>(<expr><operator>(</operator><name>prev</name> <operator>=</operator> <call><name>av_codec_next</name><argument_list>(<argument><expr><name>prev</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>prev</name><operator>-&gt;</operator><name>id</name></name> <operator>==</operator> <name>id</name> <operator>&amp;&amp;</operator>

<operator>(</operator><ternary><condition><expr><name>encoder</name></expr> ?</condition><then> <expr><call><name>av_codec_is_encoder</name><argument_list>(<argument><expr><name>prev</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>av_codec_is_decoder</name><argument_list>(<argument><expr><name>prev</name></expr></argument>)</argument_list></call></expr></else></ternary><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>prev</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></while>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>compare_codec_desc</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>AVCodecDescriptor</name> <modifier>*</modifier> <specifier>const</specifier> <modifier>*</modifier></type><name>da</name> <init>= <expr><name>a</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>AVCodecDescriptor</name> <modifier>*</modifier> <specifier>const</specifier> <modifier>*</modifier></type><name>db</name> <init>= <expr><name>b</name></expr></init></decl>;</decl_stmt>

<return>return <expr><ternary><condition><expr><operator>(</operator><operator>*</operator><name>da</name><operator>)</operator><operator>-&gt;</operator><name>type</name> <operator>!=</operator> <name><operator>(</operator><operator>*</operator><name>db</name><operator>)</operator><operator>-&gt;</operator><name>type</name></name></expr> ?</condition><then> <expr><call><name>FFDIFFSIGN</name><argument_list>(<argument><expr><name><operator>(</operator><operator>*</operator><name>da</name><operator>)</operator><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name><operator>(</operator><operator>*</operator><name>db</name><operator>)</operator><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr> </then><else>:

<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><operator>(</operator><operator>*</operator><name>da</name><operator>)</operator><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><operator>(</operator><operator>*</operator><name>db</name><operator>)</operator><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>unsigned</name></type> <name>get_codecs_sorted</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>AVCodecDescriptor</name> <modifier>*</modifier><modifier>*</modifier><modifier>*</modifier></type><name>rcodecs</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>AVCodecDescriptor</name> <modifier>*</modifier></type><name>desc</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>AVCodecDescriptor</name> <modifier>*</modifier><modifier>*</modifier></type><name>codecs</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>nb_codecs</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><operator>(</operator><name>desc</name> <operator>=</operator> <call><name>avcodec_descriptor_next</name><argument_list>(<argument><expr><name>desc</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>nb_codecs</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>codecs</name> <operator>=</operator> <call><name>av_calloc</name><argument_list>(<argument><expr><name>nb_codecs</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>codecs</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Out of memory\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>exit_program</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>desc</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>(</operator><name>desc</name> <operator>=</operator> <call><name>avcodec_descriptor_next</name><argument_list>(<argument><expr><name>desc</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>codecs</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>desc</name></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name>i</name> <operator>==</operator> <name>nb_codecs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>qsort</name><argument_list>(<argument><expr><name>codecs</name></expr></argument>, <argument><expr><name>nb_codecs</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>codecs</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>compare_codec_desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>rcodecs</name> <operator>=</operator> <name>codecs</name></expr>;</expr_stmt>

<return>return <expr><name>nb_codecs</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>print_codecs_for_id</name><parameter_list>(<parameter><decl><type><name><name>enum</name> <name>AVCodecID</name></name></type> <name>id</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>encoder</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>AVCodec</name> <modifier>*</modifier></type><name>codec</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" (%s: "</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>encoder</name></expr> ?</condition><then> <expr><literal type="string">"encoders"</literal></expr> </then><else>: <expr><literal type="string">"decoders"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>(</operator><name>codec</name> <operator>=</operator> <call><name>next_codec_for_id</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><name>codec</name></expr></argument>, <argument><expr><name>encoder</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s "</literal></expr></argument>, <argument><expr><name><name>codec</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">")"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>show_codecs</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>optctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>opt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>AVCodecDescriptor</name> <modifier>*</modifier><modifier>*</modifier></type><name>codecs</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>nb_codecs</name> <init>= <expr><call><name>get_codecs_sorted</name><argument_list>(<argument><expr><operator>&amp;</operator><name>codecs</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Codecs:\n"</literal>

<literal type="string">" D..... = Decoding supported\n"</literal>

<literal type="string">" .E.... = Encoding supported\n"</literal>

<literal type="string">" ..V... = Video codec\n"</literal>

<literal type="string">" ..A... = Audio codec\n"</literal>

<literal type="string">" ..S... = Subtitle codec\n"</literal>

<literal type="string">" ...I.. = Intra frame-only codec\n"</literal>

<literal type="string">" ....L. = Lossy compression\n"</literal>

<literal type="string">" .....S = Lossless compression\n"</literal>

<literal type="string">" -------\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nb_codecs</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>AVCodecDescriptor</name> <modifier>*</modifier></type><name>desc</name> <init>= <expr><name><name>codecs</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>AVCodec</name> <modifier>*</modifier></type><name>codec</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strstr</name><argument_list>(<argument><expr><name><name>desc</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="string">"_deprecated"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><ternary><condition><expr><call><name>avcodec_find_decoder</name><argument_list>(<argument><expr><name><name>desc</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="string">"D"</literal></expr> </then><else>: <expr><literal type="string">"."</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><ternary><condition><expr><call><name>avcodec_find_encoder</name><argument_list>(<argument><expr><name><name>desc</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="string">"E"</literal></expr> </then><else>: <expr><literal type="string">"."</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%c"</literal></expr></argument>, <argument><expr><call><name>get_media_type_char</name><argument_list>(<argument><expr><name><name>desc</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><ternary><condition><expr><operator>(</operator><name><name>desc</name><operator>-&gt;</operator><name>props</name></name> <operator>&amp;</operator> <name>AV_CODEC_PROP_INTRA_ONLY</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">"I"</literal></expr> </then><else>: <expr><literal type="string">"."</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><ternary><condition><expr><operator>(</operator><name><name>desc</name><operator>-&gt;</operator><name>props</name></name> <operator>&amp;</operator> <name>AV_CODEC_PROP_LOSSY</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">"L"</literal></expr> </then><else>: <expr><literal type="string">"."</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><ternary><condition><expr><operator>(</operator><name><name>desc</name><operator>-&gt;</operator><name>props</name></name> <operator>&amp;</operator> <name>AV_CODEC_PROP_LOSSLESS</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">"S"</literal></expr> </then><else>: <expr><literal type="string">"."</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" %-20s %s"</literal></expr></argument>, <argument><expr><name><name>desc</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>desc</name><operator>-&gt;</operator><name>long_name</name></name></expr> ?</condition><then> <expr><name><name>desc</name><operator>-&gt;</operator><name>long_name</name></name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>(</operator><name>codec</name> <operator>=</operator> <call><name>next_codec_for_id</name><argument_list>(<argument><expr><name><name>desc</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name>codec</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>codec</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>desc</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>print_codecs_for_id</name><argument_list>(<argument><expr><name><name>desc</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></while>

<expr_stmt><expr><name>codec</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>(</operator><name>codec</name> <operator>=</operator> <call><name>next_codec_for_id</name><argument_list>(<argument><expr><name><name>desc</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name>codec</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>codec</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>desc</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>print_codecs_for_id</name><argument_list>(<argument><expr><name><name>desc</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>codecs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>print_codecs</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>encoder</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>AVCodecDescriptor</name> <modifier>*</modifier><modifier>*</modifier></type><name>codecs</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>nb_codecs</name> <init>= <expr><call><name>get_codecs_sorted</name><argument_list>(<argument><expr><operator>&amp;</operator><name>codecs</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s:\n"</literal>

<literal type="string">" V..... = Video\n"</literal>

<literal type="string">" A..... = Audio\n"</literal>

<literal type="string">" S..... = Subtitle\n"</literal>

<literal type="string">" .F.... = Frame-level multithreading\n"</literal>

<literal type="string">" ..S... = Slice-level multithreading\n"</literal>

<literal type="string">" ...X.. = Codec is experimental\n"</literal>

<literal type="string">" ....B. = Supports draw_horiz_band\n"</literal>

<literal type="string">" .....D = Supports direct rendering method 1\n"</literal>

<literal type="string">" ------\n"</literal></expr></argument>,

<argument><expr><ternary><condition><expr><name>encoder</name></expr> ?</condition><then> <expr><literal type="string">"Encoders"</literal></expr> </then><else>: <expr><literal type="string">"Decoders"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nb_codecs</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>AVCodecDescriptor</name> <modifier>*</modifier></type><name>desc</name> <init>= <expr><name><name>codecs</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>AVCodec</name> <modifier>*</modifier></type><name>codec</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><operator>(</operator><name>codec</name> <operator>=</operator> <call><name>next_codec_for_id</name><argument_list>(<argument><expr><name><name>desc</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name>codec</name></expr></argument>, <argument><expr><name>encoder</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" %c"</literal></expr></argument>, <argument><expr><call><name>get_media_type_char</name><argument_list>(<argument><expr><name><name>desc</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><ternary><condition><expr><operator>(</operator><name><name>codec</name><operator>-&gt;</operator><name>capabilities</name></name> <operator>&amp;</operator> <name>AV_CODEC_CAP_FRAME_THREADS</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">"F"</literal></expr> </then><else>: <expr><literal type="string">"."</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><ternary><condition><expr><operator>(</operator><name><name>codec</name><operator>-&gt;</operator><name>capabilities</name></name> <operator>&amp;</operator> <name>AV_CODEC_CAP_SLICE_THREADS</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">"S"</literal></expr> </then><else>: <expr><literal type="string">"."</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><ternary><condition><expr><operator>(</operator><name><name>codec</name><operator>-&gt;</operator><name>capabilities</name></name> <operator>&amp;</operator> <name>AV_CODEC_CAP_EXPERIMENTAL</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">"X"</literal></expr> </then><else>: <expr><literal type="string">"."</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><ternary><condition><expr><operator>(</operator><name><name>codec</name><operator>-&gt;</operator><name>capabilities</name></name> <operator>&amp;</operator> <name>AV_CODEC_CAP_DRAW_HORIZ_BAND</name><operator>)</operator></expr>?</condition><then><expr><literal type="string">"B"</literal></expr> </then><else>: <expr><literal type="string">"."</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><ternary><condition><expr><operator>(</operator><name><name>codec</name><operator>-&gt;</operator><name>capabilities</name></name> <operator>&amp;</operator> <name>AV_CODEC_CAP_DR1</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">"D"</literal></expr> </then><else>: <expr><literal type="string">"."</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" %-20s %s"</literal></expr></argument>, <argument><expr><name><name>codec</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>codec</name><operator>-&gt;</operator><name>long_name</name></name></expr> ?</condition><then> <expr><name><name>codec</name><operator>-&gt;</operator><name>long_name</name></name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>codec</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>desc</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" (codec %s)"</literal></expr></argument>, <argument><expr><name><name>desc</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></for>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>codecs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>show_decoders</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>optctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>opt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>print_codecs</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>show_encoders</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>optctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>opt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>print_codecs</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>show_bsfs</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>optctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>opt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>AVBitStreamFilter</name> <modifier>*</modifier></type><name>bsf</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>opaque</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Bitstream filters:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>(</operator><name>bsf</name> <operator>=</operator> <call><name>av_bsf_iterate</name><argument_list>(<argument><expr><operator>&amp;</operator><name>opaque</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><name><name>bsf</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>show_protocols</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>optctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>opt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>opaque</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Supported file protocols:\n"</literal>

<literal type="string">"Input:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>(</operator><name>name</name> <operator>=</operator> <call><name>avio_enum_protocols</name><argument_list>(<argument><expr><operator>&amp;</operator><name>opaque</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" %s\n"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Output:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>(</operator><name>name</name> <operator>=</operator> <call><name>avio_enum_protocols</name><argument_list>(<argument><expr><operator>&amp;</operator><name>opaque</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" %s\n"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>show_filters</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>optctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>opt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_AVFILTER</name></expr></cpp:if>

<decl_stmt><decl><type><specifier>const</specifier> <name>AVFilter</name> <modifier>*</modifier></type><name>filter</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>descr</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>descr_cur</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>opaque</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>AVFilterPad</name> <modifier>*</modifier></type><name>pad</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Filters:\n"</literal>

<literal type="string">" T.. = Timeline support\n"</literal>

<literal type="string">" .S. = Slice threading\n"</literal>

<literal type="string">" ..C = Command support\n"</literal>

<literal type="string">" A = Audio input/output\n"</literal>

<literal type="string">" V = Video input/output\n"</literal>

<literal type="string">" N = Dynamic number and/or type of input/output\n"</literal>

<literal type="string">" | = Source or sink filter\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>(</operator><name>filter</name> <operator>=</operator> <call><name>av_filter_iterate</name><argument_list>(<argument><expr><operator>&amp;</operator><name>opaque</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>descr_cur</name> <operator>=</operator> <name>descr</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>i</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><operator>(</operator><name>descr_cur</name><operator>++</operator><operator>)</operator> <operator>=</operator> <literal type="char">'-'</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><operator>(</operator><name>descr_cur</name><operator>++</operator><operator>)</operator> <operator>=</operator> <literal type="char">'&gt;'</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>pad</name> <operator>=</operator> <ternary><condition><expr><name>i</name></expr> ?</condition><then> <expr><name><name>filter</name><operator>-&gt;</operator><name>outputs</name></name></expr> </then><else>: <expr><name><name>filter</name><operator>-&gt;</operator><name>inputs</name></name></expr></else></ternary></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>pad</name> <operator>&amp;&amp;</operator> <call><name>avfilter_pad_get_name</name><argument_list>(<argument><expr><name>pad</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>descr_cur</name> <operator>&gt;=</operator> <name>descr</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>descr</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><operator>(</operator><name>descr_cur</name><operator>++</operator><operator>)</operator> <operator>=</operator> <call><name>get_media_type_char</name><argument_list>(<argument><expr><call><name>avfilter_pad_get_type</name><argument_list>(<argument><expr><name>pad</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>j</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><operator>(</operator><name>descr_cur</name><operator>++</operator><operator>)</operator> <operator>=</operator> <ternary><condition><expr><operator>(</operator><operator>(</operator><operator>!</operator><name>i</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>filter</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AVFILTER_FLAG_DYNAMIC_INPUTS</name><operator>)</operator><operator>)</operator> <operator>||</operator>

<operator>(</operator> <name>i</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>filter</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AVFILTER_FLAG_DYNAMIC_OUTPUTS</name><operator>)</operator><operator>)</operator><operator>)</operator></expr> ?</condition><then> <expr><literal type="char">'N'</literal></expr> </then><else>: <expr><literal type="char">'|'</literal></expr></else></ternary></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><operator>*</operator><name>descr_cur</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" %c%c%c %-17s %-10s %s\n"</literal></expr></argument>,

<argument><expr><ternary><condition><expr><name><name>filter</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AVFILTER_FLAG_SUPPORT_TIMELINE</name></expr> ?</condition><then> <expr><literal type="char">'T'</literal></expr> </then><else>: <expr><literal type="char">'.'</literal></expr></else></ternary></expr></argument>,

<argument><expr><ternary><condition><expr><name><name>filter</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AVFILTER_FLAG_SLICE_THREADS</name></expr> ?</condition><then> <expr><literal type="char">'S'</literal></expr> </then><else>: <expr><literal type="char">'.'</literal></expr></else></ternary></expr></argument>,

<argument><expr><ternary><condition><expr><name><name>filter</name><operator>-&gt;</operator><name>process_command</name></name></expr> ?</condition><then> <expr><literal type="char">'C'</literal></expr> </then><else>: <expr><literal type="char">'.'</literal></expr></else></ternary></expr></argument>,

<argument><expr><name><name>filter</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>descr</name></expr></argument>, <argument><expr><name><name>filter</name><operator>-&gt;</operator><name>description</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"No filters available: libavfilter disabled\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>show_colors</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>optctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>opt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>rgb</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%-32s #RRGGBB\n"</literal></expr></argument>, <argument><expr><literal type="string">"name"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>name</name> <operator>=</operator> <call><name>av_get_known_color_name</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rgb</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%-32s #%02x%02x%02x\n"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>rgb</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>rgb</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>rgb</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>show_pix_fmts</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>optctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>opt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>AVPixFmtDescriptor</name> <modifier>*</modifier></type><name>pix_desc</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Pixel formats:\n"</literal>

<literal type="string">"I.... = Supported Input format for conversion\n"</literal>

<literal type="string">".O... = Supported Output format for conversion\n"</literal>

<literal type="string">"..H.. = Hardware accelerated format\n"</literal>

<literal type="string">"...P. = Paletted format\n"</literal>

<literal type="string">"....B = Bitstream format\n"</literal>

<literal type="string">"FLAGS NAME NB_COMPONENTS BITS_PER_PIXEL\n"</literal>

<literal type="string">"-----\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>CONFIG_SWSCALE</name></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sws_isSupportedInput</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sws_isSupportedOutput</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<while>while <condition>(<expr><operator>(</operator><name>pix_desc</name> <operator>=</operator> <call><name>av_pix_fmt_desc_next</name><argument_list>(<argument><expr><name>pix_desc</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name> <name>av_unused</name></type> <name>pix_fmt</name> <init>= <expr><call><name>av_pix_fmt_desc_get_id</name><argument_list>(<argument><expr><name>pix_desc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%c%c%c%c%c %-16s %d %2d\n"</literal></expr></argument>,

<argument><expr><ternary><condition><expr><call><name>sws_isSupportedInput</name> <argument_list>(<argument><expr><name>pix_fmt</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="char">'I'</literal></expr> </then><else>: <expr><literal type="char">'.'</literal></expr></else></ternary></expr></argument>,

<argument><expr><ternary><condition><expr><call><name>sws_isSupportedOutput</name><argument_list>(<argument><expr><name>pix_fmt</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="char">'O'</literal></expr> </then><else>: <expr><literal type="char">'.'</literal></expr></else></ternary></expr></argument>,

<argument><expr><ternary><condition><expr><name><name>pix_desc</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_PIX_FMT_FLAG_HWACCEL</name></expr> ?</condition><then> <expr><literal type="char">'H'</literal></expr> </then><else>: <expr><literal type="char">'.'</literal></expr></else></ternary></expr></argument>,

<argument><expr><ternary><condition><expr><name><name>pix_desc</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_PIX_FMT_FLAG_PAL</name></expr> ?</condition><then> <expr><literal type="char">'P'</literal></expr> </then><else>: <expr><literal type="char">'.'</literal></expr></else></ternary></expr></argument>,

<argument><expr><ternary><condition><expr><name><name>pix_desc</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_PIX_FMT_FLAG_BITSTREAM</name></expr> ?</condition><then> <expr><literal type="char">'B'</literal></expr> </then><else>: <expr><literal type="char">'.'</literal></expr></else></ternary></expr></argument>,

<argument><expr><name><name>pix_desc</name><operator>-&gt;</operator><name>name</name></name></expr></argument>,

<argument><expr><name><name>pix_desc</name><operator>-&gt;</operator><name>nb_components</name></name></expr></argument>,

<argument><expr><call><name>av_get_bits_per_pixel</name><argument_list>(<argument><expr><name>pix_desc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>show_layouts</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>optctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>opt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>layout</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>descr</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Individual channels:\n"</literal>

<literal type="string">"NAME DESCRIPTION\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">63</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>name</name> <operator>=</operator> <call><name>av_get_channel_name</name><argument_list>(<argument><expr><operator>(</operator><name>uint64_t</name><operator>)</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>name</name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name>descr</name> <operator>=</operator> <call><name>av_get_channel_description</name><argument_list>(<argument><expr><operator>(</operator><name>uint64_t</name><operator>)</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%-14s %s\n"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>descr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\nStandard channel layouts:\n"</literal>

<literal type="string">"NAME DECOMPOSITION\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><operator>!</operator><call><name>av_get_standard_channel_layout</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>layout</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>name</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%-14s "</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>j</name></expr>;</condition> <incr><expr><name>j</name> <operator>&lt;&lt;=</operator> <literal type="number">1</literal></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>layout</name> <operator>&amp;</operator> <name>j</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s%s"</literal></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name>layout</name> <operator>&amp;</operator> <operator>(</operator><name>j</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">"+"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>, <argument><expr><call><name>av_get_channel_name</name><argument_list>(<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>show_sample_fmts</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>optctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>opt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>fmt_str</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>AV_SAMPLE_FMT_NB</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><call><name>av_get_sample_fmt_string</name><argument_list>(<argument><expr><name>fmt_str</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>fmt_str</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>show_help_codec</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>encoder</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>AVCodecDescriptor</name> <modifier>*</modifier></type><name>desc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>AVCodec</name> <modifier>*</modifier></type><name>codec</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>name</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"No codec name specified.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>codec</name> <operator>=</operator> <ternary><condition><expr><name>encoder</name></expr> ?</condition><then> <expr><call><name>avcodec_find_encoder_by_name</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr> </then><else>:

<expr><call><name>avcodec_find_decoder_by_name</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>codec</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>print_codec</name><argument_list>(<argument><expr><name>codec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><operator>(</operator><name>desc</name> <operator>=</operator> <call><name>avcodec_descriptor_get_by_name</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>printed</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><operator>(</operator><name>codec</name> <operator>=</operator> <call><name>next_codec_for_id</name><argument_list>(<argument><expr><name><name>desc</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name>codec</name></expr></argument>, <argument><expr><name>encoder</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>printed</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>print_codec</name><argument_list>(<argument><expr><name>codec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>printed</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Codec '%s' is known to FFmpeg, "</literal>

<literal type="string">"but no %s for it are available. FFmpeg might need to be "</literal>

<literal type="string">"recompiled with additional external libraries.\n"</literal></expr></argument>,

<argument><expr><name>name</name></expr></argument>, <argument><expr><ternary><condition><expr><name>encoder</name></expr> ?</condition><then> <expr><literal type="string">"encoders"</literal></expr> </then><else>: <expr><literal type="string">"decoders"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Codec '%s' is not recognized by FFmpeg.\n"</literal></expr></argument>,

<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>show_help_demuxer</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>AVInputFormat</name> <modifier>*</modifier></type><name>fmt</name> <init>= <expr><call><name>av_find_input_format</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>fmt</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Unknown format '%s'.\n"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Demuxer %s [%s]:\n"</literal></expr></argument>, <argument><expr><name><name>fmt</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>fmt</name><operator>-&gt;</operator><name>long_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>fmt</name><operator>-&gt;</operator><name>extensions</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" Common extensions: %s.\n"</literal></expr></argument>, <argument><expr><name><name>fmt</name><operator>-&gt;</operator><name>extensions</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>fmt</name><operator>-&gt;</operator><name>priv_class</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>show_help_children</name><argument_list>(<argument><expr><name><name>fmt</name><operator>-&gt;</operator><name>priv_class</name></name></expr></argument>, <argument><expr><name>AV_OPT_FLAG_DECODING_PARAM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>show_help_protocol</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>AVClass</name> <modifier>*</modifier></type><name>proto_class</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>name</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"No protocol name specified.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>proto_class</name> <operator>=</operator> <call><name>avio_protocol_get_class</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>proto_class</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Unknown protocol '%s'.\n"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>show_help_children</name><argument_list>(<argument><expr><name>proto_class</name></expr></argument>, <argument><expr><name>AV_OPT_FLAG_DECODING_PARAM</name> <operator>|</operator> <name>AV_OPT_FLAG_ENCODING_PARAM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>show_help_muxer</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>AVCodecDescriptor</name> <modifier>*</modifier></type><name>desc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>AVOutputFormat</name> <modifier>*</modifier></type><name>fmt</name> <init>= <expr><call><name>av_guess_format</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>fmt</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Unknown format '%s'.\n"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Muxer %s [%s]:\n"</literal></expr></argument>, <argument><expr><name><name>fmt</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>fmt</name><operator>-&gt;</operator><name>long_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>fmt</name><operator>-&gt;</operator><name>extensions</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" Common extensions: %s.\n"</literal></expr></argument>, <argument><expr><name><name>fmt</name><operator>-&gt;</operator><name>extensions</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>fmt</name><operator>-&gt;</operator><name>mime_type</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" Mime type: %s.\n"</literal></expr></argument>, <argument><expr><name><name>fmt</name><operator>-&gt;</operator><name>mime_type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>fmt</name><operator>-&gt;</operator><name>video_codec</name></name> <operator>!=</operator> <name>AV_CODEC_ID_NONE</name> <operator>&amp;&amp;</operator>

<operator>(</operator><name>desc</name> <operator>=</operator> <call><name>avcodec_descriptor_get</name><argument_list>(<argument><expr><name><name>fmt</name><operator>-&gt;</operator><name>video_codec</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" Default video codec: %s.\n"</literal></expr></argument>, <argument><expr><name><name>desc</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>fmt</name><operator>-&gt;</operator><name>audio_codec</name></name> <operator>!=</operator> <name>AV_CODEC_ID_NONE</name> <operator>&amp;&amp;</operator>

<operator>(</operator><name>desc</name> <operator>=</operator> <call><name>avcodec_descriptor_get</name><argument_list>(<argument><expr><name><name>fmt</name><operator>-&gt;</operator><name>audio_codec</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" Default audio codec: %s.\n"</literal></expr></argument>, <argument><expr><name><name>desc</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>fmt</name><operator>-&gt;</operator><name>subtitle_codec</name></name> <operator>!=</operator> <name>AV_CODEC_ID_NONE</name> <operator>&amp;&amp;</operator>

<operator>(</operator><name>desc</name> <operator>=</operator> <call><name>avcodec_descriptor_get</name><argument_list>(<argument><expr><name><name>fmt</name><operator>-&gt;</operator><name>subtitle_codec</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" Default subtitle codec: %s.\n"</literal></expr></argument>, <argument><expr><name><name>desc</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>fmt</name><operator>-&gt;</operator><name>priv_class</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>show_help_children</name><argument_list>(<argument><expr><name><name>fmt</name><operator>-&gt;</operator><name>priv_class</name></name></expr></argument>, <argument><expr><name>AV_OPT_FLAG_ENCODING_PARAM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_AVFILTER</name></expr></cpp:if>

<function><type><specifier>static</specifier> <name>void</name></type> <name>show_help_filter</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_AVFILTER</name></expr></cpp:if>

<decl_stmt><decl><type><specifier>const</specifier> <name>AVFilter</name> <modifier>*</modifier></type><name>f</name> <init>= <expr><call><name>avfilter_get_by_name</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>count</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>name</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"No filter name specified.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><name>f</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Unknown filter '%s'.\n"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Filter %s\n"</literal></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>description</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" %s\n"</literal></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>description</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AVFILTER_FLAG_SLICE_THREADS</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" slice threading supported\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" Inputs:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>count</name> <operator>=</operator> <call><name>avfilter_pad_count</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>inputs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" #%d: %s (%s)\n"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><call><name>avfilter_pad_get_name</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>inputs</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>media_type_string</name><argument_list>(<argument><expr><call><name>avfilter_pad_get_type</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>inputs</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AVFILTER_FLAG_DYNAMIC_INPUTS</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" dynamic (depending on the options)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><operator>!</operator><name>count</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" none (source filter)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" Outputs:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>count</name> <operator>=</operator> <call><name>avfilter_pad_count</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>outputs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" #%d: %s (%s)\n"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><call><name>avfilter_pad_get_name</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>outputs</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>media_type_string</name><argument_list>(<argument><expr><call><name>avfilter_pad_get_type</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>outputs</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AVFILTER_FLAG_DYNAMIC_OUTPUTS</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" dynamic (depending on the options)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><operator>!</operator><name>count</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" none (sink filter)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>priv_class</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>show_help_children</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>priv_class</name></name></expr></argument>, <argument><expr><name>AV_OPT_FLAG_VIDEO_PARAM</name> <operator>|</operator> <name>AV_OPT_FLAG_FILTERING_PARAM</name> <operator>|</operator>

<name>AV_OPT_FLAG_AUDIO_PARAM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AVFILTER_FLAG_SUPPORT_TIMELINE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"This filter has support for timeline through the 'enable' option.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Build without libavfilter; "</literal>

<literal type="string">"can not to satisfy request\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>void</name></type> <name>show_help_bsf</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>AVBitStreamFilter</name> <modifier>*</modifier></type><name>bsf</name> <init>= <expr><call><name>av_bsf_get_by_name</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>name</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"No bitstream filter name specified.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><name>bsf</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Unknown bit stream filter '%s'.\n"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Bit stream filter %s\n"</literal></expr></argument>, <argument><expr><name><name>bsf</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PRINT_CODEC_SUPPORTED</name><argument_list>(<argument><expr><name>bsf</name></expr></argument>, <argument><expr><name>codec_ids</name></expr></argument>, <argument><expr>enum <name>AVCodecID</name></expr></argument>, <argument><expr><literal type="string">"codecs"</literal></expr></argument>,

<argument><expr><name>AV_CODEC_ID_NONE</name></expr></argument>, <argument><expr><name>GET_CODEC_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>bsf</name><operator>-&gt;</operator><name>priv_class</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>show_help_children</name><argument_list>(<argument><expr><name><name>bsf</name><operator>-&gt;</operator><name>priv_class</name></name></expr></argument>, <argument><expr><name>AV_OPT_FLAG_BSF_PARAM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>show_help</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>optctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>opt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>topic</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>par</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_log_set_callback</name><argument_list>(<argument><expr><name>log_callback_help</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>topic</name> <operator>=</operator> <call><name>av_strdup</name><argument_list>(<argument><expr><ternary><condition><expr><name>arg</name></expr> ?</condition><then> <expr><name>arg</name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>topic</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>par</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>topic</name></expr></argument>, <argument><expr><literal type="char">'='</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>par</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>par</name><operator>++</operator> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>topic</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>show_help_default</name><argument_list>(<argument><expr><name>topic</name></expr></argument>, <argument><expr><name>par</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>topic</name></expr></argument>, <argument><expr><literal type="string">"decoder"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>show_help_codec</name><argument_list>(<argument><expr><name>par</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>topic</name></expr></argument>, <argument><expr><literal type="string">"encoder"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>show_help_codec</name><argument_list>(<argument><expr><name>par</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>topic</name></expr></argument>, <argument><expr><literal type="string">"demuxer"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>show_help_demuxer</name><argument_list>(<argument><expr><name>par</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>topic</name></expr></argument>, <argument><expr><literal type="string">"muxer"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>show_help_muxer</name><argument_list>(<argument><expr><name>par</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>topic</name></expr></argument>, <argument><expr><literal type="string">"protocol"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>show_help_protocol</name><argument_list>(<argument><expr><name>par</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_AVFILTER</name></expr></cpp:if>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>topic</name></expr></argument>, <argument><expr><literal type="string">"filter"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>show_help_filter</name><argument_list>(<argument><expr><name>par</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>topic</name></expr></argument>, <argument><expr><literal type="string">"bsf"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>show_help_bsf</name><argument_list>(<argument><expr><name>par</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>show_help_default</name><argument_list>(<argument><expr><name>topic</name></expr></argument>, <argument><expr><name>par</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>topic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>read_yesno</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>c</name> <init>= <expr><call><name>getchar</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>yesno</name> <init>= <expr><operator>(</operator><call><name>av_toupper</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="char">'Y'</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>c</name> <operator>!=</operator> <literal type="char">'\n'</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>!=</operator> <name>EOF</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>getchar</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></while>

<return>return <expr><name>yesno</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>FILE</name> <modifier>*</modifier></type><name>get_preset_file</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>filename_size</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>preset_name</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>is_path</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>codec_name</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>f</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>base</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><call><name>getenv</name><argument_list>(<argument><expr><literal type="string">"FFMPEG_DATADIR"</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>getenv</name><argument_list>(<argument><expr><literal type="string">"HOME"</literal></expr></argument>)</argument_list></call></expr>,

<expr><name>FFMPEG_DATADIR</name></expr>, }</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>is_path</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_strlcpy</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><name>preset_name</name></expr></argument>, <argument><expr><name>filename_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>f</name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_GETMODULEHANDLE</name> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><name>char</name></type> <name><name>datadir</name><index>[<expr><name>MAX_PATH</name></expr>]</index></name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ls</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>base</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>GetModuleFileNameA</name><argument_list>(<argument><expr><call><name>GetModuleHandleA</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>datadir</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>datadir</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<for>for <control>(<init><expr><name>ls</name> <operator>=</operator> <name>datadir</name></expr>;</init> <condition><expr><name>ls</name> <operator>&lt;</operator> <name>datadir</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>datadir</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>ls</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>ls</name> <operator>==</operator> <literal type="char">'\\'</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>ls</name> <operator>=</operator> <literal type="char">'/'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name>ls</name> <operator>=</operator> <call><name>strrchr</name><argument_list>(<argument><expr><name>datadir</name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>ls</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strncat</name><argument_list>(<argument><expr><name>datadir</name></expr></argument>, <argument><expr><literal type="string">"/ffpresets"</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>datadir</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>datadir</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>base</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>datadir</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">3</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name>f</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>base</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><name>filename_size</name></expr></argument>, <argument><expr><literal type="string">"%s%s/%s.ffpreset"</literal></expr></argument>, <argument><expr><name><name>base</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,

<argument><expr><ternary><condition><expr><name>i</name> <operator>!=</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><literal type="string">""</literal></expr> </then><else>: <expr><literal type="string">"/.ffmpeg"</literal></expr></else></ternary></expr></argument>, <argument><expr><name>preset_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>f</name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>f</name> <operator>&amp;&amp;</operator> <name>codec_name</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><name>filename_size</name></expr></argument>,

<argument><expr><literal type="string">"%s%s/%s-%s.ffpreset"</literal></expr></argument>,

<argument><expr><name><name>base</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><ternary><condition><expr><name>i</name> <operator>!=</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><literal type="string">""</literal></expr> </then><else>: <expr><literal type="string">"/.ffmpeg"</literal></expr></else></ternary></expr></argument>, <argument><expr><name>codec_name</name></expr></argument>,

<argument><expr><name>preset_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>f</name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></else></if_stmt>

<return>return <expr><name>f</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>check_stream_specifier</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>AVStream</name> <modifier>*</modifier></type><name>st</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>spec</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>avformat_match_stream_specifier</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>st</name></expr></argument>, <argument><expr><name>spec</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid stream specifier: %s.\n"</literal></expr></argument>, <argument><expr><name>spec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>AVDictionary</name> <modifier>*</modifier></type><name>filter_codec_opts</name><parameter_list>(<parameter><decl><type><name>AVDictionary</name> <modifier>*</modifier></type><name>opts</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>AVCodecID</name></name></type> <name>codec_id</name></decl></parameter>,

<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>AVStream</name> <modifier>*</modifier></type><name>st</name></decl></parameter>, <parameter><decl><type><name>AVCodec</name> <modifier>*</modifier></type><name>codec</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVDictionary</name> <modifier>*</modifier></type><name>ret</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVDictionaryEntry</name> <modifier>*</modifier></type><name>t</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>flags</name> <init>= <expr><ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>oformat</name></name></expr> ?</condition><then> <expr><name>AV_OPT_FLAG_ENCODING_PARAM</name></expr>

</then><else>: <expr><name>AV_OPT_FLAG_DECODING_PARAM</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name>prefix</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>AVClass</name> <modifier>*</modifier></type><name>cc</name> <init>= <expr><call><name>avcodec_get_class</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>codec</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>codec</name> <operator>=</operator> <ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>oformat</name></name></expr> ?</condition><then> <expr><call><name>avcodec_find_encoder</name><argument_list>(<argument><expr><name>codec_id</name></expr></argument>)</argument_list></call></expr>

</then><else>: <expr><call><name>avcodec_find_decoder</name><argument_list>(<argument><expr><name>codec_id</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt></block_content></block></if></if_stmt>

<switch>switch <condition>(<expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_type</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>AVMEDIA_TYPE_VIDEO</name></expr>:</case>

<expr_stmt><expr><name>prefix</name> <operator>=</operator> <literal type="char">'v'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>AV_OPT_FLAG_VIDEO_PARAM</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AVMEDIA_TYPE_AUDIO</name></expr>:</case>

<expr_stmt><expr><name>prefix</name> <operator>=</operator> <literal type="char">'a'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>AV_OPT_FLAG_AUDIO_PARAM</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AVMEDIA_TYPE_SUBTITLE</name></expr>:</case>

<expr_stmt><expr><name>prefix</name> <operator>=</operator> <literal type="char">'s'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>AV_OPT_FLAG_SUBTITLE_PARAM</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<while>while <condition>(<expr><name>t</name> <operator>=</operator> <call><name>av_dict_get</name><argument_list>(<argument><expr><name>opts</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><name>AV_DICT_IGNORE_SUFFIX</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>strchr</name><argument_list>(<argument><expr><name><name>t</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><literal type="char">':'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name></expr>)</condition><block type="pseudo"><block_content>

<switch>switch <condition>(<expr><call><name>check_stream_specifier</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>st</name></expr></argument>, <argument><expr><name>p</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">1</literal></expr>:</case> <expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">0</literal></expr>:</case> <continue>continue;</continue>

<default>default:</default> <expr_stmt><expr><call><name>exit_program</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></switch></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>av_opt_find</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cc</name></expr></argument>, <argument><expr><name><name>t</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>AV_OPT_SEARCH_FAKE_OBJ</name></expr></argument>)</argument_list></call> <operator>||</operator>

<operator>!</operator><name>codec</name> <operator>||</operator>

<operator>(</operator><name><name>codec</name><operator>-&gt;</operator><name>priv_class</name></name> <operator>&amp;&amp;</operator>

<call><name>av_opt_find</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>codec</name><operator>-&gt;</operator><name>priv_class</name></name></expr></argument>, <argument><expr><name><name>t</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>,

<argument><expr><name>AV_OPT_SEARCH_FAKE_OBJ</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_dict_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ret</name></expr></argument>, <argument><expr><name><name>t</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><name><name>t</name><operator>-&gt;</operator><name>value</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>t</name><operator>-&gt;</operator><name>key</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>prefix</name> <operator>&amp;&amp;</operator>

<call><name>av_opt_find</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cc</name></expr></argument>, <argument><expr><name><name>t</name><operator>-&gt;</operator><name>key</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>,

<argument><expr><name>AV_OPT_SEARCH_FAKE_OBJ</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_dict_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ret</name></expr></argument>, <argument><expr><name><name>t</name><operator>-&gt;</operator><name>key</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>t</name><operator>-&gt;</operator><name>value</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <literal type="char">':'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></while>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>AVDictionary</name> <modifier>*</modifier><modifier>*</modifier></type><name>setup_find_stream_info_opts</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>,

<parameter><decl><type><name>AVDictionary</name> <modifier>*</modifier></type><name>codec_opts</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVDictionary</name> <modifier>*</modifier><modifier>*</modifier></type><name>opts</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>nb_streams</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>opts</name> <operator>=</operator> <call><name>av_mallocz_array</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>nb_streams</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>opts</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>opts</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"Could not alloc memory for stream options.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>nb_streams</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>opts</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>filter_codec_opts</name><argument_list>(<argument><expr><name>codec_opts</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name><name>codecpar</name><operator>-&gt;</operator><name>codec_id</name></name></expr></argument>,

<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<return>return <expr><name>opts</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type><name>grow_array</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>array</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>elem_size</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>new_size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>new_size</name> <operator>&gt;=</operator> <name>INT_MAX</name> <operator>/</operator> <name>elem_size</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Array too big.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>exit_program</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>size</name> <operator>&lt;</operator> <name>new_size</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>tmp</name> <init>= <expr><call><name>av_realloc_array</name><argument_list>(<argument><expr><name>array</name></expr></argument>, <argument><expr><name>new_size</name></expr></argument>, <argument><expr><name>elem_size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>tmp</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Could not alloc buffer.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>exit_program</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>tmp</name> <operator>+</operator> <operator>*</operator><name>size</name><operator>*</operator><name>elem_size</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name>new_size</name><operator>-</operator><operator>*</operator><name>size</name><operator>)</operator> <operator>*</operator> <name>elem_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>size</name> <operator>=</operator> <name>new_size</name></expr>;</expr_stmt>

<return>return <expr><name>tmp</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>array</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>double</name></type> <name>get_rotation</name><parameter_list>(<parameter><decl><type><name>AVStream</name> <modifier>*</modifier></type><name>st</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name><modifier>*</modifier></type> <name>displaymatrix</name> <init>= <expr><call><name>av_stream_get_side_data</name><argument_list>(<argument><expr><name>st</name></expr></argument>,

<argument><expr><name>AV_PKT_DATA_DISPLAYMATRIX</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>theta</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>displaymatrix</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>theta</name> <operator>=</operator> <operator>-</operator><call><name>av_display_rotation_get</name><argument_list>(<argument><expr><operator>(</operator><name>int32_t</name><operator>*</operator><operator>)</operator> <name>displaymatrix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>theta</name> <operator>-=</operator> <literal type="number">360</literal><operator>*</operator><call><name>floor</name><argument_list>(<argument><expr><name>theta</name><operator>/</operator><literal type="number">360</literal> <operator>+</operator> <literal type="number">0.9</literal><operator>/</operator><literal type="number">360</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>fabs</name><argument_list>(<argument><expr><name>theta</name> <operator>-</operator> <literal type="number">90</literal><operator>*</operator><call><name>round</name><argument_list>(<argument><expr><name>theta</name><operator>/</operator><literal type="number">90</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Odd rotation angle.\n"</literal>

<literal type="string">"If you want to help, upload a sample "</literal>

<literal type="string">"of this file to ftp://upload.ffmpeg.org/incoming/ "</literal>

<literal type="string">"and contact the ffmpeg-devel mailing list. (ffmpeg-devel@ffmpeg.org)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>theta</name></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_AVDEVICE</name></expr></cpp:if>

<function><type><specifier>static</specifier> <name>int</name></type> <name>print_device_sources</name><parameter_list>(<parameter><decl><type><name>AVInputFormat</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><name>AVDictionary</name> <modifier>*</modifier></type><name>opts</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVDeviceInfoList</name> <modifier>*</modifier></type><name>device_list</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>fmt</name> <operator>||</operator> <operator>!</operator><name><name>fmt</name><operator>-&gt;</operator><name>priv_class</name></name> <operator>||</operator> <operator>!</operator><call><name>AV_IS_INPUT_DEVICE</name><argument_list>(<argument><expr><name><name>fmt</name><operator>-&gt;</operator><name>priv_class</name><operator>-&gt;</operator><name>category</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Auto-detected sources for %s:\n"</literal></expr></argument>, <argument><expr><name><name>fmt</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>fmt</name><operator>-&gt;</operator><name>get_device_list</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOSYS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Cannot list sources. Not implemented.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>avdevice_list_input_sources</name><argument_list>(<argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>opts</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>device_list</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Cannot list sources.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>device_list</name><operator>-&gt;</operator><name>nb_devices</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s %s [%s]\n"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name><name>device_list</name><operator>-&gt;</operator><name>default_device</name></name> <operator>==</operator> <name>i</name></expr> ?</condition><then> <expr><literal type="string">"*"</literal></expr> </then><else>: <expr><literal type="string">" "</literal></expr></else></ternary></expr></argument>,

<argument><expr><name><name>device_list</name><operator>-&gt;</operator><name>devices</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>device_name</name></expr></argument>, <argument><expr><name><name>device_list</name><operator>-&gt;</operator><name>devices</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>device_description</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<label><name>fail</name>:</label>

<expr_stmt><expr><call><name>avdevice_free_list_devices</name><argument_list>(<argument><expr><operator>&amp;</operator><name>device_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>print_device_sinks</name><parameter_list>(<parameter><decl><type><name>AVOutputFormat</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><name>AVDictionary</name> <modifier>*</modifier></type><name>opts</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVDeviceInfoList</name> <modifier>*</modifier></type><name>device_list</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>fmt</name> <operator>||</operator> <operator>!</operator><name><name>fmt</name><operator>-&gt;</operator><name>priv_class</name></name> <operator>||</operator> <operator>!</operator><call><name>AV_IS_OUTPUT_DEVICE</name><argument_list>(<argument><expr><name><name>fmt</name><operator>-&gt;</operator><name>priv_class</name><operator>-&gt;</operator><name>category</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Auto-detected sinks for %s:\n"</literal></expr></argument>, <argument><expr><name><name>fmt</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>fmt</name><operator>-&gt;</operator><name>get_device_list</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOSYS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Cannot list sinks. Not implemented.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>avdevice_list_output_sinks</name><argument_list>(<argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>opts</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>device_list</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Cannot list sinks.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>device_list</name><operator>-&gt;</operator><name>nb_devices</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s %s [%s]\n"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name><name>device_list</name><operator>-&gt;</operator><name>default_device</name></name> <operator>==</operator> <name>i</name></expr> ?</condition><then> <expr><literal type="string">"*"</literal></expr> </then><else>: <expr><literal type="string">" "</literal></expr></else></ternary></expr></argument>,

<argument><expr><name><name>device_list</name><operator>-&gt;</operator><name>devices</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>device_name</name></expr></argument>, <argument><expr><name><name>device_list</name><operator>-&gt;</operator><name>devices</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>device_description</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<label><name>fail</name>:</label>

<expr_stmt><expr><call><name>avdevice_free_list_devices</name><argument_list>(<argument><expr><operator>&amp;</operator><name>device_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>show_sinks_sources_parse_arg</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>dev</name></decl></parameter>, <parameter><decl><type><name>AVDictionary</name> <modifier>*</modifier><modifier>*</modifier></type><name>opts</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>arg</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>opts_str</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name>dev</name> <operator>&amp;&amp;</operator> <name>opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>dev</name> <operator>=</operator> <call><name>av_strdup</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>dev</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>opts_str</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><operator>*</operator><name>dev</name></expr></argument>, <argument><expr><literal type="char">','</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><operator>(</operator><name>opts_str</name><operator>++</operator><operator>)</operator> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>opts_str</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>av_dict_parse_string</name><argument_list>(<argument><expr><name>opts</name></expr></argument>, <argument><expr><name>opts_str</name></expr></argument>, <argument><expr><literal type="string">"="</literal></expr></argument>, <argument><expr><literal type="string">":"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><name>dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\nDevice name is not provided.\n"</literal>

<literal type="string">"You can pass devicename[,opt1=val1[,opt2=val2...]] as an argument.\n\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>show_sources</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>optctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>opt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVInputFormat</name> <modifier>*</modifier></type><name>fmt</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>dev</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVDictionary</name> <modifier>*</modifier></type><name>opts</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>error_level</name> <init>= <expr><call><name>av_log_get_level</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_log_set_level</name><argument_list>(<argument><expr><name>AV_LOG_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>show_sinks_sources_parse_arg</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dev</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>opts</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<do>do <block>{<block_content>

<expr_stmt><expr><name>fmt</name> <operator>=</operator> <call><name>av_input_audio_device_next</name><argument_list>(<argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>fmt</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>fmt</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="string">"lavfi"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt> 

<if_stmt><if>if <condition>(<expr><name>dev</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>av_match_name</name><argument_list>(<argument><expr><name>dev</name></expr></argument>, <argument><expr><name><name>fmt</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>print_device_sources</name><argument_list>(<argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block> while <condition>(<expr><name>fmt</name></expr>)</condition>;</do>

<do>do <block>{<block_content>

<expr_stmt><expr><name>fmt</name> <operator>=</operator> <call><name>av_input_video_device_next</name><argument_list>(<argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>fmt</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>dev</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>av_match_name</name><argument_list>(<argument><expr><name>dev</name></expr></argument>, <argument><expr><name><name>fmt</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>print_device_sources</name><argument_list>(<argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block> while <condition>(<expr><name>fmt</name></expr>)</condition>;</do>

<label><name>fail</name>:</label>

<expr_stmt><expr><call><name>av_dict_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log_set_level</name><argument_list>(<argument><expr><name>error_level</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>show_sinks</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>optctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>opt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVOutputFormat</name> <modifier>*</modifier></type><name>fmt</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>dev</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVDictionary</name> <modifier>*</modifier></type><name>opts</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>error_level</name> <init>= <expr><call><name>av_log_get_level</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_log_set_level</name><argument_list>(<argument><expr><name>AV_LOG_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>show_sinks_sources_parse_arg</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dev</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>opts</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<do>do <block>{<block_content>

<expr_stmt><expr><name>fmt</name> <operator>=</operator> <call><name>av_output_audio_device_next</name><argument_list>(<argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>fmt</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>dev</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>av_match_name</name><argument_list>(<argument><expr><name>dev</name></expr></argument>, <argument><expr><name><name>fmt</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>print_device_sinks</name><argument_list>(<argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block> while <condition>(<expr><name>fmt</name></expr>)</condition>;</do>

<do>do <block>{<block_content>

<expr_stmt><expr><name>fmt</name> <operator>=</operator> <call><name>av_output_video_device_next</name><argument_list>(<argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>fmt</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>dev</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>av_match_name</name><argument_list>(<argument><expr><name>dev</name></expr></argument>, <argument><expr><name><name>fmt</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>print_device_sinks</name><argument_list>(<argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block> while <condition>(<expr><name>fmt</name></expr>)</condition>;</do>

<label><name>fail</name>:</label>

<expr_stmt><expr><call><name>av_dict_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log_set_level</name><argument_list>(<argument><expr><name>error_level</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
