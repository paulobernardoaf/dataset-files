<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\fftools\ffmpeg_filter.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ffmpeg.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavfilter/avfilter.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavfilter/buffersink.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavfilter/buffersrc.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavresample/avresample.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avassert.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avstring.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/bprint.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/channel_layout.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/display.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/opt.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/pixdesc.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/pixfmt.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/imgutils.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/samplefmt.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name><name>enum</name> <name>AVPixelFormat</name></name> <modifier>*</modifier></type><name>get_compliance_unofficial_pix_fmts</name><parameter_list>(<parameter><decl><type><name><name>enum</name> <name>AVCodecID</name></name></type> <name>codec_id</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>enum</name> <name>AVPixelFormat</name></name></type> <name><name>default_formats</name><index>[]</index></name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>enum</name> <name>AVPixelFormat</name></name></type> <name><name>mjpeg_formats</name><index>[]</index></name> <init>=

<expr><block>{ <expr><name>AV_PIX_FMT_YUVJ420P</name></expr>, <expr><name>AV_PIX_FMT_YUVJ422P</name></expr>, <expr><name>AV_PIX_FMT_YUVJ444P</name></expr>,

<expr><name>AV_PIX_FMT_YUV420P</name></expr>, <expr><name>AV_PIX_FMT_YUV422P</name></expr>, <expr><name>AV_PIX_FMT_YUV444P</name></expr>,

<expr><name>AV_PIX_FMT_NONE</name></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>enum</name> <name>AVPixelFormat</name></name></type> <name><name>ljpeg_formats</name><index>[]</index></name> <init>=

<expr><block>{ <expr><name>AV_PIX_FMT_BGR24</name></expr> , <expr><name>AV_PIX_FMT_BGRA</name></expr> , <expr><name>AV_PIX_FMT_BGR0</name></expr>,

<expr><name>AV_PIX_FMT_YUVJ420P</name></expr>, <expr><name>AV_PIX_FMT_YUVJ444P</name></expr>, <expr><name>AV_PIX_FMT_YUVJ422P</name></expr>,

<expr><name>AV_PIX_FMT_YUV420P</name></expr> , <expr><name>AV_PIX_FMT_YUV444P</name></expr> , <expr><name>AV_PIX_FMT_YUV422P</name></expr>,

<expr><name>AV_PIX_FMT_NONE</name></expr>}</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>codec_id</name> <operator>==</operator> <name>AV_CODEC_ID_MJPEG</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>mjpeg_formats</name></expr>;</return>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>codec_id</name> <operator>==</operator> <name>AV_CODEC_ID_LJPEG</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>ljpeg_formats</name></expr>;</return>

</block_content>}</block></if> <else>else <block>{<block_content>

<return>return <expr><name>default_formats</name></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>choose_pixel_fmt</name><parameter_list>(<parameter><decl><type><name>AVStream</name> <modifier>*</modifier></type><name>st</name></decl></parameter>, <parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>enc_ctx</name></decl></parameter>, <parameter><decl><type><name>AVCodec</name> <modifier>*</modifier></type><name>codec</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>target</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>codec</name> <operator>&amp;&amp;</operator> <name><name>codec</name><operator>-&gt;</operator><name>pix_fmts</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>enum</name> <name>AVPixelFormat</name></name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name><name>codec</name><operator>-&gt;</operator><name>pix_fmts</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>AVPixFmtDescriptor</name> <modifier>*</modifier></type><name>desc</name> <init>= <expr><call><name>av_pix_fmt_desc_get</name><argument_list>(<argument><expr><name>target</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>has_alpha</name> <init>= <expr><ternary><condition><expr><name>desc</name></expr> ?</condition><then> <expr><name><name>desc</name><operator>-&gt;</operator><name>nb_components</name></name> <operator>%</operator> <literal type="number">2</literal> <operator>==</operator> <literal type="number">0</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>best</name><init>= <expr><name>AV_PIX_FMT_NONE</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>enc_ctx</name><operator>-&gt;</operator><name>strict_std_compliance</name></name> <operator>&lt;=</operator> <name>FF_COMPLIANCE_UNOFFICIAL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>get_compliance_unofficial_pix_fmts</name><argument_list>(<argument><expr><name><name>enc_ctx</name><operator>-&gt;</operator><name>codec_id</name></name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init>;</init> <condition><expr><operator>*</operator><name>p</name> <operator>!=</operator> <name>AV_PIX_FMT_NONE</name></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>best</name><operator>=</operator> <call><name>avcodec_find_best_pix_fmt_of_2</name><argument_list>(<argument><expr><name>best</name></expr></argument>, <argument><expr><operator>*</operator><name>p</name></expr></argument>, <argument><expr><name>target</name></expr></argument>, <argument><expr><name>has_alpha</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <name>target</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <name>AV_PIX_FMT_NONE</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>target</name> <operator>!=</operator> <name>AV_PIX_FMT_NONE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>,

<argument><expr><literal type="string">"Incompatible pixel format '%s' for codec '%s', auto-selecting format '%s'\n"</literal></expr></argument>,

<argument><expr><call><name>av_get_pix_fmt_name</name><argument_list>(<argument><expr><name>target</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name><name>codec</name><operator>-&gt;</operator><name>name</name></name></expr></argument>,

<argument><expr><call><name>av_get_pix_fmt_name</name><argument_list>(<argument><expr><name>best</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>best</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>target</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>choose_sample_fmt</name><parameter_list>(<parameter><decl><type><name>AVStream</name> <modifier>*</modifier></type><name>st</name></decl></parameter>, <parameter><decl><type><name>AVCodec</name> <modifier>*</modifier></type><name>codec</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>codec</name> <operator>&amp;&amp;</operator> <name><name>codec</name><operator>-&gt;</operator><name>sample_fmts</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>enum</name> <name>AVSampleFormat</name></name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name><name>codec</name><operator>-&gt;</operator><name>sample_fmts</name></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init>;</init> <condition><expr><operator>*</operator><name>p</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>format</name></name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>codec</name><operator>-&gt;</operator><name>capabilities</name></name> <operator>&amp;</operator> <name>AV_CODEC_CAP_LOSSLESS</name><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>av_get_sample_fmt_name</name><argument_list>(<argument><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>format</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <call><name>av_get_sample_fmt_name</name><argument_list>(<argument><expr><name><name>codec</name><operator>-&gt;</operator><name>sample_fmts</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Conversion will not be lossless.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><call><name>av_get_sample_fmt_name</name><argument_list>(<argument><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>format</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>,

<argument><expr><literal type="string">"Incompatible sample format '%s' for codec '%s', auto-selecting format '%s'\n"</literal></expr></argument>,

<argument><expr><call><name>av_get_sample_fmt_name</name><argument_list>(<argument><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>format</name></name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name><name>codec</name><operator>-&gt;</operator><name>name</name></name></expr></argument>,

<argument><expr><call><name>av_get_sample_fmt_name</name><argument_list>(<argument><expr><name><name>codec</name><operator>-&gt;</operator><name>sample_fmts</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>format</name></name> <operator>=</operator> <name><name>codec</name><operator>-&gt;</operator><name>sample_fmts</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>choose_pix_fmts</name><parameter_list>(<parameter><decl><type><name>OutputFilter</name> <modifier>*</modifier></type><name>ofilter</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>OutputStream</name> <modifier>*</modifier></type><name>ost</name> <init>= <expr><name><name>ofilter</name><operator>-&gt;</operator><name>ost</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVDictionaryEntry</name> <modifier>*</modifier></type><name>strict_dict</name> <init>= <expr><call><name>av_dict_get</name><argument_list>(<argument><expr><name><name>ost</name><operator>-&gt;</operator><name>encoder_opts</name></name></expr></argument>, <argument><expr><literal type="string">"strict"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>strict_dict</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_opt_set</name><argument_list>(<argument><expr><name><name>ost</name><operator>-&gt;</operator><name>enc_ctx</name></name></expr></argument>, <argument><expr><literal type="string">"strict"</literal></expr></argument>, <argument><expr><name><name>strict_dict</name><operator>-&gt;</operator><name>value</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ost</name><operator>-&gt;</operator><name>keep_pix_fmt</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>avfilter_graph_set_auto_convert</name><argument_list>(<argument><expr><name><name>ofilter</name><operator>-&gt;</operator><name>graph</name><operator>-&gt;</operator><name>graph</name></name></expr></argument>,

<argument><expr><name>AVFILTER_AUTO_CONVERT_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ost</name><operator>-&gt;</operator><name>enc_ctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>==</operator> <name>AV_PIX_FMT_NONE</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>av_strdup</name><argument_list>(<argument><expr><call><name>av_get_pix_fmt_name</name><argument_list>(<argument><expr><name><name>ost</name><operator>-&gt;</operator><name>enc_ctx</name><operator>-&gt;</operator><name>pix_fmt</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ost</name><operator>-&gt;</operator><name>enc_ctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>!=</operator> <name>AV_PIX_FMT_NONE</name></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>av_strdup</name><argument_list>(<argument><expr><call><name>av_get_pix_fmt_name</name><argument_list>(<argument><expr><call><name>choose_pixel_fmt</name><argument_list>(<argument><expr><name><name>ost</name><operator>-&gt;</operator><name>st</name></name></expr></argument>, <argument><expr><name><name>ost</name><operator>-&gt;</operator><name>enc_ctx</name></name></expr></argument>, <argument><expr><name><name>ost</name><operator>-&gt;</operator><name>enc</name></name></expr></argument>, <argument><expr><name><name>ost</name><operator>-&gt;</operator><name>enc_ctx</name><operator>-&gt;</operator><name>pix_fmt</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>ost</name><operator>-&gt;</operator><name>enc</name></name> <operator>&amp;&amp;</operator> <name><name>ost</name><operator>-&gt;</operator><name>enc</name><operator>-&gt;</operator><name>pix_fmts</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>enum</name> <name>AVPixelFormat</name></name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>avio_open_dyn_buf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>exit_program</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>ost</name><operator>-&gt;</operator><name>enc</name><operator>-&gt;</operator><name>pix_fmts</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ost</name><operator>-&gt;</operator><name>enc_ctx</name><operator>-&gt;</operator><name>strict_std_compliance</name></name> <operator>&lt;=</operator> <name>FF_COMPLIANCE_UNOFFICIAL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>get_compliance_unofficial_pix_fmts</name><argument_list>(<argument><expr><name><name>ost</name><operator>-&gt;</operator><name>enc_ctx</name><operator>-&gt;</operator><name>codec_id</name></name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init>;</init> <condition><expr><operator>*</operator><name>p</name> <operator>!=</operator> <name>AV_PIX_FMT_NONE</name></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><call><name>av_get_pix_fmt_name</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>avio_printf</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"%s|"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>avio_close_dyn_buf</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ret</name><index>[<expr><name>len</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></else></if_stmt>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEF_CHOOSE_FORMAT</name><parameter_list>(<parameter><type><name>suffix</name></type></parameter>, <parameter><type><name>type</name></type></parameter>, <parameter><type><name>var</name></type></parameter>, <parameter><type><name>supported_list</name></type></parameter>, <parameter><type><name>none</name></type></parameter>, <parameter><type><name>get_name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static char *choose_ ##suffix (OutputFilter *ofilter) { if (ofilter-&gt;var != none) { get_name(ofilter-&gt;var); return av_strdup(name); } else if (ofilter-&gt;supported_list) { const type *p; AVIOContext *s = NULL; uint8_t *ret; int len; if (avio_open_dyn_buf(&amp;s) &lt; 0) exit_program(1); for (p = ofilter-&gt;supported_list; *p != none; p++) { get_name(*p); avio_printf(s, "%s|", name); } len = avio_close_dyn_buf(s, &amp;ret); ret[len - 1] = 0; return ret; } else return NULL; }</cpp:value></cpp:define>

<macro><name>DEF_CHOOSE_FORMAT</name><argument_list>(<argument>sample_fmts</argument>, <argument>enum AVSampleFormat</argument>, <argument>format</argument>, <argument>formats</argument>,

<argument>AV_SAMPLE_FMT_NONE</argument>, <argument>GET_SAMPLE_FMT_NAME</argument>)</argument_list></macro>

<macro><name>DEF_CHOOSE_FORMAT</name><argument_list>(<argument>sample_rates</argument>, <argument>int</argument>, <argument>sample_rate</argument>, <argument>sample_rates</argument>, <argument><literal type="number">0</literal></argument>,

<argument>GET_SAMPLE_RATE_NAME</argument>)</argument_list></macro>

<macro><name>DEF_CHOOSE_FORMAT</name><argument_list>(<argument>channel_layouts</argument>, <argument>uint64_t</argument>, <argument>channel_layout</argument>, <argument>channel_layouts</argument>, <argument><literal type="number">0</literal></argument>,

<argument>GET_CH_LAYOUT_NAME</argument>)</argument_list></macro>

<function><type><name>int</name></type> <name>init_simple_filtergraph</name><parameter_list>(<parameter><decl><type><name>InputStream</name> <modifier>*</modifier></type><name>ist</name></decl></parameter>, <parameter><decl><type><name>OutputStream</name> <modifier>*</modifier></type><name>ost</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>FilterGraph</name> <modifier>*</modifier></type><name>fg</name> <init>= <expr><call><name>av_mallocz</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>fg</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>fg</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>exit_program</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>fg</name><operator>-&gt;</operator><name>index</name></name> <operator>=</operator> <name>nb_filtergraphs</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GROW_ARRAY</name><argument_list>(<argument><expr><name><name>fg</name><operator>-&gt;</operator><name>outputs</name></name></expr></argument>, <argument><expr><name><name>fg</name><operator>-&gt;</operator><name>nb_outputs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>fg</name><operator>-&gt;</operator><name>outputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>fg</name><operator>-&gt;</operator><name>outputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>exit_program</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>fg</name><operator>-&gt;</operator><name>outputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>ost</name> <operator>=</operator> <name>ost</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fg</name><operator>-&gt;</operator><name>outputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>graph</name> <operator>=</operator> <name>fg</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fg</name><operator>-&gt;</operator><name>outputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>format</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ost</name><operator>-&gt;</operator><name>filter</name></name> <operator>=</operator> <name><name>fg</name><operator>-&gt;</operator><name>outputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GROW_ARRAY</name><argument_list>(<argument><expr><name><name>fg</name><operator>-&gt;</operator><name>inputs</name></name></expr></argument>, <argument><expr><name><name>fg</name><operator>-&gt;</operator><name>nb_inputs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>fg</name><operator>-&gt;</operator><name>inputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>fg</name><operator>-&gt;</operator><name>inputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>exit_program</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>fg</name><operator>-&gt;</operator><name>inputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>ist</name> <operator>=</operator> <name>ist</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fg</name><operator>-&gt;</operator><name>inputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>graph</name> <operator>=</operator> <name>fg</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fg</name><operator>-&gt;</operator><name>inputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>format</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fg</name><operator>-&gt;</operator><name>inputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>frame_queue</name> <operator>=</operator> <call><name>av_fifo_alloc</name><argument_list>(<argument><expr><literal type="number">8</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>AVFrame</name><operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>fg</name><operator>-&gt;</operator><name>inputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>frame_queue</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>exit_program</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>GROW_ARRAY</name><argument_list>(<argument><expr><name><name>ist</name><operator>-&gt;</operator><name>filters</name></name></expr></argument>, <argument><expr><name><name>ist</name><operator>-&gt;</operator><name>nb_filters</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ist</name><operator>-&gt;</operator><name>filters</name><index>[<expr><name><name>ist</name><operator>-&gt;</operator><name>nb_filters</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>fg</name><operator>-&gt;</operator><name>inputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GROW_ARRAY</name><argument_list>(<argument><expr><name>filtergraphs</name></expr></argument>, <argument><expr><name>nb_filtergraphs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>filtergraphs</name><index>[<expr><name>nb_filtergraphs</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>fg</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>describe_filter_link</name><parameter_list>(<parameter><decl><type><name>FilterGraph</name> <modifier>*</modifier></type><name>fg</name></decl></parameter>, <parameter><decl><type><name>AVFilterInOut</name> <modifier>*</modifier></type><name>inout</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>in</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>inout</name><operator>-&gt;</operator><name>filter_ctx</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFilterPad</name> <modifier>*</modifier></type><name>pads</name> <init>= <expr><ternary><condition><expr><name>in</name></expr> ?</condition><then> <expr><name><name>ctx</name><operator>-&gt;</operator><name>input_pads</name></name></expr> </then><else>: <expr><name><name>ctx</name><operator>-&gt;</operator><name>output_pads</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>nb_pads</name> <init>= <expr><ternary><condition><expr><name>in</name></expr> ?</condition><then> <expr><name><name>ctx</name><operator>-&gt;</operator><name>nb_inputs</name></name></expr> </then><else>: <expr><name><name>ctx</name><operator>-&gt;</operator><name>nb_outputs</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>avio_open_dyn_buf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>exit_program</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>avio_printf</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>filter</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>nb_pads</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>avio_printf</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="string">":%s"</literal></expr></argument>, <argument><expr><call><name>avfilter_pad_get_name</name><argument_list>(<argument><expr><name>pads</name></expr></argument>, <argument><expr><name><name>inout</name><operator>-&gt;</operator><name>pad_idx</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>avio_w8</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_close_dyn_buf</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>res</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>init_input_filter</name><parameter_list>(<parameter><decl><type><name>FilterGraph</name> <modifier>*</modifier></type><name>fg</name></decl></parameter>, <parameter><decl><type><name>AVFilterInOut</name> <modifier>*</modifier></type><name>in</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>InputStream</name> <modifier>*</modifier></type><name>ist</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>AVMediaType</name></name></type> <name>type</name> <init>= <expr><call><name>avfilter_pad_get_type</name><argument_list>(<argument><expr><name><name>in</name><operator>-&gt;</operator><name>filter_ctx</name><operator>-&gt;</operator><name>input_pads</name></name></expr></argument>, <argument><expr><name><name>in</name><operator>-&gt;</operator><name>pad_idx</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>type</name> <operator>!=</operator> <name>AVMEDIA_TYPE_VIDEO</name> <operator>&amp;&amp;</operator> <name>type</name> <operator>!=</operator> <name>AVMEDIA_TYPE_AUDIO</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_FATAL</name></expr></argument>, <argument><expr><literal type="string">"Only video and audio filters supported "</literal>

<literal type="string">"currently.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>exit_program</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>in</name><operator>-&gt;</operator><name>name</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVStream</name> <modifier>*</modifier></type><name>st</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>file_idx</name> <init>= <expr><call><name>strtol</name><argument_list>(<argument><expr><name><name>in</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>file_idx</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>file_idx</name> <operator>&gt;=</operator> <name>nb_input_files</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_FATAL</name></expr></argument>, <argument><expr><literal type="string">"Invalid file index %d in filtergraph description %s.\n"</literal></expr></argument>,

<argument><expr><name>file_idx</name></expr></argument>, <argument><expr><name><name>fg</name><operator>-&gt;</operator><name>graph_desc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>exit_program</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <name><name>input_files</name><index>[<expr><name>file_idx</name></expr>]</index></name><operator>-&gt;</operator><name>ctx</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>nb_streams</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name><name>enum</name> <name>AVMediaType</name></name></type> <name>stream_type</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name><name>codecpar</name><operator>-&gt;</operator><name>codec_type</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>stream_type</name> <operator>!=</operator> <name>type</name> <operator>&amp;&amp;</operator>

<operator>!</operator><operator>(</operator><name>stream_type</name> <operator>==</operator> <name>AVMEDIA_TYPE_SUBTITLE</name> <operator>&amp;&amp;</operator>

<name>type</name> <operator>==</operator> <name>AVMEDIA_TYPE_VIDEO</name> <operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>check_stream_specifier</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><ternary><condition><expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">':'</literal></expr> ?</condition><then> <expr><name>p</name> <operator>+</operator> <literal type="number">1</literal></expr> </then><else>: <expr><name>p</name></expr></else></ternary></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>st</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>st</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_FATAL</name></expr></argument>, <argument><expr><literal type="string">"Stream specifier '%s' in filtergraph description %s "</literal>

<literal type="string">"matches no streams.\n"</literal></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>fg</name><operator>-&gt;</operator><name>graph_desc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>exit_program</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ist</name> <operator>=</operator> <name><name>input_streams</name><index>[<expr><name><name>input_files</name><index>[<expr><name>file_idx</name></expr>]</index></name><operator>-&gt;</operator><name>ist_index</name> <operator>+</operator> <name><name>st</name><operator>-&gt;</operator><name>index</name></name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ist</name><operator>-&gt;</operator><name>user_set_discard</name></name> <operator>==</operator> <name>AVDISCARD_ALL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_FATAL</name></expr></argument>, <argument><expr><literal type="string">"Stream specifier '%s' in filtergraph description %s "</literal>

<literal type="string">"matches a disabled input stream.\n"</literal></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>fg</name><operator>-&gt;</operator><name>graph_desc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>exit_program</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nb_input_streams</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>ist</name> <operator>=</operator> <name><name>input_streams</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ist</name><operator>-&gt;</operator><name>user_set_discard</name></name> <operator>==</operator> <name>AVDISCARD_ALL</name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ist</name><operator>-&gt;</operator><name>dec_ctx</name><operator>-&gt;</operator><name>codec_type</name></name> <operator>==</operator> <name>type</name> <operator>&amp;&amp;</operator> <name><name>ist</name><operator>-&gt;</operator><name>discard</name></name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <name>nb_input_streams</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_FATAL</name></expr></argument>, <argument><expr><literal type="string">"Cannot find a matching stream for "</literal>

<literal type="string">"unlabeled input pad %d on filter %s\n"</literal></expr></argument>, <argument><expr><name><name>in</name><operator>-&gt;</operator><name>pad_idx</name></name></expr></argument>,

<argument><expr><name><name>in</name><operator>-&gt;</operator><name>filter_ctx</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>exit_program</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name>ist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ist</name><operator>-&gt;</operator><name>discard</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ist</name><operator>-&gt;</operator><name>decoding_needed</name></name> <operator>|=</operator> <name>DECODING_FOR_FILTER</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ist</name><operator>-&gt;</operator><name>st</name><operator>-&gt;</operator><name>discard</name></name> <operator>=</operator> <name>AVDISCARD_NONE</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GROW_ARRAY</name><argument_list>(<argument><expr><name><name>fg</name><operator>-&gt;</operator><name>inputs</name></name></expr></argument>, <argument><expr><name><name>fg</name><operator>-&gt;</operator><name>nb_inputs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>fg</name><operator>-&gt;</operator><name>inputs</name><index>[<expr><name><name>fg</name><operator>-&gt;</operator><name>nb_inputs</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>fg</name><operator>-&gt;</operator><name>inputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>exit_program</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>fg</name><operator>-&gt;</operator><name>inputs</name><index>[<expr><name><name>fg</name><operator>-&gt;</operator><name>nb_inputs</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>ist</name> <operator>=</operator> <name>ist</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fg</name><operator>-&gt;</operator><name>inputs</name><index>[<expr><name><name>fg</name><operator>-&gt;</operator><name>nb_inputs</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>graph</name> <operator>=</operator> <name>fg</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fg</name><operator>-&gt;</operator><name>inputs</name><index>[<expr><name><name>fg</name><operator>-&gt;</operator><name>nb_inputs</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>format</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fg</name><operator>-&gt;</operator><name>inputs</name><index>[<expr><name><name>fg</name><operator>-&gt;</operator><name>nb_inputs</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>type</name> <operator>=</operator> <name><name>ist</name><operator>-&gt;</operator><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_type</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fg</name><operator>-&gt;</operator><name>inputs</name><index>[<expr><name><name>fg</name><operator>-&gt;</operator><name>nb_inputs</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>name</name> <operator>=</operator> <call><name>describe_filter_link</name><argument_list>(<argument><expr><name>fg</name></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fg</name><operator>-&gt;</operator><name>inputs</name><index>[<expr><name><name>fg</name><operator>-&gt;</operator><name>nb_inputs</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>frame_queue</name> <operator>=</operator> <call><name>av_fifo_alloc</name><argument_list>(<argument><expr><literal type="number">8</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>AVFrame</name><operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>fg</name><operator>-&gt;</operator><name>inputs</name><index>[<expr><name><name>fg</name><operator>-&gt;</operator><name>nb_inputs</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>frame_queue</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>exit_program</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>GROW_ARRAY</name><argument_list>(<argument><expr><name><name>ist</name><operator>-&gt;</operator><name>filters</name></name></expr></argument>, <argument><expr><name><name>ist</name><operator>-&gt;</operator><name>nb_filters</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ist</name><operator>-&gt;</operator><name>filters</name><index>[<expr><name><name>ist</name><operator>-&gt;</operator><name>nb_filters</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>fg</name><operator>-&gt;</operator><name>inputs</name><index>[<expr><name><name>fg</name><operator>-&gt;</operator><name>nb_inputs</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>init_complex_filtergraph</name><parameter_list>(<parameter><decl><type><name>FilterGraph</name> <modifier>*</modifier></type><name>fg</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVFilterInOut</name> <modifier>*</modifier></type><name>inputs</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>outputs</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>cur</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFilterGraph</name> <modifier>*</modifier></type><name>graph</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>graph</name> <operator>=</operator> <call><name>avfilter_graph_alloc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>graph</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>graph</name><operator>-&gt;</operator><name>nb_threads</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>avfilter_graph_parse2</name><argument_list>(<argument><expr><name>graph</name></expr></argument>, <argument><expr><name><name>fg</name><operator>-&gt;</operator><name>graph_desc</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>inputs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>outputs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>cur</name> <operator>=</operator> <name>inputs</name></expr>;</init> <condition><expr><name>cur</name></expr>;</condition> <incr><expr><name>cur</name> <operator>=</operator> <name><name>cur</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>init_input_filter</name><argument_list>(<argument><expr><name>fg</name></expr></argument>, <argument><expr><name>cur</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<for>for <control>(<init><expr><name>cur</name> <operator>=</operator> <name>outputs</name></expr>;</init> <condition><expr><name>cur</name></expr>;</condition><incr/>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>GROW_ARRAY</name><argument_list>(<argument><expr><name><name>fg</name><operator>-&gt;</operator><name>outputs</name></name></expr></argument>, <argument><expr><name><name>fg</name><operator>-&gt;</operator><name>nb_outputs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fg</name><operator>-&gt;</operator><name>outputs</name><index>[<expr><name><name>fg</name><operator>-&gt;</operator><name>nb_outputs</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>fg</name><operator>-&gt;</operator><name>outputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>fg</name><operator>-&gt;</operator><name>outputs</name><index>[<expr><name><name>fg</name><operator>-&gt;</operator><name>nb_outputs</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>exit_program</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>fg</name><operator>-&gt;</operator><name>outputs</name><index>[<expr><name><name>fg</name><operator>-&gt;</operator><name>nb_outputs</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>graph</name> <operator>=</operator> <name>fg</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fg</name><operator>-&gt;</operator><name>outputs</name><index>[<expr><name><name>fg</name><operator>-&gt;</operator><name>nb_outputs</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>out_tmp</name> <operator>=</operator> <name>cur</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fg</name><operator>-&gt;</operator><name>outputs</name><index>[<expr><name><name>fg</name><operator>-&gt;</operator><name>nb_outputs</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>type</name> <operator>=</operator> <call><name>avfilter_pad_get_type</name><argument_list>(<argument><expr><name><name>cur</name><operator>-&gt;</operator><name>filter_ctx</name><operator>-&gt;</operator><name>output_pads</name></name></expr></argument>,

<argument><expr><name><name>cur</name><operator>-&gt;</operator><name>pad_idx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fg</name><operator>-&gt;</operator><name>outputs</name><index>[<expr><name><name>fg</name><operator>-&gt;</operator><name>nb_outputs</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>name</name> <operator>=</operator> <call><name>describe_filter_link</name><argument_list>(<argument><expr><name>fg</name></expr></argument>, <argument><expr><name>cur</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cur</name> <operator>=</operator> <name><name>cur</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fg</name><operator>-&gt;</operator><name>outputs</name><index>[<expr><name><name>fg</name><operator>-&gt;</operator><name>nb_outputs</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name><name>out_tmp</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></for>

<label><name>fail</name>:</label>

<expr_stmt><expr><call><name>avfilter_inout_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>inputs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avfilter_graph_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>graph</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>insert_trim</name><parameter_list>(<parameter><decl><type><name>int64_t</name></type> <name>start_time</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>duration</name></decl></parameter>,

<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier><modifier>*</modifier></type><name>last_filter</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pad_idx</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filter_name</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVFilterGraph</name> <modifier>*</modifier></type><name>graph</name> <init>= <expr><name><operator>(</operator><operator>*</operator><name>last_filter</name><operator>)</operator><operator>-&gt;</operator><name>graph</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>AVFilter</name> <modifier>*</modifier></type><name>trim</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>AVMediaType</name></name></type> <name>type</name> <init>= <expr><call><name>avfilter_pad_get_type</name><argument_list>(<argument><expr><name><operator>(</operator><operator>*</operator><name>last_filter</name><operator>)</operator><operator>-&gt;</operator><name>output_pads</name></name></expr></argument>, <argument><expr><operator>*</operator><name>pad_idx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>type</name> <operator>==</operator> <name>AVMEDIA_TYPE_VIDEO</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">"trim"</literal></expr> </then><else>: <expr><literal type="string">"atrim"</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>duration</name> <operator>==</operator> <name>INT64_MAX</name> <operator>&amp;&amp;</operator> <name>start_time</name> <operator>==</operator> <name>AV_NOPTS_VALUE</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>trim</name> <operator>=</operator> <call><name>avfilter_get_by_name</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>trim</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"%s filter not present, cannot limit "</literal>

<literal type="string">"recording time.\n"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_FILTER_NOT_FOUND</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ctx</name> <operator>=</operator> <call><name>avfilter_graph_alloc_filter</name><argument_list>(<argument><expr><name>graph</name></expr></argument>, <argument><expr><name>trim</name></expr></argument>, <argument><expr><name>filter_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ctx</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>duration</name> <operator>!=</operator> <name>INT64_MAX</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>av_opt_set_int</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="string">"durationi"</literal></expr></argument>, <argument><expr><name>duration</name></expr></argument>,

<argument><expr><name>AV_OPT_SEARCH_CHILDREN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>start_time</name> <operator>!=</operator> <name>AV_NOPTS_VALUE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>av_opt_set_int</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="string">"starti"</literal></expr></argument>, <argument><expr><name>start_time</name></expr></argument>,

<argument><expr><name>AV_OPT_SEARCH_CHILDREN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Error configuring the %s filter"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>avfilter_init_str</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>avfilter_link</name><argument_list>(<argument><expr><operator>*</operator><name>last_filter</name></expr></argument>, <argument><expr><operator>*</operator><name>pad_idx</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>last_filter</name> <operator>=</operator> <name>ctx</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>pad_idx</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>insert_filter</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier><modifier>*</modifier></type><name>last_filter</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pad_idx</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filter_name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>args</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVFilterGraph</name> <modifier>*</modifier></type><name>graph</name> <init>= <expr><name><operator>(</operator><operator>*</operator><name>last_filter</name><operator>)</operator><operator>-&gt;</operator><name>graph</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>avfilter_graph_create_filter</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>,

<argument><expr><call><name>avfilter_get_by_name</name><argument_list>(<argument><expr><name>filter_name</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>filter_name</name></expr></argument>, <argument><expr><name>args</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>graph</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>avfilter_link</name><argument_list>(<argument><expr><operator>*</operator><name>last_filter</name></expr></argument>, <argument><expr><operator>*</operator><name>pad_idx</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>last_filter</name> <operator>=</operator> <name>ctx</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>pad_idx</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>configure_output_video_filter</name><parameter_list>(<parameter><decl><type><name>FilterGraph</name> <modifier>*</modifier></type><name>fg</name></decl></parameter>, <parameter><decl><type><name>OutputFilter</name> <modifier>*</modifier></type><name>ofilter</name></decl></parameter>, <parameter><decl><type><name>AVFilterInOut</name> <modifier>*</modifier></type><name>out</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>pix_fmts</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>OutputStream</name> <modifier>*</modifier></type><name>ost</name> <init>= <expr><name><name>ofilter</name><operator>-&gt;</operator><name>ost</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>OutputFile</name> <modifier>*</modifier></type><name>of</name> <init>= <expr><name><name>output_files</name><index>[<expr><name><name>ost</name><operator>-&gt;</operator><name>file_index</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>last_filter</name> <init>= <expr><name><name>out</name><operator>-&gt;</operator><name>filter_ctx</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>pad_idx</name> <init>= <expr><name><name>out</name><operator>-&gt;</operator><name>pad_idx</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>name</name><index>[<expr><literal type="number">255</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"out_%d_%d"</literal></expr></argument>, <argument><expr><name><name>ost</name><operator>-&gt;</operator><name>file_index</name></name></expr></argument>, <argument><expr><name><name>ost</name><operator>-&gt;</operator><name>index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>avfilter_graph_create_filter</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ofilter</name><operator>-&gt;</operator><name>filter</name></name></expr></argument>,

<argument><expr><call><name>avfilter_get_by_name</name><argument_list>(<argument><expr><literal type="string">"buffersink"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>name</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>fg</name><operator>-&gt;</operator><name>graph</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ofilter</name><operator>-&gt;</operator><name>width</name></name> <operator>||</operator> <name><name>ofilter</name><operator>-&gt;</operator><name>height</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>args</name><index>[<expr><literal type="number">255</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>filter</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVDictionaryEntry</name> <modifier>*</modifier></type><name>e</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%d:%d"</literal></expr></argument>,

<argument><expr><name><name>ofilter</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>ofilter</name><operator>-&gt;</operator><name>height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>(</operator><name>e</name> <operator>=</operator> <call><name>av_dict_get</name><argument_list>(<argument><expr><name><name>ost</name><operator>-&gt;</operator><name>sws_dict</name></name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><name>e</name></expr></argument>,

<argument><expr><name>AV_DICT_IGNORE_SUFFIX</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_strlcatf</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">":%s=%s"</literal></expr></argument>, <argument><expr><name><name>e</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><name><name>e</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"scaler_out_%d_%d"</literal></expr></argument>,

<argument><expr><name><name>ost</name><operator>-&gt;</operator><name>file_index</name></name></expr></argument>, <argument><expr><name><name>ost</name><operator>-&gt;</operator><name>index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>avfilter_graph_create_filter</name><argument_list>(<argument><expr><operator>&amp;</operator><name>filter</name></expr></argument>, <argument><expr><call><name>avfilter_get_by_name</name><argument_list>(<argument><expr><literal type="string">"scale"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>name</name></expr></argument>, <argument><expr><name>args</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>fg</name><operator>-&gt;</operator><name>graph</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>avfilter_link</name><argument_list>(<argument><expr><name>last_filter</name></expr></argument>, <argument><expr><name>pad_idx</name></expr></argument>, <argument><expr><name>filter</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>last_filter</name> <operator>=</operator> <name>filter</name></expr>;</expr_stmt>

<expr_stmt><expr><name>pad_idx</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>pix_fmts</name> <operator>=</operator> <call><name>choose_pix_fmts</name><argument_list>(<argument><expr><name>ofilter</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>filter</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"format_out_%d_%d"</literal></expr></argument>,

<argument><expr><name><name>ost</name><operator>-&gt;</operator><name>file_index</name></name></expr></argument>, <argument><expr><name><name>ost</name><operator>-&gt;</operator><name>index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>avfilter_graph_create_filter</name><argument_list>(<argument><expr><operator>&amp;</operator><name>filter</name></expr></argument>,

<argument><expr><call><name>avfilter_get_by_name</name><argument_list>(<argument><expr><literal type="string">"format"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><literal type="string">"format"</literal></expr></argument>, <argument><expr><name>pix_fmts</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>fg</name><operator>-&gt;</operator><name>graph</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pix_fmts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>avfilter_link</name><argument_list>(<argument><expr><name>last_filter</name></expr></argument>, <argument><expr><name>pad_idx</name></expr></argument>, <argument><expr><name>filter</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>last_filter</name> <operator>=</operator> <name>filter</name></expr>;</expr_stmt>

<expr_stmt><expr><name>pad_idx</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ost</name><operator>-&gt;</operator><name>frame_rate</name><operator>.</operator><name>num</name></name> <operator>&amp;&amp;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>fps</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>args</name><index>[<expr><literal type="number">255</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"fps=%d/%d"</literal></expr></argument>, <argument><expr><name><name>ost</name><operator>-&gt;</operator><name>frame_rate</name><operator>.</operator><name>num</name></name></expr></argument>,

<argument><expr><name><name>ost</name><operator>-&gt;</operator><name>frame_rate</name><operator>.</operator><name>den</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"fps_out_%d_%d"</literal></expr></argument>,

<argument><expr><name><name>ost</name><operator>-&gt;</operator><name>file_index</name></name></expr></argument>, <argument><expr><name><name>ost</name><operator>-&gt;</operator><name>index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>avfilter_graph_create_filter</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fps</name></expr></argument>, <argument><expr><call><name>avfilter_get_by_name</name><argument_list>(<argument><expr><literal type="string">"fps"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>name</name></expr></argument>, <argument><expr><name>args</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>fg</name><operator>-&gt;</operator><name>graph</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>avfilter_link</name><argument_list>(<argument><expr><name>last_filter</name></expr></argument>, <argument><expr><name>pad_idx</name></expr></argument>, <argument><expr><name>fps</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>last_filter</name> <operator>=</operator> <name>fps</name></expr>;</expr_stmt>

<expr_stmt><expr><name>pad_idx</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"trim_out_%d_%d"</literal></expr></argument>,

<argument><expr><name><name>ost</name><operator>-&gt;</operator><name>file_index</name></name></expr></argument>, <argument><expr><name><name>ost</name><operator>-&gt;</operator><name>index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>insert_trim</name><argument_list>(<argument><expr><name><name>of</name><operator>-&gt;</operator><name>start_time</name></name></expr></argument>, <argument><expr><name><name>of</name><operator>-&gt;</operator><name>recording_time</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>last_filter</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pad_idx</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>avfilter_link</name><argument_list>(<argument><expr><name>last_filter</name></expr></argument>, <argument><expr><name>pad_idx</name></expr></argument>, <argument><expr><name><name>ofilter</name><operator>-&gt;</operator><name>filter</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>configure_output_audio_filter</name><parameter_list>(<parameter><decl><type><name>FilterGraph</name> <modifier>*</modifier></type><name>fg</name></decl></parameter>, <parameter><decl><type><name>OutputFilter</name> <modifier>*</modifier></type><name>ofilter</name></decl></parameter>, <parameter><decl><type><name>AVFilterInOut</name> <modifier>*</modifier></type><name>out</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>OutputStream</name> <modifier>*</modifier></type><name>ost</name> <init>= <expr><name><name>ofilter</name><operator>-&gt;</operator><name>ost</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>OutputFile</name> <modifier>*</modifier></type><name>of</name> <init>= <expr><name><name>output_files</name><index>[<expr><name><name>ost</name><operator>-&gt;</operator><name>file_index</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>codec</name> <init>= <expr><name><name>ost</name><operator>-&gt;</operator><name>enc_ctx</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>last_filter</name> <init>= <expr><name><name>out</name><operator>-&gt;</operator><name>filter_ctx</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>pad_idx</name> <init>= <expr><name><name>out</name><operator>-&gt;</operator><name>pad_idx</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>sample_fmts</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>sample_rates</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>channel_layouts</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>name</name><index>[<expr><literal type="number">255</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"out_%d_%d"</literal></expr></argument>, <argument><expr><name><name>ost</name><operator>-&gt;</operator><name>file_index</name></name></expr></argument>, <argument><expr><name><name>ost</name><operator>-&gt;</operator><name>index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>avfilter_graph_create_filter</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ofilter</name><operator>-&gt;</operator><name>filter</name></name></expr></argument>,

<argument><expr><call><name>avfilter_get_by_name</name><argument_list>(<argument><expr><literal type="string">"abuffersink"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>name</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>fg</name><operator>-&gt;</operator><name>graph</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>av_opt_set_int</name><argument_list>(<argument><expr><name><name>ofilter</name><operator>-&gt;</operator><name>filter</name></name></expr></argument>, <argument><expr><literal type="string">"all_channel_counts"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>AV_OPT_SEARCH_CHILDREN</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AUTO_INSERT_FILTER</name><parameter_list>(<parameter><type><name>opt_name</name></type></parameter>, <parameter><type><name>filter_name</name></type></parameter>, <parameter><type><name>arg</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { AVFilterContext *filt_ctx; av_log(NULL, AV_LOG_INFO, opt_name " is forwarded to lavfi " "similarly to -af " filter_name "=%s.\n", arg); ret = avfilter_graph_create_filter(&amp;filt_ctx, avfilter_get_by_name(filter_name), filter_name, arg, NULL, fg-&gt;graph); if (ret &lt; 0) return ret; ret = avfilter_link(last_filter, pad_idx, filt_ctx, 0); if (ret &lt; 0) return ret; last_filter = filt_ctx; pad_idx = 0; } while (0)</cpp:value></cpp:define>

<if_stmt><if>if <condition>(<expr><name><name>ost</name><operator>-&gt;</operator><name>audio_channels_mapped</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVBPrint</name></type> <name>pan_buf</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_bprint_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pan_buf</name></expr></argument>, <argument><expr><literal type="number">256</literal></expr></argument>, <argument><expr><literal type="number">8192</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_bprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pan_buf</name></expr></argument>, <argument><expr><literal type="string">"0x%"</literal><name>PRIx64</name></expr></argument>,

<argument><expr><call><name>av_get_default_channel_layout</name><argument_list>(<argument><expr><name><name>ost</name><operator>-&gt;</operator><name>audio_channels_mapped</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ost</name><operator>-&gt;</operator><name>audio_channels_mapped</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name><name>ost</name><operator>-&gt;</operator><name>audio_channels_map</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_bprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pan_buf</name></expr></argument>, <argument><expr><literal type="string">"|c%d=c%d"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>ost</name><operator>-&gt;</operator><name>audio_channels_map</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>

<expr_stmt><expr><call><name>AUTO_INSERT_FILTER</name><argument_list>(<argument><expr><literal type="string">"-map_channel"</literal></expr></argument>, <argument><expr><literal type="string">"pan"</literal></expr></argument>, <argument><expr><name><name>pan_buf</name><operator>.</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_bprint_finalize</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pan_buf</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>codec</name><operator>-&gt;</operator><name>channels</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>codec</name><operator>-&gt;</operator><name>channel_layout</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>codec</name><operator>-&gt;</operator><name>channel_layout</name></name> <operator>=</operator> <call><name>av_get_default_channel_layout</name><argument_list>(<argument><expr><name><name>codec</name><operator>-&gt;</operator><name>channels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>sample_fmts</name> <operator>=</operator> <call><name>choose_sample_fmts</name><argument_list>(<argument><expr><name>ofilter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sample_rates</name> <operator>=</operator> <call><name>choose_sample_rates</name><argument_list>(<argument><expr><name>ofilter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>channel_layouts</name> <operator>=</operator> <call><name>choose_channel_layouts</name><argument_list>(<argument><expr><name>ofilter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>sample_fmts</name> <operator>||</operator> <name>sample_rates</name> <operator>||</operator> <name>channel_layouts</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>format</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>args</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>args</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>sample_fmts</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_strlcatf</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"sample_fmts=%s:"</literal></expr></argument>,

<argument><expr><name>sample_fmts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>sample_rates</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_strlcatf</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"sample_rates=%s:"</literal></expr></argument>,

<argument><expr><name>sample_rates</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>channel_layouts</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_strlcatf</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"channel_layouts=%s:"</literal></expr></argument>,

<argument><expr><name>channel_layouts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sample_fmts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sample_rates</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>channel_layouts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"format_out_%d_%d"</literal></expr></argument>,

<argument><expr><name><name>ost</name><operator>-&gt;</operator><name>file_index</name></name></expr></argument>, <argument><expr><name><name>ost</name><operator>-&gt;</operator><name>index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>avfilter_graph_create_filter</name><argument_list>(<argument><expr><operator>&amp;</operator><name>format</name></expr></argument>,

<argument><expr><call><name>avfilter_get_by_name</name><argument_list>(<argument><expr><literal type="string">"aformat"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>name</name></expr></argument>, <argument><expr><name>args</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>fg</name><operator>-&gt;</operator><name>graph</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>avfilter_link</name><argument_list>(<argument><expr><name>last_filter</name></expr></argument>, <argument><expr><name>pad_idx</name></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>last_filter</name> <operator>=</operator> <name>format</name></expr>;</expr_stmt>

<expr_stmt><expr><name>pad_idx</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>audio_volume</name> <operator>!=</operator> <literal type="number">256</literal> <operator>&amp;&amp;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>args</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%f"</literal></expr></argument>, <argument><expr><name>audio_volume</name> <operator>/</operator> <literal type="number">256.</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AUTO_INSERT_FILTER</name><argument_list>(<argument><expr><literal type="string">"-vol"</literal></expr></argument>, <argument><expr><literal type="string">"volume"</literal></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ost</name><operator>-&gt;</operator><name>apad</name></name> <operator>&amp;&amp;</operator> <name><name>of</name><operator>-&gt;</operator><name>shortest</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>args</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>of</name><operator>-&gt;</operator><name>ctx</name><operator>-&gt;</operator><name>nb_streams</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name><name>of</name><operator>-&gt;</operator><name>ctx</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name><name>codecpar</name><operator>-&gt;</operator><name>codec_type</name></name> <operator>==</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name>i</name><operator>&lt;</operator><name><name>of</name><operator>-&gt;</operator><name>ctx</name><operator>-&gt;</operator><name>nb_streams</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>ost</name><operator>-&gt;</operator><name>apad</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AUTO_INSERT_FILTER</name><argument_list>(<argument><expr><literal type="string">"-apad"</literal></expr></argument>, <argument><expr><literal type="string">"apad"</literal></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"trim for output stream %d:%d"</literal></expr></argument>,

<argument><expr><name><name>ost</name><operator>-&gt;</operator><name>file_index</name></name></expr></argument>, <argument><expr><name><name>ost</name><operator>-&gt;</operator><name>index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>insert_trim</name><argument_list>(<argument><expr><name><name>of</name><operator>-&gt;</operator><name>start_time</name></name></expr></argument>, <argument><expr><name><name>of</name><operator>-&gt;</operator><name>recording_time</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>last_filter</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pad_idx</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>avfilter_link</name><argument_list>(<argument><expr><name>last_filter</name></expr></argument>, <argument><expr><name>pad_idx</name></expr></argument>, <argument><expr><name><name>ofilter</name><operator>-&gt;</operator><name>filter</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>configure_output_filter</name><parameter_list>(<parameter><decl><type><name>FilterGraph</name> <modifier>*</modifier></type><name>fg</name></decl></parameter>, <parameter><decl><type><name>OutputFilter</name> <modifier>*</modifier></type><name>ofilter</name></decl></parameter>, <parameter><decl><type><name>AVFilterInOut</name> <modifier>*</modifier></type><name>out</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ofilter</name><operator>-&gt;</operator><name>ost</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_FATAL</name></expr></argument>, <argument><expr><literal type="string">"Filter %s has an unconnected output\n"</literal></expr></argument>, <argument><expr><name><name>ofilter</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>exit_program</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><call><name>avfilter_pad_get_type</name><argument_list>(<argument><expr><name><name>out</name><operator>-&gt;</operator><name>filter_ctx</name><operator>-&gt;</operator><name>output_pads</name></name></expr></argument>, <argument><expr><name><name>out</name><operator>-&gt;</operator><name>pad_idx</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<case>case <expr><name>AVMEDIA_TYPE_VIDEO</name></expr>:</case> <return>return <expr><call><name>configure_output_video_filter</name><argument_list>(<argument><expr><name>fg</name></expr></argument>, <argument><expr><name>ofilter</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><name>AVMEDIA_TYPE_AUDIO</name></expr>:</case> <return>return <expr><call><name>configure_output_audio_filter</name><argument_list>(<argument><expr><name>fg</name></expr></argument>, <argument><expr><name>ofilter</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</return>

<default>default:</default> <expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>check_filter_outputs</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nb_filtergraphs</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name><name>filtergraphs</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>nb_outputs</name></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>OutputFilter</name> <modifier>*</modifier></type><name>output</name> <init>= <expr><name><name>filtergraphs</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name><name>outputs</name><index>[<expr><name>n</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>output</name><operator>-&gt;</operator><name>ost</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_FATAL</name></expr></argument>, <argument><expr><literal type="string">"Filter %s has an unconnected output\n"</literal></expr></argument>, <argument><expr><name><name>output</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>exit_program</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>sub2video_prepare</name><parameter_list>(<parameter><decl><type><name>InputStream</name> <modifier>*</modifier></type><name>ist</name></decl></parameter>, <parameter><decl><type><name>InputFilter</name> <modifier>*</modifier></type><name>ifilter</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>avf</name> <init>= <expr><name><name>input_files</name><index>[<expr><name><name>ist</name><operator>-&gt;</operator><name>file_index</name></name></expr>]</index></name><operator>-&gt;</operator><name>ctx</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>w</name></decl>, <decl><type ref="prev"/><name>h</name></decl>;</decl_stmt>

<expr_stmt><expr><name>w</name> <operator>=</operator> <name><name>ifilter</name><operator>-&gt;</operator><name>width</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>h</name> <operator>=</operator> <name><name>ifilter</name><operator>-&gt;</operator><name>height</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>w</name> <operator>&amp;&amp;</operator> <name>h</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>avf</name><operator>-&gt;</operator><name>nb_streams</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>avf</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name><name>codecpar</name><operator>-&gt;</operator><name>codec_type</name></name> <operator>==</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>w</name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><name><name>avf</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name><name>codecpar</name><operator>-&gt;</operator><name>width</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>h</name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name><name>avf</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name><name>codecpar</name><operator>-&gt;</operator><name>height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>w</name> <operator>&amp;&amp;</operator> <name>h</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>w</name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><literal type="number">720</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>h</name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><literal type="number">576</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avf</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"sub2video: using %dx%d canvas\n"</literal></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ist</name><operator>-&gt;</operator><name>sub2video</name><operator>.</operator><name>w</name></name> <operator>=</operator> <name><name>ifilter</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator> <name>w</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ist</name><operator>-&gt;</operator><name>sub2video</name><operator>.</operator><name>h</name></name> <operator>=</operator> <name><name>ifilter</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <name>h</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ifilter</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator> <ternary><condition><expr><name><name>ist</name><operator>-&gt;</operator><name>dec_ctx</name><operator>-&gt;</operator><name>width</name></name></expr> ?</condition><then> <expr><name><name>ist</name><operator>-&gt;</operator><name>dec_ctx</name><operator>-&gt;</operator><name>width</name></name></expr> </then><else>: <expr><name><name>ist</name><operator>-&gt;</operator><name>sub2video</name><operator>.</operator><name>w</name></name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ifilter</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <ternary><condition><expr><name><name>ist</name><operator>-&gt;</operator><name>dec_ctx</name><operator>-&gt;</operator><name>height</name></name></expr> ?</condition><then> <expr><name><name>ist</name><operator>-&gt;</operator><name>dec_ctx</name><operator>-&gt;</operator><name>height</name></name></expr> </then><else>: <expr><name><name>ist</name><operator>-&gt;</operator><name>sub2video</name><operator>.</operator><name>h</name></name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ifilter</name><operator>-&gt;</operator><name>format</name></name> <operator>=</operator> <name>AV_PIX_FMT_RGB32</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ist</name><operator>-&gt;</operator><name>sub2video</name><operator>.</operator><name>frame</name></name> <operator>=</operator> <call><name>av_frame_alloc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ist</name><operator>-&gt;</operator><name>sub2video</name><operator>.</operator><name>frame</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>ist</name><operator>-&gt;</operator><name>sub2video</name><operator>.</operator><name>last_pts</name></name> <operator>=</operator> <name>INT64_MIN</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ist</name><operator>-&gt;</operator><name>sub2video</name><operator>.</operator><name>end_pts</name></name> <operator>=</operator> <name>INT64_MIN</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ist</name><operator>-&gt;</operator><name>sub2video</name><operator>.</operator><name>initialize</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>configure_input_video_filter</name><parameter_list>(<parameter><decl><type><name>FilterGraph</name> <modifier>*</modifier></type><name>fg</name></decl></parameter>, <parameter><decl><type><name>InputFilter</name> <modifier>*</modifier></type><name>ifilter</name></decl></parameter>,

<parameter><decl><type><name>AVFilterInOut</name> <modifier>*</modifier></type><name>in</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>last_filter</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>AVFilter</name> <modifier>*</modifier></type><name>buffer_filt</name> <init>= <expr><call><name>avfilter_get_by_name</name><argument_list>(<argument><expr><literal type="string">"buffer"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>InputStream</name> <modifier>*</modifier></type><name>ist</name> <init>= <expr><name><name>ifilter</name><operator>-&gt;</operator><name>ist</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>InputFile</name> <modifier>*</modifier></type><name>f</name> <init>= <expr><name><name>input_files</name><index>[<expr><name><name>ist</name><operator>-&gt;</operator><name>file_index</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVRational</name></type> <name>tb</name> <init>= <expr><ternary><condition><expr><name><name>ist</name><operator>-&gt;</operator><name>framerate</name><operator>.</operator><name>num</name></name></expr> ?</condition><then> <expr><call><name>av_inv_q</name><argument_list>(<argument><expr><name><name>ist</name><operator>-&gt;</operator><name>framerate</name></name></expr></argument>)</argument_list></call></expr> </then><else>:

<expr><name><name>ist</name><operator>-&gt;</operator><name>st</name><operator>-&gt;</operator><name>time_base</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVRational</name></type> <name>fr</name> <init>= <expr><name><name>ist</name><operator>-&gt;</operator><name>framerate</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVRational</name></type> <name>sar</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVBPrint</name></type> <name>args</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>name</name><index>[<expr><literal type="number">255</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>, <decl><type ref="prev"/><name>pad_idx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>tsoffset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVBufferSrcParameters</name> <modifier>*</modifier></type><name>par</name> <init>= <expr><call><name>av_buffersrc_parameters_alloc</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>par</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>par</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>par</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>par</name><operator>-&gt;</operator><name>format</name></name> <operator>=</operator> <name>AV_PIX_FMT_NONE</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ist</name><operator>-&gt;</operator><name>dec_ctx</name><operator>-&gt;</operator><name>codec_type</name></name> <operator>==</operator> <name>AVMEDIA_TYPE_AUDIO</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Cannot connect video filter to audio input\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>fr</name><operator>.</operator><name>num</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>fr</name> <operator>=</operator> <call><name>av_guess_frame_rate</name><argument_list>(<argument><expr><name><name>input_files</name><index>[<expr><name><name>ist</name><operator>-&gt;</operator><name>file_index</name></name></expr>]</index></name><operator>-&gt;</operator><name>ctx</name></expr></argument>, <argument><expr><name><name>ist</name><operator>-&gt;</operator><name>st</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ist</name><operator>-&gt;</operator><name>dec_ctx</name><operator>-&gt;</operator><name>codec_type</name></name> <operator>==</operator> <name>AVMEDIA_TYPE_SUBTITLE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>sub2video_prepare</name><argument_list>(<argument><expr><name>ist</name></expr></argument>, <argument><expr><name>ifilter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>sar</name> <operator>=</operator> <name><name>ifilter</name><operator>-&gt;</operator><name>sample_aspect_ratio</name></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>sar</name><operator>.</operator><name>den</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>sar</name> <operator>=</operator> <operator>(</operator><name>AVRational</name><operator>)</operator><block>{<expr><literal type="number">0</literal></expr>,<expr><literal type="number">1</literal></expr>}</block></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_bprint_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>args</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>AV_BPRINT_SIZE_AUTOMATIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_bprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>args</name></expr></argument>,

<argument><expr><literal type="string">"video_size=%dx%d:pix_fmt=%d:time_base=%d/%d:"</literal>

<literal type="string">"pixel_aspect=%d/%d"</literal></expr></argument>,

<argument><expr><name><name>ifilter</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>ifilter</name><operator>-&gt;</operator><name>height</name></name></expr></argument>, <argument><expr><name><name>ifilter</name><operator>-&gt;</operator><name>format</name></name></expr></argument>,

<argument><expr><name><name>tb</name><operator>.</operator><name>num</name></name></expr></argument>, <argument><expr><name><name>tb</name><operator>.</operator><name>den</name></name></expr></argument>, <argument><expr><name><name>sar</name><operator>.</operator><name>num</name></name></expr></argument>, <argument><expr><name><name>sar</name><operator>.</operator><name>den</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>fr</name><operator>.</operator><name>num</name></name> <operator>&amp;&amp;</operator> <name><name>fr</name><operator>.</operator><name>den</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_bprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>args</name></expr></argument>, <argument><expr><literal type="string">":frame_rate=%d/%d"</literal></expr></argument>, <argument><expr><name><name>fr</name><operator>.</operator><name>num</name></name></expr></argument>, <argument><expr><name><name>fr</name><operator>.</operator><name>den</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"graph %d input from stream %d:%d"</literal></expr></argument>, <argument><expr><name><name>fg</name><operator>-&gt;</operator><name>index</name></name></expr></argument>,

<argument><expr><name><name>ist</name><operator>-&gt;</operator><name>file_index</name></name></expr></argument>, <argument><expr><name><name>ist</name><operator>-&gt;</operator><name>st</name><operator>-&gt;</operator><name>index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>avfilter_graph_create_filter</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ifilter</name><operator>-&gt;</operator><name>filter</name></name></expr></argument>, <argument><expr><name>buffer_filt</name></expr></argument>, <argument><expr><name>name</name></expr></argument>,

<argument><expr><name><name>args</name><operator>.</operator><name>str</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>fg</name><operator>-&gt;</operator><name>graph</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>par</name><operator>-&gt;</operator><name>hw_frames_ctx</name></name> <operator>=</operator> <name><name>ifilter</name><operator>-&gt;</operator><name>hw_frames_ctx</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>av_buffersrc_parameters_set</name><argument_list>(<argument><expr><name><name>ifilter</name><operator>-&gt;</operator><name>filter</name></name></expr></argument>, <argument><expr><name>par</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>par</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>last_filter</name> <operator>=</operator> <name><name>ifilter</name><operator>-&gt;</operator><name>filter</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ist</name><operator>-&gt;</operator><name>autorotate</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>double</name></type> <name>theta</name> <init>= <expr><call><name>get_rotation</name><argument_list>(<argument><expr><name><name>ist</name><operator>-&gt;</operator><name>st</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>fabs</name><argument_list>(<argument><expr><name>theta</name> <operator>-</operator> <literal type="number">90</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">1.0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>insert_filter</name><argument_list>(<argument><expr><operator>&amp;</operator><name>last_filter</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pad_idx</name></expr></argument>, <argument><expr><literal type="string">"transpose"</literal></expr></argument>, <argument><expr><literal type="string">"clock"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>fabs</name><argument_list>(<argument><expr><name>theta</name> <operator>-</operator> <literal type="number">180</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">1.0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>insert_filter</name><argument_list>(<argument><expr><operator>&amp;</operator><name>last_filter</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pad_idx</name></expr></argument>, <argument><expr><literal type="string">"hflip"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>insert_filter</name><argument_list>(<argument><expr><operator>&amp;</operator><name>last_filter</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pad_idx</name></expr></argument>, <argument><expr><literal type="string">"vflip"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>fabs</name><argument_list>(<argument><expr><name>theta</name> <operator>-</operator> <literal type="number">270</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">1.0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>insert_filter</name><argument_list>(<argument><expr><operator>&amp;</operator><name>last_filter</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pad_idx</name></expr></argument>, <argument><expr><literal type="string">"transpose"</literal></expr></argument>, <argument><expr><literal type="string">"cclock"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>fabs</name><argument_list>(<argument><expr><name>theta</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">1.0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>rotate_buf</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>rotate_buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>rotate_buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%f*PI/180"</literal></expr></argument>, <argument><expr><name>theta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>insert_filter</name><argument_list>(<argument><expr><operator>&amp;</operator><name>last_filter</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pad_idx</name></expr></argument>, <argument><expr><literal type="string">"rotate"</literal></expr></argument>, <argument><expr><name>rotate_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>do_deinterlace</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>yadif</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"deinterlace_in_%d_%d"</literal></expr></argument>,

<argument><expr><name><name>ist</name><operator>-&gt;</operator><name>file_index</name></name></expr></argument>, <argument><expr><name><name>ist</name><operator>-&gt;</operator><name>st</name><operator>-&gt;</operator><name>index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>avfilter_graph_create_filter</name><argument_list>(<argument><expr><operator>&amp;</operator><name>yadif</name></expr></argument>,

<argument><expr><call><name>avfilter_get_by_name</name><argument_list>(<argument><expr><literal type="string">"yadif"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,

<argument><expr><name><name>fg</name><operator>-&gt;</operator><name>graph</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>avfilter_link</name><argument_list>(<argument><expr><name>last_filter</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>yadif</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>last_filter</name> <operator>=</operator> <name>yadif</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"trim_in_%d_%d"</literal></expr></argument>,

<argument><expr><name><name>ist</name><operator>-&gt;</operator><name>file_index</name></name></expr></argument>, <argument><expr><name><name>ist</name><operator>-&gt;</operator><name>st</name><operator>-&gt;</operator><name>index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>copy_ts</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>tsoffset</name> <operator>=</operator> <ternary><condition><expr><name><name>f</name><operator>-&gt;</operator><name>start_time</name></name> <operator>==</operator> <name>AV_NOPTS_VALUE</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name><name>f</name><operator>-&gt;</operator><name>start_time</name></name></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>start_at_zero</name> <operator>&amp;&amp;</operator> <name><name>f</name><operator>-&gt;</operator><name>ctx</name><operator>-&gt;</operator><name>start_time</name></name> <operator>!=</operator> <name>AV_NOPTS_VALUE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>tsoffset</name> <operator>+=</operator> <name><name>f</name><operator>-&gt;</operator><name>ctx</name><operator>-&gt;</operator><name>start_time</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>insert_trim</name><argument_list>(<argument><expr><ternary><condition><expr><operator>(</operator><operator>(</operator><name><name>f</name><operator>-&gt;</operator><name>start_time</name></name> <operator>==</operator> <name>AV_NOPTS_VALUE</name><operator>)</operator> <operator>||</operator> <operator>!</operator><name><name>f</name><operator>-&gt;</operator><name>accurate_seek</name></name><operator>)</operator></expr> ?</condition><then>

<expr><name>AV_NOPTS_VALUE</name></expr> </then><else>: <expr><name>tsoffset</name></expr></else></ternary></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>recording_time</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>last_filter</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pad_idx</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>avfilter_link</name><argument_list>(<argument><expr><name>last_filter</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>in</name><operator>-&gt;</operator><name>filter_ctx</name></name></expr></argument>, <argument><expr><name><name>in</name><operator>-&gt;</operator><name>pad_idx</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<label><name>fail</name>:</label>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>par</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>configure_input_audio_filter</name><parameter_list>(<parameter><decl><type><name>FilterGraph</name> <modifier>*</modifier></type><name>fg</name></decl></parameter>, <parameter><decl><type><name>InputFilter</name> <modifier>*</modifier></type><name>ifilter</name></decl></parameter>,

<parameter><decl><type><name>AVFilterInOut</name> <modifier>*</modifier></type><name>in</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>last_filter</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>AVFilter</name> <modifier>*</modifier></type><name>abuffer_filt</name> <init>= <expr><call><name>avfilter_get_by_name</name><argument_list>(<argument><expr><literal type="string">"abuffer"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>InputStream</name> <modifier>*</modifier></type><name>ist</name> <init>= <expr><name><name>ifilter</name><operator>-&gt;</operator><name>ist</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>InputFile</name> <modifier>*</modifier></type><name>f</name> <init>= <expr><name><name>input_files</name><index>[<expr><name><name>ist</name><operator>-&gt;</operator><name>file_index</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVBPrint</name></type> <name>args</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>name</name><index>[<expr><literal type="number">255</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>, <decl><type ref="prev"/><name>pad_idx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>tsoffset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ist</name><operator>-&gt;</operator><name>dec_ctx</name><operator>-&gt;</operator><name>codec_type</name></name> <operator>!=</operator> <name>AVMEDIA_TYPE_AUDIO</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Cannot connect audio filter to non audio input\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_bprint_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>args</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>AV_BPRINT_SIZE_AUTOMATIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_bprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>args</name></expr></argument>, <argument><expr><literal type="string">"time_base=%d/%d:sample_rate=%d:sample_fmt=%s"</literal></expr></argument>,

<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>ifilter</name><operator>-&gt;</operator><name>sample_rate</name></name></expr></argument>,

<argument><expr><name><name>ifilter</name><operator>-&gt;</operator><name>sample_rate</name></name></expr></argument>,

<argument><expr><call><name>av_get_sample_fmt_name</name><argument_list>(<argument><expr><name><name>ifilter</name><operator>-&gt;</operator><name>format</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ifilter</name><operator>-&gt;</operator><name>channel_layout</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_bprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>args</name></expr></argument>, <argument><expr><literal type="string">":channel_layout=0x%"</literal><name>PRIx64</name></expr></argument>,

<argument><expr><name><name>ifilter</name><operator>-&gt;</operator><name>channel_layout</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_bprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>args</name></expr></argument>, <argument><expr><literal type="string">":channels=%d"</literal></expr></argument>, <argument><expr><name><name>ifilter</name><operator>-&gt;</operator><name>channels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"graph_%d_in_%d_%d"</literal></expr></argument>, <argument><expr><name><name>fg</name><operator>-&gt;</operator><name>index</name></name></expr></argument>,

<argument><expr><name><name>ist</name><operator>-&gt;</operator><name>file_index</name></name></expr></argument>, <argument><expr><name><name>ist</name><operator>-&gt;</operator><name>st</name><operator>-&gt;</operator><name>index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>avfilter_graph_create_filter</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ifilter</name><operator>-&gt;</operator><name>filter</name></name></expr></argument>, <argument><expr><name>abuffer_filt</name></expr></argument>,

<argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>args</name><operator>.</operator><name>str</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,

<argument><expr><name><name>fg</name><operator>-&gt;</operator><name>graph</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>last_filter</name> <operator>=</operator> <name><name>ifilter</name><operator>-&gt;</operator><name>filter</name></name></expr>;</expr_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AUTO_INSERT_FILTER_INPUT</name><parameter_list>(<parameter><type><name>opt_name</name></type></parameter>, <parameter><type><name>filter_name</name></type></parameter>, <parameter><type><name>arg</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { AVFilterContext *filt_ctx; av_log(NULL, AV_LOG_INFO, opt_name " is forwarded to lavfi " "similarly to -af " filter_name "=%s.\n", arg); snprintf(name, sizeof(name), "graph_%d_%s_in_%d_%d", fg-&gt;index, filter_name, ist-&gt;file_index, ist-&gt;st-&gt;index); ret = avfilter_graph_create_filter(&amp;filt_ctx, avfilter_get_by_name(filter_name), name, arg, NULL, fg-&gt;graph); if (ret &lt; 0) return ret; ret = avfilter_link(last_filter, 0, filt_ctx, 0); if (ret &lt; 0) return ret; last_filter = filt_ctx; } while (0)</cpp:value></cpp:define>

<if_stmt><if>if <condition>(<expr><name>audio_sync_method</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>args</name><index>[<expr><literal type="number">256</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_strlcatf</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"async=%d"</literal></expr></argument>, <argument><expr><name>audio_sync_method</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>audio_drift_threshold</name> <operator>!=</operator> <literal type="number">0.1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_strlcatf</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">":min_hard_comp=%f"</literal></expr></argument>, <argument><expr><name>audio_drift_threshold</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>fg</name><operator>-&gt;</operator><name>reconfiguration</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_strlcatf</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">":first_pts=0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>AUTO_INSERT_FILTER_INPUT</name><argument_list>(<argument><expr><literal type="string">"-async"</literal></expr></argument>, <argument><expr><literal type="string">"aresample"</literal></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>audio_volume</name> <operator>!=</operator> <literal type="number">256</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>args</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"-vol has been deprecated. Use the volume "</literal>

<literal type="string">"audio filter instead.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%f"</literal></expr></argument>, <argument><expr><name>audio_volume</name> <operator>/</operator> <literal type="number">256.</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AUTO_INSERT_FILTER_INPUT</name><argument_list>(<argument><expr><literal type="string">"-vol"</literal></expr></argument>, <argument><expr><literal type="string">"volume"</literal></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"trim for input stream %d:%d"</literal></expr></argument>,

<argument><expr><name><name>ist</name><operator>-&gt;</operator><name>file_index</name></name></expr></argument>, <argument><expr><name><name>ist</name><operator>-&gt;</operator><name>st</name><operator>-&gt;</operator><name>index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>copy_ts</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>tsoffset</name> <operator>=</operator> <ternary><condition><expr><name><name>f</name><operator>-&gt;</operator><name>start_time</name></name> <operator>==</operator> <name>AV_NOPTS_VALUE</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name><name>f</name><operator>-&gt;</operator><name>start_time</name></name></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>start_at_zero</name> <operator>&amp;&amp;</operator> <name><name>f</name><operator>-&gt;</operator><name>ctx</name><operator>-&gt;</operator><name>start_time</name></name> <operator>!=</operator> <name>AV_NOPTS_VALUE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>tsoffset</name> <operator>+=</operator> <name><name>f</name><operator>-&gt;</operator><name>ctx</name><operator>-&gt;</operator><name>start_time</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>insert_trim</name><argument_list>(<argument><expr><ternary><condition><expr><operator>(</operator><operator>(</operator><name><name>f</name><operator>-&gt;</operator><name>start_time</name></name> <operator>==</operator> <name>AV_NOPTS_VALUE</name><operator>)</operator> <operator>||</operator> <operator>!</operator><name><name>f</name><operator>-&gt;</operator><name>accurate_seek</name></name><operator>)</operator></expr> ?</condition><then>

<expr><name>AV_NOPTS_VALUE</name></expr> </then><else>: <expr><name>tsoffset</name></expr></else></ternary></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>recording_time</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>last_filter</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pad_idx</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>avfilter_link</name><argument_list>(<argument><expr><name>last_filter</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>in</name><operator>-&gt;</operator><name>filter_ctx</name></name></expr></argument>, <argument><expr><name><name>in</name><operator>-&gt;</operator><name>pad_idx</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>configure_input_filter</name><parameter_list>(<parameter><decl><type><name>FilterGraph</name> <modifier>*</modifier></type><name>fg</name></decl></parameter>, <parameter><decl><type><name>InputFilter</name> <modifier>*</modifier></type><name>ifilter</name></decl></parameter>,

<parameter><decl><type><name>AVFilterInOut</name> <modifier>*</modifier></type><name>in</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ifilter</name><operator>-&gt;</operator><name>ist</name><operator>-&gt;</operator><name>dec</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"No decoder for stream #%d:%d, filtering impossible\n"</literal></expr></argument>,

<argument><expr><name><name>ifilter</name><operator>-&gt;</operator><name>ist</name><operator>-&gt;</operator><name>file_index</name></name></expr></argument>, <argument><expr><name><name>ifilter</name><operator>-&gt;</operator><name>ist</name><operator>-&gt;</operator><name>st</name><operator>-&gt;</operator><name>index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_DECODER_NOT_FOUND</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><call><name>avfilter_pad_get_type</name><argument_list>(<argument><expr><name><name>in</name><operator>-&gt;</operator><name>filter_ctx</name><operator>-&gt;</operator><name>input_pads</name></name></expr></argument>, <argument><expr><name><name>in</name><operator>-&gt;</operator><name>pad_idx</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<case>case <expr><name>AVMEDIA_TYPE_VIDEO</name></expr>:</case> <return>return <expr><call><name>configure_input_video_filter</name><argument_list>(<argument><expr><name>fg</name></expr></argument>, <argument><expr><name>ifilter</name></expr></argument>, <argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><name>AVMEDIA_TYPE_AUDIO</name></expr>:</case> <return>return <expr><call><name>configure_input_audio_filter</name><argument_list>(<argument><expr><name>fg</name></expr></argument>, <argument><expr><name>ifilter</name></expr></argument>, <argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</return>

<default>default:</default> <expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>cleanup_filtergraph</name><parameter_list>(<parameter><decl><type><name>FilterGraph</name> <modifier>*</modifier></type><name>fg</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>fg</name><operator>-&gt;</operator><name>nb_outputs</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>fg</name><operator>-&gt;</operator><name>outputs</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>filter</name> <operator>=</operator> <operator>(</operator><name>AVFilterContext</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr>;</expr_stmt></block_content></block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>fg</name><operator>-&gt;</operator><name>nb_inputs</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>fg</name><operator>-&gt;</operator><name>inputs</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>filter</name> <operator>=</operator> <operator>(</operator><name>AVFilterContext</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>avfilter_graph_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fg</name><operator>-&gt;</operator><name>graph</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>configure_filtergraph</name><parameter_list>(<parameter><decl><type><name>FilterGraph</name> <modifier>*</modifier></type><name>fg</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVFilterInOut</name> <modifier>*</modifier></type><name>inputs</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>outputs</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>cur</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>simple</name> <init>= <expr><call><name>filtergraph_is_simple</name><argument_list>(<argument><expr><name>fg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>graph_desc</name> <init>= <expr><ternary><condition><expr><name>simple</name></expr> ?</condition><then> <expr><name><name>fg</name><operator>-&gt;</operator><name>outputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name><name>ost</name><operator>-&gt;</operator><name>avfilter</name></name></expr> </then><else>:

<expr><name><name>fg</name><operator>-&gt;</operator><name>graph_desc</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>cleanup_filtergraph</name><argument_list>(<argument><expr><name>fg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>fg</name><operator>-&gt;</operator><name>graph</name></name> <operator>=</operator> <call><name>avfilter_graph_alloc</name><argument_list>()</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>simple</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>OutputStream</name> <modifier>*</modifier></type><name>ost</name> <init>= <expr><name><name>fg</name><operator>-&gt;</operator><name>outputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>ost</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>args</name><index>[<expr><literal type="number">512</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVDictionaryEntry</name> <modifier>*</modifier></type><name>e</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>fg</name><operator>-&gt;</operator><name>graph</name><operator>-&gt;</operator><name>nb_threads</name></name> <operator>=</operator> <name>filter_nbthreads</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>args</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>(</operator><name>e</name> <operator>=</operator> <call><name>av_dict_get</name><argument_list>(<argument><expr><name><name>ost</name><operator>-&gt;</operator><name>sws_dict</name></name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><name>e</name></expr></argument>,

<argument><expr><name>AV_DICT_IGNORE_SUFFIX</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_strlcatf</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s=%s:"</literal></expr></argument>, <argument><expr><name><name>e</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><name><name>e</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>args</name><index>[<expr><call><name>strlen</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>fg</name><operator>-&gt;</operator><name>graph</name><operator>-&gt;</operator><name>scale_sws_opts</name></name> <operator>=</operator> <call><name>av_strdup</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>args</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>(</operator><name>e</name> <operator>=</operator> <call><name>av_dict_get</name><argument_list>(<argument><expr><name><name>ost</name><operator>-&gt;</operator><name>swr_opts</name></name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><name>e</name></expr></argument>,

<argument><expr><name>AV_DICT_IGNORE_SUFFIX</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_strlcatf</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s=%s:"</literal></expr></argument>, <argument><expr><name><name>e</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><name><name>e</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>args</name><index>[<expr><call><name>strlen</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_opt_set</name><argument_list>(<argument><expr><name><name>fg</name><operator>-&gt;</operator><name>graph</name></name></expr></argument>, <argument><expr><literal type="string">"aresample_swr_opts"</literal></expr></argument>, <argument><expr><name>args</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>args</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>(</operator><name>e</name> <operator>=</operator> <call><name>av_dict_get</name><argument_list>(<argument><expr><name><name>fg</name><operator>-&gt;</operator><name>outputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name><name>ost</name><operator>-&gt;</operator><name>resample_opts</name></name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><name>e</name></expr></argument>,

<argument><expr><name>AV_DICT_IGNORE_SUFFIX</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_strlcatf</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s=%s:"</literal></expr></argument>, <argument><expr><name><name>e</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><name><name>e</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>args</name><index>[<expr><call><name>strlen</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>e</name> <operator>=</operator> <call><name>av_dict_get</name><argument_list>(<argument><expr><name><name>ost</name><operator>-&gt;</operator><name>encoder_opts</name></name></expr></argument>, <argument><expr><literal type="string">"threads"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>e</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_opt_set</name><argument_list>(<argument><expr><name><name>fg</name><operator>-&gt;</operator><name>graph</name></name></expr></argument>, <argument><expr><literal type="string">"threads"</literal></expr></argument>, <argument><expr><name><name>e</name><operator>-&gt;</operator><name>value</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>fg</name><operator>-&gt;</operator><name>graph</name><operator>-&gt;</operator><name>nb_threads</name></name> <operator>=</operator> <name>filter_complex_nbthreads</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>avfilter_graph_parse2</name><argument_list>(<argument><expr><name><name>fg</name><operator>-&gt;</operator><name>graph</name></name></expr></argument>, <argument><expr><name>graph_desc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>inputs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>outputs</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>filter_hw_device</name> <operator>||</operator> <name>hw_device_ctx</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>AVBufferRef</name> <modifier>*</modifier></type><name>device</name> <init>= <expr><ternary><condition><expr><name>filter_hw_device</name></expr> ?</condition><then> <expr><name><name>filter_hw_device</name><operator>-&gt;</operator><name>device_ref</name></name></expr>

</then><else>: <expr><name>hw_device_ctx</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>fg</name><operator>-&gt;</operator><name>graph</name><operator>-&gt;</operator><name>nb_filters</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>fg</name><operator>-&gt;</operator><name>graph</name><operator>-&gt;</operator><name>filters</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>hw_device_ctx</name> <operator>=</operator> <call><name>av_buffer_ref</name><argument_list>(<argument><expr><name>device</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>fg</name><operator>-&gt;</operator><name>graph</name><operator>-&gt;</operator><name>filters</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>hw_device_ctx</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>simple</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><name>inputs</name> <operator>||</operator> <name><name>inputs</name><operator>-&gt;</operator><name>next</name></name> <operator>||</operator> <operator>!</operator><name>outputs</name> <operator>||</operator> <name><name>outputs</name><operator>-&gt;</operator><name>next</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>num_inputs</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>num_outputs</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>outputs</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>num_outputs</name> <operator>=</operator> <literal type="string">"0"</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>outputs</name><operator>-&gt;</operator><name>next</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>num_outputs</name> <operator>=</operator> <literal type="string">"&gt;1"</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>num_outputs</name> <operator>=</operator> <literal type="string">"1"</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>inputs</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>num_inputs</name> <operator>=</operator> <literal type="string">"0"</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>inputs</name><operator>-&gt;</operator><name>next</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>num_inputs</name> <operator>=</operator> <literal type="string">"&gt;1"</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>num_inputs</name> <operator>=</operator> <literal type="string">"1"</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Simple filtergraph '%s' was expected "</literal>

<literal type="string">"to have exactly 1 input and 1 output."</literal>

<literal type="string">" However, it had %s input(s) and %s output(s)."</literal>

<literal type="string">" Please adjust, or use a complex filtergraph (-filter_complex) instead.\n"</literal></expr></argument>,

<argument><expr><name>graph_desc</name></expr></argument>, <argument><expr><name>num_inputs</name></expr></argument>, <argument><expr><name>num_outputs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>cur</name> <operator>=</operator> <name>inputs</name></expr><operator>,</operator> <expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>cur</name></expr>;</condition> <incr><expr><name>cur</name> <operator>=</operator> <name><name>cur</name><operator>-&gt;</operator><name>next</name></name></expr><operator>,</operator> <expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>configure_input_filter</name><argument_list>(<argument><expr><name>fg</name></expr></argument>, <argument><expr><name><name>fg</name><operator>-&gt;</operator><name>inputs</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>cur</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>avfilter_inout_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>inputs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avfilter_inout_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>outputs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt></block_content></block></for>

<expr_stmt><expr><call><name>avfilter_inout_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>inputs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>cur</name> <operator>=</operator> <name>outputs</name></expr><operator>,</operator> <expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>cur</name></expr>;</condition> <incr><expr><name>cur</name> <operator>=</operator> <name><name>cur</name><operator>-&gt;</operator><name>next</name></name></expr><operator>,</operator> <expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>configure_output_filter</name><argument_list>(<argument><expr><name>fg</name></expr></argument>, <argument><expr><name><name>fg</name><operator>-&gt;</operator><name>outputs</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>cur</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>avfilter_inout_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>outputs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>avfilter_graph_config</name><argument_list>(<argument><expr><name><name>fg</name><operator>-&gt;</operator><name>graph</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>fg</name><operator>-&gt;</operator><name>nb_outputs</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>OutputFilter</name> <modifier>*</modifier></type><name>ofilter</name> <init>= <expr><name><name>fg</name><operator>-&gt;</operator><name>outputs</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>sink</name> <init>= <expr><name><name>ofilter</name><operator>-&gt;</operator><name>filter</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>ofilter</name><operator>-&gt;</operator><name>format</name></name> <operator>=</operator> <call><name>av_buffersink_get_format</name><argument_list>(<argument><expr><name>sink</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ofilter</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator> <call><name>av_buffersink_get_w</name><argument_list>(<argument><expr><name>sink</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ofilter</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <call><name>av_buffersink_get_h</name><argument_list>(<argument><expr><name>sink</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ofilter</name><operator>-&gt;</operator><name>sample_rate</name></name> <operator>=</operator> <call><name>av_buffersink_get_sample_rate</name><argument_list>(<argument><expr><name>sink</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ofilter</name><operator>-&gt;</operator><name>channel_layout</name></name> <operator>=</operator> <call><name>av_buffersink_get_channel_layout</name><argument_list>(<argument><expr><name>sink</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>fg</name><operator>-&gt;</operator><name>reconfiguration</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>fg</name><operator>-&gt;</operator><name>nb_outputs</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>OutputStream</name> <modifier>*</modifier></type><name>ost</name> <init>= <expr><name><name>fg</name><operator>-&gt;</operator><name>outputs</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>ost</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ost</name><operator>-&gt;</operator><name>enc</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Encoder (codec %s) not found for output stream #%d:%d\n"</literal></expr></argument>,

<argument><expr><call><name>avcodec_get_name</name><argument_list>(<argument><expr><name><name>ost</name><operator>-&gt;</operator><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_id</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>ost</name><operator>-&gt;</operator><name>file_index</name></name></expr></argument>, <argument><expr><name><name>ost</name><operator>-&gt;</operator><name>index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ost</name><operator>-&gt;</operator><name>enc</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>AVMEDIA_TYPE_AUDIO</name> <operator>&amp;&amp;</operator>

<operator>!</operator><operator>(</operator><name><name>ost</name><operator>-&gt;</operator><name>enc</name><operator>-&gt;</operator><name>capabilities</name></name> <operator>&amp;</operator> <name>AV_CODEC_CAP_VARIABLE_FRAME_SIZE</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_buffersink_set_frame_size</name><argument_list>(<argument><expr><name><name>ost</name><operator>-&gt;</operator><name>filter</name><operator>-&gt;</operator><name>filter</name></name></expr></argument>,

<argument><expr><name><name>ost</name><operator>-&gt;</operator><name>enc_ctx</name><operator>-&gt;</operator><name>frame_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>fg</name><operator>-&gt;</operator><name>nb_inputs</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<while>while <condition>(<expr><call><name>av_fifo_size</name><argument_list>(<argument><expr><name><name>fg</name><operator>-&gt;</operator><name>inputs</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>frame_queue</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>tmp</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_fifo_generic_read</name><argument_list>(<argument><expr><name><name>fg</name><operator>-&gt;</operator><name>inputs</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>frame_queue</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmp</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>av_buffersrc_add_frame</name><argument_list>(<argument><expr><name><name>fg</name><operator>-&gt;</operator><name>inputs</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>filter</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

</block_content>}</block></while>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>fg</name><operator>-&gt;</operator><name>nb_inputs</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>fg</name><operator>-&gt;</operator><name>inputs</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>eof</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>av_buffersrc_add_frame</name><argument_list>(<argument><expr><name><name>fg</name><operator>-&gt;</operator><name>inputs</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>filter</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>fg</name><operator>-&gt;</operator><name>nb_inputs</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>InputStream</name> <modifier>*</modifier></type><name>ist</name> <init>= <expr><name><name>fg</name><operator>-&gt;</operator><name>inputs</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>ist</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ist</name><operator>-&gt;</operator><name>sub2video</name><operator>.</operator><name>sub_queue</name></name> <operator>&amp;&amp;</operator> <name><name>ist</name><operator>-&gt;</operator><name>sub2video</name><operator>.</operator><name>frame</name></name></expr>)</condition> <block>{<block_content>

<while>while <condition>(<expr><call><name>av_fifo_size</name><argument_list>(<argument><expr><name><name>ist</name><operator>-&gt;</operator><name>sub2video</name><operator>.</operator><name>sub_queue</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>AVSubtitle</name></type> <name>tmp</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_fifo_generic_read</name><argument_list>(<argument><expr><name><name>ist</name><operator>-&gt;</operator><name>sub2video</name><operator>.</operator><name>sub_queue</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmp</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sub2video_update</name><argument_list>(<argument><expr><name>ist</name></expr></argument>, <argument><expr><name>INT64_MIN</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avsubtitle_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<label><name>fail</name>:</label>

<expr_stmt><expr><call><name>cleanup_filtergraph</name><argument_list>(<argument><expr><name>fg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>ifilter_parameters_from_frame</name><parameter_list>(<parameter><decl><type><name>InputFilter</name> <modifier>*</modifier></type><name>ifilter</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>AVFrame</name> <modifier>*</modifier></type><name>frame</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>av_buffer_unref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ifilter</name><operator>-&gt;</operator><name>hw_frames_ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ifilter</name><operator>-&gt;</operator><name>format</name></name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>format</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ifilter</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>width</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ifilter</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>height</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ifilter</name><operator>-&gt;</operator><name>sample_aspect_ratio</name></name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>sample_aspect_ratio</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ifilter</name><operator>-&gt;</operator><name>sample_rate</name></name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>sample_rate</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ifilter</name><operator>-&gt;</operator><name>channels</name></name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>channels</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ifilter</name><operator>-&gt;</operator><name>channel_layout</name></name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>channel_layout</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>frame</name><operator>-&gt;</operator><name>hw_frames_ctx</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ifilter</name><operator>-&gt;</operator><name>hw_frames_ctx</name></name> <operator>=</operator> <call><name>av_buffer_ref</name><argument_list>(<argument><expr><name><name>frame</name><operator>-&gt;</operator><name>hw_frames_ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ifilter</name><operator>-&gt;</operator><name>hw_frames_ctx</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>ist_in_filtergraph</name><parameter_list>(<parameter><decl><type><name>FilterGraph</name> <modifier>*</modifier></type><name>fg</name></decl></parameter>, <parameter><decl><type><name>InputStream</name> <modifier>*</modifier></type><name>ist</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>fg</name><operator>-&gt;</operator><name>nb_inputs</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name><name>fg</name><operator>-&gt;</operator><name>inputs</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>ist</name> <operator>==</operator> <name>ist</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>filtergraph_is_simple</name><parameter_list>(<parameter><decl><type><name>FilterGraph</name> <modifier>*</modifier></type><name>fg</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><operator>!</operator><name><name>fg</name><operator>-&gt;</operator><name>graph_desc</name></name></expr>;</return>

</block_content>}</block></function>

</unit>
