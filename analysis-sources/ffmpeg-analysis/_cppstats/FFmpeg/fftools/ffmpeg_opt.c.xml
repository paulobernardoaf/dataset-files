<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\fftools\ffmpeg_opt.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ffmpeg.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cmdutils.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavformat/avformat.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavcodec/avcodec.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavfilter/avfilter.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avassert.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avstring.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avutil.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/channel_layout.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/intreadwrite.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/fifo.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/mathematics.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/opt.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/parseutils.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/pixdesc.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/pixfmt.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFAULT_PASS_LOGFILENAME_PREFIX</name></cpp:macro> <cpp:value>"ffmpeg2pass"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SPECIFIER_OPT_FMT_str</name></cpp:macro> <cpp:value>"%s"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SPECIFIER_OPT_FMT_i</name></cpp:macro> <cpp:value>"%i"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SPECIFIER_OPT_FMT_i64</name></cpp:macro> <cpp:value>"%"PRId64</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SPECIFIER_OPT_FMT_ui64</name></cpp:macro> <cpp:value>"%"PRIu64</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SPECIFIER_OPT_FMT_f</name></cpp:macro> <cpp:value>"%f"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SPECIFIER_OPT_FMT_dbl</name></cpp:macro> <cpp:value>"%lf"</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>opt_name_codec_names</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="string">"c"</literal></expr>, <expr><literal type="string">"codec"</literal></expr>, <expr><literal type="string">"acodec"</literal></expr>, <expr><literal type="string">"vcodec"</literal></expr>, <expr><literal type="string">"scodec"</literal></expr>, <expr><literal type="string">"dcodec"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>opt_name_audio_channels</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="string">"ac"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>opt_name_audio_sample_rate</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="string">"ar"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>opt_name_frame_rates</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="string">"r"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>opt_name_frame_sizes</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="string">"s"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>opt_name_frame_pix_fmts</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="string">"pix_fmt"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>opt_name_ts_scale</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="string">"itsscale"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>opt_name_hwaccels</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="string">"hwaccel"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>opt_name_hwaccel_devices</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="string">"hwaccel_device"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>opt_name_hwaccel_output_formats</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="string">"hwaccel_output_format"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>opt_name_autorotate</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="string">"autorotate"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>opt_name_max_frames</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="string">"frames"</literal></expr>, <expr><literal type="string">"aframes"</literal></expr>, <expr><literal type="string">"vframes"</literal></expr>, <expr><literal type="string">"dframes"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>opt_name_bitstream_filters</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="string">"bsf"</literal></expr>, <expr><literal type="string">"absf"</literal></expr>, <expr><literal type="string">"vbsf"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>opt_name_codec_tags</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="string">"tag"</literal></expr>, <expr><literal type="string">"atag"</literal></expr>, <expr><literal type="string">"vtag"</literal></expr>, <expr><literal type="string">"stag"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>opt_name_sample_fmts</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="string">"sample_fmt"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>opt_name_qscale</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="string">"q"</literal></expr>, <expr><literal type="string">"qscale"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>opt_name_forced_key_frames</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="string">"forced_key_frames"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>opt_name_force_fps</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="string">"force_fps"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>opt_name_frame_aspect_ratios</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="string">"aspect"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>opt_name_rc_overrides</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="string">"rc_override"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>opt_name_intra_matrices</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="string">"intra_matrix"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>opt_name_inter_matrices</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="string">"inter_matrix"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>opt_name_chroma_intra_matrices</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="string">"chroma_intra_matrix"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>opt_name_top_field_first</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="string">"top"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>opt_name_presets</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="string">"pre"</literal></expr>, <expr><literal type="string">"apre"</literal></expr>, <expr><literal type="string">"vpre"</literal></expr>, <expr><literal type="string">"spre"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>opt_name_copy_initial_nonkeyframes</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="string">"copyinkfr"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>opt_name_copy_prior_start</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="string">"copypriorss"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>opt_name_filters</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="string">"filter"</literal></expr>, <expr><literal type="string">"af"</literal></expr>, <expr><literal type="string">"vf"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>opt_name_filter_scripts</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="string">"filter_script"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>opt_name_reinit_filters</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="string">"reinit_filter"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>opt_name_fix_sub_duration</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="string">"fix_sub_duration"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>opt_name_canvas_sizes</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="string">"canvas_size"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>opt_name_pass</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="string">"pass"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>opt_name_passlogfiles</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="string">"passlogfile"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>opt_name_max_muxing_queue_size</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="string">"max_muxing_queue_size"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>opt_name_guess_layout_max</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="string">"guess_layout_max"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>opt_name_apad</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="string">"apad"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>opt_name_discard</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="string">"discard"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>opt_name_disposition</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="string">"disposition"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>opt_name_time_bases</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="string">"time_base"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>opt_name_enc_time_bases</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="string">"enc_time_base"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WARN_MULTIPLE_OPT_USAGE</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>type</name></type></parameter>, <parameter><type><name>so</name></type></parameter>, <parameter><type><name>st</name></type></parameter>)</parameter_list></cpp:macro><cpp:value>{char namestr[128] = "";const char *spec = so-&gt;specifier &amp;&amp; so-&gt;specifier[0] ? so-&gt;specifier : "";for (i = 0; opt_name_##name[i]; i++)av_strlcatf(namestr, sizeof(namestr), "-%s%s", opt_name_##name[i], opt_name_##name[i+1] ? (opt_name_##name[i+2] ? ", " : " or ") : "");av_log(NULL, AV_LOG_WARNING, "Multiple %s options specified for stream %d, only the last option '-%s%s%s "SPECIFIER_OPT_FMT_##type"' will be used.\n",namestr, st-&gt;index, opt_name_##name[0], spec[0] ? ":" : "", spec, so-&gt;u.type);}</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MATCH_PER_STREAM_OPT</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>type</name></type></parameter>, <parameter><type><name>outvar</name></type></parameter>, <parameter><type><name>fmtctx</name></type></parameter>, <parameter><type><name>st</name></type></parameter>)</parameter_list></cpp:macro><cpp:value>{int i, ret, matches = 0;SpecifierOpt *so;for (i = 0; i &lt; o-&gt;nb_ ##name; i++) {char *spec = o-&gt;name[i].specifier;if ((ret = check_stream_specifier(fmtctx, st, spec)) &gt; 0) {outvar = o-&gt;name[i].u.type;so = &amp;o-&gt;name[i];matches++;} else if (ret &lt; 0)exit_program(1);}if (matches &gt; 1)WARN_MULTIPLE_OPT_USAGE(name, type, so, st);}</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MATCH_PER_TYPE_OPT</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>type</name></type></parameter>, <parameter><type><name>outvar</name></type></parameter>, <parameter><type><name>fmtctx</name></type></parameter>, <parameter><type><name>mediatype</name></type></parameter>)</parameter_list></cpp:macro><cpp:value>{int i;for (i = 0; i &lt; o-&gt;nb_ ##name; i++) {char *spec = o-&gt;name[i].specifier;if (!strcmp(spec, mediatype))outvar = o-&gt;name[i].u.type;}}</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>const</specifier> <name>HWAccel</name></type> <name><name>hwaccels</name><index>[]</index></name> <init>= <expr><block>{

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_VIDEOTOOLBOX</name></expr></cpp:if>

<expr><block>{ <expr><literal type="string">"videotoolbox"</literal></expr>, <expr><name>videotoolbox_init</name></expr>, <expr><name>HWACCEL_VIDEOTOOLBOX</name></expr>, <expr><name>AV_PIX_FMT_VIDEOTOOLBOX</name></expr> }</block></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_LIBMFX</name></expr></cpp:if>

<expr><block>{ <expr><literal type="string">"qsv"</literal></expr>, <expr><name>qsv_init</name></expr>, <expr><name>HWACCEL_QSV</name></expr>, <expr><name>AV_PIX_FMT_QSV</name></expr> }</block></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVBufferRef</name> <modifier>*</modifier></type><name>hw_device_ctx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HWDevice</name> <modifier>*</modifier></type><name>filter_hw_device</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>vstats_filename</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>sdp_filename</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>audio_drift_threshold</name> <init>= <expr><literal type="number">0.1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>dts_delta_threshold</name> <init>= <expr><literal type="number">10</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>dts_error_threshold</name> <init>= <expr><literal type="number">3600</literal><operator>*</operator><literal type="number">30</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>audio_volume</name> <init>= <expr><literal type="number">256</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>audio_sync_method</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>video_sync_method</name> <init>= <expr><name>VSYNC_AUTO</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>frame_drop_threshold</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>do_deinterlace</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>do_benchmark</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>do_benchmark_all</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>do_hex_dump</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>do_pkt_dump</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>copy_ts</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>start_at_zero</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>copy_tb</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>debug_ts</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>exit_on_error</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>abort_on_flags</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>print_stats</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>qp_hist</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>stdin_interaction</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>frame_bits_per_raw_sample</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>max_error_rate</name> <init>= <expr><literal type="number">2.0</literal><operator>/</operator><literal type="number">3</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>filter_nbthreads</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>filter_complex_nbthreads</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>vstats_version</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>intra_only</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>file_overwrite</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>no_file_overwrite</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>do_psnr</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>input_sync</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>input_stream_potentially_available</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>ignore_unknown_streams</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>copy_unknown_streams</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>find_stream_info</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>uninit_options</name><parameter_list>(<parameter><decl><type><name>OptionsContext</name> <modifier>*</modifier></type><name>o</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>OptionDef</name> <modifier>*</modifier></type><name>po</name> <init>= <expr><name>options</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<while>while <condition>(<expr><name><name>po</name><operator>-&gt;</operator><name>name</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><operator>(</operator><name>uint8_t</name><operator>*</operator><operator>)</operator><name>o</name> <operator>+</operator> <name><name>po</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>off</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>po</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>OPT_SPEC</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>SpecifierOpt</name> <modifier>*</modifier><modifier>*</modifier></type><name>so</name> <init>= <expr><name>dst</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>count</name> <init>= <expr><operator>(</operator><name>int</name><operator>*</operator><operator>)</operator><operator>(</operator><name>so</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>*</operator><name>count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><operator>*</operator><name>so</name><operator>)</operator><index>[<expr><name>i</name></expr>]</index><operator>.</operator><name>specifier</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>po</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>OPT_STRING</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><operator>*</operator><name>so</name><operator>)</operator><index>[<expr><name>i</name></expr>]</index><operator>.</operator><name><name>u</name><operator>.</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><name>so</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>count</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>po</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>OPT_OFFSET</name> <operator>&amp;&amp;</operator> <name><name>po</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>OPT_STRING</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>po</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>o</name><operator>-&gt;</operator><name>nb_stream_maps</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>o</name><operator>-&gt;</operator><name>stream_maps</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>linklabel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>o</name><operator>-&gt;</operator><name>stream_maps</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>o</name><operator>-&gt;</operator><name>audio_channel_maps</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>o</name><operator>-&gt;</operator><name>streamid_map</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>o</name><operator>-&gt;</operator><name>attachments</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>init_options</name><parameter_list>(<parameter><decl><type><name>OptionsContext</name> <modifier>*</modifier></type><name>o</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>o</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>o</name><operator>-&gt;</operator><name>stop_time</name></name> <operator>=</operator> <name>INT64_MAX</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>o</name><operator>-&gt;</operator><name>mux_max_delay</name></name> <operator>=</operator> <literal type="number">0.7</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>o</name><operator>-&gt;</operator><name>start_time</name></name> <operator>=</operator> <name>AV_NOPTS_VALUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>o</name><operator>-&gt;</operator><name>start_time_eof</name></name> <operator>=</operator> <name>AV_NOPTS_VALUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>o</name><operator>-&gt;</operator><name>recording_time</name></name> <operator>=</operator> <name>INT64_MAX</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>o</name><operator>-&gt;</operator><name>limit_filesize</name></name> <operator>=</operator> <name>UINT64_MAX</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>o</name><operator>-&gt;</operator><name>chapters_input_file</name></name> <operator>=</operator> <name>INT_MAX</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>o</name><operator>-&gt;</operator><name>accurate_seek</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>show_hwaccels</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>optctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>opt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>enum</name> <name>AVHWDeviceType</name></name></type> <name>type</name> <init>= <expr><name>AV_HWDEVICE_TYPE_NONE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Hardware acceleration methods:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>(</operator><name>type</name> <operator>=</operator> <call><name>av_hwdevice_iterate_types</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator>

<name>AV_HWDEVICE_TYPE_NONE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><call><name>av_hwdevice_get_type_name</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>hwaccels</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><name><name>hwaccels</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>AVDictionary</name> <modifier>*</modifier></type><name>strip_specifiers</name><parameter_list>(<parameter><decl><type><name>AVDictionary</name> <modifier>*</modifier></type><name>dict</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVDictionaryEntry</name> <modifier>*</modifier></type><name>e</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVDictionary</name> <modifier>*</modifier></type><name>ret</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><operator>(</operator><name>e</name> <operator>=</operator> <call><name>av_dict_get</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><name>e</name></expr></argument>, <argument><expr><name>AV_DICT_IGNORE_SUFFIX</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>strchr</name><argument_list>(<argument><expr><name><name>e</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><literal type="char">':'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_dict_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ret</name></expr></argument>, <argument><expr><name><name>e</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><name><name>e</name><operator>-&gt;</operator><name>value</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <literal type="char">':'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></while>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>opt_abort_on</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>optctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>opt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVOption</name></type> <name><name>opts</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><literal type="string">"abort_on"</literal></expr> , <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_FLAGS</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0</literal></expr> }</block></expr>, <expr><name>INT64_MIN</name></expr>, <expr><name>INT64_MAX</name></expr>, <expr><operator>.</operator><name>unit</name> <operator>=</operator> <literal type="string">"flags"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"empty_output"</literal></expr> , <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>ABORT_ON_FLAG_EMPTY_OUTPUT</name></expr> }</block></expr>, <expr><operator>.</operator><name>unit</name> <operator>=</operator> <literal type="string">"flags"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVClass</name></type> <name>class</name> <init>= <expr><block>{

<expr><operator>.</operator><name>class_name</name> <operator>=</operator> <literal type="string">""</literal></expr>,

<expr><operator>.</operator><name>item_name</name> <operator>=</operator> <name>av_default_item_name</name></expr>,

<expr><operator>.</operator><name>option</name> <operator>=</operator> <name>opts</name></expr>,

<expr><operator>.</operator><name>version</name> <operator>=</operator> <name>LIBAVUTIL_VERSION_INT</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>AVClass</name> <modifier>*</modifier></type><name>pclass</name> <init>= <expr><operator>&amp;</operator><name>class</name></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>av_opt_eval_flags</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pclass</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>opts</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>abort_on_flags</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>opt_sameq</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>optctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>opt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Option '%s' was removed. "</literal>

<literal type="string">"If you are looking for an option to preserve the quality (which is not "</literal>

<literal type="string">"what -%s was for), use -qscale 0 or an equivalent quality factor option.\n"</literal></expr></argument>,

<argument><expr><name>opt</name></expr></argument>, <argument><expr><name>opt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>opt_video_channel</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>optctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>opt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"This option is deprecated, use -channel.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>opt_default</name><argument_list>(<argument><expr><name>optctx</name></expr></argument>, <argument><expr><literal type="string">"channel"</literal></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>opt_video_standard</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>optctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>opt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"This option is deprecated, use -standard.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>opt_default</name><argument_list>(<argument><expr><name>optctx</name></expr></argument>, <argument><expr><literal type="string">"standard"</literal></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>opt_audio_codec</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>optctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>opt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>OptionsContext</name> <modifier>*</modifier></type><name>o</name> <init>= <expr><name>optctx</name></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>parse_option</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><literal type="string">"codec:a"</literal></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>opt_video_codec</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>optctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>opt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>OptionsContext</name> <modifier>*</modifier></type><name>o</name> <init>= <expr><name>optctx</name></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>parse_option</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><literal type="string">"codec:v"</literal></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>opt_subtitle_codec</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>optctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>opt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>OptionsContext</name> <modifier>*</modifier></type><name>o</name> <init>= <expr><name>optctx</name></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>parse_option</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><literal type="string">"codec:s"</literal></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>opt_data_codec</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>optctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>opt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>OptionsContext</name> <modifier>*</modifier></type><name>o</name> <init>= <expr><name>optctx</name></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>parse_option</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><literal type="string">"codec:d"</literal></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>opt_map</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>optctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>opt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>OptionsContext</name> <modifier>*</modifier></type><name>o</name> <init>= <expr><name>optctx</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>StreamMap</name> <modifier>*</modifier></type><name>m</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>negative</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>file_idx</name></decl>, <decl><type ref="prev"/><name>disabled</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>sync_file_idx</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>sync_stream_idx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>sync</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>map</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>allow_unused</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>arg</name> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>negative</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>arg</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>map</name> <operator>=</operator> <call><name>av_strdup</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>map</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>sync</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>map</name></expr></argument>, <argument><expr><literal type="char">','</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>sync</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>sync_file_idx</name> <operator>=</operator> <call><name>strtol</name><argument_list>(<argument><expr><name>sync</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>sync</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>sync_file_idx</name> <operator>&gt;=</operator> <name>nb_input_files</name> <operator>||</operator> <name>sync_file_idx</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_FATAL</name></expr></argument>, <argument><expr><literal type="string">"Invalid sync file index: %d.\n"</literal></expr></argument>, <argument><expr><name>sync_file_idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>exit_program</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>sync</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>sync</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>input_files</name><index>[<expr><name>sync_file_idx</name></expr>]</index></name><operator>-&gt;</operator><name>nb_streams</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><call><name>check_stream_specifier</name><argument_list>(<argument><expr><name><name>input_files</name><index>[<expr><name>sync_file_idx</name></expr>]</index></name><operator>-&gt;</operator><name>ctx</name></expr></argument>,

<argument><expr><name><name>input_files</name><index>[<expr><name>sync_file_idx</name></expr>]</index></name><operator>-&gt;</operator><name><name>ctx</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>sync</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>sync_stream_idx</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <name><name>input_files</name><index>[<expr><name>sync_file_idx</name></expr>]</index></name><operator>-&gt;</operator><name>nb_streams</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_FATAL</name></expr></argument>, <argument><expr><literal type="string">"Sync stream specification in map %s does not "</literal>

<literal type="string">"match any streams.\n"</literal></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>exit_program</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>input_streams</name><index>[<expr><name><name>input_files</name><index>[<expr><name>sync_file_idx</name></expr>]</index></name><operator>-&gt;</operator><name>ist_index</name> <operator>+</operator> <name>sync_stream_idx</name></expr>]</index></name><operator>-&gt;</operator><name>user_set_discard</name> <operator>==</operator> <name>AVDISCARD_ALL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_FATAL</name></expr></argument>, <argument><expr><literal type="string">"Sync stream specification in map %s matches a disabled input "</literal>

<literal type="string">"stream.\n"</literal></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>exit_program</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>map</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'['</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><name>map</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>GROW_ARRAY</name><argument_list>(<argument><expr><name><name>o</name><operator>-&gt;</operator><name>stream_maps</name></name></expr></argument>, <argument><expr><name><name>o</name><operator>-&gt;</operator><name>nb_stream_maps</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>m</name> <operator>=</operator> <operator>&amp;</operator><name><name>o</name><operator>-&gt;</operator><name>stream_maps</name><index>[<expr><name><name>o</name><operator>-&gt;</operator><name>nb_stream_maps</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>linklabel</name></name> <operator>=</operator> <call><name>av_get_token</name><argument_list>(<argument><expr><operator>&amp;</operator><name>c</name></expr></argument>, <argument><expr><literal type="string">"]"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>m</name><operator>-&gt;</operator><name>linklabel</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid output link label: %s.\n"</literal></expr></argument>, <argument><expr><name>map</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>exit_program</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>allow_unused</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>map</name></expr></argument>, <argument><expr><literal type="char">'?'</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>allow_unused</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>file_idx</name> <operator>=</operator> <call><name>strtol</name><argument_list>(<argument><expr><name>map</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>file_idx</name> <operator>&gt;=</operator> <name>nb_input_files</name> <operator>||</operator> <name>file_idx</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_FATAL</name></expr></argument>, <argument><expr><literal type="string">"Invalid input file index: %d.\n"</literal></expr></argument>, <argument><expr><name>file_idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>exit_program</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>negative</name></expr>)</condition><block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>o</name><operator>-&gt;</operator><name>nb_stream_maps</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>m</name> <operator>=</operator> <operator>&amp;</operator><name><name>o</name><operator>-&gt;</operator><name>stream_maps</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>file_idx</name> <operator>==</operator> <name><name>m</name><operator>-&gt;</operator><name>file_index</name></name> <operator>&amp;&amp;</operator>

<call><name>check_stream_specifier</name><argument_list>(<argument><expr><name><name>input_files</name><index>[<expr><name><name>m</name><operator>-&gt;</operator><name>file_index</name></name></expr>]</index></name><operator>-&gt;</operator><name>ctx</name></expr></argument>,

<argument><expr><name><name>input_files</name><index>[<expr><name><name>m</name><operator>-&gt;</operator><name>file_index</name></name></expr>]</index></name><operator>-&gt;</operator><name><name>ctx</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name><name>m</name><operator>-&gt;</operator><name>stream_index</name></name></expr>]</index></name></expr></argument>,

<argument><expr><ternary><condition><expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">':'</literal></expr> ?</condition><then> <expr><name>p</name> <operator>+</operator> <literal type="number">1</literal></expr> </then><else>: <expr><name>p</name></expr></else></ternary></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>disabled</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>input_files</name><index>[<expr><name>file_idx</name></expr>]</index></name><operator>-&gt;</operator><name>nb_streams</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>check_stream_specifier</name><argument_list>(<argument><expr><name><name>input_files</name><index>[<expr><name>file_idx</name></expr>]</index></name><operator>-&gt;</operator><name>ctx</name></expr></argument>, <argument><expr><name><name>input_files</name><index>[<expr><name>file_idx</name></expr>]</index></name><operator>-&gt;</operator><name><name>ctx</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,

<argument><expr><ternary><condition><expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">':'</literal></expr> ?</condition><then> <expr><name>p</name> <operator>+</operator> <literal type="number">1</literal></expr> </then><else>: <expr><name>p</name></expr></else></ternary></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>input_streams</name><index>[<expr><name><name>input_files</name><index>[<expr><name>file_idx</name></expr>]</index></name><operator>-&gt;</operator><name>ist_index</name> <operator>+</operator> <name>i</name></expr>]</index></name><operator>-&gt;</operator><name>user_set_discard</name> <operator>==</operator> <name>AVDISCARD_ALL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>disabled</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>GROW_ARRAY</name><argument_list>(<argument><expr><name><name>o</name><operator>-&gt;</operator><name>stream_maps</name></name></expr></argument>, <argument><expr><name><name>o</name><operator>-&gt;</operator><name>nb_stream_maps</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>m</name> <operator>=</operator> <operator>&amp;</operator><name><name>o</name><operator>-&gt;</operator><name>stream_maps</name><index>[<expr><name><name>o</name><operator>-&gt;</operator><name>nb_stream_maps</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>file_index</name></name> <operator>=</operator> <name>file_idx</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>stream_index</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>sync_file_idx</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>sync_file_index</name></name> <operator>=</operator> <name>sync_file_idx</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>sync_stream_index</name></name> <operator>=</operator> <name>sync_stream_idx</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>sync_file_index</name></name> <operator>=</operator> <name>file_idx</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>sync_stream_index</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for></block_content></block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>m</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>allow_unused</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_VERBOSE</name></expr></argument>, <argument><expr><literal type="string">"Stream map '%s' matches no streams; ignoring.\n"</literal></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>disabled</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_FATAL</name></expr></argument>, <argument><expr><literal type="string">"Stream map '%s' matches disabled streams.\n"</literal>

<literal type="string">"To ignore this, add a trailing '?' to the map.\n"</literal></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>exit_program</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_FATAL</name></expr></argument>, <argument><expr><literal type="string">"Stream map '%s' matches no streams.\n"</literal>

<literal type="string">"To ignore this, add a trailing '?' to the map.\n"</literal></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>exit_program</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>map</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>opt_attach</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>optctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>opt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>OptionsContext</name> <modifier>*</modifier></type><name>o</name> <init>= <expr><name>optctx</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>GROW_ARRAY</name><argument_list>(<argument><expr><name><name>o</name><operator>-&gt;</operator><name>attachments</name></name></expr></argument>, <argument><expr><name><name>o</name><operator>-&gt;</operator><name>nb_attachments</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>o</name><operator>-&gt;</operator><name>attachments</name><index>[<expr><name><name>o</name><operator>-&gt;</operator><name>nb_attachments</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>arg</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>opt_map_channel</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>optctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>opt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>OptionsContext</name> <modifier>*</modifier></type><name>o</name> <init>= <expr><name>optctx</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVStream</name> <modifier>*</modifier></type><name>st</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AudioChannelMap</name> <modifier>*</modifier></type><name>m</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>allow_unused</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>mapchan</name></decl>;</decl_stmt>

<expr_stmt><expr><name>mapchan</name> <operator>=</operator> <call><name>av_strdup</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>mapchan</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>GROW_ARRAY</name><argument_list>(<argument><expr><name><name>o</name><operator>-&gt;</operator><name>audio_channel_maps</name></name></expr></argument>, <argument><expr><name><name>o</name><operator>-&gt;</operator><name>nb_audio_channel_maps</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>m</name> <operator>=</operator> <operator>&amp;</operator><name><name>o</name><operator>-&gt;</operator><name>audio_channel_maps</name><index>[<expr><name><name>o</name><operator>-&gt;</operator><name>nb_audio_channel_maps</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>sscanf</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"%d:%d.%d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>m</name><operator>-&gt;</operator><name>channel_idx</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>m</name><operator>-&gt;</operator><name>ofile_idx</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>m</name><operator>-&gt;</operator><name>ostream_idx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>n</name> <operator>==</operator> <literal type="number">1</literal> <operator>||</operator> <name>n</name> <operator>==</operator> <literal type="number">3</literal><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>m</name><operator>-&gt;</operator><name>channel_idx</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>file_idx</name></name> <operator>=</operator> <name><name>m</name><operator>-&gt;</operator><name>stream_idx</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>n</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>ofile_idx</name></name> <operator>=</operator> <name><name>m</name><operator>-&gt;</operator><name>ostream_idx</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>mapchan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>sscanf</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"%d.%d.%d:%d.%d"</literal></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>m</name><operator>-&gt;</operator><name>file_idx</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>m</name><operator>-&gt;</operator><name>stream_idx</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>m</name><operator>-&gt;</operator><name>channel_idx</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>m</name><operator>-&gt;</operator><name>ofile_idx</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>m</name><operator>-&gt;</operator><name>ostream_idx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>n</name> <operator>!=</operator> <literal type="number">3</literal> <operator>&amp;&amp;</operator> <name>n</name> <operator>!=</operator> <literal type="number">5</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_FATAL</name></expr></argument>, <argument><expr><literal type="string">"Syntax error, mapchan usage: "</literal>

<literal type="string">"[file.stream.channel|-1][:syncfile:syncstream]\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>exit_program</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>n</name> <operator>!=</operator> <literal type="number">5</literal></expr>)</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>ofile_idx</name></name> <operator>=</operator> <name><name>m</name><operator>-&gt;</operator><name>ostream_idx</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>file_idx</name></name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>m</name><operator>-&gt;</operator><name>file_idx</name></name> <operator>&gt;=</operator> <name>nb_input_files</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_FATAL</name></expr></argument>, <argument><expr><literal type="string">"mapchan: invalid input file index: %d\n"</literal></expr></argument>,

<argument><expr><name><name>m</name><operator>-&gt;</operator><name>file_idx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>exit_program</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>stream_idx</name></name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator>

<name><name>m</name><operator>-&gt;</operator><name>stream_idx</name></name> <operator>&gt;=</operator> <name><name>input_files</name><index>[<expr><name><name>m</name><operator>-&gt;</operator><name>file_idx</name></name></expr>]</index></name><operator>-&gt;</operator><name>nb_streams</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_FATAL</name></expr></argument>, <argument><expr><literal type="string">"mapchan: invalid input file stream index #%d.%d\n"</literal></expr></argument>,

<argument><expr><name><name>m</name><operator>-&gt;</operator><name>file_idx</name></name></expr></argument>, <argument><expr><name><name>m</name><operator>-&gt;</operator><name>stream_idx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>exit_program</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>st</name> <operator>=</operator> <name><name>input_files</name><index>[<expr><name><name>m</name><operator>-&gt;</operator><name>file_idx</name></name></expr>]</index></name><operator>-&gt;</operator><name><name>ctx</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name><name>m</name><operator>-&gt;</operator><name>stream_idx</name></name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_type</name></name> <operator>!=</operator> <name>AVMEDIA_TYPE_AUDIO</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_FATAL</name></expr></argument>, <argument><expr><literal type="string">"mapchan: stream #%d.%d is not an audio stream.\n"</literal></expr></argument>,

<argument><expr><name><name>m</name><operator>-&gt;</operator><name>file_idx</name></name></expr></argument>, <argument><expr><name><name>m</name><operator>-&gt;</operator><name>stream_idx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>exit_program</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>allow_unused</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>mapchan</name></expr></argument>, <argument><expr><literal type="char">'?'</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>allow_unused</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>channel_idx</name></name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>m</name><operator>-&gt;</operator><name>channel_idx</name></name> <operator>&gt;=</operator> <name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>channels</name></name> <operator>||</operator>

<name><name>input_streams</name><index>[<expr><name><name>input_files</name><index>[<expr><name><name>m</name><operator>-&gt;</operator><name>file_idx</name></name></expr>]</index></name><operator>-&gt;</operator><name>ist_index</name> <operator>+</operator> <name><name>m</name><operator>-&gt;</operator><name>stream_idx</name></name></expr>]</index></name><operator>-&gt;</operator><name>user_set_discard</name> <operator>==</operator> <name>AVDISCARD_ALL</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>allow_unused</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_VERBOSE</name></expr></argument>, <argument><expr><literal type="string">"mapchan: invalid audio channel #%d.%d.%d\n"</literal></expr></argument>,

<argument><expr><name><name>m</name><operator>-&gt;</operator><name>file_idx</name></name></expr></argument>, <argument><expr><name><name>m</name><operator>-&gt;</operator><name>stream_idx</name></name></expr></argument>, <argument><expr><name><name>m</name><operator>-&gt;</operator><name>channel_idx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_FATAL</name></expr></argument>, <argument><expr><literal type="string">"mapchan: invalid audio channel #%d.%d.%d\n"</literal>

<literal type="string">"To ignore this, add a trailing '?' to the map_channel.\n"</literal></expr></argument>,

<argument><expr><name><name>m</name><operator>-&gt;</operator><name>file_idx</name></name></expr></argument>, <argument><expr><name><name>m</name><operator>-&gt;</operator><name>stream_idx</name></name></expr></argument>, <argument><expr><name><name>m</name><operator>-&gt;</operator><name>channel_idx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>exit_program</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>mapchan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>opt_sdp_file</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>optctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>opt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>sdp_filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sdp_filename</name> <operator>=</operator> <call><name>av_strdup</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_VAAPI</name></expr></cpp:if>

<function><type><specifier>static</specifier> <name>int</name></type> <name>opt_vaapi_device</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>optctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>opt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>HWDevice</name> <modifier>*</modifier></type><name>dev</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>prefix</name> <init>= <expr><literal type="string">"vaapi:"</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>tmp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

<expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name>av_asprintf</name><argument_list>(<argument><expr><literal type="string">"%s%s"</literal></expr></argument>, <argument><expr><name>prefix</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>tmp</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>hw_device_init_from_string</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>hw_device_ctx</name> <operator>=</operator> <call><name>av_buffer_ref</name><argument_list>(<argument><expr><name><name>dev</name><operator>-&gt;</operator><name>device_ref</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>hw_device_ctx</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>int</name></type> <name>opt_init_hw_device</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>optctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>opt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"list"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name><name>enum</name> <name>AVHWDeviceType</name></name></type> <name>type</name> <init>= <expr><name>AV_HWDEVICE_TYPE_NONE</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Supported hardware device types:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>(</operator><name>type</name> <operator>=</operator> <call><name>av_hwdevice_iterate_types</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator>

<name>AV_HWDEVICE_TYPE_NONE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><call><name>av_hwdevice_get_type_name</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>exit_program</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<return>return <expr><call><name>hw_device_init_from_string</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>opt_filter_hw_device</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>optctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>opt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>filter_hw_device</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Only one filter device can be used.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>filter_hw_device</name> <operator>=</operator> <call><name>hw_device_get_by_name</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>filter_hw_device</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid filter device %s.\n"</literal></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>parse_meta_type</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>type</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>index</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>stream_spec</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>arg</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>type</name> <operator>=</operator> <operator>*</operator><name>arg</name></expr>;</expr_stmt>

<switch>switch <condition>(<expr><operator>*</operator><name>arg</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="char">'g'</literal></expr>:</case>

<break>break;</break>

<case>case <expr><literal type="char">'s'</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>*</operator><operator>(</operator><operator>++</operator><name>arg</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>*</operator><name>arg</name> <operator>!=</operator> <literal type="char">':'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_FATAL</name></expr></argument>, <argument><expr><literal type="string">"Invalid metadata specifier %s.\n"</literal></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>exit_program</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>stream_spec</name> <operator>=</operator> <ternary><condition><expr><operator>*</operator><name>arg</name> <operator>==</operator> <literal type="char">':'</literal></expr> ?</condition><then> <expr><name>arg</name> <operator>+</operator> <literal type="number">1</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'c'</literal></expr>:</case>

<case>case <expr><literal type="char">'p'</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>*</operator><operator>(</operator><operator>++</operator><name>arg</name><operator>)</operator> <operator>==</operator> <literal type="char">':'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>index</name> <operator>=</operator> <call><name>strtol</name><argument_list>(<argument><expr><operator>++</operator><name>arg</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_FATAL</name></expr></argument>, <argument><expr><literal type="string">"Invalid metadata type %c.\n"</literal></expr></argument>, <argument><expr><operator>*</operator><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>exit_program</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></switch>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>type</name> <operator>=</operator> <literal type="char">'g'</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>copy_metadata</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>outspec</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>inspec</name></decl></parameter>, <parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>oc</name></decl></parameter>, <parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>ic</name></decl></parameter>, <parameter><decl><type><name>OptionsContext</name> <modifier>*</modifier></type><name>o</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVDictionary</name> <modifier>*</modifier><modifier>*</modifier></type><name>meta_in</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVDictionary</name> <modifier>*</modifier><modifier>*</modifier></type><name>meta_out</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name>type_in</name></decl>, <decl><type ref="prev"/><name>type_out</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>istream_spec</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ostream_spec</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>idx_in</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>idx_out</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>parse_meta_type</name><argument_list>(<argument><expr><name>inspec</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>type_in</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>idx_in</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>istream_spec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>parse_meta_type</name><argument_list>(<argument><expr><name>outspec</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>type_out</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>idx_out</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ostream_spec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ic</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>type_out</name> <operator>==</operator> <literal type="char">'g'</literal> <operator>||</operator> <operator>!</operator><operator>*</operator><name>outspec</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>o</name><operator>-&gt;</operator><name>metadata_global_manual</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>type_out</name> <operator>==</operator> <literal type="char">'s'</literal> <operator>||</operator> <operator>!</operator><operator>*</operator><name>outspec</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>o</name><operator>-&gt;</operator><name>metadata_streams_manual</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>type_out</name> <operator>==</operator> <literal type="char">'c'</literal> <operator>||</operator> <operator>!</operator><operator>*</operator><name>outspec</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>o</name><operator>-&gt;</operator><name>metadata_chapters_manual</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>type_in</name> <operator>==</operator> <literal type="char">'g'</literal> <operator>||</operator> <name>type_out</name> <operator>==</operator> <literal type="char">'g'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>o</name><operator>-&gt;</operator><name>metadata_global_manual</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>type_in</name> <operator>==</operator> <literal type="char">'s'</literal> <operator>||</operator> <name>type_out</name> <operator>==</operator> <literal type="char">'s'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>o</name><operator>-&gt;</operator><name>metadata_streams_manual</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>type_in</name> <operator>==</operator> <literal type="char">'c'</literal> <operator>||</operator> <name>type_out</name> <operator>==</operator> <literal type="char">'c'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>o</name><operator>-&gt;</operator><name>metadata_chapters_manual</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ic</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>METADATA_CHECK_INDEX</name><parameter_list>(<parameter><type><name>index</name></type></parameter>, <parameter><type><name>nb_elems</name></type></parameter>, <parameter><type><name>desc</name></type></parameter>)</parameter_list></cpp:macro><cpp:value>if ((index) &lt; 0 || (index) &gt;= (nb_elems)) {av_log(NULL, AV_LOG_FATAL, "Invalid %s index %d while processing metadata maps.\n",(desc), (index));exit_program(1);}</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SET_DICT</name><parameter_list>(<parameter><type><name>type</name></type></parameter>, <parameter><type><name>meta</name></type></parameter>, <parameter><type><name>context</name></type></parameter>, <parameter><type><name>index</name></type></parameter>)</parameter_list></cpp:macro><cpp:value>switch (type) {case 'g':meta = &amp;context-&gt;metadata;break;case 'c':METADATA_CHECK_INDEX(index, context-&gt;nb_chapters, "chapter")meta = &amp;context-&gt;chapters[index]-&gt;metadata;break;case 'p':METADATA_CHECK_INDEX(index, context-&gt;nb_programs, "program")meta = &amp;context-&gt;programs[index]-&gt;metadata;break;case 's':break; default: av_assert0(0);}</cpp:value></cpp:define>

<expr_stmt><expr><call><name>SET_DICT</name><argument_list>(<argument><expr><name>type_in</name></expr></argument>, <argument><expr><name>meta_in</name></expr></argument>, <argument><expr><name>ic</name></expr></argument>, <argument><expr><name>idx_in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SET_DICT</name><argument_list>(<argument><expr><name>type_out</name></expr></argument>, <argument><expr><name>meta_out</name></expr></argument>, <argument><expr><name>oc</name></expr></argument>, <argument><expr><name>idx_out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>type_in</name> <operator>==</operator> <literal type="char">'s'</literal></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ic</name><operator>-&gt;</operator><name>nb_streams</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>check_stream_specifier</name><argument_list>(<argument><expr><name>ic</name></expr></argument>, <argument><expr><name><name>ic</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>istream_spec</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>meta_in</name> <operator>=</operator> <operator>&amp;</operator><name><name>ic</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>metadata</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>exit_program</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>meta_in</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_FATAL</name></expr></argument>, <argument><expr><literal type="string">"Stream specifier %s does not match any streams.\n"</literal></expr></argument>, <argument><expr><name>istream_spec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>exit_program</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>type_out</name> <operator>==</operator> <literal type="char">'s'</literal></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>oc</name><operator>-&gt;</operator><name>nb_streams</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>check_stream_specifier</name><argument_list>(<argument><expr><name>oc</name></expr></argument>, <argument><expr><name><name>oc</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>ostream_spec</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>meta_out</name> <operator>=</operator> <operator>&amp;</operator><name><name>oc</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>metadata</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_dict_copy</name><argument_list>(<argument><expr><name>meta_out</name></expr></argument>, <argument><expr><operator>*</operator><name>meta_in</name></expr></argument>, <argument><expr><name>AV_DICT_DONT_OVERWRITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>exit_program</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_dict_copy</name><argument_list>(<argument><expr><name>meta_out</name></expr></argument>, <argument><expr><operator>*</operator><name>meta_in</name></expr></argument>, <argument><expr><name>AV_DICT_DONT_OVERWRITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>opt_recording_timestamp</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>optctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>opt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>OptionsContext</name> <modifier>*</modifier></type><name>o</name> <init>= <expr><name>optctx</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>recording_timestamp</name> <init>= <expr><call><name>parse_time_or_die</name><argument_list>(<argument><expr><name>opt</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>/</operator> <literal type="number">1E6</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>tm</name></name></type> <name>time</name> <init>= <expr><operator>*</operator><call><name>gmtime</name><argument_list>(<argument><expr><operator>(</operator><name>time_t</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>recording_timestamp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strftime</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"creation_time=%Y-%m-%dT%H:%M:%S%z"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>time</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>parse_option</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><literal type="string">"metadata"</literal></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"%s is deprecated, set the 'creation_time' metadata "</literal>

<literal type="string">"tag instead.\n"</literal></expr></argument>, <argument><expr><name>opt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>AVCodec</name> <modifier>*</modifier></type><name>find_codec_or_die</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>AVMediaType</name></name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>encoder</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>AVCodecDescriptor</name> <modifier>*</modifier></type><name>desc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>codec_string</name> <init>= <expr><ternary><condition><expr><name>encoder</name></expr> ?</condition><then> <expr><literal type="string">"encoder"</literal></expr> </then><else>: <expr><literal type="string">"decoder"</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVCodec</name> <modifier>*</modifier></type><name>codec</name></decl>;</decl_stmt>

<expr_stmt><expr><name>codec</name> <operator>=</operator> <ternary><condition><expr><name>encoder</name></expr> ?</condition><then>

<expr><call><name>avcodec_find_encoder_by_name</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr> </then><else>:

<expr><call><name>avcodec_find_decoder_by_name</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>codec</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>desc</name> <operator>=</operator> <call><name>avcodec_descriptor_get_by_name</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>codec</name> <operator>=</operator> <ternary><condition><expr><name>encoder</name></expr> ?</condition><then> <expr><call><name>avcodec_find_encoder</name><argument_list>(<argument><expr><name><name>desc</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr> </then><else>:

<expr><call><name>avcodec_find_decoder</name><argument_list>(<argument><expr><name><name>desc</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>codec</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_VERBOSE</name></expr></argument>, <argument><expr><literal type="string">"Matched %s '%s' for codec '%s'.\n"</literal></expr></argument>,

<argument><expr><name>codec_string</name></expr></argument>, <argument><expr><name><name>codec</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>desc</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>codec</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_FATAL</name></expr></argument>, <argument><expr><literal type="string">"Unknown %s '%s'\n"</literal></expr></argument>, <argument><expr><name>codec_string</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>exit_program</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>codec</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>type</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_FATAL</name></expr></argument>, <argument><expr><literal type="string">"Invalid %s type '%s'\n"</literal></expr></argument>, <argument><expr><name>codec_string</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>exit_program</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>codec</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>AVCodec</name> <modifier>*</modifier></type><name>choose_decoder</name><parameter_list>(<parameter><decl><type><name>OptionsContext</name> <modifier>*</modifier></type><name>o</name></decl></parameter>, <parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>AVStream</name> <modifier>*</modifier></type><name>st</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>codec_name</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>MATCH_PER_STREAM_OPT</name><argument_list>(<argument><expr><name>codec_names</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>codec_name</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>st</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>codec_name</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>AVCodec</name> <modifier>*</modifier></type><name>codec</name> <init>= <expr><call><name>find_codec_or_die</name><argument_list>(<argument><expr><name>codec_name</name></expr></argument>, <argument><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_type</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>=</operator> <name><name>codec</name><operator>-&gt;</operator><name>id</name></name></expr>;</expr_stmt>

<return>return <expr><name>codec</name></expr>;</return>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<return>return <expr><call><name>avcodec_find_decoder</name><argument_list>(<argument><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_id</name></name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>add_input_streams</name><parameter_list>(<parameter><decl><type><name>OptionsContext</name> <modifier>*</modifier></type><name>o</name></decl></parameter>, <parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>ic</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ic</name><operator>-&gt;</operator><name>nb_streams</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>AVStream</name> <modifier>*</modifier></type><name>st</name> <init>= <expr><name><name>ic</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVCodecParameters</name> <modifier>*</modifier></type><name>par</name> <init>= <expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>InputStream</name> <modifier>*</modifier></type><name>ist</name> <init>= <expr><call><name>av_mallocz</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>ist</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>framerate</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>hwaccel_device</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>hwaccel</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>hwaccel_output_format</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>codec_tag</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>discard_str</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>AVClass</name> <modifier>*</modifier></type><name>cc</name> <init>= <expr><call><name>avcodec_get_class</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>AVOption</name> <modifier>*</modifier></type><name>discard_opt</name> <init>= <expr><call><name>av_opt_find</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cc</name></expr></argument>, <argument><expr><literal type="string">"skip_frame"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ist</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>exit_program</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>GROW_ARRAY</name><argument_list>(<argument><expr><name>input_streams</name></expr></argument>, <argument><expr><name>nb_input_streams</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>input_streams</name><index>[<expr><name>nb_input_streams</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>ist</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ist</name><operator>-&gt;</operator><name>st</name></name> <operator>=</operator> <name>st</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ist</name><operator>-&gt;</operator><name>file_index</name></name> <operator>=</operator> <name>nb_input_files</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ist</name><operator>-&gt;</operator><name>discard</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>discard</name></name> <operator>=</operator> <name>AVDISCARD_ALL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ist</name><operator>-&gt;</operator><name>nb_samples</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ist</name><operator>-&gt;</operator><name>min_pts</name></name> <operator>=</operator> <name>INT64_MAX</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ist</name><operator>-&gt;</operator><name>max_pts</name></name> <operator>=</operator> <name>INT64_MIN</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ist</name><operator>-&gt;</operator><name>ts_scale</name></name> <operator>=</operator> <literal type="number">1.0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MATCH_PER_STREAM_OPT</name><argument_list>(<argument><expr><name>ts_scale</name></expr></argument>, <argument><expr><name>dbl</name></expr></argument>, <argument><expr><name><name>ist</name><operator>-&gt;</operator><name>ts_scale</name></name></expr></argument>, <argument><expr><name>ic</name></expr></argument>, <argument><expr><name>st</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ist</name><operator>-&gt;</operator><name>autorotate</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MATCH_PER_STREAM_OPT</name><argument_list>(<argument><expr><name>autorotate</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>ist</name><operator>-&gt;</operator><name>autorotate</name></name></expr></argument>, <argument><expr><name>ic</name></expr></argument>, <argument><expr><name>st</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MATCH_PER_STREAM_OPT</name><argument_list>(<argument><expr><name>codec_tags</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>codec_tag</name></expr></argument>, <argument><expr><name>ic</name></expr></argument>, <argument><expr><name>st</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>codec_tag</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>tag</name> <init>= <expr><call><name>strtol</name><argument_list>(<argument><expr><name>codec_tag</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>next</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>next</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>tag</name> <operator>=</operator> <call><name>AV_RL32</name><argument_list>(<argument><expr><name>codec_tag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_tag</name></name> <operator>=</operator> <name>tag</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ist</name><operator>-&gt;</operator><name>dec</name></name> <operator>=</operator> <call><name>choose_decoder</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><name>ic</name></expr></argument>, <argument><expr><name>st</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ist</name><operator>-&gt;</operator><name>decoder_opts</name></name> <operator>=</operator> <call><name>filter_codec_opts</name><argument_list>(<argument><expr><name><name>o</name><operator>-&gt;</operator><name>g</name><operator>-&gt;</operator><name>codec_opts</name></name></expr></argument>, <argument><expr><name><name>ist</name><operator>-&gt;</operator><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_id</name></name></expr></argument>, <argument><expr><name>ic</name></expr></argument>, <argument><expr><name>st</name></expr></argument>, <argument><expr><name><name>ist</name><operator>-&gt;</operator><name>dec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ist</name><operator>-&gt;</operator><name>reinit_filters</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MATCH_PER_STREAM_OPT</name><argument_list>(<argument><expr><name>reinit_filters</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>ist</name><operator>-&gt;</operator><name>reinit_filters</name></name></expr></argument>, <argument><expr><name>ic</name></expr></argument>, <argument><expr><name>st</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MATCH_PER_STREAM_OPT</name><argument_list>(<argument><expr><name>discard</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>discard_str</name></expr></argument>, <argument><expr><name>ic</name></expr></argument>, <argument><expr><name>st</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ist</name><operator>-&gt;</operator><name>user_set_discard</name></name> <operator>=</operator> <name>AVDISCARD_NONE</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>o</name><operator>-&gt;</operator><name>video_disable</name></name> <operator>&amp;&amp;</operator> <name><name>ist</name><operator>-&gt;</operator><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_type</name></name> <operator>==</operator> <name>AVMEDIA_TYPE_VIDEO</name><operator>)</operator> <operator>||</operator>

<operator>(</operator><name><name>o</name><operator>-&gt;</operator><name>audio_disable</name></name> <operator>&amp;&amp;</operator> <name><name>ist</name><operator>-&gt;</operator><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_type</name></name> <operator>==</operator> <name>AVMEDIA_TYPE_AUDIO</name><operator>)</operator> <operator>||</operator>

<operator>(</operator><name><name>o</name><operator>-&gt;</operator><name>subtitle_disable</name></name> <operator>&amp;&amp;</operator> <name><name>ist</name><operator>-&gt;</operator><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_type</name></name> <operator>==</operator> <name>AVMEDIA_TYPE_SUBTITLE</name><operator>)</operator> <operator>||</operator>

<operator>(</operator><name><name>o</name><operator>-&gt;</operator><name>data_disable</name></name> <operator>&amp;&amp;</operator> <name><name>ist</name><operator>-&gt;</operator><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_type</name></name> <operator>==</operator> <name>AVMEDIA_TYPE_DATA</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ist</name><operator>-&gt;</operator><name>user_set_discard</name></name> <operator>=</operator> <name>AVDISCARD_ALL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>discard_str</name> <operator>&amp;&amp;</operator> <call><name>av_opt_eval_int</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cc</name></expr></argument>, <argument><expr><name>discard_opt</name></expr></argument>, <argument><expr><name>discard_str</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ist</name><operator>-&gt;</operator><name>user_set_discard</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Error parsing discard %s.\n"</literal></expr></argument>,

<argument><expr><name>discard_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>exit_program</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ist</name><operator>-&gt;</operator><name>filter_in_rescale_delta_last</name></name> <operator>=</operator> <name>AV_NOPTS_VALUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ist</name><operator>-&gt;</operator><name>dec_ctx</name></name> <operator>=</operator> <call><name>avcodec_alloc_context3</name><argument_list>(<argument><expr><name><name>ist</name><operator>-&gt;</operator><name>dec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ist</name><operator>-&gt;</operator><name>dec_ctx</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Error allocating the decoder context.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>exit_program</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>avcodec_parameters_to_context</name><argument_list>(<argument><expr><name><name>ist</name><operator>-&gt;</operator><name>dec_ctx</name></name></expr></argument>, <argument><expr><name>par</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Error initializing the decoder context.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>exit_program</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>o</name><operator>-&gt;</operator><name>bitexact</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ist</name><operator>-&gt;</operator><name>dec_ctx</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>AV_CODEC_FLAG_BITEXACT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<switch>switch <condition>(<expr><name><name>par</name><operator>-&gt;</operator><name>codec_type</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>AVMEDIA_TYPE_VIDEO</name></expr>:</case>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>ist</name><operator>-&gt;</operator><name>dec</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ist</name><operator>-&gt;</operator><name>dec</name></name> <operator>=</operator> <call><name>avcodec_find_decoder</name><argument_list>(<argument><expr><name><name>par</name><operator>-&gt;</operator><name>codec_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>FF_API_LOWRES</name></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><name><name>st</name><operator>-&gt;</operator><name>codec</name><operator>-&gt;</operator><name>lowres</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ist</name><operator>-&gt;</operator><name>dec_ctx</name><operator>-&gt;</operator><name>lowres</name></name> <operator>=</operator> <name><name>st</name><operator>-&gt;</operator><name>codec</name><operator>-&gt;</operator><name>lowres</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ist</name><operator>-&gt;</operator><name>dec_ctx</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator> <name><name>st</name><operator>-&gt;</operator><name>codec</name><operator>-&gt;</operator><name>width</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ist</name><operator>-&gt;</operator><name>dec_ctx</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <name><name>st</name><operator>-&gt;</operator><name>codec</name><operator>-&gt;</operator><name>height</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ist</name><operator>-&gt;</operator><name>dec_ctx</name><operator>-&gt;</operator><name>coded_width</name></name> <operator>=</operator> <name><name>st</name><operator>-&gt;</operator><name>codec</name><operator>-&gt;</operator><name>coded_width</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ist</name><operator>-&gt;</operator><name>dec_ctx</name><operator>-&gt;</operator><name>coded_height</name></name> <operator>=</operator> <name><name>st</name><operator>-&gt;</operator><name>codec</name><operator>-&gt;</operator><name>coded_height</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>ist</name><operator>-&gt;</operator><name>dec_ctx</name><operator>-&gt;</operator><name>framerate</name></name> <operator>=</operator> <name><name>st</name><operator>-&gt;</operator><name>avg_frame_rate</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MATCH_PER_STREAM_OPT</name><argument_list>(<argument><expr><name>frame_rates</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>framerate</name></expr></argument>, <argument><expr><name>ic</name></expr></argument>, <argument><expr><name>st</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>framerate</name> <operator>&amp;&amp;</operator> <call><name>av_parse_video_rate</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ist</name><operator>-&gt;</operator><name>framerate</name></name></expr></argument>,

<argument><expr><name>framerate</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Error parsing framerate %s.\n"</literal></expr></argument>,

<argument><expr><name>framerate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>exit_program</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ist</name><operator>-&gt;</operator><name>top_field_first</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MATCH_PER_STREAM_OPT</name><argument_list>(<argument><expr><name>top_field_first</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>ist</name><operator>-&gt;</operator><name>top_field_first</name></name></expr></argument>, <argument><expr><name>ic</name></expr></argument>, <argument><expr><name>st</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MATCH_PER_STREAM_OPT</name><argument_list>(<argument><expr><name>hwaccels</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>hwaccel</name></expr></argument>, <argument><expr><name>ic</name></expr></argument>, <argument><expr><name>st</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MATCH_PER_STREAM_OPT</name><argument_list>(<argument><expr><name>hwaccel_output_formats</name></expr></argument>, <argument><expr><name>str</name></expr></argument>,

<argument><expr><name>hwaccel_output_format</name></expr></argument>, <argument><expr><name>ic</name></expr></argument>, <argument><expr><name>st</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>hwaccel_output_format</name> <operator>&amp;&amp;</operator> <name>hwaccel</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>hwaccel</name></expr></argument>, <argument><expr><literal type="string">"cuvid"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>,

<argument><expr><literal type="string">"WARNING: defaulting hwaccel_output_format to cuda for compatibility "</literal>

<literal type="string">"with old commandlines. This behaviour is DEPRECATED and will be removed "</literal>

<literal type="string">"in the future. Please explicitly set \"-hwaccel_output_format cuda\".\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ist</name><operator>-&gt;</operator><name>hwaccel_output_format</name></name> <operator>=</operator> <name>AV_PIX_FMT_CUDA</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>hwaccel_output_format</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ist</name><operator>-&gt;</operator><name>hwaccel_output_format</name></name> <operator>=</operator> <call><name>av_get_pix_fmt</name><argument_list>(<argument><expr><name>hwaccel_output_format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ist</name><operator>-&gt;</operator><name>hwaccel_output_format</name></name> <operator>==</operator> <name>AV_PIX_FMT_NONE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_FATAL</name></expr></argument>, <argument><expr><literal type="string">"Unrecognised hwaccel output "</literal>

<literal type="string">"format: %s"</literal></expr></argument>, <argument><expr><name>hwaccel_output_format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>ist</name><operator>-&gt;</operator><name>hwaccel_output_format</name></name> <operator>=</operator> <name>AV_PIX_FMT_NONE</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>hwaccel</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>hwaccel</name></expr></argument>, <argument><expr><literal type="string">"nvdec"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>hwaccel</name></expr></argument>, <argument><expr><literal type="string">"cuvid"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>hwaccel</name> <operator>=</operator> <literal type="string">"cuda"</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>hwaccel</name></expr></argument>, <argument><expr><literal type="string">"none"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ist</name><operator>-&gt;</operator><name>hwaccel_id</name></name> <operator>=</operator> <name>HWACCEL_NONE</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>hwaccel</name></expr></argument>, <argument><expr><literal type="string">"auto"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ist</name><operator>-&gt;</operator><name>hwaccel_id</name></name> <operator>=</operator> <name>HWACCEL_AUTO</name></expr>;</expr_stmt></block_content></block></if>

<else>else <block>{<block_content>

<decl_stmt><decl><type><name><name>enum</name> <name>AVHWDeviceType</name></name></type> <name>type</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>hwaccels</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>hwaccels</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><name>hwaccel</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ist</name><operator>-&gt;</operator><name>hwaccel_id</name></name> <operator>=</operator> <name><name>hwaccels</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>id</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ist</name><operator>-&gt;</operator><name>hwaccel_id</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>type</name> <operator>=</operator> <call><name>av_hwdevice_find_type_by_name</name><argument_list>(<argument><expr><name>hwaccel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>type</name> <operator>!=</operator> <name>AV_HWDEVICE_TYPE_NONE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ist</name><operator>-&gt;</operator><name>hwaccel_id</name></name> <operator>=</operator> <name>HWACCEL_GENERIC</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ist</name><operator>-&gt;</operator><name>hwaccel_device_type</name></name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ist</name><operator>-&gt;</operator><name>hwaccel_id</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_FATAL</name></expr></argument>, <argument><expr><literal type="string">"Unrecognized hwaccel: %s.\n"</literal></expr></argument>,

<argument><expr><name>hwaccel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_FATAL</name></expr></argument>, <argument><expr><literal type="string">"Supported hwaccels: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>type</name> <operator>=</operator> <name>AV_HWDEVICE_TYPE_NONE</name></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>(</operator><name>type</name> <operator>=</operator> <call><name>av_hwdevice_iterate_types</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator>

<name>AV_HWDEVICE_TYPE_NONE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_FATAL</name></expr></argument>, <argument><expr><literal type="string">"%s "</literal></expr></argument>,

<argument><expr><call><name>av_hwdevice_get_type_name</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>hwaccels</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_FATAL</name></expr></argument>, <argument><expr><literal type="string">"%s "</literal></expr></argument>, <argument><expr><name><name>hwaccels</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_FATAL</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>exit_program</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>MATCH_PER_STREAM_OPT</name><argument_list>(<argument><expr><name>hwaccel_devices</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>hwaccel_device</name></expr></argument>, <argument><expr><name>ic</name></expr></argument>, <argument><expr><name>st</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>hwaccel_device</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ist</name><operator>-&gt;</operator><name>hwaccel_device</name></name> <operator>=</operator> <call><name>av_strdup</name><argument_list>(<argument><expr><name>hwaccel_device</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ist</name><operator>-&gt;</operator><name>hwaccel_device</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>exit_program</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ist</name><operator>-&gt;</operator><name>hwaccel_pix_fmt</name></name> <operator>=</operator> <name>AV_PIX_FMT_NONE</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AVMEDIA_TYPE_AUDIO</name></expr>:</case>

<expr_stmt><expr><name><name>ist</name><operator>-&gt;</operator><name>guess_layout_max</name></name> <operator>=</operator> <name>INT_MAX</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MATCH_PER_STREAM_OPT</name><argument_list>(<argument><expr><name>guess_layout_max</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>ist</name><operator>-&gt;</operator><name>guess_layout_max</name></name></expr></argument>, <argument><expr><name>ic</name></expr></argument>, <argument><expr><name>st</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>guess_input_channel_layout</name><argument_list>(<argument><expr><name>ist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AVMEDIA_TYPE_DATA</name></expr>:</case>

<case>case <expr><name>AVMEDIA_TYPE_SUBTITLE</name></expr>:</case> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>canvas_size</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>ist</name><operator>-&gt;</operator><name>dec</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ist</name><operator>-&gt;</operator><name>dec</name></name> <operator>=</operator> <call><name>avcodec_find_decoder</name><argument_list>(<argument><expr><name><name>par</name><operator>-&gt;</operator><name>codec_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>MATCH_PER_STREAM_OPT</name><argument_list>(<argument><expr><name>fix_sub_duration</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>ist</name><operator>-&gt;</operator><name>fix_sub_duration</name></name></expr></argument>, <argument><expr><name>ic</name></expr></argument>, <argument><expr><name>st</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MATCH_PER_STREAM_OPT</name><argument_list>(<argument><expr><name>canvas_sizes</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>canvas_size</name></expr></argument>, <argument><expr><name>ic</name></expr></argument>, <argument><expr><name>st</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>canvas_size</name> <operator>&amp;&amp;</operator>

<call><name>av_parse_video_size</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ist</name><operator>-&gt;</operator><name>dec_ctx</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ist</name><operator>-&gt;</operator><name>dec_ctx</name><operator>-&gt;</operator><name>height</name></name></expr></argument>, <argument><expr><name>canvas_size</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_FATAL</name></expr></argument>, <argument><expr><literal type="string">"Invalid canvas size: %s.\n"</literal></expr></argument>, <argument><expr><name>canvas_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>exit_program</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

</block_content>}</block>

<case>case <expr><name>AVMEDIA_TYPE_ATTACHMENT</name></expr>:</case>

<case>case <expr><name>AVMEDIA_TYPE_UNKNOWN</name></expr>:</case>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></switch>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>avcodec_parameters_from_context</name><argument_list>(<argument><expr><name>par</name></expr></argument>, <argument><expr><name><name>ist</name><operator>-&gt;</operator><name>dec_ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Error initializing the decoder context.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>exit_program</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>assert_file_overwrite</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>proto_name</name> <init>= <expr><call><name>avio_find_protocol_name</name><argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>file_overwrite</name> <operator>&amp;&amp;</operator> <name>no_file_overwrite</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Error, both -y and -n supplied. Exiting.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>exit_program</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>file_overwrite</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>proto_name</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>proto_name</name></expr></argument>, <argument><expr><literal type="string">"file"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>avio_check</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>stdin_interaction</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>no_file_overwrite</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,<argument><expr><literal type="string">"File '%s' already exists. Overwrite? [y/N] "</literal></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>term_exit</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>signal</name><argument_list>(<argument><expr><name>SIGINT</name></expr></argument>, <argument><expr><name>SIG_DFL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>read_yesno</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_FATAL</name></expr></argument>, <argument><expr><literal type="string">"Not overwriting - exiting\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>exit_program</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>term_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_FATAL</name></expr></argument>, <argument><expr><literal type="string">"File '%s' already exists. Exiting.\n"</literal></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>exit_program</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>proto_name</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>proto_name</name></expr></argument>, <argument><expr><literal type="string">"file"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nb_input_files</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>InputFile</name> <modifier>*</modifier></type><name>file</name> <init>= <expr><name><name>input_files</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>file</name><operator>-&gt;</operator><name>ctx</name><operator>-&gt;</operator><name>iformat</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AVFMT_NOFILE</name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><name><name>file</name><operator>-&gt;</operator><name>ctx</name><operator>-&gt;</operator><name>url</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_FATAL</name></expr></argument>, <argument><expr><literal type="string">"Output %s same as Input #%d - exiting\n"</literal></expr></argument>, <argument><expr><name>filename</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"FFmpeg cannot edit existing files in-place.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>exit_program</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>dump_attachment</name><parameter_list>(<parameter><decl><type><name>AVStream</name> <modifier>*</modifier></type><name>st</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>out</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVDictionaryEntry</name> <modifier>*</modifier></type><name>e</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>extradata_size</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"No extradata to dump in stream #%d:%d.\n"</literal></expr></argument>,

<argument><expr><name>nb_input_files</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>st</name><operator>-&gt;</operator><name>index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>filename</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>e</name> <operator>=</operator> <call><name>av_dict_get</name><argument_list>(<argument><expr><name><name>st</name><operator>-&gt;</operator><name>metadata</name></name></expr></argument>, <argument><expr><literal type="string">"filename"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>filename</name> <operator>=</operator> <name><name>e</name><operator>-&gt;</operator><name>value</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>filename</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_FATAL</name></expr></argument>, <argument><expr><literal type="string">"No filename specified and no 'filename' tag"</literal>

<literal type="string">"in stream #%d:%d.\n"</literal></expr></argument>, <argument><expr><name>nb_input_files</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>st</name><operator>-&gt;</operator><name>index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>exit_program</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>assert_file_overwrite</name><argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>avio_open2</name><argument_list>(<argument><expr><operator>&amp;</operator><name>out</name></expr></argument>, <argument><expr><name>filename</name></expr></argument>, <argument><expr><name>AVIO_FLAG_WRITE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>int_cb</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_FATAL</name></expr></argument>, <argument><expr><literal type="string">"Could not open file %s for writing.\n"</literal></expr></argument>,

<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>exit_program</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>avio_write</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>extradata</name></name></expr></argument>, <argument><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>extradata_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_flush</name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_close</name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>open_input_file</name><parameter_list>(<parameter><decl><type><name>OptionsContext</name> <modifier>*</modifier></type><name>o</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>InputFile</name> <modifier>*</modifier></type><name>f</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>ic</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVInputFormat</name> <modifier>*</modifier></type><name>file_iformat</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>timestamp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVDictionary</name> <modifier>*</modifier></type><name>unused_opts</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVDictionaryEntry</name> <modifier>*</modifier></type><name>e</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type> <name>video_codec_name</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type> <name>audio_codec_name</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>subtitle_codec_name</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type> <name>data_codec_name</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>scan_all_pmts_set</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>o</name><operator>-&gt;</operator><name>stop_time</name></name> <operator>!=</operator> <name>INT64_MAX</name> <operator>&amp;&amp;</operator> <name><name>o</name><operator>-&gt;</operator><name>recording_time</name></name> <operator>!=</operator> <name>INT64_MAX</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>o</name><operator>-&gt;</operator><name>stop_time</name></name> <operator>=</operator> <name>INT64_MAX</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"-t and -to cannot be used together; using -t.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>o</name><operator>-&gt;</operator><name>stop_time</name></name> <operator>!=</operator> <name>INT64_MAX</name> <operator>&amp;&amp;</operator> <name><name>o</name><operator>-&gt;</operator><name>recording_time</name></name> <operator>==</operator> <name>INT64_MAX</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int64_t</name></type> <name>start_time</name> <init>= <expr><ternary><condition><expr><name><name>o</name><operator>-&gt;</operator><name>start_time</name></name> <operator>==</operator> <name>AV_NOPTS_VALUE</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name><name>o</name><operator>-&gt;</operator><name>start_time</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>o</name><operator>-&gt;</operator><name>stop_time</name></name> <operator>&lt;=</operator> <name>start_time</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"-to value smaller than -ss; aborting.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>exit_program</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>o</name><operator>-&gt;</operator><name>recording_time</name></name> <operator>=</operator> <name><name>o</name><operator>-&gt;</operator><name>stop_time</name></name> <operator>-</operator> <name>start_time</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>o</name><operator>-&gt;</operator><name>format</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>file_iformat</name> <operator>=</operator> <call><name>av_find_input_format</name><argument_list>(<argument><expr><name><name>o</name><operator>-&gt;</operator><name>format</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_FATAL</name></expr></argument>, <argument><expr><literal type="string">"Unknown input format: '%s'\n"</literal></expr></argument>, <argument><expr><name><name>o</name><operator>-&gt;</operator><name>format</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>exit_program</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><literal type="string">"-"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>filename</name> <operator>=</operator> <literal type="string">"pipe:"</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>stdin_interaction</name> <operator>&amp;=</operator> <call><name>strncmp</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><literal type="string">"pipe:"</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>

<call><name>strcmp</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><literal type="string">"/dev/stdin"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ic</name> <operator>=</operator> <call><name>avformat_alloc_context</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ic</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>print_error</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>exit_program</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>o</name><operator>-&gt;</operator><name>nb_audio_sample_rate</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_dict_set_int</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>o</name><operator>-&gt;</operator><name>g</name><operator>-&gt;</operator><name>format_opts</name></name></expr></argument>, <argument><expr><literal type="string">"sample_rate"</literal></expr></argument>, <argument><expr><name><name>o</name><operator>-&gt;</operator><name>audio_sample_rate</name><index>[<expr><name><name>o</name><operator>-&gt;</operator><name>nb_audio_sample_rate</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>u</name><operator>.</operator><name>i</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>o</name><operator>-&gt;</operator><name>nb_audio_channels</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>file_iformat</name> <operator>&amp;&amp;</operator> <name><name>file_iformat</name><operator>-&gt;</operator><name>priv_class</name></name> <operator>&amp;&amp;</operator>

<call><name>av_opt_find</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>file_iformat</name><operator>-&gt;</operator><name>priv_class</name></name></expr></argument>, <argument><expr><literal type="string">"channels"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><name>AV_OPT_SEARCH_FAKE_OBJ</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_dict_set_int</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>o</name><operator>-&gt;</operator><name>g</name><operator>-&gt;</operator><name>format_opts</name></name></expr></argument>, <argument><expr><literal type="string">"channels"</literal></expr></argument>, <argument><expr><name><name>o</name><operator>-&gt;</operator><name>audio_channels</name><index>[<expr><name><name>o</name><operator>-&gt;</operator><name>nb_audio_channels</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>u</name><operator>.</operator><name>i</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>o</name><operator>-&gt;</operator><name>nb_frame_rates</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>file_iformat</name> <operator>&amp;&amp;</operator> <name><name>file_iformat</name><operator>-&gt;</operator><name>priv_class</name></name> <operator>&amp;&amp;</operator>

<call><name>av_opt_find</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>file_iformat</name><operator>-&gt;</operator><name>priv_class</name></name></expr></argument>, <argument><expr><literal type="string">"framerate"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><name>AV_OPT_SEARCH_FAKE_OBJ</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_dict_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>o</name><operator>-&gt;</operator><name>g</name><operator>-&gt;</operator><name>format_opts</name></name></expr></argument>, <argument><expr><literal type="string">"framerate"</literal></expr></argument>,

<argument><expr><name><name>o</name><operator>-&gt;</operator><name>frame_rates</name><index>[<expr><name><name>o</name><operator>-&gt;</operator><name>nb_frame_rates</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>u</name><operator>.</operator><name>str</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>o</name><operator>-&gt;</operator><name>nb_frame_sizes</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_dict_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>o</name><operator>-&gt;</operator><name>g</name><operator>-&gt;</operator><name>format_opts</name></name></expr></argument>, <argument><expr><literal type="string">"video_size"</literal></expr></argument>, <argument><expr><name><name>o</name><operator>-&gt;</operator><name>frame_sizes</name><index>[<expr><name><name>o</name><operator>-&gt;</operator><name>nb_frame_sizes</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>u</name><operator>.</operator><name>str</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>o</name><operator>-&gt;</operator><name>nb_frame_pix_fmts</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_dict_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>o</name><operator>-&gt;</operator><name>g</name><operator>-&gt;</operator><name>format_opts</name></name></expr></argument>, <argument><expr><literal type="string">"pixel_format"</literal></expr></argument>, <argument><expr><name><name>o</name><operator>-&gt;</operator><name>frame_pix_fmts</name><index>[<expr><name><name>o</name><operator>-&gt;</operator><name>nb_frame_pix_fmts</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>u</name><operator>.</operator><name>str</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>MATCH_PER_TYPE_OPT</name><argument_list>(<argument><expr><name>codec_names</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>video_codec_name</name></expr></argument>, <argument><expr><name>ic</name></expr></argument>, <argument><expr><literal type="string">"v"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MATCH_PER_TYPE_OPT</name><argument_list>(<argument><expr><name>codec_names</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>audio_codec_name</name></expr></argument>, <argument><expr><name>ic</name></expr></argument>, <argument><expr><literal type="string">"a"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MATCH_PER_TYPE_OPT</name><argument_list>(<argument><expr><name>codec_names</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>subtitle_codec_name</name></expr></argument>, <argument><expr><name>ic</name></expr></argument>, <argument><expr><literal type="string">"s"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MATCH_PER_TYPE_OPT</name><argument_list>(<argument><expr><name>codec_names</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>data_codec_name</name></expr></argument>, <argument><expr><name>ic</name></expr></argument>, <argument><expr><literal type="string">"d"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>video_codec_name</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ic</name><operator>-&gt;</operator><name>video_codec</name></name> <operator>=</operator> <call><name>find_codec_or_die</name><argument_list>(<argument><expr><name>video_codec_name</name></expr></argument> , <argument><expr><name>AVMEDIA_TYPE_VIDEO</name></expr></argument> , <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>audio_codec_name</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ic</name><operator>-&gt;</operator><name>audio_codec</name></name> <operator>=</operator> <call><name>find_codec_or_die</name><argument_list>(<argument><expr><name>audio_codec_name</name></expr></argument> , <argument><expr><name>AVMEDIA_TYPE_AUDIO</name></expr></argument> , <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>subtitle_codec_name</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ic</name><operator>-&gt;</operator><name>subtitle_codec</name></name> <operator>=</operator> <call><name>find_codec_or_die</name><argument_list>(<argument><expr><name>subtitle_codec_name</name></expr></argument>, <argument><expr><name>AVMEDIA_TYPE_SUBTITLE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>data_codec_name</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ic</name><operator>-&gt;</operator><name>data_codec</name></name> <operator>=</operator> <call><name>find_codec_or_die</name><argument_list>(<argument><expr><name>data_codec_name</name></expr></argument> , <argument><expr><name>AVMEDIA_TYPE_DATA</name></expr></argument> , <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>ic</name><operator>-&gt;</operator><name>video_codec_id</name></name> <operator>=</operator> <ternary><condition><expr><name>video_codec_name</name></expr> ?</condition><then> <expr><name><name>ic</name><operator>-&gt;</operator><name>video_codec</name><operator>-&gt;</operator><name>id</name></name></expr> </then><else>: <expr><name>AV_CODEC_ID_NONE</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ic</name><operator>-&gt;</operator><name>audio_codec_id</name></name> <operator>=</operator> <ternary><condition><expr><name>audio_codec_name</name></expr> ?</condition><then> <expr><name><name>ic</name><operator>-&gt;</operator><name>audio_codec</name><operator>-&gt;</operator><name>id</name></name></expr> </then><else>: <expr><name>AV_CODEC_ID_NONE</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ic</name><operator>-&gt;</operator><name>subtitle_codec_id</name></name> <operator>=</operator> <ternary><condition><expr><name>subtitle_codec_name</name></expr> ?</condition><then> <expr><name><name>ic</name><operator>-&gt;</operator><name>subtitle_codec</name><operator>-&gt;</operator><name>id</name></name></expr> </then><else>: <expr><name>AV_CODEC_ID_NONE</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ic</name><operator>-&gt;</operator><name>data_codec_id</name></name> <operator>=</operator> <ternary><condition><expr><name>data_codec_name</name></expr> ?</condition><then> <expr><name><name>ic</name><operator>-&gt;</operator><name>data_codec</name><operator>-&gt;</operator><name>id</name></name></expr> </then><else>: <expr><name>AV_CODEC_ID_NONE</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ic</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>AVFMT_FLAG_NONBLOCK</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>o</name><operator>-&gt;</operator><name>bitexact</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ic</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>AVFMT_FLAG_BITEXACT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>ic</name><operator>-&gt;</operator><name>interrupt_callback</name></name> <operator>=</operator> <name>int_cb</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>av_dict_get</name><argument_list>(<argument><expr><name><name>o</name><operator>-&gt;</operator><name>g</name><operator>-&gt;</operator><name>format_opts</name></name></expr></argument>, <argument><expr><literal type="string">"scan_all_pmts"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_DICT_MATCH_CASE</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_dict_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>o</name><operator>-&gt;</operator><name>g</name><operator>-&gt;</operator><name>format_opts</name></name></expr></argument>, <argument><expr><literal type="string">"scan_all_pmts"</literal></expr></argument>, <argument><expr><literal type="string">"1"</literal></expr></argument>, <argument><expr><name>AV_DICT_DONT_OVERWRITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>scan_all_pmts_set</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>avformat_open_input</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ic</name></expr></argument>, <argument><expr><name>filename</name></expr></argument>, <argument><expr><name>file_iformat</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>o</name><operator>-&gt;</operator><name>g</name><operator>-&gt;</operator><name>format_opts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>print_error</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>==</operator> <name>AVERROR_PROTOCOL_NOT_FOUND</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Did you mean file:%s?\n"</literal></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>exit_program</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>scan_all_pmts_set</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_dict_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>o</name><operator>-&gt;</operator><name>g</name><operator>-&gt;</operator><name>format_opts</name></name></expr></argument>, <argument><expr><literal type="string">"scan_all_pmts"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_DICT_MATCH_CASE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>remove_avoptions</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>o</name><operator>-&gt;</operator><name>g</name><operator>-&gt;</operator><name>format_opts</name></name></expr></argument>, <argument><expr><name><name>o</name><operator>-&gt;</operator><name>g</name><operator>-&gt;</operator><name>codec_opts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert_avoptions</name><argument_list>(<argument><expr><name><name>o</name><operator>-&gt;</operator><name>g</name><operator>-&gt;</operator><name>format_opts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ic</name><operator>-&gt;</operator><name>nb_streams</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>choose_decoder</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><name>ic</name></expr></argument>, <argument><expr><name><name>ic</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name>find_stream_info</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>AVDictionary</name> <modifier>*</modifier><modifier>*</modifier></type><name>opts</name> <init>= <expr><call><name>setup_find_stream_info_opts</name><argument_list>(<argument><expr><name>ic</name></expr></argument>, <argument><expr><name><name>o</name><operator>-&gt;</operator><name>g</name><operator>-&gt;</operator><name>codec_opts</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>orig_nb_streams</name> <init>= <expr><name><name>ic</name><operator>-&gt;</operator><name>nb_streams</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>avformat_find_stream_info</name><argument_list>(<argument><expr><name>ic</name></expr></argument>, <argument><expr><name>opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>orig_nb_streams</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_dict_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>opts</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_FATAL</name></expr></argument>, <argument><expr><literal type="string">"%s: could not find codec parameters\n"</literal></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ic</name><operator>-&gt;</operator><name>nb_streams</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>avformat_close_input</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>exit_program</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>o</name><operator>-&gt;</operator><name>start_time</name></name> <operator>!=</operator> <name>AV_NOPTS_VALUE</name> <operator>&amp;&amp;</operator> <name><name>o</name><operator>-&gt;</operator><name>start_time_eof</name></name> <operator>!=</operator> <name>AV_NOPTS_VALUE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Cannot use -ss and -sseof both, using -ss for %s\n"</literal></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>o</name><operator>-&gt;</operator><name>start_time_eof</name></name> <operator>=</operator> <name>AV_NOPTS_VALUE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>o</name><operator>-&gt;</operator><name>start_time_eof</name></name> <operator>!=</operator> <name>AV_NOPTS_VALUE</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>o</name><operator>-&gt;</operator><name>start_time_eof</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"-sseof value must be negative; aborting\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>exit_program</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ic</name><operator>-&gt;</operator><name>duration</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>o</name><operator>-&gt;</operator><name>start_time</name></name> <operator>=</operator> <name><name>o</name><operator>-&gt;</operator><name>start_time_eof</name></name> <operator>+</operator> <name><name>ic</name><operator>-&gt;</operator><name>duration</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>o</name><operator>-&gt;</operator><name>start_time</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"-sseof value seeks to before start of file %s; ignored\n"</literal></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>o</name><operator>-&gt;</operator><name>start_time</name></name> <operator>=</operator> <name>AV_NOPTS_VALUE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Cannot use -sseof, duration of %s not known\n"</literal></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>timestamp</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>o</name><operator>-&gt;</operator><name>start_time</name></name> <operator>==</operator> <name>AV_NOPTS_VALUE</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name><name>o</name><operator>-&gt;</operator><name>start_time</name></name></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>o</name><operator>-&gt;</operator><name>seek_timestamp</name></name> <operator>&amp;&amp;</operator> <name><name>ic</name><operator>-&gt;</operator><name>start_time</name></name> <operator>!=</operator> <name>AV_NOPTS_VALUE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>timestamp</name> <operator>+=</operator> <name><name>ic</name><operator>-&gt;</operator><name>start_time</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>o</name><operator>-&gt;</operator><name>start_time</name></name> <operator>!=</operator> <name>AV_NOPTS_VALUE</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int64_t</name></type> <name>seek_timestamp</name> <init>= <expr><name>timestamp</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>ic</name><operator>-&gt;</operator><name>iformat</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AVFMT_SEEK_TO_PTS</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>dts_heuristic</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>ic</name><operator>-&gt;</operator><name>nb_streams</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>AVCodecParameters</name> <modifier>*</modifier></type><name>par</name> <init>= <expr><name><name>ic</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>codecpar</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>par</name><operator>-&gt;</operator><name>video_delay</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>dts_heuristic</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>dts_heuristic</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>seek_timestamp</name> <operator>-=</operator> <literal type="number">3</literal><operator>*</operator><name>AV_TIME_BASE</name> <operator>/</operator> <literal type="number">23</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>avformat_seek_file</name><argument_list>(<argument><expr><name>ic</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>INT64_MIN</name></expr></argument>, <argument><expr><name>seek_timestamp</name></expr></argument>, <argument><expr><name>seek_timestamp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"%s: could not seek to position %0.3f\n"</literal></expr></argument>,

<argument><expr><name>filename</name></expr></argument>, <argument><expr><operator>(</operator><name>double</name><operator>)</operator><name>timestamp</name> <operator>/</operator> <name>AV_TIME_BASE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>add_input_streams</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><name>ic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_dump_format</name><argument_list>(<argument><expr><name>ic</name></expr></argument>, <argument><expr><name>nb_input_files</name></expr></argument>, <argument><expr><name>filename</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GROW_ARRAY</name><argument_list>(<argument><expr><name>input_files</name></expr></argument>, <argument><expr><name>nb_input_files</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>f</name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>f</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>f</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>exit_program</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>input_files</name><index>[<expr><name>nb_input_files</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>f</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>ctx</name></name> <operator>=</operator> <name>ic</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>ist_index</name></name> <operator>=</operator> <name>nb_input_streams</name> <operator>-</operator> <name><name>ic</name><operator>-&gt;</operator><name>nb_streams</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>start_time</name></name> <operator>=</operator> <name><name>o</name><operator>-&gt;</operator><name>start_time</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>recording_time</name></name> <operator>=</operator> <name><name>o</name><operator>-&gt;</operator><name>recording_time</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>input_ts_offset</name></name> <operator>=</operator> <name><name>o</name><operator>-&gt;</operator><name>input_ts_offset</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>ts_offset</name></name> <operator>=</operator> <name><name>o</name><operator>-&gt;</operator><name>input_ts_offset</name></name> <operator>-</operator> <operator>(</operator><ternary><condition><expr><name>copy_ts</name></expr> ?</condition><then> <expr><operator>(</operator><ternary><condition><expr><name>start_at_zero</name> <operator>&amp;&amp;</operator> <name><name>ic</name><operator>-&gt;</operator><name>start_time</name></name> <operator>!=</operator> <name>AV_NOPTS_VALUE</name></expr> ?</condition><then> <expr><name><name>ic</name><operator>-&gt;</operator><name>start_time</name></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr> </then><else>: <expr><name>timestamp</name></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>nb_streams</name></name> <operator>=</operator> <name><name>ic</name><operator>-&gt;</operator><name>nb_streams</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>rate_emu</name></name> <operator>=</operator> <name><name>o</name><operator>-&gt;</operator><name>rate_emu</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>accurate_seek</name></name> <operator>=</operator> <name><name>o</name><operator>-&gt;</operator><name>accurate_seek</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>loop</name></name> <operator>=</operator> <name><name>o</name><operator>-&gt;</operator><name>loop</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>duration</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>time_base</name></name> <operator>=</operator> <operator>(</operator><name>AVRational</name><operator>)</operator><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_THREADS</name></expr></cpp:if>

<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>thread_queue_size</name></name> <operator>=</operator> <ternary><condition><expr><name><name>o</name><operator>-&gt;</operator><name>thread_queue_size</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name><name>o</name><operator>-&gt;</operator><name>thread_queue_size</name></name></expr> </then><else>: <expr><literal type="number">8</literal></expr></else></ternary></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>unused_opts</name> <operator>=</operator> <call><name>strip_specifiers</name><argument_list>(<argument><expr><name><name>o</name><operator>-&gt;</operator><name>g</name><operator>-&gt;</operator><name>codec_opts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name><name>f</name><operator>-&gt;</operator><name>ist_index</name></name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nb_input_streams</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>e</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>(</operator><name>e</name> <operator>=</operator> <call><name>av_dict_get</name><argument_list>(<argument><expr><name><name>input_streams</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>decoder_opts</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><name>e</name></expr></argument>,

<argument><expr><name>AV_DICT_IGNORE_SUFFIX</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_dict_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name>unused_opts</name></expr></argument>, <argument><expr><name><name>e</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

</block_content>}</block></for>

<expr_stmt><expr><name>e</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>(</operator><name>e</name> <operator>=</operator> <call><name>av_dict_get</name><argument_list>(<argument><expr><name>unused_opts</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><name>e</name></expr></argument>, <argument><expr><name>AV_DICT_IGNORE_SUFFIX</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>AVClass</name> <modifier>*</modifier></type><name>class</name> <init>= <expr><call><name>avcodec_get_class</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>AVOption</name> <modifier>*</modifier></type><name>option</name> <init>= <expr><call><name>av_opt_find</name><argument_list>(<argument><expr><operator>&amp;</operator><name>class</name></expr></argument>, <argument><expr><name><name>e</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><name>AV_OPT_SEARCH_CHILDREN</name> <operator>|</operator> <name>AV_OPT_SEARCH_FAKE_OBJ</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>AVClass</name> <modifier>*</modifier></type><name>fclass</name> <init>= <expr><call><name>avformat_get_class</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>AVOption</name> <modifier>*</modifier></type><name>foption</name> <init>= <expr><call><name>av_opt_find</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fclass</name></expr></argument>, <argument><expr><name><name>e</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><name>AV_OPT_SEARCH_CHILDREN</name> <operator>|</operator> <name>AV_OPT_SEARCH_FAKE_OBJ</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>option</name> <operator>||</operator> <name>foption</name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>option</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_OPT_FLAG_DECODING_PARAM</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Codec AVOption %s (%s) specified for "</literal>

<literal type="string">"input file #%d (%s) is not a decoding option.\n"</literal></expr></argument>, <argument><expr><name><name>e</name><operator>-&gt;</operator><name>key</name></name></expr></argument>,

<argument><expr><ternary><condition><expr><name><name>option</name><operator>-&gt;</operator><name>help</name></name></expr> ?</condition><then> <expr><name><name>option</name><operator>-&gt;</operator><name>help</name></name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>, <argument><expr><name>nb_input_files</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>,

<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>exit_program</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Codec AVOption %s (%s) specified for "</literal>

<literal type="string">"input file #%d (%s) has not been used for any stream. The most "</literal>

<literal type="string">"likely reason is either wrong type (e.g. a video option with "</literal>

<literal type="string">"no video streams) or that it is a private option of some decoder "</literal>

<literal type="string">"which was not actually used for any stream.\n"</literal></expr></argument>, <argument><expr><name><name>e</name><operator>-&gt;</operator><name>key</name></name></expr></argument>,

<argument><expr><ternary><condition><expr><name><name>option</name><operator>-&gt;</operator><name>help</name></name></expr> ?</condition><then> <expr><name><name>option</name><operator>-&gt;</operator><name>help</name></name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>, <argument><expr><name>nb_input_files</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>av_dict_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>unused_opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>o</name><operator>-&gt;</operator><name>nb_dump_attachment</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>ic</name><operator>-&gt;</operator><name>nb_streams</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>AVStream</name> <modifier>*</modifier></type><name>st</name> <init>= <expr><name><name>ic</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name>j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>check_stream_specifier</name><argument_list>(<argument><expr><name>ic</name></expr></argument>, <argument><expr><name>st</name></expr></argument>, <argument><expr><name><name>o</name><operator>-&gt;</operator><name>dump_attachment</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>specifier</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>dump_attachment</name><argument_list>(<argument><expr><name>st</name></expr></argument>, <argument><expr><name><name>o</name><operator>-&gt;</operator><name>dump_attachment</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>u</name><operator>.</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<expr_stmt><expr><name>input_stream_potentially_available</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>get_line</name><parameter_list>(<parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>line</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name>c</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>avio_open_dyn_buf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>line</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_FATAL</name></expr></argument>, <argument><expr><literal type="string">"Could not alloc buffer for reading preset.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>exit_program</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><operator>(</operator><name>c</name> <operator>=</operator> <call><name>avio_r8</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator> <name>c</name> <operator>!=</operator> <literal type="char">'\n'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>avio_w8</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><call><name>avio_w8</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_close_dyn_buf</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>buf</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>get_preset_file_2</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>preset_name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>codec_name</name></decl></parameter>, <parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier><modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>ret</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>filename</name><index>[<expr><literal type="number">1000</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>base</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><call><name>getenv</name><argument_list>(<argument><expr><literal type="string">"AVCONV_DATADIR"</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>getenv</name><argument_list>(<argument><expr><literal type="string">"HOME"</literal></expr></argument>)</argument_list></call></expr>,

<expr><name>AVCONV_DATADIR</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>base</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>codec_name</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s%s/%s-%s.avpreset"</literal></expr></argument>, <argument><expr><name><name>base</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,

<argument><expr><ternary><condition><expr><name>i</name> <operator>!=</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><literal type="string">""</literal></expr> </then><else>: <expr><literal type="string">"/.avconv"</literal></expr></else></ternary></expr></argument>, <argument><expr><name>codec_name</name></expr></argument>, <argument><expr><name>preset_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>avio_open2</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>filename</name></expr></argument>, <argument><expr><name>AVIO_FLAG_READ</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>int_cb</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s%s/%s.avpreset"</literal></expr></argument>, <argument><expr><name><name>base</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,

<argument><expr><ternary><condition><expr><name>i</name> <operator>!=</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><literal type="string">""</literal></expr> </then><else>: <expr><literal type="string">"/.avconv"</literal></expr></else></ternary></expr></argument>, <argument><expr><name>preset_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>avio_open2</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>filename</name></expr></argument>, <argument><expr><name>AVIO_FLAG_READ</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>int_cb</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>choose_encoder</name><parameter_list>(<parameter><decl><type><name>OptionsContext</name> <modifier>*</modifier></type><name>o</name></decl></parameter>, <parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>OutputStream</name> <modifier>*</modifier></type><name>ost</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>enum</name> <name>AVMediaType</name></name></type> <name>type</name> <init>= <expr><name><name>ost</name><operator>-&gt;</operator><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_type</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>codec_name</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>AVMEDIA_TYPE_VIDEO</name> <operator>||</operator> <name>type</name> <operator>==</operator> <name>AVMEDIA_TYPE_AUDIO</name> <operator>||</operator> <name>type</name> <operator>==</operator> <name>AVMEDIA_TYPE_SUBTITLE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>MATCH_PER_STREAM_OPT</name><argument_list>(<argument><expr><name>codec_names</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>codec_name</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>ost</name><operator>-&gt;</operator><name>st</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>codec_name</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ost</name><operator>-&gt;</operator><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>=</operator> <call><name>av_guess_codec</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>oformat</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>url</name></name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>ost</name><operator>-&gt;</operator><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ost</name><operator>-&gt;</operator><name>enc</name></name> <operator>=</operator> <call><name>avcodec_find_encoder</name><argument_list>(<argument><expr><name><name>ost</name><operator>-&gt;</operator><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ost</name><operator>-&gt;</operator><name>enc</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_FATAL</name></expr></argument>, <argument><expr><literal type="string">"Automatic encoder selection failed for "</literal>

<literal type="string">"output stream #%d:%d. Default encoder for format %s (codec %s) is "</literal>

<literal type="string">"probably disabled. Please choose an encoder manually.\n"</literal></expr></argument>,

<argument><expr><name><name>ost</name><operator>-&gt;</operator><name>file_index</name></name></expr></argument>, <argument><expr><name><name>ost</name><operator>-&gt;</operator><name>index</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>oformat</name><operator>-&gt;</operator><name>name</name></name></expr></argument>,

<argument><expr><call><name>avcodec_get_name</name><argument_list>(<argument><expr><name><name>ost</name><operator>-&gt;</operator><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_id</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_ENCODER_NOT_FOUND</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>codec_name</name></expr></argument>, <argument><expr><literal type="string">"copy"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ost</name><operator>-&gt;</operator><name>stream_copy</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name><name>ost</name><operator>-&gt;</operator><name>enc</name></name> <operator>=</operator> <call><name>find_codec_or_die</name><argument_list>(<argument><expr><name>codec_name</name></expr></argument>, <argument><expr><name><name>ost</name><operator>-&gt;</operator><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_type</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ost</name><operator>-&gt;</operator><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>=</operator> <name><name>ost</name><operator>-&gt;</operator><name>enc</name><operator>-&gt;</operator><name>id</name></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>ost</name><operator>-&gt;</operator><name>encoding_needed</name></name> <operator>=</operator> <operator>!</operator><name><name>ost</name><operator>-&gt;</operator><name>stream_copy</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>ost</name><operator>-&gt;</operator><name>stream_copy</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ost</name><operator>-&gt;</operator><name>encoding_needed</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>OutputStream</name> <modifier>*</modifier></type><name>new_output_stream</name><parameter_list>(<parameter><decl><type><name>OptionsContext</name> <modifier>*</modifier></type><name>o</name></decl></parameter>, <parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>oc</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>AVMediaType</name></name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>source_index</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>OutputStream</name> <modifier>*</modifier></type><name>ost</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVStream</name> <modifier>*</modifier></type><name>st</name> <init>= <expr><call><name>avformat_new_stream</name><argument_list>(<argument><expr><name>oc</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>idx</name> <init>= <expr><name><name>oc</name><operator>-&gt;</operator><name>nb_streams</name></name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>bsfs</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>time_base</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>next</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>codec_tag</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>qscale</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>st</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_FATAL</name></expr></argument>, <argument><expr><literal type="string">"Could not alloc stream.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>exit_program</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>oc</name><operator>-&gt;</operator><name>nb_streams</name></name> <operator>-</operator> <literal type="number">1</literal> <operator>&lt;</operator> <name><name>o</name><operator>-&gt;</operator><name>nb_streamid_map</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>id</name></name> <operator>=</operator> <name><name>o</name><operator>-&gt;</operator><name>streamid_map</name><index>[<expr><name><name>oc</name><operator>-&gt;</operator><name>nb_streams</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>GROW_ARRAY</name><argument_list>(<argument><expr><name>output_streams</name></expr></argument>, <argument><expr><name>nb_output_streams</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>ost</name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>ost</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>exit_program</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>output_streams</name><index>[<expr><name>nb_output_streams</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>ost</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ost</name><operator>-&gt;</operator><name>file_index</name></name> <operator>=</operator> <name>nb_output_files</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ost</name><operator>-&gt;</operator><name>index</name></name> <operator>=</operator> <name>idx</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ost</name><operator>-&gt;</operator><name>st</name></name> <operator>=</operator> <name>st</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ost</name><operator>-&gt;</operator><name>forced_kf_ref_pts</name></name> <operator>=</operator> <name>AV_NOPTS_VALUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_type</name></name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>choose_encoder</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><name>oc</name></expr></argument>, <argument><expr><name>ost</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_FATAL</name></expr></argument>, <argument><expr><literal type="string">"Error selecting an encoder for stream "</literal>

<literal type="string">"%d:%d\n"</literal></expr></argument>, <argument><expr><name><name>ost</name><operator>-&gt;</operator><name>file_index</name></name></expr></argument>, <argument><expr><name><name>ost</name><operator>-&gt;</operator><name>index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>exit_program</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ost</name><operator>-&gt;</operator><name>enc_ctx</name></name> <operator>=</operator> <call><name>avcodec_alloc_context3</name><argument_list>(<argument><expr><name><name>ost</name><operator>-&gt;</operator><name>enc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ost</name><operator>-&gt;</operator><name>enc_ctx</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Error allocating the encoding context.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>exit_program</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ost</name><operator>-&gt;</operator><name>enc_ctx</name><operator>-&gt;</operator><name>codec_type</name></name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ost</name><operator>-&gt;</operator><name>ref_par</name></name> <operator>=</operator> <call><name>avcodec_parameters_alloc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ost</name><operator>-&gt;</operator><name>ref_par</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Error allocating the encoding parameters.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>exit_program</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ost</name><operator>-&gt;</operator><name>enc</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>arg</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>preset</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>ost</name><operator>-&gt;</operator><name>encoder_opts</name></name> <operator>=</operator> <call><name>filter_codec_opts</name><argument_list>(<argument><expr><name><name>o</name><operator>-&gt;</operator><name>g</name><operator>-&gt;</operator><name>codec_opts</name></name></expr></argument>, <argument><expr><name><name>ost</name><operator>-&gt;</operator><name>enc</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name>oc</name></expr></argument>, <argument><expr><name>st</name></expr></argument>, <argument><expr><name><name>ost</name><operator>-&gt;</operator><name>enc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MATCH_PER_STREAM_OPT</name><argument_list>(<argument><expr><name>presets</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>preset</name></expr></argument>, <argument><expr><name>oc</name></expr></argument>, <argument><expr><name>st</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>preset</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>get_preset_file_2</name><argument_list>(<argument><expr><name>preset</name></expr></argument>, <argument><expr><name><name>ost</name><operator>-&gt;</operator><name>enc</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>s</name></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>

<do>do <block>{<block_content>

<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>get_line</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>||</operator> <name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'#'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>arg</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="char">'='</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_FATAL</name></expr></argument>, <argument><expr><literal type="string">"Invalid line found in the preset file.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>exit_program</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>arg</name><operator>++</operator> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_dict_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ost</name><operator>-&gt;</operator><name>encoder_opts</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><name>AV_DICT_DONT_OVERWRITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block> while <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>eof_reached</name></name></expr>)</condition>;</do>

<expr_stmt><expr><call><name>avio_closep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_FATAL</name></expr></argument>,

<argument><expr><literal type="string">"Preset %s specified for stream %d:%d, but could not be opened.\n"</literal></expr></argument>,

<argument><expr><name>preset</name></expr></argument>, <argument><expr><name><name>ost</name><operator>-&gt;</operator><name>file_index</name></name></expr></argument>, <argument><expr><name><name>ost</name><operator>-&gt;</operator><name>index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>exit_program</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>ost</name><operator>-&gt;</operator><name>encoder_opts</name></name> <operator>=</operator> <call><name>filter_codec_opts</name><argument_list>(<argument><expr><name><name>o</name><operator>-&gt;</operator><name>g</name><operator>-&gt;</operator><name>codec_opts</name></name></expr></argument>, <argument><expr><name>AV_CODEC_ID_NONE</name></expr></argument>, <argument><expr><name>oc</name></expr></argument>, <argument><expr><name>st</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>o</name><operator>-&gt;</operator><name>bitexact</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ost</name><operator>-&gt;</operator><name>enc_ctx</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>AV_CODEC_FLAG_BITEXACT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>MATCH_PER_STREAM_OPT</name><argument_list>(<argument><expr><name>time_bases</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>time_base</name></expr></argument>, <argument><expr><name>oc</name></expr></argument>, <argument><expr><name>st</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>time_base</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>AVRational</name></type> <name>q</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>av_parse_ratio</name><argument_list>(<argument><expr><operator>&amp;</operator><name>q</name></expr></argument>, <argument><expr><name>time_base</name></expr></argument>, <argument><expr><name>INT_MAX</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator>

<name><name>q</name><operator>.</operator><name>num</name></name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>q</name><operator>.</operator><name>den</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_FATAL</name></expr></argument>, <argument><expr><literal type="string">"Invalid time base: %s\n"</literal></expr></argument>, <argument><expr><name>time_base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>exit_program</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>time_base</name></name> <operator>=</operator> <name>q</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>MATCH_PER_STREAM_OPT</name><argument_list>(<argument><expr><name>enc_time_bases</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>time_base</name></expr></argument>, <argument><expr><name>oc</name></expr></argument>, <argument><expr><name>st</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>time_base</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>AVRational</name></type> <name>q</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>av_parse_ratio</name><argument_list>(<argument><expr><operator>&amp;</operator><name>q</name></expr></argument>, <argument><expr><name>time_base</name></expr></argument>, <argument><expr><name>INT_MAX</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator>

<name><name>q</name><operator>.</operator><name>den</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_FATAL</name></expr></argument>, <argument><expr><literal type="string">"Invalid time base: %s\n"</literal></expr></argument>, <argument><expr><name>time_base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>exit_program</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ost</name><operator>-&gt;</operator><name>enc_timebase</name></name> <operator>=</operator> <name>q</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ost</name><operator>-&gt;</operator><name>max_frames</name></name> <operator>=</operator> <name>INT64_MAX</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MATCH_PER_STREAM_OPT</name><argument_list>(<argument><expr><name>max_frames</name></expr></argument>, <argument><expr><name>i64</name></expr></argument>, <argument><expr><name><name>ost</name><operator>-&gt;</operator><name>max_frames</name></name></expr></argument>, <argument><expr><name>oc</name></expr></argument>, <argument><expr><name>st</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>o</name><operator>-&gt;</operator><name>nb_max_frames</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name><name>o</name><operator>-&gt;</operator><name>max_frames</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>specifier</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>p</name> <operator>&amp;&amp;</operator> <name>type</name> <operator>!=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Applying unspecific -frames to non video streams, maybe you meant -vframes ?\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>ost</name><operator>-&gt;</operator><name>copy_prior_start</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MATCH_PER_STREAM_OPT</name><argument_list>(<argument><expr><name>copy_prior_start</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>ost</name><operator>-&gt;</operator><name>copy_prior_start</name></name></expr></argument>, <argument><expr><name>oc</name></expr></argument> ,<argument><expr><name>st</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MATCH_PER_STREAM_OPT</name><argument_list>(<argument><expr><name>bitstream_filters</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>bsfs</name></expr></argument>, <argument><expr><name>oc</name></expr></argument>, <argument><expr><name>st</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><name>bsfs</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>bsfs</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>AVBitStreamFilter</name> <modifier>*</modifier></type><name>filter</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>bsf</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>bsf_options_str</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>bsf_name</name></decl>;</decl_stmt>

<expr_stmt><expr><name>bsf</name> <operator>=</operator> <call><name>av_get_token</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bsfs</name></expr></argument>, <argument><expr><literal type="string">","</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>bsf</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>exit_program</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>bsf_name</name> <operator>=</operator> <call><name>av_strtok</name><argument_list>(<argument><expr><name>bsf</name></expr></argument>, <argument><expr><literal type="string">"="</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>bsf_options_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>bsf_name</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>exit_program</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>filter</name> <operator>=</operator> <call><name>av_bsf_get_by_name</name><argument_list>(<argument><expr><name>bsf_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>filter</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_FATAL</name></expr></argument>, <argument><expr><literal type="string">"Unknown bitstream filter %s\n"</literal></expr></argument>, <argument><expr><name>bsf_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>exit_program</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ost</name><operator>-&gt;</operator><name>bsf_ctx</name></name> <operator>=</operator> <call><name>av_realloc_array</name><argument_list>(<argument><expr><name><name>ost</name><operator>-&gt;</operator><name>bsf_ctx</name></name></expr></argument>,

<argument><expr><name><name>ost</name><operator>-&gt;</operator><name>nb_bitstream_filters</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>,

<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>ost</name><operator>-&gt;</operator><name>bsf_ctx</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ost</name><operator>-&gt;</operator><name>bsf_ctx</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>exit_program</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>av_bsf_alloc</name><argument_list>(<argument><expr><name>filter</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ost</name><operator>-&gt;</operator><name>bsf_ctx</name><index>[<expr><name><name>ost</name><operator>-&gt;</operator><name>nb_bitstream_filters</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Error allocating a bitstream filter context\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>exit_program</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ost</name><operator>-&gt;</operator><name>nb_bitstream_filters</name></name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>bsf_options_str</name> <operator>&amp;&amp;</operator> <name><name>filter</name><operator>-&gt;</operator><name>priv_class</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>AVOption</name> <modifier>*</modifier></type><name>opt</name> <init>= <expr><call><name>av_opt_next</name><argument_list>(<argument><expr><name><name>ost</name><operator>-&gt;</operator><name>bsf_ctx</name><index>[<expr><name><name>ost</name><operator>-&gt;</operator><name>nb_bitstream_filters</name></name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>priv_data</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name><name>shorthand</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{<expr><name>NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>opt</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>shorthand</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>opt</name><operator>-&gt;</operator><name>name</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>av_opt_set_from_string</name><argument_list>(<argument><expr><name><name>ost</name><operator>-&gt;</operator><name>bsf_ctx</name><index>[<expr><name><name>ost</name><operator>-&gt;</operator><name>nb_bitstream_filters</name></name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>priv_data</name></expr></argument>, <argument><expr><name>bsf_options_str</name></expr></argument>, <argument><expr><name>shorthand</name></expr></argument>, <argument><expr><literal type="string">"="</literal></expr></argument>, <argument><expr><literal type="string">":"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Error parsing options for bitstream filter %s\n"</literal></expr></argument>, <argument><expr><name>bsf_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>exit_program</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bsf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>bsfs</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>bsfs</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>MATCH_PER_STREAM_OPT</name><argument_list>(<argument><expr><name>codec_tags</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>codec_tag</name></expr></argument>, <argument><expr><name>oc</name></expr></argument>, <argument><expr><name>st</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>codec_tag</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>tag</name> <init>= <expr><call><name>strtol</name><argument_list>(<argument><expr><name>codec_tag</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>next</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>next</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>tag</name> <operator>=</operator> <call><name>AV_RL32</name><argument_list>(<argument><expr><name>codec_tag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>ost</name><operator>-&gt;</operator><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_tag</name></name> <operator>=</operator>

<name><name>ost</name><operator>-&gt;</operator><name>enc_ctx</name><operator>-&gt;</operator><name>codec_tag</name></name> <operator>=</operator> <name>tag</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>MATCH_PER_STREAM_OPT</name><argument_list>(<argument><expr><name>qscale</name></expr></argument>, <argument><expr><name>dbl</name></expr></argument>, <argument><expr><name>qscale</name></expr></argument>, <argument><expr><name>oc</name></expr></argument>, <argument><expr><name>st</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>qscale</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ost</name><operator>-&gt;</operator><name>enc_ctx</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>AV_CODEC_FLAG_QSCALE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ost</name><operator>-&gt;</operator><name>enc_ctx</name><operator>-&gt;</operator><name>global_quality</name></name> <operator>=</operator> <name>FF_QP2LAMBDA</name> <operator>*</operator> <name>qscale</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>MATCH_PER_STREAM_OPT</name><argument_list>(<argument><expr><name>disposition</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name><name>ost</name><operator>-&gt;</operator><name>disposition</name></name></expr></argument>, <argument><expr><name>oc</name></expr></argument>, <argument><expr><name>st</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ost</name><operator>-&gt;</operator><name>disposition</name></name> <operator>=</operator> <call><name>av_strdup</name><argument_list>(<argument><expr><name><name>ost</name><operator>-&gt;</operator><name>disposition</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ost</name><operator>-&gt;</operator><name>max_muxing_queue_size</name></name> <operator>=</operator> <literal type="number">128</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MATCH_PER_STREAM_OPT</name><argument_list>(<argument><expr><name>max_muxing_queue_size</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>ost</name><operator>-&gt;</operator><name>max_muxing_queue_size</name></name></expr></argument>, <argument><expr><name>oc</name></expr></argument>, <argument><expr><name>st</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ost</name><operator>-&gt;</operator><name>max_muxing_queue_size</name></name> <operator>*=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>AVPacket</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>oc</name><operator>-&gt;</operator><name>oformat</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AVFMT_GLOBALHEADER</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ost</name><operator>-&gt;</operator><name>enc_ctx</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>AV_CODEC_FLAG_GLOBAL_HEADER</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_dict_copy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ost</name><operator>-&gt;</operator><name>sws_dict</name></name></expr></argument>, <argument><expr><name><name>o</name><operator>-&gt;</operator><name>g</name><operator>-&gt;</operator><name>sws_dict</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_dict_copy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ost</name><operator>-&gt;</operator><name>swr_opts</name></name></expr></argument>, <argument><expr><name><name>o</name><operator>-&gt;</operator><name>g</name><operator>-&gt;</operator><name>swr_opts</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ost</name><operator>-&gt;</operator><name>enc</name></name> <operator>&amp;&amp;</operator> <call><name>av_get_exact_bits_per_sample</name><argument_list>(<argument><expr><name><name>ost</name><operator>-&gt;</operator><name>enc</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">24</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_dict_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ost</name><operator>-&gt;</operator><name>swr_opts</name></name></expr></argument>, <argument><expr><literal type="string">"output_sample_bits"</literal></expr></argument>, <argument><expr><literal type="string">"24"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_dict_copy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ost</name><operator>-&gt;</operator><name>resample_opts</name></name></expr></argument>, <argument><expr><name><name>o</name><operator>-&gt;</operator><name>g</name><operator>-&gt;</operator><name>resample_opts</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ost</name><operator>-&gt;</operator><name>source_index</name></name> <operator>=</operator> <name>source_index</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>source_index</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ost</name><operator>-&gt;</operator><name>sync_ist</name></name> <operator>=</operator> <name><name>input_streams</name><index>[<expr><name>source_index</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>input_streams</name><index>[<expr><name>source_index</name></expr>]</index></name><operator>-&gt;</operator><name>discard</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>input_streams</name><index>[<expr><name>source_index</name></expr>]</index></name><operator>-&gt;</operator><name><name>st</name><operator>-&gt;</operator><name>discard</name></name> <operator>=</operator> <name><name>input_streams</name><index>[<expr><name>source_index</name></expr>]</index></name><operator>-&gt;</operator><name>user_set_discard</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ost</name><operator>-&gt;</operator><name>last_mux_dts</name></name> <operator>=</operator> <name>AV_NOPTS_VALUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ost</name><operator>-&gt;</operator><name>muxing_queue</name></name> <operator>=</operator> <call><name>av_fifo_alloc</name><argument_list>(<argument><expr><literal type="number">8</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>AVPacket</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ost</name><operator>-&gt;</operator><name>muxing_queue</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>exit_program</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>ost</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>parse_matrix_coeffs</name><parameter_list>(<parameter><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>str</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init><condition>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>dest</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">63</literal></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="char">','</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>p</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_FATAL</name></expr></argument>, <argument><expr><literal type="string">"Syntax error in matrix \"%s\" at coeff %d\n"</literal></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>exit_program</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>read_file</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>dyn_buf</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>avio_open</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>, <argument><expr><name>filename</name></expr></argument>, <argument><expr><name>AVIO_FLAG_READ</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>buf</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>str</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Error opening file %s.\n"</literal></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>avio_open_dyn_buf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dyn_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>avio_closep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>avio_read</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>avio_write</name><argument_list>(<argument><expr><name>dyn_buf</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><call><name>avio_w8</name><argument_list>(<argument><expr><name>dyn_buf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_closep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>avio_close_dyn_buf</name><argument_list>(<argument><expr><name>dyn_buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>str</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>get_ost_filters</name><parameter_list>(<parameter><decl><type><name>OptionsContext</name> <modifier>*</modifier></type><name>o</name></decl></parameter>, <parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>oc</name></decl></parameter>,

<parameter><decl><type><name>OutputStream</name> <modifier>*</modifier></type><name>ost</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVStream</name> <modifier>*</modifier></type><name>st</name> <init>= <expr><name><name>ost</name><operator>-&gt;</operator><name>st</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ost</name><operator>-&gt;</operator><name>filters_script</name></name> <operator>&amp;&amp;</operator> <name><name>ost</name><operator>-&gt;</operator><name>filters</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Both -filter and -filter_script set for "</literal>

<literal type="string">"output stream #%d:%d.\n"</literal></expr></argument>, <argument><expr><name>nb_output_files</name></expr></argument>, <argument><expr><name><name>st</name><operator>-&gt;</operator><name>index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>exit_program</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ost</name><operator>-&gt;</operator><name>filters_script</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>read_file</name><argument_list>(<argument><expr><name><name>ost</name><operator>-&gt;</operator><name>filters_script</name></name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>ost</name><operator>-&gt;</operator><name>filters</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>av_strdup</name><argument_list>(<argument><expr><name><name>ost</name><operator>-&gt;</operator><name>filters</name></name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>av_strdup</name><argument_list>(<argument><expr><ternary><condition><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_type</name></name> <operator>==</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr> ?</condition><then>

<expr><literal type="string">"null"</literal></expr> </then><else>: <expr><literal type="string">"anull"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>check_streamcopy_filters</name><parameter_list>(<parameter><decl><type><name>OptionsContext</name> <modifier>*</modifier></type><name>o</name></decl></parameter>, <parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>oc</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>OutputStream</name> <modifier>*</modifier></type><name>ost</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>AVMediaType</name></name></type> <name>type</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>ost</name><operator>-&gt;</operator><name>filters_script</name></name> <operator>||</operator> <name><name>ost</name><operator>-&gt;</operator><name>filters</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"%s '%s' was defined for %s output stream %d:%d but codec copy was selected.\n"</literal>

<literal type="string">"Filtering and streamcopy cannot be used together.\n"</literal></expr></argument>,

<argument><expr><ternary><condition><expr><name><name>ost</name><operator>-&gt;</operator><name>filters</name></name></expr> ?</condition><then> <expr><literal type="string">"Filtergraph"</literal></expr> </then><else>: <expr><literal type="string">"Filtergraph script"</literal></expr></else></ternary></expr></argument>,

<argument><expr><ternary><condition><expr><name><name>ost</name><operator>-&gt;</operator><name>filters</name></name></expr> ?</condition><then> <expr><name><name>ost</name><operator>-&gt;</operator><name>filters</name></name></expr> </then><else>: <expr><name><name>ost</name><operator>-&gt;</operator><name>filters_script</name></name></expr></else></ternary></expr></argument>,

<argument><expr><call><name>av_get_media_type_string</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>ost</name><operator>-&gt;</operator><name>file_index</name></name></expr></argument>, <argument><expr><name><name>ost</name><operator>-&gt;</operator><name>index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>exit_program</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>OutputStream</name> <modifier>*</modifier></type><name>new_video_stream</name><parameter_list>(<parameter><decl><type><name>OptionsContext</name> <modifier>*</modifier></type><name>o</name></decl></parameter>, <parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>oc</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>source_index</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVStream</name> <modifier>*</modifier></type><name>st</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>OutputStream</name> <modifier>*</modifier></type><name>ost</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>video_enc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>frame_rate</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>frame_aspect_ratio</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>ost</name> <operator>=</operator> <call><name>new_output_stream</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><name>oc</name></expr></argument>, <argument><expr><name>AVMEDIA_TYPE_VIDEO</name></expr></argument>, <argument><expr><name>source_index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>st</name> <operator>=</operator> <name><name>ost</name><operator>-&gt;</operator><name>st</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>video_enc</name> <operator>=</operator> <name><name>ost</name><operator>-&gt;</operator><name>enc_ctx</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MATCH_PER_STREAM_OPT</name><argument_list>(<argument><expr><name>frame_rates</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>frame_rate</name></expr></argument>, <argument><expr><name>oc</name></expr></argument>, <argument><expr><name>st</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>frame_rate</name> <operator>&amp;&amp;</operator> <call><name>av_parse_video_rate</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ost</name><operator>-&gt;</operator><name>frame_rate</name></name></expr></argument>, <argument><expr><name>frame_rate</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_FATAL</name></expr></argument>, <argument><expr><literal type="string">"Invalid framerate value: %s\n"</literal></expr></argument>, <argument><expr><name>frame_rate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>exit_program</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>frame_rate</name> <operator>&amp;&amp;</operator> <name>video_sync_method</name> <operator>==</operator> <name>VSYNC_PASSTHROUGH</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Using -vsync 0 and -r can produce invalid output files\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>MATCH_PER_STREAM_OPT</name><argument_list>(<argument><expr><name>frame_aspect_ratios</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>frame_aspect_ratio</name></expr></argument>, <argument><expr><name>oc</name></expr></argument>, <argument><expr><name>st</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>frame_aspect_ratio</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>AVRational</name></type> <name>q</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>av_parse_ratio</name><argument_list>(<argument><expr><operator>&amp;</operator><name>q</name></expr></argument>, <argument><expr><name>frame_aspect_ratio</name></expr></argument>, <argument><expr><literal type="number">255</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator>

<name><name>q</name><operator>.</operator><name>num</name></name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>q</name><operator>.</operator><name>den</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_FATAL</name></expr></argument>, <argument><expr><literal type="string">"Invalid aspect ratio: %s\n"</literal></expr></argument>, <argument><expr><name>frame_aspect_ratio</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>exit_program</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ost</name><operator>-&gt;</operator><name>frame_aspect_ratio</name></name> <operator>=</operator> <name>q</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>MATCH_PER_STREAM_OPT</name><argument_list>(<argument><expr><name>filter_scripts</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name><name>ost</name><operator>-&gt;</operator><name>filters_script</name></name></expr></argument>, <argument><expr><name>oc</name></expr></argument>, <argument><expr><name>st</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MATCH_PER_STREAM_OPT</name><argument_list>(<argument><expr><name>filters</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name><name>ost</name><operator>-&gt;</operator><name>filters</name></name></expr></argument>, <argument><expr><name>oc</name></expr></argument>, <argument><expr><name>st</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ost</name><operator>-&gt;</operator><name>stream_copy</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>frame_size</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>frame_pix_fmt</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>intra_matrix</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>inter_matrix</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>chroma_intra_matrix</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>do_pass</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>MATCH_PER_STREAM_OPT</name><argument_list>(<argument><expr><name>frame_sizes</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>frame_size</name></expr></argument>, <argument><expr><name>oc</name></expr></argument>, <argument><expr><name>st</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>frame_size</name> <operator>&amp;&amp;</operator> <call><name>av_parse_video_size</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>video_enc</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>video_enc</name><operator>-&gt;</operator><name>height</name></name></expr></argument>, <argument><expr><name>frame_size</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_FATAL</name></expr></argument>, <argument><expr><literal type="string">"Invalid frame size: %s.\n"</literal></expr></argument>, <argument><expr><name>frame_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>exit_program</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>video_enc</name><operator>-&gt;</operator><name>bits_per_raw_sample</name></name> <operator>=</operator> <name>frame_bits_per_raw_sample</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MATCH_PER_STREAM_OPT</name><argument_list>(<argument><expr><name>frame_pix_fmts</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>frame_pix_fmt</name></expr></argument>, <argument><expr><name>oc</name></expr></argument>, <argument><expr><name>st</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>frame_pix_fmt</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>frame_pix_fmt</name> <operator>==</operator> <literal type="char">'+'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ost</name><operator>-&gt;</operator><name>keep_pix_fmt</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><operator>++</operator><name>frame_pix_fmt</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>frame_pix_fmt</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>frame_pix_fmt</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>video_enc</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <call><name>av_get_pix_fmt</name><argument_list>(<argument><expr><name>frame_pix_fmt</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>AV_PIX_FMT_NONE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_FATAL</name></expr></argument>, <argument><expr><literal type="string">"Unknown pixel format requested: %s.\n"</literal></expr></argument>, <argument><expr><name>frame_pix_fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>exit_program</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>sample_aspect_ratio</name></name> <operator>=</operator> <name><name>video_enc</name><operator>-&gt;</operator><name>sample_aspect_ratio</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>intra_only</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>video_enc</name><operator>-&gt;</operator><name>gop_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>MATCH_PER_STREAM_OPT</name><argument_list>(<argument><expr><name>intra_matrices</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>intra_matrix</name></expr></argument>, <argument><expr><name>oc</name></expr></argument>, <argument><expr><name>st</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>intra_matrix</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>video_enc</name><operator>-&gt;</operator><name>intra_matrix</name></name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>video_enc</name><operator>-&gt;</operator><name>intra_matrix</name></name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <literal type="number">64</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_FATAL</name></expr></argument>, <argument><expr><literal type="string">"Could not allocate memory for intra matrix.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>exit_program</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>parse_matrix_coeffs</name><argument_list>(<argument><expr><name><name>video_enc</name><operator>-&gt;</operator><name>intra_matrix</name></name></expr></argument>, <argument><expr><name>intra_matrix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>MATCH_PER_STREAM_OPT</name><argument_list>(<argument><expr><name>chroma_intra_matrices</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>chroma_intra_matrix</name></expr></argument>, <argument><expr><name>oc</name></expr></argument>, <argument><expr><name>st</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>chroma_intra_matrix</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>av_mallocz</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>video_enc</name><operator>-&gt;</operator><name>chroma_intra_matrix</name></name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <literal type="number">64</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>p</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_FATAL</name></expr></argument>, <argument><expr><literal type="string">"Could not allocate memory for intra matrix.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>exit_program</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>video_enc</name><operator>-&gt;</operator><name>chroma_intra_matrix</name></name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>parse_matrix_coeffs</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>chroma_intra_matrix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>MATCH_PER_STREAM_OPT</name><argument_list>(<argument><expr><name>inter_matrices</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>inter_matrix</name></expr></argument>, <argument><expr><name>oc</name></expr></argument>, <argument><expr><name>st</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>inter_matrix</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>video_enc</name><operator>-&gt;</operator><name>inter_matrix</name></name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>video_enc</name><operator>-&gt;</operator><name>inter_matrix</name></name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <literal type="number">64</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_FATAL</name></expr></argument>, <argument><expr><literal type="string">"Could not allocate memory for inter matrix.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>exit_program</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>parse_matrix_coeffs</name><argument_list>(<argument><expr><name><name>video_enc</name><operator>-&gt;</operator><name>inter_matrix</name></name></expr></argument>, <argument><expr><name>inter_matrix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>MATCH_PER_STREAM_OPT</name><argument_list>(<argument><expr><name>rc_overrides</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>oc</name></expr></argument>, <argument><expr><name>st</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>p</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>start</name></decl>, <decl><type ref="prev"/><name>end</name></decl>, <decl><type ref="prev"/><name>q</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>e</name> <init>= <expr><call><name>sscanf</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"%d,%d,%d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>start</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>end</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>q</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>e</name> <operator>!=</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_FATAL</name></expr></argument>, <argument><expr><literal type="string">"error parsing rc_override\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>exit_program</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>video_enc</name><operator>-&gt;</operator><name>rc_override</name></name> <operator>=</operator>

<call><name>av_realloc_array</name><argument_list>(<argument><expr><name><name>video_enc</name><operator>-&gt;</operator><name>rc_override</name></name></expr></argument>,

<argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>RcOverride</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>video_enc</name><operator>-&gt;</operator><name>rc_override</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_FATAL</name></expr></argument>, <argument><expr><literal type="string">"Could not (re)allocate memory for rc_override.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>exit_program</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>video_enc</name><operator>-&gt;</operator><name>rc_override</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>start_frame</name> <operator>=</operator> <name>start</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>video_enc</name><operator>-&gt;</operator><name>rc_override</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>end_frame</name> <operator>=</operator> <name>end</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>q</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>video_enc</name><operator>-&gt;</operator><name>rc_override</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>qscale</name> <operator>=</operator> <name>q</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>video_enc</name><operator>-&gt;</operator><name>rc_override</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>quality_factor</name> <operator>=</operator> <literal type="number">1.0</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name><name>video_enc</name><operator>-&gt;</operator><name>rc_override</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>qscale</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>video_enc</name><operator>-&gt;</operator><name>rc_override</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>quality_factor</name> <operator>=</operator> <operator>-</operator><name>q</name><operator>/</operator><literal type="number">100.0</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>video_enc</name><operator>-&gt;</operator><name>rc_override_count</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>do_psnr</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>video_enc</name><operator>-&gt;</operator><name>flags</name></name><operator>|=</operator> <name>AV_CODEC_FLAG_PSNR</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>MATCH_PER_STREAM_OPT</name><argument_list>(<argument><expr><name>pass</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>do_pass</name></expr></argument>, <argument><expr><name>oc</name></expr></argument>, <argument><expr><name>st</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>do_pass</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>do_pass</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>video_enc</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>AV_CODEC_FLAG_PASS1</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_dict_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ost</name><operator>-&gt;</operator><name>encoder_opts</name></name></expr></argument>, <argument><expr><literal type="string">"flags"</literal></expr></argument>, <argument><expr><literal type="string">"+pass1"</literal></expr></argument>, <argument><expr><name>AV_DICT_APPEND</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>do_pass</name> <operator>&amp;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>video_enc</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>AV_CODEC_FLAG_PASS2</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_dict_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ost</name><operator>-&gt;</operator><name>encoder_opts</name></name></expr></argument>, <argument><expr><literal type="string">"flags"</literal></expr></argument>, <argument><expr><literal type="string">"+pass2"</literal></expr></argument>, <argument><expr><name>AV_DICT_APPEND</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>MATCH_PER_STREAM_OPT</name><argument_list>(<argument><expr><name>passlogfiles</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name><name>ost</name><operator>-&gt;</operator><name>logfile_prefix</name></name></expr></argument>, <argument><expr><name>oc</name></expr></argument>, <argument><expr><name>st</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ost</name><operator>-&gt;</operator><name>logfile_prefix</name></name> <operator>&amp;&amp;</operator>

<operator>!</operator><operator>(</operator><name><name>ost</name><operator>-&gt;</operator><name>logfile_prefix</name></name> <operator>=</operator> <call><name>av_strdup</name><argument_list>(<argument><expr><name><name>ost</name><operator>-&gt;</operator><name>logfile_prefix</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>exit_program</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>do_pass</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>logfilename</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>f</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>logfilename</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>logfilename</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s-%d.log"</literal></expr></argument>,

<argument><expr><ternary><condition><expr><name><name>ost</name><operator>-&gt;</operator><name>logfile_prefix</name></name></expr> ?</condition><then> <expr><name><name>ost</name><operator>-&gt;</operator><name>logfile_prefix</name></name></expr> </then><else>:

<expr><name>DEFAULT_PASS_LOGFILENAME_PREFIX</name></expr></else></ternary></expr></argument>,

<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>ost</name><operator>-&gt;</operator><name>enc</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="string">"libx264"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_dict_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ost</name><operator>-&gt;</operator><name>encoder_opts</name></name></expr></argument>, <argument><expr><literal type="string">"stats"</literal></expr></argument>, <argument><expr><name>logfilename</name></expr></argument>, <argument><expr><name>AV_DICT_DONT_OVERWRITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>video_enc</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_CODEC_FLAG_PASS2</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>logbuffer</name> <init>= <expr><call><name>read_file</name><argument_list>(<argument><expr><name>logfilename</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>logbuffer</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_FATAL</name></expr></argument>, <argument><expr><literal type="string">"Error reading log file '%s' for pass-2 encoding\n"</literal></expr></argument>,

<argument><expr><name>logfilename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>exit_program</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>video_enc</name><operator>-&gt;</operator><name>stats_in</name></name> <operator>=</operator> <name>logbuffer</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>video_enc</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_CODEC_FLAG_PASS1</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>f</name> <operator>=</operator> <call><name>av_fopen_utf8</name><argument_list>(<argument><expr><name>logfilename</name></expr></argument>, <argument><expr><literal type="string">"wb"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>f</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_FATAL</name></expr></argument>,

<argument><expr><literal type="string">"Cannot write log file '%s' for pass-1 encoding: %s\n"</literal></expr></argument>,

<argument><expr><name>logfilename</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>exit_program</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ost</name><operator>-&gt;</operator><name>logfile</name></name> <operator>=</operator> <name>f</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>MATCH_PER_STREAM_OPT</name><argument_list>(<argument><expr><name>forced_key_frames</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name><name>ost</name><operator>-&gt;</operator><name>forced_keyframes</name></name></expr></argument>, <argument><expr><name>oc</name></expr></argument>, <argument><expr><name>st</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ost</name><operator>-&gt;</operator><name>forced_keyframes</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ost</name><operator>-&gt;</operator><name>forced_keyframes</name></name> <operator>=</operator> <call><name>av_strdup</name><argument_list>(<argument><expr><name><name>ost</name><operator>-&gt;</operator><name>forced_keyframes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>MATCH_PER_STREAM_OPT</name><argument_list>(<argument><expr><name>force_fps</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>ost</name><operator>-&gt;</operator><name>force_fps</name></name></expr></argument>, <argument><expr><name>oc</name></expr></argument>, <argument><expr><name>st</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ost</name><operator>-&gt;</operator><name>top_field_first</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MATCH_PER_STREAM_OPT</name><argument_list>(<argument><expr><name>top_field_first</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>ost</name><operator>-&gt;</operator><name>top_field_first</name></name></expr></argument>, <argument><expr><name>oc</name></expr></argument>, <argument><expr><name>st</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ost</name><operator>-&gt;</operator><name>avfilter</name></name> <operator>=</operator> <call><name>get_ost_filters</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><name>oc</name></expr></argument>, <argument><expr><name>ost</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ost</name><operator>-&gt;</operator><name>avfilter</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>exit_program</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>MATCH_PER_STREAM_OPT</name><argument_list>(<argument><expr><name>copy_initial_nonkeyframes</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>ost</name><operator>-&gt;</operator><name>copy_initial_nonkeyframes</name></name></expr></argument>, <argument><expr><name>oc</name></expr></argument> ,<argument><expr><name>st</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ost</name><operator>-&gt;</operator><name>stream_copy</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>check_streamcopy_filters</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><name>oc</name></expr></argument>, <argument><expr><name>ost</name></expr></argument>, <argument><expr><name>AVMEDIA_TYPE_VIDEO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>ost</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>OutputStream</name> <modifier>*</modifier></type><name>new_audio_stream</name><parameter_list>(<parameter><decl><type><name>OptionsContext</name> <modifier>*</modifier></type><name>o</name></decl></parameter>, <parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>oc</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>source_index</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVStream</name> <modifier>*</modifier></type><name>st</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>OutputStream</name> <modifier>*</modifier></type><name>ost</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>audio_enc</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ost</name> <operator>=</operator> <call><name>new_output_stream</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><name>oc</name></expr></argument>, <argument><expr><name>AVMEDIA_TYPE_AUDIO</name></expr></argument>, <argument><expr><name>source_index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>st</name> <operator>=</operator> <name><name>ost</name><operator>-&gt;</operator><name>st</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>audio_enc</name> <operator>=</operator> <name><name>ost</name><operator>-&gt;</operator><name>enc_ctx</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>audio_enc</name><operator>-&gt;</operator><name>codec_type</name></name> <operator>=</operator> <name>AVMEDIA_TYPE_AUDIO</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MATCH_PER_STREAM_OPT</name><argument_list>(<argument><expr><name>filter_scripts</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name><name>ost</name><operator>-&gt;</operator><name>filters_script</name></name></expr></argument>, <argument><expr><name>oc</name></expr></argument>, <argument><expr><name>st</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MATCH_PER_STREAM_OPT</name><argument_list>(<argument><expr><name>filters</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name><name>ost</name><operator>-&gt;</operator><name>filters</name></name></expr></argument>, <argument><expr><name>oc</name></expr></argument>, <argument><expr><name>st</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ost</name><operator>-&gt;</operator><name>stream_copy</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>sample_fmt</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>MATCH_PER_STREAM_OPT</name><argument_list>(<argument><expr><name>audio_channels</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>audio_enc</name><operator>-&gt;</operator><name>channels</name></name></expr></argument>, <argument><expr><name>oc</name></expr></argument>, <argument><expr><name>st</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MATCH_PER_STREAM_OPT</name><argument_list>(<argument><expr><name>sample_fmts</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>sample_fmt</name></expr></argument>, <argument><expr><name>oc</name></expr></argument>, <argument><expr><name>st</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>sample_fmt</name> <operator>&amp;&amp;</operator>

<operator>(</operator><name><name>audio_enc</name><operator>-&gt;</operator><name>sample_fmt</name></name> <operator>=</operator> <call><name>av_get_sample_fmt</name><argument_list>(<argument><expr><name>sample_fmt</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>AV_SAMPLE_FMT_NONE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_FATAL</name></expr></argument>, <argument><expr><literal type="string">"Invalid sample format '%s'\n"</literal></expr></argument>, <argument><expr><name>sample_fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>exit_program</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>MATCH_PER_STREAM_OPT</name><argument_list>(<argument><expr><name>audio_sample_rate</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>audio_enc</name><operator>-&gt;</operator><name>sample_rate</name></name></expr></argument>, <argument><expr><name>oc</name></expr></argument>, <argument><expr><name>st</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MATCH_PER_STREAM_OPT</name><argument_list>(<argument><expr><name>apad</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name><name>ost</name><operator>-&gt;</operator><name>apad</name></name></expr></argument>, <argument><expr><name>oc</name></expr></argument>, <argument><expr><name>st</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ost</name><operator>-&gt;</operator><name>apad</name></name> <operator>=</operator> <call><name>av_strdup</name><argument_list>(<argument><expr><name><name>ost</name><operator>-&gt;</operator><name>apad</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ost</name><operator>-&gt;</operator><name>avfilter</name></name> <operator>=</operator> <call><name>get_ost_filters</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><name>oc</name></expr></argument>, <argument><expr><name>ost</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ost</name><operator>-&gt;</operator><name>avfilter</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>exit_program</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name><name>o</name><operator>-&gt;</operator><name>nb_audio_channel_maps</name></name></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>AudioChannelMap</name> <modifier>*</modifier></type><name>map</name> <init>= <expr><operator>&amp;</operator><name><name>o</name><operator>-&gt;</operator><name>audio_channel_maps</name><index>[<expr><name>n</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>map</name><operator>-&gt;</operator><name>ofile_idx</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>||</operator> <name><name>ost</name><operator>-&gt;</operator><name>file_index</name></name> <operator>==</operator> <name><name>map</name><operator>-&gt;</operator><name>ofile_idx</name></name><operator>)</operator> <operator>&amp;&amp;</operator>

<operator>(</operator><name><name>map</name><operator>-&gt;</operator><name>ostream_idx</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>||</operator> <name><name>ost</name><operator>-&gt;</operator><name>st</name><operator>-&gt;</operator><name>index</name></name> <operator>==</operator> <name><name>map</name><operator>-&gt;</operator><name>ostream_idx</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>InputStream</name> <modifier>*</modifier></type><name>ist</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>map</name><operator>-&gt;</operator><name>channel_idx</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ist</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>ost</name><operator>-&gt;</operator><name>source_index</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_FATAL</name></expr></argument>, <argument><expr><literal type="string">"Cannot determine input stream for channel mapping %d.%d\n"</literal></expr></argument>,

<argument><expr><name><name>ost</name><operator>-&gt;</operator><name>file_index</name></name></expr></argument>, <argument><expr><name><name>ost</name><operator>-&gt;</operator><name>st</name><operator>-&gt;</operator><name>index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>ist</name> <operator>=</operator> <name><name>input_streams</name><index>[<expr><name><name>ost</name><operator>-&gt;</operator><name>source_index</name></name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ist</name> <operator>||</operator> <operator>(</operator><name><name>ist</name><operator>-&gt;</operator><name>file_index</name></name> <operator>==</operator> <name><name>map</name><operator>-&gt;</operator><name>file_idx</name></name> <operator>&amp;&amp;</operator> <name><name>ist</name><operator>-&gt;</operator><name>st</name><operator>-&gt;</operator><name>index</name></name> <operator>==</operator> <name><name>map</name><operator>-&gt;</operator><name>stream_idx</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>av_reallocp_array</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ost</name><operator>-&gt;</operator><name>audio_channels_map</name></name></expr></argument>,

<argument><expr><name><name>ost</name><operator>-&gt;</operator><name>audio_channels_mapped</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>,

<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>ost</name><operator>-&gt;</operator><name>audio_channels_map</name></name></expr></argument>)</argument_list></sizeof></expr></argument>

)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>exit_program</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>ost</name><operator>-&gt;</operator><name>audio_channels_map</name><index>[<expr><name><name>ost</name><operator>-&gt;</operator><name>audio_channels_mapped</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>map</name><operator>-&gt;</operator><name>channel_idx</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ost</name><operator>-&gt;</operator><name>stream_copy</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>check_streamcopy_filters</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><name>oc</name></expr></argument>, <argument><expr><name>ost</name></expr></argument>, <argument><expr><name>AVMEDIA_TYPE_AUDIO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>ost</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>OutputStream</name> <modifier>*</modifier></type><name>new_data_stream</name><parameter_list>(<parameter><decl><type><name>OptionsContext</name> <modifier>*</modifier></type><name>o</name></decl></parameter>, <parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>oc</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>source_index</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>OutputStream</name> <modifier>*</modifier></type><name>ost</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ost</name> <operator>=</operator> <call><name>new_output_stream</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><name>oc</name></expr></argument>, <argument><expr><name>AVMEDIA_TYPE_DATA</name></expr></argument>, <argument><expr><name>source_index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ost</name><operator>-&gt;</operator><name>stream_copy</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_FATAL</name></expr></argument>, <argument><expr><literal type="string">"Data stream encoding not supported yet (only streamcopy)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>exit_program</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>ost</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>OutputStream</name> <modifier>*</modifier></type><name>new_unknown_stream</name><parameter_list>(<parameter><decl><type><name>OptionsContext</name> <modifier>*</modifier></type><name>o</name></decl></parameter>, <parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>oc</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>source_index</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>OutputStream</name> <modifier>*</modifier></type><name>ost</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ost</name> <operator>=</operator> <call><name>new_output_stream</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><name>oc</name></expr></argument>, <argument><expr><name>AVMEDIA_TYPE_UNKNOWN</name></expr></argument>, <argument><expr><name>source_index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ost</name><operator>-&gt;</operator><name>stream_copy</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_FATAL</name></expr></argument>, <argument><expr><literal type="string">"Unknown stream encoding not supported yet (only streamcopy)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>exit_program</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>ost</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>OutputStream</name> <modifier>*</modifier></type><name>new_attachment_stream</name><parameter_list>(<parameter><decl><type><name>OptionsContext</name> <modifier>*</modifier></type><name>o</name></decl></parameter>, <parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>oc</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>source_index</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>OutputStream</name> <modifier>*</modifier></type><name>ost</name> <init>= <expr><call><name>new_output_stream</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><name>oc</name></expr></argument>, <argument><expr><name>AVMEDIA_TYPE_ATTACHMENT</name></expr></argument>, <argument><expr><name>source_index</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>ost</name><operator>-&gt;</operator><name>stream_copy</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ost</name><operator>-&gt;</operator><name>finished</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><name>ost</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>OutputStream</name> <modifier>*</modifier></type><name>new_subtitle_stream</name><parameter_list>(<parameter><decl><type><name>OptionsContext</name> <modifier>*</modifier></type><name>o</name></decl></parameter>, <parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>oc</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>source_index</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVStream</name> <modifier>*</modifier></type><name>st</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>OutputStream</name> <modifier>*</modifier></type><name>ost</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>subtitle_enc</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ost</name> <operator>=</operator> <call><name>new_output_stream</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><name>oc</name></expr></argument>, <argument><expr><name>AVMEDIA_TYPE_SUBTITLE</name></expr></argument>, <argument><expr><name>source_index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>st</name> <operator>=</operator> <name><name>ost</name><operator>-&gt;</operator><name>st</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>subtitle_enc</name> <operator>=</operator> <name><name>ost</name><operator>-&gt;</operator><name>enc_ctx</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>subtitle_enc</name><operator>-&gt;</operator><name>codec_type</name></name> <operator>=</operator> <name>AVMEDIA_TYPE_SUBTITLE</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MATCH_PER_STREAM_OPT</name><argument_list>(<argument><expr><name>copy_initial_nonkeyframes</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>ost</name><operator>-&gt;</operator><name>copy_initial_nonkeyframes</name></name></expr></argument>, <argument><expr><name>oc</name></expr></argument>, <argument><expr><name>st</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ost</name><operator>-&gt;</operator><name>stream_copy</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>frame_size</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>MATCH_PER_STREAM_OPT</name><argument_list>(<argument><expr><name>frame_sizes</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>frame_size</name></expr></argument>, <argument><expr><name>oc</name></expr></argument>, <argument><expr><name>st</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>frame_size</name> <operator>&amp;&amp;</operator> <call><name>av_parse_video_size</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>subtitle_enc</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>subtitle_enc</name><operator>-&gt;</operator><name>height</name></name></expr></argument>, <argument><expr><name>frame_size</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_FATAL</name></expr></argument>, <argument><expr><literal type="string">"Invalid frame size: %s.\n"</literal></expr></argument>, <argument><expr><name>frame_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>exit_program</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>ost</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>opt_streamid</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>optctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>opt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>OptionsContext</name> <modifier>*</modifier></type><name>o</name> <init>= <expr><name>optctx</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>idx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>idx_str</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_strlcpy</name><argument_list>(<argument><expr><name>idx_str</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>idx_str</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>idx_str</name></expr></argument>, <argument><expr><literal type="char">':'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>p</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_FATAL</name></expr></argument>,

<argument><expr><literal type="string">"Invalid value '%s' for option '%s', required syntax is 'index:value'\n"</literal></expr></argument>,

<argument><expr><name>arg</name></expr></argument>, <argument><expr><name>opt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>exit_program</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>idx</name> <operator>=</operator> <call><name>parse_number_or_die</name><argument_list>(<argument><expr><name>opt</name></expr></argument>, <argument><expr><name>idx_str</name></expr></argument>, <argument><expr><name>OPT_INT</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>MAX_STREAMS</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>o</name><operator>-&gt;</operator><name>streamid_map</name></name> <operator>=</operator> <call><name>grow_array</name><argument_list>(<argument><expr><name><name>o</name><operator>-&gt;</operator><name>streamid_map</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>o</name><operator>-&gt;</operator><name>streamid_map</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>o</name><operator>-&gt;</operator><name>nb_streamid_map</name></name></expr></argument>, <argument><expr><name>idx</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>o</name><operator>-&gt;</operator><name>streamid_map</name><index>[<expr><name>idx</name></expr>]</index></name> <operator>=</operator> <call><name>parse_number_or_die</name><argument_list>(<argument><expr><name>opt</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>OPT_INT</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>INT_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>copy_chapters</name><parameter_list>(<parameter><decl><type><name>InputFile</name> <modifier>*</modifier></type><name>ifile</name></decl></parameter>, <parameter><decl><type><name>OutputFile</name> <modifier>*</modifier></type><name>ofile</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>copy_metadata</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>is</name> <init>= <expr><name><name>ifile</name><operator>-&gt;</operator><name>ctx</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>os</name> <init>= <expr><name><name>ofile</name><operator>-&gt;</operator><name>ctx</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVChapter</name> <modifier>*</modifier><modifier>*</modifier></type><name>tmp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name>av_realloc_f</name><argument_list>(<argument><expr><name><name>os</name><operator>-&gt;</operator><name>chapters</name></name></expr></argument>, <argument><expr><name><name>is</name><operator>-&gt;</operator><name>nb_chapters</name></name> <operator>+</operator> <name><name>os</name><operator>-&gt;</operator><name>nb_chapters</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>os</name><operator>-&gt;</operator><name>chapters</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>tmp</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>os</name><operator>-&gt;</operator><name>chapters</name></name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>is</name><operator>-&gt;</operator><name>nb_chapters</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>AVChapter</name> <modifier>*</modifier></type><name>in_ch</name> <init>= <expr><name><name>is</name><operator>-&gt;</operator><name>chapters</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>out_ch</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>start_time</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name><name>ofile</name><operator>-&gt;</operator><name>start_time</name></name> <operator>==</operator> <name>AV_NOPTS_VALUE</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name><name>ofile</name><operator>-&gt;</operator><name>start_time</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>ts_off</name> <init>= <expr><call><name>av_rescale_q</name><argument_list>(<argument><expr><name>start_time</name> <operator>-</operator> <name><name>ifile</name><operator>-&gt;</operator><name>ts_offset</name></name></expr></argument>,

<argument><expr><name>AV_TIME_BASE_Q</name></expr></argument>, <argument><expr><name><name>in_ch</name><operator>-&gt;</operator><name>time_base</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>rt</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name><name>ofile</name><operator>-&gt;</operator><name>recording_time</name></name> <operator>==</operator> <name>INT64_MAX</name><operator>)</operator></expr> ?</condition><then> <expr><name>INT64_MAX</name></expr> </then><else>:

<expr><call><name>av_rescale_q</name><argument_list>(<argument><expr><name><name>ofile</name><operator>-&gt;</operator><name>recording_time</name></name></expr></argument>, <argument><expr><name>AV_TIME_BASE_Q</name></expr></argument>, <argument><expr><name><name>in_ch</name><operator>-&gt;</operator><name>time_base</name></name></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>in_ch</name><operator>-&gt;</operator><name>end</name></name> <operator>&lt;</operator> <name>ts_off</name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>rt</name> <operator>!=</operator> <name>INT64_MAX</name> <operator>&amp;&amp;</operator> <name><name>in_ch</name><operator>-&gt;</operator><name>start</name></name> <operator>&gt;</operator> <name>rt</name> <operator>+</operator> <name>ts_off</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>out_ch</name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>AVChapter</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>out_ch</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>out_ch</name><operator>-&gt;</operator><name>id</name></name> <operator>=</operator> <name><name>in_ch</name><operator>-&gt;</operator><name>id</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out_ch</name><operator>-&gt;</operator><name>time_base</name></name> <operator>=</operator> <name><name>in_ch</name><operator>-&gt;</operator><name>time_base</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out_ch</name><operator>-&gt;</operator><name>start</name></name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>in_ch</name><operator>-&gt;</operator><name>start</name></name> <operator>-</operator> <name>ts_off</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out_ch</name><operator>-&gt;</operator><name>end</name></name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>rt</name></expr></argument>, <argument><expr><name><name>in_ch</name><operator>-&gt;</operator><name>end</name></name> <operator>-</operator> <name>ts_off</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>copy_metadata</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_dict_copy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>out_ch</name><operator>-&gt;</operator><name>metadata</name></name></expr></argument>, <argument><expr><name><name>in_ch</name><operator>-&gt;</operator><name>metadata</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>os</name><operator>-&gt;</operator><name>chapters</name><index>[<expr><name><name>os</name><operator>-&gt;</operator><name>nb_chapters</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>out_ch</name></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>init_output_filter</name><parameter_list>(<parameter><decl><type><name>OutputFilter</name> <modifier>*</modifier></type><name>ofilter</name></decl></parameter>, <parameter><decl><type><name>OptionsContext</name> <modifier>*</modifier></type><name>o</name></decl></parameter>,

<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>oc</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>OutputStream</name> <modifier>*</modifier></type><name>ost</name></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>ofilter</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>AVMEDIA_TYPE_VIDEO</name></expr>:</case> <expr_stmt><expr><name>ost</name> <operator>=</operator> <call><name>new_video_stream</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><name>oc</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>AVMEDIA_TYPE_AUDIO</name></expr>:</case> <expr_stmt><expr><name>ost</name> <operator>=</operator> <call><name>new_audio_stream</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><name>oc</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_FATAL</name></expr></argument>, <argument><expr><literal type="string">"Only video and audio filters are supported "</literal>

<literal type="string">"currently.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>exit_program</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></switch>

<expr_stmt><expr><name><name>ost</name><operator>-&gt;</operator><name>source_index</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ost</name><operator>-&gt;</operator><name>filter</name></name> <operator>=</operator> <name>ofilter</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ofilter</name><operator>-&gt;</operator><name>ost</name></name> <operator>=</operator> <name>ost</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ofilter</name><operator>-&gt;</operator><name>format</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ost</name><operator>-&gt;</operator><name>stream_copy</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Streamcopy requested for output stream %d:%d, "</literal>

<literal type="string">"which is fed from a complex filtergraph. Filtering and streamcopy "</literal>

<literal type="string">"cannot be used together.\n"</literal></expr></argument>, <argument><expr><name><name>ost</name><operator>-&gt;</operator><name>file_index</name></name></expr></argument>, <argument><expr><name><name>ost</name><operator>-&gt;</operator><name>index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>exit_program</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ost</name><operator>-&gt;</operator><name>avfilter</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>ost</name><operator>-&gt;</operator><name>filters</name></name> <operator>||</operator> <name><name>ost</name><operator>-&gt;</operator><name>filters_script</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>opt</name> <init>= <expr><ternary><condition><expr><name><name>ost</name><operator>-&gt;</operator><name>filters</name></name></expr> ?</condition><then> <expr><literal type="string">"-vf/-af/-filter"</literal></expr> </then><else>: <expr><literal type="string">"-filter_script"</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"%s '%s' was specified through the %s option "</literal>

<literal type="string">"for output stream %d:%d, which is fed from a complex filtergraph.\n"</literal>

<literal type="string">"%s and -filter_complex cannot be used together for the same stream.\n"</literal></expr></argument>,

<argument><expr><ternary><condition><expr><name><name>ost</name><operator>-&gt;</operator><name>filters</name></name></expr> ?</condition><then> <expr><literal type="string">"Filtergraph"</literal></expr> </then><else>: <expr><literal type="string">"Filtergraph script"</literal></expr></else></ternary></expr></argument>,

<argument><expr><ternary><condition><expr><name><name>ost</name><operator>-&gt;</operator><name>filters</name></name></expr> ?</condition><then> <expr><name><name>ost</name><operator>-&gt;</operator><name>filters</name></name></expr> </then><else>: <expr><name><name>ost</name><operator>-&gt;</operator><name>filters_script</name></name></expr></else></ternary></expr></argument>,

<argument><expr><name>opt</name></expr></argument>, <argument><expr><name><name>ost</name><operator>-&gt;</operator><name>file_index</name></name></expr></argument>, <argument><expr><name><name>ost</name><operator>-&gt;</operator><name>index</name></name></expr></argument>, <argument><expr><name>opt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>exit_program</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>avfilter_inout_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ofilter</name><operator>-&gt;</operator><name>out_tmp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>init_complex_filters</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nb_filtergraphs</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>init_complex_filtergraph</name><argument_list>(<argument><expr><name><name>filtergraphs</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>open_output_file</name><parameter_list>(<parameter><decl><type><name>OptionsContext</name> <modifier>*</modifier></type><name>o</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>oc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>err</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>OutputFile</name> <modifier>*</modifier></type><name>of</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>OutputStream</name> <modifier>*</modifier></type><name>ost</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>InputStream</name> <modifier>*</modifier></type><name>ist</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVDictionary</name> <modifier>*</modifier></type><name>unused_opts</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVDictionaryEntry</name> <modifier>*</modifier></type><name>e</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>format_flags</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>o</name><operator>-&gt;</operator><name>stop_time</name></name> <operator>!=</operator> <name>INT64_MAX</name> <operator>&amp;&amp;</operator> <name><name>o</name><operator>-&gt;</operator><name>recording_time</name></name> <operator>!=</operator> <name>INT64_MAX</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>o</name><operator>-&gt;</operator><name>stop_time</name></name> <operator>=</operator> <name>INT64_MAX</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"-t and -to cannot be used together; using -t.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>o</name><operator>-&gt;</operator><name>stop_time</name></name> <operator>!=</operator> <name>INT64_MAX</name> <operator>&amp;&amp;</operator> <name><name>o</name><operator>-&gt;</operator><name>recording_time</name></name> <operator>==</operator> <name>INT64_MAX</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int64_t</name></type> <name>start_time</name> <init>= <expr><ternary><condition><expr><name><name>o</name><operator>-&gt;</operator><name>start_time</name></name> <operator>==</operator> <name>AV_NOPTS_VALUE</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name><name>o</name><operator>-&gt;</operator><name>start_time</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>o</name><operator>-&gt;</operator><name>stop_time</name></name> <operator>&lt;=</operator> <name>start_time</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"-to value smaller than -ss; aborting.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>exit_program</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>o</name><operator>-&gt;</operator><name>recording_time</name></name> <operator>=</operator> <name><name>o</name><operator>-&gt;</operator><name>stop_time</name></name> <operator>-</operator> <name>start_time</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>GROW_ARRAY</name><argument_list>(<argument><expr><name>output_files</name></expr></argument>, <argument><expr><name>nb_output_files</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>of</name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>of</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>of</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>exit_program</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>output_files</name><index>[<expr><name>nb_output_files</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>of</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>of</name><operator>-&gt;</operator><name>ost_index</name></name> <operator>=</operator> <name>nb_output_streams</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>of</name><operator>-&gt;</operator><name>recording_time</name></name> <operator>=</operator> <name><name>o</name><operator>-&gt;</operator><name>recording_time</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>of</name><operator>-&gt;</operator><name>start_time</name></name> <operator>=</operator> <name><name>o</name><operator>-&gt;</operator><name>start_time</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>of</name><operator>-&gt;</operator><name>limit_filesize</name></name> <operator>=</operator> <name><name>o</name><operator>-&gt;</operator><name>limit_filesize</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>of</name><operator>-&gt;</operator><name>shortest</name></name> <operator>=</operator> <name><name>o</name><operator>-&gt;</operator><name>shortest</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_dict_copy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>of</name><operator>-&gt;</operator><name>opts</name></name></expr></argument>, <argument><expr><name><name>o</name><operator>-&gt;</operator><name>g</name><operator>-&gt;</operator><name>format_opts</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><literal type="string">"-"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>filename</name> <operator>=</operator> <literal type="string">"pipe:"</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>avformat_alloc_output_context2</name><argument_list>(<argument><expr><operator>&amp;</operator><name>oc</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>o</name><operator>-&gt;</operator><name>format</name></name></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>oc</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>print_error</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>exit_program</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>of</name><operator>-&gt;</operator><name>ctx</name></name> <operator>=</operator> <name>oc</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>o</name><operator>-&gt;</operator><name>recording_time</name></name> <operator>!=</operator> <name>INT64_MAX</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>oc</name><operator>-&gt;</operator><name>duration</name></name> <operator>=</operator> <name><name>o</name><operator>-&gt;</operator><name>recording_time</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>oc</name><operator>-&gt;</operator><name>interrupt_callback</name></name> <operator>=</operator> <name>int_cb</name></expr>;</expr_stmt>

<expr_stmt><expr><name>e</name> <operator>=</operator> <call><name>av_dict_get</name><argument_list>(<argument><expr><name><name>o</name><operator>-&gt;</operator><name>g</name><operator>-&gt;</operator><name>format_opts</name></name></expr></argument>, <argument><expr><literal type="string">"fflags"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>e</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>AVOption</name> <modifier>*</modifier></type><name>o</name> <init>= <expr><call><name>av_opt_find</name><argument_list>(<argument><expr><name>oc</name></expr></argument>, <argument><expr><literal type="string">"fflags"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_opt_eval_flags</name><argument_list>(<argument><expr><name>oc</name></expr></argument>, <argument><expr><name>o</name></expr></argument>, <argument><expr><name><name>e</name><operator>-&gt;</operator><name>value</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>format_flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>o</name><operator>-&gt;</operator><name>bitexact</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>format_flags</name> <operator>|=</operator> <name>AVFMT_FLAG_BITEXACT</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>oc</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>AVFMT_FLAG_BITEXACT</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nb_filtergraphs</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>FilterGraph</name> <modifier>*</modifier></type><name>fg</name> <init>= <expr><name><name>filtergraphs</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>fg</name><operator>-&gt;</operator><name>nb_outputs</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>OutputFilter</name> <modifier>*</modifier></type><name>ofilter</name> <init>= <expr><name><name>fg</name><operator>-&gt;</operator><name>outputs</name><index>[<expr><name>j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ofilter</name><operator>-&gt;</operator><name>out_tmp</name></name> <operator>||</operator> <name><name>ofilter</name><operator>-&gt;</operator><name>out_tmp</name><operator>-&gt;</operator><name>name</name></name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<switch>switch <condition>(<expr><name><name>ofilter</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>AVMEDIA_TYPE_VIDEO</name></expr>:</case> <expr_stmt><expr><name><name>o</name><operator>-&gt;</operator><name>video_disable</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>AVMEDIA_TYPE_AUDIO</name></expr>:</case> <expr_stmt><expr><name><name>o</name><operator>-&gt;</operator><name>audio_disable</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>AVMEDIA_TYPE_SUBTITLE</name></expr>:</case> <expr_stmt><expr><name><name>o</name><operator>-&gt;</operator><name>subtitle_disable</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> <break>break;</break>

</block_content>}</block></switch>

<expr_stmt><expr><call><name>init_output_filter</name><argument_list>(<argument><expr><name>ofilter</name></expr></argument>, <argument><expr><name>o</name></expr></argument>, <argument><expr><name>oc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>o</name><operator>-&gt;</operator><name>nb_stream_maps</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>subtitle_codec_name</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>o</name><operator>-&gt;</operator><name>video_disable</name></name> <operator>&amp;&amp;</operator> <call><name>av_guess_codec</name><argument_list>(<argument><expr><name><name>oc</name><operator>-&gt;</operator><name>oformat</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>filename</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AVMEDIA_TYPE_VIDEO</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>AV_CODEC_ID_NONE</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>area</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>idx</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>qcr</name> <init>= <expr><call><name>avformat_query_codec</name><argument_list>(<argument><expr><name><name>oc</name><operator>-&gt;</operator><name>oformat</name></name></expr></argument>, <argument><expr><name><name>oc</name><operator>-&gt;</operator><name>oformat</name><operator>-&gt;</operator><name>video_codec</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nb_input_streams</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>new_area</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ist</name> <operator>=</operator> <name><name>input_streams</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>new_area</name> <operator>=</operator> <name><name>ist</name><operator>-&gt;</operator><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>width</name></name> <operator>*</operator> <name><name>ist</name><operator>-&gt;</operator><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>height</name></name> <operator>+</operator> <literal type="number">100000000</literal><operator>*</operator><operator>!</operator><operator>!</operator><name><name>ist</name><operator>-&gt;</operator><name>st</name><operator>-&gt;</operator><name>codec_info_nb_frames</name></name>

<operator>+</operator> <literal type="number">5000000</literal><operator>*</operator><operator>!</operator><operator>!</operator><operator>(</operator><name><name>ist</name><operator>-&gt;</operator><name>st</name><operator>-&gt;</operator><name>disposition</name></name> <operator>&amp;</operator> <name>AV_DISPOSITION_DEFAULT</name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ist</name><operator>-&gt;</operator><name>user_set_discard</name></name> <operator>==</operator> <name>AVDISCARD_ALL</name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name>qcr</name><operator>!=</operator><call><name>MKTAG</name><argument_list>(<argument><expr><literal type="char">'A'</literal></expr></argument>, <argument><expr><literal type="char">'P'</literal></expr></argument>, <argument><expr><literal type="char">'I'</literal></expr></argument>, <argument><expr><literal type="char">'C'</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>ist</name><operator>-&gt;</operator><name>st</name><operator>-&gt;</operator><name>disposition</name></name> <operator>&amp;</operator> <name>AV_DISPOSITION_ATTACHED_PIC</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>new_area</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ist</name><operator>-&gt;</operator><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_type</name></name> <operator>==</operator> <name>AVMEDIA_TYPE_VIDEO</name> <operator>&amp;&amp;</operator>

<name>new_area</name> <operator>&gt;</operator> <name>area</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name>qcr</name><operator>==</operator><call><name>MKTAG</name><argument_list>(<argument><expr><literal type="char">'A'</literal></expr></argument>, <argument><expr><literal type="char">'P'</literal></expr></argument>, <argument><expr><literal type="char">'I'</literal></expr></argument>, <argument><expr><literal type="char">'C'</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>ist</name><operator>-&gt;</operator><name>st</name><operator>-&gt;</operator><name>disposition</name></name> <operator>&amp;</operator> <name>AV_DISPOSITION_ATTACHED_PIC</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name>area</name> <operator>=</operator> <name>new_area</name></expr>;</expr_stmt>

<expr_stmt><expr><name>idx</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>new_video_stream</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><name>oc</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>o</name><operator>-&gt;</operator><name>audio_disable</name></name> <operator>&amp;&amp;</operator> <call><name>av_guess_codec</name><argument_list>(<argument><expr><name><name>oc</name><operator>-&gt;</operator><name>oformat</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>filename</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AVMEDIA_TYPE_AUDIO</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>AV_CODEC_ID_NONE</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>best_score</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>idx</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nb_input_streams</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>score</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ist</name> <operator>=</operator> <name><name>input_streams</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>score</name> <operator>=</operator> <name><name>ist</name><operator>-&gt;</operator><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>channels</name></name> <operator>+</operator> <literal type="number">100000000</literal><operator>*</operator><operator>!</operator><operator>!</operator><name><name>ist</name><operator>-&gt;</operator><name>st</name><operator>-&gt;</operator><name>codec_info_nb_frames</name></name>

<operator>+</operator> <literal type="number">5000000</literal><operator>*</operator><operator>!</operator><operator>!</operator><operator>(</operator><name><name>ist</name><operator>-&gt;</operator><name>st</name><operator>-&gt;</operator><name>disposition</name></name> <operator>&amp;</operator> <name>AV_DISPOSITION_DEFAULT</name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ist</name><operator>-&gt;</operator><name>user_set_discard</name></name> <operator>==</operator> <name>AVDISCARD_ALL</name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ist</name><operator>-&gt;</operator><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_type</name></name> <operator>==</operator> <name>AVMEDIA_TYPE_AUDIO</name> <operator>&amp;&amp;</operator>

<name>score</name> <operator>&gt;</operator> <name>best_score</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>best_score</name> <operator>=</operator> <name>score</name></expr>;</expr_stmt>

<expr_stmt><expr><name>idx</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>new_audio_stream</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><name>oc</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>MATCH_PER_TYPE_OPT</name><argument_list>(<argument><expr><name>codec_names</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>subtitle_codec_name</name></expr></argument>, <argument><expr><name>oc</name></expr></argument>, <argument><expr><literal type="string">"s"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>o</name><operator>-&gt;</operator><name>subtitle_disable</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>avcodec_find_encoder</name><argument_list>(<argument><expr><name><name>oc</name><operator>-&gt;</operator><name>oformat</name><operator>-&gt;</operator><name>subtitle_codec</name></name></expr></argument>)</argument_list></call> <operator>||</operator> <name>subtitle_codec_name</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nb_input_streams</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name><name>input_streams</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_type</name></name> <operator>==</operator> <name>AVMEDIA_TYPE_SUBTITLE</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>AVCodecDescriptor</name> <specifier>const</specifier> <modifier>*</modifier></type><name>input_descriptor</name> <init>=

<expr><call><name>avcodec_descriptor_get</name><argument_list>(<argument><expr><name><name>input_streams</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_id</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVCodecDescriptor</name> <specifier>const</specifier> <modifier>*</modifier></type><name>output_descriptor</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVCodec</name> <specifier>const</specifier> <modifier>*</modifier></type><name>output_codec</name> <init>=

<expr><call><name>avcodec_find_encoder</name><argument_list>(<argument><expr><name><name>oc</name><operator>-&gt;</operator><name>oformat</name><operator>-&gt;</operator><name>subtitle_codec</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>input_props</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>output_props</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>input_streams</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>user_set_discard</name> <operator>==</operator> <name>AVDISCARD_ALL</name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>output_codec</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>output_descriptor</name> <operator>=</operator> <call><name>avcodec_descriptor_get</name><argument_list>(<argument><expr><name><name>output_codec</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>input_descriptor</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>input_props</name> <operator>=</operator> <name><name>input_descriptor</name><operator>-&gt;</operator><name>props</name></name> <operator>&amp;</operator> <operator>(</operator><name>AV_CODEC_PROP_TEXT_SUB</name> <operator>|</operator> <name>AV_CODEC_PROP_BITMAP_SUB</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>output_descriptor</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>output_props</name> <operator>=</operator> <name><name>output_descriptor</name><operator>-&gt;</operator><name>props</name></name> <operator>&amp;</operator> <operator>(</operator><name>AV_CODEC_PROP_TEXT_SUB</name> <operator>|</operator> <name>AV_CODEC_PROP_BITMAP_SUB</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>subtitle_codec_name</name> <operator>||</operator>

<name>input_props</name> <operator>&amp;</operator> <name>output_props</name> <operator>||</operator>

<name>input_descriptor</name> <operator>&amp;&amp;</operator> <name>output_descriptor</name> <operator>&amp;&amp;</operator>

<operator>(</operator><operator>!</operator><name><name>input_descriptor</name><operator>-&gt;</operator><name>props</name></name> <operator>||</operator>

<operator>!</operator><name><name>output_descriptor</name><operator>-&gt;</operator><name>props</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>new_subtitle_stream</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><name>oc</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt></block_content></block></for>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>o</name><operator>-&gt;</operator><name>data_disable</name></name></expr> )</condition> <block>{<block_content>

<decl_stmt><decl><type><name><name>enum</name> <name>AVCodecID</name></name></type> <name>codec_id</name> <init>= <expr><call><name>av_guess_codec</name><argument_list>(<argument><expr><name><name>oc</name><operator>-&gt;</operator><name>oformat</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>filename</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AVMEDIA_TYPE_DATA</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>codec_id</name> <operator>!=</operator> <name>AV_CODEC_ID_NONE</name> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;</operator> <name>nb_input_streams</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>input_streams</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>user_set_discard</name> <operator>==</operator> <name>AVDISCARD_ALL</name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>input_streams</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_type</name></name> <operator>==</operator> <name>AVMEDIA_TYPE_DATA</name>

<operator>&amp;&amp;</operator> <name><name>input_streams</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>codec_id</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>new_data_stream</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><name>oc</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>o</name><operator>-&gt;</operator><name>nb_stream_maps</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>StreamMap</name> <modifier>*</modifier></type><name>map</name> <init>= <expr><operator>&amp;</operator><name><name>o</name><operator>-&gt;</operator><name>stream_maps</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>map</name><operator>-&gt;</operator><name>disabled</name></name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>map</name><operator>-&gt;</operator><name>linklabel</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>FilterGraph</name> <modifier>*</modifier></type><name>fg</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>OutputFilter</name> <modifier>*</modifier></type><name>ofilter</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>, <decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>nb_filtergraphs</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>fg</name> <operator>=</operator> <name><name>filtergraphs</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name><name>fg</name><operator>-&gt;</operator><name>nb_outputs</name></name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>AVFilterInOut</name> <modifier>*</modifier></type><name>out</name> <init>= <expr><name><name>fg</name><operator>-&gt;</operator><name>outputs</name><index>[<expr><name>k</name></expr>]</index></name><operator>-&gt;</operator><name>out_tmp</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>out</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>out</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>map</name><operator>-&gt;</operator><name>linklabel</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ofilter</name> <operator>=</operator> <name><name>fg</name><operator>-&gt;</operator><name>outputs</name><index>[<expr><name>k</name></expr>]</index></name></expr>;</expr_stmt>

<goto>goto <name>loop_end</name>;</goto>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<label><name>loop_end</name>:</label>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ofilter</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_FATAL</name></expr></argument>, <argument><expr><literal type="string">"Output with label '%s' does not exist "</literal>

<literal type="string">"in any defined filter graph, or was already used elsewhere.\n"</literal></expr></argument>, <argument><expr><name><name>map</name><operator>-&gt;</operator><name>linklabel</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>exit_program</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>init_output_filter</name><argument_list>(<argument><expr><name>ofilter</name></expr></argument>, <argument><expr><name>o</name></expr></argument>, <argument><expr><name>oc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>src_idx</name> <init>= <expr><name><name>input_files</name><index>[<expr><name><name>map</name><operator>-&gt;</operator><name>file_index</name></name></expr>]</index></name><operator>-&gt;</operator><name>ist_index</name> <operator>+</operator> <name><name>map</name><operator>-&gt;</operator><name>stream_index</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>ist</name> <operator>=</operator> <name><name>input_streams</name><index>[<expr><name><name>input_files</name><index>[<expr><name><name>map</name><operator>-&gt;</operator><name>file_index</name></name></expr>]</index></name><operator>-&gt;</operator><name>ist_index</name> <operator>+</operator> <name><name>map</name><operator>-&gt;</operator><name>stream_index</name></name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ist</name><operator>-&gt;</operator><name>user_set_discard</name></name> <operator>==</operator> <name>AVDISCARD_ALL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_FATAL</name></expr></argument>, <argument><expr><literal type="string">"Stream #%d:%d is disabled and cannot be mapped.\n"</literal></expr></argument>,

<argument><expr><name><name>map</name><operator>-&gt;</operator><name>file_index</name></name></expr></argument>, <argument><expr><name><name>map</name><operator>-&gt;</operator><name>stream_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>exit_program</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>o</name><operator>-&gt;</operator><name>subtitle_disable</name></name> <operator>&amp;&amp;</operator> <name><name>ist</name><operator>-&gt;</operator><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_type</name></name> <operator>==</operator> <name>AVMEDIA_TYPE_SUBTITLE</name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>o</name><operator>-&gt;</operator> <name>audio_disable</name></name> <operator>&amp;&amp;</operator> <name><name>ist</name><operator>-&gt;</operator><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_type</name></name> <operator>==</operator> <name>AVMEDIA_TYPE_AUDIO</name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>o</name><operator>-&gt;</operator> <name>video_disable</name></name> <operator>&amp;&amp;</operator> <name><name>ist</name><operator>-&gt;</operator><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_type</name></name> <operator>==</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>o</name><operator>-&gt;</operator> <name>data_disable</name></name> <operator>&amp;&amp;</operator> <name><name>ist</name><operator>-&gt;</operator><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_type</name></name> <operator>==</operator> <name>AVMEDIA_TYPE_DATA</name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ost</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>ist</name><operator>-&gt;</operator><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_type</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>AVMEDIA_TYPE_VIDEO</name></expr>:</case> <expr_stmt><expr><name>ost</name> <operator>=</operator> <call><name>new_video_stream</name> <argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><name>oc</name></expr></argument>, <argument><expr><name>src_idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>AVMEDIA_TYPE_AUDIO</name></expr>:</case> <expr_stmt><expr><name>ost</name> <operator>=</operator> <call><name>new_audio_stream</name> <argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><name>oc</name></expr></argument>, <argument><expr><name>src_idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>AVMEDIA_TYPE_SUBTITLE</name></expr>:</case> <expr_stmt><expr><name>ost</name> <operator>=</operator> <call><name>new_subtitle_stream</name> <argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><name>oc</name></expr></argument>, <argument><expr><name>src_idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>AVMEDIA_TYPE_DATA</name></expr>:</case> <expr_stmt><expr><name>ost</name> <operator>=</operator> <call><name>new_data_stream</name> <argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><name>oc</name></expr></argument>, <argument><expr><name>src_idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>AVMEDIA_TYPE_ATTACHMENT</name></expr>:</case> <expr_stmt><expr><name>ost</name> <operator>=</operator> <call><name>new_attachment_stream</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><name>oc</name></expr></argument>, <argument><expr><name>src_idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>AVMEDIA_TYPE_UNKNOWN</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name>copy_unknown_streams</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ost</name> <operator>=</operator> <call><name>new_unknown_stream</name> <argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><name>oc</name></expr></argument>, <argument><expr><name>src_idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<default>default:</default>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><ternary><condition><expr><name>ignore_unknown_streams</name></expr> ?</condition><then> <expr><name>AV_LOG_WARNING</name></expr> </then><else>: <expr><name>AV_LOG_FATAL</name></expr></else></ternary></expr></argument>,

<argument><expr><literal type="string">"Cannot map stream #%d:%d - unsupported type.\n"</literal></expr></argument>,

<argument><expr><name><name>map</name><operator>-&gt;</operator><name>file_index</name></name></expr></argument>, <argument><expr><name><name>map</name><operator>-&gt;</operator><name>stream_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ignore_unknown_streams</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_FATAL</name></expr></argument>,

<argument><expr><literal type="string">"If you want unsupported types ignored instead "</literal>

<literal type="string">"of failing, please use the -ignore_unknown option\n"</literal>

<literal type="string">"If you want them copied, please use -copy_unknown\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>exit_program</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name>ost</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ost</name><operator>-&gt;</operator><name>sync_ist</name></name> <operator>=</operator> <name><name>input_streams</name><index>[ <expr><name><name>input_files</name><index>[<expr><name><name>map</name><operator>-&gt;</operator><name>sync_file_index</name></name></expr>]</index></name><operator>-&gt;</operator><name>ist_index</name>

<operator>+</operator> <name><name>map</name><operator>-&gt;</operator><name>sync_stream_index</name></name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

</block_content>}</block></else></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>o</name><operator>-&gt;</operator><name>nb_attachments</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>attachment</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>len</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>avio_open2</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>, <argument><expr><name><name>o</name><operator>-&gt;</operator><name>attachments</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>AVIO_FLAG_READ</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>int_cb</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_FATAL</name></expr></argument>, <argument><expr><literal type="string">"Could not open attachment file %s.\n"</literal></expr></argument>,

<argument><expr><name><name>o</name><operator>-&gt;</operator><name>attachments</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>exit_program</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>len</name> <operator>=</operator> <call><name>avio_size</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_FATAL</name></expr></argument>, <argument><expr><literal type="string">"Could not get size of the attachment %s.\n"</literal></expr></argument>,

<argument><expr><name><name>o</name><operator>-&gt;</operator><name>attachments</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>exit_program</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>attachment</name> <operator>=</operator> <call><name>av_malloc</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_FATAL</name></expr></argument>, <argument><expr><literal type="string">"Attachment %s too large to fit into memory.\n"</literal></expr></argument>,

<argument><expr><name><name>o</name><operator>-&gt;</operator><name>attachments</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>exit_program</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>avio_read</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>attachment</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ost</name> <operator>=</operator> <call><name>new_attachment_stream</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><name>oc</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ost</name><operator>-&gt;</operator><name>stream_copy</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ost</name><operator>-&gt;</operator><name>attachment_filename</name></name> <operator>=</operator> <name><name>o</name><operator>-&gt;</operator><name>attachments</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ost</name><operator>-&gt;</operator><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>extradata</name></name> <operator>=</operator> <name>attachment</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ost</name><operator>-&gt;</operator><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>extradata_size</name></name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>strrchr</name><argument_list>(<argument><expr><name><name>o</name><operator>-&gt;</operator><name>attachments</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_dict_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ost</name><operator>-&gt;</operator><name>st</name><operator>-&gt;</operator><name>metadata</name></name></expr></argument>, <argument><expr><literal type="string">"filename"</literal></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name>p</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name><operator>)</operator></expr> ?</condition><then> <expr><name>p</name> <operator>+</operator> <literal type="number">1</literal></expr> </then><else>: <expr><name><name>o</name><operator>-&gt;</operator><name>attachments</name><index>[<expr><name>i</name></expr>]</index></name></expr></else></ternary></expr></argument>, <argument><expr><name>AV_DICT_DONT_OVERWRITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_closep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>FF_API_LAVF_AVCTX</name></expr></cpp:if>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>nb_output_streams</name> <operator>-</operator> <name><name>oc</name><operator>-&gt;</operator><name>nb_streams</name></name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nb_output_streams</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content> 

<decl_stmt><decl><type><name>AVDictionaryEntry</name> <modifier>*</modifier></type><name>e</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ost</name> <operator>=</operator> <name><name>output_streams</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>ost</name><operator>-&gt;</operator><name>stream_copy</name></name> <operator>||</operator> <name><name>ost</name><operator>-&gt;</operator><name>attachment_filename</name></name><operator>)</operator>

<operator>&amp;&amp;</operator> <operator>(</operator><name>e</name> <operator>=</operator> <call><name>av_dict_get</name><argument_list>(<argument><expr><name><name>o</name><operator>-&gt;</operator><name>g</name><operator>-&gt;</operator><name>codec_opts</name></name></expr></argument>, <argument><expr><literal type="string">"flags"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_DICT_IGNORE_SUFFIX</name></expr></argument>)</argument_list></call><operator>)</operator>

<operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><name><name>e</name><operator>-&gt;</operator><name>key</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>||</operator> <call><name>check_stream_specifier</name><argument_list>(<argument><expr><name>oc</name></expr></argument>, <argument><expr><name><name>ost</name><operator>-&gt;</operator><name>st</name></name></expr></argument>, <argument><expr><name><name>e</name><operator>-&gt;</operator><name>key</name></name><operator>+</operator><literal type="number">6</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><call><name>av_opt_set</name><argument_list>(<argument><expr><name><name>ost</name><operator>-&gt;</operator><name>st</name><operator>-&gt;</operator><name>codec</name></name></expr></argument>, <argument><expr><literal type="string">"flags"</literal></expr></argument>, <argument><expr><name><name>e</name><operator>-&gt;</operator><name>value</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>exit_program</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>oc</name><operator>-&gt;</operator><name>nb_streams</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>oc</name><operator>-&gt;</operator><name>oformat</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AVFMT_NOSTREAMS</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_dump_format</name><argument_list>(<argument><expr><name>oc</name></expr></argument>, <argument><expr><name>nb_output_files</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>oc</name><operator>-&gt;</operator><name>url</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Output file #%d does not contain any stream\n"</literal></expr></argument>, <argument><expr><name>nb_output_files</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>exit_program</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>unused_opts</name> <operator>=</operator> <call><name>strip_specifiers</name><argument_list>(<argument><expr><name><name>o</name><operator>-&gt;</operator><name>g</name><operator>-&gt;</operator><name>codec_opts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name><name>of</name><operator>-&gt;</operator><name>ost_index</name></name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nb_output_streams</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>e</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>(</operator><name>e</name> <operator>=</operator> <call><name>av_dict_get</name><argument_list>(<argument><expr><name><name>output_streams</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>encoder_opts</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><name>e</name></expr></argument>,

<argument><expr><name>AV_DICT_IGNORE_SUFFIX</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_dict_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name>unused_opts</name></expr></argument>, <argument><expr><name><name>e</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

</block_content>}</block></for>

<expr_stmt><expr><name>e</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>(</operator><name>e</name> <operator>=</operator> <call><name>av_dict_get</name><argument_list>(<argument><expr><name>unused_opts</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><name>e</name></expr></argument>, <argument><expr><name>AV_DICT_IGNORE_SUFFIX</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>AVClass</name> <modifier>*</modifier></type><name>class</name> <init>= <expr><call><name>avcodec_get_class</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>AVOption</name> <modifier>*</modifier></type><name>option</name> <init>= <expr><call><name>av_opt_find</name><argument_list>(<argument><expr><operator>&amp;</operator><name>class</name></expr></argument>, <argument><expr><name><name>e</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><name>AV_OPT_SEARCH_CHILDREN</name> <operator>|</operator> <name>AV_OPT_SEARCH_FAKE_OBJ</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>AVClass</name> <modifier>*</modifier></type><name>fclass</name> <init>= <expr><call><name>avformat_get_class</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>AVOption</name> <modifier>*</modifier></type><name>foption</name> <init>= <expr><call><name>av_opt_find</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fclass</name></expr></argument>, <argument><expr><name><name>e</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><name>AV_OPT_SEARCH_CHILDREN</name> <operator>|</operator> <name>AV_OPT_SEARCH_FAKE_OBJ</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>option</name> <operator>||</operator> <name>foption</name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>option</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_OPT_FLAG_ENCODING_PARAM</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Codec AVOption %s (%s) specified for "</literal>

<literal type="string">"output file #%d (%s) is not an encoding option.\n"</literal></expr></argument>, <argument><expr><name><name>e</name><operator>-&gt;</operator><name>key</name></name></expr></argument>,

<argument><expr><ternary><condition><expr><name><name>option</name><operator>-&gt;</operator><name>help</name></name></expr> ?</condition><then> <expr><name><name>option</name><operator>-&gt;</operator><name>help</name></name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>, <argument><expr><name>nb_output_files</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>,

<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>exit_program</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>e</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><literal type="string">"gop_timecode"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Codec AVOption %s (%s) specified for "</literal>

<literal type="string">"output file #%d (%s) has not been used for any stream. The most "</literal>

<literal type="string">"likely reason is either wrong type (e.g. a video option with "</literal>

<literal type="string">"no video streams) or that it is a private option of some encoder "</literal>

<literal type="string">"which was not actually used for any stream.\n"</literal></expr></argument>, <argument><expr><name><name>e</name><operator>-&gt;</operator><name>key</name></name></expr></argument>,

<argument><expr><ternary><condition><expr><name><name>option</name><operator>-&gt;</operator><name>help</name></name></expr> ?</condition><then> <expr><name><name>option</name><operator>-&gt;</operator><name>help</name></name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>, <argument><expr><name>nb_output_files</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>av_dict_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>unused_opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name><name>of</name><operator>-&gt;</operator><name>ost_index</name></name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nb_output_streams</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>OutputStream</name> <modifier>*</modifier></type><name>ost</name> <init>= <expr><name><name>output_streams</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ost</name><operator>-&gt;</operator><name>encoding_needed</name></name> <operator>&amp;&amp;</operator> <name><name>ost</name><operator>-&gt;</operator><name>source_index</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>InputStream</name> <modifier>*</modifier></type><name>ist</name> <init>= <expr><name><name>input_streams</name><index>[<expr><name><name>ost</name><operator>-&gt;</operator><name>source_index</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>ist</name><operator>-&gt;</operator><name>decoding_needed</name></name> <operator>|=</operator> <name>DECODING_FOR_OST</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ost</name><operator>-&gt;</operator><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_type</name></name> <operator>==</operator> <name>AVMEDIA_TYPE_VIDEO</name> <operator>||</operator>

<name><name>ost</name><operator>-&gt;</operator><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_type</name></name> <operator>==</operator> <name>AVMEDIA_TYPE_AUDIO</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>init_simple_filtergraph</name><argument_list>(<argument><expr><name>ist</name></expr></argument>, <argument><expr><name>ost</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"Error initializing a simple filtergraph between streams "</literal>

<literal type="string">"%d:%d-&gt;%d:%d\n"</literal></expr></argument>, <argument><expr><name><name>ist</name><operator>-&gt;</operator><name>file_index</name></name></expr></argument>, <argument><expr><name><name>ost</name><operator>-&gt;</operator><name>source_index</name></name></expr></argument>,

<argument><expr><name>nb_output_files</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>ost</name><operator>-&gt;</operator><name>st</name><operator>-&gt;</operator><name>index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>exit_program</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ost</name><operator>-&gt;</operator><name>filter</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>OutputFilter</name> <modifier>*</modifier></type><name>f</name> <init>= <expr><name><name>ost</name><operator>-&gt;</operator><name>filter</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>count</name></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>ost</name><operator>-&gt;</operator><name>enc_ctx</name><operator>-&gt;</operator><name>codec_type</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>AVMEDIA_TYPE_VIDEO</name></expr>:</case>

<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>frame_rate</name></name> <operator>=</operator> <name><name>ost</name><operator>-&gt;</operator><name>frame_rate</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator> <name><name>ost</name><operator>-&gt;</operator><name>enc_ctx</name><operator>-&gt;</operator><name>width</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <name><name>ost</name><operator>-&gt;</operator><name>enc_ctx</name><operator>-&gt;</operator><name>height</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ost</name><operator>-&gt;</operator><name>enc_ctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>!=</operator> <name>AV_PIX_FMT_NONE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>format</name></name> <operator>=</operator> <name><name>ost</name><operator>-&gt;</operator><name>enc_ctx</name><operator>-&gt;</operator><name>pix_fmt</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>ost</name><operator>-&gt;</operator><name>enc</name><operator>-&gt;</operator><name>pix_fmts</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>count</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<while>while <condition>(<expr><name><name>ost</name><operator>-&gt;</operator><name>enc</name><operator>-&gt;</operator><name>pix_fmts</name><index>[<expr><name>count</name></expr>]</index></name> <operator>!=</operator> <name>AV_PIX_FMT_NONE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>count</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>formats</name></name> <operator>=</operator> <call><name>av_mallocz_array</name><argument_list>(<argument><expr><name>count</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>f</name><operator>-&gt;</operator><name>formats</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>f</name><operator>-&gt;</operator><name>formats</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>exit_program</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>formats</name></name></expr></argument>, <argument><expr><name><name>ost</name><operator>-&gt;</operator><name>enc</name><operator>-&gt;</operator><name>pix_fmts</name></name></expr></argument>, <argument><expr><operator>(</operator><name>count</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>f</name><operator>-&gt;</operator><name>formats</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><name>AVMEDIA_TYPE_AUDIO</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>ost</name><operator>-&gt;</operator><name>enc_ctx</name><operator>-&gt;</operator><name>sample_fmt</name></name> <operator>!=</operator> <name>AV_SAMPLE_FMT_NONE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>format</name></name> <operator>=</operator> <name><name>ost</name><operator>-&gt;</operator><name>enc_ctx</name><operator>-&gt;</operator><name>sample_fmt</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>ost</name><operator>-&gt;</operator><name>enc</name><operator>-&gt;</operator><name>sample_fmts</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>count</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<while>while <condition>(<expr><name><name>ost</name><operator>-&gt;</operator><name>enc</name><operator>-&gt;</operator><name>sample_fmts</name><index>[<expr><name>count</name></expr>]</index></name> <operator>!=</operator> <name>AV_SAMPLE_FMT_NONE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>count</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>formats</name></name> <operator>=</operator> <call><name>av_mallocz_array</name><argument_list>(<argument><expr><name>count</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>f</name><operator>-&gt;</operator><name>formats</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>f</name><operator>-&gt;</operator><name>formats</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>exit_program</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>formats</name></name></expr></argument>, <argument><expr><name><name>ost</name><operator>-&gt;</operator><name>enc</name><operator>-&gt;</operator><name>sample_fmts</name></name></expr></argument>, <argument><expr><operator>(</operator><name>count</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>f</name><operator>-&gt;</operator><name>formats</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ost</name><operator>-&gt;</operator><name>enc_ctx</name><operator>-&gt;</operator><name>sample_rate</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>sample_rate</name></name> <operator>=</operator> <name><name>ost</name><operator>-&gt;</operator><name>enc_ctx</name><operator>-&gt;</operator><name>sample_rate</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>ost</name><operator>-&gt;</operator><name>enc</name><operator>-&gt;</operator><name>supported_samplerates</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>count</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<while>while <condition>(<expr><name><name>ost</name><operator>-&gt;</operator><name>enc</name><operator>-&gt;</operator><name>supported_samplerates</name><index>[<expr><name>count</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>count</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>sample_rates</name></name> <operator>=</operator> <call><name>av_mallocz_array</name><argument_list>(<argument><expr><name>count</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>f</name><operator>-&gt;</operator><name>sample_rates</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>f</name><operator>-&gt;</operator><name>sample_rates</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>exit_program</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>sample_rates</name></name></expr></argument>, <argument><expr><name><name>ost</name><operator>-&gt;</operator><name>enc</name><operator>-&gt;</operator><name>supported_samplerates</name></name></expr></argument>,

<argument><expr><operator>(</operator><name>count</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>f</name><operator>-&gt;</operator><name>sample_rates</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ost</name><operator>-&gt;</operator><name>enc_ctx</name><operator>-&gt;</operator><name>channels</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>channel_layout</name></name> <operator>=</operator> <call><name>av_get_default_channel_layout</name><argument_list>(<argument><expr><name><name>ost</name><operator>-&gt;</operator><name>enc_ctx</name><operator>-&gt;</operator><name>channels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>ost</name><operator>-&gt;</operator><name>enc</name><operator>-&gt;</operator><name>channel_layouts</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>count</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<while>while <condition>(<expr><name><name>ost</name><operator>-&gt;</operator><name>enc</name><operator>-&gt;</operator><name>channel_layouts</name><index>[<expr><name>count</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>count</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>channel_layouts</name></name> <operator>=</operator> <call><name>av_mallocz_array</name><argument_list>(<argument><expr><name>count</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>f</name><operator>-&gt;</operator><name>channel_layouts</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>f</name><operator>-&gt;</operator><name>channel_layouts</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>exit_program</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>channel_layouts</name></name></expr></argument>, <argument><expr><name><name>ost</name><operator>-&gt;</operator><name>enc</name><operator>-&gt;</operator><name>channel_layouts</name></name></expr></argument>,

<argument><expr><operator>(</operator><name>count</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>f</name><operator>-&gt;</operator><name>channel_layouts</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>oc</name><operator>-&gt;</operator><name>oformat</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AVFMT_NEEDNUMBER</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>av_filename_number_test</name><argument_list>(<argument><expr><name><name>oc</name><operator>-&gt;</operator><name>url</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>print_error</name><argument_list>(<argument><expr><name><name>oc</name><operator>-&gt;</operator><name>url</name></name></expr></argument>, <argument><expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>exit_program</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>oc</name><operator>-&gt;</operator><name>oformat</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AVFMT_NOSTREAMS</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><name>input_stream_potentially_available</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"No input streams but output needs an input stream\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>exit_program</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>oc</name><operator>-&gt;</operator><name>oformat</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AVFMT_NOFILE</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>assert_file_overwrite</name><argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>avio_open2</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>oc</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><name>filename</name></expr></argument>, <argument><expr><name>AVIO_FLAG_WRITE</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>oc</name><operator>-&gt;</operator><name>interrupt_callback</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>of</name><operator>-&gt;</operator><name>opts</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>print_error</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>exit_program</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>oc</name><operator>-&gt;</operator><name>oformat</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="string">"image2"</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>av_filename_number_test</name><argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>assert_file_overwrite</name><argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>o</name><operator>-&gt;</operator><name>mux_preload</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_dict_set_int</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>of</name><operator>-&gt;</operator><name>opts</name></name></expr></argument>, <argument><expr><literal type="string">"preload"</literal></expr></argument>, <argument><expr><name><name>o</name><operator>-&gt;</operator><name>mux_preload</name></name><operator>*</operator><name>AV_TIME_BASE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>oc</name><operator>-&gt;</operator><name>max_delay</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name><name>o</name><operator>-&gt;</operator><name>mux_max_delay</name></name> <operator>*</operator> <name>AV_TIME_BASE</name><operator>)</operator></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>o</name><operator>-&gt;</operator><name>nb_metadata_map</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>in_file_index</name> <init>= <expr><call><name>strtol</name><argument_list>(<argument><expr><name><name>o</name><operator>-&gt;</operator><name>metadata_map</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>u</name><operator>.</operator><name>str</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>in_file_index</name> <operator>&gt;=</operator> <name>nb_input_files</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_FATAL</name></expr></argument>, <argument><expr><literal type="string">"Invalid input file index %d while processing metadata maps\n"</literal></expr></argument>, <argument><expr><name>in_file_index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>exit_program</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>copy_metadata</name><argument_list>(<argument><expr><name><name>o</name><operator>-&gt;</operator><name>metadata_map</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>specifier</name></expr></argument>, <argument><expr><ternary><condition><expr><operator>*</operator><name>p</name></expr> ?</condition><then> <expr><name>p</name> <operator>+</operator> <literal type="number">1</literal></expr> </then><else>: <expr><name>p</name></expr></else></ternary></expr></argument>, <argument><expr><name>oc</name></expr></argument>,

<argument><expr><ternary><condition><expr><name>in_file_index</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr> ?</condition><then>

<expr><name><name>input_files</name><index>[<expr><name>in_file_index</name></expr>]</index></name><operator>-&gt;</operator><name>ctx</name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></argument>, <argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>o</name><operator>-&gt;</operator><name>chapters_input_file</name></name> <operator>&gt;=</operator> <name>nb_input_files</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>o</name><operator>-&gt;</operator><name>chapters_input_file</name></name> <operator>==</operator> <name>INT_MAX</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>o</name><operator>-&gt;</operator><name>chapters_input_file</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nb_input_files</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name><name>input_files</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name><name>ctx</name><operator>-&gt;</operator><name>nb_chapters</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>o</name><operator>-&gt;</operator><name>chapters_input_file</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt></block_content></block></for>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_FATAL</name></expr></argument>, <argument><expr><literal type="string">"Invalid input file index %d in chapter mapping.\n"</literal></expr></argument>,

<argument><expr><name><name>o</name><operator>-&gt;</operator><name>chapters_input_file</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>exit_program</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>o</name><operator>-&gt;</operator><name>chapters_input_file</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>copy_chapters</name><argument_list>(<argument><expr><name><name>input_files</name><index>[<expr><name><name>o</name><operator>-&gt;</operator><name>chapters_input_file</name></name></expr>]</index></name></expr></argument>, <argument><expr><name>of</name></expr></argument>,

<argument><expr><operator>!</operator><name><name>o</name><operator>-&gt;</operator><name>metadata_chapters_manual</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>o</name><operator>-&gt;</operator><name>metadata_global_manual</name></name> <operator>&amp;&amp;</operator> <name>nb_input_files</name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><call><name>av_dict_copy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>oc</name><operator>-&gt;</operator><name>metadata</name></name></expr></argument>, <argument><expr><name><name>input_files</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name><name>ctx</name><operator>-&gt;</operator><name>metadata</name></name></expr></argument>,

<argument><expr><name>AV_DICT_DONT_OVERWRITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>o</name><operator>-&gt;</operator><name>recording_time</name></name> <operator>!=</operator> <name>INT64_MAX</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_dict_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>oc</name><operator>-&gt;</operator><name>metadata</name></name></expr></argument>, <argument><expr><literal type="string">"duration"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_dict_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>oc</name><operator>-&gt;</operator><name>metadata</name></name></expr></argument>, <argument><expr><literal type="string">"creation_time"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>o</name><operator>-&gt;</operator><name>metadata_streams_manual</name></name></expr>)</condition><block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name><name>of</name><operator>-&gt;</operator><name>ost_index</name></name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nb_output_streams</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>InputStream</name> <modifier>*</modifier></type><name>ist</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>output_streams</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>source_index</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> 

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ist</name> <operator>=</operator> <name><name>input_streams</name><index>[<expr><name><name>output_streams</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>source_index</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_dict_copy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>output_streams</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name><name>st</name><operator>-&gt;</operator><name>metadata</name></name></expr></argument>, <argument><expr><name><name>ist</name><operator>-&gt;</operator><name>st</name><operator>-&gt;</operator><name>metadata</name></name></expr></argument>, <argument><expr><name>AV_DICT_DONT_OVERWRITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>output_streams</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>stream_copy</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_dict_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>output_streams</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name><name>st</name><operator>-&gt;</operator><name>metadata</name></name></expr></argument>, <argument><expr><literal type="string">"encoder"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>o</name><operator>-&gt;</operator><name>nb_program</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name><name>o</name><operator>-&gt;</operator><name>program</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>u</name><operator>.</operator><name>str</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>progid</name> <init>= <expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVProgram</name> <modifier>*</modifier></type><name>program</name></decl>;</decl_stmt>

<while>while<condition>(<expr><operator>*</operator><name>p</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p2</name> <init>= <expr><call><name>av_get_token</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><literal type="string">":"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>to_dealloc</name> <init>= <expr><name>p2</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>key</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>p2</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>*</operator><name>p</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>key</name> <operator>=</operator> <call><name>av_get_token</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p2</name></expr></argument>, <argument><expr><literal type="string">"="</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>key</name> <operator>||</operator> <operator>!</operator><operator>*</operator><name>p2</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>to_dealloc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>p2</name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="string">"program_num"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>progid</name> <operator>=</operator> <call><name>strtol</name><argument_list>(<argument><expr><name>p2</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>to_dealloc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><name>program</name> <operator>=</operator> <call><name>av_new_program</name><argument_list>(<argument><expr><name>oc</name></expr></argument>, <argument><expr><name>progid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>o</name><operator>-&gt;</operator><name>program</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>u</name><operator>.</operator><name>str</name></name></expr>;</expr_stmt>

<while>while<condition>(<expr><operator>*</operator><name>p</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p2</name> <init>= <expr><call><name>av_get_token</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><literal type="string">":"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>to_dealloc</name> <init>= <expr><name>p2</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>key</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>p2</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>*</operator><name>p</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>key</name> <operator>=</operator> <call><name>av_get_token</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p2</name></expr></argument>, <argument><expr><literal type="string">"="</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>key</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_FATAL</name></expr></argument>,

<argument><expr><literal type="string">"No '=' character in program string %s.\n"</literal></expr></argument>,

<argument><expr><name>p2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>exit_program</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>p2</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>exit_program</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>p2</name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="string">"title"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_dict_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>program</name><operator>-&gt;</operator><name>metadata</name></name></expr></argument>, <argument><expr><literal type="string">"title"</literal></expr></argument>, <argument><expr><name>p2</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="string">"program_num"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="string">"st"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>st_num</name> <init>= <expr><call><name>strtol</name><argument_list>(<argument><expr><name>p2</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_program_add_stream_index</name><argument_list>(<argument><expr><name>oc</name></expr></argument>, <argument><expr><name>progid</name></expr></argument>, <argument><expr><name>st_num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_FATAL</name></expr></argument>, <argument><expr><literal type="string">"Unknown program key %s.\n"</literal></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>exit_program</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>to_dealloc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>o</name><operator>-&gt;</operator><name>nb_metadata</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>AVDictionary</name> <modifier>*</modifier><modifier>*</modifier></type><name>m</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name>type</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>val</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>stream_spec</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>index</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name><name>o</name><operator>-&gt;</operator><name>metadata</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>u</name><operator>.</operator><name>str</name></name></expr></argument>, <argument><expr><literal type="char">'='</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>val</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_FATAL</name></expr></argument>, <argument><expr><literal type="string">"No '=' character in metadata string %s.\n"</literal></expr></argument>,

<argument><expr><name><name>o</name><operator>-&gt;</operator><name>metadata</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>u</name><operator>.</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>exit_program</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>val</name><operator>++</operator> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>parse_meta_type</name><argument_list>(<argument><expr><name><name>o</name><operator>-&gt;</operator><name>metadata</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>specifier</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>index</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>stream_spec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <literal type="char">'s'</literal></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>oc</name><operator>-&gt;</operator><name>nb_streams</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>ost</name> <operator>=</operator> <name><name>output_streams</name><index>[<expr><name>nb_output_streams</name> <operator>-</operator> <name><name>oc</name><operator>-&gt;</operator><name>nb_streams</name></name> <operator>+</operator> <name>j</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>check_stream_specifier</name><argument_list>(<argument><expr><name>oc</name></expr></argument>, <argument><expr><name><name>oc</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><name>stream_spec</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>o</name><operator>-&gt;</operator><name>metadata</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>u</name><operator>.</operator><name>str</name></name></expr></argument>, <argument><expr><literal type="string">"rotate"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>tail</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>theta</name> <init>= <expr><call><name>av_strtod</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tail</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>tail</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ost</name><operator>-&gt;</operator><name>rotate_overridden</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ost</name><operator>-&gt;</operator><name>rotate_override_value</name></name> <operator>=</operator> <name>theta</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>av_dict_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>oc</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name>j</name></expr>]</index></name><operator>-&gt;</operator><name>metadata</name></expr></argument>, <argument><expr><name><name>o</name><operator>-&gt;</operator><name>metadata</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>u</name><operator>.</operator><name>str</name></name></expr></argument>, <argument><expr><ternary><condition><expr><operator>*</operator><name>val</name></expr> ?</condition><then> <expr><name>val</name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>exit_program</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if>

<else>else <block>{<block_content>

<switch>switch <condition>(<expr><name>type</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="char">'g'</literal></expr>:</case>

<expr_stmt><expr><name>m</name> <operator>=</operator> <operator>&amp;</operator><name><name>oc</name><operator>-&gt;</operator><name>metadata</name></name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'c'</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><name>index</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>index</name> <operator>&gt;=</operator> <name><name>oc</name><operator>-&gt;</operator><name>nb_chapters</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_FATAL</name></expr></argument>, <argument><expr><literal type="string">"Invalid chapter index %d in metadata specifier.\n"</literal></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>exit_program</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>m</name> <operator>=</operator> <operator>&amp;</operator><name><name>oc</name><operator>-&gt;</operator><name>chapters</name><index>[<expr><name>index</name></expr>]</index></name><operator>-&gt;</operator><name>metadata</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'p'</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><name>index</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>index</name> <operator>&gt;=</operator> <name><name>oc</name><operator>-&gt;</operator><name>nb_programs</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_FATAL</name></expr></argument>, <argument><expr><literal type="string">"Invalid program index %d in metadata specifier.\n"</literal></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>exit_program</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>m</name> <operator>=</operator> <operator>&amp;</operator><name><name>oc</name><operator>-&gt;</operator><name>programs</name><index>[<expr><name>index</name></expr>]</index></name><operator>-&gt;</operator><name>metadata</name></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_FATAL</name></expr></argument>, <argument><expr><literal type="string">"Invalid metadata specifier %s.\n"</literal></expr></argument>, <argument><expr><name><name>o</name><operator>-&gt;</operator><name>metadata</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>specifier</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>exit_program</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></switch>

<expr_stmt><expr><call><name>av_dict_set</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><name><name>o</name><operator>-&gt;</operator><name>metadata</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>u</name><operator>.</operator><name>str</name></name></expr></argument>, <argument><expr><ternary><condition><expr><operator>*</operator><name>val</name></expr> ?</condition><then> <expr><name>val</name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>opt_target</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>optctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>opt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>OptionsContext</name> <modifier>*</modifier></type><name>o</name> <init>= <expr><name>optctx</name></expr></init></decl>;</decl_stmt>

<enum>enum <block>{ <decl><name>PAL</name></decl>, <decl><name>NTSC</name></decl>, <decl><name>FILM</name></decl>, <decl><name>UNKNOWN</name></decl> }</block> <decl><name>norm</name> <init>= <expr><name>UNKNOWN</name></expr></init></decl>;</enum>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>frame_rates</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="string">"25"</literal></expr>, <expr><literal type="string">"30000/1001"</literal></expr>, <expr><literal type="string">"24000/1001"</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strncmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"pal-"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>norm</name> <operator>=</operator> <name>PAL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>arg</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strncmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"ntsc-"</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>norm</name> <operator>=</operator> <name>NTSC</name></expr>;</expr_stmt>

<expr_stmt><expr><name>arg</name> <operator>+=</operator> <literal type="number">5</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strncmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"film-"</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>norm</name> <operator>=</operator> <name>FILM</name></expr>;</expr_stmt>

<expr_stmt><expr><name>arg</name> <operator>+=</operator> <literal type="number">5</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>nb_input_files</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>nb_input_files</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>input_files</name><index>[<expr><name>j</name></expr>]</index></name><operator>-&gt;</operator><name>nb_streams</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>AVStream</name> <modifier>*</modifier></type><name>st</name> <init>= <expr><name><name>input_files</name><index>[<expr><name>j</name></expr>]</index></name><operator>-&gt;</operator><name><name>ctx</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>fr</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_type</name></name> <operator>!=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name>fr</name> <operator>=</operator> <name><name>st</name><operator>-&gt;</operator><name>time_base</name><operator>.</operator><name>den</name></name> <operator>*</operator> <literal type="number">1000LL</literal> <operator>/</operator> <name><name>st</name><operator>-&gt;</operator><name>time_base</name><operator>.</operator><name>num</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>fr</name> <operator>==</operator> <literal type="number">25000</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>norm</name> <operator>=</operator> <name>PAL</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name>fr</name> <operator>==</operator> <literal type="number">29970</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>fr</name> <operator>==</operator> <literal type="number">23976</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>norm</name> <operator>=</operator> <name>NTSC</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>norm</name> <operator>!=</operator> <name>UNKNOWN</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>norm</name> <operator>!=</operator> <name>UNKNOWN</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"Assuming %s for target.\n"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>norm</name> <operator>==</operator> <name>PAL</name></expr> ?</condition><then> <expr><literal type="string">"PAL"</literal></expr> </then><else>: <expr><literal type="string">"NTSC"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>norm</name> <operator>==</operator> <name>UNKNOWN</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_FATAL</name></expr></argument>, <argument><expr><literal type="string">"Could not determine norm (PAL/NTSC/NTSC-Film) for target.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_FATAL</name></expr></argument>, <argument><expr><literal type="string">"Please prefix target with \"pal-\", \"ntsc-\" or \"film-\",\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_FATAL</name></expr></argument>, <argument><expr><literal type="string">"or set a framerate with \"-r xxx\".\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>exit_program</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"vcd"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>opt_video_codec</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><literal type="string">"c:v"</literal></expr></argument>, <argument><expr><literal type="string">"mpeg1video"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>opt_audio_codec</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><literal type="string">"c:a"</literal></expr></argument>, <argument><expr><literal type="string">"mp2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>parse_option</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><literal type="string">"f"</literal></expr></argument>, <argument><expr><literal type="string">"vcd"</literal></expr></argument>, <argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>parse_option</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><literal type="string">"s"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>norm</name> <operator>==</operator> <name>PAL</name></expr> ?</condition><then> <expr><literal type="string">"352x288"</literal></expr> </then><else>: <expr><literal type="string">"352x240"</literal></expr></else></ternary></expr></argument>, <argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>parse_option</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>, <argument><expr><name><name>frame_rates</name><index>[<expr><name>norm</name></expr>]</index></name></expr></argument>, <argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>opt_default</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"g"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>norm</name> <operator>==</operator> <name>PAL</name></expr> ?</condition><then> <expr><literal type="string">"15"</literal></expr> </then><else>: <expr><literal type="string">"18"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>opt_default</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"b:v"</literal></expr></argument>, <argument><expr><literal type="string">"1150000"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>opt_default</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"maxrate:v"</literal></expr></argument>, <argument><expr><literal type="string">"1150000"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>opt_default</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"minrate:v"</literal></expr></argument>, <argument><expr><literal type="string">"1150000"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>opt_default</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"bufsize:v"</literal></expr></argument>, <argument><expr><literal type="string">"327680"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>opt_default</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"b:a"</literal></expr></argument>, <argument><expr><literal type="string">"224000"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>parse_option</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><literal type="string">"ar"</literal></expr></argument>, <argument><expr><literal type="string">"44100"</literal></expr></argument>, <argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>parse_option</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><literal type="string">"ac"</literal></expr></argument>, <argument><expr><literal type="string">"2"</literal></expr></argument>, <argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>opt_default</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"packetsize"</literal></expr></argument>, <argument><expr><literal type="string">"2324"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>opt_default</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"muxrate"</literal></expr></argument>, <argument><expr><literal type="string">"1411200"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>o</name><operator>-&gt;</operator><name>mux_preload</name></name> <operator>=</operator> <operator>(</operator><literal type="number">36000</literal> <operator>+</operator> <literal type="number">3</literal> <operator>*</operator> <literal type="number">1200</literal><operator>)</operator> <operator>/</operator> <literal type="number">90000.0</literal></expr>;</expr_stmt> 

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"svcd"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>opt_video_codec</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><literal type="string">"c:v"</literal></expr></argument>, <argument><expr><literal type="string">"mpeg2video"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>opt_audio_codec</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><literal type="string">"c:a"</literal></expr></argument>, <argument><expr><literal type="string">"mp2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>parse_option</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><literal type="string">"f"</literal></expr></argument>, <argument><expr><literal type="string">"svcd"</literal></expr></argument>, <argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>parse_option</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><literal type="string">"s"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>norm</name> <operator>==</operator> <name>PAL</name></expr> ?</condition><then> <expr><literal type="string">"480x576"</literal></expr> </then><else>: <expr><literal type="string">"480x480"</literal></expr></else></ternary></expr></argument>, <argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>parse_option</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>, <argument><expr><name><name>frame_rates</name><index>[<expr><name>norm</name></expr>]</index></name></expr></argument>, <argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>parse_option</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><literal type="string">"pix_fmt"</literal></expr></argument>, <argument><expr><literal type="string">"yuv420p"</literal></expr></argument>, <argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>opt_default</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"g"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>norm</name> <operator>==</operator> <name>PAL</name></expr> ?</condition><then> <expr><literal type="string">"15"</literal></expr> </then><else>: <expr><literal type="string">"18"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>opt_default</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"b:v"</literal></expr></argument>, <argument><expr><literal type="string">"2040000"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>opt_default</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"maxrate:v"</literal></expr></argument>, <argument><expr><literal type="string">"2516000"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>opt_default</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"minrate:v"</literal></expr></argument>, <argument><expr><literal type="string">"0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>opt_default</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"bufsize:v"</literal></expr></argument>, <argument><expr><literal type="string">"1835008"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>opt_default</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"scan_offset"</literal></expr></argument>, <argument><expr><literal type="string">"1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>opt_default</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"b:a"</literal></expr></argument>, <argument><expr><literal type="string">"224000"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>parse_option</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><literal type="string">"ar"</literal></expr></argument>, <argument><expr><literal type="string">"44100"</literal></expr></argument>, <argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>opt_default</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"packetsize"</literal></expr></argument>, <argument><expr><literal type="string">"2324"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"dvd"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>opt_video_codec</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><literal type="string">"c:v"</literal></expr></argument>, <argument><expr><literal type="string">"mpeg2video"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>opt_audio_codec</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><literal type="string">"c:a"</literal></expr></argument>, <argument><expr><literal type="string">"ac3"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>parse_option</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><literal type="string">"f"</literal></expr></argument>, <argument><expr><literal type="string">"dvd"</literal></expr></argument>, <argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>parse_option</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><literal type="string">"s"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>norm</name> <operator>==</operator> <name>PAL</name></expr> ?</condition><then> <expr><literal type="string">"720x576"</literal></expr> </then><else>: <expr><literal type="string">"720x480"</literal></expr></else></ternary></expr></argument>, <argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>parse_option</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>, <argument><expr><name><name>frame_rates</name><index>[<expr><name>norm</name></expr>]</index></name></expr></argument>, <argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>parse_option</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><literal type="string">"pix_fmt"</literal></expr></argument>, <argument><expr><literal type="string">"yuv420p"</literal></expr></argument>, <argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>opt_default</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"g"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>norm</name> <operator>==</operator> <name>PAL</name></expr> ?</condition><then> <expr><literal type="string">"15"</literal></expr> </then><else>: <expr><literal type="string">"18"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>opt_default</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"b:v"</literal></expr></argument>, <argument><expr><literal type="string">"6000000"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>opt_default</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"maxrate:v"</literal></expr></argument>, <argument><expr><literal type="string">"9000000"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>opt_default</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"minrate:v"</literal></expr></argument>, <argument><expr><literal type="string">"0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>opt_default</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"bufsize:v"</literal></expr></argument>, <argument><expr><literal type="string">"1835008"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>opt_default</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"packetsize"</literal></expr></argument>, <argument><expr><literal type="string">"2048"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>opt_default</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"muxrate"</literal></expr></argument>, <argument><expr><literal type="string">"10080000"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>opt_default</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"b:a"</literal></expr></argument>, <argument><expr><literal type="string">"448000"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>parse_option</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><literal type="string">"ar"</literal></expr></argument>, <argument><expr><literal type="string">"48000"</literal></expr></argument>, <argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strncmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"dv"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>parse_option</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><literal type="string">"f"</literal></expr></argument>, <argument><expr><literal type="string">"dv"</literal></expr></argument>, <argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>parse_option</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><literal type="string">"s"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>norm</name> <operator>==</operator> <name>PAL</name></expr> ?</condition><then> <expr><literal type="string">"720x576"</literal></expr> </then><else>: <expr><literal type="string">"720x480"</literal></expr></else></ternary></expr></argument>, <argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>parse_option</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><literal type="string">"pix_fmt"</literal></expr></argument>, <argument><expr><ternary><condition><expr><operator>!</operator><call><name>strncmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"dv50"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="string">"yuv422p"</literal></expr> </then><else>:

<expr><ternary><condition><expr><name>norm</name> <operator>==</operator> <name>PAL</name></expr> ?</condition><then> <expr><literal type="string">"yuv420p"</literal></expr> </then><else>: <expr><literal type="string">"yuv411p"</literal></expr></else></ternary></expr></else></ternary></expr></argument>, <argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>parse_option</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>, <argument><expr><name><name>frame_rates</name><index>[<expr><name>norm</name></expr>]</index></name></expr></argument>, <argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>parse_option</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><literal type="string">"ar"</literal></expr></argument>, <argument><expr><literal type="string">"48000"</literal></expr></argument>, <argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>parse_option</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><literal type="string">"ac"</literal></expr></argument>, <argument><expr><literal type="string">"2"</literal></expr></argument>, <argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Unknown target: %s\n"</literal></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>av_dict_copy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>o</name><operator>-&gt;</operator><name>g</name><operator>-&gt;</operator><name>codec_opts</name></name></expr></argument>, <argument><expr><name>codec_opts</name></expr></argument>, <argument><expr><name>AV_DICT_DONT_OVERWRITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_dict_copy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>o</name><operator>-&gt;</operator><name>g</name><operator>-&gt;</operator><name>format_opts</name></name></expr></argument>, <argument><expr><name>format_opts</name></expr></argument>, <argument><expr><name>AV_DICT_DONT_OVERWRITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>opt_vstats_file</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>optctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>opt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>av_free</name> <argument_list>(<argument><expr><name>vstats_filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vstats_filename</name> <operator>=</operator> <call><name>av_strdup</name> <argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>opt_vstats</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>optctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>opt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>filename</name><index>[<expr><literal type="number">40</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>time_t</name></type> <name>today2</name> <init>= <expr><call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>tm</name></name> <modifier>*</modifier></type><name>today</name> <init>= <expr><call><name>localtime</name><argument_list>(<argument><expr><operator>&amp;</operator><name>today2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>today</name></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_FATAL</name></expr></argument>, <argument><expr><literal type="string">"Unable to get current time: %s\n"</literal></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>exit_program</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"vstats_%02d%02d%02d.log"</literal></expr></argument>, <argument><expr><name><name>today</name><operator>-&gt;</operator><name>tm_hour</name></name></expr></argument>, <argument><expr><name><name>today</name><operator>-&gt;</operator><name>tm_min</name></name></expr></argument>,

<argument><expr><name><name>today</name><operator>-&gt;</operator><name>tm_sec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>opt_vstats_file</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>opt</name></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>opt_video_frames</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>optctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>opt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>OptionsContext</name> <modifier>*</modifier></type><name>o</name> <init>= <expr><name>optctx</name></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>parse_option</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><literal type="string">"frames:v"</literal></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>opt_audio_frames</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>optctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>opt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>OptionsContext</name> <modifier>*</modifier></type><name>o</name> <init>= <expr><name>optctx</name></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>parse_option</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><literal type="string">"frames:a"</literal></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>opt_data_frames</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>optctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>opt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>OptionsContext</name> <modifier>*</modifier></type><name>o</name> <init>= <expr><name>optctx</name></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>parse_option</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><literal type="string">"frames:d"</literal></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>opt_default_new</name><parameter_list>(<parameter><decl><type><name>OptionsContext</name> <modifier>*</modifier></type><name>o</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>opt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVDictionary</name> <modifier>*</modifier></type><name>cbak</name> <init>= <expr><name>codec_opts</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVDictionary</name> <modifier>*</modifier></type><name>fbak</name> <init>= <expr><name>format_opts</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>codec_opts</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>format_opts</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>opt_default</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>opt</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_dict_copy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>o</name><operator>-&gt;</operator><name>g</name><operator>-&gt;</operator><name>codec_opts</name></name></expr></argument> , <argument><expr><name>codec_opts</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_dict_copy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>o</name><operator>-&gt;</operator><name>g</name><operator>-&gt;</operator><name>format_opts</name></name></expr></argument>, <argument><expr><name>format_opts</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_dict_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>codec_opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_dict_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>format_opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>codec_opts</name> <operator>=</operator> <name>cbak</name></expr>;</expr_stmt>

<expr_stmt><expr><name>format_opts</name> <operator>=</operator> <name>fbak</name></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>opt_preset</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>optctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>opt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>OptionsContext</name> <modifier>*</modifier></type><name>o</name> <init>= <expr><name>optctx</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>f</name><init>=<expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>filename</name><index>[<expr><literal type="number">1000</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>line</name><index>[<expr><literal type="number">1000</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>tmp_line</name><index>[<expr><literal type="number">1000</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>codec_name</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>tmp_line</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>*</operator><name>opt</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tmp_line</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MATCH_PER_TYPE_OPT</name><argument_list>(<argument><expr><name>codec_names</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>codec_name</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>tmp_line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>f</name> <operator>=</operator> <call><name>get_preset_file</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><operator>*</operator><name>opt</name> <operator>==</operator> <literal type="char">'f'</literal></expr></argument>, <argument><expr><name>codec_name</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>strncmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"libx264-lossless"</literal></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><literal type="string">"libx264-lossless"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_FATAL</name></expr></argument>, <argument><expr><literal type="string">"Please use -preset &lt;speed&gt; -qp 0\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if><else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_FATAL</name></expr></argument>, <argument><expr><literal type="string">"File for preset '%s' not found\n"</literal></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>exit_program</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><call><name>fgets</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>key</name> <init>= <expr><name>tmp_line</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>value</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>endptr</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strcspn</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><literal type="string">"#\n\r"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_strlcpy</name><argument_list>(<argument><expr><name>tmp_line</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tmp_line</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>av_strtok</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="string">"="</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>)</argument_list></call> <operator>||</operator>

<operator>!</operator><call><name>av_strtok</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="string">"\r\n"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>endptr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_FATAL</name></expr></argument>, <argument><expr><literal type="string">"%s: Invalid syntax: '%s'\n"</literal></expr></argument>, <argument><expr><name>filename</name></expr></argument>, <argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>exit_program</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"ffpreset[%s]: set '%s' = '%s'\n"</literal></expr></argument>, <argument><expr><name>filename</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="string">"acodec"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>opt_audio_codec</name> <argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="string">"vcodec"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>opt_video_codec</name> <argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="string">"scodec"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>opt_subtitle_codec</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="string">"dcodec"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>opt_data_codec</name> <argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>opt_default_new</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_FATAL</name></expr></argument>, <argument><expr><literal type="string">"%s: Invalid option or argument: '%s', parsed as '%s' = '%s'\n"</literal></expr></argument>,

<argument><expr><name>filename</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>exit_program</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>opt_old2new</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>optctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>opt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>OptionsContext</name> <modifier>*</modifier></type><name>o</name> <init>= <expr><name>optctx</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>av_asprintf</name><argument_list>(<argument><expr><literal type="string">"%s:%c"</literal></expr></argument>, <argument><expr><name>opt</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>*</operator><name>opt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>s</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>parse_option</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>opt_bitrate</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>optctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>opt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>OptionsContext</name> <modifier>*</modifier></type><name>o</name> <init>= <expr><name>optctx</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>opt</name></expr></argument>, <argument><expr><literal type="string">"ab"</literal></expr></argument>)</argument_list></call></expr>)</condition><block>{<block_content>

<expr_stmt><expr><call><name>av_dict_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>o</name><operator>-&gt;</operator><name>g</name><operator>-&gt;</operator><name>codec_opts</name></name></expr></argument>, <argument><expr><literal type="string">"b:a"</literal></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>opt</name></expr></argument>, <argument><expr><literal type="string">"b"</literal></expr></argument>)</argument_list></call></expr>)</condition><block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Please use -b:a or -b:v, -b is ambiguous\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_dict_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>o</name><operator>-&gt;</operator><name>g</name><operator>-&gt;</operator><name>codec_opts</name></name></expr></argument>, <argument><expr><literal type="string">"b:v"</literal></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_dict_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>o</name><operator>-&gt;</operator><name>g</name><operator>-&gt;</operator><name>codec_opts</name></name></expr></argument>, <argument><expr><name>opt</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>opt_qscale</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>optctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>opt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>OptionsContext</name> <modifier>*</modifier></type><name>o</name> <init>= <expr><name>optctx</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>opt</name></expr></argument>, <argument><expr><literal type="string">"qscale"</literal></expr></argument>)</argument_list></call></expr>)</condition><block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Please use -q:a or -q:v, -qscale is ambiguous\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>parse_option</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><literal type="string">"q:v"</literal></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>av_asprintf</name><argument_list>(<argument><expr><literal type="string">"q%s"</literal></expr></argument>, <argument><expr><name>opt</name> <operator>+</operator> <literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>s</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>parse_option</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>opt_profile</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>optctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>opt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>OptionsContext</name> <modifier>*</modifier></type><name>o</name> <init>= <expr><name>optctx</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>opt</name></expr></argument>, <argument><expr><literal type="string">"profile"</literal></expr></argument>)</argument_list></call></expr>)</condition><block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Please use -profile:a or -profile:v, -profile is ambiguous\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_dict_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>o</name><operator>-&gt;</operator><name>g</name><operator>-&gt;</operator><name>codec_opts</name></name></expr></argument>, <argument><expr><literal type="string">"profile:v"</literal></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_dict_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>o</name><operator>-&gt;</operator><name>g</name><operator>-&gt;</operator><name>codec_opts</name></name></expr></argument>, <argument><expr><name>opt</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>opt_video_filters</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>optctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>opt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>OptionsContext</name> <modifier>*</modifier></type><name>o</name> <init>= <expr><name>optctx</name></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>parse_option</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><literal type="string">"filter:v"</literal></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>opt_audio_filters</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>optctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>opt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>OptionsContext</name> <modifier>*</modifier></type><name>o</name> <init>= <expr><name>optctx</name></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>parse_option</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><literal type="string">"filter:a"</literal></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>opt_vsync</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>optctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>opt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>av_strcasecmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"cfr"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>video_sync_method</name> <operator>=</operator> <name>VSYNC_CFR</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>av_strcasecmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"vfr"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>video_sync_method</name> <operator>=</operator> <name>VSYNC_VFR</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>av_strcasecmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"passthrough"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>video_sync_method</name> <operator>=</operator> <name>VSYNC_PASSTHROUGH</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>av_strcasecmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"drop"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>video_sync_method</name> <operator>=</operator> <name>VSYNC_DROP</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>video_sync_method</name> <operator>==</operator> <name>VSYNC_AUTO</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>video_sync_method</name> <operator>=</operator> <call><name>parse_number_or_die</name><argument_list>(<argument><expr><literal type="string">"vsync"</literal></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><name>OPT_INT</name></expr></argument>, <argument><expr><name>VSYNC_AUTO</name></expr></argument>, <argument><expr><name>VSYNC_VFR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>opt_timecode</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>optctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>opt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>OptionsContext</name> <modifier>*</modifier></type><name>o</name> <init>= <expr><name>optctx</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>tcr</name> <init>= <expr><call><name>av_asprintf</name><argument_list>(<argument><expr><literal type="string">"timecode=%s"</literal></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>tcr</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>parse_option</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><literal type="string">"metadata:g"</literal></expr></argument>, <argument><expr><name>tcr</name></expr></argument>, <argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>av_dict_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>o</name><operator>-&gt;</operator><name>g</name><operator>-&gt;</operator><name>codec_opts</name></name></expr></argument>, <argument><expr><literal type="string">"gop_timecode"</literal></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>tcr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>opt_channel_layout</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>optctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>opt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>OptionsContext</name> <modifier>*</modifier></type><name>o</name> <init>= <expr><name>optctx</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>layout_str</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>stream_str</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ac_str</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>, <decl><type ref="prev"/><name>channels</name></decl>, <decl><type ref="prev"/><name>ac_str_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>layout</name></decl>;</decl_stmt>

<expr_stmt><expr><name>layout</name> <operator>=</operator> <call><name>av_get_channel_layout</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>layout</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Unknown channel layout: %s\n"</literal></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>layout_str</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>layout_str</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%"</literal><name>PRIu64</name></expr></argument>, <argument><expr><name>layout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>opt_default_new</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><name>opt</name></expr></argument>, <argument><expr><name>layout_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>channels</name> <operator>=</operator> <call><name>av_get_channel_layout_nb_channels</name><argument_list>(<argument><expr><name>layout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>layout_str</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>layout_str</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name>channels</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>stream_str</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>opt</name></expr></argument>, <argument><expr><literal type="char">':'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ac_str_size</name> <operator>=</operator> <literal type="number">3</literal> <operator>+</operator> <operator>(</operator><ternary><condition><expr><name>stream_str</name></expr> ?</condition><then> <expr><call><name>strlen</name><argument_list>(<argument><expr><name>stream_str</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>ac_str</name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><name>ac_str_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ac_str</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_strlcpy</name><argument_list>(<argument><expr><name>ac_str</name></expr></argument>, <argument><expr><literal type="string">"ac"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>stream_str</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_strlcat</name><argument_list>(<argument><expr><name>ac_str</name></expr></argument>, <argument><expr><name>stream_str</name></expr></argument>, <argument><expr><name>ac_str_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>parse_option</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><name>ac_str</name></expr></argument>, <argument><expr><name>layout_str</name></expr></argument>, <argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>ac_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>opt_audio_qscale</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>optctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>opt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>OptionsContext</name> <modifier>*</modifier></type><name>o</name> <init>= <expr><name>optctx</name></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>parse_option</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><literal type="string">"q:a"</literal></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>opt_filter_complex</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>optctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>opt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>GROW_ARRAY</name><argument_list>(<argument><expr><name>filtergraphs</name></expr></argument>, <argument><expr><name>nb_filtergraphs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>filtergraphs</name><index>[<expr><name>nb_filtergraphs</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>filtergraphs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>filtergraphs</name><index>[<expr><name>nb_filtergraphs</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>index</name> <operator>=</operator> <name>nb_filtergraphs</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>filtergraphs</name><index>[<expr><name>nb_filtergraphs</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>graph_desc</name> <operator>=</operator> <call><name>av_strdup</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>filtergraphs</name><index>[<expr><name>nb_filtergraphs</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>graph_desc</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>input_stream_potentially_available</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>opt_filter_complex_script</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>optctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>opt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>graph_desc</name> <init>= <expr><call><name>read_file</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>graph_desc</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>GROW_ARRAY</name><argument_list>(<argument><expr><name>filtergraphs</name></expr></argument>, <argument><expr><name>nb_filtergraphs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>filtergraphs</name><index>[<expr><name>nb_filtergraphs</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>filtergraphs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>filtergraphs</name><index>[<expr><name>nb_filtergraphs</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>index</name> <operator>=</operator> <name>nb_filtergraphs</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>filtergraphs</name><index>[<expr><name>nb_filtergraphs</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>graph_desc</name> <operator>=</operator> <name>graph_desc</name></expr>;</expr_stmt>

<expr_stmt><expr><name>input_stream_potentially_available</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>show_help_default</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>opt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>per_file</name> <init>= <expr><name>OPT_SPEC</name> <operator>|</operator> <name>OPT_OFFSET</name> <operator>|</operator> <name>OPT_PERFILE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>show_advanced</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>show_avoptions</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>opt</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>opt</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>opt</name></expr></argument>, <argument><expr><literal type="string">"long"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>show_advanced</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>opt</name></expr></argument>, <argument><expr><literal type="string">"full"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>show_advanced</name> <operator>=</operator> <name>show_avoptions</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Unknown help option '%s'.\n"</literal></expr></argument>, <argument><expr><name>opt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>show_usage</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Getting help:\n"</literal>

<literal type="string">" -h -- print basic options\n"</literal>

<literal type="string">" -h long -- print more options\n"</literal>

<literal type="string">" -h full -- print all options (including all format and codec specific options, very long)\n"</literal>

<literal type="string">" -h type=name -- print all options for the named decoder/encoder/demuxer/muxer/filter/bsf/protocol\n"</literal>

<literal type="string">" See man %s for detailed description of the options.\n"</literal>

<literal type="string">"\n"</literal></expr></argument>, <argument><expr><name>program_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>show_help_options</name><argument_list>(<argument><expr><name>options</name></expr></argument>, <argument><expr><literal type="string">"Print help / information / capabilities:"</literal></expr></argument>,

<argument><expr><name>OPT_EXIT</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>show_help_options</name><argument_list>(<argument><expr><name>options</name></expr></argument>, <argument><expr><literal type="string">"Global options (affect whole program "</literal>

<literal type="string">"instead of just one file):"</literal></expr></argument>,

<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>per_file</name> <operator>|</operator> <name>OPT_EXIT</name> <operator>|</operator> <name>OPT_EXPERT</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>show_advanced</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>show_help_options</name><argument_list>(<argument><expr><name>options</name></expr></argument>, <argument><expr><literal type="string">"Advanced global options:"</literal></expr></argument>, <argument><expr><name>OPT_EXPERT</name></expr></argument>,

<argument><expr><name>per_file</name> <operator>|</operator> <name>OPT_EXIT</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>show_help_options</name><argument_list>(<argument><expr><name>options</name></expr></argument>, <argument><expr><literal type="string">"Per-file main options:"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><name>OPT_EXPERT</name> <operator>|</operator> <name>OPT_AUDIO</name> <operator>|</operator> <name>OPT_VIDEO</name> <operator>|</operator> <name>OPT_SUBTITLE</name> <operator>|</operator>

<name>OPT_EXIT</name></expr></argument>, <argument><expr><name>per_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>show_advanced</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>show_help_options</name><argument_list>(<argument><expr><name>options</name></expr></argument>, <argument><expr><literal type="string">"Advanced per-file options:"</literal></expr></argument>,

<argument><expr><name>OPT_EXPERT</name></expr></argument>, <argument><expr><name>OPT_AUDIO</name> <operator>|</operator> <name>OPT_VIDEO</name> <operator>|</operator> <name>OPT_SUBTITLE</name></expr></argument>, <argument><expr><name>per_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>show_help_options</name><argument_list>(<argument><expr><name>options</name></expr></argument>, <argument><expr><literal type="string">"Video options:"</literal></expr></argument>,

<argument><expr><name>OPT_VIDEO</name></expr></argument>, <argument><expr><name>OPT_EXPERT</name> <operator>|</operator> <name>OPT_AUDIO</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>show_advanced</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>show_help_options</name><argument_list>(<argument><expr><name>options</name></expr></argument>, <argument><expr><literal type="string">"Advanced Video options:"</literal></expr></argument>,

<argument><expr><name>OPT_EXPERT</name> <operator>|</operator> <name>OPT_VIDEO</name></expr></argument>, <argument><expr><name>OPT_AUDIO</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>show_help_options</name><argument_list>(<argument><expr><name>options</name></expr></argument>, <argument><expr><literal type="string">"Audio options:"</literal></expr></argument>,

<argument><expr><name>OPT_AUDIO</name></expr></argument>, <argument><expr><name>OPT_EXPERT</name> <operator>|</operator> <name>OPT_VIDEO</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>show_advanced</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>show_help_options</name><argument_list>(<argument><expr><name>options</name></expr></argument>, <argument><expr><literal type="string">"Advanced Audio options:"</literal></expr></argument>,

<argument><expr><name>OPT_EXPERT</name> <operator>|</operator> <name>OPT_AUDIO</name></expr></argument>, <argument><expr><name>OPT_VIDEO</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>show_help_options</name><argument_list>(<argument><expr><name>options</name></expr></argument>, <argument><expr><literal type="string">"Subtitle options:"</literal></expr></argument>,

<argument><expr><name>OPT_SUBTITLE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>show_avoptions</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>flags</name> <init>= <expr><name>AV_OPT_FLAG_DECODING_PARAM</name> <operator>|</operator> <name>AV_OPT_FLAG_ENCODING_PARAM</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>show_help_children</name><argument_list>(<argument><expr><call><name>avcodec_get_class</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>show_help_children</name><argument_list>(<argument><expr><call><name>avformat_get_class</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_SWSCALE</name></expr></cpp:if>

<expr_stmt><expr><call><name>show_help_children</name><argument_list>(<argument><expr><call><name>sws_get_class</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_SWRESAMPLE</name></expr></cpp:if>

<expr_stmt><expr><call><name>show_help_children</name><argument_list>(<argument><expr><call><name>swr_get_class</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>AV_OPT_FLAG_AUDIO_PARAM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>show_help_children</name><argument_list>(<argument><expr><call><name>avfilter_get_class</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>AV_OPT_FLAG_VIDEO_PARAM</name> <operator>|</operator> <name>AV_OPT_FLAG_AUDIO_PARAM</name> <operator>|</operator> <name>AV_OPT_FLAG_FILTERING_PARAM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>show_help_children</name><argument_list>(<argument><expr><call><name>av_bsf_get_class</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>AV_OPT_FLAG_VIDEO_PARAM</name> <operator>|</operator> <name>AV_OPT_FLAG_AUDIO_PARAM</name> <operator>|</operator> <name>AV_OPT_FLAG_BSF_PARAM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>show_usage</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"Hyper fast Audio and Video encoder\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"usage: %s [options] [[infile options] -i infile]... {[outfile options] outfile}...\n"</literal></expr></argument>, <argument><expr><name>program_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<enum>enum <name>OptGroup</name> <block>{

<decl><name>GROUP_OUTFILE</name></decl>,

<decl><name>GROUP_INFILE</name></decl>,

}</block>;</enum>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>OptionGroupDef</name></type> <name><name>groups</name><index>[]</index></name> <init>= <expr><block>{

<expr><index>[<expr><name>GROUP_OUTFILE</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="string">"output url"</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>OPT_OUTPUT</name></expr> }</block></expr>,

<expr><index>[<expr><name>GROUP_INFILE</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="string">"input url"</literal></expr>, <expr><literal type="string">"i"</literal></expr>, <expr><name>OPT_INPUT</name></expr> }</block></expr>,

}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int</name></type> <name>open_files</name><parameter_list>(<parameter><decl><type><name>OptionGroupList</name> <modifier>*</modifier></type><name>l</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>inout</name></decl></parameter>,

<parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier><name>open_file</name>)<parameter_list>(<parameter><decl><type><name>OptionsContext</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>l</name><operator>-&gt;</operator><name>nb_groups</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>OptionGroup</name> <modifier>*</modifier></type><name>g</name> <init>= <expr><operator>&amp;</operator><name><name>l</name><operator>-&gt;</operator><name>groups</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>OptionsContext</name></type> <name>o</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>init_options</name><argument_list>(<argument><expr><operator>&amp;</operator><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>o</name><operator>.</operator><name>g</name></name> <operator>=</operator> <name>g</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>parse_optgroup</name><argument_list>(<argument><expr><operator>&amp;</operator><name>o</name></expr></argument>, <argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Error parsing options for %s file "</literal>

<literal type="string">"%s.\n"</literal></expr></argument>, <argument><expr><name>inout</name></expr></argument>, <argument><expr><name><name>g</name><operator>-&gt;</operator><name>arg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>uninit_options</name><argument_list>(<argument><expr><operator>&amp;</operator><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Opening an %s file: %s.\n"</literal></expr></argument>, <argument><expr><name>inout</name></expr></argument>, <argument><expr><name><name>g</name><operator>-&gt;</operator><name>arg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>open_file</name><argument_list>(<argument><expr><operator>&amp;</operator><name>o</name></expr></argument>, <argument><expr><name><name>g</name><operator>-&gt;</operator><name>arg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>uninit_options</name><argument_list>(<argument><expr><operator>&amp;</operator><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Error opening %s file %s.\n"</literal></expr></argument>,

<argument><expr><name>inout</name></expr></argument>, <argument><expr><name><name>g</name><operator>-&gt;</operator><name>arg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Successfully opened the file.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>ffmpeg_parse_options</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>OptionParseContext</name></type> <name>octx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>error</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>octx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>octx</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>split_commandline</name><argument_list>(<argument><expr><operator>&amp;</operator><name>octx</name></expr></argument>, <argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><name>options</name></expr></argument>, <argument><expr><name>groups</name></expr></argument>,

<argument><expr><call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>groups</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_FATAL</name></expr></argument>, <argument><expr><literal type="string">"Error splitting the argument list: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>parse_optgroup</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>octx</name><operator>.</operator><name>global_opts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_FATAL</name></expr></argument>, <argument><expr><literal type="string">"Error parsing global options: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>term_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>open_files</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>octx</name><operator>.</operator><name>groups</name><index>[<expr><name>GROUP_INFILE</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"input"</literal></expr></argument>, <argument><expr><name>open_input_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_FATAL</name></expr></argument>, <argument><expr><literal type="string">"Error opening input files: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>init_complex_filters</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_FATAL</name></expr></argument>, <argument><expr><literal type="string">"Error initializing complex filters.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>open_files</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>octx</name><operator>.</operator><name>groups</name><index>[<expr><name>GROUP_OUTFILE</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"output"</literal></expr></argument>, <argument><expr><name>open_output_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_FATAL</name></expr></argument>, <argument><expr><literal type="string">"Error opening output files: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>check_filter_outputs</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<label><name>fail</name>:</label>

<expr_stmt><expr><call><name>uninit_parse_context</name><argument_list>(<argument><expr><operator>&amp;</operator><name>octx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_strerror</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><name>error</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>error</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_FATAL</name></expr></argument>, <argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>opt_progress</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>optctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>opt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>avio</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"-"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>arg</name> <operator>=</operator> <literal type="string">"pipe:"</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>avio_open2</name><argument_list>(<argument><expr><operator>&amp;</operator><name>avio</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><name>AVIO_FLAG_WRITE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>int_cb</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to open progress URL \"%s\": %s\n"</literal></expr></argument>,

<argument><expr><name>arg</name></expr></argument>, <argument><expr><call><name>av_err2str</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>progress_avio</name> <operator>=</operator> <name>avio</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OFFSET</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>offsetof(OptionsContext, x)</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>const</specifier> <name>OptionDef</name></type> <name><name>options</name><index>[]</index></name> <init>= <expr><block>{

<expr><name>CMDUTILS_COMMON_OPTIONS</name>

<block>{ <expr><literal type="string">"f"</literal></expr>, <expr><name>HAS_ARG</name> <operator>|</operator> <name>OPT_STRING</name> <operator>|</operator> <name>OPT_OFFSET</name> <operator>|</operator>

<name>OPT_INPUT</name> <operator>|</operator> <name>OPT_OUTPUT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>off</name> <operator>=</operator> <macro><name>OFFSET</name><argument_list>(<argument>format</argument>)</argument_list></macro></expr> }</block></expr>,

<expr><literal type="string">"force format"</literal></expr>, <expr><literal type="string">"fmt"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"y"</literal></expr>, <expr><name>OPT_BOOL</name></expr>, <expr><block>{ <expr><operator>&amp;</operator><name>file_overwrite</name></expr> }</block></expr>,

<expr><literal type="string">"overwrite output files"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"n"</literal></expr>, <expr><name>OPT_BOOL</name></expr>, <expr><block>{ <expr><operator>&amp;</operator><name>no_file_overwrite</name></expr> }</block></expr>,

<expr><literal type="string">"never overwrite output files"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"ignore_unknown"</literal></expr>, <expr><name>OPT_BOOL</name></expr>, <expr><block>{ <expr><operator>&amp;</operator><name>ignore_unknown_streams</name></expr> }</block></expr>,

<expr><literal type="string">"Ignore unknown stream types"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"copy_unknown"</literal></expr>, <expr><name>OPT_BOOL</name> <operator>|</operator> <name>OPT_EXPERT</name></expr>, <expr><block>{ <expr><operator>&amp;</operator><name>copy_unknown_streams</name></expr> }</block></expr>,

<expr><literal type="string">"Copy unknown stream types"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"c"</literal></expr>, <expr><name>HAS_ARG</name> <operator>|</operator> <name>OPT_STRING</name> <operator>|</operator> <name>OPT_SPEC</name> <operator>|</operator>

<name>OPT_INPUT</name> <operator>|</operator> <name>OPT_OUTPUT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>off</name> <operator>=</operator> <macro><name>OFFSET</name><argument_list>(<argument>codec_names</argument>)</argument_list></macro></expr> }</block></expr>,

<expr><literal type="string">"codec name"</literal></expr>, <expr><literal type="string">"codec"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"codec"</literal></expr>, <expr><name>HAS_ARG</name> <operator>|</operator> <name>OPT_STRING</name> <operator>|</operator> <name>OPT_SPEC</name> <operator>|</operator>

<name>OPT_INPUT</name> <operator>|</operator> <name>OPT_OUTPUT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>off</name> <operator>=</operator> <macro><name>OFFSET</name><argument_list>(<argument>codec_names</argument>)</argument_list></macro></expr> }</block></expr>,

<expr><literal type="string">"codec name"</literal></expr>, <expr><literal type="string">"codec"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"pre"</literal></expr>, <expr><name>HAS_ARG</name> <operator>|</operator> <name>OPT_STRING</name> <operator>|</operator> <name>OPT_SPEC</name> <operator>|</operator>

<name>OPT_OUTPUT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>off</name> <operator>=</operator> <macro><name>OFFSET</name><argument_list>(<argument>presets</argument>)</argument_list></macro></expr> }</block></expr>,

<expr><literal type="string">"preset name"</literal></expr>, <expr><literal type="string">"preset"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"map"</literal></expr>, <expr><name>HAS_ARG</name> <operator>|</operator> <name>OPT_EXPERT</name> <operator>|</operator> <name>OPT_PERFILE</name> <operator>|</operator>

<name>OPT_OUTPUT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>func_arg</name> <operator>=</operator> <name>opt_map</name></expr> }</block></expr>,

<expr><literal type="string">"set input stream mapping"</literal></expr>,

<expr><literal type="string">"[-]input_file_id[:stream_specifier][,sync_file_id[:stream_specifier]]"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"map_channel"</literal></expr>, <expr><name>HAS_ARG</name> <operator>|</operator> <name>OPT_EXPERT</name> <operator>|</operator> <name>OPT_PERFILE</name> <operator>|</operator> <name>OPT_OUTPUT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>func_arg</name> <operator>=</operator> <name>opt_map_channel</name></expr> }</block></expr>,

<expr><literal type="string">"map an audio channel from one stream to another"</literal></expr>, <expr><literal type="string">"file.stream.channel[:syncfile.syncstream]"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"map_metadata"</literal></expr>, <expr><name>HAS_ARG</name> <operator>|</operator> <name>OPT_STRING</name> <operator>|</operator> <name>OPT_SPEC</name> <operator>|</operator>

<name>OPT_OUTPUT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>off</name> <operator>=</operator> <macro><name>OFFSET</name><argument_list>(<argument>metadata_map</argument>)</argument_list></macro></expr> }</block></expr>,

<expr><literal type="string">"set metadata information of outfile from infile"</literal></expr>,

<expr><literal type="string">"outfile[,metadata]:infile[,metadata]"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"map_chapters"</literal></expr>, <expr><name>HAS_ARG</name> <operator>|</operator> <name>OPT_INT</name> <operator>|</operator> <name>OPT_EXPERT</name> <operator>|</operator> <name>OPT_OFFSET</name> <operator>|</operator>

<name>OPT_OUTPUT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>off</name> <operator>=</operator> <macro><name>OFFSET</name><argument_list>(<argument>chapters_input_file</argument>)</argument_list></macro></expr> }</block></expr>,

<expr><literal type="string">"set chapters mapping"</literal></expr>, <expr><literal type="string">"input_file_index"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"t"</literal></expr>, <expr><name>HAS_ARG</name> <operator>|</operator> <name>OPT_TIME</name> <operator>|</operator> <name>OPT_OFFSET</name> <operator>|</operator>

<name>OPT_INPUT</name> <operator>|</operator> <name>OPT_OUTPUT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>off</name> <operator>=</operator> <macro><name>OFFSET</name><argument_list>(<argument>recording_time</argument>)</argument_list></macro></expr> }</block></expr>,

<expr><literal type="string">"record or transcode \"duration\" seconds of audio/video"</literal></expr>,

<expr><literal type="string">"duration"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"to"</literal></expr>, <expr><name>HAS_ARG</name> <operator>|</operator> <name>OPT_TIME</name> <operator>|</operator> <name>OPT_OFFSET</name> <operator>|</operator> <name>OPT_INPUT</name> <operator>|</operator> <name>OPT_OUTPUT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>off</name> <operator>=</operator> <macro><name>OFFSET</name><argument_list>(<argument>stop_time</argument>)</argument_list></macro></expr> }</block></expr>,

<expr><literal type="string">"record or transcode stop time"</literal></expr>, <expr><literal type="string">"time_stop"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"fs"</literal></expr>, <expr><name>HAS_ARG</name> <operator>|</operator> <name>OPT_INT64</name> <operator>|</operator> <name>OPT_OFFSET</name> <operator>|</operator> <name>OPT_OUTPUT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>off</name> <operator>=</operator> <macro><name>OFFSET</name><argument_list>(<argument>limit_filesize</argument>)</argument_list></macro></expr> }</block></expr>,

<expr><literal type="string">"set the limit file size in bytes"</literal></expr>, <expr><literal type="string">"limit_size"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"ss"</literal></expr>, <expr><name>HAS_ARG</name> <operator>|</operator> <name>OPT_TIME</name> <operator>|</operator> <name>OPT_OFFSET</name> <operator>|</operator>

<name>OPT_INPUT</name> <operator>|</operator> <name>OPT_OUTPUT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>off</name> <operator>=</operator> <macro><name>OFFSET</name><argument_list>(<argument>start_time</argument>)</argument_list></macro></expr> }</block></expr>,

<expr><literal type="string">"set the start time offset"</literal></expr>, <expr><literal type="string">"time_off"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"sseof"</literal></expr>, <expr><name>HAS_ARG</name> <operator>|</operator> <name>OPT_TIME</name> <operator>|</operator> <name>OPT_OFFSET</name> <operator>|</operator>

<name>OPT_INPUT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>off</name> <operator>=</operator> <macro><name>OFFSET</name><argument_list>(<argument>start_time_eof</argument>)</argument_list></macro></expr> }</block></expr>,

<expr><literal type="string">"set the start time offset relative to EOF"</literal></expr>, <expr><literal type="string">"time_off"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"seek_timestamp"</literal></expr>, <expr><name>HAS_ARG</name> <operator>|</operator> <name>OPT_INT</name> <operator>|</operator> <name>OPT_OFFSET</name> <operator>|</operator>

<name>OPT_INPUT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>off</name> <operator>=</operator> <macro><name>OFFSET</name><argument_list>(<argument>seek_timestamp</argument>)</argument_list></macro></expr> }</block></expr>,

<expr><literal type="string">"enable/disable seeking by timestamp with -ss"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"accurate_seek"</literal></expr>, <expr><name>OPT_BOOL</name> <operator>|</operator> <name>OPT_OFFSET</name> <operator>|</operator> <name>OPT_EXPERT</name> <operator>|</operator>

<name>OPT_INPUT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>off</name> <operator>=</operator> <macro><name>OFFSET</name><argument_list>(<argument>accurate_seek</argument>)</argument_list></macro></expr> }</block></expr>,

<expr><literal type="string">"enable/disable accurate seeking with -ss"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"itsoffset"</literal></expr>, <expr><name>HAS_ARG</name> <operator>|</operator> <name>OPT_TIME</name> <operator>|</operator> <name>OPT_OFFSET</name> <operator>|</operator>

<name>OPT_EXPERT</name> <operator>|</operator> <name>OPT_INPUT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>off</name> <operator>=</operator> <macro><name>OFFSET</name><argument_list>(<argument>input_ts_offset</argument>)</argument_list></macro></expr> }</block></expr>,

<expr><literal type="string">"set the input ts offset"</literal></expr>, <expr><literal type="string">"time_off"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"itsscale"</literal></expr>, <expr><name>HAS_ARG</name> <operator>|</operator> <name>OPT_DOUBLE</name> <operator>|</operator> <name>OPT_SPEC</name> <operator>|</operator>

<name>OPT_EXPERT</name> <operator>|</operator> <name>OPT_INPUT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>off</name> <operator>=</operator> <macro><name>OFFSET</name><argument_list>(<argument>ts_scale</argument>)</argument_list></macro></expr> }</block></expr>,

<expr><literal type="string">"set the input ts scale"</literal></expr>, <expr><literal type="string">"scale"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"timestamp"</literal></expr>, <expr><name>HAS_ARG</name> <operator>|</operator> <name>OPT_PERFILE</name> <operator>|</operator> <name>OPT_OUTPUT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>func_arg</name> <operator>=</operator> <name>opt_recording_timestamp</name></expr> }</block></expr>,

<expr><literal type="string">"set the recording timestamp ('now' to set the current time)"</literal></expr>, <expr><literal type="string">"time"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"metadata"</literal></expr>, <expr><name>HAS_ARG</name> <operator>|</operator> <name>OPT_STRING</name> <operator>|</operator> <name>OPT_SPEC</name> <operator>|</operator> <name>OPT_OUTPUT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>off</name> <operator>=</operator> <macro><name>OFFSET</name><argument_list>(<argument>metadata</argument>)</argument_list></macro></expr> }</block></expr>,

<expr><literal type="string">"add metadata"</literal></expr>, <expr><literal type="string">"string=string"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"program"</literal></expr>, <expr><name>HAS_ARG</name> <operator>|</operator> <name>OPT_STRING</name> <operator>|</operator> <name>OPT_SPEC</name> <operator>|</operator> <name>OPT_OUTPUT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>off</name> <operator>=</operator> <macro><name>OFFSET</name><argument_list>(<argument>program</argument>)</argument_list></macro></expr> }</block></expr>,

<expr><literal type="string">"add program with specified streams"</literal></expr>, <expr><literal type="string">"title=string:st=number..."</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"dframes"</literal></expr>, <expr><name>HAS_ARG</name> <operator>|</operator> <name>OPT_PERFILE</name> <operator>|</operator> <name>OPT_EXPERT</name> <operator>|</operator>

<name>OPT_OUTPUT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>func_arg</name> <operator>=</operator> <name>opt_data_frames</name></expr> }</block></expr>,

<expr><literal type="string">"set the number of data frames to output"</literal></expr>, <expr><literal type="string">"number"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"benchmark"</literal></expr>, <expr><name>OPT_BOOL</name> <operator>|</operator> <name>OPT_EXPERT</name></expr>, <expr><block>{ <expr><operator>&amp;</operator><name>do_benchmark</name></expr> }</block></expr>,

<expr><literal type="string">"add timings for benchmarking"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"benchmark_all"</literal></expr>, <expr><name>OPT_BOOL</name> <operator>|</operator> <name>OPT_EXPERT</name></expr>, <expr><block>{ <expr><operator>&amp;</operator><name>do_benchmark_all</name></expr> }</block></expr>,

<expr><literal type="string">"add timings for each task"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"progress"</literal></expr>, <expr><name>HAS_ARG</name> <operator>|</operator> <name>OPT_EXPERT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>func_arg</name> <operator>=</operator> <name>opt_progress</name></expr> }</block></expr>,

<expr><literal type="string">"write program-readable progress information"</literal></expr>, <expr><literal type="string">"url"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"stdin"</literal></expr>, <expr><name>OPT_BOOL</name> <operator>|</operator> <name>OPT_EXPERT</name></expr>, <expr><block>{ <expr><operator>&amp;</operator><name>stdin_interaction</name></expr> }</block></expr>,

<expr><literal type="string">"enable or disable interaction on standard input"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"timelimit"</literal></expr>, <expr><name>HAS_ARG</name> <operator>|</operator> <name>OPT_EXPERT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>func_arg</name> <operator>=</operator> <name>opt_timelimit</name></expr> }</block></expr>,

<expr><literal type="string">"set max runtime in seconds in CPU user time"</literal></expr>, <expr><literal type="string">"limit"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"dump"</literal></expr>, <expr><name>OPT_BOOL</name> <operator>|</operator> <name>OPT_EXPERT</name></expr>, <expr><block>{ <expr><operator>&amp;</operator><name>do_pkt_dump</name></expr> }</block></expr>,

<expr><literal type="string">"dump each input packet"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"hex"</literal></expr>, <expr><name>OPT_BOOL</name> <operator>|</operator> <name>OPT_EXPERT</name></expr>, <expr><block>{ <expr><operator>&amp;</operator><name>do_hex_dump</name></expr> }</block></expr>,

<expr><literal type="string">"when dumping packets, also dump the payload"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"re"</literal></expr>, <expr><name>OPT_BOOL</name> <operator>|</operator> <name>OPT_EXPERT</name> <operator>|</operator> <name>OPT_OFFSET</name> <operator>|</operator>

<name>OPT_INPUT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>off</name> <operator>=</operator> <macro><name>OFFSET</name><argument_list>(<argument>rate_emu</argument>)</argument_list></macro></expr> }</block></expr>,

<expr><literal type="string">"read input at native frame rate"</literal></expr>, <expr><literal type="string">""</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"target"</literal></expr>, <expr><name>HAS_ARG</name> <operator>|</operator> <name>OPT_PERFILE</name> <operator>|</operator> <name>OPT_OUTPUT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>func_arg</name> <operator>=</operator> <name>opt_target</name></expr> }</block></expr>,

<expr><literal type="string">"specify target file type (\"vcd\", \"svcd\", \"dvd\", \"dv\" or \"dv50\" "</literal>

<literal type="string">"with optional prefixes \"pal-\", \"ntsc-\" or \"film-\")"</literal></expr>, <expr><literal type="string">"type"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"vsync"</literal></expr>, <expr><name>HAS_ARG</name> <operator>|</operator> <name>OPT_EXPERT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>func_arg</name> <operator>=</operator> <name>opt_vsync</name></expr> }</block></expr>,

<expr><literal type="string">"video sync method"</literal></expr>, <expr><literal type="string">""</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"frame_drop_threshold"</literal></expr>, <expr><name>HAS_ARG</name> <operator>|</operator> <name>OPT_FLOAT</name> <operator>|</operator> <name>OPT_EXPERT</name></expr>, <expr><block>{ <expr><operator>&amp;</operator><name>frame_drop_threshold</name></expr> }</block></expr>,

<expr><literal type="string">"frame drop threshold"</literal></expr>, <expr><literal type="string">""</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"async"</literal></expr>, <expr><name>HAS_ARG</name> <operator>|</operator> <name>OPT_INT</name> <operator>|</operator> <name>OPT_EXPERT</name></expr>, <expr><block>{ <expr><operator>&amp;</operator><name>audio_sync_method</name></expr> }</block></expr>,

<expr><literal type="string">"audio sync method"</literal></expr>, <expr><literal type="string">""</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"adrift_threshold"</literal></expr>, <expr><name>HAS_ARG</name> <operator>|</operator> <name>OPT_FLOAT</name> <operator>|</operator> <name>OPT_EXPERT</name></expr>, <expr><block>{ <expr><operator>&amp;</operator><name>audio_drift_threshold</name></expr> }</block></expr>,

<expr><literal type="string">"audio drift threshold"</literal></expr>, <expr><literal type="string">"threshold"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"copyts"</literal></expr>, <expr><name>OPT_BOOL</name> <operator>|</operator> <name>OPT_EXPERT</name></expr>, <expr><block>{ <expr><operator>&amp;</operator><name>copy_ts</name></expr> }</block></expr>,

<expr><literal type="string">"copy timestamps"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"start_at_zero"</literal></expr>, <expr><name>OPT_BOOL</name> <operator>|</operator> <name>OPT_EXPERT</name></expr>, <expr><block>{ <expr><operator>&amp;</operator><name>start_at_zero</name></expr> }</block></expr>,

<expr><literal type="string">"shift input timestamps to start at 0 when using copyts"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"copytb"</literal></expr>, <expr><name>HAS_ARG</name> <operator>|</operator> <name>OPT_INT</name> <operator>|</operator> <name>OPT_EXPERT</name></expr>, <expr><block>{ <expr><operator>&amp;</operator><name>copy_tb</name></expr> }</block></expr>,

<expr><literal type="string">"copy input stream time base when stream copying"</literal></expr>, <expr><literal type="string">"mode"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"shortest"</literal></expr>, <expr><name>OPT_BOOL</name> <operator>|</operator> <name>OPT_EXPERT</name> <operator>|</operator> <name>OPT_OFFSET</name> <operator>|</operator>

<name>OPT_OUTPUT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>off</name> <operator>=</operator> <macro><name>OFFSET</name><argument_list>(<argument>shortest</argument>)</argument_list></macro></expr> }</block></expr>,

<expr><literal type="string">"finish encoding within shortest input"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"bitexact"</literal></expr>, <expr><name>OPT_BOOL</name> <operator>|</operator> <name>OPT_EXPERT</name> <operator>|</operator> <name>OPT_OFFSET</name> <operator>|</operator>

<name>OPT_OUTPUT</name> <operator>|</operator> <name>OPT_INPUT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>off</name> <operator>=</operator> <macro><name>OFFSET</name><argument_list>(<argument>bitexact</argument>)</argument_list></macro></expr> }</block></expr>,

<expr><literal type="string">"bitexact mode"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"apad"</literal></expr>, <expr><name>OPT_STRING</name> <operator>|</operator> <name>HAS_ARG</name> <operator>|</operator> <name>OPT_SPEC</name> <operator>|</operator>

<name>OPT_OUTPUT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>off</name> <operator>=</operator> <macro><name>OFFSET</name><argument_list>(<argument>apad</argument>)</argument_list></macro></expr> }</block></expr>,

<expr><literal type="string">"audio pad"</literal></expr>, <expr><literal type="string">""</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"dts_delta_threshold"</literal></expr>, <expr><name>HAS_ARG</name> <operator>|</operator> <name>OPT_FLOAT</name> <operator>|</operator> <name>OPT_EXPERT</name></expr>, <expr><block>{ <expr><operator>&amp;</operator><name>dts_delta_threshold</name></expr> }</block></expr>,

<expr><literal type="string">"timestamp discontinuity delta threshold"</literal></expr>, <expr><literal type="string">"threshold"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"dts_error_threshold"</literal></expr>, <expr><name>HAS_ARG</name> <operator>|</operator> <name>OPT_FLOAT</name> <operator>|</operator> <name>OPT_EXPERT</name></expr>, <expr><block>{ <expr><operator>&amp;</operator><name>dts_error_threshold</name></expr> }</block></expr>,

<expr><literal type="string">"timestamp error delta threshold"</literal></expr>, <expr><literal type="string">"threshold"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"xerror"</literal></expr>, <expr><name>OPT_BOOL</name> <operator>|</operator> <name>OPT_EXPERT</name></expr>, <expr><block>{ <expr><operator>&amp;</operator><name>exit_on_error</name></expr> }</block></expr>,

<expr><literal type="string">"exit on error"</literal></expr>, <expr><literal type="string">"error"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"abort_on"</literal></expr>, <expr><name>HAS_ARG</name> <operator>|</operator> <name>OPT_EXPERT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>func_arg</name> <operator>=</operator> <name>opt_abort_on</name></expr> }</block></expr>,

<expr><literal type="string">"abort on the specified condition flags"</literal></expr>, <expr><literal type="string">"flags"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"copyinkf"</literal></expr>, <expr><name>OPT_BOOL</name> <operator>|</operator> <name>OPT_EXPERT</name> <operator>|</operator> <name>OPT_SPEC</name> <operator>|</operator>

<name>OPT_OUTPUT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>off</name> <operator>=</operator> <macro><name>OFFSET</name><argument_list>(<argument>copy_initial_nonkeyframes</argument>)</argument_list></macro></expr> }</block></expr>,

<expr><literal type="string">"copy initial non-keyframes"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"copypriorss"</literal></expr>, <expr><name>OPT_INT</name> <operator>|</operator> <name>HAS_ARG</name> <operator>|</operator> <name>OPT_EXPERT</name> <operator>|</operator> <name>OPT_SPEC</name> <operator>|</operator> <name>OPT_OUTPUT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>off</name> <operator>=</operator> <macro><name>OFFSET</name><argument_list>(<argument>copy_prior_start</argument>)</argument_list></macro></expr> }</block></expr>,

<expr><literal type="string">"copy or discard frames before start time"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"frames"</literal></expr>, <expr><name>OPT_INT64</name> <operator>|</operator> <name>HAS_ARG</name> <operator>|</operator> <name>OPT_SPEC</name> <operator>|</operator> <name>OPT_OUTPUT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>off</name> <operator>=</operator> <macro><name>OFFSET</name><argument_list>(<argument>max_frames</argument>)</argument_list></macro></expr> }</block></expr>,

<expr><literal type="string">"set the number of frames to output"</literal></expr>, <expr><literal type="string">"number"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"tag"</literal></expr>, <expr><name>OPT_STRING</name> <operator>|</operator> <name>HAS_ARG</name> <operator>|</operator> <name>OPT_SPEC</name> <operator>|</operator>

<name>OPT_EXPERT</name> <operator>|</operator> <name>OPT_OUTPUT</name> <operator>|</operator> <name>OPT_INPUT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>off</name> <operator>=</operator> <macro><name>OFFSET</name><argument_list>(<argument>codec_tags</argument>)</argument_list></macro></expr> }</block></expr>,

<expr><literal type="string">"force codec tag/fourcc"</literal></expr>, <expr><literal type="string">"fourcc/tag"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"q"</literal></expr>, <expr><name>HAS_ARG</name> <operator>|</operator> <name>OPT_EXPERT</name> <operator>|</operator> <name>OPT_DOUBLE</name> <operator>|</operator>

<name>OPT_SPEC</name> <operator>|</operator> <name>OPT_OUTPUT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>off</name> <operator>=</operator> <macro><name>OFFSET</name><argument_list>(<argument>qscale</argument>)</argument_list></macro></expr> }</block></expr>,

<expr><literal type="string">"use fixed quality scale (VBR)"</literal></expr>, <expr><literal type="string">"q"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"qscale"</literal></expr>, <expr><name>HAS_ARG</name> <operator>|</operator> <name>OPT_EXPERT</name> <operator>|</operator> <name>OPT_PERFILE</name> <operator>|</operator>

<name>OPT_OUTPUT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>func_arg</name> <operator>=</operator> <name>opt_qscale</name></expr> }</block></expr>,

<expr><literal type="string">"use fixed quality scale (VBR)"</literal></expr>, <expr><literal type="string">"q"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"profile"</literal></expr>, <expr><name>HAS_ARG</name> <operator>|</operator> <name>OPT_EXPERT</name> <operator>|</operator> <name>OPT_PERFILE</name> <operator>|</operator> <name>OPT_OUTPUT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>func_arg</name> <operator>=</operator> <name>opt_profile</name></expr> }</block></expr>,

<expr><literal type="string">"set profile"</literal></expr>, <expr><literal type="string">"profile"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"filter"</literal></expr>, <expr><name>HAS_ARG</name> <operator>|</operator> <name>OPT_STRING</name> <operator>|</operator> <name>OPT_SPEC</name> <operator>|</operator> <name>OPT_OUTPUT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>off</name> <operator>=</operator> <macro><name>OFFSET</name><argument_list>(<argument>filters</argument>)</argument_list></macro></expr> }</block></expr>,

<expr><literal type="string">"set stream filtergraph"</literal></expr>, <expr><literal type="string">"filter_graph"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"filter_threads"</literal></expr>, <expr><name>HAS_ARG</name> <operator>|</operator> <name>OPT_INT</name></expr>, <expr><block>{ <expr><operator>&amp;</operator><name>filter_nbthreads</name></expr> }</block></expr>,

<expr><literal type="string">"number of non-complex filter threads"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"filter_script"</literal></expr>, <expr><name>HAS_ARG</name> <operator>|</operator> <name>OPT_STRING</name> <operator>|</operator> <name>OPT_SPEC</name> <operator>|</operator> <name>OPT_OUTPUT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>off</name> <operator>=</operator> <macro><name>OFFSET</name><argument_list>(<argument>filter_scripts</argument>)</argument_list></macro></expr> }</block></expr>,

<expr><literal type="string">"read stream filtergraph description from a file"</literal></expr>, <expr><literal type="string">"filename"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"reinit_filter"</literal></expr>, <expr><name>HAS_ARG</name> <operator>|</operator> <name>OPT_INT</name> <operator>|</operator> <name>OPT_SPEC</name> <operator>|</operator> <name>OPT_INPUT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>off</name> <operator>=</operator> <macro><name>OFFSET</name><argument_list>(<argument>reinit_filters</argument>)</argument_list></macro></expr> }</block></expr>,

<expr><literal type="string">"reinit filtergraph on input parameter changes"</literal></expr>, <expr><literal type="string">""</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"filter_complex"</literal></expr>, <expr><name>HAS_ARG</name> <operator>|</operator> <name>OPT_EXPERT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>func_arg</name> <operator>=</operator> <name>opt_filter_complex</name></expr> }</block></expr>,

<expr><literal type="string">"create a complex filtergraph"</literal></expr>, <expr><literal type="string">"graph_description"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"filter_complex_threads"</literal></expr>, <expr><name>HAS_ARG</name> <operator>|</operator> <name>OPT_INT</name></expr>, <expr><block>{ <expr><operator>&amp;</operator><name>filter_complex_nbthreads</name></expr> }</block></expr>,

<expr><literal type="string">"number of threads for -filter_complex"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"lavfi"</literal></expr>, <expr><name>HAS_ARG</name> <operator>|</operator> <name>OPT_EXPERT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>func_arg</name> <operator>=</operator> <name>opt_filter_complex</name></expr> }</block></expr>,

<expr><literal type="string">"create a complex filtergraph"</literal></expr>, <expr><literal type="string">"graph_description"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"filter_complex_script"</literal></expr>, <expr><name>HAS_ARG</name> <operator>|</operator> <name>OPT_EXPERT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>func_arg</name> <operator>=</operator> <name>opt_filter_complex_script</name></expr> }</block></expr>,

<expr><literal type="string">"read complex filtergraph description from a file"</literal></expr>, <expr><literal type="string">"filename"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"stats"</literal></expr>, <expr><name>OPT_BOOL</name></expr>, <expr><block>{ <expr><operator>&amp;</operator><name>print_stats</name></expr> }</block></expr>,

<expr><literal type="string">"print progress report during encoding"</literal></expr>, }</block></expr>,

<expr><block>{ <expr><literal type="string">"attach"</literal></expr>, <expr><name>HAS_ARG</name> <operator>|</operator> <name>OPT_PERFILE</name> <operator>|</operator> <name>OPT_EXPERT</name> <operator>|</operator>

<name>OPT_OUTPUT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>func_arg</name> <operator>=</operator> <name>opt_attach</name></expr> }</block></expr>,

<expr><literal type="string">"add an attachment to the output file"</literal></expr>, <expr><literal type="string">"filename"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"dump_attachment"</literal></expr>, <expr><name>HAS_ARG</name> <operator>|</operator> <name>OPT_STRING</name> <operator>|</operator> <name>OPT_SPEC</name> <operator>|</operator>

<name>OPT_EXPERT</name> <operator>|</operator> <name>OPT_INPUT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>off</name> <operator>=</operator> <macro><name>OFFSET</name><argument_list>(<argument>dump_attachment</argument>)</argument_list></macro></expr> }</block></expr>,

<expr><literal type="string">"extract an attachment into a file"</literal></expr>, <expr><literal type="string">"filename"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"stream_loop"</literal></expr>, <expr><name>OPT_INT</name> <operator>|</operator> <name>HAS_ARG</name> <operator>|</operator> <name>OPT_EXPERT</name> <operator>|</operator> <name>OPT_INPUT</name> <operator>|</operator>

<name>OPT_OFFSET</name></expr>, <expr><block>{ <expr><operator>.</operator><name>off</name> <operator>=</operator> <macro><name>OFFSET</name><argument_list>(<argument>loop</argument>)</argument_list></macro></expr> }</block></expr>, <expr><literal type="string">"set number of times input stream shall be looped"</literal></expr>, <expr><literal type="string">"loop count"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"debug_ts"</literal></expr>, <expr><name>OPT_BOOL</name> <operator>|</operator> <name>OPT_EXPERT</name></expr>, <expr><block>{ <expr><operator>&amp;</operator><name>debug_ts</name></expr> }</block></expr>,

<expr><literal type="string">"print timestamp debugging info"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"max_error_rate"</literal></expr>, <expr><name>HAS_ARG</name> <operator>|</operator> <name>OPT_FLOAT</name></expr>, <expr><block>{ <expr><operator>&amp;</operator><name>max_error_rate</name></expr> }</block></expr>,

<expr><literal type="string">"ratio of errors (0.0: no errors, 1.0: 100% errors) above which ffmpeg returns an error instead of success."</literal></expr>, <expr><literal type="string">"maximum error rate"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"discard"</literal></expr>, <expr><name>OPT_STRING</name> <operator>|</operator> <name>HAS_ARG</name> <operator>|</operator> <name>OPT_SPEC</name> <operator>|</operator>

<name>OPT_INPUT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>off</name> <operator>=</operator> <macro><name>OFFSET</name><argument_list>(<argument>discard</argument>)</argument_list></macro></expr> }</block></expr>,

<expr><literal type="string">"discard"</literal></expr>, <expr><literal type="string">""</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"disposition"</literal></expr>, <expr><name>OPT_STRING</name> <operator>|</operator> <name>HAS_ARG</name> <operator>|</operator> <name>OPT_SPEC</name> <operator>|</operator>

<name>OPT_OUTPUT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>off</name> <operator>=</operator> <macro><name>OFFSET</name><argument_list>(<argument>disposition</argument>)</argument_list></macro></expr> }</block></expr>,

<expr><literal type="string">"disposition"</literal></expr>, <expr><literal type="string">""</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"thread_queue_size"</literal></expr>, <expr><name>HAS_ARG</name> <operator>|</operator> <name>OPT_INT</name> <operator>|</operator> <name>OPT_OFFSET</name> <operator>|</operator> <name>OPT_EXPERT</name> <operator>|</operator> <name>OPT_INPUT</name></expr>,

<expr><block>{ <expr><operator>.</operator><name>off</name> <operator>=</operator> <macro><name>OFFSET</name><argument_list>(<argument>thread_queue_size</argument>)</argument_list></macro></expr> }</block></expr>,

<expr><literal type="string">"set the maximum number of queued packets from the demuxer"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"find_stream_info"</literal></expr>, <expr><name>OPT_BOOL</name> <operator>|</operator> <name>OPT_PERFILE</name> <operator>|</operator> <name>OPT_INPUT</name> <operator>|</operator> <name>OPT_EXPERT</name></expr>, <expr><block>{ <expr><operator>&amp;</operator><name>find_stream_info</name></expr> }</block></expr>,

<expr><literal type="string">"read and decode the streams to fill missing information with heuristics"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"vframes"</literal></expr>, <expr><name>OPT_VIDEO</name> <operator>|</operator> <name>HAS_ARG</name> <operator>|</operator> <name>OPT_PERFILE</name> <operator>|</operator> <name>OPT_OUTPUT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>func_arg</name> <operator>=</operator> <name>opt_video_frames</name></expr> }</block></expr>,

<expr><literal type="string">"set the number of video frames to output"</literal></expr>, <expr><literal type="string">"number"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"r"</literal></expr>, <expr><name>OPT_VIDEO</name> <operator>|</operator> <name>HAS_ARG</name> <operator>|</operator> <name>OPT_STRING</name> <operator>|</operator> <name>OPT_SPEC</name> <operator>|</operator>

<name>OPT_INPUT</name> <operator>|</operator> <name>OPT_OUTPUT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>off</name> <operator>=</operator> <macro><name>OFFSET</name><argument_list>(<argument>frame_rates</argument>)</argument_list></macro></expr> }</block></expr>,

<expr><literal type="string">"set frame rate (Hz value, fraction or abbreviation)"</literal></expr>, <expr><literal type="string">"rate"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"s"</literal></expr>, <expr><name>OPT_VIDEO</name> <operator>|</operator> <name>HAS_ARG</name> <operator>|</operator> <name>OPT_SUBTITLE</name> <operator>|</operator> <name>OPT_STRING</name> <operator>|</operator> <name>OPT_SPEC</name> <operator>|</operator>

<name>OPT_INPUT</name> <operator>|</operator> <name>OPT_OUTPUT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>off</name> <operator>=</operator> <macro><name>OFFSET</name><argument_list>(<argument>frame_sizes</argument>)</argument_list></macro></expr> }</block></expr>,

<expr><literal type="string">"set frame size (WxH or abbreviation)"</literal></expr>, <expr><literal type="string">"size"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"aspect"</literal></expr>, <expr><name>OPT_VIDEO</name> <operator>|</operator> <name>HAS_ARG</name> <operator>|</operator> <name>OPT_STRING</name> <operator>|</operator> <name>OPT_SPEC</name> <operator>|</operator>

<name>OPT_OUTPUT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>off</name> <operator>=</operator> <macro><name>OFFSET</name><argument_list>(<argument>frame_aspect_ratios</argument>)</argument_list></macro></expr> }</block></expr>,

<expr><literal type="string">"set aspect ratio (4:3, 16:9 or 1.3333, 1.7777)"</literal></expr>, <expr><literal type="string">"aspect"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"pix_fmt"</literal></expr>, <expr><name>OPT_VIDEO</name> <operator>|</operator> <name>HAS_ARG</name> <operator>|</operator> <name>OPT_EXPERT</name> <operator>|</operator> <name>OPT_STRING</name> <operator>|</operator> <name>OPT_SPEC</name> <operator>|</operator>

<name>OPT_INPUT</name> <operator>|</operator> <name>OPT_OUTPUT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>off</name> <operator>=</operator> <macro><name>OFFSET</name><argument_list>(<argument>frame_pix_fmts</argument>)</argument_list></macro></expr> }</block></expr>,

<expr><literal type="string">"set pixel format"</literal></expr>, <expr><literal type="string">"format"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"bits_per_raw_sample"</literal></expr>, <expr><name>OPT_VIDEO</name> <operator>|</operator> <name>OPT_INT</name> <operator>|</operator> <name>HAS_ARG</name></expr>, <expr><block>{ <expr><operator>&amp;</operator><name>frame_bits_per_raw_sample</name></expr> }</block></expr>,

<expr><literal type="string">"set the number of bits per raw sample"</literal></expr>, <expr><literal type="string">"number"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"intra"</literal></expr>, <expr><name>OPT_VIDEO</name> <operator>|</operator> <name>OPT_BOOL</name> <operator>|</operator> <name>OPT_EXPERT</name></expr>, <expr><block>{ <expr><operator>&amp;</operator><name>intra_only</name></expr> }</block></expr>,

<expr><literal type="string">"deprecated use -g 1"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"vn"</literal></expr>, <expr><name>OPT_VIDEO</name> <operator>|</operator> <name>OPT_BOOL</name> <operator>|</operator> <name>OPT_OFFSET</name> <operator>|</operator> <name>OPT_INPUT</name> <operator>|</operator> <name>OPT_OUTPUT</name></expr>,<expr><block>{ <expr><operator>.</operator><name>off</name> <operator>=</operator> <macro><name>OFFSET</name><argument_list>(<argument>video_disable</argument>)</argument_list></macro></expr> }</block></expr>,

<expr><literal type="string">"disable video"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"rc_override"</literal></expr>, <expr><name>OPT_VIDEO</name> <operator>|</operator> <name>HAS_ARG</name> <operator>|</operator> <name>OPT_EXPERT</name> <operator>|</operator> <name>OPT_STRING</name> <operator>|</operator> <name>OPT_SPEC</name> <operator>|</operator>

<name>OPT_OUTPUT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>off</name> <operator>=</operator> <macro><name>OFFSET</name><argument_list>(<argument>rc_overrides</argument>)</argument_list></macro></expr> }</block></expr>,

<expr><literal type="string">"rate control override for specific intervals"</literal></expr>, <expr><literal type="string">"override"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"vcodec"</literal></expr>, <expr><name>OPT_VIDEO</name> <operator>|</operator> <name>HAS_ARG</name> <operator>|</operator> <name>OPT_PERFILE</name> <operator>|</operator> <name>OPT_INPUT</name> <operator>|</operator>

<name>OPT_OUTPUT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>func_arg</name> <operator>=</operator> <name>opt_video_codec</name></expr> }</block></expr>,

<expr><literal type="string">"force video codec ('copy' to copy stream)"</literal></expr>, <expr><literal type="string">"codec"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"sameq"</literal></expr>, <expr><name>OPT_VIDEO</name> <operator>|</operator> <name>OPT_EXPERT</name></expr> , <expr><block>{ <expr><operator>.</operator><name>func_arg</name> <operator>=</operator> <name>opt_sameq</name></expr> }</block></expr>,

<expr><literal type="string">"Removed"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"same_quant"</literal></expr>, <expr><name>OPT_VIDEO</name> <operator>|</operator> <name>OPT_EXPERT</name></expr> , <expr><block>{ <expr><operator>.</operator><name>func_arg</name> <operator>=</operator> <name>opt_sameq</name></expr> }</block></expr>,

<expr><literal type="string">"Removed"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"timecode"</literal></expr>, <expr><name>OPT_VIDEO</name> <operator>|</operator> <name>HAS_ARG</name> <operator>|</operator> <name>OPT_PERFILE</name> <operator>|</operator> <name>OPT_OUTPUT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>func_arg</name> <operator>=</operator> <name>opt_timecode</name></expr> }</block></expr>,

<expr><literal type="string">"set initial TimeCode value."</literal></expr>, <expr><literal type="string">"hh:mm:ss[:;.]ff"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"pass"</literal></expr>, <expr><name>OPT_VIDEO</name> <operator>|</operator> <name>HAS_ARG</name> <operator>|</operator> <name>OPT_SPEC</name> <operator>|</operator> <name>OPT_INT</name> <operator>|</operator> <name>OPT_OUTPUT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>off</name> <operator>=</operator> <macro><name>OFFSET</name><argument_list>(<argument>pass</argument>)</argument_list></macro></expr> }</block></expr>,

<expr><literal type="string">"select the pass number (1 to 3)"</literal></expr>, <expr><literal type="string">"n"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"passlogfile"</literal></expr>, <expr><name>OPT_VIDEO</name> <operator>|</operator> <name>HAS_ARG</name> <operator>|</operator> <name>OPT_STRING</name> <operator>|</operator> <name>OPT_EXPERT</name> <operator>|</operator> <name>OPT_SPEC</name> <operator>|</operator>

<name>OPT_OUTPUT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>off</name> <operator>=</operator> <macro><name>OFFSET</name><argument_list>(<argument>passlogfiles</argument>)</argument_list></macro></expr> }</block></expr>,

<expr><literal type="string">"select two pass log file name prefix"</literal></expr>, <expr><literal type="string">"prefix"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"deinterlace"</literal></expr>, <expr><name>OPT_VIDEO</name> <operator>|</operator> <name>OPT_BOOL</name> <operator>|</operator> <name>OPT_EXPERT</name></expr>, <expr><block>{ <expr><operator>&amp;</operator><name>do_deinterlace</name></expr> }</block></expr>,

<expr><literal type="string">"this option is deprecated, use the yadif filter instead"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"psnr"</literal></expr>, <expr><name>OPT_VIDEO</name> <operator>|</operator> <name>OPT_BOOL</name> <operator>|</operator> <name>OPT_EXPERT</name></expr>, <expr><block>{ <expr><operator>&amp;</operator><name>do_psnr</name></expr> }</block></expr>,

<expr><literal type="string">"calculate PSNR of compressed frames"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"vstats"</literal></expr>, <expr><name>OPT_VIDEO</name> <operator>|</operator> <name>OPT_EXPERT</name></expr> , <expr><block>{ <expr><operator>.</operator><name>func_arg</name> <operator>=</operator> <name>opt_vstats</name></expr> }</block></expr>,

<expr><literal type="string">"dump video coding statistics to file"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"vstats_file"</literal></expr>, <expr><name>OPT_VIDEO</name> <operator>|</operator> <name>HAS_ARG</name> <operator>|</operator> <name>OPT_EXPERT</name></expr> , <expr><block>{ <expr><operator>.</operator><name>func_arg</name> <operator>=</operator> <name>opt_vstats_file</name></expr> }</block></expr>,

<expr><literal type="string">"dump video coding statistics to file"</literal></expr>, <expr><literal type="string">"file"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"vstats_version"</literal></expr>, <expr><name>OPT_VIDEO</name> <operator>|</operator> <name>OPT_INT</name> <operator>|</operator> <name>HAS_ARG</name> <operator>|</operator> <name>OPT_EXPERT</name></expr> , <expr><block>{ <expr><operator>&amp;</operator><name>vstats_version</name></expr> }</block></expr>,

<expr><literal type="string">"Version of the vstats format to use."</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"vf"</literal></expr>, <expr><name>OPT_VIDEO</name> <operator>|</operator> <name>HAS_ARG</name> <operator>|</operator> <name>OPT_PERFILE</name> <operator>|</operator> <name>OPT_OUTPUT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>func_arg</name> <operator>=</operator> <name>opt_video_filters</name></expr> }</block></expr>,

<expr><literal type="string">"set video filters"</literal></expr>, <expr><literal type="string">"filter_graph"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"intra_matrix"</literal></expr>, <expr><name>OPT_VIDEO</name> <operator>|</operator> <name>HAS_ARG</name> <operator>|</operator> <name>OPT_EXPERT</name> <operator>|</operator> <name>OPT_STRING</name> <operator>|</operator> <name>OPT_SPEC</name> <operator>|</operator>

<name>OPT_OUTPUT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>off</name> <operator>=</operator> <macro><name>OFFSET</name><argument_list>(<argument>intra_matrices</argument>)</argument_list></macro></expr> }</block></expr>,

<expr><literal type="string">"specify intra matrix coeffs"</literal></expr>, <expr><literal type="string">"matrix"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"inter_matrix"</literal></expr>, <expr><name>OPT_VIDEO</name> <operator>|</operator> <name>HAS_ARG</name> <operator>|</operator> <name>OPT_EXPERT</name> <operator>|</operator> <name>OPT_STRING</name> <operator>|</operator> <name>OPT_SPEC</name> <operator>|</operator>

<name>OPT_OUTPUT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>off</name> <operator>=</operator> <macro><name>OFFSET</name><argument_list>(<argument>inter_matrices</argument>)</argument_list></macro></expr> }</block></expr>,

<expr><literal type="string">"specify inter matrix coeffs"</literal></expr>, <expr><literal type="string">"matrix"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"chroma_intra_matrix"</literal></expr>, <expr><name>OPT_VIDEO</name> <operator>|</operator> <name>HAS_ARG</name> <operator>|</operator> <name>OPT_EXPERT</name> <operator>|</operator> <name>OPT_STRING</name> <operator>|</operator> <name>OPT_SPEC</name> <operator>|</operator>

<name>OPT_OUTPUT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>off</name> <operator>=</operator> <macro><name>OFFSET</name><argument_list>(<argument>chroma_intra_matrices</argument>)</argument_list></macro></expr> }</block></expr>,

<expr><literal type="string">"specify intra matrix coeffs"</literal></expr>, <expr><literal type="string">"matrix"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"top"</literal></expr>, <expr><name>OPT_VIDEO</name> <operator>|</operator> <name>HAS_ARG</name> <operator>|</operator> <name>OPT_EXPERT</name> <operator>|</operator> <name>OPT_INT</name><operator>|</operator> <name>OPT_SPEC</name> <operator>|</operator>

<name>OPT_INPUT</name> <operator>|</operator> <name>OPT_OUTPUT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>off</name> <operator>=</operator> <macro><name>OFFSET</name><argument_list>(<argument>top_field_first</argument>)</argument_list></macro></expr> }</block></expr>,

<expr><literal type="string">"top=1/bottom=0/auto=-1 field first"</literal></expr>, <expr><literal type="string">""</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"vtag"</literal></expr>, <expr><name>OPT_VIDEO</name> <operator>|</operator> <name>HAS_ARG</name> <operator>|</operator> <name>OPT_EXPERT</name> <operator>|</operator> <name>OPT_PERFILE</name> <operator>|</operator>

<name>OPT_INPUT</name> <operator>|</operator> <name>OPT_OUTPUT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>func_arg</name> <operator>=</operator> <name>opt_old2new</name></expr> }</block></expr>,

<expr><literal type="string">"force video tag/fourcc"</literal></expr>, <expr><literal type="string">"fourcc/tag"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"qphist"</literal></expr>, <expr><name>OPT_VIDEO</name> <operator>|</operator> <name>OPT_BOOL</name> <operator>|</operator> <name>OPT_EXPERT</name></expr> , <expr><block>{ <expr><operator>&amp;</operator><name>qp_hist</name></expr> }</block></expr>,

<expr><literal type="string">"show QP histogram"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"force_fps"</literal></expr>, <expr><name>OPT_VIDEO</name> <operator>|</operator> <name>OPT_BOOL</name> <operator>|</operator> <name>OPT_EXPERT</name> <operator>|</operator> <name>OPT_SPEC</name> <operator>|</operator>

<name>OPT_OUTPUT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>off</name> <operator>=</operator> <macro><name>OFFSET</name><argument_list>(<argument>force_fps</argument>)</argument_list></macro></expr> }</block></expr>,

<expr><literal type="string">"force the selected framerate, disable the best supported framerate selection"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"streamid"</literal></expr>, <expr><name>OPT_VIDEO</name> <operator>|</operator> <name>HAS_ARG</name> <operator>|</operator> <name>OPT_EXPERT</name> <operator>|</operator> <name>OPT_PERFILE</name> <operator>|</operator>

<name>OPT_OUTPUT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>func_arg</name> <operator>=</operator> <name>opt_streamid</name></expr> }</block></expr>,

<expr><literal type="string">"set the value of an outfile streamid"</literal></expr>, <expr><literal type="string">"streamIndex:value"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"force_key_frames"</literal></expr>, <expr><name>OPT_VIDEO</name> <operator>|</operator> <name>OPT_STRING</name> <operator>|</operator> <name>HAS_ARG</name> <operator>|</operator> <name>OPT_EXPERT</name> <operator>|</operator>

<name>OPT_SPEC</name> <operator>|</operator> <name>OPT_OUTPUT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>off</name> <operator>=</operator> <macro><name>OFFSET</name><argument_list>(<argument>forced_key_frames</argument>)</argument_list></macro></expr> }</block></expr>,

<expr><literal type="string">"force key frames at specified timestamps"</literal></expr>, <expr><literal type="string">"timestamps"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"ab"</literal></expr>, <expr><name>OPT_VIDEO</name> <operator>|</operator> <name>HAS_ARG</name> <operator>|</operator> <name>OPT_PERFILE</name> <operator>|</operator> <name>OPT_OUTPUT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>func_arg</name> <operator>=</operator> <name>opt_bitrate</name></expr> }</block></expr>,

<expr><literal type="string">"audio bitrate (please use -b:a)"</literal></expr>, <expr><literal type="string">"bitrate"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"b"</literal></expr>, <expr><name>OPT_VIDEO</name> <operator>|</operator> <name>HAS_ARG</name> <operator>|</operator> <name>OPT_PERFILE</name> <operator>|</operator> <name>OPT_OUTPUT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>func_arg</name> <operator>=</operator> <name>opt_bitrate</name></expr> }</block></expr>,

<expr><literal type="string">"video bitrate (please use -b:v)"</literal></expr>, <expr><literal type="string">"bitrate"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"hwaccel"</literal></expr>, <expr><name>OPT_VIDEO</name> <operator>|</operator> <name>OPT_STRING</name> <operator>|</operator> <name>HAS_ARG</name> <operator>|</operator> <name>OPT_EXPERT</name> <operator>|</operator>

<name>OPT_SPEC</name> <operator>|</operator> <name>OPT_INPUT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>off</name> <operator>=</operator> <macro><name>OFFSET</name><argument_list>(<argument>hwaccels</argument>)</argument_list></macro></expr> }</block></expr>,

<expr><literal type="string">"use HW accelerated decoding"</literal></expr>, <expr><literal type="string">"hwaccel name"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"hwaccel_device"</literal></expr>, <expr><name>OPT_VIDEO</name> <operator>|</operator> <name>OPT_STRING</name> <operator>|</operator> <name>HAS_ARG</name> <operator>|</operator> <name>OPT_EXPERT</name> <operator>|</operator>

<name>OPT_SPEC</name> <operator>|</operator> <name>OPT_INPUT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>off</name> <operator>=</operator> <macro><name>OFFSET</name><argument_list>(<argument>hwaccel_devices</argument>)</argument_list></macro></expr> }</block></expr>,

<expr><literal type="string">"select a device for HW acceleration"</literal></expr>, <expr><literal type="string">"devicename"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"hwaccel_output_format"</literal></expr>, <expr><name>OPT_VIDEO</name> <operator>|</operator> <name>OPT_STRING</name> <operator>|</operator> <name>HAS_ARG</name> <operator>|</operator> <name>OPT_EXPERT</name> <operator>|</operator>

<name>OPT_SPEC</name> <operator>|</operator> <name>OPT_INPUT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>off</name> <operator>=</operator> <macro><name>OFFSET</name><argument_list>(<argument>hwaccel_output_formats</argument>)</argument_list></macro></expr> }</block></expr>,

<expr><literal type="string">"select output format used with HW accelerated decoding"</literal></expr>, <expr><literal type="string">"format"</literal></expr> }</block></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_VIDEOTOOLBOX</name></expr></cpp:if>

<expr><block>{ <expr><literal type="string">"videotoolbox_pixfmt"</literal></expr>, <expr><name>HAS_ARG</name> <operator>|</operator> <name>OPT_STRING</name> <operator>|</operator> <name>OPT_EXPERT</name></expr>, <expr><block>{ <expr><operator>&amp;</operator><name>videotoolbox_pixfmt</name></expr>}</block></expr>, <expr><literal type="string">""</literal></expr> }</block></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><block>{ <expr><literal type="string">"hwaccels"</literal></expr>, <expr><name>OPT_EXIT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>func_arg</name> <operator>=</operator> <name>show_hwaccels</name></expr> }</block></expr>,

<expr><literal type="string">"show available HW acceleration methods"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"autorotate"</literal></expr>, <expr><name>HAS_ARG</name> <operator>|</operator> <name>OPT_BOOL</name> <operator>|</operator> <name>OPT_SPEC</name> <operator>|</operator>

<name>OPT_EXPERT</name> <operator>|</operator> <name>OPT_INPUT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>off</name> <operator>=</operator> <macro><name>OFFSET</name><argument_list>(<argument>autorotate</argument>)</argument_list></macro></expr> }</block></expr>,

<expr><literal type="string">"automatically insert correct rotate filters"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"aframes"</literal></expr>, <expr><name>OPT_AUDIO</name> <operator>|</operator> <name>HAS_ARG</name> <operator>|</operator> <name>OPT_PERFILE</name> <operator>|</operator> <name>OPT_OUTPUT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>func_arg</name> <operator>=</operator> <name>opt_audio_frames</name></expr> }</block></expr>,

<expr><literal type="string">"set the number of audio frames to output"</literal></expr>, <expr><literal type="string">"number"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"aq"</literal></expr>, <expr><name>OPT_AUDIO</name> <operator>|</operator> <name>HAS_ARG</name> <operator>|</operator> <name>OPT_PERFILE</name> <operator>|</operator> <name>OPT_OUTPUT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>func_arg</name> <operator>=</operator> <name>opt_audio_qscale</name></expr> }</block></expr>,

<expr><literal type="string">"set audio quality (codec-specific)"</literal></expr>, <expr><literal type="string">"quality"</literal></expr>, }</block></expr>,

<expr><block>{ <expr><literal type="string">"ar"</literal></expr>, <expr><name>OPT_AUDIO</name> <operator>|</operator> <name>HAS_ARG</name> <operator>|</operator> <name>OPT_INT</name> <operator>|</operator> <name>OPT_SPEC</name> <operator>|</operator>

<name>OPT_INPUT</name> <operator>|</operator> <name>OPT_OUTPUT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>off</name> <operator>=</operator> <macro><name>OFFSET</name><argument_list>(<argument>audio_sample_rate</argument>)</argument_list></macro></expr> }</block></expr>,

<expr><literal type="string">"set audio sampling rate (in Hz)"</literal></expr>, <expr><literal type="string">"rate"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"ac"</literal></expr>, <expr><name>OPT_AUDIO</name> <operator>|</operator> <name>HAS_ARG</name> <operator>|</operator> <name>OPT_INT</name> <operator>|</operator> <name>OPT_SPEC</name> <operator>|</operator>

<name>OPT_INPUT</name> <operator>|</operator> <name>OPT_OUTPUT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>off</name> <operator>=</operator> <macro><name>OFFSET</name><argument_list>(<argument>audio_channels</argument>)</argument_list></macro></expr> }</block></expr>,

<expr><literal type="string">"set number of audio channels"</literal></expr>, <expr><literal type="string">"channels"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"an"</literal></expr>, <expr><name>OPT_AUDIO</name> <operator>|</operator> <name>OPT_BOOL</name> <operator>|</operator> <name>OPT_OFFSET</name> <operator>|</operator> <name>OPT_INPUT</name> <operator>|</operator> <name>OPT_OUTPUT</name></expr>,<expr><block>{ <expr><operator>.</operator><name>off</name> <operator>=</operator> <macro><name>OFFSET</name><argument_list>(<argument>audio_disable</argument>)</argument_list></macro></expr> }</block></expr>,

<expr><literal type="string">"disable audio"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"acodec"</literal></expr>, <expr><name>OPT_AUDIO</name> <operator>|</operator> <name>HAS_ARG</name> <operator>|</operator> <name>OPT_PERFILE</name> <operator>|</operator>

<name>OPT_INPUT</name> <operator>|</operator> <name>OPT_OUTPUT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>func_arg</name> <operator>=</operator> <name>opt_audio_codec</name></expr> }</block></expr>,

<expr><literal type="string">"force audio codec ('copy' to copy stream)"</literal></expr>, <expr><literal type="string">"codec"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"atag"</literal></expr>, <expr><name>OPT_AUDIO</name> <operator>|</operator> <name>HAS_ARG</name> <operator>|</operator> <name>OPT_EXPERT</name> <operator>|</operator> <name>OPT_PERFILE</name> <operator>|</operator>

<name>OPT_OUTPUT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>func_arg</name> <operator>=</operator> <name>opt_old2new</name></expr> }</block></expr>,

<expr><literal type="string">"force audio tag/fourcc"</literal></expr>, <expr><literal type="string">"fourcc/tag"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"vol"</literal></expr>, <expr><name>OPT_AUDIO</name> <operator>|</operator> <name>HAS_ARG</name> <operator>|</operator> <name>OPT_INT</name></expr>, <expr><block>{ <expr><operator>&amp;</operator><name>audio_volume</name></expr> }</block></expr>,

<expr><literal type="string">"change audio volume (256=normal)"</literal></expr> , <expr><literal type="string">"volume"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"sample_fmt"</literal></expr>, <expr><name>OPT_AUDIO</name> <operator>|</operator> <name>HAS_ARG</name> <operator>|</operator> <name>OPT_EXPERT</name> <operator>|</operator> <name>OPT_SPEC</name> <operator>|</operator>

<name>OPT_STRING</name> <operator>|</operator> <name>OPT_INPUT</name> <operator>|</operator> <name>OPT_OUTPUT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>off</name> <operator>=</operator> <macro><name>OFFSET</name><argument_list>(<argument>sample_fmts</argument>)</argument_list></macro></expr> }</block></expr>,

<expr><literal type="string">"set sample format"</literal></expr>, <expr><literal type="string">"format"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"channel_layout"</literal></expr>, <expr><name>OPT_AUDIO</name> <operator>|</operator> <name>HAS_ARG</name> <operator>|</operator> <name>OPT_EXPERT</name> <operator>|</operator> <name>OPT_PERFILE</name> <operator>|</operator>

<name>OPT_INPUT</name> <operator>|</operator> <name>OPT_OUTPUT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>func_arg</name> <operator>=</operator> <name>opt_channel_layout</name></expr> }</block></expr>,

<expr><literal type="string">"set channel layout"</literal></expr>, <expr><literal type="string">"layout"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"af"</literal></expr>, <expr><name>OPT_AUDIO</name> <operator>|</operator> <name>HAS_ARG</name> <operator>|</operator> <name>OPT_PERFILE</name> <operator>|</operator> <name>OPT_OUTPUT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>func_arg</name> <operator>=</operator> <name>opt_audio_filters</name></expr> }</block></expr>,

<expr><literal type="string">"set audio filters"</literal></expr>, <expr><literal type="string">"filter_graph"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"guess_layout_max"</literal></expr>, <expr><name>OPT_AUDIO</name> <operator>|</operator> <name>HAS_ARG</name> <operator>|</operator> <name>OPT_INT</name> <operator>|</operator> <name>OPT_SPEC</name> <operator>|</operator> <name>OPT_EXPERT</name> <operator>|</operator> <name>OPT_INPUT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>off</name> <operator>=</operator> <macro><name>OFFSET</name><argument_list>(<argument>guess_layout_max</argument>)</argument_list></macro></expr> }</block></expr>,

<expr><literal type="string">"set the maximum number of channels to try to guess the channel layout"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"sn"</literal></expr>, <expr><name>OPT_SUBTITLE</name> <operator>|</operator> <name>OPT_BOOL</name> <operator>|</operator> <name>OPT_OFFSET</name> <operator>|</operator> <name>OPT_INPUT</name> <operator>|</operator> <name>OPT_OUTPUT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>off</name> <operator>=</operator> <macro><name>OFFSET</name><argument_list>(<argument>subtitle_disable</argument>)</argument_list></macro></expr> }</block></expr>,

<expr><literal type="string">"disable subtitle"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"scodec"</literal></expr>, <expr><name>OPT_SUBTITLE</name> <operator>|</operator> <name>HAS_ARG</name> <operator>|</operator> <name>OPT_PERFILE</name> <operator>|</operator> <name>OPT_INPUT</name> <operator>|</operator> <name>OPT_OUTPUT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>func_arg</name> <operator>=</operator> <name>opt_subtitle_codec</name></expr> }</block></expr>,

<expr><literal type="string">"force subtitle codec ('copy' to copy stream)"</literal></expr>, <expr><literal type="string">"codec"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"stag"</literal></expr>, <expr><name>OPT_SUBTITLE</name> <operator>|</operator> <name>HAS_ARG</name> <operator>|</operator> <name>OPT_EXPERT</name> <operator>|</operator> <name>OPT_PERFILE</name> <operator>|</operator> <name>OPT_OUTPUT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>func_arg</name> <operator>=</operator> <name>opt_old2new</name></expr> }</block></expr>

, <expr><literal type="string">"force subtitle tag/fourcc"</literal></expr>, <expr><literal type="string">"fourcc/tag"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"fix_sub_duration"</literal></expr>, <expr><name>OPT_BOOL</name> <operator>|</operator> <name>OPT_EXPERT</name> <operator>|</operator> <name>OPT_SUBTITLE</name> <operator>|</operator> <name>OPT_SPEC</name> <operator>|</operator> <name>OPT_INPUT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>off</name> <operator>=</operator> <macro><name>OFFSET</name><argument_list>(<argument>fix_sub_duration</argument>)</argument_list></macro></expr> }</block></expr>,

<expr><literal type="string">"fix subtitles duration"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"canvas_size"</literal></expr>, <expr><name>OPT_SUBTITLE</name> <operator>|</operator> <name>HAS_ARG</name> <operator>|</operator> <name>OPT_STRING</name> <operator>|</operator> <name>OPT_SPEC</name> <operator>|</operator> <name>OPT_INPUT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>off</name> <operator>=</operator> <macro><name>OFFSET</name><argument_list>(<argument>canvas_sizes</argument>)</argument_list></macro></expr> }</block></expr>,

<expr><literal type="string">"set canvas size (WxH or abbreviation)"</literal></expr>, <expr><literal type="string">"size"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"vc"</literal></expr>, <expr><name>HAS_ARG</name> <operator>|</operator> <name>OPT_EXPERT</name> <operator>|</operator> <name>OPT_VIDEO</name></expr>, <expr><block>{ <expr><operator>.</operator><name>func_arg</name> <operator>=</operator> <name>opt_video_channel</name></expr> }</block></expr>,

<expr><literal type="string">"deprecated, use -channel"</literal></expr>, <expr><literal type="string">"channel"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"tvstd"</literal></expr>, <expr><name>HAS_ARG</name> <operator>|</operator> <name>OPT_EXPERT</name> <operator>|</operator> <name>OPT_VIDEO</name></expr>, <expr><block>{ <expr><operator>.</operator><name>func_arg</name> <operator>=</operator> <name>opt_video_standard</name></expr> }</block></expr>,

<expr><literal type="string">"deprecated, use -standard"</literal></expr>, <expr><literal type="string">"standard"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"isync"</literal></expr>, <expr><name>OPT_BOOL</name> <operator>|</operator> <name>OPT_EXPERT</name></expr>, <expr><block>{ <expr><operator>&amp;</operator><name>input_sync</name></expr> }</block></expr>, <expr><literal type="string">"this option is deprecated and does nothing"</literal></expr>, <expr><literal type="string">""</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"muxdelay"</literal></expr>, <expr><name>OPT_FLOAT</name> <operator>|</operator> <name>HAS_ARG</name> <operator>|</operator> <name>OPT_EXPERT</name> <operator>|</operator> <name>OPT_OFFSET</name> <operator>|</operator> <name>OPT_OUTPUT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>off</name> <operator>=</operator> <macro><name>OFFSET</name><argument_list>(<argument>mux_max_delay</argument>)</argument_list></macro></expr> }</block></expr>,

<expr><literal type="string">"set the maximum demux-decode delay"</literal></expr>, <expr><literal type="string">"seconds"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"muxpreload"</literal></expr>, <expr><name>OPT_FLOAT</name> <operator>|</operator> <name>HAS_ARG</name> <operator>|</operator> <name>OPT_EXPERT</name> <operator>|</operator> <name>OPT_OFFSET</name> <operator>|</operator> <name>OPT_OUTPUT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>off</name> <operator>=</operator> <macro><name>OFFSET</name><argument_list>(<argument>mux_preload</argument>)</argument_list></macro></expr> }</block></expr>,

<expr><literal type="string">"set the initial demux-decode delay"</literal></expr>, <expr><literal type="string">"seconds"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"sdp_file"</literal></expr>, <expr><name>HAS_ARG</name> <operator>|</operator> <name>OPT_EXPERT</name> <operator>|</operator> <name>OPT_OUTPUT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>func_arg</name> <operator>=</operator> <name>opt_sdp_file</name></expr> }</block></expr>,

<expr><literal type="string">"specify a file in which to print sdp information"</literal></expr>, <expr><literal type="string">"file"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"time_base"</literal></expr>, <expr><name>HAS_ARG</name> <operator>|</operator> <name>OPT_STRING</name> <operator>|</operator> <name>OPT_EXPERT</name> <operator>|</operator> <name>OPT_SPEC</name> <operator>|</operator> <name>OPT_OUTPUT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>off</name> <operator>=</operator> <macro><name>OFFSET</name><argument_list>(<argument>time_bases</argument>)</argument_list></macro></expr> }</block></expr>,

<expr><literal type="string">"set the desired time base hint for output stream (1:24, 1:48000 or 0.04166, 2.0833e-5)"</literal></expr>, <expr><literal type="string">"ratio"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"enc_time_base"</literal></expr>, <expr><name>HAS_ARG</name> <operator>|</operator> <name>OPT_STRING</name> <operator>|</operator> <name>OPT_EXPERT</name> <operator>|</operator> <name>OPT_SPEC</name> <operator>|</operator> <name>OPT_OUTPUT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>off</name> <operator>=</operator> <macro><name>OFFSET</name><argument_list>(<argument>enc_time_bases</argument>)</argument_list></macro></expr> }</block></expr>,

<expr><literal type="string">"set the desired time base for the encoder (1:24, 1:48000 or 0.04166, 2.0833e-5). "</literal>

<literal type="string">"two special values are defined - "</literal>

<literal type="string">"0 = use frame rate (video) or sample rate (audio),"</literal>

<literal type="string">"-1 = match source time base"</literal></expr>, <expr><literal type="string">"ratio"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"bsf"</literal></expr>, <expr><name>HAS_ARG</name> <operator>|</operator> <name>OPT_STRING</name> <operator>|</operator> <name>OPT_SPEC</name> <operator>|</operator> <name>OPT_EXPERT</name> <operator>|</operator> <name>OPT_OUTPUT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>off</name> <operator>=</operator> <macro><name>OFFSET</name><argument_list>(<argument>bitstream_filters</argument>)</argument_list></macro></expr> }</block></expr>,

<expr><literal type="string">"A comma-separated list of bitstream filters"</literal></expr>, <expr><literal type="string">"bitstream_filters"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"absf"</literal></expr>, <expr><name>HAS_ARG</name> <operator>|</operator> <name>OPT_AUDIO</name> <operator>|</operator> <name>OPT_EXPERT</name><operator>|</operator> <name>OPT_PERFILE</name> <operator>|</operator> <name>OPT_OUTPUT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>func_arg</name> <operator>=</operator> <name>opt_old2new</name></expr> }</block></expr>,

<expr><literal type="string">"deprecated"</literal></expr>, <expr><literal type="string">"audio bitstream_filters"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"vbsf"</literal></expr>, <expr><name>OPT_VIDEO</name> <operator>|</operator> <name>HAS_ARG</name> <operator>|</operator> <name>OPT_EXPERT</name><operator>|</operator> <name>OPT_PERFILE</name> <operator>|</operator> <name>OPT_OUTPUT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>func_arg</name> <operator>=</operator> <name>opt_old2new</name></expr> }</block></expr>,

<expr><literal type="string">"deprecated"</literal></expr>, <expr><literal type="string">"video bitstream_filters"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"apre"</literal></expr>, <expr><name>HAS_ARG</name> <operator>|</operator> <name>OPT_AUDIO</name> <operator>|</operator> <name>OPT_EXPERT</name><operator>|</operator> <name>OPT_PERFILE</name> <operator>|</operator> <name>OPT_OUTPUT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>func_arg</name> <operator>=</operator> <name>opt_preset</name></expr> }</block></expr>,

<expr><literal type="string">"set the audio options to the indicated preset"</literal></expr>, <expr><literal type="string">"preset"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"vpre"</literal></expr>, <expr><name>OPT_VIDEO</name> <operator>|</operator> <name>HAS_ARG</name> <operator>|</operator> <name>OPT_EXPERT</name><operator>|</operator> <name>OPT_PERFILE</name> <operator>|</operator> <name>OPT_OUTPUT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>func_arg</name> <operator>=</operator> <name>opt_preset</name></expr> }</block></expr>,

<expr><literal type="string">"set the video options to the indicated preset"</literal></expr>, <expr><literal type="string">"preset"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"spre"</literal></expr>, <expr><name>HAS_ARG</name> <operator>|</operator> <name>OPT_SUBTITLE</name> <operator>|</operator> <name>OPT_EXPERT</name><operator>|</operator> <name>OPT_PERFILE</name> <operator>|</operator> <name>OPT_OUTPUT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>func_arg</name> <operator>=</operator> <name>opt_preset</name></expr> }</block></expr>,

<expr><literal type="string">"set the subtitle options to the indicated preset"</literal></expr>, <expr><literal type="string">"preset"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"fpre"</literal></expr>, <expr><name>HAS_ARG</name> <operator>|</operator> <name>OPT_EXPERT</name><operator>|</operator> <name>OPT_PERFILE</name> <operator>|</operator> <name>OPT_OUTPUT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>func_arg</name> <operator>=</operator> <name>opt_preset</name></expr> }</block></expr>,

<expr><literal type="string">"set options from indicated preset file"</literal></expr>, <expr><literal type="string">"filename"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"max_muxing_queue_size"</literal></expr>, <expr><name>HAS_ARG</name> <operator>|</operator> <name>OPT_INT</name> <operator>|</operator> <name>OPT_SPEC</name> <operator>|</operator> <name>OPT_EXPERT</name> <operator>|</operator> <name>OPT_OUTPUT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>off</name> <operator>=</operator> <macro><name>OFFSET</name><argument_list>(<argument>max_muxing_queue_size</argument>)</argument_list></macro></expr> }</block></expr>,

<expr><literal type="string">"maximum number of packets that can be buffered while waiting for all streams to initialize"</literal></expr>, <expr><literal type="string">"packets"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"dcodec"</literal></expr>, <expr><name>HAS_ARG</name> <operator>|</operator> <name>OPT_DATA</name> <operator>|</operator> <name>OPT_PERFILE</name> <operator>|</operator> <name>OPT_EXPERT</name> <operator>|</operator> <name>OPT_INPUT</name> <operator>|</operator> <name>OPT_OUTPUT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>func_arg</name> <operator>=</operator> <name>opt_data_codec</name></expr> }</block></expr>,

<expr><literal type="string">"force data codec ('copy' to copy stream)"</literal></expr>, <expr><literal type="string">"codec"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"dn"</literal></expr>, <expr><name>OPT_BOOL</name> <operator>|</operator> <name>OPT_VIDEO</name> <operator>|</operator> <name>OPT_OFFSET</name> <operator>|</operator> <name>OPT_INPUT</name> <operator>|</operator> <name>OPT_OUTPUT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>off</name> <operator>=</operator> <macro><name>OFFSET</name><argument_list>(<argument>data_disable</argument>)</argument_list></macro></expr> }</block></expr>,

<expr><literal type="string">"disable data"</literal></expr> }</block></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_VAAPI</name></expr></cpp:if>

<expr><block>{ <expr><literal type="string">"vaapi_device"</literal></expr>, <expr><name>HAS_ARG</name> <operator>|</operator> <name>OPT_EXPERT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>func_arg</name> <operator>=</operator> <name>opt_vaapi_device</name></expr> }</block></expr>,

<expr><literal type="string">"set VAAPI hardware device (DRM path or X11 display name)"</literal></expr>, <expr><literal type="string">"device"</literal></expr> }</block></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_QSV</name></expr></cpp:if>

<expr><block>{ <expr><literal type="string">"qsv_device"</literal></expr>, <expr><name>HAS_ARG</name> <operator>|</operator> <name>OPT_STRING</name> <operator>|</operator> <name>OPT_EXPERT</name></expr>, <expr><block>{ <expr><operator>&amp;</operator><name>qsv_device</name></expr> }</block></expr>,

<expr><literal type="string">"set QSV hardware device (DirectX adapter index, DRM path or X11 display name)"</literal></expr>, <expr><literal type="string">"device"</literal></expr>}</block></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><block>{ <expr><literal type="string">"init_hw_device"</literal></expr>, <expr><name>HAS_ARG</name> <operator>|</operator> <name>OPT_EXPERT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>func_arg</name> <operator>=</operator> <name>opt_init_hw_device</name></expr> }</block></expr>,

<expr><literal type="string">"initialise hardware device"</literal></expr>, <expr><literal type="string">"args"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"filter_hw_device"</literal></expr>, <expr><name>HAS_ARG</name> <operator>|</operator> <name>OPT_EXPERT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>func_arg</name> <operator>=</operator> <name>opt_filter_hw_device</name></expr> }</block></expr>,

<expr><literal type="string">"set hardware device used when filtering"</literal></expr>, <expr><literal type="string">"device"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr>, }</block></expr>,

}</block></expr></init></decl>;</decl_stmt>

</unit>
