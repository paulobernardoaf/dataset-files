<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavfilter\vf_sab.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/opt.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/pixdesc.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libswscale/swscale.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avfilter.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"formats.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct <name>FilterParam</name> <block>{

<decl_stmt><decl><type><name>float</name></type> <name>radius</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>pre_filter_radius</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>strength</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>quality</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>SwsContext</name></name> <modifier>*</modifier></type><name>pre_filter_context</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pre_filter_buf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>pre_filter_linesize</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>dist_width</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>dist_linesize</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>dist_coeff</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COLOR_DIFF_COEFF_SIZE</name></cpp:macro> <cpp:value>512</cpp:value></cpp:define>

<decl_stmt><decl><type><name>int</name></type> <name><name>color_diff_coeff</name><index>[<expr><name>COLOR_DIFF_COEFF_SIZE</name></expr>]</index></name></decl>;</decl_stmt>

}</block></struct></type> <name>FilterParam</name>;</typedef>

<typedef>typedef <type><struct>struct <name>SabContext</name> <block>{

<decl_stmt><decl><type><specifier>const</specifier> <name>AVClass</name> <modifier>*</modifier></type><name>class</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>FilterParam</name></type> <name>luma</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>FilterParam</name></type> <name>chroma</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>hsub</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>vsub</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>sws_flags</name></decl>;</decl_stmt>

}</block></struct></type> <name>SabContext</name>;</typedef>

<function><type><specifier>static</specifier> <name>int</name></type> <name>query_formats</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>enum</name> <name>AVPixelFormat</name></name></type> <name><name>pix_fmts</name><index>[]</index></name> <init>= <expr><block>{

<expr><name>AV_PIX_FMT_YUV420P</name></expr>,

<expr><name>AV_PIX_FMT_YUV410P</name></expr>,

<expr><name>AV_PIX_FMT_YUV444P</name></expr>,

<expr><name>AV_PIX_FMT_YUV422P</name></expr>,

<expr><name>AV_PIX_FMT_YUV411P</name></expr>,

<expr><name>AV_PIX_FMT_NONE</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFilterFormats</name> <modifier>*</modifier></type><name>fmts_list</name> <init>= <expr><call><name>ff_make_format_list</name><argument_list>(<argument><expr><name>pix_fmts</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>fmts_list</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>ff_set_common_formats</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>fmts_list</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RADIUS_MIN</name></cpp:macro> <cpp:value>0.1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RADIUS_MAX</name></cpp:macro> <cpp:value>4.0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PRE_FILTER_RADIUS_MIN</name></cpp:macro> <cpp:value>0.1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PRE_FILTER_RADIUS_MAX</name></cpp:macro> <cpp:value>2.0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STRENGTH_MIN</name></cpp:macro> <cpp:value>0.1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STRENGTH_MAX</name></cpp:macro> <cpp:value>100.0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OFFSET</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>offsetof(SabContext, x)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLAGS</name></cpp:macro> <cpp:value>AV_OPT_FLAG_FILTERING_PARAM|AV_OPT_FLAG_VIDEO_PARAM</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVOption</name></type> <name><name>sab_options</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><literal type="string">"luma_radius"</literal></expr>, <expr><literal type="string">"set luma radius"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name><name>luma</name><operator>.</operator><name>radius</name></name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_FLOAT</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name><operator>=</operator><literal type="number">1.0</literal></expr>}</block></expr>, <expr><name>RADIUS_MIN</name></expr>, <expr><name>RADIUS_MAX</name></expr>, <expr><operator>.</operator><name>flags</name><operator>=</operator><name>FLAGS</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"lr"</literal></expr> , <expr><literal type="string">"set luma radius"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name><name>luma</name><operator>.</operator><name>radius</name></name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_FLOAT</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name><operator>=</operator><literal type="number">1.0</literal></expr>}</block></expr>, <expr><name>RADIUS_MIN</name></expr>, <expr><name>RADIUS_MAX</name></expr>, <expr><operator>.</operator><name>flags</name><operator>=</operator><name>FLAGS</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"luma_pre_filter_radius"</literal></expr>, <expr><literal type="string">"set luma pre-filter radius"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name><name>luma</name><operator>.</operator><name>pre_filter_radius</name></name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_FLOAT</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name><operator>=</operator><literal type="number">1.0</literal></expr>}</block></expr>, <expr><name>PRE_FILTER_RADIUS_MIN</name></expr>, <expr><name>PRE_FILTER_RADIUS_MAX</name></expr>, <expr><operator>.</operator><name>flags</name><operator>=</operator><name>FLAGS</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"lpfr"</literal></expr>, <expr><literal type="string">"set luma pre-filter radius"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name><name>luma</name><operator>.</operator><name>pre_filter_radius</name></name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_FLOAT</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name><operator>=</operator><literal type="number">1.0</literal></expr>}</block></expr>, <expr><name>PRE_FILTER_RADIUS_MIN</name></expr>, <expr><name>PRE_FILTER_RADIUS_MAX</name></expr>, <expr><operator>.</operator><name>flags</name><operator>=</operator><name>FLAGS</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"luma_strength"</literal></expr>, <expr><literal type="string">"set luma strength"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name><name>luma</name><operator>.</operator><name>strength</name></name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_FLOAT</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name><operator>=</operator><literal type="number">1.0</literal></expr>}</block></expr>, <expr><name>STRENGTH_MIN</name></expr>, <expr><name>STRENGTH_MAX</name></expr>, <expr><operator>.</operator><name>flags</name><operator>=</operator><name>FLAGS</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"ls"</literal></expr>, <expr><literal type="string">"set luma strength"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name><name>luma</name><operator>.</operator><name>strength</name></name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_FLOAT</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name><operator>=</operator><literal type="number">1.0</literal></expr>}</block></expr>, <expr><name>STRENGTH_MIN</name></expr>, <expr><name>STRENGTH_MAX</name></expr>, <expr><operator>.</operator><name>flags</name><operator>=</operator><name>FLAGS</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"chroma_radius"</literal></expr>, <expr><literal type="string">"set chroma radius"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name><name>chroma</name><operator>.</operator><name>radius</name></name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_FLOAT</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name><operator>=</operator><name>RADIUS_MIN</name><operator>-</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><name>RADIUS_MIN</name><operator>-</operator><literal type="number">1</literal></expr>, <expr><name>RADIUS_MAX</name></expr>, <expr><operator>.</operator><name>flags</name><operator>=</operator><name>FLAGS</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"cr"</literal></expr>, <expr><literal type="string">"set chroma radius"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name><name>chroma</name><operator>.</operator><name>radius</name></name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_FLOAT</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name><operator>=</operator><name>RADIUS_MIN</name><operator>-</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><name>RADIUS_MIN</name><operator>-</operator><literal type="number">1</literal></expr>, <expr><name>RADIUS_MAX</name></expr>, <expr><operator>.</operator><name>flags</name><operator>=</operator><name>FLAGS</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"chroma_pre_filter_radius"</literal></expr>, <expr><literal type="string">"set chroma pre-filter radius"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name><name>chroma</name><operator>.</operator><name>pre_filter_radius</name></name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_FLOAT</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name><operator>=</operator><name>PRE_FILTER_RADIUS_MIN</name><operator>-</operator><literal type="number">1</literal></expr>}</block></expr>,

<expr><name>PRE_FILTER_RADIUS_MIN</name><operator>-</operator><literal type="number">1</literal></expr>, <expr><name>PRE_FILTER_RADIUS_MAX</name></expr>, <expr><operator>.</operator><name>flags</name><operator>=</operator><name>FLAGS</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"cpfr"</literal></expr>, <expr><literal type="string">"set chroma pre-filter radius"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name><name>chroma</name><operator>.</operator><name>pre_filter_radius</name></name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_FLOAT</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name><operator>=</operator><name>PRE_FILTER_RADIUS_MIN</name><operator>-</operator><literal type="number">1</literal></expr>}</block></expr>,

<expr><name>PRE_FILTER_RADIUS_MIN</name><operator>-</operator><literal type="number">1</literal></expr>, <expr><name>PRE_FILTER_RADIUS_MAX</name></expr>, <expr><operator>.</operator><name>flags</name><operator>=</operator><name>FLAGS</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"chroma_strength"</literal></expr>, <expr><literal type="string">"set chroma strength"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name><name>chroma</name><operator>.</operator><name>strength</name></name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_FLOAT</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name><operator>=</operator><name>STRENGTH_MIN</name><operator>-</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><name>STRENGTH_MIN</name><operator>-</operator><literal type="number">1</literal></expr>, <expr><name>STRENGTH_MAX</name></expr>, <expr><operator>.</operator><name>flags</name><operator>=</operator><name>FLAGS</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"cs"</literal></expr>, <expr><literal type="string">"set chroma strength"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name><name>chroma</name><operator>.</operator><name>strength</name></name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_FLOAT</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name><operator>=</operator><name>STRENGTH_MIN</name><operator>-</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><name>STRENGTH_MIN</name><operator>-</operator><literal type="number">1</literal></expr>, <expr><name>STRENGTH_MAX</name></expr>, <expr><operator>.</operator><name>flags</name><operator>=</operator><name>FLAGS</name></expr> }</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>AVFILTER_DEFINE_CLASS</name><argument_list>(<argument><expr><name>sab</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>init</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>SabContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>chroma</name><operator>.</operator><name>radius</name></name> <operator>&lt;</operator> <name>RADIUS_MIN</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>chroma</name><operator>.</operator><name>radius</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>luma</name><operator>.</operator><name>radius</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>chroma</name><operator>.</operator><name>pre_filter_radius</name></name> <operator>&lt;</operator> <name>PRE_FILTER_RADIUS_MIN</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>chroma</name><operator>.</operator><name>pre_filter_radius</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>luma</name><operator>.</operator><name>pre_filter_radius</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>chroma</name><operator>.</operator><name>strength</name></name> <operator>&lt;</operator> <name>STRENGTH_MIN</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>chroma</name><operator>.</operator><name>strength</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>luma</name><operator>.</operator><name>strength</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>luma</name><operator>.</operator><name>quality</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>chroma</name><operator>.</operator><name>quality</name></name> <operator>=</operator> <literal type="number">3.0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>sws_flags</name></name> <operator>=</operator> <name>SWS_POINT</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_VERBOSE</name></expr></argument>,

<argument><expr><literal type="string">"luma_radius:%f luma_pre_filter_radius::%f luma_strength:%f "</literal>

<literal type="string">"chroma_radius:%f chroma_pre_filter_radius:%f chroma_strength:%f\n"</literal></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>luma</name> <operator>.</operator><name>radius</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>luma</name> <operator>.</operator><name>pre_filter_radius</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>luma</name> <operator>.</operator><name>strength</name></name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>chroma</name><operator>.</operator><name>radius</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>chroma</name><operator>.</operator><name>pre_filter_radius</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>chroma</name><operator>.</operator><name>strength</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>close_filter_param</name><parameter_list>(<parameter><decl><type><name>FilterParam</name> <modifier>*</modifier></type><name>f</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>pre_filter_context</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>sws_freeContext</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>pre_filter_context</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>pre_filter_context</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>pre_filter_buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>dist_coeff</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>void</name></type> <name>uninit</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>SabContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>close_filter_param</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>luma</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>close_filter_param</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>chroma</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>open_filter_param</name><parameter_list>(<parameter><decl><type><name>FilterParam</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>sws_flags</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>SwsVector</name> <modifier>*</modifier></type><name>vec</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SwsFilter</name></type> <name>sws_f</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>linesize</name> <init>= <expr><call><name>FFALIGN</name><argument_list>(<argument><expr><name>width</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>pre_filter_buf</name></name> <operator>=</operator> <call><name>av_malloc</name><argument_list>(<argument><expr><name>linesize</name> <operator>*</operator> <name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>f</name><operator>-&gt;</operator><name>pre_filter_buf</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>pre_filter_linesize</name></name> <operator>=</operator> <name>linesize</name></expr>;</expr_stmt>

<expr_stmt><expr><name>vec</name> <operator>=</operator> <call><name>sws_getGaussianVec</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>pre_filter_radius</name></name></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>quality</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sws_f</name><operator>.</operator><name>lumH</name></name> <operator>=</operator> <name><name>sws_f</name><operator>.</operator><name>lumV</name></name> <operator>=</operator> <name>vec</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sws_f</name><operator>.</operator><name>chrH</name></name> <operator>=</operator> <name><name>sws_f</name><operator>.</operator><name>chrV</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>pre_filter_context</name></name> <operator>=</operator> <call><name>sws_getContext</name><argument_list>(<argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>, <argument><expr><name>AV_PIX_FMT_GRAY8</name></expr></argument>,

<argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>, <argument><expr><name>AV_PIX_FMT_GRAY8</name></expr></argument>,

<argument><expr><name>sws_flags</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sws_f</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sws_freeVec</name><argument_list>(<argument><expr><name>vec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vec</name> <operator>=</operator> <call><name>sws_getGaussianVec</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>strength</name></name></expr></argument>, <argument><expr><literal type="number">5.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>COLOR_DIFF_COEFF_SIZE</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>double</name></type> <name>d</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>index</name> <init>= <expr><name>i</name><operator>-</operator><name>COLOR_DIFF_COEFF_SIZE</name><operator>/</operator><literal type="number">2</literal> <operator>+</operator> <name><name>vec</name><operator>-&gt;</operator><name>length</name></name><operator>/</operator><literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>index</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>index</name> <operator>&gt;=</operator> <name><name>vec</name><operator>-&gt;</operator><name>length</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>d</name> <operator>=</operator> <literal type="number">0.0</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name>d</name> <operator>=</operator> <name><name>vec</name><operator>-&gt;</operator><name>coeff</name><index>[<expr><name>index</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>color_diff_coeff</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>d</name><operator>/</operator><name><name>vec</name><operator>-&gt;</operator><name>coeff</name><index>[<expr><name><name>vec</name><operator>-&gt;</operator><name>length</name></name><operator>/</operator><literal type="number">2</literal></expr>]</index></name><operator>*</operator><operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">12</literal><operator>)</operator> <operator>+</operator> <literal type="number">0.5</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>sws_freeVec</name><argument_list>(<argument><expr><name>vec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vec</name> <operator>=</operator> <call><name>sws_getGaussianVec</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>radius</name></name></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>quality</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>dist_width</name></name> <operator>=</operator> <name><name>vec</name><operator>-&gt;</operator><name>length</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>dist_linesize</name></name> <operator>=</operator> <call><name>FFALIGN</name><argument_list>(<argument><expr><name><name>vec</name><operator>-&gt;</operator><name>length</name></name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>dist_coeff</name></name> <operator>=</operator> <call><name>av_malloc_array</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>dist_width</name></name></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>dist_linesize</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>f</name><operator>-&gt;</operator><name>dist_coeff</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>f</name><operator>-&gt;</operator><name>dist_coeff</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>sws_freeVec</name><argument_list>(<argument><expr><name>vec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name><name>vec</name><operator>-&gt;</operator><name>length</name></name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name><name>vec</name><operator>-&gt;</operator><name>length</name></name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>double</name></type> <name>d</name> <init>= <expr><name><name>vec</name><operator>-&gt;</operator><name>coeff</name><index>[<expr><name>x</name></expr>]</index></name> <operator>*</operator> <name><name>vec</name><operator>-&gt;</operator><name>coeff</name><index>[<expr><name>y</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>dist_coeff</name><index>[<expr><name>x</name> <operator>+</operator> <name>y</name><operator>*</operator><name><name>f</name><operator>-&gt;</operator><name>dist_linesize</name></name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>d</name><operator>*</operator><operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">10</literal><operator>)</operator> <operator>+</operator> <literal type="number">0.5</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<expr_stmt><expr><call><name>sws_freeVec</name><argument_list>(<argument><expr><name>vec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>config_props</name><parameter_list>(<parameter><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>inlink</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>SabContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>inlink</name><operator>-&gt;</operator><name>dst</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>AVPixFmtDescriptor</name> <modifier>*</modifier></type><name>desc</name> <init>= <expr><call><name>av_pix_fmt_desc_get</name><argument_list>(<argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>format</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>hsub</name></name> <operator>=</operator> <name><name>desc</name><operator>-&gt;</operator><name>log2_chroma_w</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>vsub</name></name> <operator>=</operator> <name><name>desc</name><operator>-&gt;</operator><name>log2_chroma_h</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>close_filter_param</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>luma</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>open_filter_param</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>luma</name></name></expr></argument>, <argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>w</name></name></expr></argument>, <argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>h</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>sws_flags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>close_filter_param</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>chroma</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>open_filter_param</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>chroma</name></name></expr></argument>,

<argument><expr><call><name>AV_CEIL_RSHIFT</name><argument_list>(<argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>w</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>hsub</name></name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>AV_CEIL_RSHIFT</name><argument_list>(<argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>h</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>vsub</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>sws_flags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NB_PLANES</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type> <name>blur</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>dst_linesize</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>src_linesize</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>h</name></decl></parameter>, <parameter><decl><type><name>FilterParam</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>FilterParam</name></type> <name>f</name> <init>= <expr><operator>*</operator><name>fp</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>radius</name> <init>= <expr><name><name>f</name><operator>.</operator><name>dist_width</name></name><operator>/</operator><literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier> <specifier>const</specifier></type> <name><name>src2</name><index>[<expr><name>NB_PLANES</name></expr>]</index></name> <init>= <expr><block>{ <expr><name>src</name></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>src2_linesize</name><index>[<expr><name>NB_PLANES</name></expr>]</index></name> <init>= <expr><block>{ <expr><name>src_linesize</name></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name><name>dst2</name><index>[<expr><name>NB_PLANES</name></expr>]</index></name> <init>= <expr><block>{ <expr><name><name>f</name><operator>.</operator><name>pre_filter_buf</name></name></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>dst2_linesize</name><index>[<expr><name>NB_PLANES</name></expr>]</index></name> <init>= <expr><block>{ <expr><name><name>f</name><operator>.</operator><name>pre_filter_linesize</name></name></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>sws_scale</name><argument_list>(<argument><expr><name><name>f</name><operator>.</operator><name>pre_filter_context</name></name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src2_linesize</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>dst2</name></expr></argument>, <argument><expr><name>dst2_linesize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UPDATE_FACTOR</name></cpp:macro> <cpp:value>do { int factor; factor = f.color_diff_coeff[COLOR_DIFF_COEFF_SIZE/2 + pre_val - f.pre_filter_buf[ix + iy*f.pre_filter_linesize]] * f.dist_coeff[dx + dy*f.dist_linesize]; sum += src[ix + iy*src_linesize] * factor; div += factor; } while (0)</cpp:value></cpp:define>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>h</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>w</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>sum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>div</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>dy</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>pre_val</name> <init>= <expr><name><name>f</name><operator>.</operator><name>pre_filter_buf</name><index>[<expr><name>x</name> <operator>+</operator> <name>y</name><operator>*</operator><name><name>f</name><operator>.</operator><name>pre_filter_linesize</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>x</name> <operator>&gt;=</operator> <name>radius</name> <operator>&amp;&amp;</operator> <name>x</name> <operator>&lt;</operator> <name>w</name> <operator>-</operator> <name>radius</name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>dy</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>dy</name> <operator>&lt;</operator> <name>radius</name><operator>*</operator><literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>dy</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>dx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>iy</name> <init>= <expr><name>y</name><operator>+</operator><name>dy</name> <operator>-</operator> <name>radius</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>iy</name> <operator>=</operator> <call><name>avpriv_mirror</name><argument_list>(<argument><expr><name>iy</name></expr></argument>, <argument><expr><name>h</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>dx</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>dx</name> <operator>&lt;</operator> <name>radius</name><operator>*</operator><literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>dx</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>ix</name> <init>= <expr><name>x</name><operator>+</operator><name>dx</name> <operator>-</operator> <name>radius</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>UPDATE_FACTOR</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></if> <else>else <block>{<block_content>

<for>for <control>(<init><expr><name>dy</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>dy</name> <operator>&lt;</operator> <name>radius</name><operator>*</operator><literal type="number">2</literal><operator>+</operator><literal type="number">1</literal></expr>;</condition> <incr><expr><name>dy</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>dx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>iy</name> <init>= <expr><name>y</name><operator>+</operator><name>dy</name> <operator>-</operator> <name>radius</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>iy</name> <operator>=</operator> <call><name>avpriv_mirror</name><argument_list>(<argument><expr><name>iy</name></expr></argument>, <argument><expr><name>h</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>dx</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>dx</name> <operator>&lt;</operator> <name>radius</name><operator>*</operator><literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>dx</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ix</name> <init>= <expr><name>x</name><operator>+</operator><name>dx</name> <operator>-</operator> <name>radius</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>ix</name> <operator>=</operator> <call><name>avpriv_mirror</name><argument_list>(<argument><expr><name>ix</name></expr></argument>, <argument><expr><name>w</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>UPDATE_FACTOR</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>dst</name><index>[<expr><name>x</name> <operator>+</operator> <name>y</name><operator>*</operator><name>dst_linesize</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>sum</name> <operator>+</operator> <name>div</name><operator>/</operator><literal type="number">2</literal><operator>)</operator> <operator>/</operator> <name>div</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>filter_frame</name><parameter_list>(<parameter><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>inlink</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>inpic</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>SabContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>inlink</name><operator>-&gt;</operator><name>dst</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>outlink</name> <init>= <expr><name><name>inlink</name><operator>-&gt;</operator><name>dst</name><operator>-&gt;</operator><name>outputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>outpic</name></decl>;</decl_stmt>

<expr_stmt><expr><name>outpic</name> <operator>=</operator> <call><name>ff_get_video_buffer</name><argument_list>(<argument><expr><name>outlink</name></expr></argument>, <argument><expr><name><name>outlink</name><operator>-&gt;</operator><name>w</name></name></expr></argument>, <argument><expr><name><name>outlink</name><operator>-&gt;</operator><name>h</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>outpic</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>inpic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_frame_copy_props</name><argument_list>(<argument><expr><name>outpic</name></expr></argument>, <argument><expr><name>inpic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>blur</name><argument_list>(<argument><expr><name><name>outpic</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>outpic</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>inpic</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>inpic</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,

<argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>w</name></name></expr></argument>, <argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>h</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>luma</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>inpic</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>cw</name> <init>= <expr><call><name>AV_CEIL_RSHIFT</name><argument_list>(<argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>w</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>hsub</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ch</name> <init>= <expr><call><name>AV_CEIL_RSHIFT</name><argument_list>(<argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>h</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>vsub</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>blur</name><argument_list>(<argument><expr><name><name>outpic</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>outpic</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>inpic</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>inpic</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>cw</name></expr></argument>, <argument><expr><name>ch</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>chroma</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>blur</name><argument_list>(<argument><expr><name><name>outpic</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>outpic</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>inpic</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>inpic</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name>cw</name></expr></argument>, <argument><expr><name>ch</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>chroma</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>inpic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>ff_filter_frame</name><argument_list>(<argument><expr><name>outlink</name></expr></argument>, <argument><expr><name>outpic</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVFilterPad</name></type> <name><name>sab_inputs</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"default"</literal></expr>,

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,

<expr><operator>.</operator><name>filter_frame</name> <operator>=</operator> <name>filter_frame</name></expr>,

<expr><operator>.</operator><name>config_props</name> <operator>=</operator> <name>config_props</name></expr>,

}</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVFilterPad</name></type> <name><name>sab_outputs</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"default"</literal></expr>,

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,

}</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFilter</name></type> <name>ff_vf_sab</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"sab"</literal></expr>,

<expr><operator>.</operator><name>description</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"Apply shape adaptive blur."</literal></expr></argument>)</argument_list></call></expr>,

<expr><operator>.</operator><name>priv_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SabContext</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>init</name></expr>,

<expr><operator>.</operator><name>uninit</name> <operator>=</operator> <name>uninit</name></expr>,

<expr><operator>.</operator><name>query_formats</name> <operator>=</operator> <name>query_formats</name></expr>,

<expr><operator>.</operator><name>inputs</name> <operator>=</operator> <name>sab_inputs</name></expr>,

<expr><operator>.</operator><name>outputs</name> <operator>=</operator> <name>sab_outputs</name></expr>,

<expr><operator>.</operator><name>priv_class</name> <operator>=</operator> <operator>&amp;</operator><name>sab_class</name></expr>,

<expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>AVFILTER_FLAG_SUPPORT_TIMELINE_GENERIC</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

</unit>
