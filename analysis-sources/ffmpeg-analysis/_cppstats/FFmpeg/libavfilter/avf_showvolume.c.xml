<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavfilter\avf_showvolume.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avstring.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/channel_layout.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/eval.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/intreadwrite.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/opt.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/parseutils.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/xga_font_data.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avfilter.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"filters.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"formats.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"audio.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"video.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>var_names</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="string">"VOLUME"</literal></expr>, <expr><literal type="string">"CHANNEL"</literal></expr>, <expr><literal type="string">"PEAK"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr></init></decl>;</decl_stmt>

<enum>enum <block>{ <decl><name>VAR_VOLUME</name></decl>, <decl><name>VAR_CHANNEL</name></decl>, <decl><name>VAR_PEAK</name></decl>, <decl><name>VAR_VARS_NB</name></decl> }</block>;</enum>

<enum>enum <name>DisplayScale</name> <block>{ <decl><name>LINEAR</name></decl>, <decl><name>LOG</name></decl>, <decl><name>NB_DISPLAY_SCALE</name></decl> }</block>;</enum>

<typedef>typedef <type><struct>struct <name>ShowVolumeContext</name> <block>{

<decl_stmt><decl><type><specifier>const</specifier> <name>AVClass</name> <modifier>*</modifier></type><name>class</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>w</name></decl>, <name>h</name>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>b</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>f</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVRational</name></type> <name>frame_rate</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>color</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>orientation</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>step</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>bgopacity</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>mode</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>nb_samples</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>out</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVExpr</name> <modifier>*</modifier></type><name>c_expr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>draw_text</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>draw_volume</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name> <modifier>*</modifier></type><name>values</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>color_lut</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>max</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>rms_factor</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>display_scale</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>draw_persistent_duration</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>persistant_max_rgba</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>persistent_max_frames</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>max_persistent</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>nb_frames_max_display</name></decl>;</decl_stmt> 

<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>meter</name>)<parameter_list>(<parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nb_samples</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>max</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>factor</name></decl></parameter>)</parameter_list>;</function_decl>

}</block></struct></type> <name>ShowVolumeContext</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OFFSET</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>offsetof(ShowVolumeContext, x)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLAGS</name></cpp:macro> <cpp:value>AV_OPT_FLAG_FILTERING_PARAM|AV_OPT_FLAG_VIDEO_PARAM</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVOption</name></type> <name><name>showvolume_options</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><literal type="string">"rate"</literal></expr>, <expr><literal type="string">"set video rate"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>frame_rate</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_VIDEO_RATE</name></expr>, <expr><block>{<expr><operator>.</operator><name>str</name><operator>=</operator><literal type="string">"25"</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"r"</literal></expr>, <expr><literal type="string">"set video rate"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>frame_rate</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_VIDEO_RATE</name></expr>, <expr><block>{<expr><operator>.</operator><name>str</name><operator>=</operator><literal type="string">"25"</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"b"</literal></expr>, <expr><literal type="string">"set border width"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"w"</literal></expr>, <expr><literal type="string">"set channel width"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">400</literal></expr>}</block></expr>, <expr><literal type="number">80</literal></expr>, <expr><literal type="number">8192</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"h"</literal></expr>, <expr><literal type="string">"set channel height"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">20</literal></expr>}</block></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">900</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"f"</literal></expr>, <expr><literal type="string">"set fade"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_DOUBLE</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name><operator>=</operator><literal type="number">0.95</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"c"</literal></expr>, <expr><literal type="string">"set volume color expression"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>color</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_STRING</name></expr>, <expr><block>{<expr><operator>.</operator><name>str</name><operator>=</operator><literal type="string">"PEAK*255+floor((1-PEAK)*255)*256+0xff000000"</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"t"</literal></expr>, <expr><literal type="string">"display channel names"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>draw_text</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_BOOL</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"v"</literal></expr>, <expr><literal type="string">"display volume value"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>draw_volume</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_BOOL</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"dm"</literal></expr>, <expr><literal type="string">"duration for max value display"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>draw_persistent_duration</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_DOUBLE</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name><operator>=</operator><literal type="number">0.</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">9000</literal></expr>, <expr><name>FLAGS</name></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"dmc"</literal></expr>,<expr><literal type="string">"set color of the max value line"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>persistant_max_rgba</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_COLOR</name></expr>, <expr><block>{<expr><operator>.</operator><name>str</name> <operator>=</operator> <literal type="string">"orange"</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"o"</literal></expr>, <expr><literal type="string">"set orientation"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>orientation</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">0</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"orientation"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"h"</literal></expr>, <expr><literal type="string">"horizontal"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">0</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"orientation"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"v"</literal></expr>, <expr><literal type="string">"vertical"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"orientation"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"s"</literal></expr>, <expr><literal type="string">"set step size"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>step</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">0</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"p"</literal></expr>, <expr><literal type="string">"set background opacity"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>bgopacity</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_FLOAT</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name><operator>=</operator><literal type="number">0</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"m"</literal></expr>, <expr><literal type="string">"set mode"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">0</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"mode"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"p"</literal></expr>, <expr><literal type="string">"peak"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">0</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"mode"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"r"</literal></expr>, <expr><literal type="string">"rms"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"mode"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"ds"</literal></expr>, <expr><literal type="string">"set display scale"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>display_scale</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>LINEAR</name></expr>}</block></expr>, <expr><name>LINEAR</name></expr>, <expr><name>NB_DISPLAY_SCALE</name> <operator>-</operator> <literal type="number">1</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"display_scale"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"lin"</literal></expr>, <expr><literal type="string">"linear"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>LINEAR</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"display_scale"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"log"</literal></expr>, <expr><literal type="string">"log"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>LOG</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"display_scale"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>AVFILTER_DEFINE_CLASS</name><argument_list>(<argument><expr><name>showvolume</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>init</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ShowVolumeContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>color</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>av_expr_parse</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>c_expr</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>color</name></name></expr></argument>, <argument><expr><name>var_names</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>query_formats</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVFilterFormats</name> <modifier>*</modifier></type><name>formats</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFilterChannelLayouts</name> <modifier>*</modifier></type><name>layouts</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>inlink</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>inputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>outlink</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>outputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>enum</name> <name>AVSampleFormat</name></name></type> <name><name>sample_fmts</name><index>[]</index></name> <init>= <expr><block>{ <expr><name>AV_SAMPLE_FMT_FLTP</name></expr>, <expr><name>AV_SAMPLE_FMT_NONE</name></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>enum</name> <name>AVPixelFormat</name></name></type> <name><name>pix_fmts</name><index>[]</index></name> <init>= <expr><block>{ <expr><name>AV_PIX_FMT_RGBA</name></expr>, <expr><name>AV_PIX_FMT_NONE</name></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name>formats</name> <operator>=</operator> <call><name>ff_make_format_list</name><argument_list>(<argument><expr><name>sample_fmts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_formats_ref</name><argument_list>(<argument><expr><name>formats</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>inlink</name><operator>-&gt;</operator><name>out_formats</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>layouts</name> <operator>=</operator> <call><name>ff_all_channel_counts</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_channel_layouts_ref</name><argument_list>(<argument><expr><name>layouts</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>inlink</name><operator>-&gt;</operator><name>out_channel_layouts</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>formats</name> <operator>=</operator> <call><name>ff_all_samplerates</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_formats_ref</name><argument_list>(<argument><expr><name>formats</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>inlink</name><operator>-&gt;</operator><name>out_samplerates</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>formats</name> <operator>=</operator> <call><name>ff_make_format_list</name><argument_list>(<argument><expr><name>pix_fmts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_formats_ref</name><argument_list>(<argument><expr><name>formats</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>outlink</name><operator>-&gt;</operator><name>in_formats</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>find_peak</name><parameter_list>(<parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nb_samples</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>peak</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>factor</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>peak</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nb_samples</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>peak</name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><operator>*</operator><name>peak</name></expr></argument>, <argument><expr><call><name>FFABS</name><argument_list>(<argument><expr><name><name>src</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>find_rms</name><parameter_list>(<parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nb_samples</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>rms</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>factor</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nb_samples</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>rms</name> <operator>+=</operator> <name>factor</name> <operator>*</operator> <operator>(</operator><name><name>src</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name><name>src</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <operator>*</operator><name>rms</name><operator>)</operator></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>config_input</name><parameter_list>(<parameter><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>inlink</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>inlink</name><operator>-&gt;</operator><name>dst</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ShowVolumeContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>nb_samples</name></name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name>av_rescale</name><argument_list>(<argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>sample_rate</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>frame_rate</name><operator>.</operator><name>den</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>frame_rate</name><operator>.</operator><name>num</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>values</name></name> <operator>=</operator> <call><name>av_calloc</name><argument_list>(<argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>channels</name></name> <operator>*</operator> <name>VAR_VARS_NB</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>double</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>values</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>color_lut</name></name> <operator>=</operator> <call><name>av_calloc</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>w</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>color_lut</name></name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>inlink</name><operator>-&gt;</operator><name>channels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>color_lut</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>max</name></name> <operator>=</operator> <call><name>av_calloc</name><argument_list>(<argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>channels</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>max</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>max</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>rms_factor</name></name> <operator>=</operator> <literal type="number">10000.</literal> <operator>/</operator> <name><name>inlink</name><operator>-&gt;</operator><name>sample_rate</name></name></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>mode</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">0</literal></expr>:</case> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>meter</name></name> <operator>=</operator> <name>find_peak</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">1</literal></expr>:</case> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>meter</name></name> <operator>=</operator> <name>find_rms</name></expr>;</expr_stmt> <break>break;</break>

<default>default:</default> <return>return <expr><name>AVERROR_BUG</name></expr>;</return>

</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>draw_persistent_duration</name></name> <operator>&gt;</operator> <literal type="number">0.</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>persistent_max_frames</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><call><name>av_q2d</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>frame_rate</name></name></expr></argument>)</argument_list></call> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>draw_persistent_duration</name></name></expr></argument>, <argument><expr><literal type="number">1.</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>max_persistent</name></name> <operator>=</operator> <call><name>av_calloc</name><argument_list>(<argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>channels</name></name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>persistent_max_frames</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>max_persistent</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>nb_frames_max_display</name></name> <operator>=</operator> <call><name>av_calloc</name><argument_list>(<argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>channels</name></name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>persistent_max_frames</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>nb_frames_max_display</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>config_output</name><parameter_list>(<parameter><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>outlink</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ShowVolumeContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>outlink</name><operator>-&gt;</operator><name>src</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>inlink</name> <init>= <expr><name><name>outlink</name><operator>-&gt;</operator><name>src</name><operator>-&gt;</operator><name>inputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ch</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>orientation</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>outlink</name><operator>-&gt;</operator><name>h</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>w</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>outlink</name><operator>-&gt;</operator><name>w</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>h</name></name> <operator>*</operator> <name><name>inlink</name><operator>-&gt;</operator><name>channels</name></name> <operator>+</operator> <operator>(</operator><name><name>inlink</name><operator>-&gt;</operator><name>channels</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>b</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>outlink</name><operator>-&gt;</operator><name>w</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>w</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>outlink</name><operator>-&gt;</operator><name>h</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>h</name></name> <operator>*</operator> <name><name>inlink</name><operator>-&gt;</operator><name>channels</name></name> <operator>+</operator> <operator>(</operator><name><name>inlink</name><operator>-&gt;</operator><name>channels</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>b</name></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>outlink</name><operator>-&gt;</operator><name>sample_aspect_ratio</name></name> <operator>=</operator> <operator>(</operator><name>AVRational</name><operator>)</operator><block>{<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>}</block></expr>;</expr_stmt>

<expr_stmt><expr><name><name>outlink</name><operator>-&gt;</operator><name>frame_rate</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>frame_rate</name></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>ch</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ch</name> <operator>&lt;</operator> <name><name>inlink</name><operator>-&gt;</operator><name>channels</name></name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>w</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>max</name> <init>= <expr><name>i</name> <operator>/</operator> <operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>w</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>values</name><index>[<expr><name>ch</name> <operator>*</operator> <name>VAR_VARS_NB</name> <operator>+</operator> <name>VAR_PEAK</name></expr>]</index></name> <operator>=</operator> <name>max</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>values</name><index>[<expr><name>ch</name> <operator>*</operator> <name>VAR_VARS_NB</name> <operator>+</operator> <name>VAR_VOLUME</name></expr>]</index></name> <operator>=</operator> <literal type="number">20.0</literal> <operator>*</operator> <call><name>log10</name><argument_list>(<argument><expr><name>max</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>values</name><index>[<expr><name>ch</name> <operator>*</operator> <name>VAR_VARS_NB</name> <operator>+</operator> <name>VAR_CHANNEL</name></expr>]</index></name> <operator>=</operator> <name>ch</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>color_lut</name><index>[<expr><name>ch</name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>w</name></name> <operator>+</operator> <name>i</name></expr>]</index></name> <operator>=</operator> <call><name>av_expr_eval</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>c_expr</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>values</name><index>[<expr><name>ch</name> <operator>*</operator> <name>VAR_VARS_NB</name></expr>]</index></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>drawtext</name><parameter_list>(<parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>pic</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>txt</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>o</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>font</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>font_height</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name>font</name> <operator>=</operator> <name>avpriv_cga_font</name></expr><operator>,</operator> <expr><name>font_height</name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>txt</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>char_y</name></decl>, <decl><type ref="prev"/><name>mask</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>o</name></expr>)</condition> <block>{<block_content> 

<for>for <control>(<init><expr><name>char_y</name> <operator>=</operator> <name>font_height</name> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>char_y</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>char_y</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name><name>pic</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><name>y</name> <operator>+</operator> <name>i</name> <operator>*</operator> <literal type="number">10</literal><operator>)</operator> <operator>*</operator> <name><name>pic</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>x</name> <operator>*</operator> <literal type="number">4</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>mask</name> <operator>=</operator> <literal type="number">0x80</literal></expr>;</init> <condition><expr><name>mask</name></expr>;</condition> <incr><expr><name>mask</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>font</name><index>[<expr><name><name>txt</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name>font_height</name> <operator>+</operator> <name>font_height</name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <name>char_y</name></expr>]</index></name> <operator>&amp;</operator> <name>mask</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>AV_WN32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><index>[<expr><name>char_y</name> <operator>*</operator> <literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>~</operator><call><name>AV_RN32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><index>[<expr><name>char_y</name> <operator>*</operator> <literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>p</name> <operator>+=</operator> <name><name>pic</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></if> <else>else <block>{<block_content> 

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name><name>pic</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>y</name> <operator>*</operator> <name><name>pic</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><name>x</name> <operator>+</operator> <name>i</name> <operator>*</operator> <literal type="number">8</literal><operator>)</operator> <operator>*</operator> <literal type="number">4</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>char_y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>char_y</name> <operator>&lt;</operator> <name>font_height</name></expr>;</condition> <incr><expr><name>char_y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>mask</name> <operator>=</operator> <literal type="number">0x80</literal></expr>;</init> <condition><expr><name>mask</name></expr>;</condition> <incr><expr><name>mask</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>font</name><index>[<expr><name><name>txt</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name>font_height</name> <operator>+</operator> <name>char_y</name></expr>]</index></name> <operator>&amp;</operator> <name>mask</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>AV_WN32</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><operator>~</operator><call><name>AV_RN32</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>p</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>p</name> <operator>+=</operator> <name><name>pic</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <literal type="number">8</literal> <operator>*</operator> <literal type="number">4</literal></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>clear_picture</name><parameter_list>(<parameter><decl><type><name>ShowVolumeContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>outlink</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>bg</name> <init>= <expr><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>bgopacity</name></name> <operator>*</operator> <literal type="number">255</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">24</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>outlink</name><operator>-&gt;</operator><name>h</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>i</name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>outlink</name><operator>-&gt;</operator><name>w</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>AV_WN32A</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <name>j</name></expr></argument>, <argument><expr><name>bg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>calc_max_draw</name><parameter_list>(<parameter><decl><type><name>ShowVolumeContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>outlink</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>max</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>max_val</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>display_scale</name></name> <operator>==</operator> <name>LINEAR</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>max_val</name> <operator>=</operator> <name>max</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content> 

<expr_stmt><expr><name>max_val</name> <operator>=</operator> <call><name>av_clipf</name><argument_list>(<argument><expr><literal type="number">0.21</literal> <operator>*</operator> <call><name>log10</name><argument_list>(<argument><expr><name>max</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>orientation</name></name></expr>)</condition> <block>{<block_content> 

<return>return <expr><name><name>outlink</name><operator>-&gt;</operator><name>h</name></name> <operator>-</operator> <name><name>outlink</name><operator>-&gt;</operator><name>h</name></name> <operator>*</operator> <name>max_val</name></expr>;</return>

</block_content>}</block></if> <else>else <block>{<block_content> 

<return>return <expr><name><name>s</name><operator>-&gt;</operator><name>w</name></name> <operator>*</operator> <name>max_val</name></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>calc_persistent_max</name><parameter_list>(<parameter><decl><type><name>ShowVolumeContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>max</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>channel</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>max</name> <operator>&gt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>max_persistent</name><index>[<expr><name>channel</name></expr>]</index></name><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>nb_frames_max_display</name><index>[<expr><name>channel</name></expr>]</index></name> <operator>&gt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>persistent_max_frames</name></name><operator>)</operator></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>max_persistent</name><index>[<expr><name>channel</name></expr>]</index></name> <operator>=</operator> <name>max</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>nb_frames_max_display</name><index>[<expr><name>channel</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>nb_frames_max_display</name><index>[<expr><name>channel</name></expr>]</index></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt> 

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>draw_max_line</name><parameter_list>(<parameter><decl><type><name>ShowVolumeContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>max_draw</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>channel</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>k</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>orientation</name></name></expr>)</condition> <block>{<block_content> 

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>max_draw</name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>channel</name> <operator>*</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>b</name></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>h</name></name><operator>)</operator> <operator>*</operator> <literal type="number">4</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>h</name></name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <name>k</name> <operator>*</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>persistant_max_rgba</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>persistant_max_rgba</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if> <else>else <block>{<block_content> 

<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>h</name></name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><name>channel</name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>h</name></name> <operator>+</operator> <name>channel</name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>b</name></name> <operator>+</operator> <name>k</name><operator>)</operator> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <name>max_draw</name> <operator>*</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>persistant_max_rgba</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>persistant_max_rgba</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>filter_frame</name><parameter_list>(<parameter><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>inlink</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>insamples</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>inlink</name><operator>-&gt;</operator><name>dst</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>outlink</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>outputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ShowVolumeContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>step</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>step</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>k</name></decl>, <decl><type ref="prev"/><name>max_draw</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>out</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>out</name></name> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>out</name><operator>-&gt;</operator><name>width</name></name> <operator>!=</operator> <name><name>outlink</name><operator>-&gt;</operator><name>w</name></name> <operator>||</operator>

<name><name>s</name><operator>-&gt;</operator><name>out</name><operator>-&gt;</operator><name>height</name></name> <operator>!=</operator> <name><name>outlink</name><operator>-&gt;</operator><name>h</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>out</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>out</name></name> <operator>=</operator> <call><name>ff_get_video_buffer</name><argument_list>(<argument><expr><name>outlink</name></expr></argument>, <argument><expr><name><name>outlink</name><operator>-&gt;</operator><name>w</name></name></expr></argument>, <argument><expr><name><name>outlink</name><operator>-&gt;</operator><name>h</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>out</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>insamples</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>clear_picture</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>outlink</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>out</name><operator>-&gt;</operator><name>pts</name></name> <operator>=</operator> <name><name>insamples</name><operator>-&gt;</operator><name>pts</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>f</name></name> <operator>&lt;</operator> <literal type="number">1.</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>f</name></name> <operator>&gt;</operator> <literal type="number">0.</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>outlink</name><operator>-&gt;</operator><name>h</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>j</name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>alpha</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>bgopacity</name></name> <operator>*</operator> <literal type="number">255</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name><name>outlink</name><operator>-&gt;</operator><name>w</name></name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>dst</name><index>[<expr><name>k</name> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name><name>dst</name><index>[<expr><name>k</name> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>f</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><index>[<expr><name>k</name> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name><name>dst</name><index>[<expr><name>k</name> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>f</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><index>[<expr><name>k</name> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name><name>dst</name><index>[<expr><name>k</name> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>f</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><index>[<expr><name>k</name> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name><name>dst</name><index>[<expr><name>k</name> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>f</name></name></expr></argument>, <argument><expr><name>alpha</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>f</name></name> <operator>==</operator> <literal type="number">0.</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>clear_picture</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>outlink</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>orientation</name></name></expr>)</condition> <block>{<block_content> 

<for>for <control>(<init><expr><name>c</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>c</name> <operator>&lt;</operator> <name><name>inlink</name><operator>-&gt;</operator><name>channels</name></name></expr>;</condition> <incr><expr><name>c</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><name><name>insamples</name><operator>-&gt;</operator><name>extended_data</name><index>[<expr><name>c</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>lut</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>color_lut</name></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>w</name></name> <operator>*</operator> <name>c</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>max</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>meter</name></name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name><name>insamples</name><operator>-&gt;</operator><name>nb_samples</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>max</name><index>[<expr><name>c</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>rms_factor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>max</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>max</name><index>[<expr><name>c</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>values</name><index>[<expr><name>c</name> <operator>*</operator> <name>VAR_VARS_NB</name> <operator>+</operator> <name>VAR_VOLUME</name></expr>]</index></name> <operator>=</operator> <literal type="number">20.0</literal> <operator>*</operator> <call><name>log10</name><argument_list>(<argument><expr><name>max</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>max</name> <operator>=</operator> <call><name>av_clipf</name><argument_list>(<argument><expr><name>max</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>max_draw</name> <operator>=</operator> <call><name>calc_max_draw</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>outlink</name></expr></argument>, <argument><expr><name>max</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <name>max_draw</name></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>w</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>j</name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>c</name> <operator>*</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>b</name></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>h</name></name><operator>)</operator> <operator>*</operator> <literal type="number">4</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>h</name></name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>AV_WN32A</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dst</name><index>[<expr><name>k</name> <operator>*</operator> <literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>lut</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>w</name></name> <operator>-</operator> <name>j</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>j</name> <operator>&amp;</operator> <name>step</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>j</name> <operator>+=</operator> <name>step</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>h</name></name> <operator>&gt;=</operator> <literal type="number">8</literal> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>draw_text</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>channel_name</name> <init>= <expr><call><name>av_get_channel_name</name><argument_list>(<argument><expr><call><name>av_channel_layout_extract_channel</name><argument_list>(<argument><expr><name><name>insamples</name><operator>-&gt;</operator><name>channel_layout</name></name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>channel_name</name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>drawtext</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>out</name></name></expr></argument>, <argument><expr><name>c</name> <operator>*</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>h</name></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>b</name></name><operator>)</operator> <operator>+</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>h</name></name> <operator>-</operator> <literal type="number">10</literal><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name><name>outlink</name><operator>-&gt;</operator><name>h</name></name> <operator>-</operator> <literal type="number">35</literal></expr></argument>, <argument><expr><name>channel_name</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>draw_persistent_duration</name></name> <operator>&gt;</operator> <literal type="number">0.</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>calc_persistent_max</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>max</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>max_draw</name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>calc_max_draw</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>outlink</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>max_persistent</name><index>[<expr><name>c</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>draw_max_line</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>max_draw</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if> <else>else <block>{<block_content> 

<for>for <control>(<init><expr><name>c</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>c</name> <operator>&lt;</operator> <name><name>inlink</name><operator>-&gt;</operator><name>channels</name></name></expr>;</condition> <incr><expr><name>c</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><name><name>insamples</name><operator>-&gt;</operator><name>extended_data</name><index>[<expr><name>c</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>lut</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>color_lut</name></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>w</name></name> <operator>*</operator> <name>c</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>max</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>meter</name></name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name><name>insamples</name><operator>-&gt;</operator><name>nb_samples</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>max</name><index>[<expr><name>c</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>rms_factor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>max</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>max</name><index>[<expr><name>c</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>values</name><index>[<expr><name>c</name> <operator>*</operator> <name>VAR_VARS_NB</name> <operator>+</operator> <name>VAR_VOLUME</name></expr>]</index></name> <operator>=</operator> <literal type="number">20.0</literal> <operator>*</operator> <call><name>log10</name><argument_list>(<argument><expr><name>max</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>max</name> <operator>=</operator> <call><name>av_clipf</name><argument_list>(<argument><expr><name>max</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>max_draw</name> <operator>=</operator> <call><name>calc_max_draw</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>outlink</name></expr></argument>, <argument><expr><name>max</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>h</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><name>c</name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>h</name></name> <operator>+</operator> <name>c</name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>b</name></name> <operator>+</operator> <name>j</name><operator>)</operator> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>max_draw</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>AV_WN32A</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <name>k</name> <operator>*</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name><name>lut</name><index>[<expr><name>k</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>k</name> <operator>&amp;</operator> <name>step</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>k</name> <operator>+=</operator> <name>step</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>h</name></name> <operator>&gt;=</operator> <literal type="number">8</literal> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>draw_text</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>channel_name</name> <init>= <expr><call><name>av_get_channel_name</name><argument_list>(<argument><expr><call><name>av_channel_layout_extract_channel</name><argument_list>(<argument><expr><name><name>insamples</name><operator>-&gt;</operator><name>channel_layout</name></name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>channel_name</name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>drawtext</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>out</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>c</name> <operator>*</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>h</name></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>b</name></name><operator>)</operator> <operator>+</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>h</name></name> <operator>-</operator> <literal type="number">8</literal><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>channel_name</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>draw_persistent_duration</name></name> <operator>&gt;</operator> <literal type="number">0.</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>calc_persistent_max</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>max</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>max_draw</name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>calc_max_draw</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>outlink</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>max_persistent</name><index>[<expr><name>c</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>draw_max_line</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>max_draw</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>insamples</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>out</name> <operator>=</operator> <call><name>av_frame_clone</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>out</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>out</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_frame_make_writable</name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>c</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>c</name> <operator>&lt;</operator> <name><name>inlink</name><operator>-&gt;</operator><name>channels</name></name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>h</name></name> <operator>&gt;=</operator> <literal type="number">8</literal> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>draw_volume</name></name></expr>;</condition> <incr><expr><name>c</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>orientation</name></name></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%.2f"</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>values</name><index>[<expr><name>c</name> <operator>*</operator> <name>VAR_VARS_NB</name> <operator>+</operator> <name>VAR_VOLUME</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>drawtext</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>c</name> <operator>*</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>h</name></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>b</name></name><operator>)</operator> <operator>+</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>h</name></name> <operator>-</operator> <literal type="number">8</literal><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content> 

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%.2f"</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>values</name><index>[<expr><name>c</name> <operator>*</operator> <name>VAR_VARS_NB</name> <operator>+</operator> <name>VAR_VOLUME</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>drawtext</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><call><name>FFMAX</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>w</name></name> <operator>-</operator> <literal type="number">8</literal> <operator>*</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>strlen</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>c</name> <operator>*</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>h</name></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>b</name></name><operator>)</operator> <operator>+</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>h</name></name> <operator>-</operator> <literal type="number">8</literal><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

<return>return <expr><call><name>ff_filter_frame</name><argument_list>(<argument><expr><name>outlink</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>activate</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>inlink</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>inputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>outlink</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>outputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ShowVolumeContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>in</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>FF_FILTER_FORWARD_STATUS_BACK</name><argument_list>(<argument><expr><name>outlink</name></expr></argument>, <argument><expr><name>inlink</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_inlink_consume_samples</name><argument_list>(<argument><expr><name>inlink</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>nb_samples</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>nb_samples</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>filter_frame</name><argument_list>(<argument><expr><name>inlink</name></expr></argument>, <argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>FF_FILTER_FORWARD_STATUS</name><argument_list>(<argument><expr><name>inlink</name></expr></argument>, <argument><expr><name>outlink</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>FF_FILTER_FORWARD_WANTED</name><argument_list>(<argument><expr><name>outlink</name></expr></argument>, <argument><expr><name>inlink</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>FFERROR_NOT_READY</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>void</name></type> <name>uninit</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ShowVolumeContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>out</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_expr_free</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>c_expr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>values</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>color_lut</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>max</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVFilterPad</name></type> <name><name>showvolume_inputs</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"default"</literal></expr>,

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_AUDIO</name></expr>,

<expr><operator>.</operator><name>config_props</name> <operator>=</operator> <name>config_input</name></expr>,

}</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVFilterPad</name></type> <name><name>showvolume_outputs</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"default"</literal></expr>,

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,

<expr><operator>.</operator><name>config_props</name> <operator>=</operator> <name>config_output</name></expr>,

}</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFilter</name></type> <name>ff_avf_showvolume</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"showvolume"</literal></expr>,

<expr><operator>.</operator><name>description</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"Convert input audio volume to video output."</literal></expr></argument>)</argument_list></call></expr>,

<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>init</name></expr>,

<expr><operator>.</operator><name>activate</name> <operator>=</operator> <name>activate</name></expr>,

<expr><operator>.</operator><name>uninit</name> <operator>=</operator> <name>uninit</name></expr>,

<expr><operator>.</operator><name>query_formats</name> <operator>=</operator> <name>query_formats</name></expr>,

<expr><operator>.</operator><name>priv_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>ShowVolumeContext</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><operator>.</operator><name>inputs</name> <operator>=</operator> <name>showvolume_inputs</name></expr>,

<expr><operator>.</operator><name>outputs</name> <operator>=</operator> <name>showvolume_outputs</name></expr>,

<expr><operator>.</operator><name>priv_class</name> <operator>=</operator> <operator>&amp;</operator><name>showvolume_class</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

</unit>
