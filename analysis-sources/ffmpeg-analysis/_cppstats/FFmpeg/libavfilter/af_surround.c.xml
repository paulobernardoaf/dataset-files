<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavfilter\af_surround.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avassert.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/audio_fifo.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/channel_layout.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/opt.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavcodec/avfft.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avfilter.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"audio.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"filters.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"formats.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"window_func.h"</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct <name>AudioSurroundContext</name> <block>{

<decl_stmt><decl><type><specifier>const</specifier> <name>AVClass</name> <modifier>*</modifier></type><name>class</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>out_channel_layout_str</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>in_channel_layout_str</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>level_in</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>level_out</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>fc_in</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>fc_out</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>fl_in</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>fl_out</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>fr_in</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>fr_out</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>sl_in</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>sl_out</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>sr_in</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>sr_out</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>bl_in</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>bl_out</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>br_in</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>br_out</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>bc_in</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>bc_out</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>lfe_in</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>lfe_out</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>lfe_mode</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>angle</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>win_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>win_func</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>overlap</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>all_x</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>all_y</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>fc_x</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>fl_x</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>fr_x</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>bl_x</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>br_x</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>sl_x</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>sr_x</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>bc_x</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>fc_y</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>fl_y</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>fr_y</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>bl_y</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>br_y</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>sl_y</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>sr_y</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>bc_y</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>input_levels</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>output_levels</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>output_lfe</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>lowcutf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>highcutf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>lowcut</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>highcut</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>out_channel_layout</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>in_channel_layout</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>nb_in_channels</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>nb_out_channels</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>input</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>output</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>overlap_buffer</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>buf_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>hop_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVAudioFifo</name> <modifier>*</modifier></type><name>fifo</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RDFTContext</name> <modifier>*</modifier><modifier>*</modifier></type><name>rdft</name></decl>, <modifier>*</modifier><modifier>*</modifier><name>irdft</name>;</decl_stmt>

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>window_func_lut</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>pts</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>eof</name></decl>;</decl_stmt>

<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>filter</name>)<parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>upmix_stereo</name>)<parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,

<parameter><decl><type><name>float</name></type> <name>l_phase</name></decl></parameter>,

<parameter><decl><type><name>float</name></type> <name>r_phase</name></decl></parameter>,

<parameter><decl><type><name>float</name></type> <name>c_phase</name></decl></parameter>,

<parameter><decl><type><name>float</name></type> <name>mag_total</name></decl></parameter>,

<parameter><decl><type><name>float</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>y</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>upmix_2_1</name>)<parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,

<parameter><decl><type><name>float</name></type> <name>l_phase</name></decl></parameter>,

<parameter><decl><type><name>float</name></type> <name>r_phase</name></decl></parameter>,

<parameter><decl><type><name>float</name></type> <name>c_phase</name></decl></parameter>,

<parameter><decl><type><name>float</name></type> <name>mag_total</name></decl></parameter>,

<parameter><decl><type><name>float</name></type> <name>lfe_im</name></decl></parameter>,

<parameter><decl><type><name>float</name></type> <name>lfe_re</name></decl></parameter>,

<parameter><decl><type><name>float</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>y</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>upmix_3_0</name>)<parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,

<parameter><decl><type><name>float</name></type> <name>l_phase</name></decl></parameter>,

<parameter><decl><type><name>float</name></type> <name>r_phase</name></decl></parameter>,

<parameter><decl><type><name>float</name></type> <name>c_mag</name></decl></parameter>,

<parameter><decl><type><name>float</name></type> <name>c_phase</name></decl></parameter>,

<parameter><decl><type><name>float</name></type> <name>mag_total</name></decl></parameter>,

<parameter><decl><type><name>float</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>y</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>upmix_5_0</name>)<parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,

<parameter><decl><type><name>float</name></type> <name>c_re</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>c_im</name></decl></parameter>,

<parameter><decl><type><name>float</name></type> <name>mag_totall</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>mag_totalr</name></decl></parameter>,

<parameter><decl><type><name>float</name></type> <name>fl_phase</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>fr_phase</name></decl></parameter>,

<parameter><decl><type><name>float</name></type> <name>bl_phase</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>br_phase</name></decl></parameter>,

<parameter><decl><type><name>float</name></type> <name>sl_phase</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>sr_phase</name></decl></parameter>,

<parameter><decl><type><name>float</name></type> <name>xl</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>yl</name></decl></parameter>,

<parameter><decl><type><name>float</name></type> <name>xr</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>yr</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>upmix_5_1</name>)<parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,

<parameter><decl><type><name>float</name></type> <name>c_re</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>c_im</name></decl></parameter>,

<parameter><decl><type><name>float</name></type> <name>lfe_re</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>lfe_im</name></decl></parameter>,

<parameter><decl><type><name>float</name></type> <name>mag_totall</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>mag_totalr</name></decl></parameter>,

<parameter><decl><type><name>float</name></type> <name>fl_phase</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>fr_phase</name></decl></parameter>,

<parameter><decl><type><name>float</name></type> <name>bl_phase</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>br_phase</name></decl></parameter>,

<parameter><decl><type><name>float</name></type> <name>sl_phase</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>sr_phase</name></decl></parameter>,

<parameter><decl><type><name>float</name></type> <name>xl</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>yl</name></decl></parameter>,

<parameter><decl><type><name>float</name></type> <name>xr</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>yr</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list>;</function_decl>

}</block></struct></type> <name>AudioSurroundContext</name>;</typedef>

<function><type><specifier>static</specifier> <name>int</name></type> <name>query_formats</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AudioSurroundContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFilterFormats</name> <modifier>*</modifier></type><name>formats</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFilterChannelLayouts</name> <modifier>*</modifier></type><name>layouts</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_add_format</name><argument_list>(<argument><expr><operator>&amp;</operator><name>formats</name></expr></argument>, <argument><expr><name>AV_SAMPLE_FMT_FLTP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_set_common_formats</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>formats</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>layouts</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_add_channel_layout</name><argument_list>(<argument><expr><operator>&amp;</operator><name>layouts</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>out_channel_layout</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_channel_layouts_ref</name><argument_list>(<argument><expr><name>layouts</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>outputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>in_channel_layouts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>layouts</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_add_channel_layout</name><argument_list>(<argument><expr><operator>&amp;</operator><name>layouts</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>in_channel_layout</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_channel_layouts_ref</name><argument_list>(<argument><expr><name>layouts</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>inputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>out_channel_layouts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>formats</name> <operator>=</operator> <call><name>ff_all_samplerates</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>formats</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>ff_set_common_samplerates</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>formats</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>config_input</name><parameter_list>(<parameter><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>inlink</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>inlink</name><operator>-&gt;</operator><name>dst</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AudioSurroundContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ch</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>rdft</name></name> <operator>=</operator> <call><name>av_calloc</name><argument_list>(<argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>channels</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>rdft</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>rdft</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>ch</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ch</name> <operator>&lt;</operator> <name><name>inlink</name><operator>-&gt;</operator><name>channels</name></name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>rdft</name><index>[<expr><name>ch</name></expr>]</index></name> <operator>=</operator> <call><name>av_rdft_init</name><argument_list>(<argument><expr><call><name>ff_log2</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>buf_size</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>DFT_R2C</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>rdft</name><index>[<expr><name>ch</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>nb_in_channels</name></name> <operator>=</operator> <name><name>inlink</name><operator>-&gt;</operator><name>channels</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>input_levels</name></name> <operator>=</operator> <call><name>av_malloc_array</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>nb_in_channels</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>input_levels</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>input_levels</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>ch</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ch</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>nb_in_channels</name></name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>input_levels</name><index>[<expr><name>ch</name></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>level_in</name></name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>ch</name> <operator>=</operator> <call><name>av_get_channel_layout_channel_index</name><argument_list>(<argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>channel_layout</name></name></expr></argument>, <argument><expr><name>AV_CH_FRONT_CENTER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ch</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>input_levels</name><index>[<expr><name>ch</name></expr>]</index></name> <operator>*=</operator> <name><name>s</name><operator>-&gt;</operator><name>fc_in</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ch</name> <operator>=</operator> <call><name>av_get_channel_layout_channel_index</name><argument_list>(<argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>channel_layout</name></name></expr></argument>, <argument><expr><name>AV_CH_FRONT_LEFT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ch</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>input_levels</name><index>[<expr><name>ch</name></expr>]</index></name> <operator>*=</operator> <name><name>s</name><operator>-&gt;</operator><name>fl_in</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ch</name> <operator>=</operator> <call><name>av_get_channel_layout_channel_index</name><argument_list>(<argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>channel_layout</name></name></expr></argument>, <argument><expr><name>AV_CH_FRONT_RIGHT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ch</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>input_levels</name><index>[<expr><name>ch</name></expr>]</index></name> <operator>*=</operator> <name><name>s</name><operator>-&gt;</operator><name>fr_in</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ch</name> <operator>=</operator> <call><name>av_get_channel_layout_channel_index</name><argument_list>(<argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>channel_layout</name></name></expr></argument>, <argument><expr><name>AV_CH_SIDE_LEFT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ch</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>input_levels</name><index>[<expr><name>ch</name></expr>]</index></name> <operator>*=</operator> <name><name>s</name><operator>-&gt;</operator><name>sl_in</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ch</name> <operator>=</operator> <call><name>av_get_channel_layout_channel_index</name><argument_list>(<argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>channel_layout</name></name></expr></argument>, <argument><expr><name>AV_CH_SIDE_RIGHT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ch</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>input_levels</name><index>[<expr><name>ch</name></expr>]</index></name> <operator>*=</operator> <name><name>s</name><operator>-&gt;</operator><name>sr_in</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ch</name> <operator>=</operator> <call><name>av_get_channel_layout_channel_index</name><argument_list>(<argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>channel_layout</name></name></expr></argument>, <argument><expr><name>AV_CH_BACK_LEFT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ch</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>input_levels</name><index>[<expr><name>ch</name></expr>]</index></name> <operator>*=</operator> <name><name>s</name><operator>-&gt;</operator><name>bl_in</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ch</name> <operator>=</operator> <call><name>av_get_channel_layout_channel_index</name><argument_list>(<argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>channel_layout</name></name></expr></argument>, <argument><expr><name>AV_CH_BACK_RIGHT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ch</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>input_levels</name><index>[<expr><name>ch</name></expr>]</index></name> <operator>*=</operator> <name><name>s</name><operator>-&gt;</operator><name>br_in</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ch</name> <operator>=</operator> <call><name>av_get_channel_layout_channel_index</name><argument_list>(<argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>channel_layout</name></name></expr></argument>, <argument><expr><name>AV_CH_BACK_CENTER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ch</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>input_levels</name><index>[<expr><name>ch</name></expr>]</index></name> <operator>*=</operator> <name><name>s</name><operator>-&gt;</operator><name>bc_in</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ch</name> <operator>=</operator> <call><name>av_get_channel_layout_channel_index</name><argument_list>(<argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>channel_layout</name></name></expr></argument>, <argument><expr><name>AV_CH_LOW_FREQUENCY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ch</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>input_levels</name><index>[<expr><name>ch</name></expr>]</index></name> <operator>*=</operator> <name><name>s</name><operator>-&gt;</operator><name>lfe_in</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>input</name></name> <operator>=</operator> <call><name>ff_get_audio_buffer</name><argument_list>(<argument><expr><name>inlink</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>buf_size</name></name> <operator>*</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>input</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>fifo</name></name> <operator>=</operator> <call><name>av_audio_fifo_alloc</name><argument_list>(<argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>format</name></name></expr></argument>, <argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>channels</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>buf_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>fifo</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>lowcut</name></name> <operator>=</operator> <literal type="number">1.f</literal> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>lowcutf</name></name> <operator>/</operator> <operator>(</operator><name><name>inlink</name><operator>-&gt;</operator><name>sample_rate</name></name> <operator>*</operator> <literal type="number">0.5</literal><operator>)</operator> <operator>*</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>buf_size</name></name> <operator>/</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>highcut</name></name> <operator>=</operator> <literal type="number">1.f</literal> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>highcutf</name></name> <operator>/</operator> <operator>(</operator><name><name>inlink</name><operator>-&gt;</operator><name>sample_rate</name></name> <operator>*</operator> <literal type="number">0.5</literal><operator>)</operator> <operator>*</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>buf_size</name></name> <operator>/</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>config_output</name><parameter_list>(<parameter><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>outlink</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>outlink</name><operator>-&gt;</operator><name>src</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AudioSurroundContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ch</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>irdft</name></name> <operator>=</operator> <call><name>av_calloc</name><argument_list>(<argument><expr><name><name>outlink</name><operator>-&gt;</operator><name>channels</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>irdft</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>irdft</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>ch</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ch</name> <operator>&lt;</operator> <name><name>outlink</name><operator>-&gt;</operator><name>channels</name></name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>irdft</name><index>[<expr><name>ch</name></expr>]</index></name> <operator>=</operator> <call><name>av_rdft_init</name><argument_list>(<argument><expr><call><name>ff_log2</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>buf_size</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>IDFT_C2R</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>irdft</name><index>[<expr><name>ch</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>nb_out_channels</name></name> <operator>=</operator> <name><name>outlink</name><operator>-&gt;</operator><name>channels</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>output_levels</name></name> <operator>=</operator> <call><name>av_malloc_array</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>nb_out_channels</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>output_levels</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>output_levels</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>ch</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ch</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>nb_out_channels</name></name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>output_levels</name><index>[<expr><name>ch</name></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>level_out</name></name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>ch</name> <operator>=</operator> <call><name>av_get_channel_layout_channel_index</name><argument_list>(<argument><expr><name><name>outlink</name><operator>-&gt;</operator><name>channel_layout</name></name></expr></argument>, <argument><expr><name>AV_CH_FRONT_CENTER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ch</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>output_levels</name><index>[<expr><name>ch</name></expr>]</index></name> <operator>*=</operator> <name><name>s</name><operator>-&gt;</operator><name>fc_out</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ch</name> <operator>=</operator> <call><name>av_get_channel_layout_channel_index</name><argument_list>(<argument><expr><name><name>outlink</name><operator>-&gt;</operator><name>channel_layout</name></name></expr></argument>, <argument><expr><name>AV_CH_FRONT_LEFT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ch</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>output_levels</name><index>[<expr><name>ch</name></expr>]</index></name> <operator>*=</operator> <name><name>s</name><operator>-&gt;</operator><name>fl_out</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ch</name> <operator>=</operator> <call><name>av_get_channel_layout_channel_index</name><argument_list>(<argument><expr><name><name>outlink</name><operator>-&gt;</operator><name>channel_layout</name></name></expr></argument>, <argument><expr><name>AV_CH_FRONT_RIGHT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ch</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>output_levels</name><index>[<expr><name>ch</name></expr>]</index></name> <operator>*=</operator> <name><name>s</name><operator>-&gt;</operator><name>fr_out</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ch</name> <operator>=</operator> <call><name>av_get_channel_layout_channel_index</name><argument_list>(<argument><expr><name><name>outlink</name><operator>-&gt;</operator><name>channel_layout</name></name></expr></argument>, <argument><expr><name>AV_CH_SIDE_LEFT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ch</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>output_levels</name><index>[<expr><name>ch</name></expr>]</index></name> <operator>*=</operator> <name><name>s</name><operator>-&gt;</operator><name>sl_out</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ch</name> <operator>=</operator> <call><name>av_get_channel_layout_channel_index</name><argument_list>(<argument><expr><name><name>outlink</name><operator>-&gt;</operator><name>channel_layout</name></name></expr></argument>, <argument><expr><name>AV_CH_SIDE_RIGHT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ch</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>output_levels</name><index>[<expr><name>ch</name></expr>]</index></name> <operator>*=</operator> <name><name>s</name><operator>-&gt;</operator><name>sr_out</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ch</name> <operator>=</operator> <call><name>av_get_channel_layout_channel_index</name><argument_list>(<argument><expr><name><name>outlink</name><operator>-&gt;</operator><name>channel_layout</name></name></expr></argument>, <argument><expr><name>AV_CH_BACK_LEFT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ch</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>output_levels</name><index>[<expr><name>ch</name></expr>]</index></name> <operator>*=</operator> <name><name>s</name><operator>-&gt;</operator><name>bl_out</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ch</name> <operator>=</operator> <call><name>av_get_channel_layout_channel_index</name><argument_list>(<argument><expr><name><name>outlink</name><operator>-&gt;</operator><name>channel_layout</name></name></expr></argument>, <argument><expr><name>AV_CH_BACK_RIGHT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ch</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>output_levels</name><index>[<expr><name>ch</name></expr>]</index></name> <operator>*=</operator> <name><name>s</name><operator>-&gt;</operator><name>br_out</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ch</name> <operator>=</operator> <call><name>av_get_channel_layout_channel_index</name><argument_list>(<argument><expr><name><name>outlink</name><operator>-&gt;</operator><name>channel_layout</name></name></expr></argument>, <argument><expr><name>AV_CH_BACK_CENTER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ch</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>output_levels</name><index>[<expr><name>ch</name></expr>]</index></name> <operator>*=</operator> <name><name>s</name><operator>-&gt;</operator><name>bc_out</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ch</name> <operator>=</operator> <call><name>av_get_channel_layout_channel_index</name><argument_list>(<argument><expr><name><name>outlink</name><operator>-&gt;</operator><name>channel_layout</name></name></expr></argument>, <argument><expr><name>AV_CH_LOW_FREQUENCY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ch</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>output_levels</name><index>[<expr><name>ch</name></expr>]</index></name> <operator>*=</operator> <name><name>s</name><operator>-&gt;</operator><name>lfe_out</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>output</name></name> <operator>=</operator> <call><name>ff_get_audio_buffer</name><argument_list>(<argument><expr><name>outlink</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>buf_size</name></name> <operator>*</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>overlap_buffer</name></name> <operator>=</operator> <call><name>ff_get_audio_buffer</name><argument_list>(<argument><expr><name>outlink</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>buf_size</name></name> <operator>*</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>overlap_buffer</name></name> <operator>||</operator> <operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>output</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>stereo_transform</name><parameter_list>(<parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>y</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>angle</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>reference</name></decl>, <decl><type ref="prev"/><name>r</name></decl>, <decl><type ref="prev"/><name>a</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>angle</name> <operator>==</operator> <literal type="number">90.f</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>reference</name> <operator>=</operator> <name>angle</name> <operator>*</operator> <name>M_PI</name> <operator>/</operator> <literal type="number">180.f</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>hypotf</name><argument_list>(<argument><expr><operator>*</operator><name>x</name></expr></argument>, <argument><expr><operator>*</operator><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>a</name> <operator>=</operator> <call><name>atan2f</name><argument_list>(<argument><expr><operator>*</operator><name>x</name></expr></argument>, <argument><expr><operator>*</operator><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>fabsf</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <name>M_PI_4</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>a</name> <operator>*=</operator> <name>reference</name> <operator>/</operator> <name>M_PI_2</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>a</name> <operator>=</operator> <name>M_PI</name> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <operator>(</operator><operator>-</operator><literal type="number">2</literal> <operator>*</operator> <name>M_PI</name> <operator>+</operator> <name>reference</name><operator>)</operator> <operator>*</operator> <operator>(</operator><name>M_PI</name> <operator>-</operator> <call><name>fabsf</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>*</operator> <call><name>FFDIFFSIGN</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>/</operator> <operator>(</operator><literal type="number">3</literal> <operator>*</operator> <name>M_PI</name><operator>)</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><operator>*</operator><name>x</name> <operator>=</operator> <call><name>av_clipf</name><argument_list>(<argument><expr><call><name>sinf</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>r</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>y</name> <operator>=</operator> <call><name>av_clipf</name><argument_list>(<argument><expr><call><name>cosf</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>r</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>stereo_position</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>p</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>y</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>av_assert2</name><argument_list>(<argument><expr><name>a</name> <operator>&gt;=</operator> <operator>-</operator><literal type="number">1.f</literal> <operator>&amp;&amp;</operator> <name>a</name> <operator>&lt;=</operator> <literal type="number">1.f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_assert2</name><argument_list>(<argument><expr><name>p</name> <operator>&gt;=</operator> <literal type="number">0.f</literal> <operator>&amp;&amp;</operator> <name>p</name> <operator>&lt;=</operator> <name>M_PI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>x</name> <operator>=</operator> <call><name>av_clipf</name><argument_list>(<argument><expr><name>a</name><operator>+</operator><name>a</name><operator>*</operator><call><name>FFMAX</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>p</name><operator>*</operator><name>p</name><operator>-</operator><name>M_PI_2</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>y</name> <operator>=</operator> <call><name>av_clipf</name><argument_list>(<argument><expr><call><name>cosf</name><argument_list>(<argument><expr><name>a</name><operator>*</operator><name>M_PI_2</name><operator>+</operator><name>M_PI</name></expr></argument>)</argument_list></call><operator>*</operator><call><name>cosf</name><argument_list>(<argument><expr><name>M_PI_2</name><operator>-</operator><name>p</name><operator>/</operator><name>M_PI</name></expr></argument>)</argument_list></call><operator>*</operator><name>M_LN10</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>get_lfe</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>output_lfe</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>lowcut</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>highcut</name></decl></parameter>,

<parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>lfe_mag</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>mag_total</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>lfe_mode</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>output_lfe</name> <operator>&amp;&amp;</operator> <name>n</name> <operator>&lt;</operator> <name>highcut</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>lfe_mag</name> <operator>=</operator> <ternary><condition><expr><name>n</name> <operator>&lt;</operator> <name>lowcut</name></expr> ?</condition><then> <expr><literal type="number">1.f</literal></expr> </then><else>: <expr><literal type="number">.5f</literal><operator>*</operator><operator>(</operator><literal type="number">1.f</literal><operator>+</operator><call><name>cosf</name><argument_list>(<argument><expr><name>M_PI</name><operator>*</operator><operator>(</operator><name>lowcut</name><operator>-</operator><name>n</name><operator>)</operator><operator>/</operator><operator>(</operator><name>lowcut</name><operator>-</operator><name>highcut</name><operator>)</operator></expr></argument>)</argument_list></call><operator>)</operator></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>lfe_mag</name> <operator>*=</operator> <operator>*</operator><name>mag_total</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>lfe_mode</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>mag_total</name> <operator>-=</operator> <operator>*</operator><name>lfe_mag</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>lfe_mag</name> <operator>=</operator> <literal type="number">0.f</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>upmix_1_0</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,

<parameter><decl><type><name>float</name></type> <name>l_phase</name></decl></parameter>,

<parameter><decl><type><name>float</name></type> <name>r_phase</name></decl></parameter>,

<parameter><decl><type><name>float</name></type> <name>c_phase</name></decl></parameter>,

<parameter><decl><type><name>float</name></type> <name>mag_total</name></decl></parameter>,

<parameter><decl><type><name>float</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>y</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AudioSurroundContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>mag</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>dst</name></decl>;</decl_stmt>

<expr_stmt><expr><name>dst</name> <operator>=</operator> <operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><name><name>s</name><operator>-&gt;</operator><name>output</name><operator>-&gt;</operator><name>extended_data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>mag</name> <operator>=</operator> <call><name>powf</name><argument_list>(<argument><expr><literal type="number">1.f</literal> <operator>-</operator> <call><name>fabsf</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>fc_x</name></name></expr></argument>)</argument_list></call> <operator>*</operator> <call><name>powf</name><argument_list>(<argument><expr><operator>(</operator><name>y</name> <operator>+</operator> <literal type="number">1.f</literal><operator>)</operator> <operator>*</operator> <literal type="number">.5f</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>fc_y</name></name></expr></argument>)</argument_list></call> <operator>*</operator> <name>mag_total</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>n</name></expr> ]</index></name> <operator>=</operator> <name>mag</name> <operator>*</operator> <call><name>cosf</name><argument_list>(<argument><expr><name>c_phase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>n</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>mag</name> <operator>*</operator> <call><name>sinf</name><argument_list>(<argument><expr><name>c_phase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>upmix_stereo</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,

<parameter><decl><type><name>float</name></type> <name>l_phase</name></decl></parameter>,

<parameter><decl><type><name>float</name></type> <name>r_phase</name></decl></parameter>,

<parameter><decl><type><name>float</name></type> <name>c_phase</name></decl></parameter>,

<parameter><decl><type><name>float</name></type> <name>mag_total</name></decl></parameter>,

<parameter><decl><type><name>float</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>y</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AudioSurroundContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>l_mag</name></decl>, <decl><type ref="prev"/><name>r_mag</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>dstl</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>dstr</name></decl>;</decl_stmt>

<expr_stmt><expr><name>dstl</name> <operator>=</operator> <operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><name><name>s</name><operator>-&gt;</operator><name>output</name><operator>-&gt;</operator><name>extended_data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>dstr</name> <operator>=</operator> <operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><name><name>s</name><operator>-&gt;</operator><name>output</name><operator>-&gt;</operator><name>extended_data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>l_mag</name> <operator>=</operator> <call><name>powf</name><argument_list>(<argument><expr><literal type="number">.5f</literal> <operator>*</operator> <operator>(</operator> <name>x</name> <operator>+</operator> <literal type="number">1.f</literal><operator>)</operator></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>fl_x</name></name></expr></argument>)</argument_list></call> <operator>*</operator> <call><name>powf</name><argument_list>(<argument><expr><operator>(</operator><name>y</name> <operator>+</operator> <literal type="number">1.f</literal><operator>)</operator> <operator>*</operator> <literal type="number">.5f</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>fl_y</name></name></expr></argument>)</argument_list></call> <operator>*</operator> <name>mag_total</name></expr>;</expr_stmt>

<expr_stmt><expr><name>r_mag</name> <operator>=</operator> <call><name>powf</name><argument_list>(<argument><expr><literal type="number">.5f</literal> <operator>*</operator> <operator>(</operator><operator>-</operator><name>x</name> <operator>+</operator> <literal type="number">1.f</literal><operator>)</operator></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>fr_x</name></name></expr></argument>)</argument_list></call> <operator>*</operator> <call><name>powf</name><argument_list>(<argument><expr><operator>(</operator><name>y</name> <operator>+</operator> <literal type="number">1.f</literal><operator>)</operator> <operator>*</operator> <literal type="number">.5f</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>fr_y</name></name></expr></argument>)</argument_list></call> <operator>*</operator> <name>mag_total</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dstl</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>n</name></expr> ]</index></name> <operator>=</operator> <name>l_mag</name> <operator>*</operator> <call><name>cosf</name><argument_list>(<argument><expr><name>l_phase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dstl</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>n</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>l_mag</name> <operator>*</operator> <call><name>sinf</name><argument_list>(<argument><expr><name>l_phase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dstr</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>n</name></expr> ]</index></name> <operator>=</operator> <name>r_mag</name> <operator>*</operator> <call><name>cosf</name><argument_list>(<argument><expr><name>r_phase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dstr</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>n</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>r_mag</name> <operator>*</operator> <call><name>sinf</name><argument_list>(<argument><expr><name>r_phase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>upmix_2_1</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,

<parameter><decl><type><name>float</name></type> <name>l_phase</name></decl></parameter>,

<parameter><decl><type><name>float</name></type> <name>r_phase</name></decl></parameter>,

<parameter><decl><type><name>float</name></type> <name>c_phase</name></decl></parameter>,

<parameter><decl><type><name>float</name></type> <name>mag_total</name></decl></parameter>,

<parameter><decl><type><name>float</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>y</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AudioSurroundContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>lfe_mag</name></decl>, <decl><type ref="prev"/><name>l_mag</name></decl>, <decl><type ref="prev"/><name>r_mag</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>dstl</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>dstr</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>dstlfe</name></decl>;</decl_stmt>

<expr_stmt><expr><name>dstl</name> <operator>=</operator> <operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><name><name>s</name><operator>-&gt;</operator><name>output</name><operator>-&gt;</operator><name>extended_data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>dstr</name> <operator>=</operator> <operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><name><name>s</name><operator>-&gt;</operator><name>output</name><operator>-&gt;</operator><name>extended_data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>dstlfe</name> <operator>=</operator> <operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><name><name>s</name><operator>-&gt;</operator><name>output</name><operator>-&gt;</operator><name>extended_data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>get_lfe</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>output_lfe</name></name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>lowcut</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>highcut</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>lfe_mag</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mag_total</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>lfe_mode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>l_mag</name> <operator>=</operator> <call><name>powf</name><argument_list>(<argument><expr><literal type="number">.5f</literal> <operator>*</operator> <operator>(</operator> <name>x</name> <operator>+</operator> <literal type="number">1.f</literal><operator>)</operator></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>fl_x</name></name></expr></argument>)</argument_list></call> <operator>*</operator> <call><name>powf</name><argument_list>(<argument><expr><operator>(</operator><name>y</name> <operator>+</operator> <literal type="number">1.f</literal><operator>)</operator> <operator>*</operator> <literal type="number">.5f</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>fl_y</name></name></expr></argument>)</argument_list></call> <operator>*</operator> <name>mag_total</name></expr>;</expr_stmt>

<expr_stmt><expr><name>r_mag</name> <operator>=</operator> <call><name>powf</name><argument_list>(<argument><expr><literal type="number">.5f</literal> <operator>*</operator> <operator>(</operator><operator>-</operator><name>x</name> <operator>+</operator> <literal type="number">1.f</literal><operator>)</operator></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>fr_x</name></name></expr></argument>)</argument_list></call> <operator>*</operator> <call><name>powf</name><argument_list>(<argument><expr><operator>(</operator><name>y</name> <operator>+</operator> <literal type="number">1.f</literal><operator>)</operator> <operator>*</operator> <literal type="number">.5f</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>fr_y</name></name></expr></argument>)</argument_list></call> <operator>*</operator> <name>mag_total</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dstl</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>n</name></expr> ]</index></name> <operator>=</operator> <name>l_mag</name> <operator>*</operator> <call><name>cosf</name><argument_list>(<argument><expr><name>l_phase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dstl</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>n</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>l_mag</name> <operator>*</operator> <call><name>sinf</name><argument_list>(<argument><expr><name>l_phase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dstr</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>n</name></expr> ]</index></name> <operator>=</operator> <name>r_mag</name> <operator>*</operator> <call><name>cosf</name><argument_list>(<argument><expr><name>r_phase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dstr</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>n</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>r_mag</name> <operator>*</operator> <call><name>sinf</name><argument_list>(<argument><expr><name>r_phase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dstlfe</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>n</name></expr> ]</index></name> <operator>=</operator> <name>lfe_mag</name> <operator>*</operator> <call><name>cosf</name><argument_list>(<argument><expr><name>c_phase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dstlfe</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>n</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>lfe_mag</name> <operator>*</operator> <call><name>sinf</name><argument_list>(<argument><expr><name>c_phase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>upmix_3_0</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,

<parameter><decl><type><name>float</name></type> <name>l_phase</name></decl></parameter>,

<parameter><decl><type><name>float</name></type> <name>r_phase</name></decl></parameter>,

<parameter><decl><type><name>float</name></type> <name>c_phase</name></decl></parameter>,

<parameter><decl><type><name>float</name></type> <name>mag_total</name></decl></parameter>,

<parameter><decl><type><name>float</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>y</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AudioSurroundContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>l_mag</name></decl>, <decl><type ref="prev"/><name>r_mag</name></decl>, <decl><type ref="prev"/><name>c_mag</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>dstc</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>dstl</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>dstr</name></decl>;</decl_stmt>

<expr_stmt><expr><name>dstl</name> <operator>=</operator> <operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><name><name>s</name><operator>-&gt;</operator><name>output</name><operator>-&gt;</operator><name>extended_data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>dstr</name> <operator>=</operator> <operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><name><name>s</name><operator>-&gt;</operator><name>output</name><operator>-&gt;</operator><name>extended_data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>dstc</name> <operator>=</operator> <operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><name><name>s</name><operator>-&gt;</operator><name>output</name><operator>-&gt;</operator><name>extended_data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>c_mag</name> <operator>=</operator> <call><name>powf</name><argument_list>(<argument><expr><literal type="number">1.f</literal> <operator>-</operator> <call><name>fabsf</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>fc_x</name></name></expr></argument>)</argument_list></call> <operator>*</operator> <call><name>powf</name><argument_list>(<argument><expr><operator>(</operator><name>y</name> <operator>+</operator> <literal type="number">1.f</literal><operator>)</operator> <operator>*</operator> <literal type="number">.5f</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>fc_y</name></name></expr></argument>)</argument_list></call> <operator>*</operator> <name>mag_total</name></expr>;</expr_stmt>

<expr_stmt><expr><name>l_mag</name> <operator>=</operator> <call><name>powf</name><argument_list>(<argument><expr><literal type="number">.5f</literal> <operator>*</operator> <operator>(</operator> <name>x</name> <operator>+</operator> <literal type="number">1.f</literal><operator>)</operator></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>fl_x</name></name></expr></argument>)</argument_list></call> <operator>*</operator> <call><name>powf</name><argument_list>(<argument><expr><operator>(</operator><name>y</name> <operator>+</operator> <literal type="number">1.f</literal><operator>)</operator> <operator>*</operator> <literal type="number">.5f</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>fl_y</name></name></expr></argument>)</argument_list></call> <operator>*</operator> <name>mag_total</name></expr>;</expr_stmt>

<expr_stmt><expr><name>r_mag</name> <operator>=</operator> <call><name>powf</name><argument_list>(<argument><expr><literal type="number">.5f</literal> <operator>*</operator> <operator>(</operator><operator>-</operator><name>x</name> <operator>+</operator> <literal type="number">1.f</literal><operator>)</operator></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>fr_x</name></name></expr></argument>)</argument_list></call> <operator>*</operator> <call><name>powf</name><argument_list>(<argument><expr><operator>(</operator><name>y</name> <operator>+</operator> <literal type="number">1.f</literal><operator>)</operator> <operator>*</operator> <literal type="number">.5f</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>fr_y</name></name></expr></argument>)</argument_list></call> <operator>*</operator> <name>mag_total</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dstl</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>n</name></expr> ]</index></name> <operator>=</operator> <name>l_mag</name> <operator>*</operator> <call><name>cosf</name><argument_list>(<argument><expr><name>l_phase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dstl</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>n</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>l_mag</name> <operator>*</operator> <call><name>sinf</name><argument_list>(<argument><expr><name>l_phase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dstr</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>n</name></expr> ]</index></name> <operator>=</operator> <name>r_mag</name> <operator>*</operator> <call><name>cosf</name><argument_list>(<argument><expr><name>r_phase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dstr</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>n</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>r_mag</name> <operator>*</operator> <call><name>sinf</name><argument_list>(<argument><expr><name>r_phase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dstc</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>n</name></expr> ]</index></name> <operator>=</operator> <name>c_mag</name> <operator>*</operator> <call><name>cosf</name><argument_list>(<argument><expr><name>c_phase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dstc</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>n</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>c_mag</name> <operator>*</operator> <call><name>sinf</name><argument_list>(<argument><expr><name>c_phase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>upmix_3_1</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,

<parameter><decl><type><name>float</name></type> <name>l_phase</name></decl></parameter>,

<parameter><decl><type><name>float</name></type> <name>r_phase</name></decl></parameter>,

<parameter><decl><type><name>float</name></type> <name>c_phase</name></decl></parameter>,

<parameter><decl><type><name>float</name></type> <name>mag_total</name></decl></parameter>,

<parameter><decl><type><name>float</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>y</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AudioSurroundContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>lfe_mag</name></decl>, <decl><type ref="prev"/><name>l_mag</name></decl>, <decl><type ref="prev"/><name>r_mag</name></decl>, <decl><type ref="prev"/><name>c_mag</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>dstc</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>dstl</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>dstr</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>dstlfe</name></decl>;</decl_stmt>

<expr_stmt><expr><name>dstl</name> <operator>=</operator> <operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><name><name>s</name><operator>-&gt;</operator><name>output</name><operator>-&gt;</operator><name>extended_data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>dstr</name> <operator>=</operator> <operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><name><name>s</name><operator>-&gt;</operator><name>output</name><operator>-&gt;</operator><name>extended_data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>dstc</name> <operator>=</operator> <operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><name><name>s</name><operator>-&gt;</operator><name>output</name><operator>-&gt;</operator><name>extended_data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>dstlfe</name> <operator>=</operator> <operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><name><name>s</name><operator>-&gt;</operator><name>output</name><operator>-&gt;</operator><name>extended_data</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>get_lfe</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>output_lfe</name></name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>lowcut</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>highcut</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>lfe_mag</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mag_total</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>lfe_mode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>c_mag</name> <operator>=</operator> <call><name>powf</name><argument_list>(<argument><expr><literal type="number">1.f</literal> <operator>-</operator> <call><name>fabsf</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>fc_x</name></name></expr></argument>)</argument_list></call> <operator>*</operator> <call><name>powf</name><argument_list>(<argument><expr><operator>(</operator><name>y</name> <operator>+</operator> <literal type="number">1.f</literal><operator>)</operator> <operator>*</operator> <literal type="number">.5f</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>fc_y</name></name></expr></argument>)</argument_list></call> <operator>*</operator> <name>mag_total</name></expr>;</expr_stmt>

<expr_stmt><expr><name>l_mag</name> <operator>=</operator> <call><name>powf</name><argument_list>(<argument><expr><literal type="number">.5f</literal> <operator>*</operator> <operator>(</operator> <name>x</name> <operator>+</operator> <literal type="number">1.f</literal><operator>)</operator></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>fl_x</name></name></expr></argument>)</argument_list></call> <operator>*</operator> <call><name>powf</name><argument_list>(<argument><expr><operator>(</operator><name>y</name> <operator>+</operator> <literal type="number">1.f</literal><operator>)</operator> <operator>*</operator> <literal type="number">.5f</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>fl_y</name></name></expr></argument>)</argument_list></call> <operator>*</operator> <name>mag_total</name></expr>;</expr_stmt>

<expr_stmt><expr><name>r_mag</name> <operator>=</operator> <call><name>powf</name><argument_list>(<argument><expr><literal type="number">.5f</literal> <operator>*</operator> <operator>(</operator><operator>-</operator><name>x</name> <operator>+</operator> <literal type="number">1.f</literal><operator>)</operator></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>fr_x</name></name></expr></argument>)</argument_list></call> <operator>*</operator> <call><name>powf</name><argument_list>(<argument><expr><operator>(</operator><name>y</name> <operator>+</operator> <literal type="number">1.f</literal><operator>)</operator> <operator>*</operator> <literal type="number">.5f</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>fr_y</name></name></expr></argument>)</argument_list></call> <operator>*</operator> <name>mag_total</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dstl</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>n</name></expr> ]</index></name> <operator>=</operator> <name>l_mag</name> <operator>*</operator> <call><name>cosf</name><argument_list>(<argument><expr><name>l_phase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dstl</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>n</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>l_mag</name> <operator>*</operator> <call><name>sinf</name><argument_list>(<argument><expr><name>l_phase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dstr</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>n</name></expr> ]</index></name> <operator>=</operator> <name>r_mag</name> <operator>*</operator> <call><name>cosf</name><argument_list>(<argument><expr><name>r_phase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dstr</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>n</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>r_mag</name> <operator>*</operator> <call><name>sinf</name><argument_list>(<argument><expr><name>r_phase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dstc</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>n</name></expr> ]</index></name> <operator>=</operator> <name>c_mag</name> <operator>*</operator> <call><name>cosf</name><argument_list>(<argument><expr><name>c_phase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dstc</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>n</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>c_mag</name> <operator>*</operator> <call><name>sinf</name><argument_list>(<argument><expr><name>c_phase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dstlfe</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>n</name></expr> ]</index></name> <operator>=</operator> <name>lfe_mag</name> <operator>*</operator> <call><name>cosf</name><argument_list>(<argument><expr><name>c_phase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dstlfe</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>n</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>lfe_mag</name> <operator>*</operator> <call><name>sinf</name><argument_list>(<argument><expr><name>c_phase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>upmix_3_1_surround</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,

<parameter><decl><type><name>float</name></type> <name>l_phase</name></decl></parameter>,

<parameter><decl><type><name>float</name></type> <name>r_phase</name></decl></parameter>,

<parameter><decl><type><name>float</name></type> <name>c_phase</name></decl></parameter>,

<parameter><decl><type><name>float</name></type> <name>c_mag</name></decl></parameter>,

<parameter><decl><type><name>float</name></type> <name>mag_total</name></decl></parameter>,

<parameter><decl><type><name>float</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>y</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AudioSurroundContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>lfe_mag</name></decl>, <decl><type ref="prev"/><name>l_mag</name></decl>, <decl><type ref="prev"/><name>r_mag</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>dstc</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>dstl</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>dstr</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>dstlfe</name></decl>;</decl_stmt>

<expr_stmt><expr><name>dstl</name> <operator>=</operator> <operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><name><name>s</name><operator>-&gt;</operator><name>output</name><operator>-&gt;</operator><name>extended_data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>dstr</name> <operator>=</operator> <operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><name><name>s</name><operator>-&gt;</operator><name>output</name><operator>-&gt;</operator><name>extended_data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>dstc</name> <operator>=</operator> <operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><name><name>s</name><operator>-&gt;</operator><name>output</name><operator>-&gt;</operator><name>extended_data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>dstlfe</name> <operator>=</operator> <operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><name><name>s</name><operator>-&gt;</operator><name>output</name><operator>-&gt;</operator><name>extended_data</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>get_lfe</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>output_lfe</name></name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>lowcut</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>highcut</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>lfe_mag</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>c_mag</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>lfe_mode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>l_mag</name> <operator>=</operator> <call><name>powf</name><argument_list>(<argument><expr><literal type="number">.5f</literal> <operator>*</operator> <operator>(</operator> <name>x</name> <operator>+</operator> <literal type="number">1.f</literal><operator>)</operator></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>fl_x</name></name></expr></argument>)</argument_list></call> <operator>*</operator> <call><name>powf</name><argument_list>(<argument><expr><operator>(</operator><name>y</name> <operator>+</operator> <literal type="number">1.f</literal><operator>)</operator> <operator>*</operator> <literal type="number">.5f</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>fl_y</name></name></expr></argument>)</argument_list></call> <operator>*</operator> <name>mag_total</name></expr>;</expr_stmt>

<expr_stmt><expr><name>r_mag</name> <operator>=</operator> <call><name>powf</name><argument_list>(<argument><expr><literal type="number">.5f</literal> <operator>*</operator> <operator>(</operator><operator>-</operator><name>x</name> <operator>+</operator> <literal type="number">1.f</literal><operator>)</operator></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>fr_x</name></name></expr></argument>)</argument_list></call> <operator>*</operator> <call><name>powf</name><argument_list>(<argument><expr><operator>(</operator><name>y</name> <operator>+</operator> <literal type="number">1.f</literal><operator>)</operator> <operator>*</operator> <literal type="number">.5f</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>fr_y</name></name></expr></argument>)</argument_list></call> <operator>*</operator> <name>mag_total</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dstl</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>n</name></expr> ]</index></name> <operator>=</operator> <name>l_mag</name> <operator>*</operator> <call><name>cosf</name><argument_list>(<argument><expr><name>l_phase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dstl</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>n</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>l_mag</name> <operator>*</operator> <call><name>sinf</name><argument_list>(<argument><expr><name>l_phase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dstr</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>n</name></expr> ]</index></name> <operator>=</operator> <name>r_mag</name> <operator>*</operator> <call><name>cosf</name><argument_list>(<argument><expr><name>r_phase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dstr</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>n</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>r_mag</name> <operator>*</operator> <call><name>sinf</name><argument_list>(<argument><expr><name>r_phase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dstc</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>n</name></expr> ]</index></name> <operator>=</operator> <name>c_mag</name> <operator>*</operator> <call><name>cosf</name><argument_list>(<argument><expr><name>c_phase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dstc</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>n</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>c_mag</name> <operator>*</operator> <call><name>sinf</name><argument_list>(<argument><expr><name>c_phase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dstlfe</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>n</name></expr> ]</index></name> <operator>=</operator> <name>lfe_mag</name> <operator>*</operator> <call><name>cosf</name><argument_list>(<argument><expr><name>c_phase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dstlfe</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>n</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>lfe_mag</name> <operator>*</operator> <call><name>sinf</name><argument_list>(<argument><expr><name>c_phase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>upmix_4_0</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,

<parameter><decl><type><name>float</name></type> <name>l_phase</name></decl></parameter>,

<parameter><decl><type><name>float</name></type> <name>r_phase</name></decl></parameter>,

<parameter><decl><type><name>float</name></type> <name>c_phase</name></decl></parameter>,

<parameter><decl><type><name>float</name></type> <name>mag_total</name></decl></parameter>,

<parameter><decl><type><name>float</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>y</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AudioSurroundContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>b_mag</name></decl>, <decl><type ref="prev"/><name>l_mag</name></decl>, <decl><type ref="prev"/><name>r_mag</name></decl>, <decl><type ref="prev"/><name>c_mag</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>dstc</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>dstl</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>dstr</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>dstb</name></decl>;</decl_stmt>

<expr_stmt><expr><name>dstl</name> <operator>=</operator> <operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><name><name>s</name><operator>-&gt;</operator><name>output</name><operator>-&gt;</operator><name>extended_data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>dstr</name> <operator>=</operator> <operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><name><name>s</name><operator>-&gt;</operator><name>output</name><operator>-&gt;</operator><name>extended_data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>dstc</name> <operator>=</operator> <operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><name><name>s</name><operator>-&gt;</operator><name>output</name><operator>-&gt;</operator><name>extended_data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>dstb</name> <operator>=</operator> <operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><name><name>s</name><operator>-&gt;</operator><name>output</name><operator>-&gt;</operator><name>extended_data</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>c_mag</name> <operator>=</operator> <call><name>powf</name><argument_list>(<argument><expr><literal type="number">1.f</literal> <operator>-</operator> <call><name>fabsf</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>fc_x</name></name></expr></argument>)</argument_list></call> <operator>*</operator> <call><name>powf</name><argument_list>(<argument><expr><operator>(</operator><name>y</name> <operator>+</operator> <literal type="number">1.f</literal><operator>)</operator> <operator>*</operator> <literal type="number">.5f</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>fc_y</name></name></expr></argument>)</argument_list></call> <operator>*</operator> <name>mag_total</name></expr>;</expr_stmt>

<expr_stmt><expr><name>b_mag</name> <operator>=</operator> <call><name>powf</name><argument_list>(<argument><expr><literal type="number">1.f</literal> <operator>-</operator> <call><name>fabsf</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>bc_x</name></name></expr></argument>)</argument_list></call> <operator>*</operator> <call><name>powf</name><argument_list>(<argument><expr><operator>(</operator><literal type="number">1.f</literal> <operator>-</operator> <name>y</name><operator>)</operator> <operator>*</operator> <literal type="number">.5f</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>bc_y</name></name></expr></argument>)</argument_list></call> <operator>*</operator> <name>mag_total</name></expr>;</expr_stmt>

<expr_stmt><expr><name>l_mag</name> <operator>=</operator> <call><name>powf</name><argument_list>(<argument><expr><literal type="number">.5f</literal> <operator>*</operator> <operator>(</operator> <name>x</name> <operator>+</operator> <literal type="number">1.f</literal><operator>)</operator></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>fl_x</name></name></expr></argument>)</argument_list></call> <operator>*</operator> <call><name>powf</name><argument_list>(<argument><expr><operator>(</operator><name>y</name> <operator>+</operator> <literal type="number">1.f</literal><operator>)</operator> <operator>*</operator> <literal type="number">.5f</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>fl_y</name></name></expr></argument>)</argument_list></call> <operator>*</operator> <name>mag_total</name></expr>;</expr_stmt>

<expr_stmt><expr><name>r_mag</name> <operator>=</operator> <call><name>powf</name><argument_list>(<argument><expr><literal type="number">.5f</literal> <operator>*</operator> <operator>(</operator><operator>-</operator><name>x</name> <operator>+</operator> <literal type="number">1.f</literal><operator>)</operator></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>fr_x</name></name></expr></argument>)</argument_list></call> <operator>*</operator> <call><name>powf</name><argument_list>(<argument><expr><operator>(</operator><name>y</name> <operator>+</operator> <literal type="number">1.f</literal><operator>)</operator> <operator>*</operator> <literal type="number">.5f</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>fr_y</name></name></expr></argument>)</argument_list></call> <operator>*</operator> <name>mag_total</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dstl</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>n</name></expr> ]</index></name> <operator>=</operator> <name>l_mag</name> <operator>*</operator> <call><name>cosf</name><argument_list>(<argument><expr><name>l_phase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dstl</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>n</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>l_mag</name> <operator>*</operator> <call><name>sinf</name><argument_list>(<argument><expr><name>l_phase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dstr</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>n</name></expr> ]</index></name> <operator>=</operator> <name>r_mag</name> <operator>*</operator> <call><name>cosf</name><argument_list>(<argument><expr><name>r_phase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dstr</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>n</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>r_mag</name> <operator>*</operator> <call><name>sinf</name><argument_list>(<argument><expr><name>r_phase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dstc</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>n</name></expr> ]</index></name> <operator>=</operator> <name>c_mag</name> <operator>*</operator> <call><name>cosf</name><argument_list>(<argument><expr><name>c_phase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dstc</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>n</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>c_mag</name> <operator>*</operator> <call><name>sinf</name><argument_list>(<argument><expr><name>c_phase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dstb</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>n</name></expr> ]</index></name> <operator>=</operator> <name>b_mag</name> <operator>*</operator> <call><name>cosf</name><argument_list>(<argument><expr><name>c_phase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dstb</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>n</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>b_mag</name> <operator>*</operator> <call><name>sinf</name><argument_list>(<argument><expr><name>c_phase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>upmix_4_1</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,

<parameter><decl><type><name>float</name></type> <name>l_phase</name></decl></parameter>,

<parameter><decl><type><name>float</name></type> <name>r_phase</name></decl></parameter>,

<parameter><decl><type><name>float</name></type> <name>c_phase</name></decl></parameter>,

<parameter><decl><type><name>float</name></type> <name>mag_total</name></decl></parameter>,

<parameter><decl><type><name>float</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>y</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AudioSurroundContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>lfe_mag</name></decl>, <decl><type ref="prev"/><name>b_mag</name></decl>, <decl><type ref="prev"/><name>l_mag</name></decl>, <decl><type ref="prev"/><name>r_mag</name></decl>, <decl><type ref="prev"/><name>c_mag</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>dstc</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>dstl</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>dstr</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>dstb</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>dstlfe</name></decl>;</decl_stmt>

<expr_stmt><expr><name>dstl</name> <operator>=</operator> <operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><name><name>s</name><operator>-&gt;</operator><name>output</name><operator>-&gt;</operator><name>extended_data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>dstr</name> <operator>=</operator> <operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><name><name>s</name><operator>-&gt;</operator><name>output</name><operator>-&gt;</operator><name>extended_data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>dstc</name> <operator>=</operator> <operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><name><name>s</name><operator>-&gt;</operator><name>output</name><operator>-&gt;</operator><name>extended_data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>dstlfe</name> <operator>=</operator> <operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><name><name>s</name><operator>-&gt;</operator><name>output</name><operator>-&gt;</operator><name>extended_data</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>dstb</name> <operator>=</operator> <operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><name><name>s</name><operator>-&gt;</operator><name>output</name><operator>-&gt;</operator><name>extended_data</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>get_lfe</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>output_lfe</name></name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>lowcut</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>highcut</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>lfe_mag</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mag_total</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>lfe_mode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dstlfe</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>n</name></expr> ]</index></name> <operator>=</operator> <name>lfe_mag</name> <operator>*</operator> <call><name>cosf</name><argument_list>(<argument><expr><name>c_phase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dstlfe</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>n</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>lfe_mag</name> <operator>*</operator> <call><name>sinf</name><argument_list>(<argument><expr><name>c_phase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>c_mag</name> <operator>=</operator> <call><name>powf</name><argument_list>(<argument><expr><literal type="number">1.f</literal> <operator>-</operator> <call><name>fabsf</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>fc_x</name></name></expr></argument>)</argument_list></call> <operator>*</operator> <call><name>powf</name><argument_list>(<argument><expr><operator>(</operator><name>y</name> <operator>+</operator> <literal type="number">1.f</literal><operator>)</operator> <operator>*</operator> <literal type="number">.5f</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>fc_y</name></name></expr></argument>)</argument_list></call> <operator>*</operator> <name>mag_total</name></expr>;</expr_stmt>

<expr_stmt><expr><name>b_mag</name> <operator>=</operator> <call><name>powf</name><argument_list>(<argument><expr><literal type="number">1.f</literal> <operator>-</operator> <call><name>fabsf</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>bc_x</name></name></expr></argument>)</argument_list></call> <operator>*</operator> <call><name>powf</name><argument_list>(<argument><expr><operator>(</operator><literal type="number">1.f</literal> <operator>-</operator> <name>y</name><operator>)</operator> <operator>*</operator> <literal type="number">.5f</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>bc_y</name></name></expr></argument>)</argument_list></call> <operator>*</operator> <name>mag_total</name></expr>;</expr_stmt>

<expr_stmt><expr><name>l_mag</name> <operator>=</operator> <call><name>powf</name><argument_list>(<argument><expr><literal type="number">.5f</literal> <operator>*</operator> <operator>(</operator> <name>x</name> <operator>+</operator> <literal type="number">1.f</literal><operator>)</operator></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>fl_x</name></name></expr></argument>)</argument_list></call> <operator>*</operator> <call><name>powf</name><argument_list>(<argument><expr><operator>(</operator><name>y</name> <operator>+</operator> <literal type="number">1.f</literal><operator>)</operator> <operator>*</operator> <literal type="number">.5f</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>fl_y</name></name></expr></argument>)</argument_list></call> <operator>*</operator> <name>mag_total</name></expr>;</expr_stmt>

<expr_stmt><expr><name>r_mag</name> <operator>=</operator> <call><name>powf</name><argument_list>(<argument><expr><literal type="number">.5f</literal> <operator>*</operator> <operator>(</operator><operator>-</operator><name>x</name> <operator>+</operator> <literal type="number">1.f</literal><operator>)</operator></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>fr_x</name></name></expr></argument>)</argument_list></call> <operator>*</operator> <call><name>powf</name><argument_list>(<argument><expr><operator>(</operator><name>y</name> <operator>+</operator> <literal type="number">1.f</literal><operator>)</operator> <operator>*</operator> <literal type="number">.5f</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>fr_y</name></name></expr></argument>)</argument_list></call> <operator>*</operator> <name>mag_total</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dstl</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>n</name></expr> ]</index></name> <operator>=</operator> <name>l_mag</name> <operator>*</operator> <call><name>cosf</name><argument_list>(<argument><expr><name>l_phase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dstl</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>n</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>l_mag</name> <operator>*</operator> <call><name>sinf</name><argument_list>(<argument><expr><name>l_phase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dstr</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>n</name></expr> ]</index></name> <operator>=</operator> <name>r_mag</name> <operator>*</operator> <call><name>cosf</name><argument_list>(<argument><expr><name>r_phase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dstr</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>n</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>r_mag</name> <operator>*</operator> <call><name>sinf</name><argument_list>(<argument><expr><name>r_phase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dstc</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>n</name></expr> ]</index></name> <operator>=</operator> <name>c_mag</name> <operator>*</operator> <call><name>cosf</name><argument_list>(<argument><expr><name>c_phase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dstc</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>n</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>c_mag</name> <operator>*</operator> <call><name>sinf</name><argument_list>(<argument><expr><name>c_phase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dstb</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>n</name></expr> ]</index></name> <operator>=</operator> <name>b_mag</name> <operator>*</operator> <call><name>cosf</name><argument_list>(<argument><expr><name>c_phase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dstb</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>n</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>b_mag</name> <operator>*</operator> <call><name>sinf</name><argument_list>(<argument><expr><name>c_phase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>upmix_5_0_back</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,

<parameter><decl><type><name>float</name></type> <name>l_phase</name></decl></parameter>,

<parameter><decl><type><name>float</name></type> <name>r_phase</name></decl></parameter>,

<parameter><decl><type><name>float</name></type> <name>c_phase</name></decl></parameter>,

<parameter><decl><type><name>float</name></type> <name>mag_total</name></decl></parameter>,

<parameter><decl><type><name>float</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>y</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AudioSurroundContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>l_mag</name></decl>, <decl><type ref="prev"/><name>r_mag</name></decl>, <decl><type ref="prev"/><name>ls_mag</name></decl>, <decl><type ref="prev"/><name>rs_mag</name></decl>, <decl><type ref="prev"/><name>c_mag</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>dstc</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>dstl</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>dstr</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>dstls</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>dstrs</name></decl>;</decl_stmt>

<expr_stmt><expr><name>dstl</name> <operator>=</operator> <operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><name><name>s</name><operator>-&gt;</operator><name>output</name><operator>-&gt;</operator><name>extended_data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>dstr</name> <operator>=</operator> <operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><name><name>s</name><operator>-&gt;</operator><name>output</name><operator>-&gt;</operator><name>extended_data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>dstc</name> <operator>=</operator> <operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><name><name>s</name><operator>-&gt;</operator><name>output</name><operator>-&gt;</operator><name>extended_data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>dstls</name> <operator>=</operator> <operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><name><name>s</name><operator>-&gt;</operator><name>output</name><operator>-&gt;</operator><name>extended_data</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>dstrs</name> <operator>=</operator> <operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><name><name>s</name><operator>-&gt;</operator><name>output</name><operator>-&gt;</operator><name>extended_data</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>c_mag</name> <operator>=</operator> <call><name>powf</name><argument_list>(<argument><expr><literal type="number">1.f</literal> <operator>-</operator> <call><name>fabsf</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>fc_x</name></name></expr></argument>)</argument_list></call> <operator>*</operator> <call><name>powf</name><argument_list>(<argument><expr><operator>(</operator><name>y</name> <operator>+</operator> <literal type="number">1.f</literal><operator>)</operator> <operator>*</operator> <literal type="number">.5f</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>fc_y</name></name></expr></argument>)</argument_list></call> <operator>*</operator> <name>mag_total</name></expr>;</expr_stmt>

<expr_stmt><expr><name>l_mag</name> <operator>=</operator> <call><name>powf</name><argument_list>(<argument><expr><literal type="number">.5f</literal> <operator>*</operator> <operator>(</operator> <name>x</name> <operator>+</operator> <literal type="number">1.f</literal><operator>)</operator></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>fl_x</name></name></expr></argument>)</argument_list></call> <operator>*</operator> <call><name>powf</name><argument_list>(<argument><expr><operator>(</operator><name>y</name> <operator>+</operator> <literal type="number">1.f</literal><operator>)</operator> <operator>*</operator> <literal type="number">.5f</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>fl_y</name></name></expr></argument>)</argument_list></call> <operator>*</operator> <name>mag_total</name></expr>;</expr_stmt>

<expr_stmt><expr><name>r_mag</name> <operator>=</operator> <call><name>powf</name><argument_list>(<argument><expr><literal type="number">.5f</literal> <operator>*</operator> <operator>(</operator><operator>-</operator><name>x</name> <operator>+</operator> <literal type="number">1.f</literal><operator>)</operator></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>fr_x</name></name></expr></argument>)</argument_list></call> <operator>*</operator> <call><name>powf</name><argument_list>(<argument><expr><operator>(</operator><name>y</name> <operator>+</operator> <literal type="number">1.f</literal><operator>)</operator> <operator>*</operator> <literal type="number">.5f</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>fr_y</name></name></expr></argument>)</argument_list></call> <operator>*</operator> <name>mag_total</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ls_mag</name> <operator>=</operator> <call><name>powf</name><argument_list>(<argument><expr><literal type="number">.5f</literal> <operator>*</operator> <operator>(</operator> <name>x</name> <operator>+</operator> <literal type="number">1.f</literal><operator>)</operator></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>bl_x</name></name></expr></argument>)</argument_list></call> <operator>*</operator> <call><name>powf</name><argument_list>(<argument><expr><literal type="number">1.f</literal> <operator>-</operator> <operator>(</operator><operator>(</operator><name>y</name> <operator>+</operator> <literal type="number">1.f</literal><operator>)</operator> <operator>*</operator> <literal type="number">.5f</literal><operator>)</operator></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>bl_y</name></name></expr></argument>)</argument_list></call> <operator>*</operator> <name>mag_total</name></expr>;</expr_stmt>

<expr_stmt><expr><name>rs_mag</name> <operator>=</operator> <call><name>powf</name><argument_list>(<argument><expr><literal type="number">.5f</literal> <operator>*</operator> <operator>(</operator><operator>-</operator><name>x</name> <operator>+</operator> <literal type="number">1.f</literal><operator>)</operator></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>br_x</name></name></expr></argument>)</argument_list></call> <operator>*</operator> <call><name>powf</name><argument_list>(<argument><expr><literal type="number">1.f</literal> <operator>-</operator> <operator>(</operator><operator>(</operator><name>y</name> <operator>+</operator> <literal type="number">1.f</literal><operator>)</operator> <operator>*</operator> <literal type="number">.5f</literal><operator>)</operator></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>br_y</name></name></expr></argument>)</argument_list></call> <operator>*</operator> <name>mag_total</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dstl</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>n</name></expr> ]</index></name> <operator>=</operator> <name>l_mag</name> <operator>*</operator> <call><name>cosf</name><argument_list>(<argument><expr><name>l_phase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dstl</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>n</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>l_mag</name> <operator>*</operator> <call><name>sinf</name><argument_list>(<argument><expr><name>l_phase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dstr</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>n</name></expr> ]</index></name> <operator>=</operator> <name>r_mag</name> <operator>*</operator> <call><name>cosf</name><argument_list>(<argument><expr><name>r_phase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dstr</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>n</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>r_mag</name> <operator>*</operator> <call><name>sinf</name><argument_list>(<argument><expr><name>r_phase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dstc</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>n</name></expr> ]</index></name> <operator>=</operator> <name>c_mag</name> <operator>*</operator> <call><name>cosf</name><argument_list>(<argument><expr><name>c_phase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dstc</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>n</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>c_mag</name> <operator>*</operator> <call><name>sinf</name><argument_list>(<argument><expr><name>c_phase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dstls</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>n</name></expr> ]</index></name> <operator>=</operator> <name>ls_mag</name> <operator>*</operator> <call><name>cosf</name><argument_list>(<argument><expr><name>l_phase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dstls</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>n</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>ls_mag</name> <operator>*</operator> <call><name>sinf</name><argument_list>(<argument><expr><name>l_phase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dstrs</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>n</name></expr> ]</index></name> <operator>=</operator> <name>rs_mag</name> <operator>*</operator> <call><name>cosf</name><argument_list>(<argument><expr><name>r_phase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dstrs</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>n</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>rs_mag</name> <operator>*</operator> <call><name>sinf</name><argument_list>(<argument><expr><name>r_phase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>upmix_5_1_back</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,

<parameter><decl><type><name>float</name></type> <name>l_phase</name></decl></parameter>,

<parameter><decl><type><name>float</name></type> <name>r_phase</name></decl></parameter>,

<parameter><decl><type><name>float</name></type> <name>c_phase</name></decl></parameter>,

<parameter><decl><type><name>float</name></type> <name>mag_total</name></decl></parameter>,

<parameter><decl><type><name>float</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>y</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AudioSurroundContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>lfe_mag</name></decl>, <decl><type ref="prev"/><name>l_mag</name></decl>, <decl><type ref="prev"/><name>r_mag</name></decl>, <decl><type ref="prev"/><name>ls_mag</name></decl>, <decl><type ref="prev"/><name>rs_mag</name></decl>, <decl><type ref="prev"/><name>c_mag</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>dstc</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>dstl</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>dstr</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>dstls</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>dstrs</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>dstlfe</name></decl>;</decl_stmt>

<expr_stmt><expr><name>dstl</name> <operator>=</operator> <operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><name><name>s</name><operator>-&gt;</operator><name>output</name><operator>-&gt;</operator><name>extended_data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>dstr</name> <operator>=</operator> <operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><name><name>s</name><operator>-&gt;</operator><name>output</name><operator>-&gt;</operator><name>extended_data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>dstc</name> <operator>=</operator> <operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><name><name>s</name><operator>-&gt;</operator><name>output</name><operator>-&gt;</operator><name>extended_data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>dstlfe</name> <operator>=</operator> <operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><name><name>s</name><operator>-&gt;</operator><name>output</name><operator>-&gt;</operator><name>extended_data</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>dstls</name> <operator>=</operator> <operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><name><name>s</name><operator>-&gt;</operator><name>output</name><operator>-&gt;</operator><name>extended_data</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>dstrs</name> <operator>=</operator> <operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><name><name>s</name><operator>-&gt;</operator><name>output</name><operator>-&gt;</operator><name>extended_data</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>get_lfe</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>output_lfe</name></name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>lowcut</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>highcut</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>lfe_mag</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mag_total</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>lfe_mode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>c_mag</name> <operator>=</operator> <call><name>powf</name><argument_list>(<argument><expr><literal type="number">1.f</literal> <operator>-</operator> <call><name>fabsf</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>fc_x</name></name></expr></argument>)</argument_list></call> <operator>*</operator> <call><name>powf</name><argument_list>(<argument><expr><operator>(</operator><name>y</name> <operator>+</operator> <literal type="number">1.f</literal><operator>)</operator> <operator>*</operator> <literal type="number">.5f</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>fc_y</name></name></expr></argument>)</argument_list></call> <operator>*</operator> <name>mag_total</name></expr>;</expr_stmt>

<expr_stmt><expr><name>l_mag</name> <operator>=</operator> <call><name>powf</name><argument_list>(<argument><expr><literal type="number">.5f</literal> <operator>*</operator> <operator>(</operator> <name>x</name> <operator>+</operator> <literal type="number">1.f</literal><operator>)</operator></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>fl_x</name></name></expr></argument>)</argument_list></call> <operator>*</operator> <call><name>powf</name><argument_list>(<argument><expr><operator>(</operator><name>y</name> <operator>+</operator> <literal type="number">1.f</literal><operator>)</operator> <operator>*</operator> <literal type="number">.5f</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>fl_y</name></name></expr></argument>)</argument_list></call> <operator>*</operator> <name>mag_total</name></expr>;</expr_stmt>

<expr_stmt><expr><name>r_mag</name> <operator>=</operator> <call><name>powf</name><argument_list>(<argument><expr><literal type="number">.5f</literal> <operator>*</operator> <operator>(</operator><operator>-</operator><name>x</name> <operator>+</operator> <literal type="number">1.f</literal><operator>)</operator></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>fr_x</name></name></expr></argument>)</argument_list></call> <operator>*</operator> <call><name>powf</name><argument_list>(<argument><expr><operator>(</operator><name>y</name> <operator>+</operator> <literal type="number">1.f</literal><operator>)</operator> <operator>*</operator> <literal type="number">.5f</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>fr_y</name></name></expr></argument>)</argument_list></call> <operator>*</operator> <name>mag_total</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ls_mag</name> <operator>=</operator> <call><name>powf</name><argument_list>(<argument><expr><literal type="number">.5f</literal> <operator>*</operator> <operator>(</operator> <name>x</name> <operator>+</operator> <literal type="number">1.f</literal><operator>)</operator></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>bl_x</name></name></expr></argument>)</argument_list></call> <operator>*</operator> <call><name>powf</name><argument_list>(<argument><expr><literal type="number">1.f</literal> <operator>-</operator> <operator>(</operator><operator>(</operator><name>y</name> <operator>+</operator> <literal type="number">1.f</literal><operator>)</operator> <operator>*</operator> <literal type="number">.5f</literal><operator>)</operator></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>bl_y</name></name></expr></argument>)</argument_list></call> <operator>*</operator> <name>mag_total</name></expr>;</expr_stmt>

<expr_stmt><expr><name>rs_mag</name> <operator>=</operator> <call><name>powf</name><argument_list>(<argument><expr><literal type="number">.5f</literal> <operator>*</operator> <operator>(</operator><operator>-</operator><name>x</name> <operator>+</operator> <literal type="number">1.f</literal><operator>)</operator></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>br_x</name></name></expr></argument>)</argument_list></call> <operator>*</operator> <call><name>powf</name><argument_list>(<argument><expr><literal type="number">1.f</literal> <operator>-</operator> <operator>(</operator><operator>(</operator><name>y</name> <operator>+</operator> <literal type="number">1.f</literal><operator>)</operator> <operator>*</operator> <literal type="number">.5f</literal><operator>)</operator></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>br_y</name></name></expr></argument>)</argument_list></call> <operator>*</operator> <name>mag_total</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dstl</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>n</name></expr> ]</index></name> <operator>=</operator> <name>l_mag</name> <operator>*</operator> <call><name>cosf</name><argument_list>(<argument><expr><name>l_phase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dstl</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>n</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>l_mag</name> <operator>*</operator> <call><name>sinf</name><argument_list>(<argument><expr><name>l_phase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dstr</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>n</name></expr> ]</index></name> <operator>=</operator> <name>r_mag</name> <operator>*</operator> <call><name>cosf</name><argument_list>(<argument><expr><name>r_phase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dstr</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>n</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>r_mag</name> <operator>*</operator> <call><name>sinf</name><argument_list>(<argument><expr><name>r_phase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dstc</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>n</name></expr> ]</index></name> <operator>=</operator> <name>c_mag</name> <operator>*</operator> <call><name>cosf</name><argument_list>(<argument><expr><name>c_phase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dstc</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>n</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>c_mag</name> <operator>*</operator> <call><name>sinf</name><argument_list>(<argument><expr><name>c_phase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dstlfe</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>n</name></expr> ]</index></name> <operator>=</operator> <name>lfe_mag</name> <operator>*</operator> <call><name>cosf</name><argument_list>(<argument><expr><name>c_phase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dstlfe</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>n</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>lfe_mag</name> <operator>*</operator> <call><name>sinf</name><argument_list>(<argument><expr><name>c_phase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dstls</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>n</name></expr> ]</index></name> <operator>=</operator> <name>ls_mag</name> <operator>*</operator> <call><name>cosf</name><argument_list>(<argument><expr><name>l_phase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dstls</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>n</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>ls_mag</name> <operator>*</operator> <call><name>sinf</name><argument_list>(<argument><expr><name>l_phase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dstrs</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>n</name></expr> ]</index></name> <operator>=</operator> <name>rs_mag</name> <operator>*</operator> <call><name>cosf</name><argument_list>(<argument><expr><name>r_phase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dstrs</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>n</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>rs_mag</name> <operator>*</operator> <call><name>sinf</name><argument_list>(<argument><expr><name>r_phase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>upmix_6_0</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,

<parameter><decl><type><name>float</name></type> <name>l_phase</name></decl></parameter>,

<parameter><decl><type><name>float</name></type> <name>r_phase</name></decl></parameter>,

<parameter><decl><type><name>float</name></type> <name>c_phase</name></decl></parameter>,

<parameter><decl><type><name>float</name></type> <name>mag_total</name></decl></parameter>,

<parameter><decl><type><name>float</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>y</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AudioSurroundContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>l_mag</name></decl>, <decl><type ref="prev"/><name>r_mag</name></decl>, <decl><type ref="prev"/><name>ls_mag</name></decl>, <decl><type ref="prev"/><name>rs_mag</name></decl>, <decl><type ref="prev"/><name>c_mag</name></decl>, <decl><type ref="prev"/><name>b_mag</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>dstc</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>dstb</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>dstl</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>dstr</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>dstls</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>dstrs</name></decl>;</decl_stmt>

<expr_stmt><expr><name>dstl</name> <operator>=</operator> <operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><name><name>s</name><operator>-&gt;</operator><name>output</name><operator>-&gt;</operator><name>extended_data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>dstr</name> <operator>=</operator> <operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><name><name>s</name><operator>-&gt;</operator><name>output</name><operator>-&gt;</operator><name>extended_data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>dstc</name> <operator>=</operator> <operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><name><name>s</name><operator>-&gt;</operator><name>output</name><operator>-&gt;</operator><name>extended_data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>dstb</name> <operator>=</operator> <operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><name><name>s</name><operator>-&gt;</operator><name>output</name><operator>-&gt;</operator><name>extended_data</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>dstls</name> <operator>=</operator> <operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><name><name>s</name><operator>-&gt;</operator><name>output</name><operator>-&gt;</operator><name>extended_data</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>dstrs</name> <operator>=</operator> <operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><name><name>s</name><operator>-&gt;</operator><name>output</name><operator>-&gt;</operator><name>extended_data</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>c_mag</name> <operator>=</operator> <call><name>powf</name><argument_list>(<argument><expr><literal type="number">1.f</literal> <operator>-</operator> <call><name>fabsf</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>fc_x</name></name></expr></argument>)</argument_list></call> <operator>*</operator> <call><name>powf</name><argument_list>(<argument><expr><operator>(</operator><name>y</name> <operator>+</operator> <literal type="number">1.f</literal><operator>)</operator> <operator>*</operator> <literal type="number">.5f</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>fc_y</name></name></expr></argument>)</argument_list></call> <operator>*</operator> <name>mag_total</name></expr>;</expr_stmt>

<expr_stmt><expr><name>b_mag</name> <operator>=</operator> <call><name>powf</name><argument_list>(<argument><expr><literal type="number">1.f</literal> <operator>-</operator> <call><name>fabsf</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>bc_x</name></name></expr></argument>)</argument_list></call> <operator>*</operator> <call><name>powf</name><argument_list>(<argument><expr><operator>(</operator><literal type="number">1.f</literal> <operator>-</operator> <name>y</name><operator>)</operator> <operator>*</operator> <literal type="number">.5f</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>bc_y</name></name></expr></argument>)</argument_list></call> <operator>*</operator> <name>mag_total</name></expr>;</expr_stmt>

<expr_stmt><expr><name>l_mag</name> <operator>=</operator> <call><name>powf</name><argument_list>(<argument><expr><literal type="number">.5f</literal> <operator>*</operator> <operator>(</operator> <name>x</name> <operator>+</operator> <literal type="number">1.f</literal><operator>)</operator></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>fl_x</name></name></expr></argument>)</argument_list></call> <operator>*</operator> <call><name>powf</name><argument_list>(<argument><expr><operator>(</operator><name>y</name> <operator>+</operator> <literal type="number">1.f</literal><operator>)</operator> <operator>*</operator> <literal type="number">.5f</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>fl_y</name></name></expr></argument>)</argument_list></call> <operator>*</operator> <name>mag_total</name></expr>;</expr_stmt>

<expr_stmt><expr><name>r_mag</name> <operator>=</operator> <call><name>powf</name><argument_list>(<argument><expr><literal type="number">.5f</literal> <operator>*</operator> <operator>(</operator><operator>-</operator><name>x</name> <operator>+</operator> <literal type="number">1.f</literal><operator>)</operator></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>fr_x</name></name></expr></argument>)</argument_list></call> <operator>*</operator> <call><name>powf</name><argument_list>(<argument><expr><operator>(</operator><name>y</name> <operator>+</operator> <literal type="number">1.f</literal><operator>)</operator> <operator>*</operator> <literal type="number">.5f</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>fr_y</name></name></expr></argument>)</argument_list></call> <operator>*</operator> <name>mag_total</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ls_mag</name> <operator>=</operator> <call><name>powf</name><argument_list>(<argument><expr><literal type="number">.5f</literal> <operator>*</operator> <operator>(</operator> <name>x</name> <operator>+</operator> <literal type="number">1.f</literal><operator>)</operator></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>bl_x</name></name></expr></argument>)</argument_list></call> <operator>*</operator> <call><name>powf</name><argument_list>(<argument><expr><literal type="number">1.f</literal> <operator>-</operator> <operator>(</operator><operator>(</operator><name>y</name> <operator>+</operator> <literal type="number">1.f</literal><operator>)</operator> <operator>*</operator> <literal type="number">.5f</literal><operator>)</operator></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>bl_y</name></name></expr></argument>)</argument_list></call> <operator>*</operator> <name>mag_total</name></expr>;</expr_stmt>

<expr_stmt><expr><name>rs_mag</name> <operator>=</operator> <call><name>powf</name><argument_list>(<argument><expr><literal type="number">.5f</literal> <operator>*</operator> <operator>(</operator><operator>-</operator><name>x</name> <operator>+</operator> <literal type="number">1.f</literal><operator>)</operator></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>br_x</name></name></expr></argument>)</argument_list></call> <operator>*</operator> <call><name>powf</name><argument_list>(<argument><expr><literal type="number">1.f</literal> <operator>-</operator> <operator>(</operator><operator>(</operator><name>y</name> <operator>+</operator> <literal type="number">1.f</literal><operator>)</operator> <operator>*</operator> <literal type="number">.5f</literal><operator>)</operator></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>br_y</name></name></expr></argument>)</argument_list></call> <operator>*</operator> <name>mag_total</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dstl</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>n</name></expr> ]</index></name> <operator>=</operator> <name>l_mag</name> <operator>*</operator> <call><name>cosf</name><argument_list>(<argument><expr><name>l_phase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dstl</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>n</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>l_mag</name> <operator>*</operator> <call><name>sinf</name><argument_list>(<argument><expr><name>l_phase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dstr</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>n</name></expr> ]</index></name> <operator>=</operator> <name>r_mag</name> <operator>*</operator> <call><name>cosf</name><argument_list>(<argument><expr><name>r_phase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dstr</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>n</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>r_mag</name> <operator>*</operator> <call><name>sinf</name><argument_list>(<argument><expr><name>r_phase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dstc</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>n</name></expr> ]</index></name> <operator>=</operator> <name>c_mag</name> <operator>*</operator> <call><name>cosf</name><argument_list>(<argument><expr><name>c_phase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dstc</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>n</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>c_mag</name> <operator>*</operator> <call><name>sinf</name><argument_list>(<argument><expr><name>c_phase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dstls</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>n</name></expr> ]</index></name> <operator>=</operator> <name>ls_mag</name> <operator>*</operator> <call><name>cosf</name><argument_list>(<argument><expr><name>l_phase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dstls</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>n</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>ls_mag</name> <operator>*</operator> <call><name>sinf</name><argument_list>(<argument><expr><name>l_phase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dstrs</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>n</name></expr> ]</index></name> <operator>=</operator> <name>rs_mag</name> <operator>*</operator> <call><name>cosf</name><argument_list>(<argument><expr><name>r_phase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dstrs</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>n</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>rs_mag</name> <operator>*</operator> <call><name>sinf</name><argument_list>(<argument><expr><name>r_phase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dstb</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>n</name></expr> ]</index></name> <operator>=</operator> <name>b_mag</name> <operator>*</operator> <call><name>cosf</name><argument_list>(<argument><expr><name>c_phase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dstb</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>n</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>b_mag</name> <operator>*</operator> <call><name>sinf</name><argument_list>(<argument><expr><name>c_phase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>upmix_6_1</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,

<parameter><decl><type><name>float</name></type> <name>l_phase</name></decl></parameter>,

<parameter><decl><type><name>float</name></type> <name>r_phase</name></decl></parameter>,

<parameter><decl><type><name>float</name></type> <name>c_phase</name></decl></parameter>,

<parameter><decl><type><name>float</name></type> <name>mag_total</name></decl></parameter>,

<parameter><decl><type><name>float</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>y</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AudioSurroundContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>lfe_mag</name></decl>, <decl><type ref="prev"/><name>l_mag</name></decl>, <decl><type ref="prev"/><name>r_mag</name></decl>, <decl><type ref="prev"/><name>ls_mag</name></decl>, <decl><type ref="prev"/><name>rs_mag</name></decl>, <decl><type ref="prev"/><name>c_mag</name></decl>, <decl><type ref="prev"/><name>b_mag</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>dstc</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>dstb</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>dstl</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>dstr</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>dstls</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>dstrs</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>dstlfe</name></decl>;</decl_stmt>

<expr_stmt><expr><name>dstl</name> <operator>=</operator> <operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><name><name>s</name><operator>-&gt;</operator><name>output</name><operator>-&gt;</operator><name>extended_data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>dstr</name> <operator>=</operator> <operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><name><name>s</name><operator>-&gt;</operator><name>output</name><operator>-&gt;</operator><name>extended_data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>dstc</name> <operator>=</operator> <operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><name><name>s</name><operator>-&gt;</operator><name>output</name><operator>-&gt;</operator><name>extended_data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>dstlfe</name> <operator>=</operator> <operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><name><name>s</name><operator>-&gt;</operator><name>output</name><operator>-&gt;</operator><name>extended_data</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>dstb</name> <operator>=</operator> <operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><name><name>s</name><operator>-&gt;</operator><name>output</name><operator>-&gt;</operator><name>extended_data</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>dstls</name> <operator>=</operator> <operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><name><name>s</name><operator>-&gt;</operator><name>output</name><operator>-&gt;</operator><name>extended_data</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>dstrs</name> <operator>=</operator> <operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><name><name>s</name><operator>-&gt;</operator><name>output</name><operator>-&gt;</operator><name>extended_data</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>get_lfe</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>output_lfe</name></name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>lowcut</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>highcut</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>lfe_mag</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mag_total</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>lfe_mode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>c_mag</name> <operator>=</operator> <call><name>powf</name><argument_list>(<argument><expr><literal type="number">1.f</literal> <operator>-</operator> <call><name>fabsf</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>fc_x</name></name></expr></argument>)</argument_list></call> <operator>*</operator> <call><name>powf</name><argument_list>(<argument><expr><operator>(</operator><name>y</name> <operator>+</operator> <literal type="number">1.f</literal><operator>)</operator> <operator>*</operator> <literal type="number">.5f</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>fc_y</name></name></expr></argument>)</argument_list></call> <operator>*</operator> <name>mag_total</name></expr>;</expr_stmt>

<expr_stmt><expr><name>b_mag</name> <operator>=</operator> <call><name>powf</name><argument_list>(<argument><expr><literal type="number">1.f</literal> <operator>-</operator> <call><name>fabsf</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>bc_x</name></name></expr></argument>)</argument_list></call> <operator>*</operator> <call><name>powf</name><argument_list>(<argument><expr><operator>(</operator><literal type="number">1.f</literal> <operator>-</operator> <name>y</name><operator>)</operator> <operator>*</operator> <literal type="number">.5f</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>bc_y</name></name></expr></argument>)</argument_list></call> <operator>*</operator> <name>mag_total</name></expr>;</expr_stmt>

<expr_stmt><expr><name>l_mag</name> <operator>=</operator> <call><name>powf</name><argument_list>(<argument><expr><literal type="number">.5f</literal> <operator>*</operator> <operator>(</operator> <name>x</name> <operator>+</operator> <literal type="number">1.f</literal><operator>)</operator></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>fl_x</name></name></expr></argument>)</argument_list></call> <operator>*</operator> <call><name>powf</name><argument_list>(<argument><expr><operator>(</operator><name>y</name> <operator>+</operator> <literal type="number">1.f</literal><operator>)</operator> <operator>*</operator> <literal type="number">.5f</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>fl_y</name></name></expr></argument>)</argument_list></call> <operator>*</operator> <name>mag_total</name></expr>;</expr_stmt>

<expr_stmt><expr><name>r_mag</name> <operator>=</operator> <call><name>powf</name><argument_list>(<argument><expr><literal type="number">.5f</literal> <operator>*</operator> <operator>(</operator><operator>-</operator><name>x</name> <operator>+</operator> <literal type="number">1.f</literal><operator>)</operator></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>fr_x</name></name></expr></argument>)</argument_list></call> <operator>*</operator> <call><name>powf</name><argument_list>(<argument><expr><operator>(</operator><name>y</name> <operator>+</operator> <literal type="number">1.f</literal><operator>)</operator> <operator>*</operator> <literal type="number">.5f</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>fr_y</name></name></expr></argument>)</argument_list></call> <operator>*</operator> <name>mag_total</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ls_mag</name> <operator>=</operator> <call><name>powf</name><argument_list>(<argument><expr><literal type="number">.5f</literal> <operator>*</operator> <operator>(</operator> <name>x</name> <operator>+</operator> <literal type="number">1.f</literal><operator>)</operator></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>bl_x</name></name></expr></argument>)</argument_list></call> <operator>*</operator> <call><name>powf</name><argument_list>(<argument><expr><literal type="number">1.f</literal> <operator>-</operator> <operator>(</operator><operator>(</operator><name>y</name> <operator>+</operator> <literal type="number">1.f</literal><operator>)</operator> <operator>*</operator> <literal type="number">.5f</literal><operator>)</operator></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>bl_y</name></name></expr></argument>)</argument_list></call> <operator>*</operator> <name>mag_total</name></expr>;</expr_stmt>

<expr_stmt><expr><name>rs_mag</name> <operator>=</operator> <call><name>powf</name><argument_list>(<argument><expr><literal type="number">.5f</literal> <operator>*</operator> <operator>(</operator><operator>-</operator><name>x</name> <operator>+</operator> <literal type="number">1.f</literal><operator>)</operator></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>br_x</name></name></expr></argument>)</argument_list></call> <operator>*</operator> <call><name>powf</name><argument_list>(<argument><expr><literal type="number">1.f</literal> <operator>-</operator> <operator>(</operator><operator>(</operator><name>y</name> <operator>+</operator> <literal type="number">1.f</literal><operator>)</operator> <operator>*</operator> <literal type="number">.5f</literal><operator>)</operator></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>br_y</name></name></expr></argument>)</argument_list></call> <operator>*</operator> <name>mag_total</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dstl</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>n</name></expr> ]</index></name> <operator>=</operator> <name>l_mag</name> <operator>*</operator> <call><name>cosf</name><argument_list>(<argument><expr><name>l_phase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dstl</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>n</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>l_mag</name> <operator>*</operator> <call><name>sinf</name><argument_list>(<argument><expr><name>l_phase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dstr</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>n</name></expr> ]</index></name> <operator>=</operator> <name>r_mag</name> <operator>*</operator> <call><name>cosf</name><argument_list>(<argument><expr><name>r_phase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dstr</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>n</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>r_mag</name> <operator>*</operator> <call><name>sinf</name><argument_list>(<argument><expr><name>r_phase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dstc</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>n</name></expr> ]</index></name> <operator>=</operator> <name>c_mag</name> <operator>*</operator> <call><name>cosf</name><argument_list>(<argument><expr><name>c_phase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dstc</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>n</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>c_mag</name> <operator>*</operator> <call><name>sinf</name><argument_list>(<argument><expr><name>c_phase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dstlfe</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>n</name></expr> ]</index></name> <operator>=</operator> <name>lfe_mag</name> <operator>*</operator> <call><name>cosf</name><argument_list>(<argument><expr><name>c_phase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dstlfe</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>n</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>lfe_mag</name> <operator>*</operator> <call><name>sinf</name><argument_list>(<argument><expr><name>c_phase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dstls</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>n</name></expr> ]</index></name> <operator>=</operator> <name>ls_mag</name> <operator>*</operator> <call><name>cosf</name><argument_list>(<argument><expr><name>l_phase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dstls</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>n</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>ls_mag</name> <operator>*</operator> <call><name>sinf</name><argument_list>(<argument><expr><name>l_phase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dstrs</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>n</name></expr> ]</index></name> <operator>=</operator> <name>rs_mag</name> <operator>*</operator> <call><name>cosf</name><argument_list>(<argument><expr><name>r_phase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dstrs</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>n</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>rs_mag</name> <operator>*</operator> <call><name>sinf</name><argument_list>(<argument><expr><name>r_phase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dstb</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>n</name></expr> ]</index></name> <operator>=</operator> <name>b_mag</name> <operator>*</operator> <call><name>cosf</name><argument_list>(<argument><expr><name>c_phase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dstb</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>n</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>b_mag</name> <operator>*</operator> <call><name>sinf</name><argument_list>(<argument><expr><name>c_phase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>upmix_5_1_back_surround</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,

<parameter><decl><type><name>float</name></type> <name>l_phase</name></decl></parameter>,

<parameter><decl><type><name>float</name></type> <name>r_phase</name></decl></parameter>,

<parameter><decl><type><name>float</name></type> <name>c_phase</name></decl></parameter>,

<parameter><decl><type><name>float</name></type> <name>c_mag</name></decl></parameter>,

<parameter><decl><type><name>float</name></type> <name>mag_total</name></decl></parameter>,

<parameter><decl><type><name>float</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>y</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AudioSurroundContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>lfe_mag</name></decl>, <decl><type ref="prev"/><name>l_mag</name></decl>, <decl><type ref="prev"/><name>r_mag</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>dstc</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>dstl</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>dstr</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>dstlfe</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>ls_mag</name></decl>, <decl><type ref="prev"/><name>rs_mag</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>dstls</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>dstrs</name></decl>;</decl_stmt>

<expr_stmt><expr><name>dstl</name> <operator>=</operator> <operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><name><name>s</name><operator>-&gt;</operator><name>output</name><operator>-&gt;</operator><name>extended_data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>dstr</name> <operator>=</operator> <operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><name><name>s</name><operator>-&gt;</operator><name>output</name><operator>-&gt;</operator><name>extended_data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>dstc</name> <operator>=</operator> <operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><name><name>s</name><operator>-&gt;</operator><name>output</name><operator>-&gt;</operator><name>extended_data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>dstlfe</name> <operator>=</operator> <operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><name><name>s</name><operator>-&gt;</operator><name>output</name><operator>-&gt;</operator><name>extended_data</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>dstls</name> <operator>=</operator> <operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><name><name>s</name><operator>-&gt;</operator><name>output</name><operator>-&gt;</operator><name>extended_data</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>dstrs</name> <operator>=</operator> <operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><name><name>s</name><operator>-&gt;</operator><name>output</name><operator>-&gt;</operator><name>extended_data</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>get_lfe</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>output_lfe</name></name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>lowcut</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>highcut</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>lfe_mag</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>c_mag</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>lfe_mode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>l_mag</name> <operator>=</operator> <call><name>powf</name><argument_list>(<argument><expr><literal type="number">.5f</literal> <operator>*</operator> <operator>(</operator> <name>x</name> <operator>+</operator> <literal type="number">1.f</literal><operator>)</operator></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>fl_x</name></name></expr></argument>)</argument_list></call> <operator>*</operator> <call><name>powf</name><argument_list>(<argument><expr><operator>(</operator><name>y</name> <operator>+</operator> <literal type="number">1.f</literal><operator>)</operator> <operator>*</operator> <literal type="number">.5f</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>fl_y</name></name></expr></argument>)</argument_list></call> <operator>*</operator> <name>mag_total</name></expr>;</expr_stmt>

<expr_stmt><expr><name>r_mag</name> <operator>=</operator> <call><name>powf</name><argument_list>(<argument><expr><literal type="number">.5f</literal> <operator>*</operator> <operator>(</operator><operator>-</operator><name>x</name> <operator>+</operator> <literal type="number">1.f</literal><operator>)</operator></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>fr_x</name></name></expr></argument>)</argument_list></call> <operator>*</operator> <call><name>powf</name><argument_list>(<argument><expr><operator>(</operator><name>y</name> <operator>+</operator> <literal type="number">1.f</literal><operator>)</operator> <operator>*</operator> <literal type="number">.5f</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>fr_y</name></name></expr></argument>)</argument_list></call> <operator>*</operator> <name>mag_total</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ls_mag</name> <operator>=</operator> <call><name>powf</name><argument_list>(<argument><expr><literal type="number">.5f</literal> <operator>*</operator> <operator>(</operator> <name>x</name> <operator>+</operator> <literal type="number">1.f</literal><operator>)</operator></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>bl_x</name></name></expr></argument>)</argument_list></call> <operator>*</operator> <call><name>powf</name><argument_list>(<argument><expr><literal type="number">1.f</literal> <operator>-</operator> <operator>(</operator><operator>(</operator><name>y</name> <operator>+</operator> <literal type="number">1.f</literal><operator>)</operator> <operator>*</operator> <literal type="number">.5f</literal><operator>)</operator></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>bl_y</name></name></expr></argument>)</argument_list></call> <operator>*</operator> <name>mag_total</name></expr>;</expr_stmt>

<expr_stmt><expr><name>rs_mag</name> <operator>=</operator> <call><name>powf</name><argument_list>(<argument><expr><literal type="number">.5f</literal> <operator>*</operator> <operator>(</operator><operator>-</operator><name>x</name> <operator>+</operator> <literal type="number">1.f</literal><operator>)</operator></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>br_x</name></name></expr></argument>)</argument_list></call> <operator>*</operator> <call><name>powf</name><argument_list>(<argument><expr><literal type="number">1.f</literal> <operator>-</operator> <operator>(</operator><operator>(</operator><name>y</name> <operator>+</operator> <literal type="number">1.f</literal><operator>)</operator> <operator>*</operator> <literal type="number">.5f</literal><operator>)</operator></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>br_y</name></name></expr></argument>)</argument_list></call> <operator>*</operator> <name>mag_total</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dstl</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>n</name></expr> ]</index></name> <operator>=</operator> <name>l_mag</name> <operator>*</operator> <call><name>cosf</name><argument_list>(<argument><expr><name>l_phase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dstl</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>n</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>l_mag</name> <operator>*</operator> <call><name>sinf</name><argument_list>(<argument><expr><name>l_phase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dstr</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>n</name></expr> ]</index></name> <operator>=</operator> <name>r_mag</name> <operator>*</operator> <call><name>cosf</name><argument_list>(<argument><expr><name>r_phase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dstr</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>n</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>r_mag</name> <operator>*</operator> <call><name>sinf</name><argument_list>(<argument><expr><name>r_phase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dstc</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>n</name></expr> ]</index></name> <operator>=</operator> <name>c_mag</name> <operator>*</operator> <call><name>cosf</name><argument_list>(<argument><expr><name>c_phase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dstc</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>n</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>c_mag</name> <operator>*</operator> <call><name>sinf</name><argument_list>(<argument><expr><name>c_phase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dstlfe</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>n</name></expr> ]</index></name> <operator>=</operator> <name>lfe_mag</name> <operator>*</operator> <call><name>cosf</name><argument_list>(<argument><expr><name>c_phase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dstlfe</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>n</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>lfe_mag</name> <operator>*</operator> <call><name>sinf</name><argument_list>(<argument><expr><name>c_phase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dstls</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>n</name></expr> ]</index></name> <operator>=</operator> <name>ls_mag</name> <operator>*</operator> <call><name>cosf</name><argument_list>(<argument><expr><name>l_phase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dstls</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>n</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>ls_mag</name> <operator>*</operator> <call><name>sinf</name><argument_list>(<argument><expr><name>l_phase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dstrs</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>n</name></expr> ]</index></name> <operator>=</operator> <name>rs_mag</name> <operator>*</operator> <call><name>cosf</name><argument_list>(<argument><expr><name>r_phase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dstrs</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>n</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>rs_mag</name> <operator>*</operator> <call><name>sinf</name><argument_list>(<argument><expr><name>r_phase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>upmix_5_1_back_2_1</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,

<parameter><decl><type><name>float</name></type> <name>l_phase</name></decl></parameter>,

<parameter><decl><type><name>float</name></type> <name>r_phase</name></decl></parameter>,

<parameter><decl><type><name>float</name></type> <name>c_phase</name></decl></parameter>,

<parameter><decl><type><name>float</name></type> <name>mag_total</name></decl></parameter>,

<parameter><decl><type><name>float</name></type> <name>lfe_re</name></decl></parameter>,

<parameter><decl><type><name>float</name></type> <name>lfe_im</name></decl></parameter>,

<parameter><decl><type><name>float</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>y</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AudioSurroundContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>c_mag</name></decl>, <decl><type ref="prev"/><name>l_mag</name></decl>, <decl><type ref="prev"/><name>r_mag</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>dstc</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>dstl</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>dstr</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>dstlfe</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>ls_mag</name></decl>, <decl><type ref="prev"/><name>rs_mag</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>dstls</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>dstrs</name></decl>;</decl_stmt>

<expr_stmt><expr><name>dstl</name> <operator>=</operator> <operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><name><name>s</name><operator>-&gt;</operator><name>output</name><operator>-&gt;</operator><name>extended_data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>dstr</name> <operator>=</operator> <operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><name><name>s</name><operator>-&gt;</operator><name>output</name><operator>-&gt;</operator><name>extended_data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>dstc</name> <operator>=</operator> <operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><name><name>s</name><operator>-&gt;</operator><name>output</name><operator>-&gt;</operator><name>extended_data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>dstlfe</name> <operator>=</operator> <operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><name><name>s</name><operator>-&gt;</operator><name>output</name><operator>-&gt;</operator><name>extended_data</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>dstls</name> <operator>=</operator> <operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><name><name>s</name><operator>-&gt;</operator><name>output</name><operator>-&gt;</operator><name>extended_data</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>dstrs</name> <operator>=</operator> <operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><name><name>s</name><operator>-&gt;</operator><name>output</name><operator>-&gt;</operator><name>extended_data</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>c_mag</name> <operator>=</operator> <call><name>powf</name><argument_list>(<argument><expr><literal type="number">1.f</literal> <operator>-</operator> <call><name>fabsf</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>fc_x</name></name></expr></argument>)</argument_list></call> <operator>*</operator> <call><name>powf</name><argument_list>(<argument><expr><operator>(</operator><name>y</name> <operator>+</operator> <literal type="number">1.f</literal><operator>)</operator> <operator>*</operator> <literal type="number">.5f</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>fc_y</name></name></expr></argument>)</argument_list></call> <operator>*</operator> <name>mag_total</name></expr>;</expr_stmt>

<expr_stmt><expr><name>l_mag</name> <operator>=</operator> <call><name>powf</name><argument_list>(<argument><expr><literal type="number">.5f</literal> <operator>*</operator> <operator>(</operator> <name>x</name> <operator>+</operator> <literal type="number">1.f</literal><operator>)</operator></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>fl_x</name></name></expr></argument>)</argument_list></call> <operator>*</operator> <call><name>powf</name><argument_list>(<argument><expr><operator>(</operator><name>y</name> <operator>+</operator> <literal type="number">1.f</literal><operator>)</operator> <operator>*</operator> <literal type="number">.5f</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>fl_y</name></name></expr></argument>)</argument_list></call> <operator>*</operator> <name>mag_total</name></expr>;</expr_stmt>

<expr_stmt><expr><name>r_mag</name> <operator>=</operator> <call><name>powf</name><argument_list>(<argument><expr><literal type="number">.5f</literal> <operator>*</operator> <operator>(</operator><operator>-</operator><name>x</name> <operator>+</operator> <literal type="number">1.f</literal><operator>)</operator></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>fr_x</name></name></expr></argument>)</argument_list></call> <operator>*</operator> <call><name>powf</name><argument_list>(<argument><expr><operator>(</operator><name>y</name> <operator>+</operator> <literal type="number">1.f</literal><operator>)</operator> <operator>*</operator> <literal type="number">.5f</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>fr_y</name></name></expr></argument>)</argument_list></call> <operator>*</operator> <name>mag_total</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ls_mag</name> <operator>=</operator> <call><name>powf</name><argument_list>(<argument><expr><literal type="number">.5f</literal> <operator>*</operator> <operator>(</operator> <name>x</name> <operator>+</operator> <literal type="number">1.f</literal><operator>)</operator></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>bl_x</name></name></expr></argument>)</argument_list></call> <operator>*</operator> <call><name>powf</name><argument_list>(<argument><expr><literal type="number">1.f</literal> <operator>-</operator> <operator>(</operator><operator>(</operator><name>y</name> <operator>+</operator> <literal type="number">1.f</literal><operator>)</operator> <operator>*</operator> <literal type="number">.5f</literal><operator>)</operator></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>bl_y</name></name></expr></argument>)</argument_list></call> <operator>*</operator> <name>mag_total</name></expr>;</expr_stmt>

<expr_stmt><expr><name>rs_mag</name> <operator>=</operator> <call><name>powf</name><argument_list>(<argument><expr><literal type="number">.5f</literal> <operator>*</operator> <operator>(</operator><operator>-</operator><name>x</name> <operator>+</operator> <literal type="number">1.f</literal><operator>)</operator></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>br_x</name></name></expr></argument>)</argument_list></call> <operator>*</operator> <call><name>powf</name><argument_list>(<argument><expr><literal type="number">1.f</literal> <operator>-</operator> <operator>(</operator><operator>(</operator><name>y</name> <operator>+</operator> <literal type="number">1.f</literal><operator>)</operator> <operator>*</operator> <literal type="number">.5f</literal><operator>)</operator></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>br_y</name></name></expr></argument>)</argument_list></call> <operator>*</operator> <name>mag_total</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dstl</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>n</name></expr> ]</index></name> <operator>=</operator> <name>l_mag</name> <operator>*</operator> <call><name>cosf</name><argument_list>(<argument><expr><name>l_phase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dstl</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>n</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>l_mag</name> <operator>*</operator> <call><name>sinf</name><argument_list>(<argument><expr><name>l_phase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dstr</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>n</name></expr> ]</index></name> <operator>=</operator> <name>r_mag</name> <operator>*</operator> <call><name>cosf</name><argument_list>(<argument><expr><name>r_phase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dstr</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>n</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>r_mag</name> <operator>*</operator> <call><name>sinf</name><argument_list>(<argument><expr><name>r_phase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dstc</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>n</name></expr> ]</index></name> <operator>=</operator> <name>c_mag</name> <operator>*</operator> <call><name>cosf</name><argument_list>(<argument><expr><name>c_phase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dstc</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>n</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>c_mag</name> <operator>*</operator> <call><name>sinf</name><argument_list>(<argument><expr><name>c_phase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dstlfe</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>n</name></expr> ]</index></name> <operator>=</operator> <name>lfe_re</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dstlfe</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>n</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>lfe_im</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dstls</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>n</name></expr> ]</index></name> <operator>=</operator> <name>ls_mag</name> <operator>*</operator> <call><name>cosf</name><argument_list>(<argument><expr><name>l_phase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dstls</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>n</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>ls_mag</name> <operator>*</operator> <call><name>sinf</name><argument_list>(<argument><expr><name>l_phase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dstrs</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>n</name></expr> ]</index></name> <operator>=</operator> <name>rs_mag</name> <operator>*</operator> <call><name>cosf</name><argument_list>(<argument><expr><name>r_phase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dstrs</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>n</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>rs_mag</name> <operator>*</operator> <call><name>sinf</name><argument_list>(<argument><expr><name>r_phase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>upmix_7_0</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,

<parameter><decl><type><name>float</name></type> <name>l_phase</name></decl></parameter>,

<parameter><decl><type><name>float</name></type> <name>r_phase</name></decl></parameter>,

<parameter><decl><type><name>float</name></type> <name>c_phase</name></decl></parameter>,

<parameter><decl><type><name>float</name></type> <name>mag_total</name></decl></parameter>,

<parameter><decl><type><name>float</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>y</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>l_mag</name></decl>, <decl><type ref="prev"/><name>r_mag</name></decl>, <decl><type ref="prev"/><name>ls_mag</name></decl>, <decl><type ref="prev"/><name>rs_mag</name></decl>, <decl><type ref="prev"/><name>c_mag</name></decl>, <decl><type ref="prev"/><name>lb_mag</name></decl>, <decl><type ref="prev"/><name>rb_mag</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>dstc</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>dstl</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>dstr</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>dstls</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>dstrs</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>dstlb</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>dstrb</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AudioSurroundContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>dstl</name> <operator>=</operator> <operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><name><name>s</name><operator>-&gt;</operator><name>output</name><operator>-&gt;</operator><name>extended_data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>dstr</name> <operator>=</operator> <operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><name><name>s</name><operator>-&gt;</operator><name>output</name><operator>-&gt;</operator><name>extended_data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>dstc</name> <operator>=</operator> <operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><name><name>s</name><operator>-&gt;</operator><name>output</name><operator>-&gt;</operator><name>extended_data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>dstlb</name> <operator>=</operator> <operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><name><name>s</name><operator>-&gt;</operator><name>output</name><operator>-&gt;</operator><name>extended_data</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>dstrb</name> <operator>=</operator> <operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><name><name>s</name><operator>-&gt;</operator><name>output</name><operator>-&gt;</operator><name>extended_data</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>dstls</name> <operator>=</operator> <operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><name><name>s</name><operator>-&gt;</operator><name>output</name><operator>-&gt;</operator><name>extended_data</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>dstrs</name> <operator>=</operator> <operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><name><name>s</name><operator>-&gt;</operator><name>output</name><operator>-&gt;</operator><name>extended_data</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>c_mag</name> <operator>=</operator> <call><name>powf</name><argument_list>(<argument><expr><literal type="number">1.f</literal> <operator>-</operator> <call><name>fabsf</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>fc_x</name></name></expr></argument>)</argument_list></call> <operator>*</operator> <call><name>powf</name><argument_list>(<argument><expr><operator>(</operator><name>y</name> <operator>+</operator> <literal type="number">1.f</literal><operator>)</operator> <operator>*</operator> <literal type="number">.5f</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>fc_y</name></name></expr></argument>)</argument_list></call> <operator>*</operator> <name>mag_total</name></expr>;</expr_stmt>

<expr_stmt><expr><name>l_mag</name> <operator>=</operator> <call><name>powf</name><argument_list>(<argument><expr><literal type="number">.5f</literal> <operator>*</operator> <operator>(</operator> <name>x</name> <operator>+</operator> <literal type="number">1.f</literal><operator>)</operator></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>fl_x</name></name></expr></argument>)</argument_list></call> <operator>*</operator> <call><name>powf</name><argument_list>(<argument><expr><operator>(</operator><name>y</name> <operator>+</operator> <literal type="number">1.f</literal><operator>)</operator> <operator>*</operator> <literal type="number">.5f</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>fl_y</name></name></expr></argument>)</argument_list></call> <operator>*</operator> <name>mag_total</name></expr>;</expr_stmt>

<expr_stmt><expr><name>r_mag</name> <operator>=</operator> <call><name>powf</name><argument_list>(<argument><expr><literal type="number">.5f</literal> <operator>*</operator> <operator>(</operator><operator>-</operator><name>x</name> <operator>+</operator> <literal type="number">1.f</literal><operator>)</operator></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>fr_x</name></name></expr></argument>)</argument_list></call> <operator>*</operator> <call><name>powf</name><argument_list>(<argument><expr><operator>(</operator><name>y</name> <operator>+</operator> <literal type="number">1.f</literal><operator>)</operator> <operator>*</operator> <literal type="number">.5f</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>fr_y</name></name></expr></argument>)</argument_list></call> <operator>*</operator> <name>mag_total</name></expr>;</expr_stmt>

<expr_stmt><expr><name>lb_mag</name> <operator>=</operator> <call><name>powf</name><argument_list>(<argument><expr><literal type="number">.5f</literal> <operator>*</operator> <operator>(</operator> <name>x</name> <operator>+</operator> <literal type="number">1.f</literal><operator>)</operator></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>bl_x</name></name></expr></argument>)</argument_list></call> <operator>*</operator> <call><name>powf</name><argument_list>(<argument><expr><literal type="number">1.f</literal> <operator>-</operator> <operator>(</operator><operator>(</operator><name>y</name> <operator>+</operator> <literal type="number">1.f</literal><operator>)</operator> <operator>*</operator> <literal type="number">.5f</literal><operator>)</operator></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>bl_y</name></name></expr></argument>)</argument_list></call> <operator>*</operator> <name>mag_total</name></expr>;</expr_stmt>

<expr_stmt><expr><name>rb_mag</name> <operator>=</operator> <call><name>powf</name><argument_list>(<argument><expr><literal type="number">.5f</literal> <operator>*</operator> <operator>(</operator><operator>-</operator><name>x</name> <operator>+</operator> <literal type="number">1.f</literal><operator>)</operator></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>br_x</name></name></expr></argument>)</argument_list></call> <operator>*</operator> <call><name>powf</name><argument_list>(<argument><expr><literal type="number">1.f</literal> <operator>-</operator> <operator>(</operator><operator>(</operator><name>y</name> <operator>+</operator> <literal type="number">1.f</literal><operator>)</operator> <operator>*</operator> <literal type="number">.5f</literal><operator>)</operator></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>br_y</name></name></expr></argument>)</argument_list></call> <operator>*</operator> <name>mag_total</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ls_mag</name> <operator>=</operator> <call><name>powf</name><argument_list>(<argument><expr><literal type="number">.5f</literal> <operator>*</operator> <operator>(</operator> <name>x</name> <operator>+</operator> <literal type="number">1.f</literal><operator>)</operator></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>sl_x</name></name></expr></argument>)</argument_list></call> <operator>*</operator> <call><name>powf</name><argument_list>(<argument><expr><literal type="number">1.f</literal> <operator>-</operator> <call><name>fabsf</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>sl_y</name></name></expr></argument>)</argument_list></call> <operator>*</operator> <name>mag_total</name></expr>;</expr_stmt>

<expr_stmt><expr><name>rs_mag</name> <operator>=</operator> <call><name>powf</name><argument_list>(<argument><expr><literal type="number">.5f</literal> <operator>*</operator> <operator>(</operator><operator>-</operator><name>x</name> <operator>+</operator> <literal type="number">1.f</literal><operator>)</operator></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>sr_x</name></name></expr></argument>)</argument_list></call> <operator>*</operator> <call><name>powf</name><argument_list>(<argument><expr><literal type="number">1.f</literal> <operator>-</operator> <call><name>fabsf</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>sr_y</name></name></expr></argument>)</argument_list></call> <operator>*</operator> <name>mag_total</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dstl</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>n</name></expr> ]</index></name> <operator>=</operator> <name>l_mag</name> <operator>*</operator> <call><name>cosf</name><argument_list>(<argument><expr><name>l_phase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dstl</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>n</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>l_mag</name> <operator>*</operator> <call><name>sinf</name><argument_list>(<argument><expr><name>l_phase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dstr</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>n</name></expr> ]</index></name> <operator>=</operator> <name>r_mag</name> <operator>*</operator> <call><name>cosf</name><argument_list>(<argument><expr><name>r_phase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dstr</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>n</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>r_mag</name> <operator>*</operator> <call><name>sinf</name><argument_list>(<argument><expr><name>r_phase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dstc</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>n</name></expr> ]</index></name> <operator>=</operator> <name>c_mag</name> <operator>*</operator> <call><name>cosf</name><argument_list>(<argument><expr><name>c_phase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dstc</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>n</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>c_mag</name> <operator>*</operator> <call><name>sinf</name><argument_list>(<argument><expr><name>c_phase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dstlb</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>n</name></expr> ]</index></name> <operator>=</operator> <name>lb_mag</name> <operator>*</operator> <call><name>cosf</name><argument_list>(<argument><expr><name>l_phase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dstlb</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>n</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>lb_mag</name> <operator>*</operator> <call><name>sinf</name><argument_list>(<argument><expr><name>l_phase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dstrb</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>n</name></expr> ]</index></name> <operator>=</operator> <name>rb_mag</name> <operator>*</operator> <call><name>cosf</name><argument_list>(<argument><expr><name>r_phase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dstrb</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>n</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>rb_mag</name> <operator>*</operator> <call><name>sinf</name><argument_list>(<argument><expr><name>r_phase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dstls</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>n</name></expr> ]</index></name> <operator>=</operator> <name>ls_mag</name> <operator>*</operator> <call><name>cosf</name><argument_list>(<argument><expr><name>l_phase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dstls</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>n</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>ls_mag</name> <operator>*</operator> <call><name>sinf</name><argument_list>(<argument><expr><name>l_phase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dstrs</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>n</name></expr> ]</index></name> <operator>=</operator> <name>rs_mag</name> <operator>*</operator> <call><name>cosf</name><argument_list>(<argument><expr><name>r_phase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dstrs</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>n</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>rs_mag</name> <operator>*</operator> <call><name>sinf</name><argument_list>(<argument><expr><name>r_phase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>upmix_7_1</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,

<parameter><decl><type><name>float</name></type> <name>l_phase</name></decl></parameter>,

<parameter><decl><type><name>float</name></type> <name>r_phase</name></decl></parameter>,

<parameter><decl><type><name>float</name></type> <name>c_phase</name></decl></parameter>,

<parameter><decl><type><name>float</name></type> <name>mag_total</name></decl></parameter>,

<parameter><decl><type><name>float</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>y</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>lfe_mag</name></decl>, <decl><type ref="prev"/><name>l_mag</name></decl>, <decl><type ref="prev"/><name>r_mag</name></decl>, <decl><type ref="prev"/><name>ls_mag</name></decl>, <decl><type ref="prev"/><name>rs_mag</name></decl>, <decl><type ref="prev"/><name>c_mag</name></decl>, <decl><type ref="prev"/><name>lb_mag</name></decl>, <decl><type ref="prev"/><name>rb_mag</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>dstc</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>dstl</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>dstr</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>dstls</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>dstrs</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>dstlb</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>dstrb</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>dstlfe</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AudioSurroundContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>dstl</name> <operator>=</operator> <operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><name><name>s</name><operator>-&gt;</operator><name>output</name><operator>-&gt;</operator><name>extended_data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>dstr</name> <operator>=</operator> <operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><name><name>s</name><operator>-&gt;</operator><name>output</name><operator>-&gt;</operator><name>extended_data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>dstc</name> <operator>=</operator> <operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><name><name>s</name><operator>-&gt;</operator><name>output</name><operator>-&gt;</operator><name>extended_data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>dstlfe</name> <operator>=</operator> <operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><name><name>s</name><operator>-&gt;</operator><name>output</name><operator>-&gt;</operator><name>extended_data</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>dstlb</name> <operator>=</operator> <operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><name><name>s</name><operator>-&gt;</operator><name>output</name><operator>-&gt;</operator><name>extended_data</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>dstrb</name> <operator>=</operator> <operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><name><name>s</name><operator>-&gt;</operator><name>output</name><operator>-&gt;</operator><name>extended_data</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>dstls</name> <operator>=</operator> <operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><name><name>s</name><operator>-&gt;</operator><name>output</name><operator>-&gt;</operator><name>extended_data</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>dstrs</name> <operator>=</operator> <operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><name><name>s</name><operator>-&gt;</operator><name>output</name><operator>-&gt;</operator><name>extended_data</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>get_lfe</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>output_lfe</name></name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>lowcut</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>highcut</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>lfe_mag</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mag_total</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>lfe_mode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>c_mag</name> <operator>=</operator> <call><name>powf</name><argument_list>(<argument><expr><literal type="number">1.f</literal> <operator>-</operator> <call><name>fabsf</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>fc_x</name></name></expr></argument>)</argument_list></call> <operator>*</operator> <call><name>powf</name><argument_list>(<argument><expr><operator>(</operator><name>y</name> <operator>+</operator> <literal type="number">1.f</literal><operator>)</operator> <operator>*</operator> <literal type="number">.5f</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>fc_y</name></name></expr></argument>)</argument_list></call> <operator>*</operator> <name>mag_total</name></expr>;</expr_stmt>

<expr_stmt><expr><name>l_mag</name> <operator>=</operator> <call><name>powf</name><argument_list>(<argument><expr><literal type="number">.5f</literal> <operator>*</operator> <operator>(</operator> <name>x</name> <operator>+</operator> <literal type="number">1.f</literal><operator>)</operator></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>fl_x</name></name></expr></argument>)</argument_list></call> <operator>*</operator> <call><name>powf</name><argument_list>(<argument><expr><operator>(</operator><name>y</name> <operator>+</operator> <literal type="number">1.f</literal><operator>)</operator> <operator>*</operator> <literal type="number">.5f</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>fl_y</name></name></expr></argument>)</argument_list></call> <operator>*</operator> <name>mag_total</name></expr>;</expr_stmt>

<expr_stmt><expr><name>r_mag</name> <operator>=</operator> <call><name>powf</name><argument_list>(<argument><expr><literal type="number">.5f</literal> <operator>*</operator> <operator>(</operator><operator>-</operator><name>x</name> <operator>+</operator> <literal type="number">1.f</literal><operator>)</operator></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>fr_x</name></name></expr></argument>)</argument_list></call> <operator>*</operator> <call><name>powf</name><argument_list>(<argument><expr><operator>(</operator><name>y</name> <operator>+</operator> <literal type="number">1.f</literal><operator>)</operator> <operator>*</operator> <literal type="number">.5f</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>fr_y</name></name></expr></argument>)</argument_list></call> <operator>*</operator> <name>mag_total</name></expr>;</expr_stmt>

<expr_stmt><expr><name>lb_mag</name> <operator>=</operator> <call><name>powf</name><argument_list>(<argument><expr><literal type="number">.5f</literal> <operator>*</operator> <operator>(</operator> <name>x</name> <operator>+</operator> <literal type="number">1.f</literal><operator>)</operator></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>bl_x</name></name></expr></argument>)</argument_list></call> <operator>*</operator> <call><name>powf</name><argument_list>(<argument><expr><literal type="number">1.f</literal> <operator>-</operator> <operator>(</operator><operator>(</operator><name>y</name> <operator>+</operator> <literal type="number">1.f</literal><operator>)</operator> <operator>*</operator> <literal type="number">.5f</literal><operator>)</operator></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>bl_y</name></name></expr></argument>)</argument_list></call> <operator>*</operator> <name>mag_total</name></expr>;</expr_stmt>

<expr_stmt><expr><name>rb_mag</name> <operator>=</operator> <call><name>powf</name><argument_list>(<argument><expr><literal type="number">.5f</literal> <operator>*</operator> <operator>(</operator><operator>-</operator><name>x</name> <operator>+</operator> <literal type="number">1.f</literal><operator>)</operator></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>br_x</name></name></expr></argument>)</argument_list></call> <operator>*</operator> <call><name>powf</name><argument_list>(<argument><expr><literal type="number">1.f</literal> <operator>-</operator> <operator>(</operator><operator>(</operator><name>y</name> <operator>+</operator> <literal type="number">1.f</literal><operator>)</operator> <operator>*</operator> <literal type="number">.5f</literal><operator>)</operator></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>br_y</name></name></expr></argument>)</argument_list></call> <operator>*</operator> <name>mag_total</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ls_mag</name> <operator>=</operator> <call><name>powf</name><argument_list>(<argument><expr><literal type="number">.5f</literal> <operator>*</operator> <operator>(</operator> <name>x</name> <operator>+</operator> <literal type="number">1.f</literal><operator>)</operator></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>sl_x</name></name></expr></argument>)</argument_list></call> <operator>*</operator> <call><name>powf</name><argument_list>(<argument><expr><literal type="number">1.f</literal> <operator>-</operator> <call><name>fabsf</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>sl_y</name></name></expr></argument>)</argument_list></call> <operator>*</operator> <name>mag_total</name></expr>;</expr_stmt>

<expr_stmt><expr><name>rs_mag</name> <operator>=</operator> <call><name>powf</name><argument_list>(<argument><expr><literal type="number">.5f</literal> <operator>*</operator> <operator>(</operator><operator>-</operator><name>x</name> <operator>+</operator> <literal type="number">1.f</literal><operator>)</operator></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>sr_x</name></name></expr></argument>)</argument_list></call> <operator>*</operator> <call><name>powf</name><argument_list>(<argument><expr><literal type="number">1.f</literal> <operator>-</operator> <call><name>fabsf</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>sr_y</name></name></expr></argument>)</argument_list></call> <operator>*</operator> <name>mag_total</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dstl</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>n</name></expr> ]</index></name> <operator>=</operator> <name>l_mag</name> <operator>*</operator> <call><name>cosf</name><argument_list>(<argument><expr><name>l_phase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dstl</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>n</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>l_mag</name> <operator>*</operator> <call><name>sinf</name><argument_list>(<argument><expr><name>l_phase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dstr</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>n</name></expr> ]</index></name> <operator>=</operator> <name>r_mag</name> <operator>*</operator> <call><name>cosf</name><argument_list>(<argument><expr><name>r_phase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dstr</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>n</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>r_mag</name> <operator>*</operator> <call><name>sinf</name><argument_list>(<argument><expr><name>r_phase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dstc</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>n</name></expr> ]</index></name> <operator>=</operator> <name>c_mag</name> <operator>*</operator> <call><name>cosf</name><argument_list>(<argument><expr><name>c_phase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dstc</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>n</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>c_mag</name> <operator>*</operator> <call><name>sinf</name><argument_list>(<argument><expr><name>c_phase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dstlfe</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>n</name></expr> ]</index></name> <operator>=</operator> <name>lfe_mag</name> <operator>*</operator> <call><name>cosf</name><argument_list>(<argument><expr><name>c_phase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dstlfe</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>n</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>lfe_mag</name> <operator>*</operator> <call><name>sinf</name><argument_list>(<argument><expr><name>c_phase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dstlb</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>n</name></expr> ]</index></name> <operator>=</operator> <name>lb_mag</name> <operator>*</operator> <call><name>cosf</name><argument_list>(<argument><expr><name>l_phase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dstlb</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>n</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>lb_mag</name> <operator>*</operator> <call><name>sinf</name><argument_list>(<argument><expr><name>l_phase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dstrb</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>n</name></expr> ]</index></name> <operator>=</operator> <name>rb_mag</name> <operator>*</operator> <call><name>cosf</name><argument_list>(<argument><expr><name>r_phase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dstrb</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>n</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>rb_mag</name> <operator>*</operator> <call><name>sinf</name><argument_list>(<argument><expr><name>r_phase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dstls</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>n</name></expr> ]</index></name> <operator>=</operator> <name>ls_mag</name> <operator>*</operator> <call><name>cosf</name><argument_list>(<argument><expr><name>l_phase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dstls</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>n</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>ls_mag</name> <operator>*</operator> <call><name>sinf</name><argument_list>(<argument><expr><name>l_phase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dstrs</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>n</name></expr> ]</index></name> <operator>=</operator> <name>rs_mag</name> <operator>*</operator> <call><name>cosf</name><argument_list>(<argument><expr><name>r_phase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dstrs</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>n</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>rs_mag</name> <operator>*</operator> <call><name>sinf</name><argument_list>(<argument><expr><name>r_phase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>upmix_7_1_5_0_side</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,

<parameter><decl><type><name>float</name></type> <name>c_re</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>c_im</name></decl></parameter>,

<parameter><decl><type><name>float</name></type> <name>mag_totall</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>mag_totalr</name></decl></parameter>,

<parameter><decl><type><name>float</name></type> <name>fl_phase</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>fr_phase</name></decl></parameter>,

<parameter><decl><type><name>float</name></type> <name>bl_phase</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>br_phase</name></decl></parameter>,

<parameter><decl><type><name>float</name></type> <name>sl_phase</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>sr_phase</name></decl></parameter>,

<parameter><decl><type><name>float</name></type> <name>xl</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>yl</name></decl></parameter>,

<parameter><decl><type><name>float</name></type> <name>xr</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>yr</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>fl_mag</name></decl>, <decl><type ref="prev"/><name>fr_mag</name></decl>, <decl><type ref="prev"/><name>ls_mag</name></decl>, <decl><type ref="prev"/><name>rs_mag</name></decl>, <decl><type ref="prev"/><name>lb_mag</name></decl>, <decl><type ref="prev"/><name>rb_mag</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>dstc</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>dstl</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>dstr</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>dstls</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>dstrs</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>dstlb</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>dstrb</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>dstlfe</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>lfe_mag</name></decl>, <decl><type ref="prev"/><name>c_phase</name></decl>, <decl><type ref="prev"/><name>mag_total</name> <init>= <expr><operator>(</operator><name>mag_totall</name> <operator>+</operator> <name>mag_totalr</name><operator>)</operator> <operator>*</operator> <literal type="number">0.5</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AudioSurroundContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>dstl</name> <operator>=</operator> <operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><name><name>s</name><operator>-&gt;</operator><name>output</name><operator>-&gt;</operator><name>extended_data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>dstr</name> <operator>=</operator> <operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><name><name>s</name><operator>-&gt;</operator><name>output</name><operator>-&gt;</operator><name>extended_data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>dstc</name> <operator>=</operator> <operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><name><name>s</name><operator>-&gt;</operator><name>output</name><operator>-&gt;</operator><name>extended_data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>dstlfe</name> <operator>=</operator> <operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><name><name>s</name><operator>-&gt;</operator><name>output</name><operator>-&gt;</operator><name>extended_data</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>dstlb</name> <operator>=</operator> <operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><name><name>s</name><operator>-&gt;</operator><name>output</name><operator>-&gt;</operator><name>extended_data</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>dstrb</name> <operator>=</operator> <operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><name><name>s</name><operator>-&gt;</operator><name>output</name><operator>-&gt;</operator><name>extended_data</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>dstls</name> <operator>=</operator> <operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><name><name>s</name><operator>-&gt;</operator><name>output</name><operator>-&gt;</operator><name>extended_data</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>dstrs</name> <operator>=</operator> <operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><name><name>s</name><operator>-&gt;</operator><name>output</name><operator>-&gt;</operator><name>extended_data</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>c_phase</name> <operator>=</operator> <call><name>atan2f</name><argument_list>(<argument><expr><name>c_im</name></expr></argument>, <argument><expr><name>c_re</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>get_lfe</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>output_lfe</name></name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>lowcut</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>highcut</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>lfe_mag</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mag_total</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>lfe_mode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>fl_mag</name> <operator>=</operator> <call><name>powf</name><argument_list>(<argument><expr><literal type="number">.5f</literal> <operator>*</operator> <operator>(</operator><name>xl</name> <operator>+</operator> <literal type="number">1.f</literal><operator>)</operator></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>fl_x</name></name></expr></argument>)</argument_list></call> <operator>*</operator> <call><name>powf</name><argument_list>(<argument><expr><operator>(</operator><name>yl</name> <operator>+</operator> <literal type="number">1.f</literal><operator>)</operator> <operator>*</operator> <literal type="number">.5f</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>fl_y</name></name></expr></argument>)</argument_list></call> <operator>*</operator> <name>mag_totall</name></expr>;</expr_stmt>

<expr_stmt><expr><name>fr_mag</name> <operator>=</operator> <call><name>powf</name><argument_list>(<argument><expr><literal type="number">.5f</literal> <operator>*</operator> <operator>(</operator><name>xr</name> <operator>+</operator> <literal type="number">1.f</literal><operator>)</operator></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>fr_x</name></name></expr></argument>)</argument_list></call> <operator>*</operator> <call><name>powf</name><argument_list>(<argument><expr><operator>(</operator><name>yr</name> <operator>+</operator> <literal type="number">1.f</literal><operator>)</operator> <operator>*</operator> <literal type="number">.5f</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>fr_y</name></name></expr></argument>)</argument_list></call> <operator>*</operator> <name>mag_totalr</name></expr>;</expr_stmt>

<expr_stmt><expr><name>lb_mag</name> <operator>=</operator> <call><name>powf</name><argument_list>(<argument><expr><literal type="number">.5f</literal> <operator>*</operator> <operator>(</operator><operator>-</operator><name>xl</name> <operator>+</operator> <literal type="number">1.f</literal><operator>)</operator></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>bl_x</name></name></expr></argument>)</argument_list></call> <operator>*</operator> <call><name>powf</name><argument_list>(<argument><expr><operator>(</operator><name>yl</name> <operator>+</operator> <literal type="number">1.f</literal><operator>)</operator> <operator>*</operator> <literal type="number">.5f</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>bl_y</name></name></expr></argument>)</argument_list></call> <operator>*</operator> <name>mag_totall</name></expr>;</expr_stmt>

<expr_stmt><expr><name>rb_mag</name> <operator>=</operator> <call><name>powf</name><argument_list>(<argument><expr><literal type="number">.5f</literal> <operator>*</operator> <operator>(</operator><operator>-</operator><name>xr</name> <operator>+</operator> <literal type="number">1.f</literal><operator>)</operator></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>br_x</name></name></expr></argument>)</argument_list></call> <operator>*</operator> <call><name>powf</name><argument_list>(<argument><expr><operator>(</operator><name>yr</name> <operator>+</operator> <literal type="number">1.f</literal><operator>)</operator> <operator>*</operator> <literal type="number">.5f</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>br_y</name></name></expr></argument>)</argument_list></call> <operator>*</operator> <name>mag_totalr</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ls_mag</name> <operator>=</operator> <call><name>powf</name><argument_list>(<argument><expr><literal type="number">1.f</literal> <operator>-</operator> <call><name>fabsf</name><argument_list>(<argument><expr><name>xl</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>sl_x</name></name></expr></argument>)</argument_list></call> <operator>*</operator> <call><name>powf</name><argument_list>(<argument><expr><operator>(</operator><name>yl</name> <operator>+</operator> <literal type="number">1.f</literal><operator>)</operator> <operator>*</operator> <literal type="number">.5f</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>sl_y</name></name></expr></argument>)</argument_list></call> <operator>*</operator> <name>mag_totall</name></expr>;</expr_stmt>

<expr_stmt><expr><name>rs_mag</name> <operator>=</operator> <call><name>powf</name><argument_list>(<argument><expr><literal type="number">1.f</literal> <operator>-</operator> <call><name>fabsf</name><argument_list>(<argument><expr><name>xr</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>sr_x</name></name></expr></argument>)</argument_list></call> <operator>*</operator> <call><name>powf</name><argument_list>(<argument><expr><operator>(</operator><name>yr</name> <operator>+</operator> <literal type="number">1.f</literal><operator>)</operator> <operator>*</operator> <literal type="number">.5f</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>sr_y</name></name></expr></argument>)</argument_list></call> <operator>*</operator> <name>mag_totalr</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dstl</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>n</name></expr> ]</index></name> <operator>=</operator> <name>fl_mag</name> <operator>*</operator> <call><name>cosf</name><argument_list>(<argument><expr><name>fl_phase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dstl</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>n</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>fl_mag</name> <operator>*</operator> <call><name>sinf</name><argument_list>(<argument><expr><name>fl_phase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dstr</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>n</name></expr> ]</index></name> <operator>=</operator> <name>fr_mag</name> <operator>*</operator> <call><name>cosf</name><argument_list>(<argument><expr><name>fr_phase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dstr</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>n</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>fr_mag</name> <operator>*</operator> <call><name>sinf</name><argument_list>(<argument><expr><name>fr_phase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dstc</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>n</name></expr> ]</index></name> <operator>=</operator> <name>c_re</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dstc</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>n</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>c_im</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dstlfe</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>n</name></expr> ]</index></name> <operator>=</operator> <name>lfe_mag</name> <operator>*</operator> <call><name>cosf</name><argument_list>(<argument><expr><name>c_phase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dstlfe</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>n</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>lfe_mag</name> <operator>*</operator> <call><name>sinf</name><argument_list>(<argument><expr><name>c_phase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dstlb</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>n</name></expr> ]</index></name> <operator>=</operator> <name>lb_mag</name> <operator>*</operator> <call><name>cosf</name><argument_list>(<argument><expr><name>bl_phase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dstlb</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>n</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>lb_mag</name> <operator>*</operator> <call><name>sinf</name><argument_list>(<argument><expr><name>bl_phase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dstrb</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>n</name></expr> ]</index></name> <operator>=</operator> <name>rb_mag</name> <operator>*</operator> <call><name>cosf</name><argument_list>(<argument><expr><name>br_phase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dstrb</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>n</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>rb_mag</name> <operator>*</operator> <call><name>sinf</name><argument_list>(<argument><expr><name>br_phase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dstls</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>n</name></expr> ]</index></name> <operator>=</operator> <name>ls_mag</name> <operator>*</operator> <call><name>cosf</name><argument_list>(<argument><expr><name>sl_phase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dstls</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>n</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>ls_mag</name> <operator>*</operator> <call><name>sinf</name><argument_list>(<argument><expr><name>sl_phase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dstrs</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>n</name></expr> ]</index></name> <operator>=</operator> <name>rs_mag</name> <operator>*</operator> <call><name>cosf</name><argument_list>(<argument><expr><name>sr_phase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dstrs</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>n</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>rs_mag</name> <operator>*</operator> <call><name>sinf</name><argument_list>(<argument><expr><name>sr_phase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>upmix_7_1_5_1</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,

<parameter><decl><type><name>float</name></type> <name>c_re</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>c_im</name></decl></parameter>,

<parameter><decl><type><name>float</name></type> <name>lfe_re</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>lfe_im</name></decl></parameter>,

<parameter><decl><type><name>float</name></type> <name>mag_totall</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>mag_totalr</name></decl></parameter>,

<parameter><decl><type><name>float</name></type> <name>fl_phase</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>fr_phase</name></decl></parameter>,

<parameter><decl><type><name>float</name></type> <name>bl_phase</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>br_phase</name></decl></parameter>,

<parameter><decl><type><name>float</name></type> <name>sl_phase</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>sr_phase</name></decl></parameter>,

<parameter><decl><type><name>float</name></type> <name>xl</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>yl</name></decl></parameter>,

<parameter><decl><type><name>float</name></type> <name>xr</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>yr</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>fl_mag</name></decl>, <decl><type ref="prev"/><name>fr_mag</name></decl>, <decl><type ref="prev"/><name>ls_mag</name></decl>, <decl><type ref="prev"/><name>rs_mag</name></decl>, <decl><type ref="prev"/><name>lb_mag</name></decl>, <decl><type ref="prev"/><name>rb_mag</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>dstc</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>dstl</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>dstr</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>dstls</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>dstrs</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>dstlb</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>dstrb</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>dstlfe</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AudioSurroundContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>dstl</name> <operator>=</operator> <operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><name><name>s</name><operator>-&gt;</operator><name>output</name><operator>-&gt;</operator><name>extended_data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>dstr</name> <operator>=</operator> <operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><name><name>s</name><operator>-&gt;</operator><name>output</name><operator>-&gt;</operator><name>extended_data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>dstc</name> <operator>=</operator> <operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><name><name>s</name><operator>-&gt;</operator><name>output</name><operator>-&gt;</operator><name>extended_data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>dstlfe</name> <operator>=</operator> <operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><name><name>s</name><operator>-&gt;</operator><name>output</name><operator>-&gt;</operator><name>extended_data</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>dstlb</name> <operator>=</operator> <operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><name><name>s</name><operator>-&gt;</operator><name>output</name><operator>-&gt;</operator><name>extended_data</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>dstrb</name> <operator>=</operator> <operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><name><name>s</name><operator>-&gt;</operator><name>output</name><operator>-&gt;</operator><name>extended_data</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>dstls</name> <operator>=</operator> <operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><name><name>s</name><operator>-&gt;</operator><name>output</name><operator>-&gt;</operator><name>extended_data</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>dstrs</name> <operator>=</operator> <operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><name><name>s</name><operator>-&gt;</operator><name>output</name><operator>-&gt;</operator><name>extended_data</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>fl_mag</name> <operator>=</operator> <call><name>powf</name><argument_list>(<argument><expr><literal type="number">.5f</literal> <operator>*</operator> <operator>(</operator><name>xl</name> <operator>+</operator> <literal type="number">1.f</literal><operator>)</operator></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>fl_x</name></name></expr></argument>)</argument_list></call> <operator>*</operator> <call><name>powf</name><argument_list>(<argument><expr><operator>(</operator><name>yl</name> <operator>+</operator> <literal type="number">1.f</literal><operator>)</operator> <operator>*</operator> <literal type="number">.5f</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>fl_y</name></name></expr></argument>)</argument_list></call> <operator>*</operator> <name>mag_totall</name></expr>;</expr_stmt>

<expr_stmt><expr><name>fr_mag</name> <operator>=</operator> <call><name>powf</name><argument_list>(<argument><expr><literal type="number">.5f</literal> <operator>*</operator> <operator>(</operator><name>xr</name> <operator>+</operator> <literal type="number">1.f</literal><operator>)</operator></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>fr_x</name></name></expr></argument>)</argument_list></call> <operator>*</operator> <call><name>powf</name><argument_list>(<argument><expr><operator>(</operator><name>yr</name> <operator>+</operator> <literal type="number">1.f</literal><operator>)</operator> <operator>*</operator> <literal type="number">.5f</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>fr_y</name></name></expr></argument>)</argument_list></call> <operator>*</operator> <name>mag_totalr</name></expr>;</expr_stmt>

<expr_stmt><expr><name>lb_mag</name> <operator>=</operator> <call><name>powf</name><argument_list>(<argument><expr><literal type="number">.5f</literal> <operator>*</operator> <operator>(</operator><operator>-</operator><name>xl</name> <operator>+</operator> <literal type="number">1.f</literal><operator>)</operator></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>bl_x</name></name></expr></argument>)</argument_list></call> <operator>*</operator> <call><name>powf</name><argument_list>(<argument><expr><operator>(</operator><name>yl</name> <operator>+</operator> <literal type="number">1.f</literal><operator>)</operator> <operator>*</operator> <literal type="number">.5f</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>bl_y</name></name></expr></argument>)</argument_list></call> <operator>*</operator> <name>mag_totall</name></expr>;</expr_stmt>

<expr_stmt><expr><name>rb_mag</name> <operator>=</operator> <call><name>powf</name><argument_list>(<argument><expr><literal type="number">.5f</literal> <operator>*</operator> <operator>(</operator><operator>-</operator><name>xr</name> <operator>+</operator> <literal type="number">1.f</literal><operator>)</operator></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>br_x</name></name></expr></argument>)</argument_list></call> <operator>*</operator> <call><name>powf</name><argument_list>(<argument><expr><operator>(</operator><name>yr</name> <operator>+</operator> <literal type="number">1.f</literal><operator>)</operator> <operator>*</operator> <literal type="number">.5f</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>br_y</name></name></expr></argument>)</argument_list></call> <operator>*</operator> <name>mag_totalr</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ls_mag</name> <operator>=</operator> <call><name>powf</name><argument_list>(<argument><expr><literal type="number">1.f</literal> <operator>-</operator> <call><name>fabsf</name><argument_list>(<argument><expr><name>xl</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>sl_x</name></name></expr></argument>)</argument_list></call> <operator>*</operator> <call><name>powf</name><argument_list>(<argument><expr><operator>(</operator><name>yl</name> <operator>+</operator> <literal type="number">1.f</literal><operator>)</operator> <operator>*</operator> <literal type="number">.5f</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>sl_y</name></name></expr></argument>)</argument_list></call> <operator>*</operator> <name>mag_totall</name></expr>;</expr_stmt>

<expr_stmt><expr><name>rs_mag</name> <operator>=</operator> <call><name>powf</name><argument_list>(<argument><expr><literal type="number">1.f</literal> <operator>-</operator> <call><name>fabsf</name><argument_list>(<argument><expr><name>xr</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>sr_x</name></name></expr></argument>)</argument_list></call> <operator>*</operator> <call><name>powf</name><argument_list>(<argument><expr><operator>(</operator><name>yr</name> <operator>+</operator> <literal type="number">1.f</literal><operator>)</operator> <operator>*</operator> <literal type="number">.5f</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>sr_y</name></name></expr></argument>)</argument_list></call> <operator>*</operator> <name>mag_totalr</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dstl</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>n</name></expr> ]</index></name> <operator>=</operator> <name>fl_mag</name> <operator>*</operator> <call><name>cosf</name><argument_list>(<argument><expr><name>fl_phase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dstl</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>n</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>fl_mag</name> <operator>*</operator> <call><name>sinf</name><argument_list>(<argument><expr><name>fl_phase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dstr</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>n</name></expr> ]</index></name> <operator>=</operator> <name>fr_mag</name> <operator>*</operator> <call><name>cosf</name><argument_list>(<argument><expr><name>fr_phase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dstr</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>n</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>fr_mag</name> <operator>*</operator> <call><name>sinf</name><argument_list>(<argument><expr><name>fr_phase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dstc</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>n</name></expr> ]</index></name> <operator>=</operator> <name>c_re</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dstc</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>n</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>c_im</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dstlfe</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>n</name></expr> ]</index></name> <operator>=</operator> <name>lfe_re</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dstlfe</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>n</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>lfe_im</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dstlb</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>n</name></expr> ]</index></name> <operator>=</operator> <name>lb_mag</name> <operator>*</operator> <call><name>cosf</name><argument_list>(<argument><expr><name>bl_phase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dstlb</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>n</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>lb_mag</name> <operator>*</operator> <call><name>sinf</name><argument_list>(<argument><expr><name>bl_phase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dstrb</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>n</name></expr> ]</index></name> <operator>=</operator> <name>rb_mag</name> <operator>*</operator> <call><name>cosf</name><argument_list>(<argument><expr><name>br_phase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dstrb</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>n</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>rb_mag</name> <operator>*</operator> <call><name>sinf</name><argument_list>(<argument><expr><name>br_phase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dstls</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>n</name></expr> ]</index></name> <operator>=</operator> <name>ls_mag</name> <operator>*</operator> <call><name>cosf</name><argument_list>(<argument><expr><name>sl_phase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dstls</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>n</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>ls_mag</name> <operator>*</operator> <call><name>sinf</name><argument_list>(<argument><expr><name>sl_phase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dstrs</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>n</name></expr> ]</index></name> <operator>=</operator> <name>rs_mag</name> <operator>*</operator> <call><name>cosf</name><argument_list>(<argument><expr><name>sr_phase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dstrs</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>n</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>rs_mag</name> <operator>*</operator> <call><name>sinf</name><argument_list>(<argument><expr><name>sr_phase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>filter_stereo</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AudioSurroundContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>srcl</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>srcr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>

<expr_stmt><expr><name>srcl</name> <operator>=</operator> <operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><name><name>s</name><operator>-&gt;</operator><name>input</name><operator>-&gt;</operator><name>extended_data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>srcr</name> <operator>=</operator> <operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><name><name>s</name><operator>-&gt;</operator><name>input</name><operator>-&gt;</operator><name>extended_data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>buf_size</name></name></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>l_re</name> <init>= <expr><name><name>srcl</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>n</name></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>r_re</name> <init>= <expr><name><name>srcr</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>n</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>l_im</name> <init>= <expr><name><name>srcl</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>n</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>r_im</name> <init>= <expr><name><name>srcr</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>n</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>c_phase</name> <init>= <expr><call><name>atan2f</name><argument_list>(<argument><expr><name>l_im</name> <operator>+</operator> <name>r_im</name></expr></argument>, <argument><expr><name>l_re</name> <operator>+</operator> <name>r_re</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>l_mag</name> <init>= <expr><call><name>hypotf</name><argument_list>(<argument><expr><name>l_re</name></expr></argument>, <argument><expr><name>l_im</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>r_mag</name> <init>= <expr><call><name>hypotf</name><argument_list>(<argument><expr><name>r_re</name></expr></argument>, <argument><expr><name>r_im</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>l_phase</name> <init>= <expr><call><name>atan2f</name><argument_list>(<argument><expr><name>l_im</name></expr></argument>, <argument><expr><name>l_re</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>r_phase</name> <init>= <expr><call><name>atan2f</name><argument_list>(<argument><expr><name>r_im</name></expr></argument>, <argument><expr><name>r_re</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>phase_dif</name> <init>= <expr><call><name>fabsf</name><argument_list>(<argument><expr><name>l_phase</name> <operator>-</operator> <name>r_phase</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>mag_sum</name> <init>= <expr><name>l_mag</name> <operator>+</operator> <name>r_mag</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>mag_dif</name> <init>= <expr><ternary><condition><expr><name>mag_sum</name> <operator>&lt;</operator> <literal type="number">0.000001</literal></expr> ?</condition><then> <expr><call><name>FFDIFFSIGN</name><argument_list>(<argument><expr><name>l_mag</name></expr></argument>, <argument><expr><name>r_mag</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><operator>(</operator><name>l_mag</name> <operator>-</operator> <name>r_mag</name><operator>)</operator> <operator>/</operator> <name>mag_sum</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>mag_total</name> <init>= <expr><call><name>hypotf</name><argument_list>(<argument><expr><name>l_mag</name></expr></argument>, <argument><expr><name>r_mag</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>phase_dif</name> <operator>&gt;</operator> <name>M_PI</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>phase_dif</name> <operator>=</operator> <literal type="number">2</literal> <operator>*</operator> <name>M_PI</name> <operator>-</operator> <name>phase_dif</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>stereo_position</name><argument_list>(<argument><expr><name>mag_dif</name></expr></argument>, <argument><expr><name>phase_dif</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>x</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>stereo_transform</name><argument_list>(<argument><expr><operator>&amp;</operator><name>x</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>y</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>angle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>upmix_stereo</name></name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>l_phase</name></expr></argument>, <argument><expr><name>r_phase</name></expr></argument>, <argument><expr><name>c_phase</name></expr></argument>, <argument><expr><name>mag_total</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>filter_surround</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AudioSurroundContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>srcl</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>srcr</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>srcc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>

<expr_stmt><expr><name>srcl</name> <operator>=</operator> <operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><name><name>s</name><operator>-&gt;</operator><name>input</name><operator>-&gt;</operator><name>extended_data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>srcr</name> <operator>=</operator> <operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><name><name>s</name><operator>-&gt;</operator><name>input</name><operator>-&gt;</operator><name>extended_data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>srcc</name> <operator>=</operator> <operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><name><name>s</name><operator>-&gt;</operator><name>input</name><operator>-&gt;</operator><name>extended_data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>buf_size</name></name></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>l_re</name> <init>= <expr><name><name>srcl</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>n</name></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>r_re</name> <init>= <expr><name><name>srcr</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>n</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>l_im</name> <init>= <expr><name><name>srcl</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>n</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>r_im</name> <init>= <expr><name><name>srcr</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>n</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>c_re</name> <init>= <expr><name><name>srcc</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>n</name></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>c_im</name> <init>= <expr><name><name>srcc</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>n</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>c_mag</name> <init>= <expr><call><name>hypotf</name><argument_list>(<argument><expr><name>c_re</name></expr></argument>, <argument><expr><name>c_im</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>c_phase</name> <init>= <expr><call><name>atan2f</name><argument_list>(<argument><expr><name>c_im</name></expr></argument>, <argument><expr><name>c_re</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>l_mag</name> <init>= <expr><call><name>hypotf</name><argument_list>(<argument><expr><name>l_re</name></expr></argument>, <argument><expr><name>l_im</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>r_mag</name> <init>= <expr><call><name>hypotf</name><argument_list>(<argument><expr><name>r_re</name></expr></argument>, <argument><expr><name>r_im</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>l_phase</name> <init>= <expr><call><name>atan2f</name><argument_list>(<argument><expr><name>l_im</name></expr></argument>, <argument><expr><name>l_re</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>r_phase</name> <init>= <expr><call><name>atan2f</name><argument_list>(<argument><expr><name>r_im</name></expr></argument>, <argument><expr><name>r_re</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>phase_dif</name> <init>= <expr><call><name>fabsf</name><argument_list>(<argument><expr><name>l_phase</name> <operator>-</operator> <name>r_phase</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>mag_sum</name> <init>= <expr><name>l_mag</name> <operator>+</operator> <name>r_mag</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>mag_dif</name> <init>= <expr><ternary><condition><expr><name>mag_sum</name> <operator>&lt;</operator> <literal type="number">0.000001</literal></expr> ?</condition><then> <expr><call><name>FFDIFFSIGN</name><argument_list>(<argument><expr><name>l_mag</name></expr></argument>, <argument><expr><name>r_mag</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><operator>(</operator><name>l_mag</name> <operator>-</operator> <name>r_mag</name><operator>)</operator> <operator>/</operator> <name>mag_sum</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>mag_total</name> <init>= <expr><call><name>hypotf</name><argument_list>(<argument><expr><name>l_mag</name></expr></argument>, <argument><expr><name>r_mag</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>phase_dif</name> <operator>&gt;</operator> <name>M_PI</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>phase_dif</name> <operator>=</operator> <literal type="number">2</literal> <operator>*</operator> <name>M_PI</name> <operator>-</operator> <name>phase_dif</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>stereo_position</name><argument_list>(<argument><expr><name>mag_dif</name></expr></argument>, <argument><expr><name>phase_dif</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>x</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>stereo_transform</name><argument_list>(<argument><expr><operator>&amp;</operator><name>x</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>y</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>angle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>upmix_3_0</name></name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>l_phase</name></expr></argument>, <argument><expr><name>r_phase</name></expr></argument>, <argument><expr><name>c_phase</name></expr></argument>, <argument><expr><name>c_mag</name></expr></argument>, <argument><expr><name>mag_total</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>filter_2_1</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AudioSurroundContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>srcl</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>srcr</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>srclfe</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>

<expr_stmt><expr><name>srcl</name> <operator>=</operator> <operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><name><name>s</name><operator>-&gt;</operator><name>input</name><operator>-&gt;</operator><name>extended_data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>srcr</name> <operator>=</operator> <operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><name><name>s</name><operator>-&gt;</operator><name>input</name><operator>-&gt;</operator><name>extended_data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>srclfe</name> <operator>=</operator> <operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><name><name>s</name><operator>-&gt;</operator><name>input</name><operator>-&gt;</operator><name>extended_data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>buf_size</name></name></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>l_re</name> <init>= <expr><name><name>srcl</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>n</name></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>r_re</name> <init>= <expr><name><name>srcr</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>n</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>l_im</name> <init>= <expr><name><name>srcl</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>n</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>r_im</name> <init>= <expr><name><name>srcr</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>n</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>lfe_re</name> <init>= <expr><name><name>srclfe</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>n</name></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>lfe_im</name> <init>= <expr><name><name>srclfe</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>n</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>c_phase</name> <init>= <expr><call><name>atan2f</name><argument_list>(<argument><expr><name>l_im</name> <operator>+</operator> <name>r_im</name></expr></argument>, <argument><expr><name>l_re</name> <operator>+</operator> <name>r_re</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>l_mag</name> <init>= <expr><call><name>hypotf</name><argument_list>(<argument><expr><name>l_re</name></expr></argument>, <argument><expr><name>l_im</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>r_mag</name> <init>= <expr><call><name>hypotf</name><argument_list>(<argument><expr><name>r_re</name></expr></argument>, <argument><expr><name>r_im</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>l_phase</name> <init>= <expr><call><name>atan2f</name><argument_list>(<argument><expr><name>l_im</name></expr></argument>, <argument><expr><name>l_re</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>r_phase</name> <init>= <expr><call><name>atan2f</name><argument_list>(<argument><expr><name>r_im</name></expr></argument>, <argument><expr><name>r_re</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>phase_dif</name> <init>= <expr><call><name>fabsf</name><argument_list>(<argument><expr><name>l_phase</name> <operator>-</operator> <name>r_phase</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>mag_sum</name> <init>= <expr><name>l_mag</name> <operator>+</operator> <name>r_mag</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>mag_dif</name> <init>= <expr><ternary><condition><expr><name>mag_sum</name> <operator>&lt;</operator> <literal type="number">0.000001</literal></expr> ?</condition><then> <expr><call><name>FFDIFFSIGN</name><argument_list>(<argument><expr><name>l_mag</name></expr></argument>, <argument><expr><name>r_mag</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><operator>(</operator><name>l_mag</name> <operator>-</operator> <name>r_mag</name><operator>)</operator> <operator>/</operator> <name>mag_sum</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>mag_total</name> <init>= <expr><call><name>hypotf</name><argument_list>(<argument><expr><name>l_mag</name></expr></argument>, <argument><expr><name>r_mag</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>phase_dif</name> <operator>&gt;</operator> <name>M_PI</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>phase_dif</name> <operator>=</operator> <literal type="number">2</literal> <operator>*</operator> <name>M_PI</name> <operator>-</operator> <name>phase_dif</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>stereo_position</name><argument_list>(<argument><expr><name>mag_dif</name></expr></argument>, <argument><expr><name>phase_dif</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>x</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>stereo_transform</name><argument_list>(<argument><expr><operator>&amp;</operator><name>x</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>y</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>angle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>upmix_2_1</name></name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>l_phase</name></expr></argument>, <argument><expr><name>r_phase</name></expr></argument>, <argument><expr><name>c_phase</name></expr></argument>, <argument><expr><name>mag_total</name></expr></argument>, <argument><expr><name>lfe_re</name></expr></argument>, <argument><expr><name>lfe_im</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>filter_5_0_side</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AudioSurroundContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>srcl</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>srcr</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>srcc</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>srcsl</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>srcsr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>

<expr_stmt><expr><name>srcl</name> <operator>=</operator> <operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><name><name>s</name><operator>-&gt;</operator><name>input</name><operator>-&gt;</operator><name>extended_data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>srcr</name> <operator>=</operator> <operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><name><name>s</name><operator>-&gt;</operator><name>input</name><operator>-&gt;</operator><name>extended_data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>srcc</name> <operator>=</operator> <operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><name><name>s</name><operator>-&gt;</operator><name>input</name><operator>-&gt;</operator><name>extended_data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>srcsl</name> <operator>=</operator> <operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><name><name>s</name><operator>-&gt;</operator><name>input</name><operator>-&gt;</operator><name>extended_data</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>srcsr</name> <operator>=</operator> <operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><name><name>s</name><operator>-&gt;</operator><name>input</name><operator>-&gt;</operator><name>extended_data</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>buf_size</name></name></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>fl_re</name> <init>= <expr><name><name>srcl</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>n</name></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>fr_re</name> <init>= <expr><name><name>srcr</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>n</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>fl_im</name> <init>= <expr><name><name>srcl</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>n</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>fr_im</name> <init>= <expr><name><name>srcr</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>n</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>c_re</name> <init>= <expr><name><name>srcc</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>n</name></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>c_im</name> <init>= <expr><name><name>srcc</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>n</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>sl_re</name> <init>= <expr><name><name>srcsl</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>n</name></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>sl_im</name> <init>= <expr><name><name>srcsl</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>n</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>sr_re</name> <init>= <expr><name><name>srcsr</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>n</name></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>sr_im</name> <init>= <expr><name><name>srcsr</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>n</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>fl_mag</name> <init>= <expr><call><name>hypotf</name><argument_list>(<argument><expr><name>fl_re</name></expr></argument>, <argument><expr><name>fl_im</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>fr_mag</name> <init>= <expr><call><name>hypotf</name><argument_list>(<argument><expr><name>fr_re</name></expr></argument>, <argument><expr><name>fr_im</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>fl_phase</name> <init>= <expr><call><name>atan2f</name><argument_list>(<argument><expr><name>fl_im</name></expr></argument>, <argument><expr><name>fl_re</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>fr_phase</name> <init>= <expr><call><name>atan2f</name><argument_list>(<argument><expr><name>fr_im</name></expr></argument>, <argument><expr><name>fr_re</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>sl_mag</name> <init>= <expr><call><name>hypotf</name><argument_list>(<argument><expr><name>sl_re</name></expr></argument>, <argument><expr><name>sl_im</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>sr_mag</name> <init>= <expr><call><name>hypotf</name><argument_list>(<argument><expr><name>sr_re</name></expr></argument>, <argument><expr><name>sr_im</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>sl_phase</name> <init>= <expr><call><name>atan2f</name><argument_list>(<argument><expr><name>sl_im</name></expr></argument>, <argument><expr><name>sl_re</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>sr_phase</name> <init>= <expr><call><name>atan2f</name><argument_list>(<argument><expr><name>sr_im</name></expr></argument>, <argument><expr><name>sr_re</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>phase_difl</name> <init>= <expr><call><name>fabsf</name><argument_list>(<argument><expr><name>fl_phase</name> <operator>-</operator> <name>sl_phase</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>phase_difr</name> <init>= <expr><call><name>fabsf</name><argument_list>(<argument><expr><name>fr_phase</name> <operator>-</operator> <name>sr_phase</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>magl_sum</name> <init>= <expr><name>fl_mag</name> <operator>+</operator> <name>sl_mag</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>magr_sum</name> <init>= <expr><name>fr_mag</name> <operator>+</operator> <name>sr_mag</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>mag_difl</name> <init>= <expr><ternary><condition><expr><name>magl_sum</name> <operator>&lt;</operator> <literal type="number">0.000001</literal></expr> ?</condition><then> <expr><call><name>FFDIFFSIGN</name><argument_list>(<argument><expr><name>fl_mag</name></expr></argument>, <argument><expr><name>sl_mag</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><operator>(</operator><name>fl_mag</name> <operator>-</operator> <name>sl_mag</name><operator>)</operator> <operator>/</operator> <name>magl_sum</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>mag_difr</name> <init>= <expr><ternary><condition><expr><name>magr_sum</name> <operator>&lt;</operator> <literal type="number">0.000001</literal></expr> ?</condition><then> <expr><call><name>FFDIFFSIGN</name><argument_list>(<argument><expr><name>fr_mag</name></expr></argument>, <argument><expr><name>sr_mag</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><operator>(</operator><name>fr_mag</name> <operator>-</operator> <name>sr_mag</name><operator>)</operator> <operator>/</operator> <name>magr_sum</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>mag_totall</name> <init>= <expr><call><name>hypotf</name><argument_list>(<argument><expr><name>fl_mag</name></expr></argument>, <argument><expr><name>sl_mag</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>mag_totalr</name> <init>= <expr><call><name>hypotf</name><argument_list>(<argument><expr><name>fr_mag</name></expr></argument>, <argument><expr><name>sr_mag</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>bl_phase</name> <init>= <expr><call><name>atan2f</name><argument_list>(<argument><expr><name>fl_im</name> <operator>+</operator> <name>sl_im</name></expr></argument>, <argument><expr><name>fl_re</name> <operator>+</operator> <name>sl_re</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>br_phase</name> <init>= <expr><call><name>atan2f</name><argument_list>(<argument><expr><name>fr_im</name> <operator>+</operator> <name>sr_im</name></expr></argument>, <argument><expr><name>fr_re</name> <operator>+</operator> <name>sr_re</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>xl</name></decl>, <decl><type ref="prev"/><name>yl</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>xr</name></decl>, <decl><type ref="prev"/><name>yr</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>phase_difl</name> <operator>&gt;</operator> <name>M_PI</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>phase_difl</name> <operator>=</operator> <literal type="number">2</literal> <operator>*</operator> <name>M_PI</name> <operator>-</operator> <name>phase_difl</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>phase_difr</name> <operator>&gt;</operator> <name>M_PI</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>phase_difr</name> <operator>=</operator> <literal type="number">2</literal> <operator>*</operator> <name>M_PI</name> <operator>-</operator> <name>phase_difr</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>stereo_position</name><argument_list>(<argument><expr><name>mag_difl</name></expr></argument>, <argument><expr><name>phase_difl</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>xl</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>yl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>stereo_position</name><argument_list>(<argument><expr><name>mag_difr</name></expr></argument>, <argument><expr><name>phase_difr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>xr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>yr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>upmix_5_0</name></name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>c_re</name></expr></argument>, <argument><expr><name>c_im</name></expr></argument>,

<argument><expr><name>mag_totall</name></expr></argument>, <argument><expr><name>mag_totalr</name></expr></argument>,

<argument><expr><name>fl_phase</name></expr></argument>, <argument><expr><name>fr_phase</name></expr></argument>,

<argument><expr><name>bl_phase</name></expr></argument>, <argument><expr><name>br_phase</name></expr></argument>,

<argument><expr><name>sl_phase</name></expr></argument>, <argument><expr><name>sr_phase</name></expr></argument>,

<argument><expr><name>xl</name></expr></argument>, <argument><expr><name>yl</name></expr></argument>, <argument><expr><name>xr</name></expr></argument>, <argument><expr><name>yr</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>filter_5_1_side</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AudioSurroundContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>srcl</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>srcr</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>srcc</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>srclfe</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>srcsl</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>srcsr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>

<expr_stmt><expr><name>srcl</name> <operator>=</operator> <operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><name><name>s</name><operator>-&gt;</operator><name>input</name><operator>-&gt;</operator><name>extended_data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>srcr</name> <operator>=</operator> <operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><name><name>s</name><operator>-&gt;</operator><name>input</name><operator>-&gt;</operator><name>extended_data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>srcc</name> <operator>=</operator> <operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><name><name>s</name><operator>-&gt;</operator><name>input</name><operator>-&gt;</operator><name>extended_data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>srclfe</name> <operator>=</operator> <operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><name><name>s</name><operator>-&gt;</operator><name>input</name><operator>-&gt;</operator><name>extended_data</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>srcsl</name> <operator>=</operator> <operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><name><name>s</name><operator>-&gt;</operator><name>input</name><operator>-&gt;</operator><name>extended_data</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>srcsr</name> <operator>=</operator> <operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><name><name>s</name><operator>-&gt;</operator><name>input</name><operator>-&gt;</operator><name>extended_data</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>buf_size</name></name></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>fl_re</name> <init>= <expr><name><name>srcl</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>n</name></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>fr_re</name> <init>= <expr><name><name>srcr</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>n</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>fl_im</name> <init>= <expr><name><name>srcl</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>n</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>fr_im</name> <init>= <expr><name><name>srcr</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>n</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>c_re</name> <init>= <expr><name><name>srcc</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>n</name></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>c_im</name> <init>= <expr><name><name>srcc</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>n</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>lfe_re</name> <init>= <expr><name><name>srclfe</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>n</name></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>lfe_im</name> <init>= <expr><name><name>srclfe</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>n</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>sl_re</name> <init>= <expr><name><name>srcsl</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>n</name></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>sl_im</name> <init>= <expr><name><name>srcsl</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>n</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>sr_re</name> <init>= <expr><name><name>srcsr</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>n</name></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>sr_im</name> <init>= <expr><name><name>srcsr</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>n</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>fl_mag</name> <init>= <expr><call><name>hypotf</name><argument_list>(<argument><expr><name>fl_re</name></expr></argument>, <argument><expr><name>fl_im</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>fr_mag</name> <init>= <expr><call><name>hypotf</name><argument_list>(<argument><expr><name>fr_re</name></expr></argument>, <argument><expr><name>fr_im</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>fl_phase</name> <init>= <expr><call><name>atan2f</name><argument_list>(<argument><expr><name>fl_im</name></expr></argument>, <argument><expr><name>fl_re</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>fr_phase</name> <init>= <expr><call><name>atan2f</name><argument_list>(<argument><expr><name>fr_im</name></expr></argument>, <argument><expr><name>fr_re</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>sl_mag</name> <init>= <expr><call><name>hypotf</name><argument_list>(<argument><expr><name>sl_re</name></expr></argument>, <argument><expr><name>sl_im</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>sr_mag</name> <init>= <expr><call><name>hypotf</name><argument_list>(<argument><expr><name>sr_re</name></expr></argument>, <argument><expr><name>sr_im</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>sl_phase</name> <init>= <expr><call><name>atan2f</name><argument_list>(<argument><expr><name>sl_im</name></expr></argument>, <argument><expr><name>sl_re</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>sr_phase</name> <init>= <expr><call><name>atan2f</name><argument_list>(<argument><expr><name>sr_im</name></expr></argument>, <argument><expr><name>sr_re</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>phase_difl</name> <init>= <expr><call><name>fabsf</name><argument_list>(<argument><expr><name>fl_phase</name> <operator>-</operator> <name>sl_phase</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>phase_difr</name> <init>= <expr><call><name>fabsf</name><argument_list>(<argument><expr><name>fr_phase</name> <operator>-</operator> <name>sr_phase</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>magl_sum</name> <init>= <expr><name>fl_mag</name> <operator>+</operator> <name>sl_mag</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>magr_sum</name> <init>= <expr><name>fr_mag</name> <operator>+</operator> <name>sr_mag</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>mag_difl</name> <init>= <expr><ternary><condition><expr><name>magl_sum</name> <operator>&lt;</operator> <literal type="number">0.000001</literal></expr> ?</condition><then> <expr><call><name>FFDIFFSIGN</name><argument_list>(<argument><expr><name>fl_mag</name></expr></argument>, <argument><expr><name>sl_mag</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><operator>(</operator><name>fl_mag</name> <operator>-</operator> <name>sl_mag</name><operator>)</operator> <operator>/</operator> <name>magl_sum</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>mag_difr</name> <init>= <expr><ternary><condition><expr><name>magr_sum</name> <operator>&lt;</operator> <literal type="number">0.000001</literal></expr> ?</condition><then> <expr><call><name>FFDIFFSIGN</name><argument_list>(<argument><expr><name>fr_mag</name></expr></argument>, <argument><expr><name>sr_mag</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><operator>(</operator><name>fr_mag</name> <operator>-</operator> <name>sr_mag</name><operator>)</operator> <operator>/</operator> <name>magr_sum</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>mag_totall</name> <init>= <expr><call><name>hypotf</name><argument_list>(<argument><expr><name>fl_mag</name></expr></argument>, <argument><expr><name>sl_mag</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>mag_totalr</name> <init>= <expr><call><name>hypotf</name><argument_list>(<argument><expr><name>fr_mag</name></expr></argument>, <argument><expr><name>sr_mag</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>bl_phase</name> <init>= <expr><call><name>atan2f</name><argument_list>(<argument><expr><name>fl_im</name> <operator>+</operator> <name>sl_im</name></expr></argument>, <argument><expr><name>fl_re</name> <operator>+</operator> <name>sl_re</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>br_phase</name> <init>= <expr><call><name>atan2f</name><argument_list>(<argument><expr><name>fr_im</name> <operator>+</operator> <name>sr_im</name></expr></argument>, <argument><expr><name>fr_re</name> <operator>+</operator> <name>sr_re</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>xl</name></decl>, <decl><type ref="prev"/><name>yl</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>xr</name></decl>, <decl><type ref="prev"/><name>yr</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>phase_difl</name> <operator>&gt;</operator> <name>M_PI</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>phase_difl</name> <operator>=</operator> <literal type="number">2</literal> <operator>*</operator> <name>M_PI</name> <operator>-</operator> <name>phase_difl</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>phase_difr</name> <operator>&gt;</operator> <name>M_PI</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>phase_difr</name> <operator>=</operator> <literal type="number">2</literal> <operator>*</operator> <name>M_PI</name> <operator>-</operator> <name>phase_difr</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>stereo_position</name><argument_list>(<argument><expr><name>mag_difl</name></expr></argument>, <argument><expr><name>phase_difl</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>xl</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>yl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>stereo_position</name><argument_list>(<argument><expr><name>mag_difr</name></expr></argument>, <argument><expr><name>phase_difr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>xr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>yr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>upmix_5_1</name></name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>c_re</name></expr></argument>, <argument><expr><name>c_im</name></expr></argument>, <argument><expr><name>lfe_re</name></expr></argument>, <argument><expr><name>lfe_im</name></expr></argument>,

<argument><expr><name>mag_totall</name></expr></argument>, <argument><expr><name>mag_totalr</name></expr></argument>,

<argument><expr><name>fl_phase</name></expr></argument>, <argument><expr><name>fr_phase</name></expr></argument>,

<argument><expr><name>bl_phase</name></expr></argument>, <argument><expr><name>br_phase</name></expr></argument>,

<argument><expr><name>sl_phase</name></expr></argument>, <argument><expr><name>sr_phase</name></expr></argument>,

<argument><expr><name>xl</name></expr></argument>, <argument><expr><name>yl</name></expr></argument>, <argument><expr><name>xr</name></expr></argument>, <argument><expr><name>yr</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>filter_5_1_back</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AudioSurroundContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>srcl</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>srcr</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>srcc</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>srclfe</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>srcbl</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>srcbr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>

<expr_stmt><expr><name>srcl</name> <operator>=</operator> <operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><name><name>s</name><operator>-&gt;</operator><name>input</name><operator>-&gt;</operator><name>extended_data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>srcr</name> <operator>=</operator> <operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><name><name>s</name><operator>-&gt;</operator><name>input</name><operator>-&gt;</operator><name>extended_data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>srcc</name> <operator>=</operator> <operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><name><name>s</name><operator>-&gt;</operator><name>input</name><operator>-&gt;</operator><name>extended_data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>srclfe</name> <operator>=</operator> <operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><name><name>s</name><operator>-&gt;</operator><name>input</name><operator>-&gt;</operator><name>extended_data</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>srcbl</name> <operator>=</operator> <operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><name><name>s</name><operator>-&gt;</operator><name>input</name><operator>-&gt;</operator><name>extended_data</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>srcbr</name> <operator>=</operator> <operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><name><name>s</name><operator>-&gt;</operator><name>input</name><operator>-&gt;</operator><name>extended_data</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>buf_size</name></name></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>fl_re</name> <init>= <expr><name><name>srcl</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>n</name></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>fr_re</name> <init>= <expr><name><name>srcr</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>n</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>fl_im</name> <init>= <expr><name><name>srcl</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>n</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>fr_im</name> <init>= <expr><name><name>srcr</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>n</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>c_re</name> <init>= <expr><name><name>srcc</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>n</name></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>c_im</name> <init>= <expr><name><name>srcc</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>n</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>lfe_re</name> <init>= <expr><name><name>srclfe</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>n</name></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>lfe_im</name> <init>= <expr><name><name>srclfe</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>n</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>bl_re</name> <init>= <expr><name><name>srcbl</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>n</name></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>bl_im</name> <init>= <expr><name><name>srcbl</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>n</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>br_re</name> <init>= <expr><name><name>srcbr</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>n</name></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>br_im</name> <init>= <expr><name><name>srcbr</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>n</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>fl_mag</name> <init>= <expr><call><name>hypotf</name><argument_list>(<argument><expr><name>fl_re</name></expr></argument>, <argument><expr><name>fl_im</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>fr_mag</name> <init>= <expr><call><name>hypotf</name><argument_list>(<argument><expr><name>fr_re</name></expr></argument>, <argument><expr><name>fr_im</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>fl_phase</name> <init>= <expr><call><name>atan2f</name><argument_list>(<argument><expr><name>fl_im</name></expr></argument>, <argument><expr><name>fl_re</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>fr_phase</name> <init>= <expr><call><name>atan2f</name><argument_list>(<argument><expr><name>fr_im</name></expr></argument>, <argument><expr><name>fr_re</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>bl_mag</name> <init>= <expr><call><name>hypotf</name><argument_list>(<argument><expr><name>bl_re</name></expr></argument>, <argument><expr><name>bl_im</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>br_mag</name> <init>= <expr><call><name>hypotf</name><argument_list>(<argument><expr><name>br_re</name></expr></argument>, <argument><expr><name>br_im</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>bl_phase</name> <init>= <expr><call><name>atan2f</name><argument_list>(<argument><expr><name>bl_im</name></expr></argument>, <argument><expr><name>bl_re</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>br_phase</name> <init>= <expr><call><name>atan2f</name><argument_list>(<argument><expr><name>br_im</name></expr></argument>, <argument><expr><name>br_re</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>phase_difl</name> <init>= <expr><call><name>fabsf</name><argument_list>(<argument><expr><name>fl_phase</name> <operator>-</operator> <name>bl_phase</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>phase_difr</name> <init>= <expr><call><name>fabsf</name><argument_list>(<argument><expr><name>fr_phase</name> <operator>-</operator> <name>br_phase</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>magl_sum</name> <init>= <expr><name>fl_mag</name> <operator>+</operator> <name>bl_mag</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>magr_sum</name> <init>= <expr><name>fr_mag</name> <operator>+</operator> <name>br_mag</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>mag_difl</name> <init>= <expr><ternary><condition><expr><name>magl_sum</name> <operator>&lt;</operator> <literal type="number">0.000001</literal></expr> ?</condition><then> <expr><call><name>FFDIFFSIGN</name><argument_list>(<argument><expr><name>fl_mag</name></expr></argument>, <argument><expr><name>bl_mag</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><operator>(</operator><name>fl_mag</name> <operator>-</operator> <name>bl_mag</name><operator>)</operator> <operator>/</operator> <name>magl_sum</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>mag_difr</name> <init>= <expr><ternary><condition><expr><name>magr_sum</name> <operator>&lt;</operator> <literal type="number">0.000001</literal></expr> ?</condition><then> <expr><call><name>FFDIFFSIGN</name><argument_list>(<argument><expr><name>fr_mag</name></expr></argument>, <argument><expr><name>br_mag</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><operator>(</operator><name>fr_mag</name> <operator>-</operator> <name>br_mag</name><operator>)</operator> <operator>/</operator> <name>magr_sum</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>mag_totall</name> <init>= <expr><call><name>hypotf</name><argument_list>(<argument><expr><name>fl_mag</name></expr></argument>, <argument><expr><name>bl_mag</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>mag_totalr</name> <init>= <expr><call><name>hypotf</name><argument_list>(<argument><expr><name>fr_mag</name></expr></argument>, <argument><expr><name>br_mag</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>sl_phase</name> <init>= <expr><call><name>atan2f</name><argument_list>(<argument><expr><name>fl_im</name> <operator>+</operator> <name>bl_im</name></expr></argument>, <argument><expr><name>fl_re</name> <operator>+</operator> <name>bl_re</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>sr_phase</name> <init>= <expr><call><name>atan2f</name><argument_list>(<argument><expr><name>fr_im</name> <operator>+</operator> <name>br_im</name></expr></argument>, <argument><expr><name>fr_re</name> <operator>+</operator> <name>br_re</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>xl</name></decl>, <decl><type ref="prev"/><name>yl</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>xr</name></decl>, <decl><type ref="prev"/><name>yr</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>phase_difl</name> <operator>&gt;</operator> <name>M_PI</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>phase_difl</name> <operator>=</operator> <literal type="number">2</literal> <operator>*</operator> <name>M_PI</name> <operator>-</operator> <name>phase_difl</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>phase_difr</name> <operator>&gt;</operator> <name>M_PI</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>phase_difr</name> <operator>=</operator> <literal type="number">2</literal> <operator>*</operator> <name>M_PI</name> <operator>-</operator> <name>phase_difr</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>stereo_position</name><argument_list>(<argument><expr><name>mag_difl</name></expr></argument>, <argument><expr><name>phase_difl</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>xl</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>yl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>stereo_position</name><argument_list>(<argument><expr><name>mag_difr</name></expr></argument>, <argument><expr><name>phase_difr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>xr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>yr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>upmix_5_1</name></name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>c_re</name></expr></argument>, <argument><expr><name>c_im</name></expr></argument>, <argument><expr><name>lfe_re</name></expr></argument>, <argument><expr><name>lfe_im</name></expr></argument>,

<argument><expr><name>mag_totall</name></expr></argument>, <argument><expr><name>mag_totalr</name></expr></argument>,

<argument><expr><name>fl_phase</name></expr></argument>, <argument><expr><name>fr_phase</name></expr></argument>,

<argument><expr><name>bl_phase</name></expr></argument>, <argument><expr><name>br_phase</name></expr></argument>,

<argument><expr><name>sl_phase</name></expr></argument>, <argument><expr><name>sr_phase</name></expr></argument>,

<argument><expr><name>xl</name></expr></argument>, <argument><expr><name>yl</name></expr></argument>, <argument><expr><name>xr</name></expr></argument>, <argument><expr><name>yr</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>init</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AudioSurroundContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>overlap</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>out_channel_layout</name></name> <operator>=</operator> <call><name>av_get_channel_layout</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>out_channel_layout_str</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Error parsing output channel layout '%s'.\n"</literal></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>out_channel_layout_str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>in_channel_layout</name></name> <operator>=</operator> <call><name>av_get_channel_layout</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>in_channel_layout_str</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Error parsing input channel layout '%s'.\n"</literal></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>in_channel_layout_str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>lowcutf</name></name> <operator>&gt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>highcutf</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Low cut-off '%d' should be less than high cut-off '%d'.\n"</literal></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>lowcutf</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>highcutf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>in_channel_layout</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>AV_CH_LAYOUT_STEREO</name></expr>:</case>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>filter</name></name> <operator>=</operator> <name>filter_stereo</name></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>out_channel_layout</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>AV_CH_LAYOUT_MONO</name></expr>:</case>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>upmix_stereo</name></name> <operator>=</operator> <name>upmix_1_0</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AV_CH_LAYOUT_STEREO</name></expr>:</case>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>upmix_stereo</name></name> <operator>=</operator> <name>upmix_stereo</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AV_CH_LAYOUT_2POINT1</name></expr>:</case>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>upmix_stereo</name></name> <operator>=</operator> <name>upmix_2_1</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AV_CH_LAYOUT_SURROUND</name></expr>:</case>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>upmix_stereo</name></name> <operator>=</operator> <name>upmix_3_0</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AV_CH_LAYOUT_3POINT1</name></expr>:</case>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>upmix_stereo</name></name> <operator>=</operator> <name>upmix_3_1</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AV_CH_LAYOUT_4POINT0</name></expr>:</case>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>upmix_stereo</name></name> <operator>=</operator> <name>upmix_4_0</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AV_CH_LAYOUT_4POINT1</name></expr>:</case>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>upmix_stereo</name></name> <operator>=</operator> <name>upmix_4_1</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AV_CH_LAYOUT_5POINT0_BACK</name></expr>:</case>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>upmix_stereo</name></name> <operator>=</operator> <name>upmix_5_0_back</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AV_CH_LAYOUT_5POINT1_BACK</name></expr>:</case>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>upmix_stereo</name></name> <operator>=</operator> <name>upmix_5_1_back</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AV_CH_LAYOUT_6POINT0</name></expr>:</case>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>upmix_stereo</name></name> <operator>=</operator> <name>upmix_6_0</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AV_CH_LAYOUT_6POINT1</name></expr>:</case>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>upmix_stereo</name></name> <operator>=</operator> <name>upmix_6_1</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AV_CH_LAYOUT_7POINT0</name></expr>:</case>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>upmix_stereo</name></name> <operator>=</operator> <name>upmix_7_0</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AV_CH_LAYOUT_7POINT1</name></expr>:</case>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>upmix_stereo</name></name> <operator>=</operator> <name>upmix_7_1</name></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></switch>

<break>break;</break>

<case>case <expr><name>AV_CH_LAYOUT_2POINT1</name></expr>:</case>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>filter</name></name> <operator>=</operator> <name>filter_2_1</name></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>out_channel_layout</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>AV_CH_LAYOUT_5POINT1_BACK</name></expr>:</case>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>upmix_2_1</name></name> <operator>=</operator> <name>upmix_5_1_back_2_1</name></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></switch>

<break>break;</break>

<case>case <expr><name>AV_CH_LAYOUT_SURROUND</name></expr>:</case>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>filter</name></name> <operator>=</operator> <name>filter_surround</name></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>out_channel_layout</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>AV_CH_LAYOUT_3POINT1</name></expr>:</case>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>upmix_3_0</name></name> <operator>=</operator> <name>upmix_3_1_surround</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AV_CH_LAYOUT_5POINT1_BACK</name></expr>:</case>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>upmix_3_0</name></name> <operator>=</operator> <name>upmix_5_1_back_surround</name></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></switch>

<break>break;</break>

<case>case <expr><name>AV_CH_LAYOUT_5POINT0</name></expr>:</case>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>filter</name></name> <operator>=</operator> <name>filter_5_0_side</name></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>out_channel_layout</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>AV_CH_LAYOUT_7POINT1</name></expr>:</case>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>upmix_5_0</name></name> <operator>=</operator> <name>upmix_7_1_5_0_side</name></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></switch>

<break>break;</break>

<case>case <expr><name>AV_CH_LAYOUT_5POINT1</name></expr>:</case>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>filter</name></name> <operator>=</operator> <name>filter_5_1_side</name></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>out_channel_layout</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>AV_CH_LAYOUT_7POINT1</name></expr>:</case>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>upmix_5_1</name></name> <operator>=</operator> <name>upmix_7_1_5_1</name></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></switch>

<break>break;</break>

<case>case <expr><name>AV_CH_LAYOUT_5POINT1_BACK</name></expr>:</case>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>filter</name></name> <operator>=</operator> <name>filter_5_1_back</name></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>out_channel_layout</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>AV_CH_LAYOUT_7POINT1</name></expr>:</case>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>upmix_5_1</name></name> <operator>=</operator> <name>upmix_7_1_5_1</name></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></switch>

<break>break;</break>

<default>default:</default>

<label><name>fail</name>:</label>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Unsupported upmix: '%s' -&gt; '%s'.\n"</literal></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>in_channel_layout_str</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>out_channel_layout_str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></switch>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>buf_size</name></name> <operator>=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <call><name>av_log2</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>win_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>pts</name></name> <operator>=</operator> <name>AV_NOPTS_VALUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>window_func_lut</name></name> <operator>=</operator> <call><name>av_calloc</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>buf_size</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>window_func_lut</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>window_func_lut</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>generate_window_func</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>window_func_lut</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>buf_size</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>win_func</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>overlap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>overlap</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>overlap</name></name> <operator>=</operator> <name>overlap</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>buf_size</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>window_func_lut</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>sqrtf</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>window_func_lut</name><index>[<expr><name>i</name></expr>]</index></name> <operator>/</operator> <name><name>s</name><operator>-&gt;</operator><name>buf_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>hop_size</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>buf_size</name></name> <operator>*</operator> <operator>(</operator><literal type="number">1.</literal> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>overlap</name></name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>hop_size</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>all_x</name></name> <operator>&gt;=</operator> <literal type="number">0.f</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>fc_x</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>fl_x</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>fr_x</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>bc_x</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>sl_x</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>sr_x</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>bl_x</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>br_x</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>all_x</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>all_y</name></name> <operator>&gt;=</operator> <literal type="number">0.f</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>fc_y</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>fl_y</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>fr_y</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>bc_y</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>sl_y</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>sr_y</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>bl_y</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>br_y</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>all_y</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>fft_channel</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ch</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nb_jobs</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AudioSurroundContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>level_in</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>input_levels</name><index>[<expr><name>ch</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>dst</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>input</name><operator>-&gt;</operator><name>extended_data</name><index>[<expr><name>ch</name></expr>]</index></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>buf_size</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>buf_size</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst</name> <operator>=</operator> <operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><name><name>s</name><operator>-&gt;</operator><name>input</name><operator>-&gt;</operator><name>extended_data</name><index>[<expr><name>ch</name></expr>]</index></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>buf_size</name></name></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>dst</name><index>[<expr><name>n</name></expr>]</index></name> <operator>*=</operator> <name><name>s</name><operator>-&gt;</operator><name>window_func_lut</name><index>[<expr><name>n</name></expr>]</index></name> <operator>*</operator> <name>level_in</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>av_rdft_calc</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>rdft</name><index>[<expr><name>ch</name></expr>]</index></name></expr></argument>, <argument><expr><operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><name><name>s</name><operator>-&gt;</operator><name>input</name><operator>-&gt;</operator><name>extended_data</name><index>[<expr><name>ch</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ifft_channel</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ch</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nb_jobs</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AudioSurroundContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>level_out</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>output_levels</name><index>[<expr><name>ch</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>out</name> <init>= <expr><name>arg</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>dst</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_rdft_calc</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>irdft</name><index>[<expr><name>ch</name></expr>]</index></name></expr></argument>, <argument><expr><operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><name><name>s</name><operator>-&gt;</operator><name>output</name><operator>-&gt;</operator><name>extended_data</name><index>[<expr><name>ch</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst</name> <operator>=</operator> <operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><name><name>s</name><operator>-&gt;</operator><name>output</name><operator>-&gt;</operator><name>extended_data</name><index>[<expr><name>ch</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><name><name>s</name><operator>-&gt;</operator><name>overlap_buffer</name><operator>-&gt;</operator><name>extended_data</name><index>[<expr><name>ch</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>overlap_buffer</name><operator>-&gt;</operator><name>extended_data</name><index>[<expr><name>ch</name></expr>]</index></name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>overlap_buffer</name><operator>-&gt;</operator><name>extended_data</name><index>[<expr><name>ch</name></expr>]</index></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>hop_size</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>buf_size</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>overlap_buffer</name><operator>-&gt;</operator><name>extended_data</name><index>[<expr><name>ch</name></expr>]</index></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>buf_size</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></argument>,

<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>hop_size</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>buf_size</name></name></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>ptr</name><index>[<expr><name>n</name></expr>]</index></name> <operator>+=</operator> <name><name>dst</name><index>[<expr><name>n</name></expr>]</index></name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>window_func_lut</name><index>[<expr><name>n</name></expr>]</index></name> <operator>*</operator> <name>level_out</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><name><name>s</name><operator>-&gt;</operator><name>overlap_buffer</name><operator>-&gt;</operator><name>extended_data</name><index>[<expr><name>ch</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>dst</name> <operator>=</operator> <operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><name><name>out</name><operator>-&gt;</operator><name>extended_data</name><index>[<expr><name>ch</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>hop_size</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>filter_frame</name><parameter_list>(<parameter><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>inlink</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>inlink</name><operator>-&gt;</operator><name>dst</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>outlink</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>outputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AudioSurroundContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>out</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>av_audio_fifo_peek</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>fifo</name></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><name><name>s</name><operator>-&gt;</operator><name>input</name><operator>-&gt;</operator><name>extended_data</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>buf_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name><name>ctx</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>fft_channel</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>channels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>filter</name></name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>out</name> <operator>=</operator> <call><name>ff_get_audio_buffer</name><argument_list>(<argument><expr><name>outlink</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>hop_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>out</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name><name>ctx</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>ifft_channel</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>outlink</name><operator>-&gt;</operator><name>channels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>pts</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>pts</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>pts</name></name> <operator>!=</operator> <name>AV_NOPTS_VALUE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>pts</name></name> <operator>+=</operator> <macro><name>av_rescale_q</name><argument_list>(<argument>out-&gt;nb_samples</argument>, <argument>(AVRational){<literal type="number">1</literal></argument>, <argument>outlink-&gt;sample_rate}</argument>, <argument>outlink-&gt;time_base</argument>)</argument_list></macro></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_audio_fifo_drain</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>fifo</name></name></expr></argument>, <argument><expr><call><name>FFMIN</name><argument_list>(<argument><expr><call><name>av_audio_fifo_size</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>fifo</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>hop_size</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>ff_filter_frame</name><argument_list>(<argument><expr><name>outlink</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>activate</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>inlink</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>inputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>outlink</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>outputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AudioSurroundContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>in</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>status</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>pts</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>FF_FILTER_FORWARD_STATUS_BACK</name><argument_list>(<argument><expr><name>outlink</name></expr></argument>, <argument><expr><name>inlink</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>eof</name></name> <operator>&amp;&amp;</operator> <call><name>av_audio_fifo_size</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>fifo</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>buf_size</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_inlink_consume_frame</name><argument_list>(<argument><expr><name>inlink</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>av_audio_fifo_write</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>fifo</name></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><name><name>in</name><operator>-&gt;</operator><name>extended_data</name></name></expr></argument>,

<argument><expr><name><name>in</name><operator>-&gt;</operator><name>nb_samples</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>pts</name></name> <operator>==</operator> <name>AV_NOPTS_VALUE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>pts</name></name> <operator>=</operator> <name><name>in</name><operator>-&gt;</operator><name>pts</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>av_audio_fifo_size</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>fifo</name></name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>buf_size</name></name><operator>)</operator> <operator>||</operator>

<operator>(</operator><call><name>av_audio_fifo_size</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>fifo</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>eof</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>filter_frame</name><argument_list>(<argument><expr><name>inlink</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>av_audio_fifo_size</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>fifo</name></name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>buf_size</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ff_filter_set_ready</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>eof</name></name> <operator>&amp;&amp;</operator> <call><name>ff_inlink_acknowledge_status</name><argument_list>(<argument><expr><name>inlink</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>status</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pts</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>status</name> <operator>==</operator> <name>AVERROR_EOF</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>eof</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>av_audio_fifo_size</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>fifo</name></name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ff_filter_set_ready</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>eof</name></name> <operator>&amp;&amp;</operator> <call><name>av_audio_fifo_size</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>fifo</name></name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ff_outlink_set_status</name><argument_list>(<argument><expr><name>outlink</name></expr></argument>, <argument><expr><name>AVERROR_EOF</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>pts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>eof</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>FF_FILTER_FORWARD_WANTED</name><argument_list>(<argument><expr><name>outlink</name></expr></argument>, <argument><expr><name>inlink</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>FFERROR_NOT_READY</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>void</name></type> <name>uninit</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AudioSurroundContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ch</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>input</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>output</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>overlap_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>ch</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ch</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>nb_in_channels</name></name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>av_rdft_end</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>rdft</name><index>[<expr><name>ch</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>ch</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ch</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>nb_out_channels</name></name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>av_rdft_end</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>irdft</name><index>[<expr><name>ch</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>input_levels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>output_levels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>rdft</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>irdft</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_audio_fifo_free</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>fifo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>window_func_lut</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OFFSET</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>offsetof(AudioSurroundContext, x)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLAGS</name></cpp:macro> <cpp:value>AV_OPT_FLAG_AUDIO_PARAM|AV_OPT_FLAG_FILTERING_PARAM</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVOption</name></type> <name><name>surround_options</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><literal type="string">"chl_out"</literal></expr>, <expr><literal type="string">"set output channel layout"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>out_channel_layout_str</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_STRING</name></expr>, <expr><block>{<expr><operator>.</operator><name>str</name><operator>=</operator><literal type="string">"5.1"</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"chl_in"</literal></expr>, <expr><literal type="string">"set input channel layout"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>in_channel_layout_str</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_STRING</name></expr>, <expr><block>{<expr><operator>.</operator><name>str</name><operator>=</operator><literal type="string">"stereo"</literal></expr>}</block></expr>,<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"level_in"</literal></expr>, <expr><literal type="string">"set input level"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>level_in</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_FLOAT</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name><operator>=</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"level_out"</literal></expr>, <expr><literal type="string">"set output level"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>level_out</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_FLOAT</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name><operator>=</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"lfe"</literal></expr>, <expr><literal type="string">"output LFE"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>output_lfe</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_BOOL</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"lfe_low"</literal></expr>, <expr><literal type="string">"LFE low cut off"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>lowcutf</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">128</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">256</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"lfe_high"</literal></expr>, <expr><literal type="string">"LFE high cut off"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>highcutf</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">256</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">512</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"lfe_mode"</literal></expr>, <expr><literal type="string">"set LFE channel mode"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>lfe_mode</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">0</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"lfe_mode"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"add"</literal></expr>, <expr><literal type="string">"just add LFE channel"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">0</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"lfe_mode"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"sub"</literal></expr>, <expr><literal type="string">"substract LFE channel with others"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"lfe_mode"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"angle"</literal></expr>, <expr><literal type="string">"set soundfield transform angle"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>angle</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_FLOAT</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name><operator>=</operator><literal type="number">90</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">360</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"fc_in"</literal></expr>, <expr><literal type="string">"set front center channel input level"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>fc_in</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_FLOAT</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name><operator>=</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"fc_out"</literal></expr>, <expr><literal type="string">"set front center channel output level"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>fc_out</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_FLOAT</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name><operator>=</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"fl_in"</literal></expr>, <expr><literal type="string">"set front left channel input level"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>fl_in</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_FLOAT</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name><operator>=</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"fl_out"</literal></expr>, <expr><literal type="string">"set front left channel output level"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>fl_out</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_FLOAT</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name><operator>=</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"fr_in"</literal></expr>, <expr><literal type="string">"set front right channel input level"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>fr_in</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_FLOAT</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name><operator>=</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"fr_out"</literal></expr>, <expr><literal type="string">"set front right channel output level"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>fr_out</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_FLOAT</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name><operator>=</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"sl_in"</literal></expr>, <expr><literal type="string">"set side left channel input level"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>sl_in</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_FLOAT</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name><operator>=</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"sl_out"</literal></expr>, <expr><literal type="string">"set side left channel output level"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>sl_out</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_FLOAT</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name><operator>=</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"sr_in"</literal></expr>, <expr><literal type="string">"set side right channel input level"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>sr_in</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_FLOAT</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name><operator>=</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"sr_out"</literal></expr>, <expr><literal type="string">"set side right channel output level"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>sr_out</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_FLOAT</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name><operator>=</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"bl_in"</literal></expr>, <expr><literal type="string">"set back left channel input level"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>bl_in</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_FLOAT</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name><operator>=</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"bl_out"</literal></expr>, <expr><literal type="string">"set back left channel output level"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>bl_out</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_FLOAT</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name><operator>=</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"br_in"</literal></expr>, <expr><literal type="string">"set back right channel input level"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>br_in</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_FLOAT</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name><operator>=</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"br_out"</literal></expr>, <expr><literal type="string">"set back right channel output level"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>br_out</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_FLOAT</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name><operator>=</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"bc_in"</literal></expr>, <expr><literal type="string">"set back center channel input level"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>bc_in</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_FLOAT</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name><operator>=</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"bc_out"</literal></expr>, <expr><literal type="string">"set back center channel output level"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>bc_out</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_FLOAT</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name><operator>=</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"lfe_in"</literal></expr>, <expr><literal type="string">"set lfe channel input level"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>lfe_in</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_FLOAT</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name><operator>=</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"lfe_out"</literal></expr>, <expr><literal type="string">"set lfe channel output level"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>lfe_out</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_FLOAT</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name><operator>=</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"allx"</literal></expr>, <expr><literal type="string">"set all channel's x spread"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>all_x</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_FLOAT</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name><operator>=</operator><operator>-</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"ally"</literal></expr>, <expr><literal type="string">"set all channel's y spread"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>all_y</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_FLOAT</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name><operator>=</operator><operator>-</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"fcx"</literal></expr>, <expr><literal type="string">"set front center channel x spread"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>fc_x</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_FLOAT</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name><operator>=</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"flx"</literal></expr>, <expr><literal type="string">"set front left channel x spread"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>fl_x</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_FLOAT</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name><operator>=</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"frx"</literal></expr>, <expr><literal type="string">"set front right channel x spread"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>fr_x</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_FLOAT</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name><operator>=</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"blx"</literal></expr>, <expr><literal type="string">"set back left channel x spread"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>bl_x</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_FLOAT</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name><operator>=</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"brx"</literal></expr>, <expr><literal type="string">"set back right channel x spread"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>br_x</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_FLOAT</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name><operator>=</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"slx"</literal></expr>, <expr><literal type="string">"set side left channel x spread"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>sl_x</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_FLOAT</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name><operator>=</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"srx"</literal></expr>, <expr><literal type="string">"set side right channel x spread"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>sr_x</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_FLOAT</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name><operator>=</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"bcx"</literal></expr>, <expr><literal type="string">"set back center channel x spread"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>bc_x</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_FLOAT</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name><operator>=</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"fcy"</literal></expr>, <expr><literal type="string">"set front center channel y spread"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>fc_y</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_FLOAT</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name><operator>=</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"fly"</literal></expr>, <expr><literal type="string">"set front left channel y spread"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>fl_y</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_FLOAT</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name><operator>=</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"fry"</literal></expr>, <expr><literal type="string">"set front right channel y spread"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>fr_y</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_FLOAT</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name><operator>=</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"bly"</literal></expr>, <expr><literal type="string">"set back left channel y spread"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>bl_y</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_FLOAT</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name><operator>=</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"bry"</literal></expr>, <expr><literal type="string">"set back right channel y spread"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>br_y</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_FLOAT</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name><operator>=</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"sly"</literal></expr>, <expr><literal type="string">"set side left channel y spread"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>sl_y</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_FLOAT</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name><operator>=</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"sry"</literal></expr>, <expr><literal type="string">"set side right channel y spread"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>sr_y</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_FLOAT</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name><operator>=</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"bcy"</literal></expr>, <expr><literal type="string">"set back center channel y spread"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>bc_y</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_FLOAT</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name><operator>=</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"win_size"</literal></expr>, <expr><literal type="string">"set window size"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>win_size</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">4096</literal></expr>}</block></expr>, <expr><literal type="number">1024</literal></expr>, <expr><literal type="number">65536</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"win_func"</literal></expr>, <expr><literal type="string">"set window function"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>win_func</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>WFUNC_HANNING</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NB_WFUNC</name><operator>-</operator><literal type="number">1</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"win_func"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"rect"</literal></expr>, <expr><literal type="string">"Rectangular"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>WFUNC_RECT</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"win_func"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"bartlett"</literal></expr>, <expr><literal type="string">"Bartlett"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>WFUNC_BARTLETT</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"win_func"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"hann"</literal></expr>, <expr><literal type="string">"Hann"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>WFUNC_HANNING</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"win_func"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"hanning"</literal></expr>, <expr><literal type="string">"Hanning"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>WFUNC_HANNING</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"win_func"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"hamming"</literal></expr>, <expr><literal type="string">"Hamming"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>WFUNC_HAMMING</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"win_func"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"blackman"</literal></expr>, <expr><literal type="string">"Blackman"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>WFUNC_BLACKMAN</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"win_func"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"welch"</literal></expr>, <expr><literal type="string">"Welch"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>WFUNC_WELCH</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"win_func"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"flattop"</literal></expr>, <expr><literal type="string">"Flat-top"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>WFUNC_FLATTOP</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"win_func"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"bharris"</literal></expr>, <expr><literal type="string">"Blackman-Harris"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>WFUNC_BHARRIS</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"win_func"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"bnuttall"</literal></expr>, <expr><literal type="string">"Blackman-Nuttall"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>WFUNC_BNUTTALL</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"win_func"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"bhann"</literal></expr>, <expr><literal type="string">"Bartlett-Hann"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>WFUNC_BHANN</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"win_func"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"sine"</literal></expr>, <expr><literal type="string">"Sine"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>WFUNC_SINE</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"win_func"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"nuttall"</literal></expr>, <expr><literal type="string">"Nuttall"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>WFUNC_NUTTALL</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"win_func"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"lanczos"</literal></expr>, <expr><literal type="string">"Lanczos"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>WFUNC_LANCZOS</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"win_func"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"gauss"</literal></expr>, <expr><literal type="string">"Gauss"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>WFUNC_GAUSS</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"win_func"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"tukey"</literal></expr>, <expr><literal type="string">"Tukey"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>WFUNC_TUKEY</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"win_func"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"dolph"</literal></expr>, <expr><literal type="string">"Dolph-Chebyshev"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>WFUNC_DOLPH</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"win_func"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"cauchy"</literal></expr>, <expr><literal type="string">"Cauchy"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>WFUNC_CAUCHY</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"win_func"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"parzen"</literal></expr>, <expr><literal type="string">"Parzen"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>WFUNC_PARZEN</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"win_func"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"poisson"</literal></expr>, <expr><literal type="string">"Poisson"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>WFUNC_POISSON</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"win_func"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"bohman"</literal></expr>, <expr><literal type="string">"Bohman"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>WFUNC_BOHMAN</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"win_func"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"overlap"</literal></expr>, <expr><literal type="string">"set window overlap"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>overlap</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_FLOAT</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name><operator>=</operator><literal type="number">0.5</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>AVFILTER_DEFINE_CLASS</name><argument_list>(<argument><expr><name>surround</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVFilterPad</name></type> <name><name>inputs</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"default"</literal></expr>,

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_AUDIO</name></expr>,

<expr><operator>.</operator><name>config_props</name> <operator>=</operator> <name>config_input</name></expr>,

}</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVFilterPad</name></type> <name><name>outputs</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"default"</literal></expr>,

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_AUDIO</name></expr>,

<expr><operator>.</operator><name>config_props</name> <operator>=</operator> <name>config_output</name></expr>,

}</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFilter</name></type> <name>ff_af_surround</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"surround"</literal></expr>,

<expr><operator>.</operator><name>description</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"Apply audio surround upmix filter."</literal></expr></argument>)</argument_list></call></expr>,

<expr><operator>.</operator><name>query_formats</name> <operator>=</operator> <name>query_formats</name></expr>,

<expr><operator>.</operator><name>priv_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>AudioSurroundContext</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><operator>.</operator><name>priv_class</name> <operator>=</operator> <operator>&amp;</operator><name>surround_class</name></expr>,

<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>init</name></expr>,

<expr><operator>.</operator><name>uninit</name> <operator>=</operator> <name>uninit</name></expr>,

<expr><operator>.</operator><name>activate</name> <operator>=</operator> <name>activate</name></expr>,

<expr><operator>.</operator><name>inputs</name> <operator>=</operator> <name>inputs</name></expr>,

<expr><operator>.</operator><name>outputs</name> <operator>=</operator> <name>outputs</name></expr>,

<expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>AVFILTER_FLAG_SLICE_THREADS</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

</unit>
