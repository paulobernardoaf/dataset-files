<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavfilter\vf_removegrain.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/imgutils.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/opt.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/pixdesc.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/qsort.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avfilter.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"formats.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"removegrain.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"video.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OFFSET</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>offsetof(RemoveGrainContext, x)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLAGS</name></cpp:macro> <cpp:value>AV_OPT_FLAG_FILTERING_PARAM|AV_OPT_FLAG_VIDEO_PARAM</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVOption</name></type> <name><name>removegrain_options</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><literal type="string">"m0"</literal></expr>, <expr><literal type="string">"set mode for 1st plane"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name><name>mode</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">0</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">24</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"m1"</literal></expr>, <expr><literal type="string">"set mode for 2nd plane"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name><name>mode</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">0</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">24</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"m2"</literal></expr>, <expr><literal type="string">"set mode for 3rd plane"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name><name>mode</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">0</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">24</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"m3"</literal></expr>, <expr><literal type="string">"set mode for 4th plane"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name><name>mode</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">0</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">24</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,

<expr><block>{<expr><name>NULL</name></expr>}</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>AVFILTER_DEFINE_CLASS</name><argument_list>(<argument><expr><name>removegrain</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function><type><specifier>static</specifier> <name>int</name></type> <name>query_formats</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>enum</name> <name>AVPixelFormat</name></name></type> <name><name>pix_fmts</name><index>[]</index></name> <init>= <expr><block>{

<expr><name>AV_PIX_FMT_GRAY8</name></expr>,

<expr><name>AV_PIX_FMT_YUV420P</name></expr>, <expr><name>AV_PIX_FMT_YUV422P</name></expr>, <expr><name>AV_PIX_FMT_YUV444P</name></expr>,

<expr><name>AV_PIX_FMT_YUVA420P</name></expr>, <expr><name>AV_PIX_FMT_YUVA422P</name></expr>, <expr><name>AV_PIX_FMT_YUVA444P</name></expr>,

<expr><name>AV_PIX_FMT_YUV440P</name></expr>, <expr><name>AV_PIX_FMT_YUV411P</name></expr>, <expr><name>AV_PIX_FMT_YUV410P</name></expr>,

<expr><name>AV_PIX_FMT_YUVJ411P</name></expr>, <expr><name>AV_PIX_FMT_YUVJ420P</name></expr>, <expr><name>AV_PIX_FMT_YUVJ422P</name></expr>,

<expr><name>AV_PIX_FMT_YUVJ440P</name></expr>, <expr><name>AV_PIX_FMT_YUVJ444P</name></expr>,

<expr><name>AV_PIX_FMT_GBRP</name></expr>, <expr><name>AV_PIX_FMT_GBRAP</name></expr>,

<expr><name>AV_PIX_FMT_NONE</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFilterFormats</name> <modifier>*</modifier></type><name>fmts_list</name> <init>= <expr><call><name>ff_make_format_list</name><argument_list>(<argument><expr><name>pix_fmts</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>fmts_list</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>ff_set_common_formats</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>fmts_list</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REMOVE_GRAIN_SORT_AXIS</name></cpp:macro> <cpp:value>const int ma1 = FFMAX(a1, a8); const int mi1 = FFMIN(a1, a8); const int ma2 = FFMAX(a2, a7); const int mi2 = FFMIN(a2, a7); const int ma3 = FFMAX(a3, a6); const int mi3 = FFMIN(a3, a6); const int ma4 = FFMAX(a4, a5); const int mi4 = FFMIN(a4, a5);</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mode01</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>a1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>a2</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>a3</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>a4</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>a5</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>a6</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>a7</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>a8</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>mi</name> <init>= <expr><call><name>FFMIN</name><argument_list>(<argument><expr><call><name>FFMIN</name><argument_list>(<argument><expr><call><name>FFMIN</name><argument_list>(<argument><expr><name>a1</name></expr></argument>, <argument><expr><name>a2</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>FFMIN</name><argument_list>(<argument><expr><name>a3</name></expr></argument>, <argument><expr><name>a4</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>FFMIN</name><argument_list>(<argument><expr><call><name>FFMIN</name><argument_list>(<argument><expr><name>a5</name></expr></argument>, <argument><expr><name>a6</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>FFMIN</name><argument_list>(<argument><expr><name>a7</name></expr></argument>, <argument><expr><name>a8</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>ma</name> <init>= <expr><call><name>FFMAX</name><argument_list>(<argument><expr><call><name>FFMAX</name><argument_list>(<argument><expr><call><name>FFMAX</name><argument_list>(<argument><expr><name>a1</name></expr></argument>, <argument><expr><name>a2</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>FFMAX</name><argument_list>(<argument><expr><name>a3</name></expr></argument>, <argument><expr><name>a4</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>FFMAX</name><argument_list>(<argument><expr><call><name>FFMAX</name><argument_list>(<argument><expr><name>a5</name></expr></argument>, <argument><expr><name>a6</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>FFMAX</name><argument_list>(<argument><expr><name>a7</name></expr></argument>, <argument><expr><name>a8</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>av_clip</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>mi</name></expr></argument>, <argument><expr><name>ma</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>cmp_int</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>p1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>p2</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>left</name> <init>= <expr><operator>*</operator><operator>(</operator><specifier>const</specifier> <name>int</name> <operator>*</operator><operator>)</operator><name>p1</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>right</name> <init>= <expr><operator>*</operator><operator>(</operator><specifier>const</specifier> <name>int</name> <operator>*</operator><operator>)</operator><name>p2</name></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>FFDIFFSIGN</name><argument_list>(<argument><expr><name>left</name></expr></argument>, <argument><expr><name>right</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mode02</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>a1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>a2</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>a3</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>a4</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>a5</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>a6</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>a7</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>a8</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name><name>a</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <init>= <expr><block>{ <expr><name>a1</name></expr>, <expr><name>a2</name></expr>, <expr><name>a3</name></expr>, <expr><name>a4</name></expr>, <expr><name>a5</name></expr>, <expr><name>a6</name></expr>, <expr><name>a7</name></expr>, <expr><name>a8</name></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>AV_QSORT</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>int</name></expr></argument>, <argument><expr><name>cmp_int</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>av_clip</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>a</name><index>[<expr><literal type="number">2</literal> <operator>-</operator> <literal type="number">1</literal></expr> ]</index></name></expr></argument>, <argument><expr><name><name>a</name><index>[<expr><literal type="number">7</literal> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mode03</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>a1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>a2</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>a3</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>a4</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>a5</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>a6</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>a7</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>a8</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name><name>a</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <init>= <expr><block>{ <expr><name>a1</name></expr>, <expr><name>a2</name></expr>, <expr><name>a3</name></expr>, <expr><name>a4</name></expr>, <expr><name>a5</name></expr>, <expr><name>a6</name></expr>, <expr><name>a7</name></expr>, <expr><name>a8</name></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>AV_QSORT</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>int</name></expr></argument>, <argument><expr><name>cmp_int</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>av_clip</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>a</name><index>[<expr><literal type="number">3</literal> <operator>-</operator> <literal type="number">1</literal></expr> ]</index></name></expr></argument>, <argument><expr><name><name>a</name><index>[<expr><literal type="number">6</literal> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mode04</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>a1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>a2</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>a3</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>a4</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>a5</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>a6</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>a7</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>a8</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name><name>a</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <init>= <expr><block>{ <expr><name>a1</name></expr>, <expr><name>a2</name></expr>, <expr><name>a3</name></expr>, <expr><name>a4</name></expr>, <expr><name>a5</name></expr>, <expr><name>a6</name></expr>, <expr><name>a7</name></expr>, <expr><name>a8</name></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>AV_QSORT</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>int</name></expr></argument>, <argument><expr><name>cmp_int</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>av_clip</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>a</name><index>[<expr><literal type="number">4</literal> <operator>-</operator> <literal type="number">1</literal></expr> ]</index></name></expr></argument>, <argument><expr><name><name>a</name><index>[<expr><literal type="number">5</literal> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mode05</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>a1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>a2</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>a3</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>a4</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>a5</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>a6</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>a7</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>a8</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>REMOVE_GRAIN_SORT_AXIS</name>

<specifier>const</specifier> <name>int</name></type> <name>c1</name> <init>= <expr><call><name>FFABS</name><argument_list>(<argument><expr><name>c</name> <operator>-</operator> <call><name>av_clip</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>mi1</name></expr></argument>, <argument><expr><name>ma1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>c2</name> <init>= <expr><call><name>FFABS</name><argument_list>(<argument><expr><name>c</name> <operator>-</operator> <call><name>av_clip</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>mi2</name></expr></argument>, <argument><expr><name>ma2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>c3</name> <init>= <expr><call><name>FFABS</name><argument_list>(<argument><expr><name>c</name> <operator>-</operator> <call><name>av_clip</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>mi3</name></expr></argument>, <argument><expr><name>ma3</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>c4</name> <init>= <expr><call><name>FFABS</name><argument_list>(<argument><expr><name>c</name> <operator>-</operator> <call><name>av_clip</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>mi4</name></expr></argument>, <argument><expr><name>ma4</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>mindiff</name> <init>= <expr><call><name>FFMIN</name><argument_list>(<argument><expr><call><name>FFMIN</name><argument_list>(<argument><expr><name>c1</name></expr></argument>, <argument><expr><name>c2</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>FFMIN</name><argument_list>(<argument><expr><name>c3</name></expr></argument>, <argument><expr><name>c4</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>mindiff</name> <operator>==</operator> <name>c4</name></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>av_clip</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>mi4</name></expr></argument>, <argument><expr><name>ma4</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>mindiff</name> <operator>==</operator> <name>c2</name></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>av_clip</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>mi2</name></expr></argument>, <argument><expr><name>ma2</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>mindiff</name> <operator>==</operator> <name>c3</name></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>av_clip</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>mi3</name></expr></argument>, <argument><expr><name>ma3</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>av_clip</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>mi1</name></expr></argument>, <argument><expr><name>ma1</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mode06</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>a1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>a2</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>a3</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>a4</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>a5</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>a6</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>a7</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>a8</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>REMOVE_GRAIN_SORT_AXIS</name>

<specifier>const</specifier> <name>int</name></type> <name>d1</name> <init>= <expr><name>ma1</name> <operator>-</operator> <name>mi1</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>d2</name> <init>= <expr><name>ma2</name> <operator>-</operator> <name>mi2</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>d3</name> <init>= <expr><name>ma3</name> <operator>-</operator> <name>mi3</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>d4</name> <init>= <expr><name>ma4</name> <operator>-</operator> <name>mi4</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>cli1</name> <init>= <expr><call><name>av_clip</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>mi1</name></expr></argument>, <argument><expr><name>ma1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>cli2</name> <init>= <expr><call><name>av_clip</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>mi2</name></expr></argument>, <argument><expr><name>ma2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>cli3</name> <init>= <expr><call><name>av_clip</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>mi3</name></expr></argument>, <argument><expr><name>ma3</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>cli4</name> <init>= <expr><call><name>av_clip</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>mi4</name></expr></argument>, <argument><expr><name>ma4</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>c1</name> <init>= <expr><call><name>av_clip_uint16</name><argument_list>(<argument><expr><operator>(</operator><call><name>FFABS</name><argument_list>(<argument><expr><name>c</name> <operator>-</operator> <name>cli1</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <name>d1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>c2</name> <init>= <expr><call><name>av_clip_uint16</name><argument_list>(<argument><expr><operator>(</operator><call><name>FFABS</name><argument_list>(<argument><expr><name>c</name> <operator>-</operator> <name>cli2</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <name>d2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>c3</name> <init>= <expr><call><name>av_clip_uint16</name><argument_list>(<argument><expr><operator>(</operator><call><name>FFABS</name><argument_list>(<argument><expr><name>c</name> <operator>-</operator> <name>cli3</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <name>d3</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>c4</name> <init>= <expr><call><name>av_clip_uint16</name><argument_list>(<argument><expr><operator>(</operator><call><name>FFABS</name><argument_list>(<argument><expr><name>c</name> <operator>-</operator> <name>cli4</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <name>d4</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>mindiff</name> <init>= <expr><call><name>FFMIN</name><argument_list>(<argument><expr><call><name>FFMIN</name><argument_list>(<argument><expr><name>c1</name></expr></argument>, <argument><expr><name>c2</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>FFMIN</name><argument_list>(<argument><expr><name>c3</name></expr></argument>, <argument><expr><name>c4</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>mindiff</name> <operator>==</operator> <name>c4</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>cli4</name></expr>;</return>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>mindiff</name> <operator>==</operator> <name>c2</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>cli2</name></expr>;</return>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>mindiff</name> <operator>==</operator> <name>c3</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>cli3</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>cli1</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mode07</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>a1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>a2</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>a3</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>a4</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>a5</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>a6</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>a7</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>a8</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>REMOVE_GRAIN_SORT_AXIS</name>

<specifier>const</specifier> <name>int</name></type> <name>d1</name> <init>= <expr><name>ma1</name> <operator>-</operator> <name>mi1</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>d2</name> <init>= <expr><name>ma2</name> <operator>-</operator> <name>mi2</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>d3</name> <init>= <expr><name>ma3</name> <operator>-</operator> <name>mi3</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>d4</name> <init>= <expr><name>ma4</name> <operator>-</operator> <name>mi4</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>cli1</name> <init>= <expr><call><name>av_clip</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>mi1</name></expr></argument>, <argument><expr><name>ma1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>cli2</name> <init>= <expr><call><name>av_clip</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>mi2</name></expr></argument>, <argument><expr><name>ma2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>cli3</name> <init>= <expr><call><name>av_clip</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>mi3</name></expr></argument>, <argument><expr><name>ma3</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>cli4</name> <init>= <expr><call><name>av_clip</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>mi4</name></expr></argument>, <argument><expr><name>ma4</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>c1</name> <init>= <expr><call><name>FFABS</name><argument_list>(<argument><expr><name>c</name> <operator>-</operator> <name>cli1</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>d1</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>c2</name> <init>= <expr><call><name>FFABS</name><argument_list>(<argument><expr><name>c</name> <operator>-</operator> <name>cli2</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>d2</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>c3</name> <init>= <expr><call><name>FFABS</name><argument_list>(<argument><expr><name>c</name> <operator>-</operator> <name>cli3</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>d3</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>c4</name> <init>= <expr><call><name>FFABS</name><argument_list>(<argument><expr><name>c</name> <operator>-</operator> <name>cli4</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>d4</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>mindiff</name> <init>= <expr><call><name>FFMIN</name><argument_list>(<argument><expr><call><name>FFMIN</name><argument_list>(<argument><expr><name>c1</name></expr></argument>, <argument><expr><name>c2</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>FFMIN</name><argument_list>(<argument><expr><name>c3</name></expr></argument>, <argument><expr><name>c4</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>mindiff</name> <operator>==</operator> <name>c4</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>cli4</name></expr>;</return>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>mindiff</name> <operator>==</operator> <name>c2</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>cli2</name></expr>;</return>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>mindiff</name> <operator>==</operator> <name>c3</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>cli3</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>cli1</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mode08</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>a1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>a2</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>a3</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>a4</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>a5</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>a6</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>a7</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>a8</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>REMOVE_GRAIN_SORT_AXIS</name>

<specifier>const</specifier> <name>int</name></type> <name>d1</name> <init>= <expr><name>ma1</name> <operator>-</operator> <name>mi1</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>d2</name> <init>= <expr><name>ma2</name> <operator>-</operator> <name>mi2</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>d3</name> <init>= <expr><name>ma3</name> <operator>-</operator> <name>mi3</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>d4</name> <init>= <expr><name>ma4</name> <operator>-</operator> <name>mi4</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>cli1</name> <init>= <expr><call><name>av_clip</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>mi1</name></expr></argument>, <argument><expr><name>ma1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>cli2</name> <init>= <expr><call><name>av_clip</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>mi2</name></expr></argument>, <argument><expr><name>ma2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>cli3</name> <init>= <expr><call><name>av_clip</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>mi3</name></expr></argument>, <argument><expr><name>ma3</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>cli4</name> <init>= <expr><call><name>av_clip</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>mi4</name></expr></argument>, <argument><expr><name>ma4</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>c1</name> <init>= <expr><call><name>av_clip_uint16</name><argument_list>(<argument><expr><call><name>FFABS</name><argument_list>(<argument><expr><name>c</name> <operator>-</operator> <name>cli1</name></expr></argument>)</argument_list></call> <operator>+</operator> <operator>(</operator><name>d1</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>c2</name> <init>= <expr><call><name>av_clip_uint16</name><argument_list>(<argument><expr><call><name>FFABS</name><argument_list>(<argument><expr><name>c</name> <operator>-</operator> <name>cli2</name></expr></argument>)</argument_list></call> <operator>+</operator> <operator>(</operator><name>d2</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>c3</name> <init>= <expr><call><name>av_clip_uint16</name><argument_list>(<argument><expr><call><name>FFABS</name><argument_list>(<argument><expr><name>c</name> <operator>-</operator> <name>cli3</name></expr></argument>)</argument_list></call> <operator>+</operator> <operator>(</operator><name>d3</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>c4</name> <init>= <expr><call><name>av_clip_uint16</name><argument_list>(<argument><expr><call><name>FFABS</name><argument_list>(<argument><expr><name>c</name> <operator>-</operator> <name>cli4</name></expr></argument>)</argument_list></call> <operator>+</operator> <operator>(</operator><name>d4</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>mindiff</name> <init>= <expr><call><name>FFMIN</name><argument_list>(<argument><expr><call><name>FFMIN</name><argument_list>(<argument><expr><name>c1</name></expr></argument>, <argument><expr><name>c2</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>FFMIN</name><argument_list>(<argument><expr><name>c3</name></expr></argument>, <argument><expr><name>c4</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>mindiff</name> <operator>==</operator> <name>c4</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>cli4</name></expr>;</return>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>mindiff</name> <operator>==</operator> <name>c2</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>cli2</name></expr>;</return>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>mindiff</name> <operator>==</operator> <name>c3</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>cli3</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>cli1</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mode09</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>a1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>a2</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>a3</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>a4</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>a5</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>a6</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>a7</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>a8</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>REMOVE_GRAIN_SORT_AXIS</name>

<specifier>const</specifier> <name>int</name></type> <name>d1</name> <init>= <expr><name>ma1</name> <operator>-</operator> <name>mi1</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>d2</name> <init>= <expr><name>ma2</name> <operator>-</operator> <name>mi2</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>d3</name> <init>= <expr><name>ma3</name> <operator>-</operator> <name>mi3</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>d4</name> <init>= <expr><name>ma4</name> <operator>-</operator> <name>mi4</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>mindiff</name> <init>= <expr><call><name>FFMIN</name><argument_list>(<argument><expr><call><name>FFMIN</name><argument_list>(<argument><expr><name>d1</name></expr></argument>, <argument><expr><name>d2</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>FFMIN</name><argument_list>(<argument><expr><name>d3</name></expr></argument>, <argument><expr><name>d4</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>mindiff</name> <operator>==</operator> <name>d4</name></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>av_clip</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>mi4</name></expr></argument>, <argument><expr><name>ma4</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>mindiff</name> <operator>==</operator> <name>d2</name></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>av_clip</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>mi2</name></expr></argument>, <argument><expr><name>ma2</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>mindiff</name> <operator>==</operator> <name>d3</name></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>av_clip</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>mi3</name></expr></argument>, <argument><expr><name>ma3</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>av_clip</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>mi1</name></expr></argument>, <argument><expr><name>ma1</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mode10</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>a1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>a2</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>a3</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>a4</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>a5</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>a6</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>a7</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>a8</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>d1</name> <init>= <expr><call><name>FFABS</name><argument_list>(<argument><expr><name>c</name> <operator>-</operator> <name>a1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>d2</name> <init>= <expr><call><name>FFABS</name><argument_list>(<argument><expr><name>c</name> <operator>-</operator> <name>a2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>d3</name> <init>= <expr><call><name>FFABS</name><argument_list>(<argument><expr><name>c</name> <operator>-</operator> <name>a3</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>d4</name> <init>= <expr><call><name>FFABS</name><argument_list>(<argument><expr><name>c</name> <operator>-</operator> <name>a4</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>d5</name> <init>= <expr><call><name>FFABS</name><argument_list>(<argument><expr><name>c</name> <operator>-</operator> <name>a5</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>d6</name> <init>= <expr><call><name>FFABS</name><argument_list>(<argument><expr><name>c</name> <operator>-</operator> <name>a6</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>d7</name> <init>= <expr><call><name>FFABS</name><argument_list>(<argument><expr><name>c</name> <operator>-</operator> <name>a7</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>d8</name> <init>= <expr><call><name>FFABS</name><argument_list>(<argument><expr><name>c</name> <operator>-</operator> <name>a8</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>mindiff</name> <init>= <expr><call><name>FFMIN</name><argument_list>(<argument><expr><call><name>FFMIN</name><argument_list>(<argument><expr><call><name>FFMIN</name><argument_list>(<argument><expr><name>d1</name></expr></argument>, <argument><expr><name>d2</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>FFMIN</name><argument_list>(<argument><expr><name>d3</name></expr></argument>, <argument><expr><name>d4</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>FFMIN</name><argument_list>(<argument><expr><call><name>FFMIN</name><argument_list>(<argument><expr><name>d5</name></expr></argument>, <argument><expr><name>d6</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>FFMIN</name><argument_list>(<argument><expr><name>d7</name></expr></argument>, <argument><expr><name>d8</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>mindiff</name> <operator>==</operator> <name>d7</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>a7</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>mindiff</name> <operator>==</operator> <name>d8</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>a8</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>mindiff</name> <operator>==</operator> <name>d6</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>a6</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>mindiff</name> <operator>==</operator> <name>d2</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>a2</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>mindiff</name> <operator>==</operator> <name>d3</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>a3</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>mindiff</name> <operator>==</operator> <name>d1</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>a1</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>mindiff</name> <operator>==</operator> <name>d5</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>a5</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>a4</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mode1112</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>a1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>a2</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>a3</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>a4</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>a5</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>a6</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>a7</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>a8</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>sum</name> <init>= <expr><literal type="number">4</literal> <operator>*</operator> <name>c</name> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <operator>(</operator><name>a2</name> <operator>+</operator> <name>a4</name> <operator>+</operator> <name>a5</name> <operator>+</operator> <name>a7</name><operator>)</operator> <operator>+</operator> <name>a1</name> <operator>+</operator> <name>a3</name> <operator>+</operator> <name>a6</name> <operator>+</operator> <name>a8</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>val</name> <init>= <expr><operator>(</operator><name>sum</name> <operator>+</operator> <literal type="number">8</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr></init></decl>;</decl_stmt>

<return>return <expr><name>val</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mode1314</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>a1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>a2</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>a3</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>a4</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>a5</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>a6</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>a7</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>a8</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>d1</name> <init>= <expr><call><name>FFABS</name><argument_list>(<argument><expr><name>a1</name> <operator>-</operator> <name>a8</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>d2</name> <init>= <expr><call><name>FFABS</name><argument_list>(<argument><expr><name>a2</name> <operator>-</operator> <name>a7</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>d3</name> <init>= <expr><call><name>FFABS</name><argument_list>(<argument><expr><name>a3</name> <operator>-</operator> <name>a6</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>mindiff</name> <init>= <expr><call><name>FFMIN</name><argument_list>(<argument><expr><call><name>FFMIN</name><argument_list>(<argument><expr><name>d1</name></expr></argument>, <argument><expr><name>d2</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>d3</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>mindiff</name> <operator>==</operator> <name>d2</name></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>(</operator><name>a2</name> <operator>+</operator> <name>a7</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>mindiff</name> <operator>==</operator> <name>d3</name></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>(</operator><name>a3</name> <operator>+</operator> <name>a6</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><operator>(</operator><name>a1</name> <operator>+</operator> <name>a8</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mode1516</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>a1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>a2</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>a3</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>a4</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>a5</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>a6</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>a7</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>a8</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>d1</name> <init>= <expr><call><name>FFABS</name><argument_list>(<argument><expr><name>a1</name> <operator>-</operator> <name>a8</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>d2</name> <init>= <expr><call><name>FFABS</name><argument_list>(<argument><expr><name>a2</name> <operator>-</operator> <name>a7</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>d3</name> <init>= <expr><call><name>FFABS</name><argument_list>(<argument><expr><name>a3</name> <operator>-</operator> <name>a6</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>mindiff</name> <init>= <expr><call><name>FFMIN</name><argument_list>(<argument><expr><call><name>FFMIN</name><argument_list>(<argument><expr><name>d1</name></expr></argument>, <argument><expr><name>d2</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>d3</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>average</name> <init>= <expr><operator>(</operator><literal type="number">2</literal> <operator>*</operator> <operator>(</operator><name>a2</name> <operator>+</operator> <name>a7</name><operator>)</operator> <operator>+</operator> <name>a1</name> <operator>+</operator> <name>a3</name> <operator>+</operator> <name>a6</name> <operator>+</operator> <name>a8</name> <operator>+</operator> <literal type="number">4</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>mindiff</name> <operator>==</operator> <name>d2</name></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>av_clip</name><argument_list>(<argument><expr><name>average</name></expr></argument>, <argument><expr><call><name>FFMIN</name><argument_list>(<argument><expr><name>a2</name></expr></argument>, <argument><expr><name>a7</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>FFMAX</name><argument_list>(<argument><expr><name>a2</name></expr></argument>, <argument><expr><name>a7</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>mindiff</name> <operator>==</operator> <name>d3</name></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>av_clip</name><argument_list>(<argument><expr><name>average</name></expr></argument>, <argument><expr><call><name>FFMIN</name><argument_list>(<argument><expr><name>a3</name></expr></argument>, <argument><expr><name>a6</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>FFMAX</name><argument_list>(<argument><expr><name>a3</name></expr></argument>, <argument><expr><name>a6</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>av_clip</name><argument_list>(<argument><expr><name>average</name></expr></argument>, <argument><expr><call><name>FFMIN</name><argument_list>(<argument><expr><name>a1</name></expr></argument>, <argument><expr><name>a8</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>FFMAX</name><argument_list>(<argument><expr><name>a1</name></expr></argument>, <argument><expr><name>a8</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mode17</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>a1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>a2</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>a3</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>a4</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>a5</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>a6</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>a7</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>a8</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>REMOVE_GRAIN_SORT_AXIS</name>

<specifier>const</specifier> <name>int</name></type> <name>l</name> <init>= <expr><call><name>FFMAX</name><argument_list>(<argument><expr><call><name>FFMAX</name><argument_list>(<argument><expr><name>mi1</name></expr></argument>, <argument><expr><name>mi2</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>FFMAX</name><argument_list>(<argument><expr><name>mi3</name></expr></argument>, <argument><expr><name>mi4</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>u</name> <init>= <expr><call><name>FFMIN</name><argument_list>(<argument><expr><call><name>FFMIN</name><argument_list>(<argument><expr><name>ma1</name></expr></argument>, <argument><expr><name>ma2</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>FFMIN</name><argument_list>(<argument><expr><name>ma3</name></expr></argument>, <argument><expr><name>ma4</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>av_clip</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><call><name>FFMIN</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><name>u</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>FFMAX</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><name>u</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mode18</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>a1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>a2</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>a3</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>a4</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>a5</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>a6</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>a7</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>a8</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>d1</name> <init>= <expr><call><name>FFMAX</name><argument_list>(<argument><expr><call><name>FFABS</name><argument_list>(<argument><expr><name>c</name> <operator>-</operator> <name>a1</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>FFABS</name><argument_list>(<argument><expr><name>c</name> <operator>-</operator> <name>a8</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>d2</name> <init>= <expr><call><name>FFMAX</name><argument_list>(<argument><expr><call><name>FFABS</name><argument_list>(<argument><expr><name>c</name> <operator>-</operator> <name>a2</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>FFABS</name><argument_list>(<argument><expr><name>c</name> <operator>-</operator> <name>a7</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>d3</name> <init>= <expr><call><name>FFMAX</name><argument_list>(<argument><expr><call><name>FFABS</name><argument_list>(<argument><expr><name>c</name> <operator>-</operator> <name>a3</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>FFABS</name><argument_list>(<argument><expr><name>c</name> <operator>-</operator> <name>a6</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>d4</name> <init>= <expr><call><name>FFMAX</name><argument_list>(<argument><expr><call><name>FFABS</name><argument_list>(<argument><expr><name>c</name> <operator>-</operator> <name>a4</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>FFABS</name><argument_list>(<argument><expr><name>c</name> <operator>-</operator> <name>a5</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>mindiff</name> <init>= <expr><call><name>FFMIN</name><argument_list>(<argument><expr><call><name>FFMIN</name><argument_list>(<argument><expr><name>d1</name></expr></argument>, <argument><expr><name>d2</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>FFMIN</name><argument_list>(<argument><expr><name>d3</name></expr></argument>, <argument><expr><name>d4</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>mindiff</name> <operator>==</operator> <name>d4</name></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>av_clip</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><call><name>FFMIN</name><argument_list>(<argument><expr><name>a4</name></expr></argument>, <argument><expr><name>a5</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>FFMAX</name><argument_list>(<argument><expr><name>a4</name></expr></argument>, <argument><expr><name>a5</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>mindiff</name> <operator>==</operator> <name>d2</name></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>av_clip</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><call><name>FFMIN</name><argument_list>(<argument><expr><name>a2</name></expr></argument>, <argument><expr><name>a7</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>FFMAX</name><argument_list>(<argument><expr><name>a2</name></expr></argument>, <argument><expr><name>a7</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>mindiff</name> <operator>==</operator> <name>d3</name></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>av_clip</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><call><name>FFMIN</name><argument_list>(<argument><expr><name>a3</name></expr></argument>, <argument><expr><name>a6</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>FFMAX</name><argument_list>(<argument><expr><name>a3</name></expr></argument>, <argument><expr><name>a6</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>av_clip</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><call><name>FFMIN</name><argument_list>(<argument><expr><name>a1</name></expr></argument>, <argument><expr><name>a8</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>FFMAX</name><argument_list>(<argument><expr><name>a1</name></expr></argument>, <argument><expr><name>a8</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mode19</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>a1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>a2</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>a3</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>a4</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>a5</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>a6</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>a7</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>a8</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>sum</name> <init>= <expr><name>a1</name> <operator>+</operator> <name>a2</name> <operator>+</operator> <name>a3</name> <operator>+</operator> <name>a4</name> <operator>+</operator> <name>a5</name> <operator>+</operator> <name>a6</name> <operator>+</operator> <name>a7</name> <operator>+</operator> <name>a8</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>val</name> <init>= <expr><operator>(</operator><name>sum</name> <operator>+</operator> <literal type="number">4</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt>

<return>return <expr><name>val</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mode20</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>a1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>a2</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>a3</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>a4</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>a5</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>a6</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>a7</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>a8</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>sum</name> <init>= <expr><name>a1</name> <operator>+</operator> <name>a2</name> <operator>+</operator> <name>a3</name> <operator>+</operator> <name>a4</name> <operator>+</operator> <name>c</name> <operator>+</operator> <name>a5</name> <operator>+</operator> <name>a6</name> <operator>+</operator> <name>a7</name> <operator>+</operator> <name>a8</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>val</name> <init>= <expr><operator>(</operator><name>sum</name> <operator>+</operator> <literal type="number">4</literal><operator>)</operator> <operator>/</operator> <literal type="number">9</literal></expr></init></decl>;</decl_stmt>

<return>return <expr><name>val</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mode21</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>a1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>a2</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>a3</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>a4</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>a5</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>a6</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>a7</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>a8</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>l1l</name> <init>= <expr><operator>(</operator><name>a1</name> <operator>+</operator> <name>a8</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>l2l</name> <init>= <expr><operator>(</operator><name>a2</name> <operator>+</operator> <name>a7</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>l3l</name> <init>= <expr><operator>(</operator><name>a3</name> <operator>+</operator> <name>a6</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>l4l</name> <init>= <expr><operator>(</operator><name>a4</name> <operator>+</operator> <name>a5</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>l1h</name> <init>= <expr><operator>(</operator><name>a1</name> <operator>+</operator> <name>a8</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>l2h</name> <init>= <expr><operator>(</operator><name>a2</name> <operator>+</operator> <name>a7</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>l3h</name> <init>= <expr><operator>(</operator><name>a3</name> <operator>+</operator> <name>a6</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>l4h</name> <init>= <expr><operator>(</operator><name>a4</name> <operator>+</operator> <name>a5</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>mi</name> <init>= <expr><call><name>FFMIN</name><argument_list>(<argument><expr><call><name>FFMIN</name><argument_list>(<argument><expr><name>l1l</name></expr></argument>, <argument><expr><name>l2l</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>FFMIN</name><argument_list>(<argument><expr><name>l3l</name></expr></argument>, <argument><expr><name>l4l</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>ma</name> <init>= <expr><call><name>FFMAX</name><argument_list>(<argument><expr><call><name>FFMAX</name><argument_list>(<argument><expr><name>l1h</name></expr></argument>, <argument><expr><name>l2h</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>FFMAX</name><argument_list>(<argument><expr><name>l3h</name></expr></argument>, <argument><expr><name>l4h</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>av_clip</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>mi</name></expr></argument>, <argument><expr><name>ma</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mode22</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>a1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>a2</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>a3</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>a4</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>a5</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>a6</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>a7</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>a8</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>l1</name> <init>= <expr><operator>(</operator><name>a1</name> <operator>+</operator> <name>a8</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>l2</name> <init>= <expr><operator>(</operator><name>a2</name> <operator>+</operator> <name>a7</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>l3</name> <init>= <expr><operator>(</operator><name>a3</name> <operator>+</operator> <name>a6</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>l4</name> <init>= <expr><operator>(</operator><name>a4</name> <operator>+</operator> <name>a5</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>mi</name> <init>= <expr><call><name>FFMIN</name><argument_list>(<argument><expr><call><name>FFMIN</name><argument_list>(<argument><expr><name>l1</name></expr></argument>, <argument><expr><name>l2</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>FFMIN</name><argument_list>(<argument><expr><name>l3</name></expr></argument>, <argument><expr><name>l4</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>ma</name> <init>= <expr><call><name>FFMAX</name><argument_list>(<argument><expr><call><name>FFMAX</name><argument_list>(<argument><expr><name>l1</name></expr></argument>, <argument><expr><name>l2</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>FFMAX</name><argument_list>(<argument><expr><name>l3</name></expr></argument>, <argument><expr><name>l4</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>av_clip</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>mi</name></expr></argument>, <argument><expr><name>ma</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mode23</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>a1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>a2</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>a3</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>a4</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>a5</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>a6</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>a7</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>a8</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>REMOVE_GRAIN_SORT_AXIS</name>

<specifier>const</specifier> <name>int</name></type> <name>linediff1</name> <init>= <expr><name>ma1</name> <operator>-</operator> <name>mi1</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>linediff2</name> <init>= <expr><name>ma2</name> <operator>-</operator> <name>mi2</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>linediff3</name> <init>= <expr><name>ma3</name> <operator>-</operator> <name>mi3</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>linediff4</name> <init>= <expr><name>ma4</name> <operator>-</operator> <name>mi4</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>u1</name> <init>= <expr><call><name>FFMIN</name><argument_list>(<argument><expr><name>c</name> <operator>-</operator> <name>ma1</name></expr></argument>, <argument><expr><name>linediff1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>u2</name> <init>= <expr><call><name>FFMIN</name><argument_list>(<argument><expr><name>c</name> <operator>-</operator> <name>ma2</name></expr></argument>, <argument><expr><name>linediff2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>u3</name> <init>= <expr><call><name>FFMIN</name><argument_list>(<argument><expr><name>c</name> <operator>-</operator> <name>ma3</name></expr></argument>, <argument><expr><name>linediff3</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>u4</name> <init>= <expr><call><name>FFMIN</name><argument_list>(<argument><expr><name>c</name> <operator>-</operator> <name>ma4</name></expr></argument>, <argument><expr><name>linediff4</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>u</name> <init>= <expr><call><name>FFMAX</name><argument_list>(<argument><expr><call><name>FFMAX</name><argument_list>(<argument><expr><call><name>FFMAX</name><argument_list>(<argument><expr><name>u1</name></expr></argument>, <argument><expr><name>u2</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>FFMAX</name><argument_list>(<argument><expr><name>u3</name></expr></argument>, <argument><expr><name>u4</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>d1</name> <init>= <expr><call><name>FFMIN</name><argument_list>(<argument><expr><name>mi1</name> <operator>-</operator> <name>c</name></expr></argument>, <argument><expr><name>linediff1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>d2</name> <init>= <expr><call><name>FFMIN</name><argument_list>(<argument><expr><name>mi2</name> <operator>-</operator> <name>c</name></expr></argument>, <argument><expr><name>linediff2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>d3</name> <init>= <expr><call><name>FFMIN</name><argument_list>(<argument><expr><name>mi3</name> <operator>-</operator> <name>c</name></expr></argument>, <argument><expr><name>linediff3</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>d4</name> <init>= <expr><call><name>FFMIN</name><argument_list>(<argument><expr><name>mi4</name> <operator>-</operator> <name>c</name></expr></argument>, <argument><expr><name>linediff4</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>d</name> <init>= <expr><call><name>FFMAX</name><argument_list>(<argument><expr><call><name>FFMAX</name><argument_list>(<argument><expr><call><name>FFMAX</name><argument_list>(<argument><expr><name>d1</name></expr></argument>, <argument><expr><name>d2</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>FFMAX</name><argument_list>(<argument><expr><name>d3</name></expr></argument>, <argument><expr><name>d4</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><name>c</name> <operator>-</operator> <name>u</name> <operator>+</operator> <name>d</name></expr>;</return> 

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mode24</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>a1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>a2</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>a3</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>a4</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>a5</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>a6</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>a7</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>a8</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>REMOVE_GRAIN_SORT_AXIS</name>

<specifier>const</specifier> <name>int</name></type> <name>linediff1</name> <init>= <expr><name>ma1</name> <operator>-</operator> <name>mi1</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>linediff2</name> <init>= <expr><name>ma2</name> <operator>-</operator> <name>mi2</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>linediff3</name> <init>= <expr><name>ma3</name> <operator>-</operator> <name>mi3</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>linediff4</name> <init>= <expr><name>ma4</name> <operator>-</operator> <name>mi4</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>tu1</name> <init>= <expr><name>c</name> <operator>-</operator> <name>ma1</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>tu2</name> <init>= <expr><name>c</name> <operator>-</operator> <name>ma2</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>tu3</name> <init>= <expr><name>c</name> <operator>-</operator> <name>ma3</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>tu4</name> <init>= <expr><name>c</name> <operator>-</operator> <name>ma4</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>u1</name> <init>= <expr><call><name>FFMIN</name><argument_list>(<argument><expr><name>tu1</name></expr></argument>, <argument><expr><name>linediff1</name> <operator>-</operator> <name>tu1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>u2</name> <init>= <expr><call><name>FFMIN</name><argument_list>(<argument><expr><name>tu2</name></expr></argument>, <argument><expr><name>linediff2</name> <operator>-</operator> <name>tu2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>u3</name> <init>= <expr><call><name>FFMIN</name><argument_list>(<argument><expr><name>tu3</name></expr></argument>, <argument><expr><name>linediff3</name> <operator>-</operator> <name>tu3</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>u4</name> <init>= <expr><call><name>FFMIN</name><argument_list>(<argument><expr><name>tu4</name></expr></argument>, <argument><expr><name>linediff4</name> <operator>-</operator> <name>tu4</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>u</name> <init>= <expr><call><name>FFMAX</name><argument_list>(<argument><expr><call><name>FFMAX</name><argument_list>(<argument><expr><call><name>FFMAX</name><argument_list>(<argument><expr><name>u1</name></expr></argument>, <argument><expr><name>u2</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>FFMAX</name><argument_list>(<argument><expr><name>u3</name></expr></argument>, <argument><expr><name>u4</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>td1</name> <init>= <expr><name>mi1</name> <operator>-</operator> <name>c</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>td2</name> <init>= <expr><name>mi2</name> <operator>-</operator> <name>c</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>td3</name> <init>= <expr><name>mi3</name> <operator>-</operator> <name>c</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>td4</name> <init>= <expr><name>mi4</name> <operator>-</operator> <name>c</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>d1</name> <init>= <expr><call><name>FFMIN</name><argument_list>(<argument><expr><name>td1</name></expr></argument>, <argument><expr><name>linediff1</name> <operator>-</operator> <name>td1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>d2</name> <init>= <expr><call><name>FFMIN</name><argument_list>(<argument><expr><name>td2</name></expr></argument>, <argument><expr><name>linediff2</name> <operator>-</operator> <name>td2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>d3</name> <init>= <expr><call><name>FFMIN</name><argument_list>(<argument><expr><name>td3</name></expr></argument>, <argument><expr><name>linediff3</name> <operator>-</operator> <name>td3</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>d4</name> <init>= <expr><call><name>FFMIN</name><argument_list>(<argument><expr><name>td4</name></expr></argument>, <argument><expr><name>linediff4</name> <operator>-</operator> <name>td4</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>d</name> <init>= <expr><call><name>FFMAX</name><argument_list>(<argument><expr><call><name>FFMAX</name><argument_list>(<argument><expr><call><name>FFMAX</name><argument_list>(<argument><expr><name>d1</name></expr></argument>, <argument><expr><name>d2</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>FFMAX</name><argument_list>(<argument><expr><name>d3</name></expr></argument>, <argument><expr><name>d4</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><name>c</name> <operator>-</operator> <name>u</name> <operator>+</operator> <name>d</name></expr>;</return> 

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>config_input</name><parameter_list>(<parameter><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>inlink</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>RemoveGrainContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>inlink</name><operator>-&gt;</operator><name>dst</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>AVPixFmtDescriptor</name> <modifier>*</modifier></type><name>desc</name> <init>= <expr><call><name>av_pix_fmt_desc_get</name><argument_list>(<argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>format</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>nb_planes</name></name> <operator>=</operator> <call><name>av_pix_fmt_count_planes</name><argument_list>(<argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>format</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>planeheight</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>planeheight</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>AV_CEIL_RSHIFT</name><argument_list>(<argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>h</name></name></expr></argument>, <argument><expr><name><name>desc</name><operator>-&gt;</operator><name>log2_chroma_h</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>planeheight</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>planeheight</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>inlink</name><operator>-&gt;</operator><name>h</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>planewidth</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>planewidth</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>AV_CEIL_RSHIFT</name><argument_list>(<argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>w</name></name></expr></argument>, <argument><expr><name><name>desc</name><operator>-&gt;</operator><name>log2_chroma_w</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>planewidth</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>planewidth</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>inlink</name><operator>-&gt;</operator><name>w</name></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>nb_planes</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<switch>switch <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>mode</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">1</literal></expr>:</case> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>rg</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>mode01</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">2</literal></expr>:</case> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>rg</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>mode02</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">3</literal></expr>:</case> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>rg</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>mode03</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">4</literal></expr>:</case> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>rg</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>mode04</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">5</literal></expr>:</case> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>rg</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>mode05</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">6</literal></expr>:</case> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>rg</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>mode06</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">7</literal></expr>:</case> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>rg</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>mode07</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">8</literal></expr>:</case> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>rg</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>mode08</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">9</literal></expr>:</case> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>rg</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>mode09</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">10</literal></expr>:</case> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>rg</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>mode10</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">11</literal></expr>:</case> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>rg</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>mode1112</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">12</literal></expr>:</case> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>rg</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>mode1112</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">13</literal></expr>:</case> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>skip_odd</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>rg</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>mode1314</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">14</literal></expr>:</case> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>skip_even</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>rg</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>mode1314</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">15</literal></expr>:</case> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>skip_odd</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>rg</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>mode1516</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">16</literal></expr>:</case> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>skip_even</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>rg</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>mode1516</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">17</literal></expr>:</case> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>rg</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>mode17</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">18</literal></expr>:</case> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>rg</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>mode18</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">19</literal></expr>:</case> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>rg</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>mode19</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">20</literal></expr>:</case> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>rg</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>mode20</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">21</literal></expr>:</case> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>rg</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>mode21</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">22</literal></expr>:</case> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>rg</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>mode22</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">23</literal></expr>:</case> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>rg</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>mode23</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">24</literal></expr>:</case> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>rg</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>mode24</name></expr>;</expr_stmt> <break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>ARCH_X86</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ff_removegrain_init_x86</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<typedef>typedef <type><struct>struct <name>ThreadData</name> <block>{

<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>in</name></decl>, <modifier>*</modifier><name>out</name>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>plane</name></decl>;</decl_stmt>

}</block></struct></type> <name>ThreadData</name>;</typedef>

<function><type><specifier>static</specifier> <name>int</name></type> <name>filter_slice</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>jobnr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nb_jobs</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>RemoveGrainContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ThreadData</name> <modifier>*</modifier></type><name>td</name> <init>= <expr><name>arg</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>in</name> <init>= <expr><name><name>td</name><operator>-&gt;</operator><name>in</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>out</name> <init>= <expr><name><name>td</name><operator>-&gt;</operator><name>out</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i</name> <init>= <expr><name><name>td</name><operator>-&gt;</operator><name>plane</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>height</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>planeheight</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>om</name> <init>= <expr><name><name>in</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>o0</name> <init>= <expr><name><name>in</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>op</name> <init>= <expr><name><name>in</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>start</name> <init>= <expr><operator>(</operator><name>height</name> <operator>*</operator> <name>jobnr</name> <operator>)</operator> <operator>/</operator> <name>nb_jobs</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>end</name> <init>= <expr><operator>(</operator><name>height</name> <operator>*</operator> <operator>(</operator><name>jobnr</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>/</operator> <name>nb_jobs</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>

<expr_stmt><expr><name>start</name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>end</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>height</name><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <name>start</name></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>end</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><name><name>in</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>src</name> <operator>=</operator> <name><name>in</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name>y</name> <operator>*</operator> <name><name>in</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>dst</name> <operator>=</operator> <name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name>y</name> <operator>*</operator> <name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>skip_even</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>y</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>planewidth</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>skip_odd</name></name> <operator>&amp;&amp;</operator> <name>y</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>planewidth</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>dst</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>src</name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>fl</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>w_asm</name> <init>= <expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>planewidth</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <literal type="number">2</literal><operator>)</operator> <operator>&amp;</operator> <operator>~</operator><literal type="number">15</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>fl</name><index>[<expr><name>i</name></expr>]</index></name><operator>(</operator><name>dst</name><operator>,</operator> <name>src</name><operator>,</operator> <name><name>in</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>i</name></expr>]</index></name><operator>,</operator> <name>w_asm</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>x</name> <operator>=</operator> <literal type="number">1</literal> <operator>+</operator> <name>w_asm</name></expr>;</expr_stmt>

<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>w_asm</name></expr>;</expr_stmt>

<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>w_asm</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>x</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<for>for <control>(<init>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>planewidth</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>a1</name> <init>= <expr><name><name>src</name><index>[<expr><operator>-</operator><name>op</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>a2</name> <init>= <expr><name><name>src</name><index>[<expr><operator>-</operator><name>o0</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>a3</name> <init>= <expr><name><name>src</name><index>[<expr><operator>-</operator><name>om</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>a4</name> <init>= <expr><name><name>src</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr> ]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>c</name> <init>= <expr><name><name>src</name><index>[ <expr><literal type="number">0</literal></expr> ]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>a5</name> <init>= <expr><name><name>src</name><index>[ <expr><literal type="number">1</literal></expr> ]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>a6</name> <init>= <expr><name><name>src</name><index>[ <expr><name>om</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>a7</name> <init>= <expr><name><name>src</name><index>[ <expr><name>o0</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>a8</name> <init>= <expr><name><name>src</name><index>[ <expr><name>op</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>res</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>rg</name><index>[<expr><name>i</name></expr>]</index></name><operator>(</operator><name>c</name>, <name>a1</name>, <name>a2</name>, <name>a3</name>, <name>a4</name>, <name>a5</name>, <name>a6</name>, <name>a7</name>, <name>a8</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>dst</name> <operator>=</operator> <name>res</name></expr>;</expr_stmt>

<expr_stmt><expr><name>dst</name><operator>++</operator></expr><operator>,</operator> <expr><name>src</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>filter_frame</name><parameter_list>(<parameter><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>inlink</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>in</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>inlink</name><operator>-&gt;</operator><name>dst</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>outlink</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>outputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RemoveGrainContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ThreadData</name></type> <name>td</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>out</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name>out</name> <operator>=</operator> <call><name>ff_get_video_buffer</name><argument_list>(<argument><expr><name>outlink</name></expr></argument>, <argument><expr><name><name>outlink</name><operator>-&gt;</operator><name>w</name></name></expr></argument>, <argument><expr><name><name>outlink</name><operator>-&gt;</operator><name>h</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>out</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_frame_copy_props</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>nb_planes</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><name><name>in</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>mode</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_image_copy_plane</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,

<argument><expr><name>src</name></expr></argument>, <argument><expr><name><name>in</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>planewidth</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>planeheight</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>planewidth</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>td</name><operator>.</operator><name>in</name></name> <operator>=</operator> <name>in</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>td</name><operator>.</operator><name>out</name></name> <operator>=</operator> <name>out</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>td</name><operator>.</operator><name>plane</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>ctx</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>filter_slice</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>td</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,

<argument><expr><call><name>FFMIN</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>planeheight</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><call><name>ff_filter_get_nb_threads</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>src</name> <operator>=</operator> <name><name>in</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>planeheight</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name><name>in</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>dst</name> <operator>=</operator> <name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>planeheight</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>planewidth</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>ff_filter_frame</name><argument_list>(<argument><expr><name>outlink</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVFilterPad</name></type> <name><name>removegrain_inputs</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"default"</literal></expr>,

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,

<expr><operator>.</operator><name>filter_frame</name> <operator>=</operator> <name>filter_frame</name></expr>,

<expr><operator>.</operator><name>config_props</name> <operator>=</operator> <name>config_input</name></expr>,

}</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVFilterPad</name></type> <name><name>removegrain_outputs</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"default"</literal></expr>,

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,

}</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFilter</name></type> <name>ff_vf_removegrain</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"removegrain"</literal></expr>,

<expr><operator>.</operator><name>description</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"Remove grain."</literal></expr></argument>)</argument_list></call></expr>,

<expr><operator>.</operator><name>priv_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>RemoveGrainContext</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><operator>.</operator><name>query_formats</name> <operator>=</operator> <name>query_formats</name></expr>,

<expr><operator>.</operator><name>inputs</name> <operator>=</operator> <name>removegrain_inputs</name></expr>,

<expr><operator>.</operator><name>outputs</name> <operator>=</operator> <name>removegrain_outputs</name></expr>,

<expr><operator>.</operator><name>priv_class</name> <operator>=</operator> <operator>&amp;</operator><name>removegrain_class</name></expr>,

<expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>AVFILTER_FLAG_SUPPORT_TIMELINE_GENERIC</name> <operator>|</operator> <name>AVFILTER_FLAG_SLICE_THREADS</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

</unit>
