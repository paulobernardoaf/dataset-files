<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavfilter\af_asoftclip.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/channel_layout.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/opt.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avfilter.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"audio.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"formats.h"</cpp:file></cpp:include>

<enum>enum <name>ASoftClipTypes</name> <block>{

<decl><name>ASC_TANH</name></decl>,

<decl><name>ASC_ATAN</name></decl>,

<decl><name>ASC_CUBIC</name></decl>,

<decl><name>ASC_EXP</name></decl>,

<decl><name>ASC_ALG</name></decl>,

<decl><name>ASC_QUINTIC</name></decl>,

<decl><name>ASC_SIN</name></decl>,

<decl><name>NB_TYPES</name></decl>,

}</block>;</enum>

<typedef>typedef <type><struct>struct <name>ASoftClipContext</name> <block>{

<decl_stmt><decl><type><specifier>const</specifier> <name>AVClass</name> <modifier>*</modifier></type><name>class</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>type</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>param</name></decl>;</decl_stmt>

<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>filter</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ASoftClipContext</name></name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>src</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>nb_samples</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>channels</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>start</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>end</name></decl></parameter>)</parameter_list>;</function_decl>

}</block></struct></type> <name>ASoftClipContext</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OFFSET</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>offsetof(ASoftClipContext, x)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>A</name></cpp:macro> <cpp:value>AV_OPT_FLAG_AUDIO_PARAM|AV_OPT_FLAG_FILTERING_PARAM|AV_OPT_FLAG_RUNTIME_PARAM</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVOption</name></type> <name><name>asoftclip_options</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><literal type="string">"type"</literal></expr>, <expr><literal type="string">"set softclip type"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">0</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NB_TYPES</name><operator>-</operator><literal type="number">1</literal></expr>, <expr><name>A</name></expr>, <expr><literal type="string">"types"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"tanh"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>ASC_TANH</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>A</name></expr>, <expr><literal type="string">"types"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"atan"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>ASC_ATAN</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>A</name></expr>, <expr><literal type="string">"types"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"cubic"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>ASC_CUBIC</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>A</name></expr>, <expr><literal type="string">"types"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"exp"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>ASC_EXP</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>A</name></expr>, <expr><literal type="string">"types"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"alg"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>ASC_ALG</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>A</name></expr>, <expr><literal type="string">"types"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"quintic"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>ASC_QUINTIC</name></expr>}</block></expr>,<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>A</name></expr>, <expr><literal type="string">"types"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"sin"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>ASC_SIN</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>A</name></expr>, <expr><literal type="string">"types"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"param"</literal></expr>, <expr><literal type="string">"set softclip parameter"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>param</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_DOUBLE</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name><operator>=</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><literal type="number">0.01</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><name>A</name></expr> }</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>AVFILTER_DEFINE_CLASS</name><argument_list>(<argument><expr><name>asoftclip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function><type><specifier>static</specifier> <name>int</name></type> <name>query_formats</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVFilterFormats</name> <modifier>*</modifier></type><name>formats</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFilterChannelLayouts</name> <modifier>*</modifier></type><name>layouts</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>enum</name> <name>AVSampleFormat</name></name></type> <name><name>sample_fmts</name><index>[]</index></name> <init>= <expr><block>{

<expr><name>AV_SAMPLE_FMT_FLT</name></expr>, <expr><name>AV_SAMPLE_FMT_FLTP</name></expr>,

<expr><name>AV_SAMPLE_FMT_DBL</name></expr>, <expr><name>AV_SAMPLE_FMT_DBLP</name></expr>,

<expr><name>AV_SAMPLE_FMT_NONE</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name>formats</name> <operator>=</operator> <call><name>ff_make_format_list</name><argument_list>(<argument><expr><name>sample_fmts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>formats</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_set_common_formats</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>formats</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>layouts</name> <operator>=</operator> <call><name>ff_all_channel_counts</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>layouts</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_set_common_channel_layouts</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>layouts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>formats</name> <operator>=</operator> <call><name>ff_all_samplerates</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>ff_set_common_samplerates</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>formats</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SQR</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((x) * (x))</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type> <name>filter_flt</name><parameter_list>(<parameter><decl><type><name>ASoftClipContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>dptr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>sptr</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>nb_samples</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>channels</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>start</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>end</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>param</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>param</name></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>c</name> <init>= <expr><name>start</name></expr></init></decl>;</init> <condition><expr><name>c</name> <operator>&lt;</operator> <name>end</name></expr>;</condition> <incr><expr><name>c</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><name><name>sptr</name><index>[<expr><name>c</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><name><name>dptr</name><index>[<expr><name>c</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>ASC_TANH</name></expr>:</case>

<for>for <control>(<init><decl><type><name>int</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name>nb_samples</name></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>dst</name><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <call><name>tanhf</name><argument_list>(<argument><expr><name><name>src</name><index>[<expr><name>n</name></expr>]</index></name> <operator>*</operator> <name>param</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<break>break;</break>

<case>case <expr><name>ASC_ATAN</name></expr>:</case>

<for>for <control>(<init><decl><type><name>int</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name>nb_samples</name></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>dst</name><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <literal type="number">2.f</literal> <operator>/</operator> <name>M_PI</name> <operator>*</operator> <call><name>atanf</name><argument_list>(<argument><expr><name><name>src</name><index>[<expr><name>n</name></expr>]</index></name> <operator>*</operator> <name>param</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<break>break;</break>

<case>case <expr><name>ASC_CUBIC</name></expr>:</case>

<for>for <control>(<init><decl><type><name>int</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name>nb_samples</name></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>FFABS</name><argument_list>(<argument><expr><name><name>src</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">1.5f</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>dst</name><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <call><name>FFSIGN</name><argument_list>(<argument><expr><name><name>src</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>dst</name><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <name><name>src</name><index>[<expr><name>n</name></expr>]</index></name> <operator>-</operator> <literal type="number">0.1481f</literal> <operator>*</operator> <call><name>powf</name><argument_list>(<argument><expr><name><name>src</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">3.f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></for>

<break>break;</break>

<case>case <expr><name>ASC_EXP</name></expr>:</case>

<for>for <control>(<init><decl><type><name>int</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name>nb_samples</name></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>dst</name><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <literal type="number">2.f</literal> <operator>/</operator> <operator>(</operator><literal type="number">1.f</literal> <operator>+</operator> <call><name>expf</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">2.f</literal> <operator>*</operator> <name><name>src</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>-</operator> <literal type="number">1.</literal></expr>;</expr_stmt></block_content></block></for>

<break>break;</break>

<case>case <expr><name>ASC_ALG</name></expr>:</case>

<for>for <control>(<init><decl><type><name>int</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name>nb_samples</name></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>dst</name><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <name><name>src</name><index>[<expr><name>n</name></expr>]</index></name> <operator>/</operator> <operator>(</operator><call><name>sqrtf</name><argument_list>(<argument><expr><name>param</name> <operator>+</operator> <name><name>src</name><index>[<expr><name>n</name></expr>]</index></name> <operator>*</operator> <name><name>src</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt></block_content></block></for>

<break>break;</break>

<case>case <expr><name>ASC_QUINTIC</name></expr>:</case>

<for>for <control>(<init><decl><type><name>int</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name>nb_samples</name></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>FFABS</name><argument_list>(<argument><expr><name><name>src</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">1.25</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>dst</name><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <call><name>FFSIGN</name><argument_list>(<argument><expr><name><name>src</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>dst</name><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <name><name>src</name><index>[<expr><name>n</name></expr>]</index></name> <operator>-</operator> <literal type="number">0.08192f</literal> <operator>*</operator> <call><name>powf</name><argument_list>(<argument><expr><name><name>src</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">5.f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></for>

<break>break;</break>

<case>case <expr><name>ASC_SIN</name></expr>:</case>

<for>for <control>(<init><decl><type><name>int</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name>nb_samples</name></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>FFABS</name><argument_list>(<argument><expr><name><name>src</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <name>M_PI_2</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>dst</name><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <call><name>FFSIGN</name><argument_list>(<argument><expr><name><name>src</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>dst</name><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <call><name>sinf</name><argument_list>(<argument><expr><name><name>src</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></for>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>filter_dbl</name><parameter_list>(<parameter><decl><type><name>ASoftClipContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>dptr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>sptr</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>nb_samples</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>channels</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>start</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>end</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>double</name></type> <name>param</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>param</name></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>c</name> <init>= <expr><name>start</name></expr></init></decl>;</init> <condition><expr><name>c</name> <operator>&lt;</operator> <name>end</name></expr>;</condition> <incr><expr><name>c</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>double</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><name><name>sptr</name><index>[<expr><name>c</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><name><name>dptr</name><index>[<expr><name>c</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>ASC_TANH</name></expr>:</case>

<for>for <control>(<init><decl><type><name>int</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name>nb_samples</name></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>dst</name><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <call><name>tanh</name><argument_list>(<argument><expr><name><name>src</name><index>[<expr><name>n</name></expr>]</index></name> <operator>*</operator> <name>param</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<break>break;</break>

<case>case <expr><name>ASC_ATAN</name></expr>:</case>

<for>for <control>(<init><decl><type><name>int</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name>nb_samples</name></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>dst</name><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <literal type="number">2.</literal> <operator>/</operator> <name>M_PI</name> <operator>*</operator> <call><name>atan</name><argument_list>(<argument><expr><name><name>src</name><index>[<expr><name>n</name></expr>]</index></name> <operator>*</operator> <name>param</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<break>break;</break>

<case>case <expr><name>ASC_CUBIC</name></expr>:</case>

<for>for <control>(<init><decl><type><name>int</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name>nb_samples</name></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>FFABS</name><argument_list>(<argument><expr><name><name>src</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">1.5</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>dst</name><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <call><name>FFSIGN</name><argument_list>(<argument><expr><name><name>src</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>dst</name><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <name><name>src</name><index>[<expr><name>n</name></expr>]</index></name> <operator>-</operator> <literal type="number">0.1481</literal> <operator>*</operator> <call><name>pow</name><argument_list>(<argument><expr><name><name>src</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">3.</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></for>

<break>break;</break>

<case>case <expr><name>ASC_EXP</name></expr>:</case>

<for>for <control>(<init><decl><type><name>int</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name>nb_samples</name></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>dst</name><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <literal type="number">2.</literal> <operator>/</operator> <operator>(</operator><literal type="number">1.</literal> <operator>+</operator> <call><name>exp</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">2.</literal> <operator>*</operator> <name><name>src</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>-</operator> <literal type="number">1.</literal></expr>;</expr_stmt></block_content></block></for>

<break>break;</break>

<case>case <expr><name>ASC_ALG</name></expr>:</case>

<for>for <control>(<init><decl><type><name>int</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name>nb_samples</name></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>dst</name><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <name><name>src</name><index>[<expr><name>n</name></expr>]</index></name> <operator>/</operator> <operator>(</operator><call><name>sqrt</name><argument_list>(<argument><expr><name>param</name> <operator>+</operator> <name><name>src</name><index>[<expr><name>n</name></expr>]</index></name> <operator>*</operator> <name><name>src</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt></block_content></block></for>

<break>break;</break>

<case>case <expr><name>ASC_QUINTIC</name></expr>:</case>

<for>for <control>(<init><decl><type><name>int</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name>nb_samples</name></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>FFABS</name><argument_list>(<argument><expr><name><name>src</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">1.25</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>dst</name><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <call><name>FFSIGN</name><argument_list>(<argument><expr><name><name>src</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>dst</name><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <name><name>src</name><index>[<expr><name>n</name></expr>]</index></name> <operator>-</operator> <literal type="number">0.08192</literal> <operator>*</operator> <call><name>pow</name><argument_list>(<argument><expr><name><name>src</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">5.</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></for>

<break>break;</break>

<case>case <expr><name>ASC_SIN</name></expr>:</case>

<for>for <control>(<init><decl><type><name>int</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name>nb_samples</name></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>FFABS</name><argument_list>(<argument><expr><name><name>src</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <name>M_PI_2</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>dst</name><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <call><name>FFSIGN</name><argument_list>(<argument><expr><name><name>src</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>dst</name><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <call><name>sin</name><argument_list>(<argument><expr><name><name>src</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></for>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>config_input</name><parameter_list>(<parameter><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>inlink</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>inlink</name><operator>-&gt;</operator><name>dst</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ASoftClipContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>inlink</name><operator>-&gt;</operator><name>format</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>AV_SAMPLE_FMT_FLT</name></expr>:</case>

<case>case <expr><name>AV_SAMPLE_FMT_FLTP</name></expr>:</case> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>filter</name></name> <operator>=</operator> <name>filter_flt</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>AV_SAMPLE_FMT_DBL</name></expr>:</case>

<case>case <expr><name>AV_SAMPLE_FMT_DBLP</name></expr>:</case> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>filter</name></name> <operator>=</operator> <name>filter_dbl</name></expr>;</expr_stmt> <break>break;</break>

</block_content>}</block></switch>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<typedef>typedef <type><struct>struct <name>ThreadData</name> <block>{

<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>in</name></decl>, <modifier>*</modifier><name>out</name>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>nb_samples</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>channels</name></decl>;</decl_stmt>

}</block></struct></type> <name>ThreadData</name>;</typedef>

<function><type><specifier>static</specifier> <name>int</name></type> <name>filter_channels</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>jobnr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nb_jobs</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ASoftClipContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ThreadData</name> <modifier>*</modifier></type><name>td</name> <init>= <expr><name>arg</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>out</name> <init>= <expr><name><name>td</name><operator>-&gt;</operator><name>out</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>in</name> <init>= <expr><name><name>td</name><operator>-&gt;</operator><name>in</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>channels</name> <init>= <expr><name><name>td</name><operator>-&gt;</operator><name>channels</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>nb_samples</name> <init>= <expr><name><name>td</name><operator>-&gt;</operator><name>nb_samples</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>start</name> <init>= <expr><operator>(</operator><name>channels</name> <operator>*</operator> <name>jobnr</name><operator>)</operator> <operator>/</operator> <name>nb_jobs</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>end</name> <init>= <expr><operator>(</operator><name>channels</name> <operator>*</operator> <operator>(</operator><name>jobnr</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>/</operator> <name>nb_jobs</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>filter</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><name><name>out</name><operator>-&gt;</operator><name>extended_data</name></name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><name><name>in</name><operator>-&gt;</operator><name>extended_data</name></name></expr></argument>,

<argument><expr><name>nb_samples</name></expr></argument>, <argument><expr><name>channels</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>filter_frame</name><parameter_list>(<parameter><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>inlink</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>in</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>inlink</name><operator>-&gt;</operator><name>dst</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>outlink</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>outputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>nb_samples</name></decl>, <decl><type ref="prev"/><name>channels</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ThreadData</name></type> <name>td</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>out</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>av_frame_is_writable</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>out</name> <operator>=</operator> <name>in</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>out</name> <operator>=</operator> <call><name>ff_get_audio_buffer</name><argument_list>(<argument><expr><name>outlink</name></expr></argument>, <argument><expr><name><name>in</name><operator>-&gt;</operator><name>nb_samples</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>out</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_frame_copy_props</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>av_sample_fmt_is_planar</name><argument_list>(<argument><expr><name><name>in</name><operator>-&gt;</operator><name>format</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>nb_samples</name> <operator>=</operator> <name><name>in</name><operator>-&gt;</operator><name>nb_samples</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>channels</name> <operator>=</operator> <name><name>in</name><operator>-&gt;</operator><name>channels</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>nb_samples</name> <operator>=</operator> <name><name>in</name><operator>-&gt;</operator><name>channels</name></name> <operator>*</operator> <name><name>in</name><operator>-&gt;</operator><name>nb_samples</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>channels</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>td</name><operator>.</operator><name>in</name></name> <operator>=</operator> <name>in</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>td</name><operator>.</operator><name>out</name></name> <operator>=</operator> <name>out</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>td</name><operator>.</operator><name>nb_samples</name></name> <operator>=</operator> <name>nb_samples</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>td</name><operator>.</operator><name>channels</name></name> <operator>=</operator> <name>channels</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>ctx</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>filter_channels</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>td</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><call><name>FFMIN</name><argument_list>(<argument><expr><name>channels</name></expr></argument>,

<argument><expr><call><name>ff_filter_get_nb_threads</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>out</name> <operator>!=</operator> <name>in</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><call><name>ff_filter_frame</name><argument_list>(<argument><expr><name>outlink</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVFilterPad</name></type> <name><name>inputs</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"default"</literal></expr>,

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_AUDIO</name></expr>,

<expr><operator>.</operator><name>filter_frame</name> <operator>=</operator> <name>filter_frame</name></expr>,

<expr><operator>.</operator><name>config_props</name> <operator>=</operator> <name>config_input</name></expr>,

}</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVFilterPad</name></type> <name><name>outputs</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"default"</literal></expr>,

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_AUDIO</name></expr>,

}</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFilter</name></type> <name>ff_af_asoftclip</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"asoftclip"</literal></expr>,

<expr><operator>.</operator><name>description</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"Audio Soft Clipper."</literal></expr></argument>)</argument_list></call></expr>,

<expr><operator>.</operator><name>query_formats</name> <operator>=</operator> <name>query_formats</name></expr>,

<expr><operator>.</operator><name>priv_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>ASoftClipContext</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><operator>.</operator><name>priv_class</name> <operator>=</operator> <operator>&amp;</operator><name>asoftclip_class</name></expr>,

<expr><operator>.</operator><name>inputs</name> <operator>=</operator> <name>inputs</name></expr>,

<expr><operator>.</operator><name>outputs</name> <operator>=</operator> <name>outputs</name></expr>,

<expr><operator>.</operator><name>process_command</name> <operator>=</operator> <name>ff_filter_process_command</name></expr>,

<expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>AVFILTER_FLAG_SUPPORT_TIMELINE_GENERIC</name> <operator>|</operator>

<name>AVFILTER_FLAG_SLICE_THREADS</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

</unit>
