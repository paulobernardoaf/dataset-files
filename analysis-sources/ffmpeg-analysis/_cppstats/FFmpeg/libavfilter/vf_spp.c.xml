<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavfilter\vf_spp.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avassert.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/imgutils.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/opt.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/pixdesc.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vf_spp.h"</cpp:file></cpp:include>

<enum>enum <name>mode</name> <block>{

<decl><name>MODE_HARD</name></decl>,

<decl><name>MODE_SOFT</name></decl>,

<decl><name>NB_MODES</name></decl>

}</block>;</enum>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>AVClass</name> <modifier>*</modifier></type><name>child_class_next</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>AVClass</name> <modifier>*</modifier></type><name>prev</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><ternary><condition><expr><name>prev</name></expr> ?</condition><then> <expr><name>NULL</name></expr> </then><else>: <expr><call><name>avcodec_dct_get_class</name><argument_list>()</argument_list></call></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>child_next</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>prev</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>SPPContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name>obj</name></expr></init></decl>;</decl_stmt>

<return>return <expr><ternary><condition><expr><name>prev</name></expr> ?</condition><then> <expr><name>NULL</name></expr> </then><else>: <expr><name><name>s</name><operator>-&gt;</operator><name>dct</name></name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OFFSET</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>offsetof(SPPContext, x)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLAGS</name></cpp:macro> <cpp:value>AV_OPT_FLAG_FILTERING_PARAM|AV_OPT_FLAG_VIDEO_PARAM</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TFLAGS</name></cpp:macro> <cpp:value>AV_OPT_FLAG_FILTERING_PARAM|AV_OPT_FLAG_VIDEO_PARAM|AV_OPT_FLAG_RUNTIME_PARAM</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVOption</name></type> <name><name>spp_options</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><literal type="string">"quality"</literal></expr>, <expr><literal type="string">"set quality"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>log2_count</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">3</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>MAX_LEVEL</name></expr>, <expr><name>TFLAGS</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"qp"</literal></expr>, <expr><literal type="string">"force a constant quantizer parameter"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>qp</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">63</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"mode"</literal></expr>, <expr><literal type="string">"set thresholding mode"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>MODE_HARD</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NB_MODES</name> <operator>-</operator> <literal type="number">1</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"mode"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"hard"</literal></expr>, <expr><literal type="string">"hard thresholding"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>MODE_HARD</name></expr>}</block></expr>, <expr><name>INT_MIN</name></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"mode"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"soft"</literal></expr>, <expr><literal type="string">"soft thresholding"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>MODE_SOFT</name></expr>}</block></expr>, <expr><name>INT_MIN</name></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"mode"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"use_bframe_qp"</literal></expr>, <expr><literal type="string">"use B-frames' QP"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>use_bframe_qp</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_BOOL</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVClass</name></type> <name>spp_class</name> <init>= <expr><block>{

<expr><operator>.</operator><name>class_name</name> <operator>=</operator> <literal type="string">"spp"</literal></expr>,

<expr><operator>.</operator><name>item_name</name> <operator>=</operator> <name>av_default_item_name</name></expr>,

<expr><operator>.</operator><name>option</name> <operator>=</operator> <name>spp_options</name></expr>,

<expr><operator>.</operator><name>version</name> <operator>=</operator> <name>LIBAVUTIL_VERSION_INT</name></expr>,

<expr><operator>.</operator><name>category</name> <operator>=</operator> <name>AV_CLASS_CATEGORY_FILTER</name></expr>,

<expr><operator>.</operator><name>child_class_next</name> <operator>=</operator> <name>child_class_next</name></expr>,

<expr><operator>.</operator><name>child_next</name> <operator>=</operator> <name>child_next</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></expr></argument>, <argument><expr><name>ldither</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">8</literal></expr>]</index><index>[<expr><literal type="number">8</literal></expr>]</index> <operator>=</operator> <block>{

<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">48</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">60</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">51</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">63</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">32</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">44</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">35</literal></expr>, <expr><literal type="number">19</literal></expr>, <expr><literal type="number">47</literal></expr>, <expr><literal type="number">31</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">8</literal></expr>, <expr><literal type="number">56</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">52</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">59</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">55</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">40</literal></expr>, <expr><literal type="number">24</literal></expr>, <expr><literal type="number">36</literal></expr>, <expr><literal type="number">20</literal></expr>, <expr><literal type="number">43</literal></expr>, <expr><literal type="number">27</literal></expr>, <expr><literal type="number">39</literal></expr>, <expr><literal type="number">23</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">2</literal></expr>, <expr><literal type="number">50</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">62</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">49</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">61</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">34</literal></expr>, <expr><literal type="number">18</literal></expr>, <expr><literal type="number">46</literal></expr>, <expr><literal type="number">30</literal></expr>, <expr><literal type="number">33</literal></expr>, <expr><literal type="number">17</literal></expr>, <expr><literal type="number">45</literal></expr>, <expr><literal type="number">29</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">10</literal></expr>, <expr><literal type="number">58</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">54</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">57</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">53</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">42</literal></expr>, <expr><literal type="number">26</literal></expr>, <expr><literal type="number">38</literal></expr>, <expr><literal type="number">22</literal></expr>, <expr><literal type="number">41</literal></expr>, <expr><literal type="number">25</literal></expr>, <expr><literal type="number">37</literal></expr>, <expr><literal type="number">21</literal></expr> }</block></expr>,

}</block></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>offset</name><index>[<expr><literal type="number">127</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{

<expr><block>{<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">4</literal></expr>,<expr><literal type="number">4</literal></expr>}</block></expr>, 

<expr><block>{<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">2</literal></expr>,<expr><literal type="number">2</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">6</literal></expr>,<expr><literal type="number">4</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">4</literal></expr>,<expr><literal type="number">6</literal></expr>}</block></expr>, 

<expr><block>{<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">5</literal></expr>,<expr><literal type="number">1</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">2</literal></expr>,<expr><literal type="number">2</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">7</literal></expr>,<expr><literal type="number">3</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">4</literal></expr>,<expr><literal type="number">4</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">1</literal></expr>,<expr><literal type="number">5</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">6</literal></expr>,<expr><literal type="number">6</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">3</literal></expr>,<expr><literal type="number">7</literal></expr>}</block></expr>, 

<expr><block>{<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">4</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">5</literal></expr>,<expr><literal type="number">1</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">3</literal></expr>,<expr><literal type="number">2</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">7</literal></expr>,<expr><literal type="number">2</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">2</literal></expr>,<expr><literal type="number">3</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">6</literal></expr>,<expr><literal type="number">3</literal></expr>}</block></expr>, 

<expr><block>{<expr><literal type="number">0</literal></expr>,<expr><literal type="number">4</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">4</literal></expr>,<expr><literal type="number">4</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">1</literal></expr>,<expr><literal type="number">5</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">5</literal></expr>,<expr><literal type="number">5</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">3</literal></expr>,<expr><literal type="number">6</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">7</literal></expr>,<expr><literal type="number">6</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">2</literal></expr>,<expr><literal type="number">7</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">6</literal></expr>,<expr><literal type="number">7</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>,<expr><literal type="number">2</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>,<expr><literal type="number">4</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>,<expr><literal type="number">6</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">1</literal></expr>,<expr><literal type="number">3</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">1</literal></expr>,<expr><literal type="number">5</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">1</literal></expr>,<expr><literal type="number">7</literal></expr>}</block></expr>, 

<expr><block>{<expr><literal type="number">2</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">2</literal></expr>,<expr><literal type="number">2</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">2</literal></expr>,<expr><literal type="number">4</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">2</literal></expr>,<expr><literal type="number">6</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">3</literal></expr>,<expr><literal type="number">1</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">3</literal></expr>,<expr><literal type="number">3</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">3</literal></expr>,<expr><literal type="number">5</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">3</literal></expr>,<expr><literal type="number">7</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">4</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">4</literal></expr>,<expr><literal type="number">2</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">4</literal></expr>,<expr><literal type="number">4</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">4</literal></expr>,<expr><literal type="number">6</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">5</literal></expr>,<expr><literal type="number">1</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">5</literal></expr>,<expr><literal type="number">3</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">5</literal></expr>,<expr><literal type="number">5</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">5</literal></expr>,<expr><literal type="number">7</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">6</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">6</literal></expr>,<expr><literal type="number">2</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">6</literal></expr>,<expr><literal type="number">4</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">6</literal></expr>,<expr><literal type="number">6</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">7</literal></expr>,<expr><literal type="number">1</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">7</literal></expr>,<expr><literal type="number">3</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">7</literal></expr>,<expr><literal type="number">5</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">7</literal></expr>,<expr><literal type="number">7</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">4</literal></expr>,<expr><literal type="number">4</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>,<expr><literal type="number">4</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">4</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">2</literal></expr>,<expr><literal type="number">2</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">6</literal></expr>,<expr><literal type="number">6</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">2</literal></expr>,<expr><literal type="number">6</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">6</literal></expr>,<expr><literal type="number">2</literal></expr>}</block></expr>, 

<expr><block>{<expr><literal type="number">0</literal></expr>,<expr><literal type="number">2</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">4</literal></expr>,<expr><literal type="number">6</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>,<expr><literal type="number">6</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">4</literal></expr>,<expr><literal type="number">2</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">2</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">6</literal></expr>,<expr><literal type="number">4</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">2</literal></expr>,<expr><literal type="number">4</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">6</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">5</literal></expr>,<expr><literal type="number">5</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">1</literal></expr>,<expr><literal type="number">5</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">5</literal></expr>,<expr><literal type="number">1</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">3</literal></expr>,<expr><literal type="number">3</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">7</literal></expr>,<expr><literal type="number">7</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">3</literal></expr>,<expr><literal type="number">7</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">7</literal></expr>,<expr><literal type="number">3</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">1</literal></expr>,<expr><literal type="number">3</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">5</literal></expr>,<expr><literal type="number">7</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">1</literal></expr>,<expr><literal type="number">7</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">5</literal></expr>,<expr><literal type="number">3</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">3</literal></expr>,<expr><literal type="number">1</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">7</literal></expr>,<expr><literal type="number">5</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">3</literal></expr>,<expr><literal type="number">5</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">7</literal></expr>,<expr><literal type="number">1</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0</literal></expr>,<expr><literal type="number">1</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">4</literal></expr>,<expr><literal type="number">5</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>,<expr><literal type="number">5</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">4</literal></expr>,<expr><literal type="number">1</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">2</literal></expr>,<expr><literal type="number">3</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">6</literal></expr>,<expr><literal type="number">7</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">2</literal></expr>,<expr><literal type="number">7</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">6</literal></expr>,<expr><literal type="number">3</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0</literal></expr>,<expr><literal type="number">3</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">4</literal></expr>,<expr><literal type="number">7</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>,<expr><literal type="number">7</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">4</literal></expr>,<expr><literal type="number">3</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">2</literal></expr>,<expr><literal type="number">1</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">6</literal></expr>,<expr><literal type="number">5</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">2</literal></expr>,<expr><literal type="number">5</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">6</literal></expr>,<expr><literal type="number">1</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">1</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">5</literal></expr>,<expr><literal type="number">4</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">1</literal></expr>,<expr><literal type="number">4</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">5</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">3</literal></expr>,<expr><literal type="number">2</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">7</literal></expr>,<expr><literal type="number">6</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">3</literal></expr>,<expr><literal type="number">6</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">7</literal></expr>,<expr><literal type="number">2</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">1</literal></expr>,<expr><literal type="number">2</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">5</literal></expr>,<expr><literal type="number">6</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">1</literal></expr>,<expr><literal type="number">6</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">5</literal></expr>,<expr><literal type="number">2</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">3</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">7</literal></expr>,<expr><literal type="number">4</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">3</literal></expr>,<expr><literal type="number">4</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">7</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,

}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>hardthresh_c</name><parameter_list>(<parameter><decl><type><name>int16_t</name></type> <name><name>dst</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int16_t</name></type> <name><name>src</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>qp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>permutation</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>bias</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>unsigned</name></type> <name>threshold1</name> <init>= <expr><name>qp</name> <operator>*</operator> <operator>(</operator><operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">4</literal><operator>)</operator> <operator>-</operator> <name>bias</name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>threshold2</name> <init>= <expr><name>threshold1</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">64</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>dst</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <literal type="number">4</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">64</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>level</name> <init>= <expr><name><name>src</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>unsigned</name><operator>)</operator><operator>(</operator><name>level</name> <operator>+</operator> <name>threshold1</name><operator>)</operator><operator>)</operator> <operator>&gt;</operator> <name>threshold2</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>j</name> <init>= <expr><name><name>permutation</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>dst</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>level</name> <operator>+</operator> <literal type="number">4</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>softthresh_c</name><parameter_list>(<parameter><decl><type><name>int16_t</name></type> <name><name>dst</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int16_t</name></type> <name><name>src</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>qp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>permutation</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>bias</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>unsigned</name></type> <name>threshold1</name> <init>= <expr><name>qp</name> <operator>*</operator> <operator>(</operator><operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">4</literal><operator>)</operator> <operator>-</operator> <name>bias</name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>threshold2</name> <init>= <expr><name>threshold1</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">64</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>dst</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <literal type="number">4</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">64</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>level</name> <init>= <expr><name><name>src</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>unsigned</name><operator>)</operator><operator>(</operator><name>level</name> <operator>+</operator> <name>threshold1</name><operator>)</operator><operator>)</operator> <operator>&gt;</operator> <name>threshold2</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>j</name> <init>= <expr><name><name>permutation</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>level</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>dst</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>level</name> <operator>-</operator> <name>threshold1</name> <operator>+</operator> <literal type="number">4</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name><name>dst</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>level</name> <operator>+</operator> <name>threshold1</name> <operator>+</operator> <literal type="number">4</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>store_slice_c</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>dst_linesize</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_linesize</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>log2_scale</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name></type> <name><name>dither</name><index>[<expr><literal type="number">8</literal></expr>]</index><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>, <decl><type ref="prev"/><name>x</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STORE</name><parameter_list>(<parameter><type><name>pos</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { temp = ((src[x + y*src_linesize + pos] &lt;&lt; log2_scale) + d[pos]) &gt;&gt; 6; if (temp &amp; 0x100) temp = ~(temp &gt;&gt; 31); dst[x + y*dst_linesize + pos] = temp; } while (0)</cpp:value></cpp:define>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>d</name> <init>= <expr><name><name>dither</name><index>[<expr><name>y</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>x</name> <operator>+=</operator> <literal type="number">8</literal></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>temp</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>STORE</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>STORE</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>STORE</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>STORE</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>STORE</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>STORE</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>STORE</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>STORE</name><argument_list>(<argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>store_slice16_c</name><parameter_list>(<parameter><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>dst_linesize</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_linesize</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>log2_scale</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name></type> <name><name>dither</name><index>[<expr><literal type="number">8</literal></expr>]</index><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>depth</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>, <decl><type ref="prev"/><name>x</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>mask</name> <init>= <expr><operator>-</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><name>depth</name></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STORE16</name><parameter_list>(<parameter><type><name>pos</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { temp = ((src[x + y*src_linesize + pos] &lt;&lt; log2_scale) + (d[pos]&gt;&gt;1)) &gt;&gt; 5; if (temp &amp; mask ) temp = ~(temp &gt;&gt; 31); dst[x + y*dst_linesize + pos] = temp; } while (0)</cpp:value></cpp:define>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>d</name> <init>= <expr><name><name>dither</name><index>[<expr><name>y</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>x</name> <operator>+=</operator> <literal type="number">8</literal></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>temp</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>STORE16</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>STORE16</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>STORE16</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>STORE16</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>STORE16</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>STORE16</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>STORE16</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>STORE16</name><argument_list>(<argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>add_block</name><parameter_list>(<parameter><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>linesize</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int16_t</name></type> <name><name>block</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>dst</name><index>[<expr><literal type="number">0</literal> <operator>+</operator> <name>y</name><operator>*</operator><name>linesize</name></expr>]</index></name> <operator>+=</operator> <operator>*</operator><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>block</name><index>[<expr><literal type="number">0</literal> <operator>+</operator> <name>y</name><operator>*</operator><literal type="number">8</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>dst</name><index>[<expr><literal type="number">2</literal> <operator>+</operator> <name>y</name><operator>*</operator><name>linesize</name></expr>]</index></name> <operator>+=</operator> <operator>*</operator><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>block</name><index>[<expr><literal type="number">2</literal> <operator>+</operator> <name>y</name><operator>*</operator><literal type="number">8</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>dst</name><index>[<expr><literal type="number">4</literal> <operator>+</operator> <name>y</name><operator>*</operator><name>linesize</name></expr>]</index></name> <operator>+=</operator> <operator>*</operator><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>block</name><index>[<expr><literal type="number">4</literal> <operator>+</operator> <name>y</name><operator>*</operator><literal type="number">8</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>dst</name><index>[<expr><literal type="number">6</literal> <operator>+</operator> <name>y</name><operator>*</operator><name>linesize</name></expr>]</index></name> <operator>+=</operator> <operator>*</operator><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>block</name><index>[<expr><literal type="number">6</literal> <operator>+</operator> <name>y</name><operator>*</operator><literal type="number">8</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>filter</name><parameter_list>(<parameter><decl><type><name>SPPContext</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>dst_linesize</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_linesize</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>qp_table</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>qp_stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>is_luma</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>depth</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>count</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name><name>p</name><operator>-&gt;</operator><name>log2_count</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>linesize</name> <init>= <expr><ternary><condition><expr><name>is_luma</name></expr> ?</condition><then> <expr><name><name>p</name><operator>-&gt;</operator><name>temp_linesize</name></name></expr> </then><else>: <expr><call><name>FFALIGN</name><argument_list>(<argument><expr><name>width</name><operator>+</operator><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>uint64_t</name></expr></argument>, <argument><expr><name>block_align</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">32</literal></expr>]</index></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>block</name> <init>= <expr><operator>(</operator><name>int16_t</name> <operator>*</operator><operator>)</operator><name>block_align</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>block2</name> <init>= <expr><operator>(</operator><name>int16_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>block_align</name> <operator>+</operator> <literal type="number">16</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>psrc16</name> <init>= <expr><operator>(</operator><name>uint16_t</name><operator>*</operator><operator>)</operator><name><name>p</name><operator>-&gt;</operator><name>src</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>sample_bytes</name> <init>= <expr><operator>(</operator><name>depth</name><operator>+</operator><literal type="number">7</literal><operator>)</operator> <operator>/</operator> <literal type="number">8</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>index</name> <init>= <expr><literal type="number">8</literal> <operator>+</operator> <literal type="number">8</literal><operator>*</operator><name>linesize</name> <operator>+</operator> <name>y</name><operator>*</operator><name>linesize</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>src</name></name> <operator>+</operator> <name>index</name><operator>*</operator><name>sample_bytes</name></expr></argument>, <argument><expr><name>src</name> <operator>+</operator> <name>y</name><operator>*</operator><name>src_linesize</name></expr></argument>, <argument><expr><name>width</name><operator>*</operator><name>sample_bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>sample_bytes</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>src</name><index>[<expr><name>index</name> <operator>-</operator> <name>x</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>src</name><index>[<expr><name>index</name> <operator>+</operator> <name>x</name></expr> ]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>src</name><index>[<expr><name>index</name> <operator>+</operator> <name>width</name> <operator>+</operator> <name>x</name></expr> ]</index></name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>src</name><index>[<expr><name>index</name> <operator>+</operator> <name>width</name> <operator>-</operator> <name>x</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if> <else>else <block>{<block_content>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>psrc16</name><index>[<expr><name>index</name> <operator>-</operator> <name>x</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>psrc16</name><index>[<expr><name>index</name> <operator>+</operator> <name>x</name></expr> ]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>psrc16</name><index>[<expr><name>index</name> <operator>+</operator> <name>width</name> <operator>+</operator> <name>x</name></expr> ]</index></name> <operator>=</operator> <name><name>psrc16</name><index>[<expr><name>index</name> <operator>+</operator> <name>width</name> <operator>-</operator> <name>x</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>src</name></name> <operator>+</operator> <operator>(</operator> <literal type="number">7</literal><operator>-</operator><name>y</name><operator>)</operator><operator>*</operator><name>linesize</name> <operator>*</operator> <name>sample_bytes</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>src</name></name> <operator>+</operator> <operator>(</operator> <name>y</name><operator>+</operator><literal type="number">8</literal><operator>)</operator><operator>*</operator><name>linesize</name> <operator>*</operator> <name>sample_bytes</name></expr></argument>, <argument><expr><name>linesize</name> <operator>*</operator> <name>sample_bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>src</name></name> <operator>+</operator> <operator>(</operator><name>height</name><operator>+</operator><literal type="number">8</literal><operator>+</operator><name>y</name><operator>)</operator><operator>*</operator><name>linesize</name> <operator>*</operator> <name>sample_bytes</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>src</name></name> <operator>+</operator> <operator>(</operator><name>height</name><operator>-</operator><name>y</name><operator>+</operator><literal type="number">7</literal><operator>)</operator><operator>*</operator><name>linesize</name> <operator>*</operator> <name>sample_bytes</name></expr></argument>, <argument><expr><name>linesize</name> <operator>*</operator> <name>sample_bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name> <operator>+</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>y</name> <operator>+=</operator> <literal type="number">8</literal></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>temp</name></name> <operator>+</operator> <operator>(</operator><literal type="number">8</literal> <operator>+</operator> <name>y</name><operator>)</operator> <operator>*</operator> <name>linesize</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">8</literal> <operator>*</operator> <name>linesize</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>p</name><operator>-&gt;</operator><name>temp</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>width</name> <operator>+</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>x</name> <operator>+=</operator> <literal type="number">8</literal></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>qp</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>qp</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>qp</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>qp</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>qps</name> <init>= <expr><literal type="number">3</literal> <operator>+</operator> <name>is_luma</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>qp</name> <operator>=</operator> <name><name>qp_table</name><index>[<expr><operator>(</operator><call><name>FFMIN</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>width</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <name>qps</name><operator>)</operator> <operator>+</operator> <operator>(</operator><call><name>FFMIN</name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><name>height</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <name>qps</name><operator>)</operator> <operator>*</operator> <name>qp_stride</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>qp</name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name>ff_norm_qscale</name><argument_list>(<argument><expr><name>qp</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>qscale_type</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>x1</name> <init>= <expr><name>x</name> <operator>+</operator> <name><name>offset</name><index>[<expr><name>i</name> <operator>+</operator> <name>count</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>y1</name> <init>= <expr><name>y</name> <operator>+</operator> <name><name>offset</name><index>[<expr><name>i</name> <operator>+</operator> <name>count</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>index</name> <init>= <expr><name>x1</name> <operator>+</operator> <name>y1</name><operator>*</operator><name>linesize</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name><name>p</name><operator>-&gt;</operator><name>dct</name><operator>-&gt;</operator><name>get_pixels</name></name><argument_list>(<argument><expr><name>block</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>src</name></name> <operator>+</operator> <name>sample_bytes</name><operator>*</operator><name>index</name></expr></argument>, <argument><expr><name>sample_bytes</name><operator>*</operator><name>linesize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>p</name><operator>-&gt;</operator><name>dct</name><operator>-&gt;</operator><name>fdct</name></name><argument_list>(<argument><expr><name>block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>p</name><operator>-&gt;</operator><name>requantize</name></name><argument_list>(<argument><expr><name>block2</name></expr></argument>, <argument><expr><name>block</name></expr></argument>, <argument><expr><name>qp</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>dct</name><operator>-&gt;</operator><name>idct_permutation</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>p</name><operator>-&gt;</operator><name>dct</name><operator>-&gt;</operator><name>idct</name></name><argument_list>(<argument><expr><name>block2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add_block</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>temp</name></name> <operator>+</operator> <name>index</name></expr></argument>, <argument><expr><name>linesize</name></expr></argument>, <argument><expr><name>block2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>y</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>sample_bytes</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><name>p</name><operator>-&gt;</operator><name>store_slice</name></name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <operator>(</operator><name>y</name> <operator>-</operator> <literal type="number">8</literal><operator>)</operator> <operator>*</operator> <name>dst_linesize</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>temp</name></name> <operator>+</operator> <literal type="number">8</literal> <operator>+</operator> <name>y</name><operator>*</operator><name>linesize</name></expr></argument>,

<argument><expr><name>dst_linesize</name></expr></argument>, <argument><expr><name>linesize</name></expr></argument>, <argument><expr><name>width</name></expr></argument>,

<argument><expr><call><name>FFMIN</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>height</name> <operator>+</operator> <literal type="number">8</literal> <operator>-</operator> <name>y</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>MAX_LEVEL</name> <operator>-</operator> <name><name>p</name><operator>-&gt;</operator><name>log2_count</name></name></expr></argument>,

<argument><expr><name>ldither</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>store_slice16_c</name><argument_list>(<argument><expr><operator>(</operator><name>uint16_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name>dst</name> <operator>+</operator> <operator>(</operator><name>y</name> <operator>-</operator> <literal type="number">8</literal><operator>)</operator> <operator>*</operator> <name>dst_linesize</name><operator>)</operator></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>temp</name></name> <operator>+</operator> <literal type="number">8</literal> <operator>+</operator> <name>y</name><operator>*</operator><name>linesize</name></expr></argument>,

<argument><expr><name>dst_linesize</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>linesize</name></expr></argument>, <argument><expr><name>width</name></expr></argument>,

<argument><expr><call><name>FFMIN</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>height</name> <operator>+</operator> <literal type="number">8</literal> <operator>-</operator> <name>y</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>MAX_LEVEL</name> <operator>-</operator> <name><name>p</name><operator>-&gt;</operator><name>log2_count</name></name></expr></argument>,

<argument><expr><name>ldither</name></expr></argument>, <argument><expr><name>depth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>query_formats</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>enum</name> <name>AVPixelFormat</name></name></type> <name><name>pix_fmts</name><index>[]</index></name> <init>= <expr><block>{

<expr><name>AV_PIX_FMT_YUV444P</name></expr>, <expr><name>AV_PIX_FMT_YUV422P</name></expr>,

<expr><name>AV_PIX_FMT_YUV420P</name></expr>, <expr><name>AV_PIX_FMT_YUV411P</name></expr>,

<expr><name>AV_PIX_FMT_YUV410P</name></expr>, <expr><name>AV_PIX_FMT_YUV440P</name></expr>,

<expr><name>AV_PIX_FMT_YUVJ444P</name></expr>, <expr><name>AV_PIX_FMT_YUVJ422P</name></expr>,

<expr><name>AV_PIX_FMT_YUVJ420P</name></expr>, <expr><name>AV_PIX_FMT_YUVJ440P</name></expr>,

<expr><name>AV_PIX_FMT_YUV444P10</name></expr>, <expr><name>AV_PIX_FMT_YUV422P10</name></expr>,

<expr><name>AV_PIX_FMT_YUV420P10</name></expr>,

<expr><name>AV_PIX_FMT_YUV444P9</name></expr>, <expr><name>AV_PIX_FMT_YUV422P9</name></expr>,

<expr><name>AV_PIX_FMT_YUV420P9</name></expr>,

<expr><name>AV_PIX_FMT_GRAY8</name></expr>,

<expr><name>AV_PIX_FMT_GBRP</name></expr>,

<expr><name>AV_PIX_FMT_GBRP9</name></expr>,

<expr><name>AV_PIX_FMT_GBRP10</name></expr>,

<expr><name>AV_PIX_FMT_NONE</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFilterFormats</name> <modifier>*</modifier></type><name>fmts_list</name> <init>= <expr><call><name>ff_make_format_list</name><argument_list>(<argument><expr><name>pix_fmts</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>fmts_list</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>ff_set_common_formats</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>fmts_list</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>config_input</name><parameter_list>(<parameter><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>inlink</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>SPPContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>inlink</name><operator>-&gt;</operator><name>dst</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>h</name> <init>= <expr><call><name>FFALIGN</name><argument_list>(<argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>h</name></name> <operator>+</operator> <literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>AVPixFmtDescriptor</name> <modifier>*</modifier></type><name>desc</name> <init>= <expr><call><name>av_pix_fmt_desc_get</name><argument_list>(<argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>format</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>bps</name> <init>= <expr><name><name>desc</name><operator>-&gt;</operator><name>comp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>depth</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_opt_set_int</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>dct</name></name></expr></argument>, <argument><expr><literal type="string">"bits_per_sample"</literal></expr></argument>, <argument><expr><name>bps</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avcodec_dct_init</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>dct</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ARCH_X86</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ff_spp_init_x86</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>hsub</name></name> <operator>=</operator> <name><name>desc</name><operator>-&gt;</operator><name>log2_chroma_w</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>vsub</name></name> <operator>=</operator> <name><name>desc</name><operator>-&gt;</operator><name>log2_chroma_h</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>temp_linesize</name></name> <operator>=</operator> <call><name>FFALIGN</name><argument_list>(<argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>w</name></name> <operator>+</operator> <literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>temp</name></name> <operator>=</operator> <call><name>av_malloc_array</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>temp_linesize</name></name></expr></argument>, <argument><expr><name>h</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>temp</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>src</name></name> <operator>=</operator> <call><name>av_malloc_array</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>temp_linesize</name></name></expr></argument>, <argument><expr><name>h</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>src</name></name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>temp</name></name> <operator>||</operator> <operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>src</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>filter_frame</name><parameter_list>(<parameter><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>inlink</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>in</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>inlink</name><operator>-&gt;</operator><name>dst</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SPPContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>outlink</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>outputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>out</name> <init>= <expr><name>in</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>qp_stride</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int8_t</name> <modifier>*</modifier></type><name>qp_table</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>AVPixFmtDescriptor</name> <modifier>*</modifier></type><name>desc</name> <init>= <expr><call><name>av_pix_fmt_desc_get</name><argument_list>(<argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>format</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>depth</name> <init>= <expr><name><name>desc</name><operator>-&gt;</operator><name>comp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>depth</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>qp</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>qp_table</name> <operator>=</operator> <call><name>av_frame_get_qp_table</name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>qp_stride</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>qscale_type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>qp_table</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>use_bframe_qp</name></name> <operator>&amp;&amp;</operator> <name><name>in</name><operator>-&gt;</operator><name>pict_type</name></name> <operator>!=</operator> <name>AV_PICTURE_TYPE_B</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>w</name></decl>, <decl><type ref="prev"/><name>h</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>qp_stride</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>w</name> <operator>=</operator> <call><name>AV_CEIL_RSHIFT</name><argument_list>(<argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>w</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>h</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>w</name> <operator>=</operator> <name>qp_stride</name></expr>;</expr_stmt>

<expr_stmt><expr><name>h</name> <operator>=</operator> <call><name>AV_CEIL_RSHIFT</name><argument_list>(<argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>h</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>w</name> <operator>*</operator> <name>h</name> <operator>&gt;</operator> <name><name>s</name><operator>-&gt;</operator><name>non_b_qp_alloc_size</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>av_reallocp_array</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>non_b_qp_table</name></name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>non_b_qp_alloc_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>non_b_qp_alloc_size</name></name> <operator>=</operator> <name>w</name> <operator>*</operator> <name>h</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name>w</name> <operator>*</operator> <name>h</name> <operator>&lt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>non_b_qp_alloc_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>non_b_qp_table</name></name></expr></argument>, <argument><expr><name>qp_table</name></expr></argument>, <argument><expr><name>w</name> <operator>*</operator> <name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>log2_count</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>is_disabled</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>use_bframe_qp</name></name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>non_b_qp_table</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>qp_table</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>non_b_qp_table</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>qp_table</name> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>qp</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>cw</name> <init>= <expr><call><name>AV_CEIL_RSHIFT</name><argument_list>(<argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>w</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>hsub</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>ch</name> <init>= <expr><call><name>AV_CEIL_RSHIFT</name><argument_list>(<argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>h</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>vsub</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>av_frame_is_writable</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>(</operator><name><name>inlink</name><operator>-&gt;</operator><name>w</name></name> <operator>&amp;</operator> <literal type="number">7</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>inlink</name><operator>-&gt;</operator><name>h</name></name> <operator>&amp;</operator> <literal type="number">7</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>aligned_w</name> <init>= <expr><call><name>FFALIGN</name><argument_list>(<argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>w</name></name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>aligned_h</name> <init>= <expr><call><name>FFALIGN</name><argument_list>(<argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>h</name></name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>out</name> <operator>=</operator> <call><name>ff_get_video_buffer</name><argument_list>(<argument><expr><name>outlink</name></expr></argument>, <argument><expr><name>aligned_w</name></expr></argument>, <argument><expr><name>aligned_h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>out</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_frame_copy_props</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator> <name><name>in</name><operator>-&gt;</operator><name>width</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <name><name>in</name><operator>-&gt;</operator><name>height</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>filter</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>in</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>in</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>w</name></name></expr></argument>, <argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>h</name></name></expr></argument>, <argument><expr><name>qp_table</name></expr></argument>, <argument><expr><name>qp_stride</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>depth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>filter</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>in</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>in</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>cw</name></expr></argument>, <argument><expr><name>ch</name></expr></argument>, <argument><expr><name>qp_table</name></expr></argument>, <argument><expr><name>qp_stride</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>depth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>filter</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>in</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>in</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name>cw</name></expr></argument>, <argument><expr><name>ch</name></expr></argument>, <argument><expr><name>qp_table</name></expr></argument>, <argument><expr><name>qp_stride</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>depth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>emms_c</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>in</name> <operator>!=</operator> <name>out</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>in</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_image_copy_plane</name><argument_list>(<argument><expr><name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>,

<argument><expr><name><name>in</name> <operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>in</name> <operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>,

<argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>w</name></name></expr></argument>, <argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>h</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>ff_filter_frame</name><argument_list>(<argument><expr><name>outlink</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>process_command</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>args</name></decl></parameter>,

<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>res</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>res_len</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>SPPContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="string">"level"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="string">"quality"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><literal type="string">"max"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>log2_count</name></name> <operator>=</operator> <name>MAX_LEVEL</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>log2_count</name></name> <operator>=</operator> <call><name>av_clip</name><argument_list>(<argument><expr><call><name>strtol</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>MAX_LEVEL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOSYS</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>init_dict</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>AVDictionary</name> <modifier>*</modifier><modifier>*</modifier></type><name>opts</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>SPPContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name> <operator>=</operator> <call><name>avcodec_alloc_context3</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>dct</name></name> <operator>=</operator> <call><name>avcodec_dct_alloc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name> <operator>||</operator> <operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>dct</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>opts</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>AVDictionaryEntry</name> <modifier>*</modifier></type><name>e</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><operator>(</operator><name>e</name> <operator>=</operator> <call><name>av_dict_get</name><argument_list>(<argument><expr><operator>*</operator><name>opts</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><name>e</name></expr></argument>, <argument><expr><name>AV_DICT_IGNORE_SUFFIX</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>av_opt_set</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>dct</name></name></expr></argument>, <argument><expr><name><name>e</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><name><name>e</name><operator>-&gt;</operator><name>value</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>av_dict_free</name><argument_list>(<argument><expr><name>opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>store_slice</name></name> <operator>=</operator> <name>store_slice_c</name></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>mode</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>MODE_HARD</name></expr>:</case> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>requantize</name></name> <operator>=</operator> <name>hardthresh_c</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>MODE_SOFT</name></expr>:</case> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>requantize</name></name> <operator>=</operator> <name>softthresh_c</name></expr>;</expr_stmt> <break>break;</break>

</block_content>}</block></switch>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>void</name></type> <name>uninit</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>SPPContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>temp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>src</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>avcodec_close</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>dct</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>non_b_qp_table</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVFilterPad</name></type> <name><name>spp_inputs</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"default"</literal></expr>,

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,

<expr><operator>.</operator><name>config_props</name> <operator>=</operator> <name>config_input</name></expr>,

<expr><operator>.</operator><name>filter_frame</name> <operator>=</operator> <name>filter_frame</name></expr>,

}</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVFilterPad</name></type> <name><name>spp_outputs</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"default"</literal></expr>,

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,

}</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFilter</name></type> <name>ff_vf_spp</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"spp"</literal></expr>,

<expr><operator>.</operator><name>description</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"Apply a simple post processing filter."</literal></expr></argument>)</argument_list></call></expr>,

<expr><operator>.</operator><name>priv_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SPPContext</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><operator>.</operator><name>init_dict</name> <operator>=</operator> <name>init_dict</name></expr>,

<expr><operator>.</operator><name>uninit</name> <operator>=</operator> <name>uninit</name></expr>,

<expr><operator>.</operator><name>query_formats</name> <operator>=</operator> <name>query_formats</name></expr>,

<expr><operator>.</operator><name>inputs</name> <operator>=</operator> <name>spp_inputs</name></expr>,

<expr><operator>.</operator><name>outputs</name> <operator>=</operator> <name>spp_outputs</name></expr>,

<expr><operator>.</operator><name>process_command</name> <operator>=</operator> <name>process_command</name></expr>,

<expr><operator>.</operator><name>priv_class</name> <operator>=</operator> <operator>&amp;</operator><name>spp_class</name></expr>,

<expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>AVFILTER_FLAG_SUPPORT_TIMELINE_INTERNAL</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

</unit>
