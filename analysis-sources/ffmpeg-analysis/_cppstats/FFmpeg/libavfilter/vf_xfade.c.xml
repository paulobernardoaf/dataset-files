<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavfilter\vf_xfade.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/imgutils.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/eval.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/opt.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/pixfmt.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avfilter.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"formats.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"filters.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"video.h"</cpp:file></cpp:include>

<enum>enum <name>XFadeTransitions</name> <block>{

<decl><name>CUSTOM</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>,

<decl><name>FADE</name></decl>,

<decl><name>WIPELEFT</name></decl>,

<decl><name>WIPERIGHT</name></decl>,

<decl><name>WIPEUP</name></decl>,

<decl><name>WIPEDOWN</name></decl>,

<decl><name>SLIDELEFT</name></decl>,

<decl><name>SLIDERIGHT</name></decl>,

<decl><name>SLIDEUP</name></decl>,

<decl><name>SLIDEDOWN</name></decl>,

<decl><name>CIRCLECROP</name></decl>,

<decl><name>RECTCROP</name></decl>,

<decl><name>DISTANCE</name></decl>,

<decl><name>FADEBLACK</name></decl>,

<decl><name>FADEWHITE</name></decl>,

<decl><name>RADIAL</name></decl>,

<decl><name>SMOOTHLEFT</name></decl>,

<decl><name>SMOOTHRIGHT</name></decl>,

<decl><name>SMOOTHUP</name></decl>,

<decl><name>SMOOTHDOWN</name></decl>,

<decl><name>CIRCLEOPEN</name></decl>,

<decl><name>CIRCLECLOSE</name></decl>,

<decl><name>VERTOPEN</name></decl>,

<decl><name>VERTCLOSE</name></decl>,

<decl><name>HORZOPEN</name></decl>,

<decl><name>HORZCLOSE</name></decl>,

<decl><name>DISSOLVE</name></decl>,

<decl><name>PIXELIZE</name></decl>,

<decl><name>DIAGTL</name></decl>,

<decl><name>DIAGTR</name></decl>,

<decl><name>DIAGBL</name></decl>,

<decl><name>DIAGBR</name></decl>,

<decl><name>NB_TRANSITIONS</name></decl>,

}</block>;</enum>

<typedef>typedef <type><struct>struct <name>XFadeContext</name> <block>{

<decl_stmt><decl><type><specifier>const</specifier> <name>AVClass</name> <modifier>*</modifier></type><name>class</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>transition</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>duration</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>offset</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>custom_str</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>nb_planes</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>depth</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>duration_pts</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>offset_pts</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>first_pts</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>last_pts</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>pts</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>xfade_is_over</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>need_second</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>eof</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name><name>xf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>max_value</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name><name>black</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name><name>white</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>transitionf</name>)<parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>AVFrame</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>AVFrame</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>progress</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>slice_start</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>slice_end</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>jobnr</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>AVExpr</name> <modifier>*</modifier></type><name>e</name></decl>;</decl_stmt>

}</block></struct></type> <name>XFadeContext</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>var_names</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="string">"X"</literal></expr>, <expr><literal type="string">"Y"</literal></expr>, <expr><literal type="string">"W"</literal></expr>, <expr><literal type="string">"H"</literal></expr>, <expr><literal type="string">"A"</literal></expr>, <expr><literal type="string">"B"</literal></expr>, <expr><literal type="string">"PLANE"</literal></expr>, <expr><literal type="string">"P"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr></init></decl>;</decl_stmt>

<enum>enum <block>{ <decl><name>VAR_X</name></decl>, <decl><name>VAR_Y</name></decl>, <decl><name>VAR_W</name></decl>, <decl><name>VAR_H</name></decl>, <decl><name>VAR_A</name></decl>, <decl><name>VAR_B</name></decl>, <decl><name>VAR_PLANE</name></decl>, <decl><name>VAR_PROGRESS</name></decl>, <decl><name>VAR_VARS_NB</name></decl> }</block>;</enum>

<typedef>typedef <type><struct>struct <name>ThreadData</name> <block>{

<decl_stmt><decl><type><specifier>const</specifier> <name>AVFrame</name> <modifier>*</modifier></type><name><name>xf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>out</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>progress</name></decl>;</decl_stmt>

}</block></struct></type> <name>ThreadData</name>;</typedef>

<function><type><specifier>static</specifier> <name>int</name></type> <name>query_formats</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>enum</name> <name>AVPixelFormat</name></name></type> <name><name>pix_fmts</name><index>[]</index></name> <init>= <expr><block>{

<expr><name>AV_PIX_FMT_YUVA444P</name></expr>,

<expr><name>AV_PIX_FMT_YUVJ444P</name></expr>,

<expr><name>AV_PIX_FMT_YUV444P</name></expr>,

<expr><name>AV_PIX_FMT_GBRP</name></expr>, <expr><name>AV_PIX_FMT_GBRAP</name></expr>, <expr><name>AV_PIX_FMT_GRAY8</name></expr>,

<expr><name>AV_PIX_FMT_YUVA444P9</name></expr>, <expr><name>AV_PIX_FMT_GBRP9</name></expr>,

<expr><name>AV_PIX_FMT_YUV444P10</name></expr>,

<expr><name>AV_PIX_FMT_YUVA444P10</name></expr>,

<expr><name>AV_PIX_FMT_GBRP10</name></expr>, <expr><name>AV_PIX_FMT_GBRAP10</name></expr>, <expr><name>AV_PIX_FMT_GRAY10</name></expr>,

<expr><name>AV_PIX_FMT_YUV444P12</name></expr>,

<expr><name>AV_PIX_FMT_YUVA444P12</name></expr>,

<expr><name>AV_PIX_FMT_GBRP12</name></expr>, <expr><name>AV_PIX_FMT_GBRAP12</name></expr>, <expr><name>AV_PIX_FMT_GRAY12</name></expr>,

<expr><name>AV_PIX_FMT_YUV444P14</name></expr>, <expr><name>AV_PIX_FMT_GBRP14</name></expr>,

<expr><name>AV_PIX_FMT_YUV444P16</name></expr>,

<expr><name>AV_PIX_FMT_YUVA444P16</name></expr>,

<expr><name>AV_PIX_FMT_GBRP16</name></expr>, <expr><name>AV_PIX_FMT_GBRAP16</name></expr>, <expr><name>AV_PIX_FMT_GRAY16</name></expr>,

<expr><name>AV_PIX_FMT_NONE</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFilterFormats</name> <modifier>*</modifier></type><name>fmts_list</name> <init>= <expr><call><name>ff_make_format_list</name><argument_list>(<argument><expr><name>pix_fmts</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>fmts_list</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>ff_set_common_formats</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>fmts_list</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>void</name></type> <name>uninit</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>XFadeContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_expr_free</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>e</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OFFSET</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>offsetof(XFadeContext, x)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLAGS</name></cpp:macro> <cpp:value>(AV_OPT_FLAG_FILTERING_PARAM | AV_OPT_FLAG_VIDEO_PARAM)</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVOption</name></type> <name><name>xfade_options</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><literal type="string">"transition"</literal></expr>, <expr><literal type="string">"set cross fade transition"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>transition</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>FADE</name></expr>}</block></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><name>NB_TRANSITIONS</name><operator>-</operator><literal type="number">1</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"transition"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"custom"</literal></expr>, <expr><literal type="string">"custom transition"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>CUSTOM</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"transition"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"fade"</literal></expr>, <expr><literal type="string">"fade transition"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>FADE</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"transition"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"wipeleft"</literal></expr>, <expr><literal type="string">"wipe left transition"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>WIPELEFT</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"transition"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"wiperight"</literal></expr>, <expr><literal type="string">"wipe right transition"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>WIPERIGHT</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"transition"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"wipeup"</literal></expr>, <expr><literal type="string">"wipe up transition"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>WIPEUP</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"transition"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"wipedown"</literal></expr>, <expr><literal type="string">"wipe down transition"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>WIPEDOWN</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"transition"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"slideleft"</literal></expr>, <expr><literal type="string">"slide left transition"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>SLIDELEFT</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"transition"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"slideright"</literal></expr>, <expr><literal type="string">"slide right transition"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>SLIDERIGHT</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"transition"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"slideup"</literal></expr>, <expr><literal type="string">"slide up transition"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>SLIDEUP</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"transition"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"slidedown"</literal></expr>, <expr><literal type="string">"slide down transition"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>SLIDEDOWN</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"transition"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"circlecrop"</literal></expr>, <expr><literal type="string">"circle crop transition"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>CIRCLECROP</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"transition"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"rectcrop"</literal></expr>, <expr><literal type="string">"rect crop transition"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>RECTCROP</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"transition"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"distance"</literal></expr>, <expr><literal type="string">"distance transition"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>DISTANCE</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"transition"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"fadeblack"</literal></expr>, <expr><literal type="string">"fadeblack transition"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>FADEBLACK</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"transition"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"fadewhite"</literal></expr>, <expr><literal type="string">"fadewhite transition"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>FADEWHITE</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"transition"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"radial"</literal></expr>, <expr><literal type="string">"radial transition"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>RADIAL</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"transition"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"smoothleft"</literal></expr>, <expr><literal type="string">"smoothleft transition"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>SMOOTHLEFT</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"transition"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"smoothright"</literal></expr>,<expr><literal type="string">"smoothright transition"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>SMOOTHRIGHT</name></expr>}</block></expr>,<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"transition"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"smoothup"</literal></expr>, <expr><literal type="string">"smoothup transition"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>SMOOTHUP</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"transition"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"smoothdown"</literal></expr>, <expr><literal type="string">"smoothdown transition"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>SMOOTHDOWN</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"transition"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"circleopen"</literal></expr>, <expr><literal type="string">"circleopen transition"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>CIRCLEOPEN</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"transition"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"circleclose"</literal></expr>,<expr><literal type="string">"circleclose transition"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>CIRCLECLOSE</name></expr>}</block></expr>,<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"transition"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"vertopen"</literal></expr>, <expr><literal type="string">"vert open transition"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>VERTOPEN</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"transition"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"vertclose"</literal></expr>, <expr><literal type="string">"vert close transition"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>VERTCLOSE</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"transition"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"horzopen"</literal></expr>, <expr><literal type="string">"horz open transition"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>HORZOPEN</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"transition"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"horzclose"</literal></expr>, <expr><literal type="string">"horz close transition"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>HORZCLOSE</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"transition"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"dissolve"</literal></expr>, <expr><literal type="string">"dissolve transition"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>DISSOLVE</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"transition"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"pixelize"</literal></expr>, <expr><literal type="string">"pixelize transition"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>PIXELIZE</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"transition"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"diagtl"</literal></expr>, <expr><literal type="string">"diag tl transition"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>DIAGTL</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"transition"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"diagtr"</literal></expr>, <expr><literal type="string">"diag tr transition"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>DIAGTR</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"transition"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"diagbl"</literal></expr>, <expr><literal type="string">"diag bl transition"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>DIAGBL</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"transition"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"diagbr"</literal></expr>, <expr><literal type="string">"diag br transition"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>DIAGBR</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"transition"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"duration"</literal></expr>, <expr><literal type="string">"set cross fade duration"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>duration</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_DURATION</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">1000000</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">60000000</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"offset"</literal></expr>, <expr><literal type="string">"set cross fade start relative to first input stream"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_DURATION</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">0</literal></expr>}</block></expr>, <expr><name>INT64_MIN</name></expr>, <expr><name>INT64_MAX</name></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"expr"</literal></expr>, <expr><literal type="string">"set expression for custom transition"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>custom_str</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_STRING</name></expr>, <expr><block>{<expr><operator>.</operator><name>str</name><operator>=</operator><name>NULL</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>AVFILTER_DEFINE_CLASS</name><argument_list>(<argument><expr><name>xfade</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CUSTOM_TRANSITION</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>type</name></type></parameter>, <parameter><type><name>div</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static void custom##name##_transition(AVFilterContext *ctx, const AVFrame *a, const AVFrame *b, AVFrame *out, float progress, int slice_start, int slice_end, int jobnr) { XFadeContext *s = ctx-&gt;priv; const int height = slice_end - slice_start; double values[VAR_VARS_NB]; values[VAR_W] = out-&gt;width; values[VAR_H] = out-&gt;height; values[VAR_PROGRESS] = progress; for (int p = 0; p &lt; s-&gt;nb_planes; p++) { const type *xf0 = (const type *)(a-&gt;data[p] + slice_start * a-&gt;linesize[p]); const type *xf1 = (const type *)(b-&gt;data[p] + slice_start * b-&gt;linesize[p]); type *dst = (type *)(out-&gt;data[p] + slice_start * out-&gt;linesize[p]); values[VAR_PLANE] = p; for (int y = 0; y &lt; height; y++) { values[VAR_Y] = slice_start + y; for (int x = 0; x &lt; out-&gt;width; x++) { values[VAR_X] = x; values[VAR_A] = xf0[x]; values[VAR_B] = xf1[x]; dst[x] = av_expr_eval(s-&gt;e, values, s); } dst += out-&gt;linesize[p] / div; xf0 += a-&gt;linesize[p] / div; xf1 += b-&gt;linesize[p] / div; } } }</cpp:value></cpp:define>

<macro><name>CUSTOM_TRANSITION</name><argument_list>(<argument><literal type="number">8</literal></argument>, <argument>uint8_t</argument>, <argument><literal type="number">1</literal></argument>)</argument_list></macro>

<macro><name>CUSTOM_TRANSITION</name><argument_list>(<argument><literal type="number">16</literal></argument>, <argument>uint16_t</argument>, <argument><literal type="number">2</literal></argument>)</argument_list></macro>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>float</name></type> <name>mix</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>mix</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name>a</name> <operator>*</operator> <name>mix</name> <operator>+</operator> <name>b</name> <operator>*</operator> <operator>(</operator><literal type="number">1.f</literal> <operator>-</operator> <name>mix</name><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>float</name></type> <name>smoothstep</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>edge0</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>edge1</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>x</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>t</name></decl>;</decl_stmt>

<expr_stmt><expr><name>t</name> <operator>=</operator> <call><name>av_clipf</name><argument_list>(<argument><expr><operator>(</operator><name>x</name> <operator>-</operator> <name>edge0</name><operator>)</operator> <operator>/</operator> <operator>(</operator><name>edge1</name> <operator>-</operator> <name>edge0</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">0.f</literal></expr></argument>, <argument><expr><literal type="number">1.f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>t</name> <operator>*</operator> <name>t</name> <operator>*</operator> <operator>(</operator><literal type="number">3.f</literal> <operator>-</operator> <literal type="number">2.f</literal> <operator>*</operator> <name>t</name><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FADE_TRANSITION</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>type</name></type></parameter>, <parameter><type><name>div</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static void fade##name##_transition(AVFilterContext *ctx, const AVFrame *a, const AVFrame *b, AVFrame *out, float progress, int slice_start, int slice_end, int jobnr) { XFadeContext *s = ctx-&gt;priv; const int height = slice_end - slice_start; for (int p = 0; p &lt; s-&gt;nb_planes; p++) { const type *xf0 = (const type *)(a-&gt;data[p] + slice_start * a-&gt;linesize[p]); const type *xf1 = (const type *)(b-&gt;data[p] + slice_start * b-&gt;linesize[p]); type *dst = (type *)(out-&gt;data[p] + slice_start * out-&gt;linesize[p]); for (int y = 0; y &lt; height; y++) { for (int x = 0; x &lt; out-&gt;width; x++) { dst[x] = mix(xf0[x], xf1[x], progress); } dst += out-&gt;linesize[p] / div; xf0 += a-&gt;linesize[p] / div; xf1 += b-&gt;linesize[p] / div; } } }</cpp:value></cpp:define>

<macro><name>FADE_TRANSITION</name><argument_list>(<argument><literal type="number">8</literal></argument>, <argument>uint8_t</argument>, <argument><literal type="number">1</literal></argument>)</argument_list></macro>

<macro><name>FADE_TRANSITION</name><argument_list>(<argument><literal type="number">16</literal></argument>, <argument>uint16_t</argument>, <argument><literal type="number">2</literal></argument>)</argument_list></macro>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WIPELEFT_TRANSITION</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>type</name></type></parameter>, <parameter><type><name>div</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static void wipeleft##name##_transition(AVFilterContext *ctx, const AVFrame *a, const AVFrame *b, AVFrame *out, float progress, int slice_start, int slice_end, int jobnr) { XFadeContext *s = ctx-&gt;priv; const int height = slice_end - slice_start; const int z = out-&gt;width * progress; for (int p = 0; p &lt; s-&gt;nb_planes; p++) { const type *xf0 = (const type *)(a-&gt;data[p] + slice_start * a-&gt;linesize[p]); const type *xf1 = (const type *)(b-&gt;data[p] + slice_start * b-&gt;linesize[p]); type *dst = (type *)(out-&gt;data[p] + slice_start * out-&gt;linesize[p]); for (int y = 0; y &lt; height; y++) { for (int x = 0; x &lt; out-&gt;width; x++) { dst[x] = x &gt; z ? xf1[x] : xf0[x]; } dst += out-&gt;linesize[p] / div; xf0 += a-&gt;linesize[p] / div; xf1 += b-&gt;linesize[p] / div; } } }</cpp:value></cpp:define>

<macro><name>WIPELEFT_TRANSITION</name><argument_list>(<argument><literal type="number">8</literal></argument>, <argument>uint8_t</argument>, <argument><literal type="number">1</literal></argument>)</argument_list></macro>

<macro><name>WIPELEFT_TRANSITION</name><argument_list>(<argument><literal type="number">16</literal></argument>, <argument>uint16_t</argument>, <argument><literal type="number">2</literal></argument>)</argument_list></macro>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WIPERIGHT_TRANSITION</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>type</name></type></parameter>, <parameter><type><name>div</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static void wiperight##name##_transition(AVFilterContext *ctx, const AVFrame *a, const AVFrame *b, AVFrame *out, float progress, int slice_start, int slice_end, int jobnr) { XFadeContext *s = ctx-&gt;priv; const int height = slice_end - slice_start; const int z = out-&gt;width * (1.f - progress); for (int p = 0; p &lt; s-&gt;nb_planes; p++) { const type *xf0 = (const type *)(a-&gt;data[p] + slice_start * a-&gt;linesize[p]); const type *xf1 = (const type *)(b-&gt;data[p] + slice_start * b-&gt;linesize[p]); type *dst = (type *)(out-&gt;data[p] + slice_start * out-&gt;linesize[p]); for (int y = 0; y &lt; height; y++) { for (int x = 0; x &lt; out-&gt;width; x++) { dst[x] = x &gt; z ? xf0[x] : xf1[x]; } dst += out-&gt;linesize[p] / div; xf0 += a-&gt;linesize[p] / div; xf1 += b-&gt;linesize[p] / div; } } }</cpp:value></cpp:define>

<macro><name>WIPERIGHT_TRANSITION</name><argument_list>(<argument><literal type="number">8</literal></argument>, <argument>uint8_t</argument>, <argument><literal type="number">1</literal></argument>)</argument_list></macro>

<macro><name>WIPERIGHT_TRANSITION</name><argument_list>(<argument><literal type="number">16</literal></argument>, <argument>uint16_t</argument>, <argument><literal type="number">2</literal></argument>)</argument_list></macro>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WIPEUP_TRANSITION</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>type</name></type></parameter>, <parameter><type><name>div</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static void wipeup##name##_transition(AVFilterContext *ctx, const AVFrame *a, const AVFrame *b, AVFrame *out, float progress, int slice_start, int slice_end, int jobnr) { XFadeContext *s = ctx-&gt;priv; const int height = slice_end - slice_start; const int z = out-&gt;height * progress; for (int p = 0; p &lt; s-&gt;nb_planes; p++) { const type *xf0 = (const type *)(a-&gt;data[p] + slice_start * a-&gt;linesize[p]); const type *xf1 = (const type *)(b-&gt;data[p] + slice_start * b-&gt;linesize[p]); type *dst = (type *)(out-&gt;data[p] + slice_start * out-&gt;linesize[p]); for (int y = 0; y &lt; height; y++) { for (int x = 0; x &lt; out-&gt;width; x++) { dst[x] = slice_start + y &gt; z ? xf1[x] : xf0[x]; } dst += out-&gt;linesize[p] / div; xf0 += a-&gt;linesize[p] / div; xf1 += b-&gt;linesize[p] / div; } } }</cpp:value></cpp:define>

<macro><name>WIPEUP_TRANSITION</name><argument_list>(<argument><literal type="number">8</literal></argument>, <argument>uint8_t</argument>, <argument><literal type="number">1</literal></argument>)</argument_list></macro>

<macro><name>WIPEUP_TRANSITION</name><argument_list>(<argument><literal type="number">16</literal></argument>, <argument>uint16_t</argument>, <argument><literal type="number">2</literal></argument>)</argument_list></macro>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WIPEDOWN_TRANSITION</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>type</name></type></parameter>, <parameter><type><name>div</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static void wipedown##name##_transition(AVFilterContext *ctx, const AVFrame *a, const AVFrame *b, AVFrame *out, float progress, int slice_start, int slice_end, int jobnr) { XFadeContext *s = ctx-&gt;priv; const int height = slice_end - slice_start; const int z = out-&gt;height * (1.f - progress); for (int p = 0; p &lt; s-&gt;nb_planes; p++) { const type *xf0 = (const type *)(a-&gt;data[p] + slice_start * a-&gt;linesize[p]); const type *xf1 = (const type *)(b-&gt;data[p] + slice_start * b-&gt;linesize[p]); type *dst = (type *)(out-&gt;data[p] + slice_start * out-&gt;linesize[p]); for (int y = 0; y &lt; height; y++) { for (int x = 0; x &lt; out-&gt;width; x++) { dst[x] = slice_start + y &gt; z ? xf0[x] : xf1[x]; } dst += out-&gt;linesize[p] / div; xf0 += a-&gt;linesize[p] / div; xf1 += b-&gt;linesize[p] / div; } } }</cpp:value></cpp:define>

<macro><name>WIPEDOWN_TRANSITION</name><argument_list>(<argument><literal type="number">8</literal></argument>, <argument>uint8_t</argument>, <argument><literal type="number">1</literal></argument>)</argument_list></macro>

<macro><name>WIPEDOWN_TRANSITION</name><argument_list>(<argument><literal type="number">16</literal></argument>, <argument>uint16_t</argument>, <argument><literal type="number">2</literal></argument>)</argument_list></macro>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SLIDELEFT_TRANSITION</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>type</name></type></parameter>, <parameter><type><name>div</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static void slideleft##name##_transition(AVFilterContext *ctx, const AVFrame *a, const AVFrame *b, AVFrame *out, float progress, int slice_start, int slice_end, int jobnr) { XFadeContext *s = ctx-&gt;priv; const int height = slice_end - slice_start; const int width = out-&gt;width; const int z = -progress * width; for (int p = 0; p &lt; s-&gt;nb_planes; p++) { const type *xf0 = (const type *)(a-&gt;data[p] + slice_start * a-&gt;linesize[p]); const type *xf1 = (const type *)(b-&gt;data[p] + slice_start * b-&gt;linesize[p]); type *dst = (type *)(out-&gt;data[p] + slice_start * out-&gt;linesize[p]); for (int y = 0; y &lt; height; y++) { for (int x = 0; x &lt; width; x++) { const int zx = z + x; const int zz = zx % width + width * (zx &lt; 0); dst[x] = (zx &gt; 0) &amp;&amp; (zx &lt; width) ? xf1[zz] : xf0[zz]; } dst += out-&gt;linesize[p] / div; xf0 += a-&gt;linesize[p] / div; xf1 += b-&gt;linesize[p] / div; } } }</cpp:value></cpp:define>

<macro><name>SLIDELEFT_TRANSITION</name><argument_list>(<argument><literal type="number">8</literal></argument>, <argument>uint8_t</argument>, <argument><literal type="number">1</literal></argument>)</argument_list></macro>

<macro><name>SLIDELEFT_TRANSITION</name><argument_list>(<argument><literal type="number">16</literal></argument>, <argument>uint16_t</argument>, <argument><literal type="number">2</literal></argument>)</argument_list></macro>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SLIDERIGHT_TRANSITION</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>type</name></type></parameter>, <parameter><type><name>div</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static void slideright##name##_transition(AVFilterContext *ctx, const AVFrame *a, const AVFrame *b, AVFrame *out, float progress, int slice_start, int slice_end, int jobnr) { XFadeContext *s = ctx-&gt;priv; const int height = slice_end - slice_start; const int width = out-&gt;width; const int z = progress * width; for (int p = 0; p &lt; s-&gt;nb_planes; p++) { const type *xf0 = (const type *)(a-&gt;data[p] + slice_start * a-&gt;linesize[p]); const type *xf1 = (const type *)(b-&gt;data[p] + slice_start * b-&gt;linesize[p]); type *dst = (type *)(out-&gt;data[p] + slice_start * out-&gt;linesize[p]); for (int y = 0; y &lt; height; y++) { for (int x = 0; x &lt; out-&gt;width; x++) { const int zx = z + x; const int zz = zx % width + width * (zx &lt; 0); dst[x] = (zx &gt; 0) &amp;&amp; (zx &lt; width) ? xf1[zz] : xf0[zz]; } dst += out-&gt;linesize[p] / div; xf0 += a-&gt;linesize[p] / div; xf1 += b-&gt;linesize[p] / div; } } }</cpp:value></cpp:define>

<macro><name>SLIDERIGHT_TRANSITION</name><argument_list>(<argument><literal type="number">8</literal></argument>, <argument>uint8_t</argument>, <argument><literal type="number">1</literal></argument>)</argument_list></macro>

<macro><name>SLIDERIGHT_TRANSITION</name><argument_list>(<argument><literal type="number">16</literal></argument>, <argument>uint16_t</argument>, <argument><literal type="number">2</literal></argument>)</argument_list></macro>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SLIDEUP_TRANSITION</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>type</name></type></parameter>, <parameter><type><name>div</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static void slideup##name##_transition(AVFilterContext *ctx, const AVFrame *a, const AVFrame *b, AVFrame *out, float progress, int slice_start, int slice_end, int jobnr) { XFadeContext *s = ctx-&gt;priv; const int height = out-&gt;height; const int z = -progress * height; for (int p = 0; p &lt; s-&gt;nb_planes; p++) { type *dst = (type *)(out-&gt;data[p] + slice_start * out-&gt;linesize[p]); for (int y = slice_start; y &lt; slice_end; y++) { const int zy = z + y; const int zz = zy % height + height * (zy &lt; 0); const type *xf0 = (const type *)(a-&gt;data[p] + zz * a-&gt;linesize[p]); const type *xf1 = (const type *)(b-&gt;data[p] + zz * b-&gt;linesize[p]); for (int x = 0; x &lt; out-&gt;width; x++) { dst[x] = (zy &gt; 0) &amp;&amp; (zy &lt; height) ? xf1[x] : xf0[x]; } dst += out-&gt;linesize[p] / div; } } }</cpp:value></cpp:define>

<macro><name>SLIDEUP_TRANSITION</name><argument_list>(<argument><literal type="number">8</literal></argument>, <argument>uint8_t</argument>, <argument><literal type="number">1</literal></argument>)</argument_list></macro>

<macro><name>SLIDEUP_TRANSITION</name><argument_list>(<argument><literal type="number">16</literal></argument>, <argument>uint16_t</argument>, <argument><literal type="number">2</literal></argument>)</argument_list></macro>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SLIDEDOWN_TRANSITION</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>type</name></type></parameter>, <parameter><type><name>div</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static void slidedown##name##_transition(AVFilterContext *ctx, const AVFrame *a, const AVFrame *b, AVFrame *out, float progress, int slice_start, int slice_end, int jobnr) { XFadeContext *s = ctx-&gt;priv; const int height = out-&gt;height; const int z = progress * height; for (int p = 0; p &lt; s-&gt;nb_planes; p++) { type *dst = (type *)(out-&gt;data[p] + slice_start * out-&gt;linesize[p]); for (int y = slice_start; y &lt; slice_end; y++) { const int zy = z + y; const int zz = zy % height + height * (zy &lt; 0); const type *xf0 = (const type *)(a-&gt;data[p] + zz * a-&gt;linesize[p]); const type *xf1 = (const type *)(b-&gt;data[p] + zz * b-&gt;linesize[p]); for (int x = 0; x &lt; out-&gt;width; x++) { dst[x] = (zy &gt; 0) &amp;&amp; (zy &lt; height) ? xf1[x] : xf0[x]; } dst += out-&gt;linesize[p] / div; } } }</cpp:value></cpp:define>

<macro><name>SLIDEDOWN_TRANSITION</name><argument_list>(<argument><literal type="number">8</literal></argument>, <argument>uint8_t</argument>, <argument><literal type="number">1</literal></argument>)</argument_list></macro>

<macro><name>SLIDEDOWN_TRANSITION</name><argument_list>(<argument><literal type="number">16</literal></argument>, <argument>uint16_t</argument>, <argument><literal type="number">2</literal></argument>)</argument_list></macro>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CIRCLECROP_TRANSITION</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>type</name></type></parameter>, <parameter><type><name>div</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static void circlecrop##name##_transition(AVFilterContext *ctx, const AVFrame *a, const AVFrame *b, AVFrame *out, float progress, int slice_start, int slice_end, int jobnr) { XFadeContext *s = ctx-&gt;priv; const int width = out-&gt;width; const int height = out-&gt;height; float z = powf(2.f * fabsf(progress - 0.5f), 3.f) * hypotf(width/2, height/2); for (int p = 0; p &lt; s-&gt;nb_planes; p++) { const int bg = s-&gt;black[p]; type *dst = (type *)(out-&gt;data[p] + slice_start * out-&gt;linesize[p]); for (int y = slice_start; y &lt; slice_end; y++) { const type *xf0 = (const type *)(a-&gt;data[p] + y * a-&gt;linesize[p]); const type *xf1 = (const type *)(b-&gt;data[p] + y * b-&gt;linesize[p]); for (int x = 0; x &lt; width; x++) { float dist = hypotf(x - width / 2, y - height / 2); int val = progress &lt; 0.5f ? xf1[x] : xf0[x]; dst[x] = (z &lt; dist) ? bg : val; } dst += out-&gt;linesize[p] / div; } } }</cpp:value></cpp:define>

<macro><name>CIRCLECROP_TRANSITION</name><argument_list>(<argument><literal type="number">8</literal></argument>, <argument>uint8_t</argument>, <argument><literal type="number">1</literal></argument>)</argument_list></macro>

<macro><name>CIRCLECROP_TRANSITION</name><argument_list>(<argument><literal type="number">16</literal></argument>, <argument>uint16_t</argument>, <argument><literal type="number">2</literal></argument>)</argument_list></macro>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RECTCROP_TRANSITION</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>type</name></type></parameter>, <parameter><type><name>div</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static void rectcrop##name##_transition(AVFilterContext *ctx, const AVFrame *a, const AVFrame *b, AVFrame *out, float progress, int slice_start, int slice_end, int jobnr) { XFadeContext *s = ctx-&gt;priv; const int width = out-&gt;width; const int height = out-&gt;height; int zh = fabsf(progress - 0.5f) * height; int zw = fabsf(progress - 0.5f) * width; for (int p = 0; p &lt; s-&gt;nb_planes; p++) { const int bg = s-&gt;black[p]; type *dst = (type *)(out-&gt;data[p] + slice_start * out-&gt;linesize[p]); for (int y = slice_start; y &lt; slice_end; y++) { const type *xf0 = (const type *)(a-&gt;data[p] + y * a-&gt;linesize[p]); const type *xf1 = (const type *)(b-&gt;data[p] + y * b-&gt;linesize[p]); for (int x = 0; x &lt; width; x++) { int dist = FFABS(x - width / 2) &lt; zw &amp;&amp; FFABS(y - height / 2) &lt; zh; int val = progress &lt; 0.5f ? xf1[x] : xf0[x]; dst[x] = !dist ? bg : val; } dst += out-&gt;linesize[p] / div; } } }</cpp:value></cpp:define>

<macro><name>RECTCROP_TRANSITION</name><argument_list>(<argument><literal type="number">8</literal></argument>, <argument>uint8_t</argument>, <argument><literal type="number">1</literal></argument>)</argument_list></macro>

<macro><name>RECTCROP_TRANSITION</name><argument_list>(<argument><literal type="number">16</literal></argument>, <argument>uint16_t</argument>, <argument><literal type="number">2</literal></argument>)</argument_list></macro>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DISTANCE_TRANSITION</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>type</name></type></parameter>, <parameter><type><name>div</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static void distance##name##_transition(AVFilterContext *ctx, const AVFrame *a, const AVFrame *b, AVFrame *out, float progress, int slice_start, int slice_end, int jobnr) { XFadeContext *s = ctx-&gt;priv; const int width = out-&gt;width; const float max = s-&gt;max_value; for (int y = slice_start; y &lt; slice_end; y++) { for (int x = 0; x &lt; width; x++) { float dist = 0.f; for (int p = 0; p &lt; s-&gt;nb_planes; p++) { const type *xf0 = (const type *)(a-&gt;data[p] + y * a-&gt;linesize[p]); const type *xf1 = (const type *)(b-&gt;data[p] + y * b-&gt;linesize[p]); dist += (xf0[x] / max - xf1[x] / max) * (xf0[x] / max - xf1[x] / max); } dist = sqrtf(dist) &lt;= progress; for (int p = 0; p &lt; s-&gt;nb_planes; p++) { const type *xf0 = (const type *)(a-&gt;data[p] + y * a-&gt;linesize[p]); const type *xf1 = (const type *)(b-&gt;data[p] + y * b-&gt;linesize[p]); type *dst = (type *)(out-&gt;data[p] + y * out-&gt;linesize[p]); dst[x] = mix(mix(xf0[x], xf1[x], dist), xf1[x], progress); } } } }</cpp:value></cpp:define>

<macro><name>DISTANCE_TRANSITION</name><argument_list>(<argument><literal type="number">8</literal></argument>, <argument>uint8_t</argument>, <argument><literal type="number">1</literal></argument>)</argument_list></macro>

<macro><name>DISTANCE_TRANSITION</name><argument_list>(<argument><literal type="number">16</literal></argument>, <argument>uint16_t</argument>, <argument><literal type="number">2</literal></argument>)</argument_list></macro>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FADEBLACK_TRANSITION</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>type</name></type></parameter>, <parameter><type><name>div</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static void fadeblack##name##_transition(AVFilterContext *ctx, const AVFrame *a, const AVFrame *b, AVFrame *out, float progress, int slice_start, int slice_end, int jobnr) { XFadeContext *s = ctx-&gt;priv; const int height = slice_end - slice_start; const float phase = 0.2f; for (int p = 0; p &lt; s-&gt;nb_planes; p++) { const type *xf0 = (const type *)(a-&gt;data[p] + slice_start * a-&gt;linesize[p]); const type *xf1 = (const type *)(b-&gt;data[p] + slice_start * b-&gt;linesize[p]); type *dst = (type *)(out-&gt;data[p] + slice_start * out-&gt;linesize[p]); const int bg = s-&gt;black[p]; for (int y = 0; y &lt; height; y++) { for (int x = 0; x &lt; out-&gt;width; x++) { dst[x] = mix(mix(xf0[x], bg, smoothstep(1.f-phase, 1.f, progress)), mix(bg, xf1[x], smoothstep(phase, 1.f, progress)), progress); } dst += out-&gt;linesize[p] / div; xf0 += a-&gt;linesize[p] / div; xf1 += b-&gt;linesize[p] / div; } } }</cpp:value></cpp:define>

<macro><name>FADEBLACK_TRANSITION</name><argument_list>(<argument><literal type="number">8</literal></argument>, <argument>uint8_t</argument>, <argument><literal type="number">1</literal></argument>)</argument_list></macro>

<macro><name>FADEBLACK_TRANSITION</name><argument_list>(<argument><literal type="number">16</literal></argument>, <argument>uint16_t</argument>, <argument><literal type="number">2</literal></argument>)</argument_list></macro>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FADEWHITE_TRANSITION</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>type</name></type></parameter>, <parameter><type><name>div</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static void fadewhite##name##_transition(AVFilterContext *ctx, const AVFrame *a, const AVFrame *b, AVFrame *out, float progress, int slice_start, int slice_end, int jobnr) { XFadeContext *s = ctx-&gt;priv; const int height = slice_end - slice_start; const float phase = 0.2f; for (int p = 0; p &lt; s-&gt;nb_planes; p++) { const type *xf0 = (const type *)(a-&gt;data[p] + slice_start * a-&gt;linesize[p]); const type *xf1 = (const type *)(b-&gt;data[p] + slice_start * b-&gt;linesize[p]); type *dst = (type *)(out-&gt;data[p] + slice_start * out-&gt;linesize[p]); const int bg = s-&gt;white[p]; for (int y = 0; y &lt; height; y++) { for (int x = 0; x &lt; out-&gt;width; x++) { dst[x] = mix(mix(xf0[x], bg, smoothstep(1.f-phase, 1.f, progress)), mix(bg, xf1[x], smoothstep(phase, 1.f, progress)), progress); } dst += out-&gt;linesize[p] / div; xf0 += a-&gt;linesize[p] / div; xf1 += b-&gt;linesize[p] / div; } } }</cpp:value></cpp:define>

<macro><name>FADEWHITE_TRANSITION</name><argument_list>(<argument><literal type="number">8</literal></argument>, <argument>uint8_t</argument>, <argument><literal type="number">1</literal></argument>)</argument_list></macro>

<macro><name>FADEWHITE_TRANSITION</name><argument_list>(<argument><literal type="number">16</literal></argument>, <argument>uint16_t</argument>, <argument><literal type="number">2</literal></argument>)</argument_list></macro>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RADIAL_TRANSITION</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>type</name></type></parameter>, <parameter><type><name>div</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static void radial##name##_transition(AVFilterContext *ctx, const AVFrame *a, const AVFrame *b, AVFrame *out, float progress, int slice_start, int slice_end, int jobnr) { XFadeContext *s = ctx-&gt;priv; const int width = out-&gt;width; const int height = out-&gt;height; for (int y = slice_start; y &lt; slice_end; y++) { for (int x = 0; x &lt; width; x++) { const float smooth = atan2f(x - width / 2, y - height / 2) - (progress - 0.5f) * (M_PI * 2.5f); for (int p = 0; p &lt; s-&gt;nb_planes; p++) { const type *xf0 = (const type *)(a-&gt;data[p] + y * a-&gt;linesize[p]); const type *xf1 = (const type *)(b-&gt;data[p] + y * b-&gt;linesize[p]); type *dst = (type *)(out-&gt;data[p] + y * out-&gt;linesize[p]); dst[x] = mix(xf1[x], xf0[x], smoothstep(0.f, 1.f, smooth)); } } } }</cpp:value></cpp:define>

<macro><name>RADIAL_TRANSITION</name><argument_list>(<argument><literal type="number">8</literal></argument>, <argument>uint8_t</argument>, <argument><literal type="number">1</literal></argument>)</argument_list></macro>

<macro><name>RADIAL_TRANSITION</name><argument_list>(<argument><literal type="number">16</literal></argument>, <argument>uint16_t</argument>, <argument><literal type="number">2</literal></argument>)</argument_list></macro>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SMOOTHLEFT_TRANSITION</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>type</name></type></parameter>, <parameter><type><name>div</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static void smoothleft##name##_transition(AVFilterContext *ctx, const AVFrame *a, const AVFrame *b, AVFrame *out, float progress, int slice_start, int slice_end, int jobnr) { XFadeContext *s = ctx-&gt;priv; const int width = out-&gt;width; const float w = width; for (int y = slice_start; y &lt; slice_end; y++) { for (int x = 0; x &lt; width; x++) { const float smooth = 1.f + x / w - progress * 2.f; for (int p = 0; p &lt; s-&gt;nb_planes; p++) { const type *xf0 = (const type *)(a-&gt;data[p] + y * a-&gt;linesize[p]); const type *xf1 = (const type *)(b-&gt;data[p] + y * b-&gt;linesize[p]); type *dst = (type *)(out-&gt;data[p] + y * out-&gt;linesize[p]); dst[x] = mix(xf1[x], xf0[x], smoothstep(0.f, 1.f, smooth)); } } } }</cpp:value></cpp:define>

<macro><name>SMOOTHLEFT_TRANSITION</name><argument_list>(<argument><literal type="number">8</literal></argument>, <argument>uint8_t</argument>, <argument><literal type="number">1</literal></argument>)</argument_list></macro>

<macro><name>SMOOTHLEFT_TRANSITION</name><argument_list>(<argument><literal type="number">16</literal></argument>, <argument>uint16_t</argument>, <argument><literal type="number">2</literal></argument>)</argument_list></macro>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SMOOTHRIGHT_TRANSITION</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>type</name></type></parameter>, <parameter><type><name>div</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static void smoothright##name##_transition(AVFilterContext *ctx, const AVFrame *a, const AVFrame *b, AVFrame *out, float progress, int slice_start, int slice_end, int jobnr) { XFadeContext *s = ctx-&gt;priv; const int width = out-&gt;width; const float w = width; for (int y = slice_start; y &lt; slice_end; y++) { for (int x = 0; x &lt; width; x++) { const float smooth = 1.f + (w - 1 - x) / w - progress * 2.f; for (int p = 0; p &lt; s-&gt;nb_planes; p++) { const type *xf0 = (const type *)(a-&gt;data[p] + y * a-&gt;linesize[p]); const type *xf1 = (const type *)(b-&gt;data[p] + y * b-&gt;linesize[p]); type *dst = (type *)(out-&gt;data[p] + y * out-&gt;linesize[p]); dst[x] = mix(xf1[x], xf0[x], smoothstep(0.f, 1.f, smooth)); } } } }</cpp:value></cpp:define>

<macro><name>SMOOTHRIGHT_TRANSITION</name><argument_list>(<argument><literal type="number">8</literal></argument>, <argument>uint8_t</argument>, <argument><literal type="number">1</literal></argument>)</argument_list></macro>

<macro><name>SMOOTHRIGHT_TRANSITION</name><argument_list>(<argument><literal type="number">16</literal></argument>, <argument>uint16_t</argument>, <argument><literal type="number">2</literal></argument>)</argument_list></macro>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SMOOTHUP_TRANSITION</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>type</name></type></parameter>, <parameter><type><name>div</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static void smoothup##name##_transition(AVFilterContext *ctx, const AVFrame *a, const AVFrame *b, AVFrame *out, float progress, int slice_start, int slice_end, int jobnr) { XFadeContext *s = ctx-&gt;priv; const int width = out-&gt;width; const float h = out-&gt;height; for (int y = slice_start; y &lt; slice_end; y++) { const float smooth = 1.f + y / h - progress * 2.f; for (int x = 0; x &lt; width; x++) { for (int p = 0; p &lt; s-&gt;nb_planes; p++) { const type *xf0 = (const type *)(a-&gt;data[p] + y * a-&gt;linesize[p]); const type *xf1 = (const type *)(b-&gt;data[p] + y * b-&gt;linesize[p]); type *dst = (type *)(out-&gt;data[p] + y * out-&gt;linesize[p]); dst[x] = mix(xf1[x], xf0[x], smoothstep(0.f, 1.f, smooth)); } } } }</cpp:value></cpp:define>

<macro><name>SMOOTHUP_TRANSITION</name><argument_list>(<argument><literal type="number">8</literal></argument>, <argument>uint8_t</argument>, <argument><literal type="number">1</literal></argument>)</argument_list></macro>

<macro><name>SMOOTHUP_TRANSITION</name><argument_list>(<argument><literal type="number">16</literal></argument>, <argument>uint16_t</argument>, <argument><literal type="number">2</literal></argument>)</argument_list></macro>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SMOOTHDOWN_TRANSITION</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>type</name></type></parameter>, <parameter><type><name>div</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static void smoothdown##name##_transition(AVFilterContext *ctx, const AVFrame *a, const AVFrame *b, AVFrame *out, float progress, int slice_start, int slice_end, int jobnr) { XFadeContext *s = ctx-&gt;priv; const int width = out-&gt;width; const float h = out-&gt;height; for (int y = slice_start; y &lt; slice_end; y++) { const float smooth = 1.f + (h - 1 - y) / h - progress * 2.f; for (int x = 0; x &lt; width; x++) { for (int p = 0; p &lt; s-&gt;nb_planes; p++) { const type *xf0 = (const type *)(a-&gt;data[p] + y * a-&gt;linesize[p]); const type *xf1 = (const type *)(b-&gt;data[p] + y * b-&gt;linesize[p]); type *dst = (type *)(out-&gt;data[p] + y * out-&gt;linesize[p]); dst[x] = mix(xf1[x], xf0[x], smoothstep(0.f, 1.f, smooth)); } } } }</cpp:value></cpp:define>

<macro><name>SMOOTHDOWN_TRANSITION</name><argument_list>(<argument><literal type="number">8</literal></argument>, <argument>uint8_t</argument>, <argument><literal type="number">1</literal></argument>)</argument_list></macro>

<macro><name>SMOOTHDOWN_TRANSITION</name><argument_list>(<argument><literal type="number">16</literal></argument>, <argument>uint16_t</argument>, <argument><literal type="number">2</literal></argument>)</argument_list></macro>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CIRCLEOPEN_TRANSITION</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>type</name></type></parameter>, <parameter><type><name>div</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static void circleopen##name##_transition(AVFilterContext *ctx, const AVFrame *a, const AVFrame *b, AVFrame *out, float progress, int slice_start, int slice_end, int jobnr) { XFadeContext *s = ctx-&gt;priv; const int width = out-&gt;width; const int height = out-&gt;height; const float z = hypotf(width / 2, height / 2); const float p = (progress - 0.5f) * 3.f; for (int y = slice_start; y &lt; slice_end; y++) { for (int x = 0; x &lt; width; x++) { const float smooth = hypotf(x - width / 2, y - height / 2) / z + p; for (int p = 0; p &lt; s-&gt;nb_planes; p++) { const type *xf0 = (const type *)(a-&gt;data[p] + y * a-&gt;linesize[p]); const type *xf1 = (const type *)(b-&gt;data[p] + y * b-&gt;linesize[p]); type *dst = (type *)(out-&gt;data[p] + y * out-&gt;linesize[p]); dst[x] = mix(xf0[x], xf1[x], smoothstep(0.f, 1.f, smooth)); } } } }</cpp:value></cpp:define>

<macro><name>CIRCLEOPEN_TRANSITION</name><argument_list>(<argument><literal type="number">8</literal></argument>, <argument>uint8_t</argument>, <argument><literal type="number">1</literal></argument>)</argument_list></macro>

<macro><name>CIRCLEOPEN_TRANSITION</name><argument_list>(<argument><literal type="number">16</literal></argument>, <argument>uint16_t</argument>, <argument><literal type="number">2</literal></argument>)</argument_list></macro>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CIRCLECLOSE_TRANSITION</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>type</name></type></parameter>, <parameter><type><name>div</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static void circleclose##name##_transition(AVFilterContext *ctx, const AVFrame *a, const AVFrame *b, AVFrame *out, float progress, int slice_start, int slice_end, int jobnr) { XFadeContext *s = ctx-&gt;priv; const int width = out-&gt;width; const int height = out-&gt;height; const float z = hypotf(width / 2, height / 2); const float p = (1.f - progress - 0.5f) * 3.f; for (int y = slice_start; y &lt; slice_end; y++) { for (int x = 0; x &lt; width; x++) { const float smooth = hypotf(x - width / 2, y - height / 2) / z + p; for (int p = 0; p &lt; s-&gt;nb_planes; p++) { const type *xf0 = (const type *)(a-&gt;data[p] + y * a-&gt;linesize[p]); const type *xf1 = (const type *)(b-&gt;data[p] + y * b-&gt;linesize[p]); type *dst = (type *)(out-&gt;data[p] + y * out-&gt;linesize[p]); dst[x] = mix(xf1[x], xf0[x], smoothstep(0.f, 1.f, smooth)); } } } }</cpp:value></cpp:define>

<macro><name>CIRCLECLOSE_TRANSITION</name><argument_list>(<argument><literal type="number">8</literal></argument>, <argument>uint8_t</argument>, <argument><literal type="number">1</literal></argument>)</argument_list></macro>

<macro><name>CIRCLECLOSE_TRANSITION</name><argument_list>(<argument><literal type="number">16</literal></argument>, <argument>uint16_t</argument>, <argument><literal type="number">2</literal></argument>)</argument_list></macro>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VERTOPEN_TRANSITION</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>type</name></type></parameter>, <parameter><type><name>div</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static void vertopen##name##_transition(AVFilterContext *ctx, const AVFrame *a, const AVFrame *b, AVFrame *out, float progress, int slice_start, int slice_end, int jobnr) { XFadeContext *s = ctx-&gt;priv; const int width = out-&gt;width; const float w2 = out-&gt;width / 2; for (int y = slice_start; y &lt; slice_end; y++) { for (int x = 0; x &lt; width; x++) { const float smooth = 2.f - fabsf((x - w2) / w2) - progress * 2.f; for (int p = 0; p &lt; s-&gt;nb_planes; p++) { const type *xf0 = (const type *)(a-&gt;data[p] + y * a-&gt;linesize[p]); const type *xf1 = (const type *)(b-&gt;data[p] + y * b-&gt;linesize[p]); type *dst = (type *)(out-&gt;data[p] + y * out-&gt;linesize[p]); dst[x] = mix(xf1[x], xf0[x], smoothstep(0.f, 1.f, smooth)); } } } }</cpp:value></cpp:define>

<macro><name>VERTOPEN_TRANSITION</name><argument_list>(<argument><literal type="number">8</literal></argument>, <argument>uint8_t</argument>, <argument><literal type="number">1</literal></argument>)</argument_list></macro>

<macro><name>VERTOPEN_TRANSITION</name><argument_list>(<argument><literal type="number">16</literal></argument>, <argument>uint16_t</argument>, <argument><literal type="number">2</literal></argument>)</argument_list></macro>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VERTCLOSE_TRANSITION</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>type</name></type></parameter>, <parameter><type><name>div</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static void vertclose##name##_transition(AVFilterContext *ctx, const AVFrame *a, const AVFrame *b, AVFrame *out, float progress, int slice_start, int slice_end, int jobnr) { XFadeContext *s = ctx-&gt;priv; const int width = out-&gt;width; const float w2 = out-&gt;width / 2; for (int y = slice_start; y &lt; slice_end; y++) { for (int x = 0; x &lt; width; x++) { const float smooth = 1.f + fabsf((x - w2) / w2) - progress * 2.f; for (int p = 0; p &lt; s-&gt;nb_planes; p++) { const type *xf0 = (const type *)(a-&gt;data[p] + y * a-&gt;linesize[p]); const type *xf1 = (const type *)(b-&gt;data[p] + y * b-&gt;linesize[p]); type *dst = (type *)(out-&gt;data[p] + y * out-&gt;linesize[p]); dst[x] = mix(xf1[x], xf0[x], smoothstep(0.f, 1.f, smooth)); } } } }</cpp:value></cpp:define>

<macro><name>VERTCLOSE_TRANSITION</name><argument_list>(<argument><literal type="number">8</literal></argument>, <argument>uint8_t</argument>, <argument><literal type="number">1</literal></argument>)</argument_list></macro>

<macro><name>VERTCLOSE_TRANSITION</name><argument_list>(<argument><literal type="number">16</literal></argument>, <argument>uint16_t</argument>, <argument><literal type="number">2</literal></argument>)</argument_list></macro>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HORZOPEN_TRANSITION</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>type</name></type></parameter>, <parameter><type><name>div</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static void horzopen##name##_transition(AVFilterContext *ctx, const AVFrame *a, const AVFrame *b, AVFrame *out, float progress, int slice_start, int slice_end, int jobnr) { XFadeContext *s = ctx-&gt;priv; const int width = out-&gt;width; const float h2 = out-&gt;height / 2; for (int y = slice_start; y &lt; slice_end; y++) { const float smooth = 2.f - fabsf((y - h2) / h2) - progress * 2.f; for (int x = 0; x &lt; width; x++) { for (int p = 0; p &lt; s-&gt;nb_planes; p++) { const type *xf0 = (const type *)(a-&gt;data[p] + y * a-&gt;linesize[p]); const type *xf1 = (const type *)(b-&gt;data[p] + y * b-&gt;linesize[p]); type *dst = (type *)(out-&gt;data[p] + y * out-&gt;linesize[p]); dst[x] = mix(xf1[x], xf0[x], smoothstep(0.f, 1.f, smooth)); } } } }</cpp:value></cpp:define>

<macro><name>HORZOPEN_TRANSITION</name><argument_list>(<argument><literal type="number">8</literal></argument>, <argument>uint8_t</argument>, <argument><literal type="number">1</literal></argument>)</argument_list></macro>

<macro><name>HORZOPEN_TRANSITION</name><argument_list>(<argument><literal type="number">16</literal></argument>, <argument>uint16_t</argument>, <argument><literal type="number">2</literal></argument>)</argument_list></macro>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HORZCLOSE_TRANSITION</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>type</name></type></parameter>, <parameter><type><name>div</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static void horzclose##name##_transition(AVFilterContext *ctx, const AVFrame *a, const AVFrame *b, AVFrame *out, float progress, int slice_start, int slice_end, int jobnr) { XFadeContext *s = ctx-&gt;priv; const int width = out-&gt;width; const float h2 = out-&gt;height / 2; for (int y = slice_start; y &lt; slice_end; y++) { const float smooth = 1.f + fabsf((y - h2) / h2) - progress * 2.f; for (int x = 0; x &lt; width; x++) { for (int p = 0; p &lt; s-&gt;nb_planes; p++) { const type *xf0 = (const type *)(a-&gt;data[p] + y * a-&gt;linesize[p]); const type *xf1 = (const type *)(b-&gt;data[p] + y * b-&gt;linesize[p]); type *dst = (type *)(out-&gt;data[p] + y * out-&gt;linesize[p]); dst[x] = mix(xf1[x], xf0[x], smoothstep(0.f, 1.f, smooth)); } } } }</cpp:value></cpp:define>

<macro><name>HORZCLOSE_TRANSITION</name><argument_list>(<argument><literal type="number">8</literal></argument>, <argument>uint8_t</argument>, <argument><literal type="number">1</literal></argument>)</argument_list></macro>

<macro><name>HORZCLOSE_TRANSITION</name><argument_list>(<argument><literal type="number">16</literal></argument>, <argument>uint16_t</argument>, <argument><literal type="number">2</literal></argument>)</argument_list></macro>

<function><type><specifier>static</specifier> <name>float</name></type> <name>frand</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>r</name> <init>= <expr><call><name>sinf</name><argument_list>(<argument><expr><name>x</name> <operator>*</operator> <literal type="number">12.9898f</literal> <operator>+</operator> <name>y</name> <operator>*</operator> <literal type="number">78.233f</literal></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">43758.545f</literal></expr></init></decl>;</decl_stmt>

<return>return <expr><name>r</name> <operator>-</operator> <call><name>floorf</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DISSOLVE_TRANSITION</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>type</name></type></parameter>, <parameter><type><name>div</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static void dissolve##name##_transition(AVFilterContext *ctx, const AVFrame *a, const AVFrame *b, AVFrame *out, float progress, int slice_start, int slice_end, int jobnr) { XFadeContext *s = ctx-&gt;priv; const int width = out-&gt;width; for (int y = slice_start; y &lt; slice_end; y++) { for (int x = 0; x &lt; width; x++) { const float smooth = frand(x, y) * 2.f + progress * 2.f - 1.5f; for (int p = 0; p &lt; s-&gt;nb_planes; p++) { const type *xf0 = (const type *)(a-&gt;data[p] + y * a-&gt;linesize[p]); const type *xf1 = (const type *)(b-&gt;data[p] + y * b-&gt;linesize[p]); type *dst = (type *)(out-&gt;data[p] + y * out-&gt;linesize[p]); dst[x] = smooth &gt;= 0.5f ? xf0[x] : xf1[x]; } } } }</cpp:value></cpp:define>

<macro><name>DISSOLVE_TRANSITION</name><argument_list>(<argument><literal type="number">8</literal></argument>, <argument>uint8_t</argument>, <argument><literal type="number">1</literal></argument>)</argument_list></macro>

<macro><name>DISSOLVE_TRANSITION</name><argument_list>(<argument><literal type="number">16</literal></argument>, <argument>uint16_t</argument>, <argument><literal type="number">2</literal></argument>)</argument_list></macro>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PIXELIZE_TRANSITION</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>type</name></type></parameter>, <parameter><type><name>div</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static void pixelize##name##_transition(AVFilterContext *ctx, const AVFrame *a, const AVFrame *b, AVFrame *out, float progress, int slice_start, int slice_end, int jobnr) { XFadeContext *s = ctx-&gt;priv; const int w = out-&gt;width; const int h = out-&gt;height; const float d = fminf(progress, 1.f - progress); const float dist = ceilf(d * 50.f) / 50.f; const float sqx = 2.f * dist * FFMIN(w, h) / 20.f; const float sqy = 2.f * dist * FFMIN(w, h) / 20.f; for (int y = slice_start; y &lt; slice_end; y++) { for (int x = 0; x &lt; w; x++) { int sx = dist &gt; 0.f ? FFMIN((floorf(x / sqx) + .5f) * sqx, w - 1) : x; int sy = dist &gt; 0.f ? FFMIN((floorf(y / sqy) + .5f) * sqy, h - 1) : y; for (int p = 0; p &lt; s-&gt;nb_planes; p++) { const type *xf0 = (const type *)(a-&gt;data[p] + sy * a-&gt;linesize[p]); const type *xf1 = (const type *)(b-&gt;data[p] + sy * b-&gt;linesize[p]); type *dst = (type *)(out-&gt;data[p] + y * out-&gt;linesize[p]); dst[x] = mix(xf0[sx], xf1[sx], progress); } } } }</cpp:value></cpp:define>

<macro><name>PIXELIZE_TRANSITION</name><argument_list>(<argument><literal type="number">8</literal></argument>, <argument>uint8_t</argument>, <argument><literal type="number">1</literal></argument>)</argument_list></macro>

<macro><name>PIXELIZE_TRANSITION</name><argument_list>(<argument><literal type="number">16</literal></argument>, <argument>uint16_t</argument>, <argument><literal type="number">2</literal></argument>)</argument_list></macro>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIAGTL_TRANSITION</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>type</name></type></parameter>, <parameter><type><name>div</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static void diagtl##name##_transition(AVFilterContext *ctx, const AVFrame *a, const AVFrame *b, AVFrame *out, float progress, int slice_start, int slice_end, int jobnr) { XFadeContext *s = ctx-&gt;priv; const int width = out-&gt;width; const float w = width; const float h = out-&gt;height; for (int y = slice_start; y &lt; slice_end; y++) { for (int x = 0; x &lt; width; x++) { const float smooth = 1.f + x / w * y / h - progress * 2.f; for (int p = 0; p &lt; s-&gt;nb_planes; p++) { const type *xf0 = (const type *)(a-&gt;data[p] + y * a-&gt;linesize[p]); const type *xf1 = (const type *)(b-&gt;data[p] + y * b-&gt;linesize[p]); type *dst = (type *)(out-&gt;data[p] + y * out-&gt;linesize[p]); dst[x] = mix(xf1[x], xf0[x], smoothstep(0.f, 1.f, smooth)); } } } }</cpp:value></cpp:define>

<macro><name>DIAGTL_TRANSITION</name><argument_list>(<argument><literal type="number">8</literal></argument>, <argument>uint8_t</argument>, <argument><literal type="number">1</literal></argument>)</argument_list></macro>

<macro><name>DIAGTL_TRANSITION</name><argument_list>(<argument><literal type="number">16</literal></argument>, <argument>uint16_t</argument>, <argument><literal type="number">2</literal></argument>)</argument_list></macro>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIAGTR_TRANSITION</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>type</name></type></parameter>, <parameter><type><name>div</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static void diagtr##name##_transition(AVFilterContext *ctx, const AVFrame *a, const AVFrame *b, AVFrame *out, float progress, int slice_start, int slice_end, int jobnr) { XFadeContext *s = ctx-&gt;priv; const int width = out-&gt;width; const float w = width; const float h = out-&gt;height; for (int y = slice_start; y &lt; slice_end; y++) { for (int x = 0; x &lt; width; x++) { const float smooth = 1.f + (w - 1 - x) / w * y / h - progress * 2.f; for (int p = 0; p &lt; s-&gt;nb_planes; p++) { const type *xf0 = (const type *)(a-&gt;data[p] + y * a-&gt;linesize[p]); const type *xf1 = (const type *)(b-&gt;data[p] + y * b-&gt;linesize[p]); type *dst = (type *)(out-&gt;data[p] + y * out-&gt;linesize[p]); dst[x] = mix(xf1[x], xf0[x], smoothstep(0.f, 1.f, smooth)); } } } }</cpp:value></cpp:define>

<macro><name>DIAGTR_TRANSITION</name><argument_list>(<argument><literal type="number">8</literal></argument>, <argument>uint8_t</argument>, <argument><literal type="number">1</literal></argument>)</argument_list></macro>

<macro><name>DIAGTR_TRANSITION</name><argument_list>(<argument><literal type="number">16</literal></argument>, <argument>uint16_t</argument>, <argument><literal type="number">2</literal></argument>)</argument_list></macro>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIAGBL_TRANSITION</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>type</name></type></parameter>, <parameter><type><name>div</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static void diagbl##name##_transition(AVFilterContext *ctx, const AVFrame *a, const AVFrame *b, AVFrame *out, float progress, int slice_start, int slice_end, int jobnr) { XFadeContext *s = ctx-&gt;priv; const int width = out-&gt;width; const float w = width; const float h = out-&gt;height; for (int y = slice_start; y &lt; slice_end; y++) { for (int x = 0; x &lt; width; x++) { const float smooth = 1.f + x / w * (h - 1 - y) / h - progress * 2.f; for (int p = 0; p &lt; s-&gt;nb_planes; p++) { const type *xf0 = (const type *)(a-&gt;data[p] + y * a-&gt;linesize[p]); const type *xf1 = (const type *)(b-&gt;data[p] + y * b-&gt;linesize[p]); type *dst = (type *)(out-&gt;data[p] + y * out-&gt;linesize[p]); dst[x] = mix(xf1[x], xf0[x], smoothstep(0.f, 1.f, smooth)); } } } }</cpp:value></cpp:define>

<macro><name>DIAGBL_TRANSITION</name><argument_list>(<argument><literal type="number">8</literal></argument>, <argument>uint8_t</argument>, <argument><literal type="number">1</literal></argument>)</argument_list></macro>

<macro><name>DIAGBL_TRANSITION</name><argument_list>(<argument><literal type="number">16</literal></argument>, <argument>uint16_t</argument>, <argument><literal type="number">2</literal></argument>)</argument_list></macro>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIAGBR_TRANSITION</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>type</name></type></parameter>, <parameter><type><name>div</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static void diagbr##name##_transition(AVFilterContext *ctx, const AVFrame *a, const AVFrame *b, AVFrame *out, float progress, int slice_start, int slice_end, int jobnr) { XFadeContext *s = ctx-&gt;priv; const int width = out-&gt;width; const float w = width; const float h = out-&gt;height; for (int y = slice_start; y &lt; slice_end; y++) { for (int x = 0; x &lt; width; x++) { const float smooth = 1.f + (w - 1 - x) / w * (h - 1 - y) / h - progress * 2.f; for (int p = 0; p &lt; s-&gt;nb_planes; p++) { const type *xf0 = (const type *)(a-&gt;data[p] + y * a-&gt;linesize[p]); const type *xf1 = (const type *)(b-&gt;data[p] + y * b-&gt;linesize[p]); type *dst = (type *)(out-&gt;data[p] + y * out-&gt;linesize[p]); dst[x] = mix(xf1[x], xf0[x], smoothstep(0.f, 1.f, smooth)); } } } }</cpp:value></cpp:define>

<macro><name>DIAGBR_TRANSITION</name><argument_list>(<argument><literal type="number">8</literal></argument>, <argument>uint8_t</argument>, <argument><literal type="number">1</literal></argument>)</argument_list></macro>

<macro><name>DIAGBR_TRANSITION</name><argument_list>(<argument><literal type="number">16</literal></argument>, <argument>uint16_t</argument>, <argument><literal type="number">2</literal></argument>)</argument_list></macro>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>double</name></type> <name>getpix</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>priv</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>plane</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nb</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>XFadeContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name>priv</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>in</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>xf</name><index>[<expr><name>nb</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><name><name>in</name><operator>-&gt;</operator><name>data</name><index>[<expr><call><name>FFMIN</name><argument_list>(<argument><expr><name>plane</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>nb_planes</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>linesize</name> <init>= <expr><name><name>in</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><call><name>FFMIN</name><argument_list>(<argument><expr><name>plane</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>nb_planes</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>w</name> <init>= <expr><name><name>in</name><operator>-&gt;</operator><name>width</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>h</name> <init>= <expr><name><name>in</name><operator>-&gt;</operator><name>height</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>xi</name></decl>, <decl><type ref="prev"/><name>yi</name></decl>;</decl_stmt>

<expr_stmt><expr><name>xi</name> <operator>=</operator> <call><name>av_clipd</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>w</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>yi</name> <operator>=</operator> <call><name>av_clipd</name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>h</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>depth</name></name> <operator>&gt;</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>src16</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint16_t</name><operator>*</operator><operator>)</operator><name>src</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>linesize</name> <operator>/=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<return>return <expr><name><name>src16</name><index>[<expr><name>xi</name> <operator>+</operator> <name>yi</name> <operator>*</operator> <name>linesize</name></expr>]</index></name></expr>;</return>

</block_content>}</block></if> <else>else <block>{<block_content>

<return>return <expr><name><name>src</name><index>[<expr><name>xi</name> <operator>+</operator> <name>yi</name> <operator>*</operator> <name>linesize</name></expr>]</index></name></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>double</name></type> <name>a0</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>priv</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>y</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>getpix</name><argument_list>(<argument><expr><name>priv</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><specifier>static</specifier> <name>double</name></type> <name>a1</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>priv</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>y</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>getpix</name><argument_list>(<argument><expr><name>priv</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><specifier>static</specifier> <name>double</name></type> <name>a2</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>priv</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>y</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>getpix</name><argument_list>(<argument><expr><name>priv</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><specifier>static</specifier> <name>double</name></type> <name>a3</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>priv</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>y</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>getpix</name><argument_list>(<argument><expr><name>priv</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><specifier>static</specifier> <name>double</name></type> <name>b0</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>priv</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>y</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>getpix</name><argument_list>(<argument><expr><name>priv</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><specifier>static</specifier> <name>double</name></type> <name>b1</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>priv</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>y</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>getpix</name><argument_list>(<argument><expr><name>priv</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><specifier>static</specifier> <name>double</name></type> <name>b2</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>priv</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>y</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>getpix</name><argument_list>(<argument><expr><name>priv</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><specifier>static</specifier> <name>double</name></type> <name>b3</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>priv</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>y</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>getpix</name><argument_list>(<argument><expr><name>priv</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>config_output</name><parameter_list>(<parameter><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>outlink</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>outlink</name><operator>-&gt;</operator><name>src</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>inlink0</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>inputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>inlink1</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>inputs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>XFadeContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>AVPixFmtDescriptor</name> <modifier>*</modifier></type><name>pix_desc</name> <init>= <expr><call><name>av_pix_fmt_desc_get</name><argument_list>(<argument><expr><name><name>inlink0</name><operator>-&gt;</operator><name>format</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>is_rgb</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>inlink0</name><operator>-&gt;</operator><name>format</name></name> <operator>!=</operator> <name><name>inlink1</name><operator>-&gt;</operator><name>format</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"inputs must be of same pixel format\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>inlink0</name><operator>-&gt;</operator><name>w</name></name> <operator>!=</operator> <name><name>inlink1</name><operator>-&gt;</operator><name>w</name></name> <operator>||</operator> <name><name>inlink0</name><operator>-&gt;</operator><name>h</name></name> <operator>!=</operator> <name><name>inlink1</name><operator>-&gt;</operator><name>h</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"First input link %s parameters "</literal>

<literal type="string">"(size %dx%d) do not match the corresponding "</literal>

<literal type="string">"second input link %s parameters (size %dx%d)\n"</literal></expr></argument>,

<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>input_pads</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><name><name>inlink0</name><operator>-&gt;</operator><name>w</name></name></expr></argument>, <argument><expr><name><name>inlink0</name><operator>-&gt;</operator><name>h</name></name></expr></argument>,

<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>input_pads</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><name><name>inlink1</name><operator>-&gt;</operator><name>w</name></name></expr></argument>, <argument><expr><name><name>inlink1</name><operator>-&gt;</operator><name>h</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>inlink0</name><operator>-&gt;</operator><name>time_base</name><operator>.</operator><name>num</name></name> <operator>!=</operator> <name><name>inlink1</name><operator>-&gt;</operator><name>time_base</name><operator>.</operator><name>num</name></name> <operator>||</operator>

<name><name>inlink0</name><operator>-&gt;</operator><name>time_base</name><operator>.</operator><name>den</name></name> <operator>!=</operator> <name><name>inlink1</name><operator>-&gt;</operator><name>time_base</name><operator>.</operator><name>den</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"First input link %s timebase "</literal>

<literal type="string">"(%d/%d) do not match the corresponding "</literal>

<literal type="string">"second input link %s timebase (%d/%d)\n"</literal></expr></argument>,

<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>input_pads</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><name><name>inlink0</name><operator>-&gt;</operator><name>time_base</name><operator>.</operator><name>num</name></name></expr></argument>, <argument><expr><name><name>inlink0</name><operator>-&gt;</operator><name>time_base</name><operator>.</operator><name>den</name></name></expr></argument>,

<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>input_pads</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><name><name>inlink1</name><operator>-&gt;</operator><name>time_base</name><operator>.</operator><name>num</name></name></expr></argument>, <argument><expr><name><name>inlink1</name><operator>-&gt;</operator><name>time_base</name><operator>.</operator><name>den</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>outlink</name><operator>-&gt;</operator><name>w</name></name> <operator>=</operator> <name><name>inlink0</name><operator>-&gt;</operator><name>w</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>outlink</name><operator>-&gt;</operator><name>h</name></name> <operator>=</operator> <name><name>inlink0</name><operator>-&gt;</operator><name>h</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>outlink</name><operator>-&gt;</operator><name>time_base</name></name> <operator>=</operator> <name><name>inlink0</name><operator>-&gt;</operator><name>time_base</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>outlink</name><operator>-&gt;</operator><name>sample_aspect_ratio</name></name> <operator>=</operator> <name><name>inlink0</name><operator>-&gt;</operator><name>sample_aspect_ratio</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>outlink</name><operator>-&gt;</operator><name>frame_rate</name></name> <operator>=</operator> <name><name>inlink0</name><operator>-&gt;</operator><name>frame_rate</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>depth</name></name> <operator>=</operator> <name><name>pix_desc</name><operator>-&gt;</operator><name>comp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>depth</name></expr>;</expr_stmt>

<expr_stmt><expr><name>is_rgb</name> <operator>=</operator> <operator>!</operator><operator>!</operator><operator>(</operator><name><name>pix_desc</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_PIX_FMT_FLAG_RGB</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>nb_planes</name></name> <operator>=</operator> <call><name>av_pix_fmt_count_planes</name><argument_list>(<argument><expr><name><name>inlink0</name><operator>-&gt;</operator><name>format</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>max_value</name></name> <operator>=</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>depth</name></name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>black</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>black</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>black</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><name>is_rgb</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name><name>s</name><operator>-&gt;</operator><name>max_value</name></name> <operator>/</operator> <literal type="number">2</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>black</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>max_value</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>white</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>white</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>max_value</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>white</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>white</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><name>is_rgb</name></expr> ?</condition><then> <expr><name><name>s</name><operator>-&gt;</operator><name>max_value</name></name></expr> </then><else>: <expr><name><name>s</name><operator>-&gt;</operator><name>max_value</name></name> <operator>/</operator> <literal type="number">2</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>first_pts</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>last_pts</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>pts</name></name> <operator>=</operator> <name>AV_NOPTS_VALUE</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>duration</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>duration_pts</name></name> <operator>=</operator> <call><name>av_rescale_q</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>duration</name></name></expr></argument>, <argument><expr><name>AV_TIME_BASE_Q</name></expr></argument>, <argument><expr><name><name>outlink</name><operator>-&gt;</operator><name>time_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>offset</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>offset_pts</name></name> <operator>=</operator> <call><name>av_rescale_q</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>, <argument><expr><name>AV_TIME_BASE_Q</name></expr></argument>, <argument><expr><name><name>outlink</name><operator>-&gt;</operator><name>time_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<switch>switch <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>transition</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>CUSTOM</name></expr>:</case> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>transitionf</name></name> <operator>=</operator> <ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>depth</name></name> <operator>&lt;=</operator> <literal type="number">8</literal></expr> ?</condition><then> <expr><name>custom8_transition</name></expr> </then><else>: <expr><name>custom16_transition</name></expr></else></ternary></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>FADE</name></expr>:</case> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>transitionf</name></name> <operator>=</operator> <ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>depth</name></name> <operator>&lt;=</operator> <literal type="number">8</literal></expr> ?</condition><then> <expr><name>fade8_transition</name></expr> </then><else>: <expr><name>fade16_transition</name></expr></else></ternary></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>WIPELEFT</name></expr>:</case> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>transitionf</name></name> <operator>=</operator> <ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>depth</name></name> <operator>&lt;=</operator> <literal type="number">8</literal></expr> ?</condition><then> <expr><name>wipeleft8_transition</name></expr> </then><else>: <expr><name>wipeleft16_transition</name></expr></else></ternary></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>WIPERIGHT</name></expr>:</case> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>transitionf</name></name> <operator>=</operator> <ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>depth</name></name> <operator>&lt;=</operator> <literal type="number">8</literal></expr> ?</condition><then> <expr><name>wiperight8_transition</name></expr> </then><else>: <expr><name>wiperight16_transition</name></expr></else></ternary></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>WIPEUP</name></expr>:</case> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>transitionf</name></name> <operator>=</operator> <ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>depth</name></name> <operator>&lt;=</operator> <literal type="number">8</literal></expr> ?</condition><then> <expr><name>wipeup8_transition</name></expr> </then><else>: <expr><name>wipeup16_transition</name></expr></else></ternary></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>WIPEDOWN</name></expr>:</case> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>transitionf</name></name> <operator>=</operator> <ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>depth</name></name> <operator>&lt;=</operator> <literal type="number">8</literal></expr> ?</condition><then> <expr><name>wipedown8_transition</name></expr> </then><else>: <expr><name>wipedown16_transition</name></expr></else></ternary></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>SLIDELEFT</name></expr>:</case> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>transitionf</name></name> <operator>=</operator> <ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>depth</name></name> <operator>&lt;=</operator> <literal type="number">8</literal></expr> ?</condition><then> <expr><name>slideleft8_transition</name></expr> </then><else>: <expr><name>slideleft16_transition</name></expr></else></ternary></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>SLIDERIGHT</name></expr>:</case> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>transitionf</name></name> <operator>=</operator> <ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>depth</name></name> <operator>&lt;=</operator> <literal type="number">8</literal></expr> ?</condition><then> <expr><name>slideright8_transition</name></expr> </then><else>: <expr><name>slideright16_transition</name></expr></else></ternary></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>SLIDEUP</name></expr>:</case> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>transitionf</name></name> <operator>=</operator> <ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>depth</name></name> <operator>&lt;=</operator> <literal type="number">8</literal></expr> ?</condition><then> <expr><name>slideup8_transition</name></expr> </then><else>: <expr><name>slideup16_transition</name></expr></else></ternary></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>SLIDEDOWN</name></expr>:</case> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>transitionf</name></name> <operator>=</operator> <ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>depth</name></name> <operator>&lt;=</operator> <literal type="number">8</literal></expr> ?</condition><then> <expr><name>slidedown8_transition</name></expr> </then><else>: <expr><name>slidedown16_transition</name></expr></else></ternary></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>CIRCLECROP</name></expr>:</case> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>transitionf</name></name> <operator>=</operator> <ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>depth</name></name> <operator>&lt;=</operator> <literal type="number">8</literal></expr> ?</condition><then> <expr><name>circlecrop8_transition</name></expr> </then><else>: <expr><name>circlecrop16_transition</name></expr></else></ternary></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>RECTCROP</name></expr>:</case> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>transitionf</name></name> <operator>=</operator> <ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>depth</name></name> <operator>&lt;=</operator> <literal type="number">8</literal></expr> ?</condition><then> <expr><name>rectcrop8_transition</name></expr> </then><else>: <expr><name>rectcrop16_transition</name></expr></else></ternary></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>DISTANCE</name></expr>:</case> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>transitionf</name></name> <operator>=</operator> <ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>depth</name></name> <operator>&lt;=</operator> <literal type="number">8</literal></expr> ?</condition><then> <expr><name>distance8_transition</name></expr> </then><else>: <expr><name>distance16_transition</name></expr></else></ternary></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>FADEBLACK</name></expr>:</case> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>transitionf</name></name> <operator>=</operator> <ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>depth</name></name> <operator>&lt;=</operator> <literal type="number">8</literal></expr> ?</condition><then> <expr><name>fadeblack8_transition</name></expr> </then><else>: <expr><name>fadeblack16_transition</name></expr></else></ternary></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>FADEWHITE</name></expr>:</case> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>transitionf</name></name> <operator>=</operator> <ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>depth</name></name> <operator>&lt;=</operator> <literal type="number">8</literal></expr> ?</condition><then> <expr><name>fadewhite8_transition</name></expr> </then><else>: <expr><name>fadewhite16_transition</name></expr></else></ternary></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>RADIAL</name></expr>:</case> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>transitionf</name></name> <operator>=</operator> <ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>depth</name></name> <operator>&lt;=</operator> <literal type="number">8</literal></expr> ?</condition><then> <expr><name>radial8_transition</name></expr> </then><else>: <expr><name>radial16_transition</name></expr></else></ternary></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>SMOOTHLEFT</name></expr>:</case> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>transitionf</name></name> <operator>=</operator> <ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>depth</name></name> <operator>&lt;=</operator> <literal type="number">8</literal></expr> ?</condition><then> <expr><name>smoothleft8_transition</name></expr> </then><else>: <expr><name>smoothleft16_transition</name></expr></else></ternary></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>SMOOTHRIGHT</name></expr>:</case><expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>transitionf</name></name> <operator>=</operator> <ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>depth</name></name> <operator>&lt;=</operator> <literal type="number">8</literal></expr> ?</condition><then> <expr><name>smoothright8_transition</name></expr></then><else>: <expr><name>smoothright16_transition</name></expr></else></ternary></expr>;</expr_stmt><break>break;</break>

<case>case <expr><name>SMOOTHUP</name></expr>:</case> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>transitionf</name></name> <operator>=</operator> <ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>depth</name></name> <operator>&lt;=</operator> <literal type="number">8</literal></expr> ?</condition><then> <expr><name>smoothup8_transition</name></expr> </then><else>: <expr><name>smoothup16_transition</name></expr></else></ternary></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>SMOOTHDOWN</name></expr>:</case> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>transitionf</name></name> <operator>=</operator> <ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>depth</name></name> <operator>&lt;=</operator> <literal type="number">8</literal></expr> ?</condition><then> <expr><name>smoothdown8_transition</name></expr> </then><else>: <expr><name>smoothdown16_transition</name></expr></else></ternary></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>CIRCLEOPEN</name></expr>:</case> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>transitionf</name></name> <operator>=</operator> <ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>depth</name></name> <operator>&lt;=</operator> <literal type="number">8</literal></expr> ?</condition><then> <expr><name>circleopen8_transition</name></expr> </then><else>: <expr><name>circleopen16_transition</name></expr></else></ternary></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>CIRCLECLOSE</name></expr>:</case><expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>transitionf</name></name> <operator>=</operator> <ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>depth</name></name> <operator>&lt;=</operator> <literal type="number">8</literal></expr> ?</condition><then> <expr><name>circleclose8_transition</name></expr></then><else>: <expr><name>circleclose16_transition</name></expr></else></ternary></expr>;</expr_stmt><break>break;</break>

<case>case <expr><name>VERTOPEN</name></expr>:</case> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>transitionf</name></name> <operator>=</operator> <ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>depth</name></name> <operator>&lt;=</operator> <literal type="number">8</literal></expr> ?</condition><then> <expr><name>vertopen8_transition</name></expr> </then><else>: <expr><name>vertopen16_transition</name></expr></else></ternary></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>VERTCLOSE</name></expr>:</case> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>transitionf</name></name> <operator>=</operator> <ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>depth</name></name> <operator>&lt;=</operator> <literal type="number">8</literal></expr> ?</condition><then> <expr><name>vertclose8_transition</name></expr> </then><else>: <expr><name>vertclose16_transition</name></expr></else></ternary></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>HORZOPEN</name></expr>:</case> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>transitionf</name></name> <operator>=</operator> <ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>depth</name></name> <operator>&lt;=</operator> <literal type="number">8</literal></expr> ?</condition><then> <expr><name>horzopen8_transition</name></expr> </then><else>: <expr><name>horzopen16_transition</name></expr></else></ternary></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>HORZCLOSE</name></expr>:</case> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>transitionf</name></name> <operator>=</operator> <ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>depth</name></name> <operator>&lt;=</operator> <literal type="number">8</literal></expr> ?</condition><then> <expr><name>horzclose8_transition</name></expr> </then><else>: <expr><name>horzclose16_transition</name></expr></else></ternary></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>DISSOLVE</name></expr>:</case> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>transitionf</name></name> <operator>=</operator> <ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>depth</name></name> <operator>&lt;=</operator> <literal type="number">8</literal></expr> ?</condition><then> <expr><name>dissolve8_transition</name></expr> </then><else>: <expr><name>dissolve16_transition</name></expr></else></ternary></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>PIXELIZE</name></expr>:</case> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>transitionf</name></name> <operator>=</operator> <ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>depth</name></name> <operator>&lt;=</operator> <literal type="number">8</literal></expr> ?</condition><then> <expr><name>pixelize8_transition</name></expr> </then><else>: <expr><name>pixelize16_transition</name></expr></else></ternary></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>DIAGTL</name></expr>:</case> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>transitionf</name></name> <operator>=</operator> <ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>depth</name></name> <operator>&lt;=</operator> <literal type="number">8</literal></expr> ?</condition><then> <expr><name>diagtl8_transition</name></expr> </then><else>: <expr><name>diagtl16_transition</name></expr></else></ternary></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>DIAGTR</name></expr>:</case> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>transitionf</name></name> <operator>=</operator> <ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>depth</name></name> <operator>&lt;=</operator> <literal type="number">8</literal></expr> ?</condition><then> <expr><name>diagtr8_transition</name></expr> </then><else>: <expr><name>diagtr16_transition</name></expr></else></ternary></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>DIAGBL</name></expr>:</case> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>transitionf</name></name> <operator>=</operator> <ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>depth</name></name> <operator>&lt;=</operator> <literal type="number">8</literal></expr> ?</condition><then> <expr><name>diagbl8_transition</name></expr> </then><else>: <expr><name>diagbl16_transition</name></expr></else></ternary></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>DIAGBR</name></expr>:</case> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>transitionf</name></name> <operator>=</operator> <ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>depth</name></name> <operator>&lt;=</operator> <literal type="number">8</literal></expr> ?</condition><then> <expr><name>diagbr8_transition</name></expr> </then><else>: <expr><name>diagbr16_transition</name></expr></else></ternary></expr>;</expr_stmt> <break>break;</break>

</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>transition</name></name> <operator>==</operator> <name>CUSTOM</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>func2_names</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="string">"a0"</literal></expr>, <expr><literal type="string">"a1"</literal></expr>, <expr><literal type="string">"a2"</literal></expr>, <expr><literal type="string">"a3"</literal></expr>,

<expr><literal type="string">"b0"</literal></expr>, <expr><literal type="string">"b1"</literal></expr>, <expr><literal type="string">"b2"</literal></expr>, <expr><literal type="string">"b3"</literal></expr>,

<expr><name>NULL</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<function_decl><type><name>double</name></type> (<modifier>*</modifier><name>func2</name><index>[]</index>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>double</name></type></decl></parameter>, <parameter><decl><type><name>double</name></type></decl></parameter>)</parameter_list> <init>= <expr><block>{

<expr><name>a0</name></expr></block></expr></init><operator>,</operator> a1<operator>,</operator> a2<operator>,</operator> a3<operator>,</operator>

b0<operator>,</operator> b1<operator>,</operator> b2<operator>,</operator> b3<operator>,</operator>

NULL</function_decl> </block_content>}</block></if></if_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>custom_str</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>av_expr_parse</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>e</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>custom_str</name></name></expr></argument>, <argument><expr><name>var_names</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>func2_names</name></expr></argument>, <argument><expr><name>func2</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></function>

<return>return <expr><literal type="number">0</literal></expr>;</return>

}

static <function><type><name>int</name></type> <name>xfade_slice</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>jobnr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nb_jobs</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>XFadeContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>outlink</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>outputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ThreadData</name> <modifier>*</modifier></type><name>td</name> <init>= <expr><name>arg</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>slice_start</name> <init>= <expr><operator>(</operator><name><name>outlink</name><operator>-&gt;</operator><name>h</name></name> <operator>*</operator> <name>jobnr</name> <operator>)</operator> <operator>/</operator> <name>nb_jobs</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>slice_end</name> <init>= <expr><operator>(</operator><name><name>outlink</name><operator>-&gt;</operator><name>h</name></name> <operator>*</operator> <operator>(</operator><name>jobnr</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>/</operator> <name>nb_jobs</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>transitionf</name></name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name><name>td</name><operator>-&gt;</operator><name>xf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>td</name><operator>-&gt;</operator><name>xf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>td</name><operator>-&gt;</operator><name>out</name></name></expr></argument>, <argument><expr><name><name>td</name><operator>-&gt;</operator><name>progress</name></name></expr></argument>, <argument><expr><name>slice_start</name></expr></argument>, <argument><expr><name>slice_end</name></expr></argument>, <argument><expr><name>jobnr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>xfade_frame</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>XFadeContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>outlink</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>outputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>progress</name> <init>= <expr><call><name>av_clipf</name><argument_list>(<argument><expr><literal type="number">1.f</literal> <operator>-</operator> <operator>(</operator><operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>pts</name></name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>first_pts</name></name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>offset_pts</name></name><operator>)</operator> <operator>/</operator> <name><name>s</name><operator>-&gt;</operator><name>duration_pts</name></name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">0.f</literal></expr></argument>, <argument><expr><literal type="number">1.f</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ThreadData</name></type> <name>td</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>out</name></decl>;</decl_stmt>

<expr_stmt><expr><name>out</name> <operator>=</operator> <call><name>ff_get_video_buffer</name><argument_list>(<argument><expr><name>outlink</name></expr></argument>, <argument><expr><name><name>outlink</name><operator>-&gt;</operator><name>w</name></name></expr></argument>, <argument><expr><name><name>outlink</name><operator>-&gt;</operator><name>h</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>out</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>td</name><operator>.</operator><name>xf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>a</name></expr><operator>,</operator> <expr><name><name>td</name><operator>.</operator><name>xf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>b</name></expr><operator>,</operator> <expr><name><name>td</name><operator>.</operator><name>out</name></name> <operator>=</operator> <name>out</name></expr><operator>,</operator> <expr><name><name>td</name><operator>.</operator><name>progress</name></name> <operator>=</operator> <name>progress</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>ctx</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>xfade_slice</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>td</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><call><name>FFMIN</name><argument_list>(<argument><expr><name><name>outlink</name><operator>-&gt;</operator><name>h</name></name></expr></argument>, <argument><expr><call><name>ff_filter_get_nb_threads</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>pts</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>pts</name></name></expr>;</expr_stmt>

<return>return <expr><call><name>ff_filter_frame</name><argument_list>(<argument><expr><name>outlink</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>xfade_activate</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>XFadeContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>outlink</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>outputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>in</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>status</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>pts</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>FF_FILTER_FORWARD_STATUS_BACK_ALL</name><argument_list>(<argument><expr><name>outlink</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>xfade_is_over</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_inlink_consume_frame</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>inputs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>ret</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>in</name><operator>-&gt;</operator><name>pts</name></name> <operator>=</operator> <operator>(</operator><name><name>in</name><operator>-&gt;</operator><name>pts</name></name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>last_pts</name></name><operator>)</operator> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>pts</name></name></expr>;</expr_stmt>

<return>return <expr><call><name>ff_filter_frame</name><argument_list>(<argument><expr><name>outlink</name></expr></argument>, <argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>ff_inlink_acknowledge_status</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>inputs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>status</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pts</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ff_outlink_set_status</name><argument_list>(<argument><expr><name>outlink</name></expr></argument>, <argument><expr><name>status</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>pts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><name>ret</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>ff_outlink_frame_wanted</name><argument_list>(<argument><expr><name>outlink</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ff_inlink_request_frame</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>inputs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ff_inlink_queued_frames</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>inputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>xf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>ff_inlink_peek_frame</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>inputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>xf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>first_pts</name></name> <operator>==</operator> <name>AV_NOPTS_VALUE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>first_pts</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>xf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>pts</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>pts</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>xf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>pts</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>first_pts</name></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>offset_pts</name></name> <operator>&gt;</operator> <name><name>s</name><operator>-&gt;</operator><name>xf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>pts</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>xf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>need_second</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_inlink_consume_frame</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>inputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>ff_filter_frame</name><argument_list>(<argument><expr><name>outlink</name></expr></argument>, <argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>need_second</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>xf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <call><name>ff_inlink_queued_frames</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>inputs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ff_inlink_consume_frame</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>inputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>xf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_inlink_consume_frame</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>inputs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>xf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>last_pts</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>xf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>pts</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>pts</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>xf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>pts</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>xf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>pts</name> <operator>-</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>first_pts</name></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>offset_pts</name></name><operator>)</operator> <operator>&gt;</operator> <name><name>s</name><operator>-&gt;</operator><name>duration_pts</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>xfade_is_over</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>xfade_frame</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>xf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>xf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>xf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>xf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ff_inlink_queued_frames</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>inputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>

<call><name>ff_inlink_queued_frames</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>inputs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ff_filter_set_ready</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ff_outlink_frame_wanted</name><argument_list>(<argument><expr><name>outlink</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>eof</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <call><name>ff_outlink_get_status</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>inputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>eof</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>xfade_is_over</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>eof</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <call><name>ff_outlink_get_status</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>inputs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>eof</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>eof</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>xf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ff_inlink_request_frame</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>inputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>eof</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>need_second</name></name> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>eof</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ff_inlink_request_frame</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>inputs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>eof</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>eof</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <operator>(</operator>

<call><name>ff_inlink_queued_frames</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>inputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator>

<call><name>ff_inlink_queued_frames</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>inputs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ff_outlink_set_status</name><argument_list>(<argument><expr><name>outlink</name></expr></argument>, <argument><expr><name>AVERROR_EOF</name></expr></argument>, <argument><expr><name>AV_NOPTS_VALUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>FFERROR_NOT_READY</name></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVFilterPad</name></type> <name><name>xfade_inputs</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"main"</literal></expr>,

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,

}</block></expr>,

<expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"xfade"</literal></expr>,

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,

}</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVFilterPad</name></type> <name><name>xfade_outputs</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"default"</literal></expr>,

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,

<expr><operator>.</operator><name>config_props</name> <operator>=</operator> <name>config_output</name></expr>,

}</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFilter</name></type> <name>ff_vf_xfade</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"xfade"</literal></expr>,

<expr><operator>.</operator><name>description</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"Cross fade one video with another video."</literal></expr></argument>)</argument_list></call></expr>,

<expr><operator>.</operator><name>priv_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>XFadeContext</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><operator>.</operator><name>priv_class</name> <operator>=</operator> <operator>&amp;</operator><name>xfade_class</name></expr>,

<expr><operator>.</operator><name>query_formats</name> <operator>=</operator> <name>query_formats</name></expr>,

<expr><operator>.</operator><name>activate</name> <operator>=</operator> <name>xfade_activate</name></expr>,

<expr><operator>.</operator><name>uninit</name> <operator>=</operator> <name>uninit</name></expr>,

<expr><operator>.</operator><name>inputs</name> <operator>=</operator> <name>xfade_inputs</name></expr>,

<expr><operator>.</operator><name>outputs</name> <operator>=</operator> <name>xfade_outputs</name></expr>,

<expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>AVFILTER_FLAG_SLICE_THREADS</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

</unit>
