<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavfilter\vf_dctdnoiz.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avassert.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/eval.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/opt.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>var_names</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="string">"c"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr></init></decl>;</decl_stmt>

<enum>enum <block>{ <decl><name>VAR_C</name></decl>, <decl><name>VAR_VARS_NB</name></decl> }</block>;</enum>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_THREADS</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <name>DCTdnoizContext</name> <block>{

<decl_stmt><decl><type><specifier>const</specifier> <name>AVClass</name> <modifier>*</modifier></type><name>class</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>expr_str</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVExpr</name> <modifier>*</modifier></type><name><name>expr</name><index>[<expr><name>MAX_THREADS</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name><name>var_values</name><index>[<expr><name>MAX_THREADS</name></expr>]</index><index>[<expr><name>VAR_VARS_NB</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>nb_threads</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>pr_width</name></decl>, <name>pr_height</name>;</decl_stmt> 

<decl_stmt><decl><type><name>float</name></type> <name>sigma</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>float</name></type> <name>th</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name><name>cbuf</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name><name>slices</name><index>[<expr><name>MAX_THREADS</name></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>weights</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>p_linesize</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>overlap</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>step</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>bsize</name></decl>;</decl_stmt> 

<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>filter_freq_func</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>DCTdnoizContext</name></name> <modifier>*</modifier></type><name>s</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_linesize</name></decl></parameter>,

<parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_linesize</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>thread_id</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>color_decorrelation</name>)<parameter_list>(<parameter><decl><type><name>float</name> <modifier>*</modifier><modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_linesize</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_linesize</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>color_correlation</name>)<parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_linesize</name></decl></parameter>,

<parameter><decl><type><name>float</name> <modifier>*</modifier><modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_linesize</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list>;</function_decl>

}</block></struct></type> <name>DCTdnoizContext</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MIN_NBITS</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_NBITS</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFAULT_NBITS</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OFFSET</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>offsetof(DCTdnoizContext, x)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLAGS</name></cpp:macro> <cpp:value>AV_OPT_FLAG_FILTERING_PARAM|AV_OPT_FLAG_VIDEO_PARAM</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVOption</name></type> <name><name>dctdnoiz_options</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><literal type="string">"sigma"</literal></expr>, <expr><literal type="string">"set noise sigma constant"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>sigma</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_FLOAT</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name><operator>=</operator><literal type="number">0</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">999</literal></expr>, <expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>FLAGS</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"s"</literal></expr>, <expr><literal type="string">"set noise sigma constant"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>sigma</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_FLOAT</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name><operator>=</operator><literal type="number">0</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">999</literal></expr>, <expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>FLAGS</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"overlap"</literal></expr>, <expr><literal type="string">"set number of block overlapping pixels"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>overlap</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><operator>-</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><name>MAX_NBITS</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>FLAGS</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"expr"</literal></expr>, <expr><literal type="string">"set coefficient factor expression"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>expr_str</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_STRING</name></expr>, <expr><block>{<expr><operator>.</operator><name>str</name><operator>=</operator><name>NULL</name></expr>}</block></expr>, <expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>FLAGS</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"e"</literal></expr>, <expr><literal type="string">"set coefficient factor expression"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>expr_str</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_STRING</name></expr>, <expr><block>{<expr><operator>.</operator><name>str</name><operator>=</operator><name>NULL</name></expr>}</block></expr>, <expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>FLAGS</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"n"</literal></expr>, <expr><literal type="string">"set the block size, expressed in bits"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>DEFAULT_NBITS</name></expr>}</block></expr>, <expr><name>MIN_NBITS</name></expr>, <expr><name>MAX_NBITS</name></expr>, <expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>FLAGS</name></expr> }</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>AVFILTER_DEFINE_CLASS</name><argument_list>(<argument><expr><name>dctdnoiz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function><type><specifier>static</specifier> <name>void</name> <name>av_always_inline</name></type> <name>fdct8_1d</name><parameter_list>(<parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>dst_stridea</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_strideb</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>src_stridea</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_strideb</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>x00</name> <init>= <expr><name><name>src</name><index>[<expr><literal type="number">0</literal><operator>*</operator><name>src_stridea</name></expr>]</index></name> <operator>+</operator> <name><name>src</name><index>[<expr><literal type="number">7</literal><operator>*</operator><name>src_stridea</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>x01</name> <init>= <expr><name><name>src</name><index>[<expr><literal type="number">1</literal><operator>*</operator><name>src_stridea</name></expr>]</index></name> <operator>+</operator> <name><name>src</name><index>[<expr><literal type="number">6</literal><operator>*</operator><name>src_stridea</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>x02</name> <init>= <expr><name><name>src</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>src_stridea</name></expr>]</index></name> <operator>+</operator> <name><name>src</name><index>[<expr><literal type="number">5</literal><operator>*</operator><name>src_stridea</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>x03</name> <init>= <expr><name><name>src</name><index>[<expr><literal type="number">3</literal><operator>*</operator><name>src_stridea</name></expr>]</index></name> <operator>+</operator> <name><name>src</name><index>[<expr><literal type="number">4</literal><operator>*</operator><name>src_stridea</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>x04</name> <init>= <expr><name><name>src</name><index>[<expr><literal type="number">0</literal><operator>*</operator><name>src_stridea</name></expr>]</index></name> <operator>-</operator> <name><name>src</name><index>[<expr><literal type="number">7</literal><operator>*</operator><name>src_stridea</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>x05</name> <init>= <expr><name><name>src</name><index>[<expr><literal type="number">1</literal><operator>*</operator><name>src_stridea</name></expr>]</index></name> <operator>-</operator> <name><name>src</name><index>[<expr><literal type="number">6</literal><operator>*</operator><name>src_stridea</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>x06</name> <init>= <expr><name><name>src</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>src_stridea</name></expr>]</index></name> <operator>-</operator> <name><name>src</name><index>[<expr><literal type="number">5</literal><operator>*</operator><name>src_stridea</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>x07</name> <init>= <expr><name><name>src</name><index>[<expr><literal type="number">3</literal><operator>*</operator><name>src_stridea</name></expr>]</index></name> <operator>-</operator> <name><name>src</name><index>[<expr><literal type="number">4</literal><operator>*</operator><name>src_stridea</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>x08</name> <init>= <expr><name>x00</name> <operator>+</operator> <name>x03</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>x09</name> <init>= <expr><name>x01</name> <operator>+</operator> <name>x02</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>x0a</name> <init>= <expr><name>x00</name> <operator>-</operator> <name>x03</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>x0b</name> <init>= <expr><name>x01</name> <operator>-</operator> <name>x02</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>x0c</name> <init>= <expr><literal type="number">1.38703984532215f</literal><operator>*</operator><name>x04</name> <operator>+</operator> <literal type="number">0.275899379282943f</literal><operator>*</operator><name>x07</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>x0d</name> <init>= <expr><literal type="number">1.17587560241936f</literal><operator>*</operator><name>x05</name> <operator>+</operator> <literal type="number">0.785694958387102f</literal><operator>*</operator><name>x06</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>x0e</name> <init>= <expr><operator>-</operator><literal type="number">0.785694958387102f</literal><operator>*</operator><name>x05</name> <operator>+</operator> <literal type="number">1.17587560241936f</literal><operator>*</operator><name>x06</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>x0f</name> <init>= <expr><literal type="number">0.275899379282943f</literal><operator>*</operator><name>x04</name> <operator>-</operator> <literal type="number">1.38703984532215f</literal><operator>*</operator><name>x07</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>x10</name> <init>= <expr><literal type="number">0.353553390593274f</literal> <operator>*</operator> <operator>(</operator><name>x0c</name> <operator>-</operator> <name>x0d</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>x11</name> <init>= <expr><literal type="number">0.353553390593274f</literal> <operator>*</operator> <operator>(</operator><name>x0e</name> <operator>-</operator> <name>x0f</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">0</literal><operator>*</operator><name>dst_stridea</name></expr>]</index></name> <operator>=</operator> <literal type="number">0.353553390593274f</literal> <operator>*</operator> <operator>(</operator><name>x08</name> <operator>+</operator> <name>x09</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">1</literal><operator>*</operator><name>dst_stridea</name></expr>]</index></name> <operator>=</operator> <literal type="number">0.353553390593274f</literal> <operator>*</operator> <operator>(</operator><name>x0c</name> <operator>+</operator> <name>x0d</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>dst_stridea</name></expr>]</index></name> <operator>=</operator> <literal type="number">0.461939766255643f</literal><operator>*</operator><name>x0a</name> <operator>+</operator> <literal type="number">0.191341716182545f</literal><operator>*</operator><name>x0b</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">3</literal><operator>*</operator><name>dst_stridea</name></expr>]</index></name> <operator>=</operator> <literal type="number">0.707106781186547f</literal> <operator>*</operator> <operator>(</operator><name>x10</name> <operator>-</operator> <name>x11</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">4</literal><operator>*</operator><name>dst_stridea</name></expr>]</index></name> <operator>=</operator> <literal type="number">0.353553390593274f</literal> <operator>*</operator> <operator>(</operator><name>x08</name> <operator>-</operator> <name>x09</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">5</literal><operator>*</operator><name>dst_stridea</name></expr>]</index></name> <operator>=</operator> <literal type="number">0.707106781186547f</literal> <operator>*</operator> <operator>(</operator><name>x10</name> <operator>+</operator> <name>x11</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">6</literal><operator>*</operator><name>dst_stridea</name></expr>]</index></name> <operator>=</operator> <literal type="number">0.191341716182545f</literal><operator>*</operator><name>x0a</name> <operator>-</operator> <literal type="number">0.461939766255643f</literal><operator>*</operator><name>x0b</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">7</literal><operator>*</operator><name>dst_stridea</name></expr>]</index></name> <operator>=</operator> <literal type="number">0.353553390593274f</literal> <operator>*</operator> <operator>(</operator><name>x0e</name> <operator>+</operator> <name>x0f</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dst_strideb</name></expr>;</expr_stmt>

<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>src_strideb</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <name>av_always_inline</name></type> <name>idct8_1d</name><parameter_list>(<parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>dst_stridea</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_strideb</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>src_stridea</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_strideb</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>add</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>x00</name> <init>= <expr><literal type="number">1.4142135623731f</literal> <operator>*</operator><name><name>src</name><index>[<expr><literal type="number">0</literal><operator>*</operator><name>src_stridea</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>x01</name> <init>= <expr><literal type="number">1.38703984532215f</literal> <operator>*</operator><name><name>src</name><index>[<expr><literal type="number">1</literal><operator>*</operator><name>src_stridea</name></expr>]</index></name> <operator>+</operator> <literal type="number">0.275899379282943f</literal><operator>*</operator><name><name>src</name><index>[<expr><literal type="number">7</literal><operator>*</operator><name>src_stridea</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>x02</name> <init>= <expr><literal type="number">1.30656296487638f</literal> <operator>*</operator><name><name>src</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>src_stridea</name></expr>]</index></name> <operator>+</operator> <literal type="number">0.541196100146197f</literal><operator>*</operator><name><name>src</name><index>[<expr><literal type="number">6</literal><operator>*</operator><name>src_stridea</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>x03</name> <init>= <expr><literal type="number">1.17587560241936f</literal> <operator>*</operator><name><name>src</name><index>[<expr><literal type="number">3</literal><operator>*</operator><name>src_stridea</name></expr>]</index></name> <operator>+</operator> <literal type="number">0.785694958387102f</literal><operator>*</operator><name><name>src</name><index>[<expr><literal type="number">5</literal><operator>*</operator><name>src_stridea</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>x04</name> <init>= <expr><literal type="number">1.4142135623731f</literal> <operator>*</operator><name><name>src</name><index>[<expr><literal type="number">4</literal><operator>*</operator><name>src_stridea</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>x05</name> <init>= <expr><operator>-</operator><literal type="number">0.785694958387102f</literal><operator>*</operator><name><name>src</name><index>[<expr><literal type="number">3</literal><operator>*</operator><name>src_stridea</name></expr>]</index></name> <operator>+</operator> <literal type="number">1.17587560241936f</literal><operator>*</operator><name><name>src</name><index>[<expr><literal type="number">5</literal><operator>*</operator><name>src_stridea</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>x06</name> <init>= <expr><literal type="number">0.541196100146197f</literal><operator>*</operator><name><name>src</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>src_stridea</name></expr>]</index></name> <operator>-</operator> <literal type="number">1.30656296487638f</literal><operator>*</operator><name><name>src</name><index>[<expr><literal type="number">6</literal><operator>*</operator><name>src_stridea</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>x07</name> <init>= <expr><operator>-</operator><literal type="number">0.275899379282943f</literal><operator>*</operator><name><name>src</name><index>[<expr><literal type="number">1</literal><operator>*</operator><name>src_stridea</name></expr>]</index></name> <operator>+</operator> <literal type="number">1.38703984532215f</literal><operator>*</operator><name><name>src</name><index>[<expr><literal type="number">7</literal><operator>*</operator><name>src_stridea</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>x09</name> <init>= <expr><name>x00</name> <operator>+</operator> <name>x04</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>x0a</name> <init>= <expr><name>x01</name> <operator>+</operator> <name>x03</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>x0b</name> <init>= <expr><literal type="number">1.4142135623731f</literal><operator>*</operator><name>x02</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>x0c</name> <init>= <expr><name>x00</name> <operator>-</operator> <name>x04</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>x0d</name> <init>= <expr><name>x01</name> <operator>-</operator> <name>x03</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>x0e</name> <init>= <expr><literal type="number">0.353553390593274f</literal> <operator>*</operator> <operator>(</operator><name>x09</name> <operator>-</operator> <name>x0b</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>x0f</name> <init>= <expr><literal type="number">0.353553390593274f</literal> <operator>*</operator> <operator>(</operator><name>x0c</name> <operator>+</operator> <name>x0d</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>x10</name> <init>= <expr><literal type="number">0.353553390593274f</literal> <operator>*</operator> <operator>(</operator><name>x0c</name> <operator>-</operator> <name>x0d</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>x11</name> <init>= <expr><literal type="number">1.4142135623731f</literal><operator>*</operator><name>x06</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>x12</name> <init>= <expr><name>x05</name> <operator>+</operator> <name>x07</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>x13</name> <init>= <expr><name>x05</name> <operator>-</operator> <name>x07</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>x14</name> <init>= <expr><literal type="number">0.353553390593274f</literal> <operator>*</operator> <operator>(</operator><name>x11</name> <operator>+</operator> <name>x12</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>x15</name> <init>= <expr><literal type="number">0.353553390593274f</literal> <operator>*</operator> <operator>(</operator><name>x11</name> <operator>-</operator> <name>x12</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>x16</name> <init>= <expr><literal type="number">0.5f</literal><operator>*</operator><name>x13</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">0</literal><operator>*</operator><name>dst_stridea</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name>add</name></expr> ?</condition><then> <expr><name><name>dst</name><index>[ <expr><literal type="number">0</literal><operator>*</operator><name>dst_stridea</name></expr>]</index></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator> <operator>+</operator> <literal type="number">0.25f</literal> <operator>*</operator> <operator>(</operator><name>x09</name> <operator>+</operator> <name>x0b</name><operator>)</operator> <operator>+</operator> <literal type="number">0.353553390593274f</literal><operator>*</operator><name>x0a</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">1</literal><operator>*</operator><name>dst_stridea</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name>add</name></expr> ?</condition><then> <expr><name><name>dst</name><index>[ <expr><literal type="number">1</literal><operator>*</operator><name>dst_stridea</name></expr>]</index></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator> <operator>+</operator> <literal type="number">0.707106781186547f</literal> <operator>*</operator> <operator>(</operator><name>x0f</name> <operator>+</operator> <name>x15</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>dst_stridea</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name>add</name></expr> ?</condition><then> <expr><name><name>dst</name><index>[ <expr><literal type="number">2</literal><operator>*</operator><name>dst_stridea</name></expr>]</index></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator> <operator>+</operator> <literal type="number">0.707106781186547f</literal> <operator>*</operator> <operator>(</operator><name>x0f</name> <operator>-</operator> <name>x15</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">3</literal><operator>*</operator><name>dst_stridea</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name>add</name></expr> ?</condition><then> <expr><name><name>dst</name><index>[ <expr><literal type="number">3</literal><operator>*</operator><name>dst_stridea</name></expr>]</index></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator> <operator>+</operator> <literal type="number">0.707106781186547f</literal> <operator>*</operator> <operator>(</operator><name>x0e</name> <operator>+</operator> <name>x16</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">4</literal><operator>*</operator><name>dst_stridea</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name>add</name></expr> ?</condition><then> <expr><name><name>dst</name><index>[ <expr><literal type="number">4</literal><operator>*</operator><name>dst_stridea</name></expr>]</index></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator> <operator>+</operator> <literal type="number">0.707106781186547f</literal> <operator>*</operator> <operator>(</operator><name>x0e</name> <operator>-</operator> <name>x16</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">5</literal><operator>*</operator><name>dst_stridea</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name>add</name></expr> ?</condition><then> <expr><name><name>dst</name><index>[ <expr><literal type="number">5</literal><operator>*</operator><name>dst_stridea</name></expr>]</index></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator> <operator>+</operator> <literal type="number">0.707106781186547f</literal> <operator>*</operator> <operator>(</operator><name>x10</name> <operator>-</operator> <name>x14</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">6</literal><operator>*</operator><name>dst_stridea</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name>add</name></expr> ?</condition><then> <expr><name><name>dst</name><index>[ <expr><literal type="number">6</literal><operator>*</operator><name>dst_stridea</name></expr>]</index></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator> <operator>+</operator> <literal type="number">0.707106781186547f</literal> <operator>*</operator> <operator>(</operator><name>x10</name> <operator>+</operator> <name>x14</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">7</literal><operator>*</operator><name>dst_stridea</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name>add</name></expr> ?</condition><then> <expr><name><name>dst</name><index>[ <expr><literal type="number">7</literal><operator>*</operator><name>dst_stridea</name></expr>]</index></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator> <operator>+</operator> <literal type="number">0.25f</literal> <operator>*</operator> <operator>(</operator><name>x09</name> <operator>+</operator> <name>x0b</name><operator>)</operator> <operator>-</operator> <literal type="number">0.353553390593274f</literal><operator>*</operator><name>x0a</name></expr>;</expr_stmt>

<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dst_strideb</name></expr>;</expr_stmt>

<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>src_strideb</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <name>av_always_inline</name></type> <name>fdct16_1d</name><parameter_list>(<parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>dst_stridea</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_strideb</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>src_stridea</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_strideb</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>x00</name> <init>= <expr><name><name>src</name><index>[ <expr><literal type="number">0</literal><operator>*</operator><name>src_stridea</name></expr>]</index></name> <operator>+</operator> <name><name>src</name><index>[<expr><literal type="number">15</literal><operator>*</operator><name>src_stridea</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>x01</name> <init>= <expr><name><name>src</name><index>[ <expr><literal type="number">1</literal><operator>*</operator><name>src_stridea</name></expr>]</index></name> <operator>+</operator> <name><name>src</name><index>[<expr><literal type="number">14</literal><operator>*</operator><name>src_stridea</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>x02</name> <init>= <expr><name><name>src</name><index>[ <expr><literal type="number">2</literal><operator>*</operator><name>src_stridea</name></expr>]</index></name> <operator>+</operator> <name><name>src</name><index>[<expr><literal type="number">13</literal><operator>*</operator><name>src_stridea</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>x03</name> <init>= <expr><name><name>src</name><index>[ <expr><literal type="number">3</literal><operator>*</operator><name>src_stridea</name></expr>]</index></name> <operator>+</operator> <name><name>src</name><index>[<expr><literal type="number">12</literal><operator>*</operator><name>src_stridea</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>x04</name> <init>= <expr><name><name>src</name><index>[ <expr><literal type="number">4</literal><operator>*</operator><name>src_stridea</name></expr>]</index></name> <operator>+</operator> <name><name>src</name><index>[<expr><literal type="number">11</literal><operator>*</operator><name>src_stridea</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>x05</name> <init>= <expr><name><name>src</name><index>[ <expr><literal type="number">5</literal><operator>*</operator><name>src_stridea</name></expr>]</index></name> <operator>+</operator> <name><name>src</name><index>[<expr><literal type="number">10</literal><operator>*</operator><name>src_stridea</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>x06</name> <init>= <expr><name><name>src</name><index>[ <expr><literal type="number">6</literal><operator>*</operator><name>src_stridea</name></expr>]</index></name> <operator>+</operator> <name><name>src</name><index>[ <expr><literal type="number">9</literal><operator>*</operator><name>src_stridea</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>x07</name> <init>= <expr><name><name>src</name><index>[ <expr><literal type="number">7</literal><operator>*</operator><name>src_stridea</name></expr>]</index></name> <operator>+</operator> <name><name>src</name><index>[ <expr><literal type="number">8</literal><operator>*</operator><name>src_stridea</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>x08</name> <init>= <expr><name><name>src</name><index>[ <expr><literal type="number">0</literal><operator>*</operator><name>src_stridea</name></expr>]</index></name> <operator>-</operator> <name><name>src</name><index>[<expr><literal type="number">15</literal><operator>*</operator><name>src_stridea</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>x09</name> <init>= <expr><name><name>src</name><index>[ <expr><literal type="number">1</literal><operator>*</operator><name>src_stridea</name></expr>]</index></name> <operator>-</operator> <name><name>src</name><index>[<expr><literal type="number">14</literal><operator>*</operator><name>src_stridea</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>x0a</name> <init>= <expr><name><name>src</name><index>[ <expr><literal type="number">2</literal><operator>*</operator><name>src_stridea</name></expr>]</index></name> <operator>-</operator> <name><name>src</name><index>[<expr><literal type="number">13</literal><operator>*</operator><name>src_stridea</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>x0b</name> <init>= <expr><name><name>src</name><index>[ <expr><literal type="number">3</literal><operator>*</operator><name>src_stridea</name></expr>]</index></name> <operator>-</operator> <name><name>src</name><index>[<expr><literal type="number">12</literal><operator>*</operator><name>src_stridea</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>x0c</name> <init>= <expr><name><name>src</name><index>[ <expr><literal type="number">4</literal><operator>*</operator><name>src_stridea</name></expr>]</index></name> <operator>-</operator> <name><name>src</name><index>[<expr><literal type="number">11</literal><operator>*</operator><name>src_stridea</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>x0d</name> <init>= <expr><name><name>src</name><index>[ <expr><literal type="number">5</literal><operator>*</operator><name>src_stridea</name></expr>]</index></name> <operator>-</operator> <name><name>src</name><index>[<expr><literal type="number">10</literal><operator>*</operator><name>src_stridea</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>x0e</name> <init>= <expr><name><name>src</name><index>[ <expr><literal type="number">6</literal><operator>*</operator><name>src_stridea</name></expr>]</index></name> <operator>-</operator> <name><name>src</name><index>[ <expr><literal type="number">9</literal><operator>*</operator><name>src_stridea</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>x0f</name> <init>= <expr><name><name>src</name><index>[ <expr><literal type="number">7</literal><operator>*</operator><name>src_stridea</name></expr>]</index></name> <operator>-</operator> <name><name>src</name><index>[ <expr><literal type="number">8</literal><operator>*</operator><name>src_stridea</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>x10</name> <init>= <expr><name>x00</name> <operator>+</operator> <name>x07</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>x11</name> <init>= <expr><name>x01</name> <operator>+</operator> <name>x06</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>x12</name> <init>= <expr><name>x02</name> <operator>+</operator> <name>x05</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>x13</name> <init>= <expr><name>x03</name> <operator>+</operator> <name>x04</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>x14</name> <init>= <expr><name>x00</name> <operator>-</operator> <name>x07</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>x15</name> <init>= <expr><name>x01</name> <operator>-</operator> <name>x06</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>x16</name> <init>= <expr><name>x02</name> <operator>-</operator> <name>x05</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>x17</name> <init>= <expr><name>x03</name> <operator>-</operator> <name>x04</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>x18</name> <init>= <expr><name>x10</name> <operator>+</operator> <name>x13</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>x19</name> <init>= <expr><name>x11</name> <operator>+</operator> <name>x12</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>x1a</name> <init>= <expr><name>x10</name> <operator>-</operator> <name>x13</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>x1b</name> <init>= <expr><name>x11</name> <operator>-</operator> <name>x12</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>x1c</name> <init>= <expr><literal type="number">1.38703984532215f</literal><operator>*</operator><name>x14</name> <operator>+</operator> <literal type="number">0.275899379282943f</literal><operator>*</operator><name>x17</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>x1d</name> <init>= <expr><literal type="number">1.17587560241936f</literal><operator>*</operator><name>x15</name> <operator>+</operator> <literal type="number">0.785694958387102f</literal><operator>*</operator><name>x16</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>x1e</name> <init>= <expr><operator>-</operator><literal type="number">0.785694958387102f</literal><operator>*</operator><name>x15</name> <operator>+</operator> <literal type="number">1.17587560241936f</literal> <operator>*</operator><name>x16</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>x1f</name> <init>= <expr><literal type="number">0.275899379282943f</literal><operator>*</operator><name>x14</name> <operator>-</operator> <literal type="number">1.38703984532215f</literal> <operator>*</operator><name>x17</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>x20</name> <init>= <expr><literal type="number">0.25f</literal> <operator>*</operator> <operator>(</operator><name>x1c</name> <operator>-</operator> <name>x1d</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>x21</name> <init>= <expr><literal type="number">0.25f</literal> <operator>*</operator> <operator>(</operator><name>x1e</name> <operator>-</operator> <name>x1f</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>x22</name> <init>= <expr><literal type="number">1.40740373752638f</literal> <operator>*</operator><name>x08</name> <operator>+</operator> <literal type="number">0.138617169199091f</literal><operator>*</operator><name>x0f</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>x23</name> <init>= <expr><literal type="number">1.35331800117435f</literal> <operator>*</operator><name>x09</name> <operator>+</operator> <literal type="number">0.410524527522357f</literal><operator>*</operator><name>x0e</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>x24</name> <init>= <expr><literal type="number">1.24722501298667f</literal> <operator>*</operator><name>x0a</name> <operator>+</operator> <literal type="number">0.666655658477747f</literal><operator>*</operator><name>x0d</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>x25</name> <init>= <expr><literal type="number">1.09320186700176f</literal> <operator>*</operator><name>x0b</name> <operator>+</operator> <literal type="number">0.897167586342636f</literal><operator>*</operator><name>x0c</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>x26</name> <init>= <expr><operator>-</operator><literal type="number">0.897167586342636f</literal><operator>*</operator><name>x0b</name> <operator>+</operator> <literal type="number">1.09320186700176f</literal> <operator>*</operator><name>x0c</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>x27</name> <init>= <expr><literal type="number">0.666655658477747f</literal><operator>*</operator><name>x0a</name> <operator>-</operator> <literal type="number">1.24722501298667f</literal> <operator>*</operator><name>x0d</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>x28</name> <init>= <expr><operator>-</operator><literal type="number">0.410524527522357f</literal><operator>*</operator><name>x09</name> <operator>+</operator> <literal type="number">1.35331800117435f</literal> <operator>*</operator><name>x0e</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>x29</name> <init>= <expr><literal type="number">0.138617169199091f</literal><operator>*</operator><name>x08</name> <operator>-</operator> <literal type="number">1.40740373752638f</literal> <operator>*</operator><name>x0f</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>x2a</name> <init>= <expr><name>x22</name> <operator>+</operator> <name>x25</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>x2b</name> <init>= <expr><name>x23</name> <operator>+</operator> <name>x24</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>x2c</name> <init>= <expr><name>x22</name> <operator>-</operator> <name>x25</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>x2d</name> <init>= <expr><name>x23</name> <operator>-</operator> <name>x24</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>x2e</name> <init>= <expr><literal type="number">0.25f</literal> <operator>*</operator> <operator>(</operator><name>x2a</name> <operator>-</operator> <name>x2b</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>x2f</name> <init>= <expr><literal type="number">0.326640741219094f</literal><operator>*</operator><name>x2c</name> <operator>+</operator> <literal type="number">0.135299025036549f</literal><operator>*</operator><name>x2d</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>x30</name> <init>= <expr><literal type="number">0.135299025036549f</literal><operator>*</operator><name>x2c</name> <operator>-</operator> <literal type="number">0.326640741219094f</literal><operator>*</operator><name>x2d</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>x31</name> <init>= <expr><name>x26</name> <operator>+</operator> <name>x29</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>x32</name> <init>= <expr><name>x27</name> <operator>+</operator> <name>x28</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>x33</name> <init>= <expr><name>x26</name> <operator>-</operator> <name>x29</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>x34</name> <init>= <expr><name>x27</name> <operator>-</operator> <name>x28</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>x35</name> <init>= <expr><literal type="number">0.25f</literal> <operator>*</operator> <operator>(</operator><name>x31</name> <operator>-</operator> <name>x32</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>x36</name> <init>= <expr><literal type="number">0.326640741219094f</literal><operator>*</operator><name>x33</name> <operator>+</operator> <literal type="number">0.135299025036549f</literal><operator>*</operator><name>x34</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>x37</name> <init>= <expr><literal type="number">0.135299025036549f</literal><operator>*</operator><name>x33</name> <operator>-</operator> <literal type="number">0.326640741219094f</literal><operator>*</operator><name>x34</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>dst</name><index>[ <expr><literal type="number">0</literal><operator>*</operator><name>dst_stridea</name></expr>]</index></name> <operator>=</operator> <literal type="number">0.25f</literal> <operator>*</operator> <operator>(</operator><name>x18</name> <operator>+</operator> <name>x19</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><index>[ <expr><literal type="number">1</literal><operator>*</operator><name>dst_stridea</name></expr>]</index></name> <operator>=</operator> <literal type="number">0.25f</literal> <operator>*</operator> <operator>(</operator><name>x2a</name> <operator>+</operator> <name>x2b</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><index>[ <expr><literal type="number">2</literal><operator>*</operator><name>dst_stridea</name></expr>]</index></name> <operator>=</operator> <literal type="number">0.25f</literal> <operator>*</operator> <operator>(</operator><name>x1c</name> <operator>+</operator> <name>x1d</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><index>[ <expr><literal type="number">3</literal><operator>*</operator><name>dst_stridea</name></expr>]</index></name> <operator>=</operator> <literal type="number">0.707106781186547f</literal> <operator>*</operator> <operator>(</operator><name>x2f</name> <operator>-</operator> <name>x37</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><index>[ <expr><literal type="number">4</literal><operator>*</operator><name>dst_stridea</name></expr>]</index></name> <operator>=</operator> <literal type="number">0.326640741219094f</literal><operator>*</operator><name>x1a</name> <operator>+</operator> <literal type="number">0.135299025036549f</literal><operator>*</operator><name>x1b</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><index>[ <expr><literal type="number">5</literal><operator>*</operator><name>dst_stridea</name></expr>]</index></name> <operator>=</operator> <literal type="number">0.707106781186547f</literal> <operator>*</operator> <operator>(</operator><name>x2f</name> <operator>+</operator> <name>x37</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><index>[ <expr><literal type="number">6</literal><operator>*</operator><name>dst_stridea</name></expr>]</index></name> <operator>=</operator> <literal type="number">0.707106781186547f</literal> <operator>*</operator> <operator>(</operator><name>x20</name> <operator>-</operator> <name>x21</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><index>[ <expr><literal type="number">7</literal><operator>*</operator><name>dst_stridea</name></expr>]</index></name> <operator>=</operator> <literal type="number">0.707106781186547f</literal> <operator>*</operator> <operator>(</operator><name>x2e</name> <operator>+</operator> <name>x35</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><index>[ <expr><literal type="number">8</literal><operator>*</operator><name>dst_stridea</name></expr>]</index></name> <operator>=</operator> <literal type="number">0.25f</literal> <operator>*</operator> <operator>(</operator><name>x18</name> <operator>-</operator> <name>x19</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><index>[ <expr><literal type="number">9</literal><operator>*</operator><name>dst_stridea</name></expr>]</index></name> <operator>=</operator> <literal type="number">0.707106781186547f</literal> <operator>*</operator> <operator>(</operator><name>x2e</name> <operator>-</operator> <name>x35</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">10</literal><operator>*</operator><name>dst_stridea</name></expr>]</index></name> <operator>=</operator> <literal type="number">0.707106781186547f</literal> <operator>*</operator> <operator>(</operator><name>x20</name> <operator>+</operator> <name>x21</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">11</literal><operator>*</operator><name>dst_stridea</name></expr>]</index></name> <operator>=</operator> <literal type="number">0.707106781186547f</literal> <operator>*</operator> <operator>(</operator><name>x30</name> <operator>-</operator> <name>x36</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">12</literal><operator>*</operator><name>dst_stridea</name></expr>]</index></name> <operator>=</operator> <literal type="number">0.135299025036549f</literal><operator>*</operator><name>x1a</name> <operator>-</operator> <literal type="number">0.326640741219094f</literal><operator>*</operator><name>x1b</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">13</literal><operator>*</operator><name>dst_stridea</name></expr>]</index></name> <operator>=</operator> <literal type="number">0.707106781186547f</literal> <operator>*</operator> <operator>(</operator><name>x30</name> <operator>+</operator> <name>x36</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">14</literal><operator>*</operator><name>dst_stridea</name></expr>]</index></name> <operator>=</operator> <literal type="number">0.25f</literal> <operator>*</operator> <operator>(</operator><name>x1e</name> <operator>+</operator> <name>x1f</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">15</literal><operator>*</operator><name>dst_stridea</name></expr>]</index></name> <operator>=</operator> <literal type="number">0.25f</literal> <operator>*</operator> <operator>(</operator><name>x31</name> <operator>+</operator> <name>x32</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dst_strideb</name></expr>;</expr_stmt>

<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>src_strideb</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <name>av_always_inline</name></type> <name>idct16_1d</name><parameter_list>(<parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>dst_stridea</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_strideb</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>src_stridea</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_strideb</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>add</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>x00</name> <init>= <expr><literal type="number">1.4142135623731f</literal> <operator>*</operator><name><name>src</name><index>[ <expr><literal type="number">0</literal><operator>*</operator><name>src_stridea</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>x01</name> <init>= <expr><literal type="number">1.40740373752638f</literal> <operator>*</operator><name><name>src</name><index>[ <expr><literal type="number">1</literal><operator>*</operator><name>src_stridea</name></expr>]</index></name> <operator>+</operator> <literal type="number">0.138617169199091f</literal><operator>*</operator><name><name>src</name><index>[<expr><literal type="number">15</literal><operator>*</operator><name>src_stridea</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>x02</name> <init>= <expr><literal type="number">1.38703984532215f</literal> <operator>*</operator><name><name>src</name><index>[ <expr><literal type="number">2</literal><operator>*</operator><name>src_stridea</name></expr>]</index></name> <operator>+</operator> <literal type="number">0.275899379282943f</literal><operator>*</operator><name><name>src</name><index>[<expr><literal type="number">14</literal><operator>*</operator><name>src_stridea</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>x03</name> <init>= <expr><literal type="number">1.35331800117435f</literal> <operator>*</operator><name><name>src</name><index>[ <expr><literal type="number">3</literal><operator>*</operator><name>src_stridea</name></expr>]</index></name> <operator>+</operator> <literal type="number">0.410524527522357f</literal><operator>*</operator><name><name>src</name><index>[<expr><literal type="number">13</literal><operator>*</operator><name>src_stridea</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>x04</name> <init>= <expr><literal type="number">1.30656296487638f</literal> <operator>*</operator><name><name>src</name><index>[ <expr><literal type="number">4</literal><operator>*</operator><name>src_stridea</name></expr>]</index></name> <operator>+</operator> <literal type="number">0.541196100146197f</literal><operator>*</operator><name><name>src</name><index>[<expr><literal type="number">12</literal><operator>*</operator><name>src_stridea</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>x05</name> <init>= <expr><literal type="number">1.24722501298667f</literal> <operator>*</operator><name><name>src</name><index>[ <expr><literal type="number">5</literal><operator>*</operator><name>src_stridea</name></expr>]</index></name> <operator>+</operator> <literal type="number">0.666655658477747f</literal><operator>*</operator><name><name>src</name><index>[<expr><literal type="number">11</literal><operator>*</operator><name>src_stridea</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>x06</name> <init>= <expr><literal type="number">1.17587560241936f</literal> <operator>*</operator><name><name>src</name><index>[ <expr><literal type="number">6</literal><operator>*</operator><name>src_stridea</name></expr>]</index></name> <operator>+</operator> <literal type="number">0.785694958387102f</literal><operator>*</operator><name><name>src</name><index>[<expr><literal type="number">10</literal><operator>*</operator><name>src_stridea</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>x07</name> <init>= <expr><literal type="number">1.09320186700176f</literal> <operator>*</operator><name><name>src</name><index>[ <expr><literal type="number">7</literal><operator>*</operator><name>src_stridea</name></expr>]</index></name> <operator>+</operator> <literal type="number">0.897167586342636f</literal><operator>*</operator><name><name>src</name><index>[ <expr><literal type="number">9</literal><operator>*</operator><name>src_stridea</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>x08</name> <init>= <expr><literal type="number">1.4142135623731f</literal> <operator>*</operator><name><name>src</name><index>[ <expr><literal type="number">8</literal><operator>*</operator><name>src_stridea</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>x09</name> <init>= <expr><operator>-</operator><literal type="number">0.897167586342636f</literal><operator>*</operator><name><name>src</name><index>[ <expr><literal type="number">7</literal><operator>*</operator><name>src_stridea</name></expr>]</index></name> <operator>+</operator> <literal type="number">1.09320186700176f</literal><operator>*</operator><name><name>src</name><index>[ <expr><literal type="number">9</literal><operator>*</operator><name>src_stridea</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>x0a</name> <init>= <expr><literal type="number">0.785694958387102f</literal><operator>*</operator><name><name>src</name><index>[ <expr><literal type="number">6</literal><operator>*</operator><name>src_stridea</name></expr>]</index></name> <operator>-</operator> <literal type="number">1.17587560241936f</literal><operator>*</operator><name><name>src</name><index>[<expr><literal type="number">10</literal><operator>*</operator><name>src_stridea</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>x0b</name> <init>= <expr><operator>-</operator><literal type="number">0.666655658477747f</literal><operator>*</operator><name><name>src</name><index>[ <expr><literal type="number">5</literal><operator>*</operator><name>src_stridea</name></expr>]</index></name> <operator>+</operator> <literal type="number">1.24722501298667f</literal><operator>*</operator><name><name>src</name><index>[<expr><literal type="number">11</literal><operator>*</operator><name>src_stridea</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>x0c</name> <init>= <expr><literal type="number">0.541196100146197f</literal><operator>*</operator><name><name>src</name><index>[ <expr><literal type="number">4</literal><operator>*</operator><name>src_stridea</name></expr>]</index></name> <operator>-</operator> <literal type="number">1.30656296487638f</literal><operator>*</operator><name><name>src</name><index>[<expr><literal type="number">12</literal><operator>*</operator><name>src_stridea</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>x0d</name> <init>= <expr><operator>-</operator><literal type="number">0.410524527522357f</literal><operator>*</operator><name><name>src</name><index>[ <expr><literal type="number">3</literal><operator>*</operator><name>src_stridea</name></expr>]</index></name> <operator>+</operator> <literal type="number">1.35331800117435f</literal><operator>*</operator><name><name>src</name><index>[<expr><literal type="number">13</literal><operator>*</operator><name>src_stridea</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>x0e</name> <init>= <expr><literal type="number">0.275899379282943f</literal><operator>*</operator><name><name>src</name><index>[ <expr><literal type="number">2</literal><operator>*</operator><name>src_stridea</name></expr>]</index></name> <operator>-</operator> <literal type="number">1.38703984532215f</literal><operator>*</operator><name><name>src</name><index>[<expr><literal type="number">14</literal><operator>*</operator><name>src_stridea</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>x0f</name> <init>= <expr><operator>-</operator><literal type="number">0.138617169199091f</literal><operator>*</operator><name><name>src</name><index>[ <expr><literal type="number">1</literal><operator>*</operator><name>src_stridea</name></expr>]</index></name> <operator>+</operator> <literal type="number">1.40740373752638f</literal><operator>*</operator><name><name>src</name><index>[<expr><literal type="number">15</literal><operator>*</operator><name>src_stridea</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>x12</name> <init>= <expr><name>x00</name> <operator>+</operator> <name>x08</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>x13</name> <init>= <expr><name>x01</name> <operator>+</operator> <name>x07</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>x14</name> <init>= <expr><name>x02</name> <operator>+</operator> <name>x06</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>x15</name> <init>= <expr><name>x03</name> <operator>+</operator> <name>x05</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>x16</name> <init>= <expr><literal type="number">1.4142135623731f</literal><operator>*</operator><name>x04</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>x17</name> <init>= <expr><name>x00</name> <operator>-</operator> <name>x08</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>x18</name> <init>= <expr><name>x01</name> <operator>-</operator> <name>x07</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>x19</name> <init>= <expr><name>x02</name> <operator>-</operator> <name>x06</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>x1a</name> <init>= <expr><name>x03</name> <operator>-</operator> <name>x05</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>x1d</name> <init>= <expr><name>x12</name> <operator>+</operator> <name>x16</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>x1e</name> <init>= <expr><name>x13</name> <operator>+</operator> <name>x15</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>x1f</name> <init>= <expr><literal type="number">1.4142135623731f</literal><operator>*</operator><name>x14</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>x20</name> <init>= <expr><name>x12</name> <operator>-</operator> <name>x16</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>x21</name> <init>= <expr><name>x13</name> <operator>-</operator> <name>x15</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>x22</name> <init>= <expr><literal type="number">0.25f</literal> <operator>*</operator> <operator>(</operator><name>x1d</name> <operator>-</operator> <name>x1f</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>x23</name> <init>= <expr><literal type="number">0.25f</literal> <operator>*</operator> <operator>(</operator><name>x20</name> <operator>+</operator> <name>x21</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>x24</name> <init>= <expr><literal type="number">0.25f</literal> <operator>*</operator> <operator>(</operator><name>x20</name> <operator>-</operator> <name>x21</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>x25</name> <init>= <expr><literal type="number">1.4142135623731f</literal><operator>*</operator><name>x17</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>x26</name> <init>= <expr><literal type="number">1.30656296487638f</literal><operator>*</operator><name>x18</name> <operator>+</operator> <literal type="number">0.541196100146197f</literal><operator>*</operator><name>x1a</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>x27</name> <init>= <expr><literal type="number">1.4142135623731f</literal><operator>*</operator><name>x19</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>x28</name> <init>= <expr><operator>-</operator><literal type="number">0.541196100146197f</literal><operator>*</operator><name>x18</name> <operator>+</operator> <literal type="number">1.30656296487638f</literal><operator>*</operator><name>x1a</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>x29</name> <init>= <expr><literal type="number">0.176776695296637f</literal> <operator>*</operator> <operator>(</operator><name>x25</name> <operator>+</operator> <name>x27</name><operator>)</operator> <operator>+</operator> <literal type="number">0.25f</literal><operator>*</operator><name>x26</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>x2a</name> <init>= <expr><literal type="number">0.25f</literal> <operator>*</operator> <operator>(</operator><name>x25</name> <operator>-</operator> <name>x27</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>x2b</name> <init>= <expr><literal type="number">0.176776695296637f</literal> <operator>*</operator> <operator>(</operator><name>x25</name> <operator>+</operator> <name>x27</name><operator>)</operator> <operator>-</operator> <literal type="number">0.25f</literal><operator>*</operator><name>x26</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>x2c</name> <init>= <expr><literal type="number">0.353553390593274f</literal><operator>*</operator><name>x28</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>x1b</name> <init>= <expr><literal type="number">0.707106781186547f</literal> <operator>*</operator> <operator>(</operator><name>x2a</name> <operator>-</operator> <name>x2c</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>x1c</name> <init>= <expr><literal type="number">0.707106781186547f</literal> <operator>*</operator> <operator>(</operator><name>x2a</name> <operator>+</operator> <name>x2c</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>x2d</name> <init>= <expr><literal type="number">1.4142135623731f</literal><operator>*</operator><name>x0c</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>x2e</name> <init>= <expr><name>x0b</name> <operator>+</operator> <name>x0d</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>x2f</name> <init>= <expr><name>x0a</name> <operator>+</operator> <name>x0e</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>x30</name> <init>= <expr><name>x09</name> <operator>+</operator> <name>x0f</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>x31</name> <init>= <expr><name>x09</name> <operator>-</operator> <name>x0f</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>x32</name> <init>= <expr><name>x0a</name> <operator>-</operator> <name>x0e</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>x33</name> <init>= <expr><name>x0b</name> <operator>-</operator> <name>x0d</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>x37</name> <init>= <expr><literal type="number">1.4142135623731f</literal><operator>*</operator><name>x2d</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>x38</name> <init>= <expr><literal type="number">1.30656296487638f</literal><operator>*</operator><name>x2e</name> <operator>+</operator> <literal type="number">0.541196100146197f</literal><operator>*</operator><name>x30</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>x39</name> <init>= <expr><literal type="number">1.4142135623731f</literal><operator>*</operator><name>x2f</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>x3a</name> <init>= <expr><operator>-</operator><literal type="number">0.541196100146197f</literal><operator>*</operator><name>x2e</name> <operator>+</operator> <literal type="number">1.30656296487638f</literal><operator>*</operator><name>x30</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>x3b</name> <init>= <expr><literal type="number">0.176776695296637f</literal> <operator>*</operator> <operator>(</operator><name>x37</name> <operator>+</operator> <name>x39</name><operator>)</operator> <operator>+</operator> <literal type="number">0.25f</literal><operator>*</operator><name>x38</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>x3c</name> <init>= <expr><literal type="number">0.25f</literal> <operator>*</operator> <operator>(</operator><name>x37</name> <operator>-</operator> <name>x39</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>x3d</name> <init>= <expr><literal type="number">0.176776695296637f</literal> <operator>*</operator> <operator>(</operator><name>x37</name> <operator>+</operator> <name>x39</name><operator>)</operator> <operator>-</operator> <literal type="number">0.25f</literal><operator>*</operator><name>x38</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>x3e</name> <init>= <expr><literal type="number">0.353553390593274f</literal><operator>*</operator><name>x3a</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>x34</name> <init>= <expr><literal type="number">0.707106781186547f</literal> <operator>*</operator> <operator>(</operator><name>x3c</name> <operator>-</operator> <name>x3e</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>x35</name> <init>= <expr><literal type="number">0.707106781186547f</literal> <operator>*</operator> <operator>(</operator><name>x3c</name> <operator>+</operator> <name>x3e</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>x3f</name> <init>= <expr><literal type="number">1.4142135623731f</literal><operator>*</operator><name>x32</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>x40</name> <init>= <expr><name>x31</name> <operator>+</operator> <name>x33</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>x41</name> <init>= <expr><name>x31</name> <operator>-</operator> <name>x33</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>x42</name> <init>= <expr><literal type="number">0.25f</literal> <operator>*</operator> <operator>(</operator><name>x3f</name> <operator>+</operator> <name>x40</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>x43</name> <init>= <expr><literal type="number">0.25f</literal> <operator>*</operator> <operator>(</operator><name>x3f</name> <operator>-</operator> <name>x40</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>x44</name> <init>= <expr><literal type="number">0.353553390593274f</literal><operator>*</operator><name>x41</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>dst</name><index>[ <expr><literal type="number">0</literal><operator>*</operator><name>dst_stridea</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name>add</name></expr> ?</condition><then> <expr><name><name>dst</name><index>[ <expr><literal type="number">0</literal><operator>*</operator><name>dst_stridea</name></expr>]</index></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator> <operator>+</operator> <literal type="number">0.176776695296637f</literal> <operator>*</operator> <operator>(</operator><name>x1d</name> <operator>+</operator> <name>x1f</name><operator>)</operator> <operator>+</operator> <literal type="number">0.25f</literal><operator>*</operator><name>x1e</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><index>[ <expr><literal type="number">1</literal><operator>*</operator><name>dst_stridea</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name>add</name></expr> ?</condition><then> <expr><name><name>dst</name><index>[ <expr><literal type="number">1</literal><operator>*</operator><name>dst_stridea</name></expr>]</index></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator> <operator>+</operator> <literal type="number">0.707106781186547f</literal> <operator>*</operator> <operator>(</operator><name>x29</name> <operator>+</operator> <name>x3d</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><index>[ <expr><literal type="number">2</literal><operator>*</operator><name>dst_stridea</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name>add</name></expr> ?</condition><then> <expr><name><name>dst</name><index>[ <expr><literal type="number">2</literal><operator>*</operator><name>dst_stridea</name></expr>]</index></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator> <operator>+</operator> <literal type="number">0.707106781186547f</literal> <operator>*</operator> <operator>(</operator><name>x29</name> <operator>-</operator> <name>x3d</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><index>[ <expr><literal type="number">3</literal><operator>*</operator><name>dst_stridea</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name>add</name></expr> ?</condition><then> <expr><name><name>dst</name><index>[ <expr><literal type="number">3</literal><operator>*</operator><name>dst_stridea</name></expr>]</index></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator> <operator>+</operator> <literal type="number">0.707106781186547f</literal> <operator>*</operator> <operator>(</operator><name>x23</name> <operator>-</operator> <name>x43</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><index>[ <expr><literal type="number">4</literal><operator>*</operator><name>dst_stridea</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name>add</name></expr> ?</condition><then> <expr><name><name>dst</name><index>[ <expr><literal type="number">4</literal><operator>*</operator><name>dst_stridea</name></expr>]</index></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator> <operator>+</operator> <literal type="number">0.707106781186547f</literal> <operator>*</operator> <operator>(</operator><name>x23</name> <operator>+</operator> <name>x43</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><index>[ <expr><literal type="number">5</literal><operator>*</operator><name>dst_stridea</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name>add</name></expr> ?</condition><then> <expr><name><name>dst</name><index>[ <expr><literal type="number">5</literal><operator>*</operator><name>dst_stridea</name></expr>]</index></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator> <operator>+</operator> <literal type="number">0.707106781186547f</literal> <operator>*</operator> <operator>(</operator><name>x1b</name> <operator>-</operator> <name>x35</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><index>[ <expr><literal type="number">6</literal><operator>*</operator><name>dst_stridea</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name>add</name></expr> ?</condition><then> <expr><name><name>dst</name><index>[ <expr><literal type="number">6</literal><operator>*</operator><name>dst_stridea</name></expr>]</index></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator> <operator>+</operator> <literal type="number">0.707106781186547f</literal> <operator>*</operator> <operator>(</operator><name>x1b</name> <operator>+</operator> <name>x35</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><index>[ <expr><literal type="number">7</literal><operator>*</operator><name>dst_stridea</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name>add</name></expr> ?</condition><then> <expr><name><name>dst</name><index>[ <expr><literal type="number">7</literal><operator>*</operator><name>dst_stridea</name></expr>]</index></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator> <operator>+</operator> <literal type="number">0.707106781186547f</literal> <operator>*</operator> <operator>(</operator><name>x22</name> <operator>+</operator> <name>x44</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><index>[ <expr><literal type="number">8</literal><operator>*</operator><name>dst_stridea</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name>add</name></expr> ?</condition><then> <expr><name><name>dst</name><index>[ <expr><literal type="number">8</literal><operator>*</operator><name>dst_stridea</name></expr>]</index></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator> <operator>+</operator> <literal type="number">0.707106781186547f</literal> <operator>*</operator> <operator>(</operator><name>x22</name> <operator>-</operator> <name>x44</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><index>[ <expr><literal type="number">9</literal><operator>*</operator><name>dst_stridea</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name>add</name></expr> ?</condition><then> <expr><name><name>dst</name><index>[ <expr><literal type="number">9</literal><operator>*</operator><name>dst_stridea</name></expr>]</index></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator> <operator>+</operator> <literal type="number">0.707106781186547f</literal> <operator>*</operator> <operator>(</operator><name>x1c</name> <operator>+</operator> <name>x34</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">10</literal><operator>*</operator><name>dst_stridea</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name>add</name></expr> ?</condition><then> <expr><name><name>dst</name><index>[<expr><literal type="number">10</literal><operator>*</operator><name>dst_stridea</name></expr>]</index></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator> <operator>+</operator> <literal type="number">0.707106781186547f</literal> <operator>*</operator> <operator>(</operator><name>x1c</name> <operator>-</operator> <name>x34</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">11</literal><operator>*</operator><name>dst_stridea</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name>add</name></expr> ?</condition><then> <expr><name><name>dst</name><index>[<expr><literal type="number">11</literal><operator>*</operator><name>dst_stridea</name></expr>]</index></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator> <operator>+</operator> <literal type="number">0.707106781186547f</literal> <operator>*</operator> <operator>(</operator><name>x24</name> <operator>+</operator> <name>x42</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">12</literal><operator>*</operator><name>dst_stridea</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name>add</name></expr> ?</condition><then> <expr><name><name>dst</name><index>[<expr><literal type="number">12</literal><operator>*</operator><name>dst_stridea</name></expr>]</index></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator> <operator>+</operator> <literal type="number">0.707106781186547f</literal> <operator>*</operator> <operator>(</operator><name>x24</name> <operator>-</operator> <name>x42</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">13</literal><operator>*</operator><name>dst_stridea</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name>add</name></expr> ?</condition><then> <expr><name><name>dst</name><index>[<expr><literal type="number">13</literal><operator>*</operator><name>dst_stridea</name></expr>]</index></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator> <operator>+</operator> <literal type="number">0.707106781186547f</literal> <operator>*</operator> <operator>(</operator><name>x2b</name> <operator>-</operator> <name>x3b</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">14</literal><operator>*</operator><name>dst_stridea</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name>add</name></expr> ?</condition><then> <expr><name><name>dst</name><index>[<expr><literal type="number">14</literal><operator>*</operator><name>dst_stridea</name></expr>]</index></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator> <operator>+</operator> <literal type="number">0.707106781186547f</literal> <operator>*</operator> <operator>(</operator><name>x2b</name> <operator>+</operator> <name>x3b</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">15</literal><operator>*</operator><name>dst_stridea</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name>add</name></expr> ?</condition><then> <expr><name><name>dst</name><index>[<expr><literal type="number">15</literal><operator>*</operator><name>dst_stridea</name></expr>]</index></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator> <operator>+</operator> <literal type="number">0.176776695296637f</literal> <operator>*</operator> <operator>(</operator><name>x1d</name> <operator>+</operator> <name>x1f</name><operator>)</operator> <operator>-</operator> <literal type="number">0.25f</literal><operator>*</operator><name>x1e</name></expr>;</expr_stmt>

<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dst_strideb</name></expr>;</expr_stmt>

<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>src_strideb</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEF_FILTER_FREQ_FUNCS</name><parameter_list>(<parameter><type><name>bsize</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static av_always_inline void filter_freq_##bsize(const float *src, int src_linesize, float *dst, int dst_linesize, AVExpr *expr, double *var_values, int sigma_th) { unsigned i; DECLARE_ALIGNED(32, float, tmp_block1)[bsize * bsize]; DECLARE_ALIGNED(32, float, tmp_block2)[bsize * bsize]; fdct##bsize##_1d(tmp_block1, src, 1, bsize, 1, src_linesize); fdct##bsize##_1d(tmp_block2, tmp_block1, bsize, 1, bsize, 1); for (i = 0; i &lt; bsize*bsize; i++) { float *b = &amp;tmp_block2[i]; if (expr) { var_values[VAR_C] = fabsf(*b); *b *= av_expr_eval(expr, var_values, NULL); } else { if (fabsf(*b) &lt; sigma_th) *b = 0; } } idct##bsize##_1d(tmp_block1, tmp_block2, 1, bsize, 1, bsize, 0); idct##bsize##_1d(dst, tmp_block1, dst_linesize, 1, bsize, 1, 1); } static void filter_freq_sigma_##bsize(DCTdnoizContext *s, const float *src, int src_linesize, float *dst, int dst_linesize, int thread_id) { filter_freq_##bsize(src, src_linesize, dst, dst_linesize, NULL, NULL, s-&gt;th); } static void filter_freq_expr_##bsize(DCTdnoizContext *s, const float *src, int src_linesize, float *dst, int dst_linesize, int thread_id) { filter_freq_##bsize(src, src_linesize, dst, dst_linesize, s-&gt;expr[thread_id], s-&gt;var_values[thread_id], 0); }</cpp:value></cpp:define>

<macro><name>DEF_FILTER_FREQ_FUNCS</name><argument_list>(<argument><literal type="number">8</literal></argument>)</argument_list></macro>

<macro><name>DEF_FILTER_FREQ_FUNCS</name><argument_list>(<argument><literal type="number">16</literal></argument>)</argument_list></macro>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DCT3X3_0_0</name></cpp:macro> <cpp:value>0.5773502691896258f</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DCT3X3_0_1</name></cpp:macro> <cpp:value>0.5773502691896258f</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DCT3X3_0_2</name></cpp:macro> <cpp:value>0.5773502691896258f</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DCT3X3_1_0</name></cpp:macro> <cpp:value>0.7071067811865475f</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DCT3X3_1_2</name></cpp:macro> <cpp:value>-0.7071067811865475f</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DCT3X3_2_0</name></cpp:macro> <cpp:value>0.4082482904638631f</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DCT3X3_2_1</name></cpp:macro> <cpp:value>-0.8164965809277261f</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DCT3X3_2_2</name></cpp:macro> <cpp:value>0.4082482904638631f</cpp:value></cpp:define> 

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>void</name></type> <name>color_decorrelation</name><parameter_list>(<parameter><decl><type><name>float</name> <modifier>*</modifier><modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_linesize</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_linesize</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>r</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>g</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>dstp_r</name> <init>= <expr><name><name>dst</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>dstp_g</name> <init>= <expr><name><name>dst</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>dstp_b</name> <init>= <expr><name><name>dst</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>srcp</name> <init>= <expr><name><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>h</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>w</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>dstp_r</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <name><name>srcp</name><index>[<expr><name>r</name></expr>]</index></name> <operator>*</operator> <name>DCT3X3_0_0</name> <operator>+</operator> <name><name>srcp</name><index>[<expr><name>g</name></expr>]</index></name> <operator>*</operator> <name>DCT3X3_0_1</name> <operator>+</operator> <name><name>srcp</name><index>[<expr><name>b</name></expr>]</index></name> <operator>*</operator> <name>DCT3X3_0_2</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dstp_g</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <name><name>srcp</name><index>[<expr><name>r</name></expr>]</index></name> <operator>*</operator> <name>DCT3X3_1_0</name> <operator>+</operator> <name><name>srcp</name><index>[<expr><name>b</name></expr>]</index></name> <operator>*</operator> <name>DCT3X3_1_2</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dstp_b</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <name><name>srcp</name><index>[<expr><name>r</name></expr>]</index></name> <operator>*</operator> <name>DCT3X3_2_0</name> <operator>+</operator> <name><name>srcp</name><index>[<expr><name>g</name></expr>]</index></name> <operator>*</operator> <name>DCT3X3_2_1</name> <operator>+</operator> <name><name>srcp</name><index>[<expr><name>b</name></expr>]</index></name> <operator>*</operator> <name>DCT3X3_2_2</name></expr>;</expr_stmt>

<expr_stmt><expr><name>srcp</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>srcp</name> <operator>+=</operator> <name>src_linesize</name> <operator>-</operator> <name>w</name> <operator>*</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>dstp_r</name> <operator>+=</operator> <name>dst_linesize</name></expr>;</expr_stmt>

<expr_stmt><expr><name>dstp_g</name> <operator>+=</operator> <name>dst_linesize</name></expr>;</expr_stmt>

<expr_stmt><expr><name>dstp_b</name> <operator>+=</operator> <name>dst_linesize</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>void</name></type> <name>color_correlation</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_linesize</name></decl></parameter>,

<parameter><decl><type><name>float</name> <modifier>*</modifier><modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_linesize</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>r</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>g</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>src_r</name> <init>= <expr><name><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>src_g</name> <init>= <expr><name><name>src</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>src_b</name> <init>= <expr><name><name>src</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dstp</name> <init>= <expr><name><name>dst</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>h</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>w</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>dstp</name><index>[<expr><name>r</name></expr>]</index></name> <operator>=</operator> <call><name>av_clip_uint8</name><argument_list>(<argument><expr><name><name>src_r</name><index>[<expr><name>x</name></expr>]</index></name> <operator>*</operator> <name>DCT3X3_0_0</name> <operator>+</operator> <name><name>src_g</name><index>[<expr><name>x</name></expr>]</index></name> <operator>*</operator> <name>DCT3X3_1_0</name> <operator>+</operator> <name><name>src_b</name><index>[<expr><name>x</name></expr>]</index></name> <operator>*</operator> <name>DCT3X3_2_0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dstp</name><index>[<expr><name>g</name></expr>]</index></name> <operator>=</operator> <call><name>av_clip_uint8</name><argument_list>(<argument><expr><name><name>src_r</name><index>[<expr><name>x</name></expr>]</index></name> <operator>*</operator> <name>DCT3X3_0_1</name> <operator>+</operator> <name><name>src_b</name><index>[<expr><name>x</name></expr>]</index></name> <operator>*</operator> <name>DCT3X3_2_1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dstp</name><index>[<expr><name>b</name></expr>]</index></name> <operator>=</operator> <call><name>av_clip_uint8</name><argument_list>(<argument><expr><name><name>src_r</name><index>[<expr><name>x</name></expr>]</index></name> <operator>*</operator> <name>DCT3X3_0_2</name> <operator>+</operator> <name><name>src_g</name><index>[<expr><name>x</name></expr>]</index></name> <operator>*</operator> <name>DCT3X3_1_2</name> <operator>+</operator> <name><name>src_b</name><index>[<expr><name>x</name></expr>]</index></name> <operator>*</operator> <name>DCT3X3_2_2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dstp</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>dstp</name> <operator>+=</operator> <name>dst_linesize</name> <operator>-</operator> <name>w</name> <operator>*</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>src_r</name> <operator>+=</operator> <name>src_linesize</name></expr>;</expr_stmt>

<expr_stmt><expr><name>src_g</name> <operator>+=</operator> <name>src_linesize</name></expr>;</expr_stmt>

<expr_stmt><expr><name>src_b</name> <operator>+=</operator> <name>src_linesize</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DECLARE_COLOR_FUNCS</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>r</name></type></parameter>, <parameter><type><name>g</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static void color_decorrelation_##name(float **dst, int dst_linesize, const uint8_t **src, int src_linesize, int w, int h) { color_decorrelation(dst, dst_linesize, src, src_linesize, w, h, r, g, b); } static void color_correlation_##name(uint8_t **dst, int dst_linesize, float **src, int src_linesize, int w, int h) { color_correlation(dst, dst_linesize, src, src_linesize, w, h, r, g, b); }</cpp:value></cpp:define>

<macro><name>DECLARE_COLOR_FUNCS</name><argument_list>(<argument>rgb</argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">1</literal></argument>, <argument><literal type="number">2</literal></argument>)</argument_list></macro>

<macro><name>DECLARE_COLOR_FUNCS</name><argument_list>(<argument>bgr</argument>, <argument><literal type="number">2</literal></argument>, <argument><literal type="number">1</literal></argument>, <argument><literal type="number">0</literal></argument>)</argument_list></macro>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>void</name></type> <name>color_decorrelation_gbrp</name><parameter_list>(<parameter><decl><type><name>float</name> <modifier>*</modifier><modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_linesize</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_linesize</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>dstp_r</name> <init>= <expr><name><name>dst</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>dstp_g</name> <init>= <expr><name><name>dst</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>dstp_b</name> <init>= <expr><name><name>dst</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>srcp_r</name> <init>= <expr><name><name>src</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>srcp_g</name> <init>= <expr><name><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>srcp_b</name> <init>= <expr><name><name>src</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>h</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>w</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>dstp_r</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <name><name>srcp_r</name><index>[<expr><name>x</name></expr>]</index></name> <operator>*</operator> <name>DCT3X3_0_0</name> <operator>+</operator> <name><name>srcp_g</name><index>[<expr><name>x</name></expr>]</index></name> <operator>*</operator> <name>DCT3X3_0_1</name> <operator>+</operator> <name><name>srcp_b</name><index>[<expr><name>x</name></expr>]</index></name> <operator>*</operator> <name>DCT3X3_0_2</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dstp_g</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <name><name>srcp_r</name><index>[<expr><name>x</name></expr>]</index></name> <operator>*</operator> <name>DCT3X3_1_0</name> <operator>+</operator> <name><name>srcp_b</name><index>[<expr><name>x</name></expr>]</index></name> <operator>*</operator> <name>DCT3X3_1_2</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dstp_b</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <name><name>srcp_r</name><index>[<expr><name>x</name></expr>]</index></name> <operator>*</operator> <name>DCT3X3_2_0</name> <operator>+</operator> <name><name>srcp_g</name><index>[<expr><name>x</name></expr>]</index></name> <operator>*</operator> <name>DCT3X3_2_1</name> <operator>+</operator> <name><name>srcp_b</name><index>[<expr><name>x</name></expr>]</index></name> <operator>*</operator> <name>DCT3X3_2_2</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>srcp_r</name> <operator>+=</operator> <name>src_linesize</name></expr>;</expr_stmt>

<expr_stmt><expr><name>srcp_g</name> <operator>+=</operator> <name>src_linesize</name></expr>;</expr_stmt>

<expr_stmt><expr><name>srcp_b</name> <operator>+=</operator> <name>src_linesize</name></expr>;</expr_stmt>

<expr_stmt><expr><name>dstp_r</name> <operator>+=</operator> <name>dst_linesize</name></expr>;</expr_stmt>

<expr_stmt><expr><name>dstp_g</name> <operator>+=</operator> <name>dst_linesize</name></expr>;</expr_stmt>

<expr_stmt><expr><name>dstp_b</name> <operator>+=</operator> <name>dst_linesize</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>void</name></type> <name>color_correlation_gbrp</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_linesize</name></decl></parameter>,

<parameter><decl><type><name>float</name> <modifier>*</modifier><modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_linesize</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>src_r</name> <init>= <expr><name><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>src_g</name> <init>= <expr><name><name>src</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>src_b</name> <init>= <expr><name><name>src</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dstp_r</name> <init>= <expr><name><name>dst</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dstp_g</name> <init>= <expr><name><name>dst</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dstp_b</name> <init>= <expr><name><name>dst</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>h</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>w</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>dstp_r</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <call><name>av_clip_uint8</name><argument_list>(<argument><expr><name><name>src_r</name><index>[<expr><name>x</name></expr>]</index></name> <operator>*</operator> <name>DCT3X3_0_0</name> <operator>+</operator> <name><name>src_g</name><index>[<expr><name>x</name></expr>]</index></name> <operator>*</operator> <name>DCT3X3_1_0</name> <operator>+</operator> <name><name>src_b</name><index>[<expr><name>x</name></expr>]</index></name> <operator>*</operator> <name>DCT3X3_2_0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dstp_g</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <call><name>av_clip_uint8</name><argument_list>(<argument><expr><name><name>src_r</name><index>[<expr><name>x</name></expr>]</index></name> <operator>*</operator> <name>DCT3X3_0_1</name> <operator>+</operator> <name><name>src_b</name><index>[<expr><name>x</name></expr>]</index></name> <operator>*</operator> <name>DCT3X3_2_1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dstp_b</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <call><name>av_clip_uint8</name><argument_list>(<argument><expr><name><name>src_r</name><index>[<expr><name>x</name></expr>]</index></name> <operator>*</operator> <name>DCT3X3_0_2</name> <operator>+</operator> <name><name>src_g</name><index>[<expr><name>x</name></expr>]</index></name> <operator>*</operator> <name>DCT3X3_1_2</name> <operator>+</operator> <name><name>src_b</name><index>[<expr><name>x</name></expr>]</index></name> <operator>*</operator> <name>DCT3X3_2_2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>dstp_r</name> <operator>+=</operator> <name>dst_linesize</name></expr>;</expr_stmt>

<expr_stmt><expr><name>dstp_g</name> <operator>+=</operator> <name>dst_linesize</name></expr>;</expr_stmt>

<expr_stmt><expr><name>dstp_b</name> <operator>+=</operator> <name>dst_linesize</name></expr>;</expr_stmt>

<expr_stmt><expr><name>src_r</name> <operator>+=</operator> <name>src_linesize</name></expr>;</expr_stmt>

<expr_stmt><expr><name>src_g</name> <operator>+=</operator> <name>src_linesize</name></expr>;</expr_stmt>

<expr_stmt><expr><name>src_b</name> <operator>+=</operator> <name>src_linesize</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>config_input</name><parameter_list>(<parameter><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>inlink</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>inlink</name><operator>-&gt;</operator><name>dst</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DCTdnoizContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>, <decl><type ref="prev"/><name>bx</name></decl>, <decl><type ref="prev"/><name>by</name></decl>, <decl><type ref="prev"/><name>linesize</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>iweights</name></decl>, <decl><type ref="prev"/><name>max_slice_h</name></decl>, <decl><type ref="prev"/><name>slice_h</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>bsize</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>n</name></name></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>inlink</name><operator>-&gt;</operator><name>format</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>AV_PIX_FMT_BGR24</name></expr>:</case>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>color_decorrelation</name></name> <operator>=</operator> <name>color_decorrelation_bgr</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>color_correlation</name></name> <operator>=</operator> <name>color_correlation_bgr</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AV_PIX_FMT_RGB24</name></expr>:</case>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>color_decorrelation</name></name> <operator>=</operator> <name>color_decorrelation_rgb</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>color_correlation</name></name> <operator>=</operator> <name>color_correlation_rgb</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AV_PIX_FMT_GBRP</name></expr>:</case>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>color_decorrelation</name></name> <operator>=</operator> <name>color_decorrelation_gbrp</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>color_correlation</name></name> <operator>=</operator> <name>color_correlation_gbrp</name></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></switch>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>pr_width</name></name> <operator>=</operator> <name><name>inlink</name><operator>-&gt;</operator><name>w</name></name> <operator>-</operator> <operator>(</operator><name><name>inlink</name><operator>-&gt;</operator><name>w</name></name> <operator>-</operator> <name>bsize</name><operator>)</operator> <operator>%</operator> <name><name>s</name><operator>-&gt;</operator><name>step</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>pr_height</name></name> <operator>=</operator> <name><name>inlink</name><operator>-&gt;</operator><name>h</name></name> <operator>-</operator> <operator>(</operator><name><name>inlink</name><operator>-&gt;</operator><name>h</name></name> <operator>-</operator> <name>bsize</name><operator>)</operator> <operator>%</operator> <name><name>s</name><operator>-&gt;</operator><name>step</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>pr_width</name></name> <operator>!=</operator> <name><name>inlink</name><operator>-&gt;</operator><name>w</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"The last %d horizontal pixels won't be denoised\n"</literal></expr></argument>,

<argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>w</name></name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>pr_width</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>pr_height</name></name> <operator>!=</operator> <name><name>inlink</name><operator>-&gt;</operator><name>h</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"The last %d vertical pixels won't be denoised\n"</literal></expr></argument>,

<argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>h</name></name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>pr_height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>max_slice_h</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>pr_height</name></name> <operator>/</operator> <operator>(</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>bsize</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>nb_threads</name></name> <operator>=</operator> <call><name>FFMIN3</name><argument_list>(<argument><expr><name>MAX_THREADS</name></expr></argument>, <argument><expr><call><name>ff_filter_get_nb_threads</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>max_slice_h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"threads: [max=%d hmax=%d user=%d] =&gt; %d\n"</literal></expr></argument>,

<argument><expr><name>MAX_THREADS</name></expr></argument>, <argument><expr><name>max_slice_h</name></expr></argument>, <argument><expr><call><name>ff_filter_get_nb_threads</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>nb_threads</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>p_linesize</name></name> <operator>=</operator> <name>linesize</name> <operator>=</operator> <call><name>FFALIGN</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pr_width</name></name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>cbuf</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>av_malloc_array</name><argument_list>(<argument><expr><name>linesize</name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>pr_height</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>cbuf</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>cbuf</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>av_malloc_array</name><argument_list>(<argument><expr><name>linesize</name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>pr_height</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>cbuf</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>cbuf</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>av_malloc_array</name><argument_list>(<argument><expr><name>linesize</name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>pr_height</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>cbuf</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>cbuf</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>||</operator> <operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>cbuf</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>||</operator> <operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>cbuf</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>expr_str</name></name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>nb_threads</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>av_expr_parse</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>expr</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>expr_str</name></name></expr></argument>, <argument><expr><name>var_names</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>slice_h</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>ceilf</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pr_height</name></name> <operator>/</operator> <operator>(</operator><name>float</name><operator>)</operator><name><name>s</name><operator>-&gt;</operator><name>nb_threads</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>bsize</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>nb_threads</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>slices</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>av_malloc_array</name><argument_list>(<argument><expr><name>linesize</name></expr></argument>, <argument><expr><name>slice_h</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>slices</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>slices</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>weights</name></name> <operator>=</operator> <call><name>av_malloc</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pr_height</name></name> <operator>*</operator> <name>linesize</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>weights</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>weights</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>iweights</name> <operator>=</operator> <call><name>av_calloc</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pr_height</name></name></expr></argument>, <argument><expr><name>linesize</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>iweights</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>iweights</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>pr_height</name></name> <operator>-</operator> <name>bsize</name> <operator>+</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>y</name> <operator>+=</operator> <name><name>s</name><operator>-&gt;</operator><name>step</name></name></expr></incr>)</control><block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>pr_width</name></name> <operator>-</operator> <name>bsize</name> <operator>+</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>x</name> <operator>+=</operator> <name><name>s</name><operator>-&gt;</operator><name>step</name></name></expr></incr>)</control><block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>by</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>by</name> <operator>&lt;</operator> <name>bsize</name></expr>;</condition> <incr><expr><name>by</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>bx</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>bx</name> <operator>&lt;</operator> <name>bsize</name></expr>;</condition> <incr><expr><name>bx</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>iweights</name><index>[<expr><operator>(</operator><name>y</name> <operator>+</operator> <name>by</name><operator>)</operator><operator>*</operator><name>linesize</name> <operator>+</operator> <name>x</name> <operator>+</operator> <name>bx</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt></block_content></block></for></block_content></block></for></block_content></block></for></block_content></block></for>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>pr_height</name></name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>pr_width</name></name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>weights</name><index>[<expr><name>y</name><operator>*</operator><name>linesize</name> <operator>+</operator> <name>x</name></expr>]</index></name> <operator>=</operator> <literal type="number">1.</literal> <operator>/</operator> <name><name>iweights</name><index>[<expr><name>y</name><operator>*</operator><name>linesize</name> <operator>+</operator> <name>x</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for></block_content></block></for>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>iweights</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>init</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>DCTdnoizContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>bsize</name></name> <operator>=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>n</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>overlap</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>overlap</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>bsize</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>overlap</name></name> <operator>&gt;</operator> <name><name>s</name><operator>-&gt;</operator><name>bsize</name></name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Overlap value can not except %d "</literal>

<literal type="string">"with a block size of %dx%d\n"</literal></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>bsize</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>bsize</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>bsize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>expr_str</name></name></expr>)</condition> <block>{<block_content>

<switch>switch <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>n</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">3</literal></expr>:</case> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>filter_freq_func</name></name> <operator>=</operator> <name>filter_freq_expr_8</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">4</literal></expr>:</case> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>filter_freq_func</name></name> <operator>=</operator> <name>filter_freq_expr_16</name></expr>;</expr_stmt> <break>break;</break>

<default>default:</default> <expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></switch>

</block_content>}</block></if> <else>else <block>{<block_content>

<switch>switch <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>n</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">3</literal></expr>:</case> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>filter_freq_func</name></name> <operator>=</operator> <name>filter_freq_sigma_8</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">4</literal></expr>:</case> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>filter_freq_func</name></name> <operator>=</operator> <name>filter_freq_sigma_16</name></expr>;</expr_stmt> <break>break;</break>

<default>default:</default> <expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></switch>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>th</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>sigma</name></name> <operator>*</operator> <literal type="number">3.</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>step</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>bsize</name></name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>overlap</name></name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>query_formats</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>enum</name> <name>AVPixelFormat</name></name></type> <name><name>pix_fmts</name><index>[]</index></name> <init>= <expr><block>{

<expr><name>AV_PIX_FMT_BGR24</name></expr>, <expr><name>AV_PIX_FMT_RGB24</name></expr>,

<expr><name>AV_PIX_FMT_GBRP</name></expr>,

<expr><name>AV_PIX_FMT_NONE</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFilterFormats</name> <modifier>*</modifier></type><name>fmts_list</name> <init>= <expr><call><name>ff_make_format_list</name><argument_list>(<argument><expr><name>pix_fmts</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>fmts_list</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>ff_set_common_formats</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>fmts_list</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<typedef>typedef <type><struct>struct <name>ThreadData</name> <block>{

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>src</name></decl>, <modifier>*</modifier><name>dst</name>;</decl_stmt>

}</block></struct></type> <name>ThreadData</name>;</typedef>

<function><type><specifier>static</specifier> <name>int</name></type> <name>filter_slice</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>jobnr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nb_jobs</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DCTdnoizContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>ThreadData</name> <modifier>*</modifier></type><name>td</name> <init>= <expr><name>arg</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>w</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>pr_width</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>h</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>pr_height</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>slice_start</name> <init>= <expr><operator>(</operator><name>h</name> <operator>*</operator> <name>jobnr</name> <operator>)</operator> <operator>/</operator> <name>nb_jobs</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>slice_end</name> <init>= <expr><operator>(</operator><name>h</name> <operator>*</operator> <operator>(</operator><name>jobnr</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>/</operator> <name>nb_jobs</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>slice_start_ctx</name> <init>= <expr><call><name>FFMAX</name><argument_list>(<argument><expr><name>slice_start</name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>bsize</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>slice_end_ctx</name> <init>= <expr><call><name>FFMIN</name><argument_list>(<argument><expr><name>slice_end</name></expr></argument>, <argument><expr><name>h</name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>bsize</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>slice_h</name> <init>= <expr><name>slice_end_ctx</name> <operator>-</operator> <name>slice_start_ctx</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>src_linesize</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>p_linesize</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>dst_linesize</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>p_linesize</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>slice_linesize</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>p_linesize</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>dst</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><name><name>td</name><operator>-&gt;</operator><name>src</name></name> <operator>+</operator> <name>slice_start_ctx</name> <operator>*</operator> <name>src_linesize</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>weights</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>weights</name></name> <operator>+</operator> <name>slice_start</name> <operator>*</operator> <name>dst_linesize</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>slice</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>slices</name><index>[<expr><name>jobnr</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>slice</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name>slice_h</name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>bsize</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>dst_linesize</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>slice</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>slice_h</name></expr>;</condition> <incr><expr><name>y</name> <operator>+=</operator> <name><name>s</name><operator>-&gt;</operator><name>step</name></name></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>w</name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>bsize</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>x</name> <operator>+=</operator> <name><name>s</name><operator>-&gt;</operator><name>step</name></name></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>filter_freq_func</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>src</name> <operator>+</operator> <name>x</name></expr></argument>, <argument><expr><name>src_linesize</name></expr></argument>,

<argument><expr><name>slice</name> <operator>+</operator> <name>x</name></expr></argument>, <argument><expr><name>slice_linesize</name></expr></argument>,

<argument><expr><name>jobnr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>src</name> <operator>+=</operator> <name><name>s</name><operator>-&gt;</operator><name>step</name></name> <operator>*</operator> <name>src_linesize</name></expr>;</expr_stmt>

<expr_stmt><expr><name>slice</name> <operator>+=</operator> <name><name>s</name><operator>-&gt;</operator><name>step</name></name> <operator>*</operator> <name>slice_linesize</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>slice</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>slices</name><index>[<expr><name>jobnr</name></expr>]</index></name> <operator>+</operator> <operator>(</operator><name>slice_start</name> <operator>-</operator> <name>slice_start_ctx</name><operator>)</operator> <operator>*</operator> <name>slice_linesize</name></expr>;</expr_stmt>

<expr_stmt><expr><name>dst</name> <operator>=</operator> <name><name>td</name><operator>-&gt;</operator><name>dst</name></name> <operator>+</operator> <name>slice_start</name> <operator>*</operator> <name>dst_linesize</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <name>slice_start</name></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>slice_end</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>w</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>dst</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <name><name>slice</name><index>[<expr><name>x</name></expr>]</index></name> <operator>*</operator> <name><name>weights</name><index>[<expr><name>x</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>slice</name> <operator>+=</operator> <name>slice_linesize</name></expr>;</expr_stmt>

<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dst_linesize</name></expr>;</expr_stmt>

<expr_stmt><expr><name>weights</name> <operator>+=</operator> <name>dst_linesize</name></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>filter_frame</name><parameter_list>(<parameter><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>inlink</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>in</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>inlink</name><operator>-&gt;</operator><name>dst</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DCTdnoizContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>outlink</name> <init>= <expr><name><name>inlink</name><operator>-&gt;</operator><name>dst</name><operator>-&gt;</operator><name>outputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>direct</name></decl>, <decl><type ref="prev"/><name>plane</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>out</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>av_frame_is_writable</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>direct</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>out</name> <operator>=</operator> <name>in</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>direct</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>out</name> <operator>=</operator> <call><name>ff_get_video_buffer</name><argument_list>(<argument><expr><name>outlink</name></expr></argument>, <argument><expr><name><name>outlink</name><operator>-&gt;</operator><name>w</name></name></expr></argument>, <argument><expr><name><name>outlink</name><operator>-&gt;</operator><name>h</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>out</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_frame_copy_props</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>color_decorrelation</name></name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>cbuf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>p_linesize</name></name></expr></argument>,

<argument><expr><operator>(</operator><specifier>const</specifier> <name>uint8_t</name> <operator>*</operator><operator>*</operator><operator>)</operator><name><name>in</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>in</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pr_width</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>pr_height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>plane</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>plane</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>plane</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>ThreadData</name></type> <name>td</name> <init>= <expr><block>{

<expr><operator>.</operator><name>src</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>cbuf</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>plane</name></expr>]</index></name></expr>,

<expr><operator>.</operator><name>dst</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>cbuf</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>plane</name></expr>]</index></name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name><name>ctx</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>filter_slice</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>td</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>nb_threads</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>color_correlation</name></name><argument_list>(<argument><expr><name><name>out</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>cbuf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>p_linesize</name></name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pr_width</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>pr_height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>direct</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><name><name>in</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>dst_linesize</name> <init>= <expr><name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>src_linesize</name> <init>= <expr><name><name>in</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>hpad</name> <init>= <expr><operator>(</operator><name><name>inlink</name><operator>-&gt;</operator><name>w</name></name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>pr_width</name></name><operator>)</operator> <operator>*</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>vpad</name> <init>= <expr><operator>(</operator><name><name>inlink</name><operator>-&gt;</operator><name>h</name></name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>pr_height</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>hpad</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dstp</name> <init>= <expr><name>dst</name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>pr_width</name></name> <operator>*</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>srcp</name> <init>= <expr><name>src</name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>pr_width</name></name> <operator>*</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>pr_height</name></name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>dstp</name></expr></argument>, <argument><expr><name>srcp</name></expr></argument>, <argument><expr><name>hpad</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dstp</name> <operator>+=</operator> <name>dst_linesize</name></expr>;</expr_stmt>

<expr_stmt><expr><name>srcp</name> <operator>+=</operator> <name>src_linesize</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>vpad</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dstp</name> <init>= <expr><name>dst</name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>pr_height</name></name> <operator>*</operator> <name>dst_linesize</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>srcp</name> <init>= <expr><name>src</name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>pr_height</name></name> <operator>*</operator> <name>src_linesize</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>vpad</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>dstp</name></expr></argument>, <argument><expr><name>srcp</name></expr></argument>, <argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>w</name></name> <operator>*</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dstp</name> <operator>+=</operator> <name>dst_linesize</name></expr>;</expr_stmt>

<expr_stmt><expr><name>srcp</name> <operator>+=</operator> <name>src_linesize</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>ff_filter_frame</name><argument_list>(<argument><expr><name>outlink</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>void</name></type> <name>uninit</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DCTdnoizContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>weights</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>cbuf</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>cbuf</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>cbuf</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>nb_threads</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>slices</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_expr_free</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>expr</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVFilterPad</name></type> <name><name>dctdnoiz_inputs</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"default"</literal></expr>,

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,

<expr><operator>.</operator><name>filter_frame</name> <operator>=</operator> <name>filter_frame</name></expr>,

<expr><operator>.</operator><name>config_props</name> <operator>=</operator> <name>config_input</name></expr>,

}</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVFilterPad</name></type> <name><name>dctdnoiz_outputs</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"default"</literal></expr>,

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,

}</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFilter</name></type> <name>ff_vf_dctdnoiz</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"dctdnoiz"</literal></expr>,

<expr><operator>.</operator><name>description</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"Denoise frames using 2D DCT."</literal></expr></argument>)</argument_list></call></expr>,

<expr><operator>.</operator><name>priv_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>DCTdnoizContext</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>init</name></expr>,

<expr><operator>.</operator><name>uninit</name> <operator>=</operator> <name>uninit</name></expr>,

<expr><operator>.</operator><name>query_formats</name> <operator>=</operator> <name>query_formats</name></expr>,

<expr><operator>.</operator><name>inputs</name> <operator>=</operator> <name>dctdnoiz_inputs</name></expr>,

<expr><operator>.</operator><name>outputs</name> <operator>=</operator> <name>dctdnoiz_outputs</name></expr>,

<expr><operator>.</operator><name>priv_class</name> <operator>=</operator> <operator>&amp;</operator><name>dctdnoiz_class</name></expr>,

<expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>AVFILTER_FLAG_SUPPORT_TIMELINE_GENERIC</name> <operator>|</operator> <name>AVFILTER_FLAG_SLICE_THREADS</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

</unit>
