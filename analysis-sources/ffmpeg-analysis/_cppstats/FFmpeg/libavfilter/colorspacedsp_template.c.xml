<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavfilter\colorspacedsp_template.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avassert.h"</cpp:file></cpp:include>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>avg</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>ss</name></cpp:undef>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SS_W</name> <operator>==</operator> <literal type="number">0</literal></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ss</name></cpp:macro> <cpp:value>444</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>avg</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>,<parameter><type><name>d</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(a)</cpp:value></cpp:define>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>SS_H</name> <operator>==</operator> <literal type="number">0</literal></expr></cpp:elif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ss</name></cpp:macro> <cpp:value>422</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>avg</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>,<parameter><type><name>d</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((a) + (b) + 1) &gt;&gt; 1)</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ss</name></cpp:macro> <cpp:value>420</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>avg</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>,<parameter><type><name>d</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((a) + (b) + (c) + (d) + 2) &gt;&gt; 2)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>fn</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>fn2</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>fn3</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fn3</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>a##_##c##p##b##_c</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fn2</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>fn3(a,b,c)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fn</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>fn2(a, BIT_DEPTH, ss)</cpp:value></cpp:define>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>pixel</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>av_clip_pixel</name></cpp:undef>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BIT_DEPTH</name> <operator>==</operator> <literal type="number">8</literal></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pixel</name></cpp:macro> <cpp:value>uint8_t</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>av_clip_pixel</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>av_clip_uint8(x)</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pixel</name></cpp:macro> <cpp:value>uint16_t</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>av_clip_pixel</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>av_clip_uintp2(x, BIT_DEPTH)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>void</name> <name>fn</name></type>(<name>yuv2rgb</name>)<parameter_list>(<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name><name>rgb</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>rgb_stride</name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name><name>_yuv</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ptrdiff_t</name></type> <name><name>yuv_stride</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int16_t</name></type> <name><name>yuv2rgb_coeffs</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>int16_t</name></type> <name><name>yuv_offset</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>pixel</name> <modifier>*</modifier><modifier>*</modifier></type><name>yuv</name> <init>= <expr><operator>(</operator><name>pixel</name> <operator>*</operator><operator>*</operator><operator>)</operator> <name>_yuv</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>pixel</name> <modifier>*</modifier></type><name>yuv0</name> <init>= <expr><name><name>yuv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>yuv1</name> <init>= <expr><name><name>yuv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>yuv2</name> <init>= <expr><name><name>yuv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>rgb0</name> <init>= <expr><name><name>rgb</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>rgb1</name> <init>= <expr><name><name>rgb</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>rgb2</name> <init>= <expr><name><name>rgb</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>, <decl><type ref="prev"/><name>x</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>cy</name> <init>= <expr><name><name>yuv2rgb_coeffs</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>crv</name> <init>= <expr><name><name>yuv2rgb_coeffs</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>cgu</name> <init>= <expr><name><name>yuv2rgb_coeffs</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>cgv</name> <init>= <expr><name><name>yuv2rgb_coeffs</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>cbu</name> <init>= <expr><name><name>yuv2rgb_coeffs</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>sh</name> <init>= <expr><name>BIT_DEPTH</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>rnd</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>sh</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>uv_offset</name> <init>= <expr><literal type="number">128</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>BIT_DEPTH</name> <operator>-</operator> <literal type="number">8</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_assert2</name><argument_list>(<argument><expr><name><name>yuv2rgb_coeffs</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_assert2</name><argument_list>(<argument><expr><name><name>yuv2rgb_coeffs</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_assert2</name><argument_list>(<argument><expr><name><name>yuv2rgb_coeffs</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>cy</name> <operator>&amp;&amp;</operator> <name><name>yuv2rgb_coeffs</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>cy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>w</name> <operator>=</operator> <call><name>AV_CEIL_RSHIFT</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><name>SS_W</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>h</name> <operator>=</operator> <call><name>AV_CEIL_RSHIFT</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>SS_H</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>h</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>w</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>y00</name> <init>= <expr><name><name>yuv0</name><index>[<expr><name>x</name> <operator>&lt;&lt;</operator> <name>SS_W</name></expr>]</index></name> <operator>-</operator> <name><name>yuv_offset</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SS_W</name> <operator>==</operator> <literal type="number">1</literal></expr></cpp:if>

<decl_stmt><decl><type><name>int</name></type> <name>y01</name> <init>= <expr><name><name>yuv0</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>x</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>yuv_offset</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SS_H</name> <operator>==</operator> <literal type="number">1</literal></expr></cpp:if>

<decl_stmt><decl><type><name>int</name></type> <name>y10</name> <init>= <expr><name><name>yuv0</name><index>[<expr><name><name>yuv_stride</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>pixel</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <name>x</name></expr>]</index></name> <operator>-</operator> <name><name>yuv_offset</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>y11</name> <init>= <expr><name><name>yuv0</name><index>[<expr><name><name>yuv_stride</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>pixel</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <name>x</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>yuv_offset</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>int</name></type> <name>u</name> <init>= <expr><name><name>yuv1</name><index>[<expr><name>x</name></expr>]</index></name> <operator>-</operator> <name>uv_offset</name></expr></init></decl>, <decl><type ref="prev"/><name>v</name> <init>= <expr><name><name>yuv2</name><index>[<expr><name>x</name></expr>]</index></name> <operator>-</operator> <name>uv_offset</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>rgb0</name><index>[<expr><name>x</name> <operator>&lt;&lt;</operator> <name>SS_W</name></expr>]</index></name> <operator>=</operator> <call><name>av_clip_int16</name><argument_list>(<argument><expr><operator>(</operator><name>y00</name> <operator>*</operator> <name>cy</name> <operator>+</operator> <name>crv</name> <operator>*</operator> <name>v</name> <operator>+</operator> <name>rnd</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>sh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SS_W</name> <operator>==</operator> <literal type="number">1</literal></expr></cpp:if>

<expr_stmt><expr><name><name>rgb0</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>x</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>av_clip_int16</name><argument_list>(<argument><expr><operator>(</operator><name>y01</name> <operator>*</operator> <name>cy</name> <operator>+</operator> <name>crv</name> <operator>*</operator> <name>v</name> <operator>+</operator> <name>rnd</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>sh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SS_H</name> <operator>==</operator> <literal type="number">1</literal></expr></cpp:if>

<expr_stmt><expr><name><name>rgb0</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>x</name> <operator>+</operator> <name>rgb_stride</name></expr>]</index></name> <operator>=</operator> <call><name>av_clip_int16</name><argument_list>(<argument><expr><operator>(</operator><name>y10</name> <operator>*</operator> <name>cy</name> <operator>+</operator> <name>crv</name> <operator>*</operator> <name>v</name> <operator>+</operator> <name>rnd</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>sh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rgb0</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>x</name> <operator>+</operator> <name>rgb_stride</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>av_clip_int16</name><argument_list>(<argument><expr><operator>(</operator><name>y11</name> <operator>*</operator> <name>cy</name> <operator>+</operator> <name>crv</name> <operator>*</operator> <name>v</name> <operator>+</operator> <name>rnd</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>sh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>rgb1</name><index>[<expr><name>x</name> <operator>&lt;&lt;</operator> <name>SS_W</name></expr>]</index></name> <operator>=</operator> <call><name>av_clip_int16</name><argument_list>(<argument><expr><operator>(</operator><name>y00</name> <operator>*</operator> <name>cy</name> <operator>+</operator> <name>cgu</name> <operator>*</operator> <name>u</name> <operator>+</operator>

<name>cgv</name> <operator>*</operator> <name>v</name> <operator>+</operator> <name>rnd</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>sh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SS_W</name> <operator>==</operator> <literal type="number">1</literal></expr></cpp:if>

<expr_stmt><expr><name><name>rgb1</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>x</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>av_clip_int16</name><argument_list>(<argument><expr><operator>(</operator><name>y01</name> <operator>*</operator> <name>cy</name> <operator>+</operator> <name>cgu</name> <operator>*</operator> <name>u</name> <operator>+</operator>

<name>cgv</name> <operator>*</operator> <name>v</name> <operator>+</operator> <name>rnd</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>sh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SS_H</name> <operator>==</operator> <literal type="number">1</literal></expr></cpp:if>

<expr_stmt><expr><name><name>rgb1</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>x</name> <operator>+</operator> <name>rgb_stride</name></expr>]</index></name> <operator>=</operator> <call><name>av_clip_int16</name><argument_list>(<argument><expr><operator>(</operator><name>y10</name> <operator>*</operator> <name>cy</name> <operator>+</operator> <name>cgu</name> <operator>*</operator> <name>u</name> <operator>+</operator>

<name>cgv</name> <operator>*</operator> <name>v</name> <operator>+</operator> <name>rnd</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>sh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rgb1</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>x</name> <operator>+</operator> <name>rgb_stride</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>av_clip_int16</name><argument_list>(<argument><expr><operator>(</operator><name>y11</name> <operator>*</operator> <name>cy</name> <operator>+</operator> <name>cgu</name> <operator>*</operator> <name>u</name> <operator>+</operator>

<name>cgv</name> <operator>*</operator> <name>v</name> <operator>+</operator> <name>rnd</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>sh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>rgb2</name><index>[<expr><name>x</name> <operator>&lt;&lt;</operator> <name>SS_W</name></expr>]</index></name> <operator>=</operator> <call><name>av_clip_int16</name><argument_list>(<argument><expr><operator>(</operator><name>y00</name> <operator>*</operator> <name>cy</name> <operator>+</operator> <name>cbu</name> <operator>*</operator> <name>u</name> <operator>+</operator> <name>rnd</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>sh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SS_W</name> <operator>==</operator> <literal type="number">1</literal></expr></cpp:if>

<expr_stmt><expr><name><name>rgb2</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>x</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>av_clip_int16</name><argument_list>(<argument><expr><operator>(</operator><name>y01</name> <operator>*</operator> <name>cy</name> <operator>+</operator> <name>cbu</name> <operator>*</operator> <name>u</name> <operator>+</operator> <name>rnd</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>sh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SS_H</name> <operator>==</operator> <literal type="number">1</literal></expr></cpp:if>

<expr_stmt><expr><name><name>rgb2</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>x</name> <operator>+</operator> <name>rgb_stride</name></expr>]</index></name> <operator>=</operator> <call><name>av_clip_int16</name><argument_list>(<argument><expr><operator>(</operator><name>y10</name> <operator>*</operator> <name>cy</name> <operator>+</operator> <name>cbu</name> <operator>*</operator> <name>u</name> <operator>+</operator> <name>rnd</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>sh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rgb2</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>x</name> <operator>+</operator> <name>rgb_stride</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>av_clip_int16</name><argument_list>(<argument><expr><operator>(</operator><name>y11</name> <operator>*</operator> <name>cy</name> <operator>+</operator> <name>cbu</name> <operator>*</operator> <name>u</name> <operator>+</operator> <name>rnd</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>sh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></for>

<expr_stmt><expr><name>yuv0</name> <operator>+=</operator> <operator>(</operator><name><name>yuv_stride</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>SS_H</name><operator>)</operator><operator>)</operator> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>pixel</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<expr_stmt><expr><name>yuv1</name> <operator>+=</operator> <name><name>yuv_stride</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>pixel</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<expr_stmt><expr><name>yuv2</name> <operator>+=</operator> <name><name>yuv_stride</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>pixel</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<expr_stmt><expr><name>rgb0</name> <operator>+=</operator> <name>rgb_stride</name> <operator>*</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>SS_H</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>rgb1</name> <operator>+=</operator> <name>rgb_stride</name> <operator>*</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>SS_H</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>rgb2</name> <operator>+=</operator> <name>rgb_stride</name> <operator>*</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>SS_H</name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <name>fn</name></type>(<name>rgb2yuv</name>)<parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name><name>_yuv</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ptrdiff_t</name></type> <name><name>yuv_stride</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl></parameter>,

<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name><name>rgb</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>s</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int16_t</name></type> <name><name>rgb2yuv_coeffs</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>int16_t</name></type> <name><name>yuv_offset</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>pixel</name> <modifier>*</modifier><modifier>*</modifier></type><name>yuv</name> <init>= <expr><operator>(</operator><name>pixel</name> <operator>*</operator><operator>*</operator><operator>)</operator> <name>_yuv</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>pixel</name> <modifier>*</modifier></type><name>yuv0</name> <init>= <expr><name><name>yuv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>yuv1</name> <init>= <expr><name><name>yuv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>yuv2</name> <init>= <expr><name><name>yuv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name>rgb0</name> <init>= <expr><name><name>rgb</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>rgb1</name> <init>= <expr><name><name>rgb</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>rgb2</name> <init>= <expr><name><name>rgb</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>, <decl><type ref="prev"/><name>x</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>sh</name> <init>= <expr><literal type="number">29</literal> <operator>-</operator> <name>BIT_DEPTH</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>rnd</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>sh</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>cry</name> <init>= <expr><name><name>rgb2yuv_coeffs</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>cgy</name> <init>= <expr><name><name>rgb2yuv_coeffs</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>cby</name> <init>= <expr><name><name>rgb2yuv_coeffs</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>cru</name> <init>= <expr><name><name>rgb2yuv_coeffs</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>cgu</name> <init>= <expr><name><name>rgb2yuv_coeffs</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>cburv</name> <init>= <expr><name><name>rgb2yuv_coeffs</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>cgv</name> <init>= <expr><name><name>rgb2yuv_coeffs</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>cbv</name> <init>= <expr><name><name>rgb2yuv_coeffs</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ptrdiff_t</name></type> <name>s0</name> <init>= <expr><name><name>yuv_stride</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>pixel</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>uv_offset</name> <init>= <expr><literal type="number">128</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>BIT_DEPTH</name> <operator>-</operator> <literal type="number">8</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_assert2</name><argument_list>(<argument><expr><name><name>rgb2yuv_coeffs</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name><name>rgb2yuv_coeffs</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>w</name> <operator>=</operator> <call><name>AV_CEIL_RSHIFT</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><name>SS_W</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>h</name> <operator>=</operator> <call><name>AV_CEIL_RSHIFT</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>SS_H</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>h</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>w</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>r00</name> <init>= <expr><name><name>rgb0</name><index>[<expr><name>x</name> <operator>&lt;&lt;</operator> <name>SS_W</name></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>g00</name> <init>= <expr><name><name>rgb1</name><index>[<expr><name>x</name> <operator>&lt;&lt;</operator> <name>SS_W</name></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>b00</name> <init>= <expr><name><name>rgb2</name><index>[<expr><name>x</name> <operator>&lt;&lt;</operator> <name>SS_W</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SS_W</name> <operator>==</operator> <literal type="number">1</literal></expr></cpp:if>

<decl_stmt><decl><type><name>int</name></type> <name>r01</name> <init>= <expr><name><name>rgb0</name><index>[<expr><name>x</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>g01</name> <init>= <expr><name><name>rgb1</name><index>[<expr><name>x</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>b01</name> <init>= <expr><name><name>rgb2</name><index>[<expr><name>x</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SS_H</name> <operator>==</operator> <literal type="number">1</literal></expr></cpp:if>

<decl_stmt><decl><type><name>int</name></type> <name>r10</name> <init>= <expr><name><name>rgb0</name><index>[<expr><name>x</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">0</literal> <operator>+</operator> <name>s</name></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>g10</name> <init>= <expr><name><name>rgb1</name><index>[<expr><name>x</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">0</literal> <operator>+</operator> <name>s</name></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>b10</name> <init>= <expr><name><name>rgb2</name><index>[<expr><name>x</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">0</literal> <operator>+</operator> <name>s</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>r11</name> <init>= <expr><name><name>rgb0</name><index>[<expr><name>x</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <name>s</name></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>g11</name> <init>= <expr><name><name>rgb1</name><index>[<expr><name>x</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <name>s</name></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>b11</name> <init>= <expr><name><name>rgb2</name><index>[<expr><name>x</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <name>s</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>yuv0</name><index>[<expr><name>x</name> <operator>&lt;&lt;</operator> <name>SS_W</name></expr>]</index></name> <operator>=</operator> <call><name>av_clip_pixel</name><argument_list>(<argument><expr><name><name>yuv_offset</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator>

<operator>(</operator><operator>(</operator><name>r00</name> <operator>*</operator> <name>cry</name> <operator>+</operator> <name>g00</name> <operator>*</operator> <name>cgy</name> <operator>+</operator>

<name>b00</name> <operator>*</operator> <name>cby</name> <operator>+</operator> <name>rnd</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>sh</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SS_W</name> <operator>==</operator> <literal type="number">1</literal></expr></cpp:if>

<expr_stmt><expr><name><name>yuv0</name><index>[<expr><name>x</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>av_clip_pixel</name><argument_list>(<argument><expr><name><name>yuv_offset</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator>

<operator>(</operator><operator>(</operator><name>r01</name> <operator>*</operator> <name>cry</name> <operator>+</operator> <name>g01</name> <operator>*</operator> <name>cgy</name> <operator>+</operator>

<name>b01</name> <operator>*</operator> <name>cby</name> <operator>+</operator> <name>rnd</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>sh</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SS_H</name> <operator>==</operator> <literal type="number">1</literal></expr></cpp:if>

<expr_stmt><expr><name><name>yuv0</name><index>[<expr><name>x</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">0</literal> <operator>+</operator> <name>s0</name></expr>]</index></name> <operator>=</operator> <call><name>av_clip_pixel</name><argument_list>(<argument><expr><name><name>yuv_offset</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator>

<operator>(</operator><operator>(</operator><name>r10</name> <operator>*</operator> <name>cry</name> <operator>+</operator> <name>g10</name> <operator>*</operator> <name>cgy</name> <operator>+</operator>

<name>b10</name> <operator>*</operator> <name>cby</name> <operator>+</operator> <name>rnd</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>sh</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>yuv0</name><index>[<expr><name>x</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <name>s0</name></expr>]</index></name> <operator>=</operator> <call><name>av_clip_pixel</name><argument_list>(<argument><expr><name><name>yuv_offset</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator>

<operator>(</operator><operator>(</operator><name>r11</name> <operator>*</operator> <name>cry</name> <operator>+</operator> <name>g11</name> <operator>*</operator> <name>cgy</name> <operator>+</operator>

<name>b11</name> <operator>*</operator> <name>cby</name> <operator>+</operator> <name>rnd</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>sh</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>yuv1</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <call><name>av_clip_pixel</name><argument_list>(<argument><expr><name>uv_offset</name> <operator>+</operator>

<operator>(</operator><operator>(</operator><call><name>avg</name><argument_list>(<argument><expr><name>r00</name></expr></argument>, <argument><expr><name>r01</name></expr></argument>, <argument><expr><name>r10</name></expr></argument>, <argument><expr><name>r11</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>cru</name> <operator>+</operator>

<call><name>avg</name><argument_list>(<argument><expr><name>g00</name></expr></argument>, <argument><expr><name>g01</name></expr></argument>, <argument><expr><name>g10</name></expr></argument>, <argument><expr><name>g11</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>cgu</name> <operator>+</operator>

<call><name>avg</name><argument_list>(<argument><expr><name>b00</name></expr></argument>, <argument><expr><name>b01</name></expr></argument>, <argument><expr><name>b10</name></expr></argument>, <argument><expr><name>b11</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>cburv</name> <operator>+</operator> <name>rnd</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>sh</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>yuv2</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <call><name>av_clip_pixel</name><argument_list>(<argument><expr><name>uv_offset</name> <operator>+</operator>

<operator>(</operator><operator>(</operator><call><name>avg</name><argument_list>(<argument><expr><name>r00</name></expr></argument>, <argument><expr><name>r01</name></expr></argument>, <argument><expr><name>r10</name></expr></argument>, <argument><expr><name>r11</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>cburv</name> <operator>+</operator>

<call><name>avg</name><argument_list>(<argument><expr><name>g00</name></expr></argument>, <argument><expr><name>g01</name></expr></argument>, <argument><expr><name>g10</name></expr></argument>, <argument><expr><name>g11</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>cgv</name> <operator>+</operator>

<call><name>avg</name><argument_list>(<argument><expr><name>b00</name></expr></argument>, <argument><expr><name>b01</name></expr></argument>, <argument><expr><name>b10</name></expr></argument>, <argument><expr><name>b11</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>cbv</name> <operator>+</operator> <name>rnd</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>sh</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>yuv0</name> <operator>+=</operator> <name>s0</name> <operator>*</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>SS_H</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>yuv1</name> <operator>+=</operator> <name><name>yuv_stride</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>pixel</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<expr_stmt><expr><name>yuv2</name> <operator>+=</operator> <name><name>yuv_stride</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>pixel</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<expr_stmt><expr><name>rgb0</name> <operator>+=</operator> <name>s</name> <operator>*</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>SS_H</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>rgb1</name> <operator>+=</operator> <name>s</name> <operator>*</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>SS_H</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>rgb2</name> <operator>+=</operator> <name>s</name> <operator>*</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>SS_H</name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <name>fn</name></type>(<name>rgb2yuv_fsb</name>)<parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name><name>_yuv</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ptrdiff_t</name></type> <name><name>yuv_stride</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl></parameter>,

<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name><name>rgb</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>s</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int16_t</name></type> <name><name>rgb2yuv_coeffs</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>int16_t</name></type> <name><name>yuv_offset</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl></parameter>,

<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name><name>rnd_scratch</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>pixel</name> <modifier>*</modifier><modifier>*</modifier></type><name>yuv</name> <init>= <expr><operator>(</operator><name>pixel</name> <operator>*</operator><operator>*</operator><operator>)</operator> <name>_yuv</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>pixel</name> <modifier>*</modifier></type><name>yuv0</name> <init>= <expr><name><name>yuv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>yuv1</name> <init>= <expr><name><name>yuv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>yuv2</name> <init>= <expr><name><name>yuv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name>rgb0</name> <init>= <expr><name><name>rgb</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>rgb1</name> <init>= <expr><name><name>rgb</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>rgb2</name> <init>= <expr><name><name>rgb</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>, <decl><type ref="prev"/><name>x</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>sh</name> <init>= <expr><literal type="number">29</literal> <operator>-</operator> <name>BIT_DEPTH</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>rnd</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>sh</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>cry</name> <init>= <expr><name><name>rgb2yuv_coeffs</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>cgy</name> <init>= <expr><name><name>rgb2yuv_coeffs</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>cby</name> <init>= <expr><name><name>rgb2yuv_coeffs</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>cru</name> <init>= <expr><name><name>rgb2yuv_coeffs</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>cgu</name> <init>= <expr><name><name>rgb2yuv_coeffs</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>cburv</name> <init>= <expr><name><name>rgb2yuv_coeffs</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>cgv</name> <init>= <expr><name><name>rgb2yuv_coeffs</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>cbv</name> <init>= <expr><name><name>rgb2yuv_coeffs</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ptrdiff_t</name></type> <name>s0</name> <init>= <expr><name><name>yuv_stride</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>pixel</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>uv_offset</name> <init>= <expr><literal type="number">128</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>BIT_DEPTH</name> <operator>-</operator> <literal type="number">8</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>mask</name> <init>= <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>sh</name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>w</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>rnd_scratch</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator>

<name><name>rnd_scratch</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <name>rnd</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>av_assert2</name><argument_list>(<argument><expr><name><name>rgb2yuv_coeffs</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name><name>rgb2yuv_coeffs</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>w</name> <operator>=</operator> <call><name>AV_CEIL_RSHIFT</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><name>SS_W</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>h</name> <operator>=</operator> <call><name>AV_CEIL_RSHIFT</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>SS_H</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>w</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>rnd_scratch</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator>

<name><name>rnd_scratch</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator>

<name><name>rnd_scratch</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator>

<name><name>rnd_scratch</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <name>rnd</name></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>h</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>w</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>r00</name> <init>= <expr><name><name>rgb0</name><index>[<expr><name>x</name> <operator>&lt;&lt;</operator> <name>SS_W</name></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>g00</name> <init>= <expr><name><name>rgb1</name><index>[<expr><name>x</name> <operator>&lt;&lt;</operator> <name>SS_W</name></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>b00</name> <init>= <expr><name><name>rgb2</name><index>[<expr><name>x</name> <operator>&lt;&lt;</operator> <name>SS_W</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>y00</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SS_W</name> <operator>==</operator> <literal type="number">1</literal></expr></cpp:if>

<decl_stmt><decl><type><name>int</name></type> <name>r01</name> <init>= <expr><name><name>rgb0</name><index>[<expr><name>x</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>g01</name> <init>= <expr><name><name>rgb1</name><index>[<expr><name>x</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>b01</name> <init>= <expr><name><name>rgb2</name><index>[<expr><name>x</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>y01</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SS_H</name> <operator>==</operator> <literal type="number">1</literal></expr></cpp:if>

<decl_stmt><decl><type><name>int</name></type> <name>r10</name> <init>= <expr><name><name>rgb0</name><index>[<expr><name>x</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">0</literal> <operator>+</operator> <name>s</name></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>g10</name> <init>= <expr><name><name>rgb1</name><index>[<expr><name>x</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">0</literal> <operator>+</operator> <name>s</name></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>b10</name> <init>= <expr><name><name>rgb2</name><index>[<expr><name>x</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">0</literal> <operator>+</operator> <name>s</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>r11</name> <init>= <expr><name><name>rgb0</name><index>[<expr><name>x</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <name>s</name></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>g11</name> <init>= <expr><name><name>rgb1</name><index>[<expr><name>x</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <name>s</name></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>b11</name> <init>= <expr><name><name>rgb2</name><index>[<expr><name>x</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <name>s</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>y10</name></decl>, <decl><type ref="prev"/><name>y11</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>int</name></type> <name>u</name></decl>, <decl><type ref="prev"/><name>v</name></decl>, <decl><type ref="prev"/><name>diff</name></decl>;</decl_stmt>

<expr_stmt><expr><name>y00</name> <operator>=</operator> <name>r00</name> <operator>*</operator> <name>cry</name> <operator>+</operator> <name>g00</name> <operator>*</operator> <name>cgy</name> <operator>+</operator> <name>b00</name> <operator>*</operator> <name>cby</name> <operator>+</operator> <name><name>rnd_scratch</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>y</name> <operator>&amp;</operator> <operator>!</operator><name>SS_H</name></expr>]</index><index>[<expr><name>x</name> <operator>&lt;&lt;</operator> <name>SS_W</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>diff</name> <operator>=</operator> <operator>(</operator><name>y00</name> <operator>&amp;</operator> <name>mask</name><operator>)</operator> <operator>-</operator> <name>rnd</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>yuv0</name><index>[<expr><name>x</name> <operator>&lt;&lt;</operator> <name>SS_W</name></expr>]</index></name> <operator>=</operator> <call><name>av_clip_pixel</name><argument_list>(<argument><expr><name><name>yuv_offset</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><name>y00</name> <operator>&gt;&gt;</operator> <name>sh</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rnd_scratch</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[ <expr><operator>(</operator><name>y</name> <operator>&amp;</operator> <operator>!</operator><name>SS_H</name><operator>)</operator></expr>]</index><index>[<expr><operator>(</operator><name>x</name> <operator>&lt;&lt;</operator> <name>SS_W</name><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+=</operator> <operator>(</operator><name>diff</name> <operator>*</operator> <literal type="number">7</literal> <operator>+</operator> <literal type="number">8</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rnd_scratch</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><operator>!</operator><operator>(</operator><name>y</name> <operator>&amp;</operator> <operator>!</operator><name>SS_H</name><operator>)</operator></expr>]</index><index>[<expr><operator>(</operator><name>x</name> <operator>&lt;&lt;</operator> <name>SS_W</name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+=</operator> <operator>(</operator><name>diff</name> <operator>*</operator> <literal type="number">3</literal> <operator>+</operator> <literal type="number">8</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rnd_scratch</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><operator>!</operator><operator>(</operator><name>y</name> <operator>&amp;</operator> <operator>!</operator><name>SS_H</name><operator>)</operator></expr>]</index><index>[<expr><operator>(</operator><name>x</name> <operator>&lt;&lt;</operator> <name>SS_W</name><operator>)</operator> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name> <operator>+=</operator> <operator>(</operator><name>diff</name> <operator>*</operator> <literal type="number">5</literal> <operator>+</operator> <literal type="number">8</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rnd_scratch</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><operator>!</operator><operator>(</operator><name>y</name> <operator>&amp;</operator> <operator>!</operator><name>SS_H</name><operator>)</operator></expr>]</index><index>[<expr><operator>(</operator><name>x</name> <operator>&lt;&lt;</operator> <name>SS_W</name><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+=</operator> <operator>(</operator><name>diff</name> <operator>*</operator> <literal type="number">1</literal> <operator>+</operator> <literal type="number">8</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rnd_scratch</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[ <expr><operator>(</operator><name>y</name> <operator>&amp;</operator> <operator>!</operator><name>SS_H</name><operator>)</operator></expr>]</index><index>[<expr><operator>(</operator><name>x</name> <operator>&lt;&lt;</operator> <name>SS_W</name><operator>)</operator> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>rnd</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SS_W</name> <operator>==</operator> <literal type="number">1</literal></expr></cpp:if>

<expr_stmt><expr><name>y01</name> <operator>=</operator> <name>r01</name> <operator>*</operator> <name>cry</name> <operator>+</operator> <name>g01</name> <operator>*</operator> <name>cgy</name> <operator>+</operator> <name>b01</name> <operator>*</operator> <name>cby</name> <operator>+</operator> <name><name>rnd_scratch</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>y</name> <operator>&amp;</operator> <operator>!</operator><name>SS_H</name></expr>]</index><index>[<expr><name>x</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>diff</name> <operator>=</operator> <operator>(</operator><name>y01</name> <operator>&amp;</operator> <name>mask</name><operator>)</operator> <operator>-</operator> <name>rnd</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>yuv0</name><index>[<expr><name>x</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>av_clip_pixel</name><argument_list>(<argument><expr><name><name>yuv_offset</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><name>y01</name> <operator>&gt;&gt;</operator> <name>sh</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rnd_scratch</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[ <expr><operator>(</operator><name>y</name> <operator>&amp;</operator> <operator>!</operator><name>SS_H</name><operator>)</operator></expr>]</index><index>[<expr><name>x</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>+=</operator> <operator>(</operator><name>diff</name> <operator>*</operator> <literal type="number">7</literal> <operator>+</operator> <literal type="number">8</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rnd_scratch</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><operator>!</operator><operator>(</operator><name>y</name> <operator>&amp;</operator> <operator>!</operator><name>SS_H</name><operator>)</operator></expr>]</index><index>[<expr><name>x</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name> <operator>+=</operator> <operator>(</operator><name>diff</name> <operator>*</operator> <literal type="number">3</literal> <operator>+</operator> <literal type="number">8</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rnd_scratch</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><operator>!</operator><operator>(</operator><name>y</name> <operator>&amp;</operator> <operator>!</operator><name>SS_H</name><operator>)</operator></expr>]</index><index>[<expr><name>x</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+=</operator> <operator>(</operator><name>diff</name> <operator>*</operator> <literal type="number">5</literal> <operator>+</operator> <literal type="number">8</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rnd_scratch</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><operator>!</operator><operator>(</operator><name>y</name> <operator>&amp;</operator> <operator>!</operator><name>SS_H</name><operator>)</operator></expr>]</index><index>[<expr><name>x</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>+=</operator> <operator>(</operator><name>diff</name> <operator>*</operator> <literal type="number">1</literal> <operator>+</operator> <literal type="number">8</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rnd_scratch</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[ <expr><operator>(</operator><name>y</name> <operator>&amp;</operator> <operator>!</operator><name>SS_H</name><operator>)</operator></expr>]</index><index>[<expr><name>x</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>rnd</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SS_H</name> <operator>==</operator> <literal type="number">1</literal></expr></cpp:if>

<expr_stmt><expr><name>y10</name> <operator>=</operator> <name>r10</name> <operator>*</operator> <name>cry</name> <operator>+</operator> <name>g10</name> <operator>*</operator> <name>cgy</name> <operator>+</operator> <name>b10</name> <operator>*</operator> <name>cby</name> <operator>+</operator> <name><name>rnd_scratch</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>x</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>diff</name> <operator>=</operator> <operator>(</operator><name>y10</name> <operator>&amp;</operator> <name>mask</name><operator>)</operator> <operator>-</operator> <name>rnd</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>yuv0</name><index>[<expr><name>x</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">0</literal> <operator>+</operator> <name>s0</name></expr>]</index></name> <operator>=</operator> <call><name>av_clip_pixel</name><argument_list>(<argument><expr><name><name>yuv_offset</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><name>y10</name> <operator>&gt;&gt;</operator> <name>sh</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rnd_scratch</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>x</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+=</operator> <operator>(</operator><name>diff</name> <operator>*</operator> <literal type="number">7</literal> <operator>+</operator> <literal type="number">8</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rnd_scratch</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>x</name> <operator>*</operator> <literal type="number">2</literal> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+=</operator> <operator>(</operator><name>diff</name> <operator>*</operator> <literal type="number">3</literal> <operator>+</operator> <literal type="number">8</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rnd_scratch</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>x</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name> <operator>+=</operator> <operator>(</operator><name>diff</name> <operator>*</operator> <literal type="number">5</literal> <operator>+</operator> <literal type="number">8</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rnd_scratch</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>x</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+=</operator> <operator>(</operator><name>diff</name> <operator>*</operator> <literal type="number">1</literal> <operator>+</operator> <literal type="number">8</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rnd_scratch</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>x</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>rnd</name></expr>;</expr_stmt>

<expr_stmt><expr><name>y11</name> <operator>=</operator> <name>r11</name> <operator>*</operator> <name>cry</name> <operator>+</operator> <name>g11</name> <operator>*</operator> <name>cgy</name> <operator>+</operator> <name>b11</name> <operator>*</operator> <name>cby</name> <operator>+</operator> <name><name>rnd_scratch</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>x</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>diff</name> <operator>=</operator> <operator>(</operator><name>y11</name> <operator>&amp;</operator> <name>mask</name><operator>)</operator> <operator>-</operator> <name>rnd</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>yuv0</name><index>[<expr><name>x</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <name>s0</name></expr>]</index></name> <operator>=</operator> <call><name>av_clip_pixel</name><argument_list>(<argument><expr><name><name>yuv_offset</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><name>y11</name> <operator>&gt;&gt;</operator> <name>sh</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rnd_scratch</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>x</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>+=</operator> <operator>(</operator><name>diff</name> <operator>*</operator> <literal type="number">7</literal> <operator>+</operator> <literal type="number">8</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rnd_scratch</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>x</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name> <operator>+=</operator> <operator>(</operator><name>diff</name> <operator>*</operator> <literal type="number">3</literal> <operator>+</operator> <literal type="number">8</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rnd_scratch</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>x</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+=</operator> <operator>(</operator><name>diff</name> <operator>*</operator> <literal type="number">5</literal> <operator>+</operator> <literal type="number">8</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rnd_scratch</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>x</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>+=</operator> <operator>(</operator><name>diff</name> <operator>*</operator> <literal type="number">1</literal> <operator>+</operator> <literal type="number">8</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rnd_scratch</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>x</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>rnd</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>u</name> <operator>=</operator> <call><name>avg</name><argument_list>(<argument><expr><name>r00</name></expr></argument>, <argument><expr><name>r01</name></expr></argument>, <argument><expr><name>r10</name></expr></argument>, <argument><expr><name>r11</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>cru</name> <operator>+</operator>

<call><name>avg</name><argument_list>(<argument><expr><name>g00</name></expr></argument>, <argument><expr><name>g01</name></expr></argument>, <argument><expr><name>g10</name></expr></argument>, <argument><expr><name>g11</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>cgu</name> <operator>+</operator>

<call><name>avg</name><argument_list>(<argument><expr><name>b00</name></expr></argument>, <argument><expr><name>b01</name></expr></argument>, <argument><expr><name>b10</name></expr></argument>, <argument><expr><name>b11</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>cburv</name> <operator>+</operator> <name><name>rnd_scratch</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>y</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><name>x</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>diff</name> <operator>=</operator> <operator>(</operator><name>u</name> <operator>&amp;</operator> <name>mask</name><operator>)</operator> <operator>-</operator> <name>rnd</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>yuv1</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <call><name>av_clip_pixel</name><argument_list>(<argument><expr><name>uv_offset</name> <operator>+</operator> <operator>(</operator><name>u</name> <operator>&gt;&gt;</operator> <name>sh</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rnd_scratch</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[ <expr><operator>(</operator><name>y</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr>]</index><index>[<expr><name>x</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+=</operator> <operator>(</operator><name>diff</name> <operator>*</operator> <literal type="number">7</literal> <operator>+</operator> <literal type="number">8</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rnd_scratch</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><operator>!</operator><operator>(</operator><name>y</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr>]</index><index>[<expr><name>x</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+=</operator> <operator>(</operator><name>diff</name> <operator>*</operator> <literal type="number">3</literal> <operator>+</operator> <literal type="number">8</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rnd_scratch</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><operator>!</operator><operator>(</operator><name>y</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr>]</index><index>[<expr><name>x</name> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name> <operator>+=</operator> <operator>(</operator><name>diff</name> <operator>*</operator> <literal type="number">5</literal> <operator>+</operator> <literal type="number">8</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rnd_scratch</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><operator>!</operator><operator>(</operator><name>y</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr>]</index><index>[<expr><name>x</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+=</operator> <operator>(</operator><name>diff</name> <operator>*</operator> <literal type="number">1</literal> <operator>+</operator> <literal type="number">8</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rnd_scratch</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[ <expr><operator>(</operator><name>y</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr>]</index><index>[<expr><name>x</name> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>rnd</name></expr>;</expr_stmt>

<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>avg</name><argument_list>(<argument><expr><name>r00</name></expr></argument>, <argument><expr><name>r01</name></expr></argument>, <argument><expr><name>r10</name></expr></argument>, <argument><expr><name>r11</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>cburv</name> <operator>+</operator>

<call><name>avg</name><argument_list>(<argument><expr><name>g00</name></expr></argument>, <argument><expr><name>g01</name></expr></argument>, <argument><expr><name>g10</name></expr></argument>, <argument><expr><name>g11</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>cgv</name> <operator>+</operator>

<call><name>avg</name><argument_list>(<argument><expr><name>b00</name></expr></argument>, <argument><expr><name>b01</name></expr></argument>, <argument><expr><name>b10</name></expr></argument>, <argument><expr><name>b11</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>cbv</name> <operator>+</operator> <name><name>rnd_scratch</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>y</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><name>x</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>diff</name> <operator>=</operator> <operator>(</operator><name>v</name> <operator>&amp;</operator> <name>mask</name><operator>)</operator> <operator>-</operator> <name>rnd</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>yuv2</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <call><name>av_clip_pixel</name><argument_list>(<argument><expr><name>uv_offset</name> <operator>+</operator> <operator>(</operator><name>v</name> <operator>&gt;&gt;</operator> <name>sh</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rnd_scratch</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[ <expr><operator>(</operator><name>y</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr>]</index><index>[<expr><name>x</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+=</operator> <operator>(</operator><name>diff</name> <operator>*</operator> <literal type="number">7</literal> <operator>+</operator> <literal type="number">8</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rnd_scratch</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><operator>!</operator><operator>(</operator><name>y</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr>]</index><index>[<expr><name>x</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+=</operator> <operator>(</operator><name>diff</name> <operator>*</operator> <literal type="number">3</literal> <operator>+</operator> <literal type="number">8</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rnd_scratch</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><operator>!</operator><operator>(</operator><name>y</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr>]</index><index>[<expr><name>x</name> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name> <operator>+=</operator> <operator>(</operator><name>diff</name> <operator>*</operator> <literal type="number">5</literal> <operator>+</operator> <literal type="number">8</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rnd_scratch</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><operator>!</operator><operator>(</operator><name>y</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr>]</index><index>[<expr><name>x</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+=</operator> <operator>(</operator><name>diff</name> <operator>*</operator> <literal type="number">1</literal> <operator>+</operator> <literal type="number">8</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rnd_scratch</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[ <expr><operator>(</operator><name>y</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr>]</index><index>[<expr><name>x</name> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>rnd</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>yuv0</name> <operator>+=</operator> <name>s0</name> <operator>*</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>SS_H</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>yuv1</name> <operator>+=</operator> <name><name>yuv_stride</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>pixel</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<expr_stmt><expr><name>yuv2</name> <operator>+=</operator> <name><name>yuv_stride</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>pixel</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<expr_stmt><expr><name>rgb0</name> <operator>+=</operator> <name>s</name> <operator>*</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>SS_H</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>rgb1</name> <operator>+=</operator> <name>s</name> <operator>*</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>SS_H</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>rgb2</name> <operator>+=</operator> <name>s</name> <operator>*</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>SS_H</name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>IN_BIT_DEPTH</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>OUT_BIT_DEPTH</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OUT_BIT_DEPTH</name></cpp:macro> <cpp:value>BIT_DEPTH</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IN_BIT_DEPTH</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"colorspacedsp_yuv2yuv_template.c"</cpp:file></cpp:include>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>IN_BIT_DEPTH</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IN_BIT_DEPTH</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"colorspacedsp_yuv2yuv_template.c"</cpp:file></cpp:include>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>IN_BIT_DEPTH</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IN_BIT_DEPTH</name></cpp:macro> <cpp:value>12</cpp:value></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"colorspacedsp_yuv2yuv_template.c"</cpp:file></cpp:include>

</unit>
