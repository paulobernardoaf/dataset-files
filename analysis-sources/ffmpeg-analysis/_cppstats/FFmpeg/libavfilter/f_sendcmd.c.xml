<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavfilter\f_sendcmd.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avstring.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/bprint.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/eval.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/file.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/opt.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/parseutils.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avfilter.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"audio.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"video.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COMMAND_FLAG_ENTER</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COMMAND_FLAG_LEAVE</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COMMAND_FLAG_EXPR</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>var_names</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="string">"N"</literal></expr>, 

<expr><literal type="string">"T"</literal></expr>, 

<expr><literal type="string">"POS"</literal></expr>, 

<expr><literal type="string">"PTS"</literal></expr>, 

<expr><literal type="string">"TS"</literal></expr>, 

<expr><literal type="string">"TE"</literal></expr>, 

<expr><literal type="string">"TI"</literal></expr>, 

<expr><name>NULL</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<enum>enum <name>var_name</name> <block>{

<decl><name>VAR_N</name></decl>,

<decl><name>VAR_T</name></decl>,

<decl><name>VAR_POS</name></decl>,

<decl><name>VAR_PTS</name></decl>,

<decl><name>VAR_TS</name></decl>,

<decl><name>VAR_TE</name></decl>,

<decl><name>VAR_TI</name></decl>,

<decl><name>VAR_VARS_NB</name></decl>

}</block>;</enum>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>char</name> <modifier>*</modifier></type><name>make_command_flags_str</name><parameter_list>(<parameter><decl><type><name>AVBPrint</name> <modifier>*</modifier></type><name>pbuf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier> <specifier>const</specifier></type> <name><name>flag_strings</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="string">"enter"</literal></expr>, <expr><literal type="string">"leave"</literal></expr>, <expr><literal type="string">"expr"</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>is_first</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_bprint_init</name><argument_list>(<argument><expr><name>pbuf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>AV_BPRINT_SIZE_AUTOMATIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>flag_strings</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>&lt;&lt;</operator><name>i</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>is_first</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_bprint_chars</name><argument_list>(<argument><expr><name>pbuf</name></expr></argument>, <argument><expr><literal type="char">'+'</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_bprintf</name><argument_list>(<argument><expr><name>pbuf</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>flag_strings</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>is_first</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><name><name>pbuf</name><operator>-&gt;</operator><name>str</name></name></expr>;</return>

</block_content>}</block></function>

<typedef>typedef <type><struct>struct <name>Command</name> <block>{

<decl_stmt><decl><type><name>int</name></type> <name>flags</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>target</name></decl>, <modifier>*</modifier><name>command</name>, <modifier>*</modifier><name>arg</name>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>index</name></decl>;</decl_stmt>

}</block></struct></type> <name>Command</name>;</typedef>

<typedef>typedef <type><struct>struct <name>Interval</name> <block>{

<decl_stmt><decl><type><name>int64_t</name></type> <name>start_ts</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int64_t</name></type> <name>end_ts</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>index</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>Command</name> <modifier>*</modifier></type><name>commands</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>nb_commands</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>enabled</name></decl>;</decl_stmt> 

}</block></struct></type> <name>Interval</name>;</typedef>

<typedef>typedef <type><struct>struct <name>SendCmdContext</name> <block>{

<decl_stmt><decl><type><specifier>const</specifier> <name>AVClass</name> <modifier>*</modifier></type><name>class</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Interval</name> <modifier>*</modifier></type><name>intervals</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>nb_intervals</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>commands_filename</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>commands_str</name></decl>;</decl_stmt>

}</block></struct></type> <name>SendCmdContext</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OFFSET</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>offsetof(SendCmdContext, x)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLAGS</name></cpp:macro> <cpp:value>AV_OPT_FLAG_FILTERING_PARAM | AV_OPT_FLAG_AUDIO_PARAM | AV_OPT_FLAG_VIDEO_PARAM</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVOption</name></type> <name><name>options</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><literal type="string">"commands"</literal></expr>, <expr><literal type="string">"set commands"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>commands_str</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_STRING</name></expr>, <expr><block>{<expr><operator>.</operator><name>str</name> <operator>=</operator> <name>NULL</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"c"</literal></expr>, <expr><literal type="string">"set commands"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>commands_str</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_STRING</name></expr>, <expr><block>{<expr><operator>.</operator><name>str</name> <operator>=</operator> <name>NULL</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"filename"</literal></expr>, <expr><literal type="string">"set commands file"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>commands_filename</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_STRING</name></expr>, <expr><block>{<expr><operator>.</operator><name>str</name> <operator>=</operator> <name>NULL</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"f"</literal></expr>, <expr><literal type="string">"set commands file"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>commands_filename</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_STRING</name></expr>, <expr><block>{<expr><operator>.</operator><name>str</name> <operator>=</operator> <name>NULL</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SPACES</name></cpp:macro> <cpp:value>" \f\t\n\r"</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type> <name>skip_comments</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<while>while <condition>(<expr><operator>*</operator><operator>*</operator><name>buf</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>buf</name> <operator>+=</operator> <call><name>strspn</name><argument_list>(<argument><expr><operator>*</operator><name>buf</name></expr></argument>, <argument><expr><name>SPACES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><operator>*</operator><name>buf</name> <operator>!=</operator> <literal type="char">'#'</literal></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>buf</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>buf</name> <operator>+=</operator> <call><name>strcspn</name><argument_list>(<argument><expr><operator>*</operator><name>buf</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><operator>*</operator><name>buf</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>buf</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></while>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COMMAND_DELIMS</name></cpp:macro> <cpp:value>" \f\t\n\r,;"</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>int</name></type> <name>parse_command</name><parameter_list>(<parameter><decl><type><name>Command</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>cmd_count</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>interval_count</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>log_ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>Command</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cmd</name><operator>-&gt;</operator><name>index</name></name> <operator>=</operator> <name>cmd_count</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>buf</name> <operator>+=</operator> <call><name>strspn</name><argument_list>(<argument><expr><operator>*</operator><name>buf</name></expr></argument>, <argument><expr><name>SPACES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><operator>*</operator><name>buf</name> <operator>==</operator> <literal type="char">'['</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>buf</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt> 

<while>while <condition>(<expr><operator>*</operator><operator>*</operator><name>buf</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><call><name>strcspn</name><argument_list>(<argument><expr><operator>*</operator><name>buf</name></expr></argument>, <argument><expr><literal type="string">"|+]"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strncmp</name><argument_list>(<argument><expr><operator>*</operator><name>buf</name></expr></argument>, <argument><expr><literal type="string">"enter"</literal></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><literal type="string">"enter"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>cmd</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>COMMAND_FLAG_ENTER</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strncmp</name><argument_list>(<argument><expr><operator>*</operator><name>buf</name></expr></argument>, <argument><expr><literal type="string">"leave"</literal></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><literal type="string">"leave"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>cmd</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>COMMAND_FLAG_LEAVE</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strncmp</name><argument_list>(<argument><expr><operator>*</operator><name>buf</name></expr></argument>, <argument><expr><literal type="string">"expr"</literal></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><literal type="string">"expr"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>cmd</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>COMMAND_FLAG_EXPR</name></expr>;</expr_stmt></block_content></block></if>

<else>else <block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>flag_buf</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_strlcpy</name><argument_list>(<argument><expr><name>flag_buf</name></expr></argument>, <argument><expr><operator>*</operator><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>flag_buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>log_ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"Unknown flag '%s' in interval #%d, command #%d\n"</literal></expr></argument>,

<argument><expr><name>flag_buf</name></expr></argument>, <argument><expr><name>interval_count</name></expr></argument>, <argument><expr><name>cmd_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><operator>*</operator><name>buf</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><operator>*</operator><name>buf</name> <operator>==</operator> <literal type="char">']'</literal></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strspn</name><argument_list>(<argument><expr><operator>*</operator><name>buf</name></expr></argument>, <argument><expr><literal type="string">"+|"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>log_ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"Invalid flags char '%c' in interval #%d, command #%d\n"</literal></expr></argument>,

<argument><expr><operator>*</operator><operator>*</operator><name>buf</name></expr></argument>, <argument><expr><name>interval_count</name></expr></argument>, <argument><expr><name>cmd_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><operator>*</operator><name>buf</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>buf</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><operator>*</operator><operator>*</operator><name>buf</name> <operator>!=</operator> <literal type="char">']'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>log_ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"Missing flag terminator or extraneous data found at the end of flags "</literal>

<literal type="string">"in interval #%d, command #%d\n"</literal></expr></argument>, <argument><expr><name>interval_count</name></expr></argument>, <argument><expr><name>cmd_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>buf</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt> 

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>cmd</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <name>COMMAND_FLAG_ENTER</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><operator>*</operator><name>buf</name> <operator>+=</operator> <call><name>strspn</name><argument_list>(<argument><expr><operator>*</operator><name>buf</name></expr></argument>, <argument><expr><name>SPACES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cmd</name><operator>-&gt;</operator><name>target</name></name> <operator>=</operator> <call><name>av_get_token</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>COMMAND_DELIMS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>cmd</name><operator>-&gt;</operator><name>target</name></name> <operator>||</operator> <operator>!</operator><name><name>cmd</name><operator>-&gt;</operator><name>target</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>log_ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"No target specified in interval #%d, command #%d\n"</literal></expr></argument>,

<argument><expr><name>interval_count</name></expr></argument>, <argument><expr><name>cmd_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>buf</name> <operator>+=</operator> <call><name>strspn</name><argument_list>(<argument><expr><operator>*</operator><name>buf</name></expr></argument>, <argument><expr><name>SPACES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cmd</name><operator>-&gt;</operator><name>command</name></name> <operator>=</operator> <call><name>av_get_token</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>COMMAND_DELIMS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>cmd</name><operator>-&gt;</operator><name>command</name></name> <operator>||</operator> <operator>!</operator><name><name>cmd</name><operator>-&gt;</operator><name>command</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>log_ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"No command specified in interval #%d, command #%d\n"</literal></expr></argument>,

<argument><expr><name>interval_count</name></expr></argument>, <argument><expr><name>cmd_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>buf</name> <operator>+=</operator> <call><name>strspn</name><argument_list>(<argument><expr><operator>*</operator><name>buf</name></expr></argument>, <argument><expr><name>SPACES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cmd</name><operator>-&gt;</operator><name>arg</name></name> <operator>=</operator> <call><name>av_get_token</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>COMMAND_DELIMS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

<label><name>fail</name>:</label>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cmd</name><operator>-&gt;</operator><name>target</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cmd</name><operator>-&gt;</operator><name>command</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cmd</name><operator>-&gt;</operator><name>arg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>parse_commands</name><parameter_list>(<parameter><decl><type><name>Command</name> <modifier>*</modifier><modifier>*</modifier></type><name>cmds</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>nb_cmds</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>interval_count</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>log_ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>cmd_count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>, <decl><type ref="prev"/><name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVBPrint</name></type> <name>pbuf</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>cmds</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>nb_cmds</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>*</operator><operator>*</operator><name>buf</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>Command</name></type> <name>cmd</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>parse_command</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cmd</name></expr></argument>, <argument><expr><name>cmd_count</name></expr></argument>, <argument><expr><name>interval_count</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>log_ctx</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>cmd_count</name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>nb_cmds</name> <operator>==</operator> <name>n</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">2</literal><operator>*</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><operator>*</operator><name>cmds</name> <operator>=</operator> <call><name>av_realloc_f</name><argument_list>(<argument><expr><operator>*</operator><name>cmds</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><literal type="number">2</literal><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>Command</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>cmds</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>log_ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"Could not (re)allocate command array\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>cmds</name><operator>)</operator><index>[<expr><operator>(</operator><operator>*</operator><name>nb_cmds</name><operator>)</operator><operator>++</operator></expr>]</index> <operator>=</operator> <name>cmd</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>buf</name> <operator>+=</operator> <call><name>strspn</name><argument_list>(<argument><expr><operator>*</operator><name>buf</name></expr></argument>, <argument><expr><name>SPACES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><operator>*</operator><name>buf</name> <operator>&amp;&amp;</operator> <operator>*</operator><operator>*</operator><name>buf</name> <operator>!=</operator> <literal type="char">';'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><operator>*</operator><name>buf</name> <operator>!=</operator> <literal type="char">','</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>log_ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"Missing separator or extraneous data found at the end of "</literal>

<literal type="string">"interval #%d, in command #%d\n"</literal></expr></argument>,

<argument><expr><name>interval_count</name></expr></argument>, <argument><expr><name>cmd_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>log_ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"Command was parsed as: flags:[%s] target:%s command:%s arg:%s\n"</literal></expr></argument>,

<argument><expr><call><name>make_command_flags_str</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pbuf</name></expr></argument>, <argument><expr><name><name>cmd</name><operator>.</operator><name>flags</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>cmd</name><operator>.</operator><name>target</name></name></expr></argument>, <argument><expr><name><name>cmd</name><operator>.</operator><name>command</name></name></expr></argument>, <argument><expr><name><name>cmd</name><operator>.</operator><name>arg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><operator>*</operator><name>buf</name> <operator>==</operator> <literal type="char">';'</literal></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><operator>*</operator><name>buf</name> <operator>==</operator> <literal type="char">','</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>buf</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></while>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DELIMS</name></cpp:macro> <cpp:value>" \f\t\n\r,;"</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>int</name></type> <name>parse_interval</name><parameter_list>(<parameter><decl><type><name>Interval</name> <modifier>*</modifier></type><name>interval</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>interval_count</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>log_ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>intervalstr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>buf</name> <operator>+=</operator> <call><name>strspn</name><argument_list>(<argument><expr><operator>*</operator><name>buf</name></expr></argument>, <argument><expr><name>SPACES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><operator>*</operator><name>buf</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>interval</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>Interval</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>interval</name><operator>-&gt;</operator><name>index</name></name> <operator>=</operator> <name>interval_count</name></expr>;</expr_stmt>

<expr_stmt><expr><name>intervalstr</name> <operator>=</operator> <call><name>av_get_token</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>DELIMS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>intervalstr</name> <operator>&amp;&amp;</operator> <name><name>intervalstr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>start</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>end</name></decl>;</decl_stmt>

<expr_stmt><expr><name>start</name> <operator>=</operator> <call><name>av_strtok</name><argument_list>(<argument><expr><name>intervalstr</name></expr></argument>, <argument><expr><literal type="string">"-"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>start</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>log_ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"Invalid interval specification '%s' in interval #%d\n"</literal></expr></argument>,

<argument><expr><name>intervalstr</name></expr></argument>, <argument><expr><name>interval_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>end</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>av_parse_time</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>interval</name><operator>-&gt;</operator><name>start_ts</name></name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>log_ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"Invalid start time specification '%s' in interval #%d\n"</literal></expr></argument>,

<argument><expr><name>start</name></expr></argument>, <argument><expr><name>interval_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>end</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>end</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>av_parse_time</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>interval</name><operator>-&gt;</operator><name>end_ts</name></name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>log_ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"Invalid end time specification '%s' in interval #%d\n"</literal></expr></argument>,

<argument><expr><name>end</name></expr></argument>, <argument><expr><name>interval_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>end</name>;</goto>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>interval</name><operator>-&gt;</operator><name>end_ts</name></name> <operator>=</operator> <name>INT64_MAX</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>interval</name><operator>-&gt;</operator><name>end_ts</name></name> <operator>&lt;</operator> <name><name>interval</name><operator>-&gt;</operator><name>start_ts</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>log_ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"Invalid end time '%s' in interval #%d: "</literal>

<literal type="string">"cannot be lesser than start time '%s'\n"</literal></expr></argument>,

<argument><expr><name>end</name></expr></argument>, <argument><expr><name>interval_count</name></expr></argument>, <argument><expr><name>start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>end</name>;</goto>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>log_ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"No interval specified for interval #%d\n"</literal></expr></argument>, <argument><expr><name>interval_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>end</name>;</goto>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>parse_commands</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>interval</name><operator>-&gt;</operator><name>commands</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>interval</name><operator>-&gt;</operator><name>nb_commands</name></name></expr></argument>,

<argument><expr><name>interval_count</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>log_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>end</name>:</label>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>intervalstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>parse_intervals</name><parameter_list>(<parameter><decl><type><name>Interval</name> <modifier>*</modifier><modifier>*</modifier></type><name>intervals</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>nb_intervals</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>log_ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>interval_count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>, <decl><type ref="prev"/><name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>intervals</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>nb_intervals</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>buf</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>Interval</name></type> <name>interval</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>skip_comments</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><operator>*</operator><name>buf</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>parse_interval</name><argument_list>(<argument><expr><operator>&amp;</operator><name>interval</name></expr></argument>, <argument><expr><name>interval_count</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name>log_ctx</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>buf</name> <operator>+=</operator> <call><name>strspn</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>SPACES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>buf</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>buf</name> <operator>!=</operator> <literal type="char">';'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>log_ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"Missing terminator or extraneous data found at the end of interval #%d\n"</literal></expr></argument>,

<argument><expr><name>interval_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>buf</name><operator>++</operator></expr>;</expr_stmt> 

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>interval_count</name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>nb_intervals</name> <operator>==</operator> <name>n</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">2</literal><operator>*</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><operator>*</operator><name>intervals</name> <operator>=</operator> <call><name>av_realloc_f</name><argument_list>(<argument><expr><operator>*</operator><name>intervals</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><literal type="number">2</literal><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>Interval</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>intervals</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>log_ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"Could not (re)allocate intervals array\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>intervals</name><operator>)</operator><index>[<expr><operator>(</operator><operator>*</operator><name>nb_intervals</name><operator>)</operator><operator>++</operator></expr>]</index> <operator>=</operator> <name>interval</name></expr>;</expr_stmt>

</block_content>}</block></while>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>cmp_intervals</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>Interval</name> <modifier>*</modifier></type><name>i1</name> <init>= <expr><name>a</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>Interval</name> <modifier>*</modifier></type><name>i2</name> <init>= <expr><name>b</name></expr></init></decl>;</decl_stmt>

<return>return <expr><literal type="number">2</literal> <operator>*</operator> <call><name>FFDIFFSIGN</name><argument_list>(<argument><expr><name><name>i1</name><operator>-&gt;</operator><name>start_ts</name></name></expr></argument>, <argument><expr><name><name>i2</name><operator>-&gt;</operator><name>start_ts</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>FFDIFFSIGN</name><argument_list>(<argument><expr><name><name>i1</name><operator>-&gt;</operator><name>index</name></name></expr></argument>, <argument><expr><name><name>i2</name><operator>-&gt;</operator><name>index</name></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>init</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>SendCmdContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>!</operator><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>commands_filename</name></name> <operator>+</operator> <operator>!</operator><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>commands_str</name></name><operator>)</operator> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"One and only one of the filename or commands options must be specified\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>commands_filename</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>file_buf</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>file_bufsize</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>av_file_map</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>commands_filename</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>file_buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>file_bufsize</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>av_malloc</name><argument_list>(<argument><expr><name>file_bufsize</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>buf</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_file_unmap</name><argument_list>(<argument><expr><name>file_buf</name></expr></argument>, <argument><expr><name>file_bufsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>file_buf</name></expr></argument>, <argument><expr><name>file_bufsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><index>[<expr><name>file_bufsize</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_file_unmap</name><argument_list>(<argument><expr><name>file_buf</name></expr></argument>, <argument><expr><name>file_bufsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>commands_str</name></name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>parse_intervals</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>intervals</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>nb_intervals</name></name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>commands_str</name></name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>nb_intervals</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"No commands were specified\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>qsort</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>intervals</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>nb_intervals</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>Interval</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>cmp_intervals</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Parsed commands:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>nb_intervals</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>AVBPrint</name></type> <name>pbuf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Interval</name> <modifier>*</modifier></type><name>interval</name> <init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>intervals</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_VERBOSE</name></expr></argument>, <argument><expr><literal type="string">"start_time:%f end_time:%f index:%d\n"</literal></expr></argument>,

<argument><expr><operator>(</operator><name>double</name><operator>)</operator><name><name>interval</name><operator>-&gt;</operator><name>start_ts</name></name><operator>/</operator><literal type="number">1000000</literal></expr></argument>, <argument><expr><operator>(</operator><name>double</name><operator>)</operator><name><name>interval</name><operator>-&gt;</operator><name>end_ts</name></name><operator>/</operator><literal type="number">1000000</literal></expr></argument>, <argument><expr><name><name>interval</name><operator>-&gt;</operator><name>index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>interval</name><operator>-&gt;</operator><name>nb_commands</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>Command</name> <modifier>*</modifier></type><name>cmd</name> <init>= <expr><operator>&amp;</operator><name><name>interval</name><operator>-&gt;</operator><name>commands</name><index>[<expr><name>j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_VERBOSE</name></expr></argument>,

<argument><expr><literal type="string">" [%s] target:%s command:%s arg:%s index:%d\n"</literal></expr></argument>,

<argument><expr><call><name>make_command_flags_str</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pbuf</name></expr></argument>, <argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>flags</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>target</name></name></expr></argument>, <argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>command</name></name></expr></argument>, <argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>arg</name></name></expr></argument>, <argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>void</name></type> <name>uninit</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>SendCmdContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>nb_intervals</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>Interval</name> <modifier>*</modifier></type><name>interval</name> <init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>intervals</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>interval</name><operator>-&gt;</operator><name>nb_commands</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>Command</name> <modifier>*</modifier></type><name>cmd</name> <init>= <expr><operator>&amp;</operator><name><name>interval</name><operator>-&gt;</operator><name>commands</name><index>[<expr><name>j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cmd</name><operator>-&gt;</operator><name>target</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cmd</name><operator>-&gt;</operator><name>command</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cmd</name><operator>-&gt;</operator><name>arg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>interval</name><operator>-&gt;</operator><name>commands</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>intervals</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TS2D</name><parameter_list>(<parameter><type><name>ts</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((ts) == AV_NOPTS_VALUE ? NAN : (double)(ts))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TS2T</name><parameter_list>(<parameter><type><name>ts</name></type></parameter>, <parameter><type><name>tb</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((ts) == AV_NOPTS_VALUE ? NAN : (double)(ts)*av_q2d(tb))</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>int</name></type> <name>filter_frame</name><parameter_list>(<parameter><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>inlink</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>ref</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>inlink</name><operator>-&gt;</operator><name>dst</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SendCmdContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>ts</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ref</name><operator>-&gt;</operator><name>pts</name></name> <operator>==</operator> <name>AV_NOPTS_VALUE</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>end</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ts</name> <operator>=</operator> <call><name>av_rescale_q</name><argument_list>(<argument><expr><name><name>ref</name><operator>-&gt;</operator><name>pts</name></name></expr></argument>, <argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>time_base</name></name></expr></argument>, <argument><expr><name>AV_TIME_BASE_Q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WITHIN_INTERVAL</name><parameter_list>(<parameter><type><name>ts</name></type></parameter>, <parameter><type><name>start_ts</name></type></parameter>, <parameter><type><name>end_ts</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((ts) &gt;= (start_ts) &amp;&amp; (ts) &lt; (end_ts))</cpp:value></cpp:define>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>nb_intervals</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>Interval</name> <modifier>*</modifier></type><name>interval</name> <init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>intervals</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>flags</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>interval</name><operator>-&gt;</operator><name>enabled</name></name> <operator>&amp;&amp;</operator> <call><name>WITHIN_INTERVAL</name><argument_list>(<argument><expr><name>ts</name></expr></argument>, <argument><expr><name><name>interval</name><operator>-&gt;</operator><name>start_ts</name></name></expr></argument>, <argument><expr><name><name>interval</name><operator>-&gt;</operator><name>end_ts</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>flags</name> <operator>+=</operator> <name>COMMAND_FLAG_ENTER</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>interval</name><operator>-&gt;</operator><name>enabled</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>interval</name><operator>-&gt;</operator><name>enabled</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>WITHIN_INTERVAL</name><argument_list>(<argument><expr><name>ts</name></expr></argument>, <argument><expr><name><name>interval</name><operator>-&gt;</operator><name>start_ts</name></name></expr></argument>, <argument><expr><name><name>interval</name><operator>-&gt;</operator><name>end_ts</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>flags</name> <operator>+=</operator> <name>COMMAND_FLAG_LEAVE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>interval</name><operator>-&gt;</operator><name>enabled</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>interval</name><operator>-&gt;</operator><name>enabled</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>flags</name> <operator>+=</operator> <name>COMMAND_FLAG_EXPR</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>AVBPrint</name></type> <name>pbuf</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_VERBOSE</name></expr></argument>,

<argument><expr><literal type="string">"[%s] interval #%d start_ts:%f end_ts:%f ts:%f\n"</literal></expr></argument>,

<argument><expr><call><name>make_command_flags_str</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pbuf</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>interval</name><operator>-&gt;</operator><name>index</name></name></expr></argument>,

<argument><expr><operator>(</operator><name>double</name><operator>)</operator><name><name>interval</name><operator>-&gt;</operator><name>start_ts</name></name><operator>/</operator><literal type="number">1000000</literal></expr></argument>, <argument><expr><operator>(</operator><name>double</name><operator>)</operator><name><name>interval</name><operator>-&gt;</operator><name>end_ts</name></name><operator>/</operator><literal type="number">1000000</literal></expr></argument>,

<argument><expr><operator>(</operator><name>double</name><operator>)</operator><name>ts</name><operator>/</operator><literal type="number">1000000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>flags</name> <operator>&amp;&amp;</operator> <name>j</name> <operator>&lt;</operator> <name><name>interval</name><operator>-&gt;</operator><name>nb_commands</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>Command</name> <modifier>*</modifier></type><name>cmd</name> <init>= <expr><operator>&amp;</operator><name><name>interval</name><operator>-&gt;</operator><name>commands</name><index>[<expr><name>j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>cmd_arg</name> <init>= <expr><name><name>cmd</name><operator>-&gt;</operator><name>arg</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cmd</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>flags</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>cmd</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>COMMAND_FLAG_EXPR</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>double</name></type> <name><name>var_values</name><index>[<expr><name>VAR_VARS_NB</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name>res</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>start</name> <init>= <expr><call><name>TS2T</name><argument_list>(<argument><expr><name><name>interval</name><operator>-&gt;</operator><name>start_ts</name></name></expr></argument>, <argument><expr><name>AV_TIME_BASE_Q</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>end</name> <init>= <expr><call><name>TS2T</name><argument_list>(<argument><expr><name><name>interval</name><operator>-&gt;</operator><name>end_ts</name></name></expr></argument>, <argument><expr><name>AV_TIME_BASE_Q</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>current</name> <init>= <expr><call><name>TS2T</name><argument_list>(<argument><expr><name><name>ref</name><operator>-&gt;</operator><name>pts</name></name></expr></argument>, <argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>time_base</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>var_values</name><index>[<expr><name>VAR_N</name></expr>]</index></name> <operator>=</operator> <name><name>inlink</name><operator>-&gt;</operator><name>frame_count_in</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>var_values</name><index>[<expr><name>VAR_POS</name></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><name><name>ref</name><operator>-&gt;</operator><name>pkt_pos</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr> ?</condition><then> <expr><name>NAN</name></expr> </then><else>: <expr><name><name>ref</name><operator>-&gt;</operator><name>pkt_pos</name></name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>var_values</name><index>[<expr><name>VAR_PTS</name></expr>]</index></name> <operator>=</operator> <call><name>TS2D</name><argument_list>(<argument><expr><name><name>ref</name><operator>-&gt;</operator><name>pts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>var_values</name><index>[<expr><name>VAR_T</name></expr>]</index></name> <operator>=</operator> <name>current</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>var_values</name><index>[<expr><name>VAR_TS</name></expr>]</index></name> <operator>=</operator> <name>start</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>var_values</name><index>[<expr><name>VAR_TE</name></expr>]</index></name> <operator>=</operator> <name>end</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>var_values</name><index>[<expr><name>VAR_TI</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>current</name> <operator>-</operator> <name>start</name><operator>)</operator> <operator>/</operator> <operator>(</operator><name>end</name> <operator>-</operator> <name>start</name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>av_expr_parse_and_eval</name><argument_list>(<argument><expr><operator>&amp;</operator><name>res</name></expr></argument>, <argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>arg</name></name></expr></argument>, <argument><expr><name>var_names</name></expr></argument>, <argument><expr><name>var_values</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid expression '%s' for command argument.\n"</literal></expr></argument>, <argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>arg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>cmd_arg</name> <operator>=</operator> <call><name>av_asprintf</name><argument_list>(<argument><expr><literal type="string">"%g"</literal></expr></argument>, <argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>cmd_arg</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_VERBOSE</name></expr></argument>,

<argument><expr><literal type="string">"Processing command #%d target:%s command:%s arg:%s\n"</literal></expr></argument>,

<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>index</name></name></expr></argument>, <argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>target</name></name></expr></argument>, <argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>command</name></name></expr></argument>, <argument><expr><name>cmd_arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>avfilter_graph_send_command</name><argument_list>(<argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>graph</name></name></expr></argument>,

<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>target</name></name></expr></argument>, <argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>command</name></name></expr></argument>, <argument><expr><name>cmd_arg</name></expr></argument>,

<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>,

<argument><expr><name>AVFILTER_CMD_FLAG_ONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_VERBOSE</name></expr></argument>,

<argument><expr><literal type="string">"Command reply for command #%d: ret:%s res:%s\n"</literal></expr></argument>,

<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>index</name></name></expr></argument>, <argument><expr><call><name>av_err2str</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cmd</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>COMMAND_FLAG_EXPR</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cmd_arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<label><name>end</name>:</label>

<switch>switch <condition>(<expr><name><name>inlink</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>AVMEDIA_TYPE_VIDEO</name></expr>:</case>

<case>case <expr><name>AVMEDIA_TYPE_AUDIO</name></expr>:</case>

<return>return <expr><call><name>ff_filter_frame</name><argument_list>(<argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>dst</name><operator>-&gt;</operator><name>outputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>ref</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></switch>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOSYS</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_SENDCMD_FILTER</name></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sendcmd_options</name></cpp:macro> <cpp:value>options</cpp:value></cpp:define>

<expr_stmt><expr><call><name>AVFILTER_DEFINE_CLASS</name><argument_list>(<argument><expr><name>sendcmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVFilterPad</name></type> <name><name>sendcmd_inputs</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"default"</literal></expr>,

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,

<expr><operator>.</operator><name>filter_frame</name> <operator>=</operator> <name>filter_frame</name></expr>,

}</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVFilterPad</name></type> <name><name>sendcmd_outputs</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"default"</literal></expr>,

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,

}</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFilter</name></type> <name>ff_vf_sendcmd</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"sendcmd"</literal></expr>,

<expr><operator>.</operator><name>description</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"Send commands to filters."</literal></expr></argument>)</argument_list></call></expr>,

<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>init</name></expr>,

<expr><operator>.</operator><name>uninit</name> <operator>=</operator> <name>uninit</name></expr>,

<expr><operator>.</operator><name>priv_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SendCmdContext</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><operator>.</operator><name>inputs</name> <operator>=</operator> <name>sendcmd_inputs</name></expr>,

<expr><operator>.</operator><name>outputs</name> <operator>=</operator> <name>sendcmd_outputs</name></expr>,

<expr><operator>.</operator><name>priv_class</name> <operator>=</operator> <operator>&amp;</operator><name>sendcmd_class</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_ASENDCMD_FILTER</name></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>asendcmd_options</name></cpp:macro> <cpp:value>options</cpp:value></cpp:define>

<expr_stmt><expr><call><name>AVFILTER_DEFINE_CLASS</name><argument_list>(<argument><expr><name>asendcmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVFilterPad</name></type> <name><name>asendcmd_inputs</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"default"</literal></expr>,

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_AUDIO</name></expr>,

<expr><operator>.</operator><name>filter_frame</name> <operator>=</operator> <name>filter_frame</name></expr>,

}</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVFilterPad</name></type> <name><name>asendcmd_outputs</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"default"</literal></expr>,

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_AUDIO</name></expr>,

}</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFilter</name></type> <name>ff_af_asendcmd</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"asendcmd"</literal></expr>,

<expr><operator>.</operator><name>description</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"Send commands to filters."</literal></expr></argument>)</argument_list></call></expr>,

<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>init</name></expr>,

<expr><operator>.</operator><name>uninit</name> <operator>=</operator> <name>uninit</name></expr>,

<expr><operator>.</operator><name>priv_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SendCmdContext</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><operator>.</operator><name>inputs</name> <operator>=</operator> <name>asendcmd_inputs</name></expr>,

<expr><operator>.</operator><name>outputs</name> <operator>=</operator> <name>asendcmd_outputs</name></expr>,

<expr><operator>.</operator><name>priv_class</name> <operator>=</operator> <operator>&amp;</operator><name>asendcmd_class</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
