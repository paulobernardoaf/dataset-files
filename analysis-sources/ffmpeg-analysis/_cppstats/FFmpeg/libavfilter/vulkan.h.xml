<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavfilter\vulkan.h"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avfilter.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/pixdesc.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/bprint.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/hwcontext.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/hwcontext_vulkan.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INDENT</name><parameter_list>(<parameter><type><name>N</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>INDENT_##N</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INDENT_0</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INDENT_1</name></cpp:macro> <cpp:value>INDENT_0 " "</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INDENT_2</name></cpp:macro> <cpp:value>INDENT_1 INDENT_1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INDENT_3</name></cpp:macro> <cpp:value>INDENT_2 INDENT_1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INDENT_4</name></cpp:macro> <cpp:value>INDENT_3 INDENT_1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INDENT_5</name></cpp:macro> <cpp:value>INDENT_4 INDENT_1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INDENT_6</name></cpp:macro> <cpp:value>INDENT_5 INDENT_1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>C</name><parameter_list>(<parameter><type><name>N</name></type></parameter>, <parameter><type><name>S</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>INDENT(N) #S "\n"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLSLC</name><parameter_list>(<parameter><type><name>N</name></type></parameter>, <parameter><type><name>S</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>av_bprintf(&amp;shd-&gt;src, C(N, S))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLSLA</name><parameter_list>(<parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>av_bprintf(&amp;shd-&gt;src, __VA_ARGS__)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLSLF</name><parameter_list>(<parameter><type><name>N</name></type></parameter>, <parameter><type><name>S</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>av_bprintf(&amp;shd-&gt;src, C(N, S), __VA_ARGS__)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLSLD</name><parameter_list>(<parameter><type><name>D</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>GLSLC(0, ); av_bprint_append_data(&amp;shd-&gt;src, D, strlen(D)); GLSLC(0, )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RET</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { if ((err = (x)) &lt; 0) goto fail; } while (0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DUP_SAMPLER_ARRAY4</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(VkSampler []){ x, x, x, x, }</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <name>SPIRVShader</name> <block>{

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>AVBPrint</name></type> <name>src</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>local_size</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>VkPipelineShaderStageCreateInfo</name></type> <name>shader</name></decl>;</decl_stmt>

}</block></struct></type> <name>SPIRVShader</name>;</typedef>

<typedef>typedef <type><struct>struct <name>VulkanDescriptorSetBinding</name> <block>{

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VkDescriptorType</name></type> <name>type</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>mem_layout</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>mem_quali</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>buf_content</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name>dimensions</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name>elems</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>VkShaderStageFlags</name></type> <name>stages</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>VkSampler</name> <modifier>*</modifier></type><name>samplers</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>updater</name></decl>;</decl_stmt> 

}</block></struct></type> <name>VulkanDescriptorSetBinding</name>;</typedef>

<typedef>typedef <type><struct>struct <name>FFVkBuffer</name> <block>{

<decl_stmt><decl><type><name>VkBuffer</name></type> <name>buf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VkDeviceMemory</name></type> <name>mem</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VkMemoryPropertyFlagBits</name></type> <name>flags</name></decl>;</decl_stmt>

}</block></struct></type> <name>FFVkBuffer</name>;</typedef>

<typedef>typedef <type><struct>struct <name>VulkanPipeline</name> <block>{

<decl_stmt><decl><type><name>VkPipelineBindPoint</name></type> <name>bind_point</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VkPipelineLayout</name></type> <name>pipeline_layout</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VkPipeline</name></type> <name>pipeline</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SPIRVShader</name> <modifier>*</modifier><modifier>*</modifier></type><name>shaders</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>shaders_num</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VkPushConstantRange</name> <modifier>*</modifier></type><name>push_consts</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>push_consts_num</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VkDescriptorSetLayout</name> <modifier>*</modifier></type><name>desc_layout</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VkDescriptorPool</name></type> <name>desc_pool</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VkDescriptorSet</name> <modifier>*</modifier></type><name>desc_set</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VkDescriptorUpdateTemplate</name> <modifier>*</modifier></type><name>desc_template</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>descriptor_sets_num</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>pool_size_desc_num</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VkDescriptorUpdateTemplateCreateInfo</name> <modifier>*</modifier></type><name>desc_template_info</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VkDescriptorPoolSize</name> <modifier>*</modifier></type><name>pool_size_desc</name></decl>;</decl_stmt>

}</block></struct></type> <name>VulkanPipeline</name>;</typedef>

<typedef>typedef <type><struct>struct <name>FFVkExecContext</name> <block>{

<decl_stmt><decl><type><name>VkCommandPool</name></type> <name>pool</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VkCommandBuffer</name></type> <name>buf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VkQueue</name></type> <name>queue</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VkFence</name></type> <name>fence</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VulkanPipeline</name> <modifier>*</modifier></type><name>bound_pl</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VkSemaphore</name> <modifier>*</modifier></type><name>sem_wait</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>sem_wait_alloc</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>sem_wait_cnt</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VkPipelineStageFlagBits</name> <modifier>*</modifier></type><name>sem_wait_dst</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>sem_wait_dst_alloc</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>VkSemaphore</name> <modifier>*</modifier></type><name>sem_sig</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>sem_sig_alloc</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>sem_sig_cnt</name></decl>;</decl_stmt>

}</block></struct></type> <name>FFVkExecContext</name>;</typedef>

<typedef>typedef <type><struct>struct <name>VulkanFilterContext</name> <block>{

<decl_stmt><decl><type><specifier>const</specifier> <name>AVClass</name> <modifier>*</modifier></type><name>class</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVBufferRef</name> <modifier>*</modifier></type><name>device_ref</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVBufferRef</name> <modifier>*</modifier></type><name>frames_ref</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>AVHWDeviceContext</name> <modifier>*</modifier></type><name>device</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVVulkanDeviceContext</name> <modifier>*</modifier></type><name>hwctx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>output_width</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>output_height</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>output_format</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>input_format</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VkSampler</name> <modifier>*</modifier><modifier>*</modifier></type><name>samplers</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>samplers_num</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>FFVkExecContext</name> <modifier>*</modifier><modifier>*</modifier></type><name>exec_ctx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>exec_ctx_num</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VulkanPipeline</name> <modifier>*</modifier><modifier>*</modifier></type><name>pipelines</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>pipelines_num</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>scratch</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>scratch_size</name></decl>;</decl_stmt>

}</block></struct></type> <name>VulkanFilterContext</name>;</typedef>

<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>VkComponentMapping</name></type> <name>ff_comp_identity_map</name></decl>;</decl_stmt>

<function_decl><type><name>int</name></type> <name>ff_vk_filter_query_formats</name> <parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>ff_vk_filter_init</name> <parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>ff_vk_filter_config_input</name> <parameter_list>(<parameter><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>inlink</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>ff_vk_filter_config_output</name> <parameter_list>(<parameter><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>outlink</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>ff_vk_filter_config_output_inplace</name><parameter_list>(<parameter><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>outlink</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>ff_vk_filter_uninit</name> <parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ff_vk_ret2str</name><parameter_list>(<parameter><decl><type><name>VkResult</name></type> <name>res</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>ff_vk_mt_is_np_rgb</name><parameter_list>(<parameter><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>pix_fmt</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ff_vk_shader_rep_fmt</name><parameter_list>(<parameter><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>pixfmt</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>VkSampler</name> <modifier>*</modifier></type><name>ff_vk_init_sampler</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>unnorm_coords</name></decl></parameter>,

<parameter><decl><type><name>VkFilter</name></type> <name>filt</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>ff_vk_create_imageview</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>VkImageView</name> <modifier>*</modifier></type><name>v</name></decl></parameter>, <parameter><decl><type><name>VkImage</name></type> <name>img</name></decl></parameter>,

<parameter><decl><type><name>VkFormat</name></type> <name>fmt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>VkComponentMapping</name></type> <name>map</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>ff_vk_destroy_imageview</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>VkImageView</name> <modifier>*</modifier></type><name>v</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>ff_vk_add_push_constant</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>VulkanPipeline</name> <modifier>*</modifier></type><name>pl</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>VkShaderStageFlagBits</name></type> <name>stage</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>VulkanPipeline</name> <modifier>*</modifier></type><name>ff_vk_create_pipeline</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>SPIRVShader</name> <modifier>*</modifier></type><name>ff_vk_init_shader</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>VulkanPipeline</name> <modifier>*</modifier></type><name>pl</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>VkShaderStageFlags</name></type> <name>stage</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>ff_vk_set_compute_shader_sizes</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>SPIRVShader</name> <modifier>*</modifier></type><name>shd</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name><name>local_size</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>ff_vk_add_descriptor_set</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>VulkanPipeline</name> <modifier>*</modifier></type><name>pl</name></decl></parameter>,

<parameter><decl><type><name>SPIRVShader</name> <modifier>*</modifier></type><name>shd</name></decl></parameter>, <parameter><decl><type><name>VulkanDescriptorSetBinding</name> <modifier>*</modifier></type><name>desc</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>num</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>only_print_to_shader</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>ff_vk_compile_shader</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>SPIRVShader</name> <modifier>*</modifier></type><name>shd</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>entrypoint</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>ff_vk_init_pipeline_layout</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>VulkanPipeline</name> <modifier>*</modifier></type><name>pl</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>ff_vk_init_compute_pipeline</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>VulkanPipeline</name> <modifier>*</modifier></type><name>pl</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>ff_vk_update_descriptor_set</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>VulkanPipeline</name> <modifier>*</modifier></type><name>pl</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>set_id</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>ff_vk_create_exec_ctx</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>FFVkExecContext</name> <modifier>*</modifier><modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>queue</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>ff_vk_start_exec_recording</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>FFVkExecContext</name> <modifier>*</modifier></type><name>e</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>ff_vk_bind_pipeline_exec</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>FFVkExecContext</name> <modifier>*</modifier></type><name>e</name></decl></parameter>,

<parameter><decl><type><name>VulkanPipeline</name> <modifier>*</modifier></type><name>pl</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>ff_vk_update_push_exec</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>FFVkExecContext</name> <modifier>*</modifier></type><name>e</name></decl></parameter>,

<parameter><decl><type><name>VkShaderStageFlagBits</name></type> <name>stage</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>offset</name></decl></parameter>,

<parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>ff_vk_add_exec_dep</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>FFVkExecContext</name> <modifier>*</modifier></type><name>e</name></decl></parameter>,

<parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>frame</name></decl></parameter>, <parameter><decl><type><name>VkPipelineStageFlagBits</name></type> <name>in_wait_dst_flag</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>ff_vk_submit_exec_queue</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>FFVkExecContext</name> <modifier>*</modifier></type><name>e</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>ff_vk_create_buf</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>FFVkBuffer</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>,

<parameter><decl><type><name>VkBufferUsageFlags</name></type> <name>usage</name></decl></parameter>, <parameter><decl><type><name>VkMemoryPropertyFlagBits</name></type> <name>flags</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>ff_vk_map_buffers</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>FFVkBuffer</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name><name>mem</name><index>[]</index></name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>nb_buffers</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>invalidate</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>ff_vk_unmap_buffers</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>FFVkBuffer</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nb_buffers</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>flush</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>ff_vk_free_buf</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>FFVkBuffer</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>;</function_decl>

</unit>
