<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavfilter\vf_stereo3d.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avassert.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/imgutils.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/intreadwrite.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/opt.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/parseutils.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/pixdesc.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avfilter.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"drawutils.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"formats.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"video.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stereo3d.h"</cpp:file></cpp:include>

<enum>enum <name>StereoCode</name> <block>{

<decl><name>ANAGLYPH_RC_GRAY</name></decl>, 

<decl><name>ANAGLYPH_RC_HALF</name></decl>, 

<decl><name>ANAGLYPH_RC_COLOR</name></decl>, 

<decl><name>ANAGLYPH_RC_DUBOIS</name></decl>, 

<decl><name>ANAGLYPH_GM_GRAY</name></decl>, 

<decl><name>ANAGLYPH_GM_HALF</name></decl>, 

<decl><name>ANAGLYPH_GM_COLOR</name></decl>, 

<decl><name>ANAGLYPH_GM_DUBOIS</name></decl>, 

<decl><name>ANAGLYPH_YB_GRAY</name></decl>, 

<decl><name>ANAGLYPH_YB_HALF</name></decl>, 

<decl><name>ANAGLYPH_YB_COLOR</name></decl>, 

<decl><name>ANAGLYPH_YB_DUBOIS</name></decl>, 

<decl><name>ANAGLYPH_RB_GRAY</name></decl>, 

<decl><name>ANAGLYPH_RG_GRAY</name></decl>, 

<decl><name>MONO_L</name></decl>, 

<decl><name>MONO_R</name></decl>, 

<decl><name>INTERLEAVE_ROWS_LR</name></decl>, 

<decl><name>INTERLEAVE_ROWS_RL</name></decl>, 

<decl><name>SIDE_BY_SIDE_LR</name></decl>, 

<decl><name>SIDE_BY_SIDE_RL</name></decl>, 

<decl><name>SIDE_BY_SIDE_2_LR</name></decl>, 

<decl><name>SIDE_BY_SIDE_2_RL</name></decl>, 

<decl><name>ABOVE_BELOW_LR</name></decl>, 

<decl><name>ABOVE_BELOW_RL</name></decl>, 

<decl><name>ABOVE_BELOW_2_LR</name></decl>, 

<decl><name>ABOVE_BELOW_2_RL</name></decl>, 

<decl><name>ALTERNATING_LR</name></decl>, 

<decl><name>ALTERNATING_RL</name></decl>, 

<decl><name>CHECKERBOARD_LR</name></decl>, 

<decl><name>CHECKERBOARD_RL</name></decl>, 

<decl><name>INTERLEAVE_COLS_LR</name></decl>, 

<decl><name>INTERLEAVE_COLS_RL</name></decl>, 

<decl><name>HDMI</name></decl>, 

<decl><name>STEREO_CODE_COUNT</name></decl> 

}</block>;</enum>

<typedef>typedef <type><struct>struct <name>StereoComponent</name> <block>{

<decl_stmt><decl><type><name>int</name></type> <name>format</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>width</name></decl>, <name>height</name>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>off_left</name></decl>, <name>off_right</name>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>off_lstep</name></decl>, <name>off_rstep</name>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>row_left</name></decl>, <name>row_right</name>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>row_step</name></decl>;</decl_stmt>

}</block></struct></type> <name>StereoComponent</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name><name>ana_coeff</name><index>[]</index><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">6</literal></expr>]</index></name> <init>= <expr><block>{

<expr><index>[<expr><name>ANAGLYPH_RB_GRAY</name></expr>]</index> <operator>=</operator>

<block>{<expr><block>{<expr><literal type="number">19595</literal></expr>, <expr><literal type="number">38470</literal></expr>, <expr><literal type="number">7471</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">19595</literal></expr>, <expr><literal type="number">38470</literal></expr>, <expr><literal type="number">7471</literal></expr>}</block></expr>}</block></expr>,

<expr><index>[<expr><name>ANAGLYPH_RG_GRAY</name></expr>]</index> <operator>=</operator>

<block>{<expr><block>{<expr><literal type="number">19595</literal></expr>, <expr><literal type="number">38470</literal></expr>, <expr><literal type="number">7471</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">19595</literal></expr>, <expr><literal type="number">38470</literal></expr>, <expr><literal type="number">7471</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>}</block></expr>,

<expr><index>[<expr><name>ANAGLYPH_RC_GRAY</name></expr>]</index> <operator>=</operator>

<block>{<expr><block>{<expr><literal type="number">19595</literal></expr>, <expr><literal type="number">38470</literal></expr>, <expr><literal type="number">7471</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">19595</literal></expr>, <expr><literal type="number">38470</literal></expr>, <expr><literal type="number">7471</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">19595</literal></expr>, <expr><literal type="number">38470</literal></expr>, <expr><literal type="number">7471</literal></expr>}</block></expr>}</block></expr>,

<expr><index>[<expr><name>ANAGLYPH_RC_HALF</name></expr>]</index> <operator>=</operator>

<block>{<expr><block>{<expr><literal type="number">19595</literal></expr>, <expr><literal type="number">38470</literal></expr>, <expr><literal type="number">7471</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">65536</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">65536</literal></expr>}</block></expr>}</block></expr>,

<expr><index>[<expr><name>ANAGLYPH_RC_COLOR</name></expr>]</index> <operator>=</operator>

<block>{<expr><block>{<expr><literal type="number">65536</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">65536</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">65536</literal></expr>}</block></expr>}</block></expr>,

<expr><index>[<expr><name>ANAGLYPH_RC_DUBOIS</name></expr>]</index> <operator>=</operator>

<block>{<expr><block>{<expr><literal type="number">29884</literal></expr>, <expr><literal type="number">32768</literal></expr>, <expr><literal type="number">11534</literal></expr>, <expr><operator>-</operator><literal type="number">2818</literal></expr>, <expr><operator>-</operator><literal type="number">5767</literal></expr>, <expr><operator>-</operator><literal type="number">131</literal></expr>}</block></expr>,

<expr><block>{<expr><operator>-</operator><literal type="number">2621</literal></expr>, <expr><operator>-</operator><literal type="number">2490</literal></expr>, <expr><operator>-</operator><literal type="number">1049</literal></expr>, <expr><literal type="number">24773</literal></expr>, <expr><literal type="number">48103</literal></expr>, <expr><operator>-</operator><literal type="number">1180</literal></expr>}</block></expr>,

<expr><block>{ <expr><operator>-</operator><literal type="number">983</literal></expr>, <expr><operator>-</operator><literal type="number">1376</literal></expr>, <expr><operator>-</operator><literal type="number">328</literal></expr>, <expr><operator>-</operator><literal type="number">4719</literal></expr>, <expr><operator>-</operator><literal type="number">7406</literal></expr>, <expr><literal type="number">80347</literal></expr>}</block></expr>}</block></expr>,

<expr><index>[<expr><name>ANAGLYPH_GM_GRAY</name></expr>]</index> <operator>=</operator>

<block>{<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">19595</literal></expr>, <expr><literal type="number">38470</literal></expr>, <expr><literal type="number">7471</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">19595</literal></expr>, <expr><literal type="number">38470</literal></expr>, <expr><literal type="number">7471</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">19595</literal></expr>, <expr><literal type="number">38470</literal></expr>, <expr><literal type="number">7471</literal></expr>}</block></expr>}</block></expr>,

<expr><index>[<expr><name>ANAGLYPH_GM_HALF</name></expr>]</index> <operator>=</operator>

<block>{<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">65536</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">19595</literal></expr>, <expr><literal type="number">38470</literal></expr>, <expr><literal type="number">7471</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">65536</literal></expr>}</block></expr>}</block></expr>,

<expr><index>[<expr><name>ANAGLYPH_GM_COLOR</name></expr>]</index> <operator>=</operator>

<block>{<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">65536</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">65536</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">65536</literal></expr>}</block></expr>}</block></expr>,

<expr><index>[<expr><name>ANAGLYPH_GM_DUBOIS</name></expr>]</index> <operator>=</operator>

<block>{<expr><block>{<expr><operator>-</operator><literal type="number">4063</literal></expr>,<expr><operator>-</operator><literal type="number">10354</literal></expr>, <expr><operator>-</operator><literal type="number">2556</literal></expr>, <expr><literal type="number">34669</literal></expr>, <expr><literal type="number">46203</literal></expr>, <expr><literal type="number">1573</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">18612</literal></expr>, <expr><literal type="number">43778</literal></expr>, <expr><literal type="number">9372</literal></expr>, <expr><operator>-</operator><literal type="number">1049</literal></expr>, <expr><operator>-</operator><literal type="number">983</literal></expr>, <expr><operator>-</operator><literal type="number">4260</literal></expr>}</block></expr>,

<expr><block>{ <expr><operator>-</operator><literal type="number">983</literal></expr>, <expr><operator>-</operator><literal type="number">1769</literal></expr>, <expr><literal type="number">1376</literal></expr>, <expr><literal type="number">590</literal></expr>, <expr><literal type="number">4915</literal></expr>, <expr><literal type="number">61407</literal></expr>}</block></expr>}</block></expr>,

<expr><index>[<expr><name>ANAGLYPH_YB_GRAY</name></expr>]</index> <operator>=</operator>

<block>{<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">19595</literal></expr>, <expr><literal type="number">38470</literal></expr>, <expr><literal type="number">7471</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">19595</literal></expr>, <expr><literal type="number">38470</literal></expr>, <expr><literal type="number">7471</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">19595</literal></expr>, <expr><literal type="number">38470</literal></expr>, <expr><literal type="number">7471</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>}</block></expr>,

<expr><index>[<expr><name>ANAGLYPH_YB_HALF</name></expr>]</index> <operator>=</operator>

<block>{<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">65536</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">65536</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">19595</literal></expr>, <expr><literal type="number">38470</literal></expr>, <expr><literal type="number">7471</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>}</block></expr>,

<expr><index>[<expr><name>ANAGLYPH_YB_COLOR</name></expr>]</index> <operator>=</operator>

<block>{<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">65536</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">65536</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">65536</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>}</block></expr>,

<expr><index>[<expr><name>ANAGLYPH_YB_DUBOIS</name></expr>]</index> <operator>=</operator>

<block>{<expr><block>{<expr><literal type="number">69599</literal></expr>,<expr><operator>-</operator><literal type="number">13435</literal></expr>,<expr><literal type="number">19595</literal></expr>, <expr><operator>-</operator><literal type="number">1048</literal></expr>, <expr><operator>-</operator><literal type="number">8061</literal></expr>, <expr><operator>-</operator><literal type="number">1114</literal></expr>}</block></expr>,

<expr><block>{<expr><operator>-</operator><literal type="number">1704</literal></expr>, <expr><literal type="number">59507</literal></expr>, <expr><literal type="number">4456</literal></expr>, <expr><literal type="number">393</literal></expr>, <expr><literal type="number">4063</literal></expr>, <expr><operator>-</operator><literal type="number">1114</literal></expr>}</block></expr>,

<expr><block>{<expr><operator>-</operator><literal type="number">2490</literal></expr>,<expr><operator>-</operator><literal type="number">11338</literal></expr>, <expr><literal type="number">1442</literal></expr>, <expr><literal type="number">6160</literal></expr>, <expr><literal type="number">12124</literal></expr>, <expr><literal type="number">59703</literal></expr>}</block></expr>}</block></expr>,

}</block></expr></init></decl>;</decl_stmt>

<typedef>typedef <type><struct>struct <name>Stereo3DContext</name> <block>{

<decl_stmt><decl><type><specifier>const</specifier> <name>AVClass</name> <modifier>*</modifier></type><name>class</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>StereoComponent</name></type> <name>in</name></decl>, <name>out</name>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>width</name></decl>, <name>height</name>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name> <modifier>*</modifier></type><name><name>ana_matrix</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>nb_planes</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>linesize</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>pheight</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>hsub</name></decl>, <name>vsub</name>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>pixstep</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>prev</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>blanks</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>in_off_left</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>, <name><name>in_off_right</name><index>[<expr><literal type="number">4</literal></expr>]</index></name>;</decl_stmt>

<decl_stmt><decl><type><name>AVRational</name></type> <name>aspect</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Stereo3DDSPContext</name></type> <name>dsp</name></decl>;</decl_stmt>

}</block></struct></type> <name>Stereo3DContext</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OFFSET</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>offsetof(Stereo3DContext, x)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLAGS</name></cpp:macro> <cpp:value>AV_OPT_FLAG_FILTERING_PARAM|AV_OPT_FLAG_VIDEO_PARAM</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVOption</name></type> <name><name>stereo3d_options</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><literal type="string">"in"</literal></expr>, <expr><literal type="string">"set input format"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name><name>in</name><operator>.</operator><name>format</name></name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>SIDE_BY_SIDE_LR</name></expr>}</block></expr>, <expr><name>INTERLEAVE_ROWS_LR</name></expr>, <expr><name>STEREO_CODE_COUNT</name><operator>-</operator><literal type="number">1</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"in"</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"ab2l"</literal></expr>, <expr><literal type="string">"above below half height left first"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>ABOVE_BELOW_2_LR</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"in"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"tb2l"</literal></expr>, <expr><literal type="string">"above below half height left first"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>ABOVE_BELOW_2_LR</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"in"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"ab2r"</literal></expr>, <expr><literal type="string">"above below half height right first"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>ABOVE_BELOW_2_RL</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"in"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"tb2r"</literal></expr>, <expr><literal type="string">"above below half height right first"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>ABOVE_BELOW_2_RL</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"in"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"abl"</literal></expr>, <expr><literal type="string">"above below left first"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>ABOVE_BELOW_LR</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"in"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"tbl"</literal></expr>, <expr><literal type="string">"above below left first"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>ABOVE_BELOW_LR</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"in"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"abr"</literal></expr>, <expr><literal type="string">"above below right first"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>ABOVE_BELOW_RL</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"in"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"tbr"</literal></expr>, <expr><literal type="string">"above below right first"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>ABOVE_BELOW_RL</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"in"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"al"</literal></expr>, <expr><literal type="string">"alternating frames left first"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>ALTERNATING_LR</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"in"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"ar"</literal></expr>, <expr><literal type="string">"alternating frames right first"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>ALTERNATING_RL</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"in"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"sbs2l"</literal></expr>, <expr><literal type="string">"side by side half width left first"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>SIDE_BY_SIDE_2_LR</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"in"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"sbs2r"</literal></expr>, <expr><literal type="string">"side by side half width right first"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>SIDE_BY_SIDE_2_RL</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"in"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"sbsl"</literal></expr>, <expr><literal type="string">"side by side left first"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>SIDE_BY_SIDE_LR</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"in"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"sbsr"</literal></expr>, <expr><literal type="string">"side by side right first"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>SIDE_BY_SIDE_RL</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"in"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"irl"</literal></expr>, <expr><literal type="string">"interleave rows left first"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>INTERLEAVE_ROWS_LR</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"in"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"irr"</literal></expr>, <expr><literal type="string">"interleave rows right first"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>INTERLEAVE_ROWS_RL</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"in"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"icl"</literal></expr>, <expr><literal type="string">"interleave columns left first"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>INTERLEAVE_COLS_LR</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"in"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"icr"</literal></expr>, <expr><literal type="string">"interleave columns right first"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>INTERLEAVE_COLS_RL</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"in"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"out"</literal></expr>, <expr><literal type="string">"set output format"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name><name>out</name><operator>.</operator><name>format</name></name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>ANAGLYPH_RC_DUBOIS</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>STEREO_CODE_COUNT</name><operator>-</operator><literal type="number">1</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"out"</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"ab2l"</literal></expr>, <expr><literal type="string">"above below half height left first"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>ABOVE_BELOW_2_LR</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"out"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"tb2l"</literal></expr>, <expr><literal type="string">"above below half height left first"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>ABOVE_BELOW_2_LR</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"out"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"ab2r"</literal></expr>, <expr><literal type="string">"above below half height right first"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>ABOVE_BELOW_2_RL</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"out"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"tb2r"</literal></expr>, <expr><literal type="string">"above below half height right first"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>ABOVE_BELOW_2_RL</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"out"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"abl"</literal></expr>, <expr><literal type="string">"above below left first"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>ABOVE_BELOW_LR</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"out"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"tbl"</literal></expr>, <expr><literal type="string">"above below left first"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>ABOVE_BELOW_LR</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"out"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"abr"</literal></expr>, <expr><literal type="string">"above below right first"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>ABOVE_BELOW_RL</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"out"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"tbr"</literal></expr>, <expr><literal type="string">"above below right first"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>ABOVE_BELOW_RL</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"out"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"agmc"</literal></expr>, <expr><literal type="string">"anaglyph green magenta color"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>ANAGLYPH_GM_COLOR</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"out"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"agmd"</literal></expr>, <expr><literal type="string">"anaglyph green magenta dubois"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>ANAGLYPH_GM_DUBOIS</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"out"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"agmg"</literal></expr>, <expr><literal type="string">"anaglyph green magenta gray"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>ANAGLYPH_GM_GRAY</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"out"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"agmh"</literal></expr>, <expr><literal type="string">"anaglyph green magenta half color"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>ANAGLYPH_GM_HALF</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"out"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"al"</literal></expr>, <expr><literal type="string">"alternating frames left first"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>ALTERNATING_LR</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"out"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"ar"</literal></expr>, <expr><literal type="string">"alternating frames right first"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>ALTERNATING_RL</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"out"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"arbg"</literal></expr>, <expr><literal type="string">"anaglyph red blue gray"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>ANAGLYPH_RB_GRAY</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"out"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"arcc"</literal></expr>, <expr><literal type="string">"anaglyph red cyan color"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>ANAGLYPH_RC_COLOR</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"out"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"arcd"</literal></expr>, <expr><literal type="string">"anaglyph red cyan dubois"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>ANAGLYPH_RC_DUBOIS</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"out"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"arcg"</literal></expr>, <expr><literal type="string">"anaglyph red cyan gray"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>ANAGLYPH_RC_GRAY</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"out"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"arch"</literal></expr>, <expr><literal type="string">"anaglyph red cyan half color"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>ANAGLYPH_RC_HALF</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"out"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"argg"</literal></expr>, <expr><literal type="string">"anaglyph red green gray"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>ANAGLYPH_RG_GRAY</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"out"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"aybc"</literal></expr>, <expr><literal type="string">"anaglyph yellow blue color"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>ANAGLYPH_YB_COLOR</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"out"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"aybd"</literal></expr>, <expr><literal type="string">"anaglyph yellow blue dubois"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>ANAGLYPH_YB_DUBOIS</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"out"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"aybg"</literal></expr>, <expr><literal type="string">"anaglyph yellow blue gray"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>ANAGLYPH_YB_GRAY</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"out"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"aybh"</literal></expr>, <expr><literal type="string">"anaglyph yellow blue half color"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>ANAGLYPH_YB_HALF</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"out"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"irl"</literal></expr>, <expr><literal type="string">"interleave rows left first"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>INTERLEAVE_ROWS_LR</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"out"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"irr"</literal></expr>, <expr><literal type="string">"interleave rows right first"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>INTERLEAVE_ROWS_RL</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"out"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"ml"</literal></expr>, <expr><literal type="string">"mono left"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>MONO_L</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"out"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"mr"</literal></expr>, <expr><literal type="string">"mono right"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>MONO_R</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"out"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"sbs2l"</literal></expr>, <expr><literal type="string">"side by side half width left first"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>SIDE_BY_SIDE_2_LR</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"out"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"sbs2r"</literal></expr>, <expr><literal type="string">"side by side half width right first"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>SIDE_BY_SIDE_2_RL</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"out"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"sbsl"</literal></expr>, <expr><literal type="string">"side by side left first"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>SIDE_BY_SIDE_LR</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"out"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"sbsr"</literal></expr>, <expr><literal type="string">"side by side right first"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>SIDE_BY_SIDE_RL</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"out"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"chl"</literal></expr>, <expr><literal type="string">"checkerboard left first"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>CHECKERBOARD_LR</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"out"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"chr"</literal></expr>, <expr><literal type="string">"checkerboard right first"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>CHECKERBOARD_RL</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"out"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"icl"</literal></expr>, <expr><literal type="string">"interleave columns left first"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>INTERLEAVE_COLS_LR</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"out"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"icr"</literal></expr>, <expr><literal type="string">"interleave columns right first"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>INTERLEAVE_COLS_RL</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"out"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"hdmi"</literal></expr>, <expr><literal type="string">"HDMI frame pack"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>HDMI</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"out"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>AVFILTER_DEFINE_CLASS</name><argument_list>(<argument><expr><name>stereo3d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>enum</name> <name>AVPixelFormat</name></name></type> <name><name>anaglyph_pix_fmts</name><index>[]</index></name> <init>= <expr><block>{

<expr><name>AV_PIX_FMT_RGB24</name></expr>, <expr><name>AV_PIX_FMT_BGR24</name></expr>,

<expr><name>AV_PIX_FMT_NONE</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>enum</name> <name>AVPixelFormat</name></name></type> <name><name>other_pix_fmts</name><index>[]</index></name> <init>= <expr><block>{

<expr><name>AV_PIX_FMT_RGB24</name></expr>, <expr><name>AV_PIX_FMT_BGR24</name></expr>,

<expr><name>AV_PIX_FMT_RGB48BE</name></expr>, <expr><name>AV_PIX_FMT_BGR48BE</name></expr>,

<expr><name>AV_PIX_FMT_RGB48LE</name></expr>, <expr><name>AV_PIX_FMT_BGR48LE</name></expr>,

<expr><name>AV_PIX_FMT_RGBA64BE</name></expr>, <expr><name>AV_PIX_FMT_BGRA64BE</name></expr>,

<expr><name>AV_PIX_FMT_RGBA64LE</name></expr>, <expr><name>AV_PIX_FMT_BGRA64LE</name></expr>,

<expr><name>AV_PIX_FMT_RGBA</name></expr>, <expr><name>AV_PIX_FMT_BGRA</name></expr>,

<expr><name>AV_PIX_FMT_ARGB</name></expr>, <expr><name>AV_PIX_FMT_ABGR</name></expr>,

<expr><name>AV_PIX_FMT_RGB0</name></expr>, <expr><name>AV_PIX_FMT_BGR0</name></expr>,

<expr><name>AV_PIX_FMT_0RGB</name></expr>, <expr><name>AV_PIX_FMT_0BGR</name></expr>,

<expr><name>AV_PIX_FMT_GBRP</name></expr>,

<expr><name>AV_PIX_FMT_GBRP9BE</name></expr>, <expr><name>AV_PIX_FMT_GBRP9LE</name></expr>,

<expr><name>AV_PIX_FMT_GBRP10BE</name></expr>, <expr><name>AV_PIX_FMT_GBRP10LE</name></expr>,

<expr><name>AV_PIX_FMT_GBRP12BE</name></expr>, <expr><name>AV_PIX_FMT_GBRP12LE</name></expr>,

<expr><name>AV_PIX_FMT_GBRP14BE</name></expr>, <expr><name>AV_PIX_FMT_GBRP14LE</name></expr>,

<expr><name>AV_PIX_FMT_GBRP16BE</name></expr>, <expr><name>AV_PIX_FMT_GBRP16LE</name></expr>,

<expr><name>AV_PIX_FMT_YUV410P</name></expr>,

<expr><name>AV_PIX_FMT_YUV411P</name></expr>,

<expr><name>AV_PIX_FMT_YUV420P</name></expr>, <expr><name>AV_PIX_FMT_YUVA420P</name></expr>,

<expr><name>AV_PIX_FMT_YUV422P</name></expr>, <expr><name>AV_PIX_FMT_YUVA422P</name></expr>,

<expr><name>AV_PIX_FMT_YUV440P</name></expr>,

<expr><name>AV_PIX_FMT_YUV444P</name></expr>, <expr><name>AV_PIX_FMT_YUVA444P</name></expr>,

<expr><name>AV_PIX_FMT_YUVJ411P</name></expr>,

<expr><name>AV_PIX_FMT_YUVJ420P</name></expr>,

<expr><name>AV_PIX_FMT_YUVJ422P</name></expr>,

<expr><name>AV_PIX_FMT_YUVJ440P</name></expr>,

<expr><name>AV_PIX_FMT_YUVJ444P</name></expr>,

<expr><name>AV_PIX_FMT_YUV420P9LE</name></expr>, <expr><name>AV_PIX_FMT_YUVA420P9LE</name></expr>,

<expr><name>AV_PIX_FMT_YUV420P9BE</name></expr>, <expr><name>AV_PIX_FMT_YUVA420P9BE</name></expr>,

<expr><name>AV_PIX_FMT_YUV422P9LE</name></expr>, <expr><name>AV_PIX_FMT_YUVA422P9LE</name></expr>,

<expr><name>AV_PIX_FMT_YUV422P9BE</name></expr>, <expr><name>AV_PIX_FMT_YUVA422P9BE</name></expr>,

<expr><name>AV_PIX_FMT_YUV444P9LE</name></expr>, <expr><name>AV_PIX_FMT_YUVA444P9LE</name></expr>,

<expr><name>AV_PIX_FMT_YUV444P9BE</name></expr>, <expr><name>AV_PIX_FMT_YUVA444P9BE</name></expr>,

<expr><name>AV_PIX_FMT_YUV420P10LE</name></expr>, <expr><name>AV_PIX_FMT_YUVA420P10LE</name></expr>,

<expr><name>AV_PIX_FMT_YUV420P10BE</name></expr>, <expr><name>AV_PIX_FMT_YUVA420P10BE</name></expr>,

<expr><name>AV_PIX_FMT_YUV422P10LE</name></expr>, <expr><name>AV_PIX_FMT_YUVA422P10LE</name></expr>,

<expr><name>AV_PIX_FMT_YUV422P10BE</name></expr>, <expr><name>AV_PIX_FMT_YUVA422P10BE</name></expr>,

<expr><name>AV_PIX_FMT_YUV444P10LE</name></expr>, <expr><name>AV_PIX_FMT_YUVA444P10LE</name></expr>,

<expr><name>AV_PIX_FMT_YUV444P10BE</name></expr>, <expr><name>AV_PIX_FMT_YUVA444P10BE</name></expr>,

<expr><name>AV_PIX_FMT_YUV420P12BE</name></expr>, <expr><name>AV_PIX_FMT_YUV420P12LE</name></expr>,

<expr><name>AV_PIX_FMT_YUV422P12BE</name></expr>, <expr><name>AV_PIX_FMT_YUV422P12LE</name></expr>,

<expr><name>AV_PIX_FMT_YUV444P12BE</name></expr>, <expr><name>AV_PIX_FMT_YUV444P12LE</name></expr>,

<expr><name>AV_PIX_FMT_YUV420P14BE</name></expr>, <expr><name>AV_PIX_FMT_YUV420P14LE</name></expr>,

<expr><name>AV_PIX_FMT_YUV422P14BE</name></expr>, <expr><name>AV_PIX_FMT_YUV422P14LE</name></expr>,

<expr><name>AV_PIX_FMT_YUV444P14BE</name></expr>, <expr><name>AV_PIX_FMT_YUV444P14LE</name></expr>,

<expr><name>AV_PIX_FMT_YUV420P16LE</name></expr>, <expr><name>AV_PIX_FMT_YUVA420P16LE</name></expr>,

<expr><name>AV_PIX_FMT_YUV420P16BE</name></expr>, <expr><name>AV_PIX_FMT_YUVA420P16BE</name></expr>,

<expr><name>AV_PIX_FMT_YUV422P16LE</name></expr>, <expr><name>AV_PIX_FMT_YUVA422P16LE</name></expr>,

<expr><name>AV_PIX_FMT_YUV422P16BE</name></expr>, <expr><name>AV_PIX_FMT_YUVA422P16BE</name></expr>,

<expr><name>AV_PIX_FMT_YUV444P16LE</name></expr>, <expr><name>AV_PIX_FMT_YUVA444P16LE</name></expr>,

<expr><name>AV_PIX_FMT_YUV444P16BE</name></expr>, <expr><name>AV_PIX_FMT_YUVA444P16BE</name></expr>,

<expr><name>AV_PIX_FMT_NONE</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int</name></type> <name>query_formats</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>Stereo3DContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>enum</name> <name>AVPixelFormat</name></name> <modifier>*</modifier></type><name>pix_fmts</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFilterFormats</name> <modifier>*</modifier></type><name>fmts_list</name></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>out</name><operator>.</operator><name>format</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>ANAGLYPH_GM_COLOR</name></expr>:</case>

<case>case <expr><name>ANAGLYPH_GM_DUBOIS</name></expr>:</case>

<case>case <expr><name>ANAGLYPH_GM_GRAY</name></expr>:</case>

<case>case <expr><name>ANAGLYPH_GM_HALF</name></expr>:</case>

<case>case <expr><name>ANAGLYPH_RB_GRAY</name></expr>:</case>

<case>case <expr><name>ANAGLYPH_RC_COLOR</name></expr>:</case>

<case>case <expr><name>ANAGLYPH_RC_DUBOIS</name></expr>:</case>

<case>case <expr><name>ANAGLYPH_RC_GRAY</name></expr>:</case>

<case>case <expr><name>ANAGLYPH_RC_HALF</name></expr>:</case>

<case>case <expr><name>ANAGLYPH_RG_GRAY</name></expr>:</case>

<case>case <expr><name>ANAGLYPH_YB_COLOR</name></expr>:</case>

<case>case <expr><name>ANAGLYPH_YB_DUBOIS</name></expr>:</case>

<case>case <expr><name>ANAGLYPH_YB_GRAY</name></expr>:</case>

<case>case <expr><name>ANAGLYPH_YB_HALF</name></expr>:</case>

<expr_stmt><expr><name>pix_fmts</name> <operator>=</operator> <name>anaglyph_pix_fmts</name></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><name>pix_fmts</name> <operator>=</operator> <name>other_pix_fmts</name></expr>;</expr_stmt>

</block_content>}</block></switch>

<expr_stmt><expr><name>fmts_list</name> <operator>=</operator> <call><name>ff_make_format_list</name><argument_list>(<argument><expr><name>pix_fmts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>fmts_list</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>ff_set_common_formats</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>fmts_list</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>uint8_t</name></type> <name>ana_convert</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int</name> <modifier>*</modifier></type><name>coeff</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>left</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>right</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>sum</name></decl>;</decl_stmt>

<expr_stmt><expr><name>sum</name> <operator>=</operator> <name><name>coeff</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name><name>left</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>coeff</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>*</operator> <name><name>right</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt> 

<expr_stmt><expr><name>sum</name> <operator>+=</operator> <name><name>coeff</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name><name>left</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>coeff</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>*</operator> <name><name>right</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt> 

<expr_stmt><expr><name>sum</name> <operator>+=</operator> <name><name>coeff</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>*</operator> <name><name>left</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <name><name>coeff</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>*</operator> <name><name>right</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt> 

<return>return <expr><call><name>av_clip_uint8</name><argument_list>(<argument><expr><name>sum</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>anaglyph_ic</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>lsrc</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>rsrc</name></decl></parameter>,

<parameter><decl><type><name>ptrdiff_t</name></type> <name>dst_linesize</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>l_linesize</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>r_linesize</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>int</name> <modifier>*</modifier></type><name>ana_matrix_r</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name> <modifier>*</modifier></type><name>ana_matrix_g</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name> <modifier>*</modifier></type><name>ana_matrix_b</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>, <decl><type ref="prev"/><name>o</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>o</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr><operator>,</operator> <expr><name>o</name><operator>+=</operator> <literal type="number">3</literal></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>dst</name><index>[<expr><name>o</name></expr> ]</index></name> <operator>=</operator> <call><name>ana_convert</name><argument_list>(<argument><expr><name>ana_matrix_r</name></expr></argument>, <argument><expr><name>lsrc</name> <operator>+</operator> <name>o</name> <operator>*</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>rsrc</name> <operator>+</operator> <name>o</name> <operator>*</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><index>[<expr><name>o</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>ana_convert</name><argument_list>(<argument><expr><name>ana_matrix_g</name></expr></argument>, <argument><expr><name>lsrc</name> <operator>+</operator> <name>o</name> <operator>*</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>rsrc</name> <operator>+</operator> <name>o</name> <operator>*</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><index>[<expr><name>o</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>ana_convert</name><argument_list>(<argument><expr><name>ana_matrix_b</name></expr></argument>, <argument><expr><name>lsrc</name> <operator>+</operator> <name>o</name> <operator>*</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>rsrc</name> <operator>+</operator> <name>o</name> <operator>*</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dst_linesize</name></expr>;</expr_stmt>

<expr_stmt><expr><name>lsrc</name> <operator>+=</operator> <name>l_linesize</name></expr>;</expr_stmt>

<expr_stmt><expr><name>rsrc</name> <operator>+=</operator> <name>r_linesize</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>anaglyph</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>lsrc</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>rsrc</name></decl></parameter>,

<parameter><decl><type><name>ptrdiff_t</name></type> <name>dst_linesize</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>l_linesize</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>r_linesize</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>int</name> <modifier>*</modifier></type><name>ana_matrix_r</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name> <modifier>*</modifier></type><name>ana_matrix_g</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name> <modifier>*</modifier></type><name>ana_matrix_b</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>, <decl><type ref="prev"/><name>o</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>o</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr><operator>,</operator> <expr><name>o</name><operator>+=</operator> <literal type="number">3</literal></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>dst</name><index>[<expr><name>o</name></expr> ]</index></name> <operator>=</operator> <call><name>ana_convert</name><argument_list>(<argument><expr><name>ana_matrix_r</name></expr></argument>, <argument><expr><name>lsrc</name> <operator>+</operator> <name>o</name></expr></argument>, <argument><expr><name>rsrc</name> <operator>+</operator> <name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><index>[<expr><name>o</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>ana_convert</name><argument_list>(<argument><expr><name>ana_matrix_g</name></expr></argument>, <argument><expr><name>lsrc</name> <operator>+</operator> <name>o</name></expr></argument>, <argument><expr><name>rsrc</name> <operator>+</operator> <name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><index>[<expr><name>o</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>ana_convert</name><argument_list>(<argument><expr><name>ana_matrix_b</name></expr></argument>, <argument><expr><name>lsrc</name> <operator>+</operator> <name>o</name></expr></argument>, <argument><expr><name>rsrc</name> <operator>+</operator> <name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dst_linesize</name></expr>;</expr_stmt>

<expr_stmt><expr><name>lsrc</name> <operator>+=</operator> <name>l_linesize</name></expr>;</expr_stmt>

<expr_stmt><expr><name>rsrc</name> <operator>+=</operator> <name>r_linesize</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>config_output</name><parameter_list>(<parameter><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>outlink</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>outlink</name><operator>-&gt;</operator><name>src</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>inlink</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>inputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Stereo3DContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVRational</name></type> <name>fps</name> <init>= <expr><name><name>inlink</name><operator>-&gt;</operator><name>frame_rate</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVRational</name></type> <name>tb</name> <init>= <expr><name><name>inlink</name><operator>-&gt;</operator><name>time_base</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>AVPixFmtDescriptor</name> <modifier>*</modifier></type><name>desc</name> <init>= <expr><call><name>av_pix_fmt_desc_get</name><argument_list>(<argument><expr><name><name>outlink</name><operator>-&gt;</operator><name>format</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>aspect</name></name> <operator>=</operator> <name><name>inlink</name><operator>-&gt;</operator><name>sample_aspect_ratio</name></name></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>format</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>INTERLEAVE_COLS_LR</name></expr>:</case>

<case>case <expr><name>INTERLEAVE_COLS_RL</name></expr>:</case>

<case>case <expr><name>SIDE_BY_SIDE_2_LR</name></expr>:</case>

<case>case <expr><name>SIDE_BY_SIDE_LR</name></expr>:</case>

<case>case <expr><name>SIDE_BY_SIDE_2_RL</name></expr>:</case>

<case>case <expr><name>SIDE_BY_SIDE_RL</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>inlink</name><operator>-&gt;</operator><name>w</name></name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"width must be even\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><name>INTERLEAVE_ROWS_LR</name></expr>:</case>

<case>case <expr><name>INTERLEAVE_ROWS_RL</name></expr>:</case>

<case>case <expr><name>ABOVE_BELOW_2_LR</name></expr>:</case>

<case>case <expr><name>ABOVE_BELOW_LR</name></expr>:</case>

<case>case <expr><name>ABOVE_BELOW_2_RL</name></expr>:</case>

<case>case <expr><name>ABOVE_BELOW_RL</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>inlink</name><operator>-&gt;</operator><name>h</name></name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"height must be even\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<break>break;</break>

</block_content>}</block></switch>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>width</name></name> <operator>=</operator>

<name><name>s</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator> <name><name>inlink</name><operator>-&gt;</operator><name>w</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>height</name></name> <operator>=</operator>

<name><name>s</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <name><name>inlink</name><operator>-&gt;</operator><name>h</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>off_lstep</name></name> <operator>=</operator>

<name><name>s</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>off_rstep</name></name> <operator>=</operator>

<name><name>s</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>off_left</name></name> <operator>=</operator>

<name><name>s</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>off_right</name></name> <operator>=</operator>

<name><name>s</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>row_left</name></name> <operator>=</operator>

<name><name>s</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>row_right</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>row_step</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>format</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>SIDE_BY_SIDE_2_LR</name></expr>:</case>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>aspect</name><operator>.</operator><name>num</name></name> <operator>*=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<case>case <expr><name>SIDE_BY_SIDE_LR</name></expr>:</case>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator> <name><name>inlink</name><operator>-&gt;</operator><name>w</name></name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>off_right</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>width</name></name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>SIDE_BY_SIDE_2_RL</name></expr>:</case>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>aspect</name><operator>.</operator><name>num</name></name> <operator>*=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<case>case <expr><name>SIDE_BY_SIDE_RL</name></expr>:</case>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator> <name><name>inlink</name><operator>-&gt;</operator><name>w</name></name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>off_left</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>width</name></name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ABOVE_BELOW_2_LR</name></expr>:</case>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>aspect</name><operator>.</operator><name>den</name></name> <operator>*=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<case>case <expr><name>ABOVE_BELOW_LR</name></expr>:</case>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>row_right</name></name> <operator>=</operator>

<name><name>s</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <name><name>inlink</name><operator>-&gt;</operator><name>h</name></name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ABOVE_BELOW_2_RL</name></expr>:</case>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>aspect</name><operator>.</operator><name>den</name></name> <operator>*=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<case>case <expr><name>ABOVE_BELOW_RL</name></expr>:</case>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>row_left</name></name> <operator>=</operator>

<name><name>s</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <name><name>inlink</name><operator>-&gt;</operator><name>h</name></name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ALTERNATING_RL</name></expr>:</case>

<case>case <expr><name>ALTERNATING_LR</name></expr>:</case>

<expr_stmt><expr><name><name>fps</name><operator>.</operator><name>den</name></name> <operator>*=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tb</name><operator>.</operator><name>num</name></name> <operator>*=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>INTERLEAVE_COLS_RL</name></expr>:</case>

<case>case <expr><name>INTERLEAVE_COLS_LR</name></expr>:</case>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator> <name><name>inlink</name><operator>-&gt;</operator><name>w</name></name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>INTERLEAVE_ROWS_LR</name></expr>:</case>

<case>case <expr><name>INTERLEAVE_ROWS_RL</name></expr>:</case>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>row_step</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>format</name></name> <operator>==</operator> <name>INTERLEAVE_ROWS_RL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>off_lstep</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>off_rstep</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>out</name><operator>.</operator><name>format</name></name> <operator>!=</operator> <name>CHECKERBOARD_LR</name> <operator>&amp;&amp;</operator>

<name><name>s</name><operator>-&gt;</operator><name>out</name><operator>.</operator><name>format</name></name> <operator>!=</operator> <name>CHECKERBOARD_RL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <name><name>inlink</name><operator>-&gt;</operator><name>h</name></name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"input format %d is not supported\n"</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>format</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></switch>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>out</name><operator>.</operator><name>width</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>width</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>out</name><operator>.</operator><name>height</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>height</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>out</name><operator>.</operator><name>off_lstep</name></name> <operator>=</operator>

<name><name>s</name><operator>-&gt;</operator><name>out</name><operator>.</operator><name>off_rstep</name></name> <operator>=</operator>

<name><name>s</name><operator>-&gt;</operator><name>out</name><operator>.</operator><name>off_left</name></name> <operator>=</operator>

<name><name>s</name><operator>-&gt;</operator><name>out</name><operator>.</operator><name>off_right</name></name> <operator>=</operator>

<name><name>s</name><operator>-&gt;</operator><name>out</name><operator>.</operator><name>row_left</name></name> <operator>=</operator>

<name><name>s</name><operator>-&gt;</operator><name>out</name><operator>.</operator><name>row_right</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>out</name><operator>.</operator><name>row_step</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>out</name><operator>.</operator><name>format</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>ANAGLYPH_RB_GRAY</name></expr>:</case>

<case>case <expr><name>ANAGLYPH_RG_GRAY</name></expr>:</case>

<case>case <expr><name>ANAGLYPH_RC_GRAY</name></expr>:</case>

<case>case <expr><name>ANAGLYPH_RC_HALF</name></expr>:</case>

<case>case <expr><name>ANAGLYPH_RC_COLOR</name></expr>:</case>

<case>case <expr><name>ANAGLYPH_RC_DUBOIS</name></expr>:</case>

<case>case <expr><name>ANAGLYPH_GM_GRAY</name></expr>:</case>

<case>case <expr><name>ANAGLYPH_GM_HALF</name></expr>:</case>

<case>case <expr><name>ANAGLYPH_GM_COLOR</name></expr>:</case>

<case>case <expr><name>ANAGLYPH_GM_DUBOIS</name></expr>:</case>

<case>case <expr><name>ANAGLYPH_YB_GRAY</name></expr>:</case>

<case>case <expr><name>ANAGLYPH_YB_HALF</name></expr>:</case>

<case>case <expr><name>ANAGLYPH_YB_COLOR</name></expr>:</case>

<case>case <expr><name>ANAGLYPH_YB_DUBOIS</name></expr>:</case> <block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>rgba_map</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ff_fill_rgba_map</name><argument_list>(<argument><expr><name>rgba_map</name></expr></argument>, <argument><expr><name><name>outlink</name><operator>-&gt;</operator><name>format</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>ana_matrix</name><index>[<expr><name><name>rgba_map</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name> <operator>=</operator> <operator>&amp;</operator><name><name>ana_coeff</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>out</name><operator>.</operator><name>format</name></name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>ana_matrix</name><index>[<expr><name><name>rgba_map</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>]</index></name> <operator>=</operator> <operator>&amp;</operator><name><name>ana_coeff</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>out</name><operator>.</operator><name>format</name></name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>ana_matrix</name><index>[<expr><name><name>rgba_map</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>]</index></name> <operator>=</operator> <operator>&amp;</operator><name><name>ana_coeff</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>out</name><operator>.</operator><name>format</name></name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block>

<case>case <expr><name>SIDE_BY_SIDE_2_LR</name></expr>:</case>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>aspect</name><operator>.</operator><name>den</name></name> <operator>*=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<case>case <expr><name>SIDE_BY_SIDE_LR</name></expr>:</case>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>out</name><operator>.</operator><name>width</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>width</name></name> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>out</name><operator>.</operator><name>off_right</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>width</name></name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>SIDE_BY_SIDE_2_RL</name></expr>:</case>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>aspect</name><operator>.</operator><name>den</name></name> <operator>*=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<case>case <expr><name>SIDE_BY_SIDE_RL</name></expr>:</case>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>out</name><operator>.</operator><name>width</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>width</name></name> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>out</name><operator>.</operator><name>off_left</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>width</name></name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ABOVE_BELOW_2_LR</name></expr>:</case>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>aspect</name><operator>.</operator><name>num</name></name> <operator>*=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<case>case <expr><name>ABOVE_BELOW_LR</name></expr>:</case>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>out</name><operator>.</operator><name>height</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>height</name></name> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>out</name><operator>.</operator><name>row_right</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>height</name></name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>HDMI</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>height</name></name> <operator>!=</operator> <literal type="number">720</literal> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>height</name></name> <operator>!=</operator> <literal type="number">1080</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Only 720 and 1080 height supported\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>blanks</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>height</name></name> <operator>/</operator> <literal type="number">24</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>out</name><operator>.</operator><name>height</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>height</name></name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>blanks</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>out</name><operator>.</operator><name>row_right</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>height</name></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>blanks</name></name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ABOVE_BELOW_2_RL</name></expr>:</case>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>aspect</name><operator>.</operator><name>num</name></name> <operator>*=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<case>case <expr><name>ABOVE_BELOW_RL</name></expr>:</case>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>out</name><operator>.</operator><name>height</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>height</name></name> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>out</name><operator>.</operator><name>row_left</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>height</name></name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>INTERLEAVE_ROWS_LR</name></expr>:</case>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>row_step</name></name> <operator>=</operator> <literal type="number">1</literal> <operator>+</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>format</name></name> <operator>==</operator> <name>INTERLEAVE_ROWS_RL</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>out</name><operator>.</operator><name>row_step</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>out</name><operator>.</operator><name>height</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>height</name></name> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>out</name><operator>.</operator><name>off_rstep</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>INTERLEAVE_ROWS_RL</name></expr>:</case>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>row_step</name></name> <operator>=</operator> <literal type="number">1</literal> <operator>+</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>format</name></name> <operator>==</operator> <name>INTERLEAVE_ROWS_LR</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>out</name><operator>.</operator><name>row_step</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>out</name><operator>.</operator><name>height</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>height</name></name> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>out</name><operator>.</operator><name>off_lstep</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>MONO_R</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>format</name></name> <operator>!=</operator> <name>INTERLEAVE_COLS_LR</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>off_left</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>off_right</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>row_left</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>row_right</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>format</name></name> <operator>==</operator> <name>INTERLEAVE_ROWS_LR</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>FFSWAP</name><argument_list>(<argument><expr><name>int</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>off_lstep</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>off_rstep</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<break>break;</break>

<case>case <expr><name>MONO_L</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>format</name></name> <operator>==</operator> <name>INTERLEAVE_ROWS_RL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>FFSWAP</name><argument_list>(<argument><expr><name>int</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>off_lstep</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>off_rstep</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<break>break;</break>

<case>case <expr><name>ALTERNATING_RL</name></expr>:</case>

<case>case <expr><name>ALTERNATING_LR</name></expr>:</case>

<expr_stmt><expr><name><name>fps</name><operator>.</operator><name>num</name></name> <operator>*=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tb</name><operator>.</operator><name>den</name></name> <operator>*=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>CHECKERBOARD_LR</name></expr>:</case>

<case>case <expr><name>CHECKERBOARD_RL</name></expr>:</case>

<case>case <expr><name>INTERLEAVE_COLS_LR</name></expr>:</case>

<case>case <expr><name>INTERLEAVE_COLS_RL</name></expr>:</case>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>out</name><operator>.</operator><name>width</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>width</name></name> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"output format %d is not supported\n"</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>out</name><operator>.</operator><name>format</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>format</name></name> <operator>==</operator> <name>INTERLEAVE_COLS_LR</name> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>format</name></name> <operator>==</operator> <name>INTERLEAVE_COLS_RL</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>format</name></name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>!=</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>out</name><operator>.</operator><name>format</name></name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>FFSWAP</name><argument_list>(<argument><expr><name>int</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>row_left</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>row_right</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>FFSWAP</name><argument_list>(<argument><expr><name>int</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>off_lstep</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>off_rstep</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>FFSWAP</name><argument_list>(<argument><expr><name>int</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>off_left</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>off_right</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>FFSWAP</name><argument_list>(<argument><expr><name>int</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>out</name><operator>.</operator><name>row_left</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>out</name><operator>.</operator><name>row_right</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>FFSWAP</name><argument_list>(<argument><expr><name>int</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>out</name><operator>.</operator><name>off_lstep</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>out</name><operator>.</operator><name>off_rstep</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>FFSWAP</name><argument_list>(<argument><expr><name>int</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>out</name><operator>.</operator><name>off_left</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>out</name><operator>.</operator><name>off_right</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>outlink</name><operator>-&gt;</operator><name>w</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>out</name><operator>.</operator><name>width</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>outlink</name><operator>-&gt;</operator><name>h</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>out</name><operator>.</operator><name>height</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>outlink</name><operator>-&gt;</operator><name>frame_rate</name></name> <operator>=</operator> <name>fps</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>outlink</name><operator>-&gt;</operator><name>time_base</name></name> <operator>=</operator> <name>tb</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>outlink</name><operator>-&gt;</operator><name>sample_aspect_ratio</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>aspect</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>av_image_fill_linesizes</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>linesize</name></name></expr></argument>, <argument><expr><name><name>outlink</name><operator>-&gt;</operator><name>format</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>width</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>nb_planes</name></name> <operator>=</operator> <call><name>av_pix_fmt_count_planes</name><argument_list>(<argument><expr><name><name>outlink</name><operator>-&gt;</operator><name>format</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_image_fill_max_pixsteps</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pixstep</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>pheight</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>pheight</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>AV_CEIL_RSHIFT</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>height</name></name></expr></argument>, <argument><expr><name><name>desc</name><operator>-&gt;</operator><name>log2_chroma_h</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>pheight</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>pheight</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>height</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>hsub</name></name> <operator>=</operator> <name><name>desc</name><operator>-&gt;</operator><name>log2_chroma_w</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>vsub</name></name> <operator>=</operator> <name><name>desc</name><operator>-&gt;</operator><name>log2_chroma_h</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>dsp</name><operator>.</operator><name>anaglyph</name></name> <operator>=</operator> <name>anaglyph</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ARCH_X86</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ff_stereo3d_init_x86</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>dsp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<typedef>typedef <type><struct>struct <name>ThreadData</name> <block>{

<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>ileft</name></decl>, <modifier>*</modifier><name>iright</name>;</decl_stmt>

<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>out</name></decl>;</decl_stmt>

}</block></struct></type> <name>ThreadData</name>;</typedef>

<function><type><specifier>static</specifier> <name>int</name></type> <name>filter_slice</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>jobnr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nb_jobs</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>Stereo3DContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ThreadData</name> <modifier>*</modifier></type><name>td</name> <init>= <expr><name>arg</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>ileft</name> <init>= <expr><name><name>td</name><operator>-&gt;</operator><name>ileft</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>iright</name> <init>= <expr><name><name>td</name><operator>-&gt;</operator><name>iright</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>out</name> <init>= <expr><name><name>td</name><operator>-&gt;</operator><name>out</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>height</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>out</name><operator>.</operator><name>height</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>start</name> <init>= <expr><operator>(</operator><name>height</name> <operator>*</operator> <name>jobnr</name> <operator>)</operator> <operator>/</operator> <name>nb_jobs</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>end</name> <init>= <expr><operator>(</operator><name>height</name> <operator>*</operator> <operator>(</operator><name>jobnr</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>/</operator> <name>nb_jobs</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name> <modifier>*</modifier><modifier>*</modifier></type><name>ana_matrix</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>ana_matrix</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>dsp</name><operator>.</operator><name>anaglyph</name></name><argument_list>(<argument><expr><name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name>start</name></expr></argument>,

<argument><expr><name><name>ileft</name> <operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>in_off_left</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>ileft</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name>start</name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>row_step</name></name></expr></argument>,

<argument><expr><name><name>iright</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>in_off_right</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>iright</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name>start</name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>row_step</name></name></expr></argument>,

<argument><expr><name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,

<argument><expr><name><name>ileft</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>row_step</name></name></expr></argument>,

<argument><expr><name><name>iright</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>row_step</name></name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>out</name><operator>.</operator><name>width</name></name></expr></argument>, <argument><expr><name>end</name> <operator>-</operator> <name>start</name></expr></argument>,

<argument><expr><name><name>ana_matrix</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>ana_matrix</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>ana_matrix</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>interleave_cols_to_any</name><parameter_list>(<parameter><decl><type><name>Stereo3DContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>out_off</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>p</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>d</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>, <decl><type ref="prev"/><name>x</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>pheight</name><index>[<expr><name>p</name></expr>]</index></name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint8_t</name><operator>*</operator><operator>)</operator><name><name>in</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>p</name></expr>]</index></name> <operator>+</operator> <name>y</name> <operator>*</operator> <name><name>in</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>p</name></expr>]</index></name> <operator>+</operator> <name>d</name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>pixstep</name><index>[<expr><name>p</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>p</name></expr>]</index></name> <operator>+</operator> <name><name>out_off</name><index>[<expr><name>p</name></expr>]</index></name> <operator>+</operator> <name>y</name> <operator>*</operator> <name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>p</name></expr>]</index></name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>out</name><operator>.</operator><name>row_step</name></name></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>pixstep</name><index>[<expr><name>p</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">1</literal></expr>:</case>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>p</name></expr>]</index></name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>dst</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <name><name>src</name><index>[<expr><name>x</name> <operator>*</operator> <literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<break>break;</break>

<case>case <expr><literal type="number">2</literal></expr>:</case>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>p</name></expr>]</index></name></expr>;</condition> <incr><expr><name>x</name><operator>+=</operator><literal type="number">2</literal></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>AV_WN16</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dst</name><index>[<expr><name>x</name></expr>]</index></name></expr></argument>, <argument><expr><call><name>AV_RN16</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>src</name><index>[<expr><name>x</name> <operator>*</operator> <literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<break>break;</break>

<case>case <expr><literal type="number">3</literal></expr>:</case>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>p</name></expr>]</index></name></expr>;</condition> <incr><expr><name>x</name><operator>+=</operator><literal type="number">3</literal></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>AV_WB24</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dst</name><index>[<expr><name>x</name></expr>]</index></name></expr></argument>, <argument><expr><call><name>AV_RB24</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>src</name><index>[<expr><name>x</name> <operator>*</operator> <literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<break>break;</break>

<case>case <expr><literal type="number">4</literal></expr>:</case>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>p</name></expr>]</index></name></expr>;</condition> <incr><expr><name>x</name><operator>+=</operator><literal type="number">4</literal></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>AV_WN32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dst</name><index>[<expr><name>x</name></expr>]</index></name></expr></argument>, <argument><expr><call><name>AV_RN32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>src</name><index>[<expr><name>x</name> <operator>*</operator> <literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<break>break;</break>

<case>case <expr><literal type="number">6</literal></expr>:</case>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>p</name></expr>]</index></name></expr>;</condition> <incr><expr><name>x</name><operator>+=</operator><literal type="number">6</literal></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>AV_WB48</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dst</name><index>[<expr><name>x</name></expr>]</index></name></expr></argument>, <argument><expr><call><name>AV_RB48</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>src</name><index>[<expr><name>x</name> <operator>*</operator> <literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<break>break;</break>

<case>case <expr><literal type="number">8</literal></expr>:</case>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>p</name></expr>]</index></name></expr>;</condition> <incr><expr><name>x</name><operator>+=</operator><literal type="number">8</literal></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>AV_WN64</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dst</name><index>[<expr><name>x</name></expr>]</index></name></expr></argument>, <argument><expr><call><name>AV_RN64</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>src</name><index>[<expr><name>x</name> <operator>*</operator> <literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>filter_frame</name><parameter_list>(<parameter><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>inlink</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>inpicref</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>inlink</name><operator>-&gt;</operator><name>dst</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Stereo3DContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>outlink</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>outputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>out</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>oleft</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>oright</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ileft</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>iright</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>out_off_left</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>out_off_right</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>format</name></name> <operator>==</operator> <name><name>s</name><operator>-&gt;</operator><name>out</name><operator>.</operator><name>format</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>ff_filter_frame</name><argument_list>(<argument><expr><name>outlink</name></expr></argument>, <argument><expr><name>inpicref</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<switch>switch <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>out</name><operator>.</operator><name>format</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>ALTERNATING_LR</name></expr>:</case>

<case>case <expr><name>ALTERNATING_RL</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>prev</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <name>inpicref</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<break>break;</break>

</block_content>}</block></switch><empty_stmt>;</empty_stmt>

<switch>switch <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>format</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>ALTERNATING_LR</name></expr>:</case>

<case>case <expr><name>ALTERNATING_RL</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>prev</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <name>inpicref</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ileft</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>prev</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>iright</name> <operator>=</operator> <name>inpicref</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>format</name></name> <operator>==</operator> <name>ALTERNATING_RL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>FFSWAP</name><argument_list>(<argument><expr><name>AVFrame</name> <operator>*</operator></expr></argument>, <argument><expr><name>ileft</name></expr></argument>, <argument><expr><name>iright</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><name>ileft</name> <operator>=</operator> <name>iright</name> <operator>=</operator> <name>inpicref</name></expr>;</expr_stmt>

</block_content>}</block></switch><empty_stmt>;</empty_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>out</name><operator>.</operator><name>format</name></name> <operator>==</operator> <name>ALTERNATING_LR</name> <operator>||</operator>

<name><name>s</name><operator>-&gt;</operator><name>out</name><operator>.</operator><name>format</name></name> <operator>==</operator> <name>ALTERNATING_RL</name><operator>)</operator> <operator>&amp;&amp;</operator>

<operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>format</name></name> <operator>==</operator> <name>SIDE_BY_SIDE_LR</name> <operator>||</operator>

<name><name>s</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>format</name></name> <operator>==</operator> <name>SIDE_BY_SIDE_RL</name> <operator>||</operator>

<name><name>s</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>format</name></name> <operator>==</operator> <name>SIDE_BY_SIDE_2_LR</name> <operator>||</operator>

<name><name>s</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>format</name></name> <operator>==</operator> <name>SIDE_BY_SIDE_2_RL</name> <operator>||</operator>

<name><name>s</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>format</name></name> <operator>==</operator> <name>ABOVE_BELOW_LR</name> <operator>||</operator>

<name><name>s</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>format</name></name> <operator>==</operator> <name>ABOVE_BELOW_RL</name> <operator>||</operator>

<name><name>s</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>format</name></name> <operator>==</operator> <name>ABOVE_BELOW_2_LR</name> <operator>||</operator>

<name><name>s</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>format</name></name> <operator>==</operator> <name>ABOVE_BELOW_2_RL</name> <operator>||</operator>

<name><name>s</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>format</name></name> <operator>==</operator> <name>INTERLEAVE_ROWS_LR</name> <operator>||</operator>

<name><name>s</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>format</name></name> <operator>==</operator> <name>INTERLEAVE_ROWS_RL</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>oright</name> <operator>=</operator> <call><name>av_frame_clone</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>prev</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>oleft</name> <operator>=</operator> <call><name>av_frame_clone</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>prev</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>oright</name> <operator>||</operator> <operator>!</operator><name>oleft</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>oright</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>oleft</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>prev</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>inpicref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>out</name><operator>.</operator><name>format</name></name> <operator>==</operator> <name>MONO_L</name> <operator>||</operator>

<name><name>s</name><operator>-&gt;</operator><name>out</name><operator>.</operator><name>format</name></name> <operator>==</operator> <name>MONO_R</name><operator>)</operator> <operator>&amp;&amp;</operator>

<operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>format</name></name> <operator>==</operator> <name>SIDE_BY_SIDE_LR</name> <operator>||</operator>

<name><name>s</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>format</name></name> <operator>==</operator> <name>SIDE_BY_SIDE_RL</name> <operator>||</operator>

<name><name>s</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>format</name></name> <operator>==</operator> <name>SIDE_BY_SIDE_2_LR</name> <operator>||</operator>

<name><name>s</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>format</name></name> <operator>==</operator> <name>SIDE_BY_SIDE_2_RL</name> <operator>||</operator>

<name><name>s</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>format</name></name> <operator>==</operator> <name>ABOVE_BELOW_LR</name> <operator>||</operator>

<name><name>s</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>format</name></name> <operator>==</operator> <name>ABOVE_BELOW_RL</name> <operator>||</operator>

<name><name>s</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>format</name></name> <operator>==</operator> <name>ABOVE_BELOW_2_LR</name> <operator>||</operator>

<name><name>s</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>format</name></name> <operator>==</operator> <name>ABOVE_BELOW_2_RL</name> <operator>||</operator>

<name><name>s</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>format</name></name> <operator>==</operator> <name>INTERLEAVE_ROWS_LR</name> <operator>||</operator>

<name><name>s</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>format</name></name> <operator>==</operator> <name>INTERLEAVE_ROWS_RL</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>out</name> <operator>=</operator> <name>oleft</name> <operator>=</operator> <name>oright</name> <operator>=</operator> <call><name>av_frame_clone</name><argument_list>(<argument><expr><name>inpicref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>out</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>prev</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>inpicref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>out</name><operator>.</operator><name>format</name></name> <operator>==</operator> <name>MONO_L</name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>format</name></name> <operator>==</operator> <name>ALTERNATING_LR</name><operator>)</operator> <operator>||</operator>

<operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>out</name><operator>.</operator><name>format</name></name> <operator>==</operator> <name>MONO_R</name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>format</name></name> <operator>==</operator> <name>ALTERNATING_RL</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>prev</name><operator>-&gt;</operator><name>pts</name></name> <operator>/=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_filter_frame</name><argument_list>(<argument><expr><name>outlink</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>prev</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>inpicref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>out</name><operator>.</operator><name>format</name></name> <operator>==</operator> <name>MONO_L</name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>format</name></name> <operator>==</operator> <name>ALTERNATING_RL</name><operator>)</operator> <operator>||</operator>

<operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>out</name><operator>.</operator><name>format</name></name> <operator>==</operator> <name>MONO_R</name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>format</name></name> <operator>==</operator> <name>ALTERNATING_LR</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>prev</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>inpicref</name><operator>-&gt;</operator><name>pts</name></name> <operator>/=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<return>return <expr><call><name>ff_filter_frame</name><argument_list>(<argument><expr><name>outlink</name></expr></argument>, <argument><expr><name>inpicref</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>out</name><operator>.</operator><name>format</name></name> <operator>==</operator> <name>ALTERNATING_LR</name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>format</name></name> <operator>==</operator> <name>ALTERNATING_RL</name><operator>)</operator> <operator>||</operator>

<operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>out</name><operator>.</operator><name>format</name></name> <operator>==</operator> <name>ALTERNATING_RL</name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>format</name></name> <operator>==</operator> <name>ALTERNATING_LR</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>FFSWAP</name><argument_list>(<argument><expr><name>int64_t</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>prev</name><operator>-&gt;</operator><name>pts</name></name></expr></argument>, <argument><expr><name><name>inpicref</name><operator>-&gt;</operator><name>pts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_filter_frame</name><argument_list>(<argument><expr><name>outlink</name></expr></argument>, <argument><expr><name>inpicref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_filter_frame</name><argument_list>(<argument><expr><name>outlink</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>prev</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>out</name> <operator>=</operator> <name>oleft</name> <operator>=</operator> <name>oright</name> <operator>=</operator> <call><name>ff_get_video_buffer</name><argument_list>(<argument><expr><name>outlink</name></expr></argument>, <argument><expr><name><name>outlink</name><operator>-&gt;</operator><name>w</name></name></expr></argument>, <argument><expr><name><name>outlink</name><operator>-&gt;</operator><name>h</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>out</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>prev</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>inpicref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_frame_copy_props</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>inpicref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>out</name><operator>.</operator><name>format</name></name> <operator>==</operator> <name>ALTERNATING_LR</name> <operator>||</operator>

<name><name>s</name><operator>-&gt;</operator><name>out</name><operator>.</operator><name>format</name></name> <operator>==</operator> <name>ALTERNATING_RL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>oright</name> <operator>=</operator> <call><name>ff_get_video_buffer</name><argument_list>(<argument><expr><name>outlink</name></expr></argument>, <argument><expr><name><name>outlink</name><operator>-&gt;</operator><name>w</name></name></expr></argument>, <argument><expr><name><name>outlink</name><operator>-&gt;</operator><name>h</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>oright</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>oleft</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>prev</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>inpicref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_frame_copy_props</name><argument_list>(<argument><expr><name>oright</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>prev</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>hsub</name> <init>= <expr><ternary><condition><expr><name>i</name> <operator>==</operator> <literal type="number">1</literal> <operator>||</operator> <name>i</name> <operator>==</operator> <literal type="number">2</literal></expr> ?</condition><then> <expr><name><name>s</name><operator>-&gt;</operator><name>hsub</name></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>vsub</name> <init>= <expr><ternary><condition><expr><name>i</name> <operator>==</operator> <literal type="number">1</literal> <operator>||</operator> <name>i</name> <operator>==</operator> <literal type="number">2</literal></expr> ?</condition><then> <expr><name><name>s</name><operator>-&gt;</operator><name>vsub</name></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>in_off_left</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><call><name>AV_CEIL_RSHIFT</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>row_left</name></name></expr></argument>, <argument><expr><name>vsub</name></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>off_lstep</name></name><operator>)</operator> <operator>*</operator> <name><name>ileft</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <call><name>AV_CEIL_RSHIFT</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>off_left</name></name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>pixstep</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>hsub</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>in_off_right</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><call><name>AV_CEIL_RSHIFT</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>row_right</name></name></expr></argument>, <argument><expr><name>vsub</name></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>off_rstep</name></name><operator>)</operator> <operator>*</operator> <name><name>iright</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <call><name>AV_CEIL_RSHIFT</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>off_right</name></name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>pixstep</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>hsub</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out_off_left</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><call><name>AV_CEIL_RSHIFT</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>out</name><operator>.</operator><name>row_left</name></name></expr></argument>, <argument><expr><name>vsub</name></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>out</name><operator>.</operator><name>off_lstep</name></name><operator>)</operator> <operator>*</operator> <name><name>oleft</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <call><name>AV_CEIL_RSHIFT</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>out</name><operator>.</operator><name>off_left</name></name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>pixstep</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>hsub</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out_off_right</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><call><name>AV_CEIL_RSHIFT</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>out</name><operator>.</operator><name>row_right</name></name></expr></argument>, <argument><expr><name>vsub</name></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>out</name><operator>.</operator><name>off_rstep</name></name><operator>)</operator> <operator>*</operator> <name><name>oright</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <call><name>AV_CEIL_RSHIFT</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>out</name><operator>.</operator><name>off_right</name></name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>pixstep</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>hsub</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<switch>switch <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>out</name><operator>.</operator><name>format</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>ALTERNATING_LR</name></expr>:</case>

<case>case <expr><name>ALTERNATING_RL</name></expr>:</case>

<switch>switch <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>format</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>INTERLEAVE_ROWS_LR</name></expr>:</case>

<case>case <expr><name>INTERLEAVE_ROWS_RL</name></expr>:</case>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>nb_planes</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>oleft</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>oright</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<case>case <expr><name>ABOVE_BELOW_LR</name></expr>:</case>

<case>case <expr><name>ABOVE_BELOW_RL</name></expr>:</case>

<case>case <expr><name>ABOVE_BELOW_2_LR</name></expr>:</case>

<case>case <expr><name>ABOVE_BELOW_2_RL</name></expr>:</case>

<case>case <expr><name>SIDE_BY_SIDE_LR</name></expr>:</case>

<case>case <expr><name>SIDE_BY_SIDE_RL</name></expr>:</case>

<case>case <expr><name>SIDE_BY_SIDE_2_LR</name></expr>:</case>

<case>case <expr><name>SIDE_BY_SIDE_2_RL</name></expr>:</case>

<expr_stmt><expr><name><name>oleft</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator> <name><name>outlink</name><operator>-&gt;</operator><name>w</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>oright</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator> <name><name>outlink</name><operator>-&gt;</operator><name>w</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>oleft</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <name><name>outlink</name><operator>-&gt;</operator><name>h</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>oright</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <name><name>outlink</name><operator>-&gt;</operator><name>h</name></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>nb_planes</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>oleft</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+=</operator> <name><name>s</name><operator>-&gt;</operator><name>in_off_left</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>oright</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+=</operator> <name><name>s</name><operator>-&gt;</operator><name>in_off_right</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<break>break;</break>

<default>default:</default>

<goto>goto <name>copy</name>;</goto>

<break>break;</break>

</block_content>}</block></switch>

<break>break;</break>

<case>case <expr><name>HDMI</name></expr>:</case>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>nb_planes</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>, <decl><type ref="prev"/><name>h</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>height</name></name> <operator>&gt;&gt;</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><name>i</name> <operator>==</operator> <literal type="number">1</literal> <operator>||</operator> <name>i</name> <operator>==</operator> <literal type="number">2</literal><operator>)</operator></expr> ?</condition><then> <expr><name><name>s</name><operator>-&gt;</operator><name>vsub</name></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>b</name> <init>= <expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>blanks</name></name><operator>)</operator> <operator>&gt;&gt;</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><name>i</name> <operator>==</operator> <literal type="number">1</literal> <operator>||</operator> <name>i</name> <operator>==</operator> <literal type="number">2</literal><operator>)</operator></expr> ?</condition><then> <expr><name><name>s</name><operator>-&gt;</operator><name>vsub</name></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <name>h</name></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>h</name> <operator>+</operator> <name>b</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>oleft</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name>j</name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></for>

<case>case <expr><name>SIDE_BY_SIDE_LR</name></expr>:</case>

<case>case <expr><name>SIDE_BY_SIDE_RL</name></expr>:</case>

<case>case <expr><name>SIDE_BY_SIDE_2_LR</name></expr>:</case>

<case>case <expr><name>SIDE_BY_SIDE_2_RL</name></expr>:</case>

<case>case <expr><name>ABOVE_BELOW_LR</name></expr>:</case>

<case>case <expr><name>ABOVE_BELOW_RL</name></expr>:</case>

<case>case <expr><name>ABOVE_BELOW_2_LR</name></expr>:</case>

<case>case <expr><name>ABOVE_BELOW_2_RL</name></expr>:</case>

<case>case <expr><name>INTERLEAVE_ROWS_LR</name></expr>:</case>

<case>case <expr><name>INTERLEAVE_ROWS_RL</name></expr>:</case>

<label><name>copy</name>:</label>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>format</name></name> <operator>==</operator> <name>INTERLEAVE_COLS_LR</name> <operator>||</operator>

<name><name>s</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>format</name></name> <operator>==</operator> <name>INTERLEAVE_COLS_RL</name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>nb_planes</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>d</name> <init>= <expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>format</name></name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>!=</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>out</name><operator>.</operator><name>format</name></name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>interleave_cols_to_any</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>out_off_left</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>ileft</name></expr></argument>, <argument><expr><name>oleft</name></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>interleave_cols_to_any</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>out_off_right</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>iright</name></expr></argument>, <argument><expr><name>oright</name></expr></argument>, <argument><expr><operator>!</operator><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if> <else>else <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>nb_planes</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>av_image_copy_plane</name><argument_list>(<argument><expr><name><name>oleft</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name><name>out_off_left</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,

<argument><expr><name><name>oleft</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>out</name><operator>.</operator><name>row_step</name></name></expr></argument>,

<argument><expr><name><name>ileft</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>in_off_left</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,

<argument><expr><name><name>ileft</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>row_step</name></name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>pheight</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_image_copy_plane</name><argument_list>(<argument><expr><name><name>oright</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name><name>out_off_right</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,

<argument><expr><name><name>oright</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>out</name><operator>.</operator><name>row_step</name></name></expr></argument>,

<argument><expr><name><name>iright</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>in_off_right</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,

<argument><expr><name><name>iright</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>row_step</name></name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>pheight</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<case>case <expr><name>MONO_L</name></expr>:</case>

<expr_stmt><expr><name>iright</name> <operator>=</operator> <name>ileft</name></expr>;</expr_stmt>

<case>case <expr><name>MONO_R</name></expr>:</case>

<switch>switch <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>format</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>INTERLEAVE_ROWS_LR</name></expr>:</case>

<case>case <expr><name>INTERLEAVE_ROWS_RL</name></expr>:</case>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>nb_planes</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<case>case <expr><name>ABOVE_BELOW_LR</name></expr>:</case>

<case>case <expr><name>ABOVE_BELOW_RL</name></expr>:</case>

<case>case <expr><name>ABOVE_BELOW_2_LR</name></expr>:</case>

<case>case <expr><name>ABOVE_BELOW_2_RL</name></expr>:</case>

<case>case <expr><name>SIDE_BY_SIDE_LR</name></expr>:</case>

<case>case <expr><name>SIDE_BY_SIDE_RL</name></expr>:</case>

<case>case <expr><name>SIDE_BY_SIDE_2_LR</name></expr>:</case>

<case>case <expr><name>SIDE_BY_SIDE_2_RL</name></expr>:</case>

<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator> <name><name>outlink</name><operator>-&gt;</operator><name>w</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <name><name>outlink</name><operator>-&gt;</operator><name>h</name></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>nb_planes</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+=</operator> <name><name>s</name><operator>-&gt;</operator><name>in_off_left</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<break>break;</break>

<case>case <expr><name>INTERLEAVE_COLS_LR</name></expr>:</case>

<case>case <expr><name>INTERLEAVE_COLS_RL</name></expr>:</case>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>nb_planes</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>d</name> <init>= <expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>format</name></name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>!=</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>out</name><operator>.</operator><name>format</name></name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>interleave_cols_to_any</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>out_off_right</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>iright</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<break>break;</break>

<default>default:</default>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>nb_planes</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>av_image_copy_plane</name><argument_list>(<argument><expr><name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,

<argument><expr><name><name>iright</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>in_off_left</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,

<argument><expr><name><name>iright</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>row_step</name></name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>pheight</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<break>break;</break>

</block_content>}</block></switch>

<break>break;</break>

<case>case <expr><name>ANAGLYPH_RB_GRAY</name></expr>:</case>

<case>case <expr><name>ANAGLYPH_RG_GRAY</name></expr>:</case>

<case>case <expr><name>ANAGLYPH_RC_GRAY</name></expr>:</case>

<case>case <expr><name>ANAGLYPH_RC_HALF</name></expr>:</case>

<case>case <expr><name>ANAGLYPH_RC_COLOR</name></expr>:</case>

<case>case <expr><name>ANAGLYPH_RC_DUBOIS</name></expr>:</case>

<case>case <expr><name>ANAGLYPH_GM_GRAY</name></expr>:</case>

<case>case <expr><name>ANAGLYPH_GM_HALF</name></expr>:</case>

<case>case <expr><name>ANAGLYPH_GM_COLOR</name></expr>:</case>

<case>case <expr><name>ANAGLYPH_GM_DUBOIS</name></expr>:</case>

<case>case <expr><name>ANAGLYPH_YB_GRAY</name></expr>:</case>

<case>case <expr><name>ANAGLYPH_YB_HALF</name></expr>:</case>

<case>case <expr><name>ANAGLYPH_YB_COLOR</name></expr>:</case>

<case>case <expr><name>ANAGLYPH_YB_DUBOIS</name></expr>:</case> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>format</name></name> <operator>==</operator> <name>INTERLEAVE_COLS_LR</name> <operator>||</operator>

<name><name>s</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>format</name></name> <operator>==</operator> <name>INTERLEAVE_COLS_RL</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>d</name> <init>= <expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>format</name></name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>anaglyph_ic</name><argument_list>(<argument><expr><name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,

<argument><expr><name><name>ileft</name> <operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>in_off_left</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>d</name> <operator>*</operator> <literal type="number">3</literal></expr></argument>,

<argument><expr><name><name>iright</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>in_off_right</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><operator>!</operator><name>d</name><operator>)</operator> <operator>*</operator> <literal type="number">3</literal></expr></argument>,

<argument><expr><name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,

<argument><expr><name><name>ileft</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>row_step</name></name></expr></argument>,

<argument><expr><name><name>iright</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>row_step</name></name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>out</name><operator>.</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>out</name><operator>.</operator><name>height</name></name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>ana_matrix</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>ana_matrix</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>ana_matrix</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>ThreadData</name></type> <name>td</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>td</name><operator>.</operator><name>ileft</name></name> <operator>=</operator> <name>ileft</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>td</name><operator>.</operator><name>iright</name></name> <operator>=</operator> <name>iright</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>td</name><operator>.</operator><name>out</name></name> <operator>=</operator> <name>out</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>ctx</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>filter_slice</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>td</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,

<argument><expr><call><name>FFMIN</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>out</name><operator>.</operator><name>height</name></name></expr></argument>, <argument><expr><call><name>ff_filter_get_nb_threads</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

</block_content>}</block>

<case>case <expr><name>CHECKERBOARD_RL</name></expr>:</case>

<case>case <expr><name>CHECKERBOARD_LR</name></expr>:</case>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>nb_planes</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>pheight</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name>y</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>d1</name> <init>= <expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>format</name></name> <operator>==</operator> <name>INTERLEAVE_COLS_LR</name> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>format</name></name> <operator>==</operator> <name>INTERLEAVE_COLS_RL</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>format</name></name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>!=</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>out</name><operator>.</operator><name>format</name></name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>d2</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>format</name></name> <operator>==</operator> <name>INTERLEAVE_COLS_LR</name> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>format</name></name> <operator>==</operator> <name>INTERLEAVE_COLS_RL</name><operator>)</operator></expr> ?</condition><then> <expr><operator>!</operator><name>d1</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>m</name> <init>= <expr><literal type="number">1</literal> <operator>+</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>format</name></name> <operator>==</operator> <name>INTERLEAVE_COLS_LR</name> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>format</name></name> <operator>==</operator> <name>INTERLEAVE_COLS_RL</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>left</name> <init>= <expr><name><name>ileft</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name><name>ileft</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name>y</name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>in_off_left</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name>d1</name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>pixstep</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>right</name> <init>= <expr><name><name>iright</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name><name>iright</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name>y</name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>in_off_right</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name>d2</name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>pixstep</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>p</name></decl>, <decl><type ref="prev"/><name>b</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>out</name><operator>.</operator><name>format</name></name> <operator>==</operator> <name>CHECKERBOARD_RL</name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>format</name></name> <operator>!=</operator> <name>INTERLEAVE_COLS_LR</name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>format</name></name> <operator>!=</operator> <name>INTERLEAVE_COLS_RL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>FFSWAP</name><argument_list>(<argument><expr><name>uint8_t</name><operator>*</operator></expr></argument>, <argument><expr><name>left</name></expr></argument>, <argument><expr><name>right</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<switch>switch <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>pixstep</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">1</literal></expr>:</case>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>b</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>p</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>x</name><operator>+=</operator><literal type="number">2</literal></expr><operator>,</operator> <expr><name>p</name><operator>++</operator></expr><operator>,</operator> <expr><name>b</name><operator>+=</operator><literal type="number">2</literal></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>dst</name><index>[<expr><name>x</name></expr> ]</index></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>b</name><operator>&amp;</operator><literal type="number">1</literal><operator>)</operator> <operator>==</operator> <operator>(</operator><name>y</name><operator>&amp;</operator><literal type="number">1</literal><operator>)</operator></expr> ?</condition><then> <expr><name><name>left</name><index>[<expr><name>p</name><operator>*</operator><name>m</name></expr>]</index></name></expr> </then><else>: <expr><name><name>right</name><index>[<expr><name>p</name><operator>*</operator><name>m</name></expr>]</index></name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><index>[<expr><name>x</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>b</name><operator>&amp;</operator><literal type="number">1</literal><operator>)</operator> <operator>!=</operator> <operator>(</operator><name>y</name><operator>&amp;</operator><literal type="number">1</literal><operator>)</operator></expr> ?</condition><then> <expr><name><name>left</name><index>[<expr><name>p</name><operator>*</operator><name>m</name></expr>]</index></name></expr> </then><else>: <expr><name><name>right</name><index>[<expr><name>p</name><operator>*</operator><name>m</name></expr>]</index></name></expr></else></ternary></expr>;</expr_stmt>

</block_content>}</block></for>

<break>break;</break>

<case>case <expr><literal type="number">2</literal></expr>:</case>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>b</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>p</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>x</name><operator>+=</operator><literal type="number">4</literal></expr><operator>,</operator> <expr><name>p</name><operator>+=</operator><literal type="number">2</literal></expr><operator>,</operator> <expr><name>b</name><operator>+=</operator><literal type="number">2</literal></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>AV_WN16</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dst</name><index>[<expr><name>x</name></expr> ]</index></name></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name>b</name><operator>&amp;</operator><literal type="number">1</literal><operator>)</operator> <operator>==</operator> <operator>(</operator><name>y</name><operator>&amp;</operator><literal type="number">1</literal><operator>)</operator></expr> ?</condition><then> <expr><call><name>AV_RN16</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>left</name><index>[<expr><name>p</name><operator>*</operator><name>m</name></expr>]</index></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>AV_RN16</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>right</name><index>[<expr><name>p</name><operator>*</operator><name>m</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_WN16</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dst</name><index>[<expr><name>x</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name>b</name><operator>&amp;</operator><literal type="number">1</literal><operator>)</operator> <operator>!=</operator> <operator>(</operator><name>y</name><operator>&amp;</operator><literal type="number">1</literal><operator>)</operator></expr> ?</condition><then> <expr><call><name>AV_RN16</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>left</name><index>[<expr><name>p</name><operator>*</operator><name>m</name></expr>]</index></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>AV_RN16</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>right</name><index>[<expr><name>p</name><operator>*</operator><name>m</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<break>break;</break>

<case>case <expr><literal type="number">3</literal></expr>:</case>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>b</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>p</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>x</name><operator>+=</operator><literal type="number">6</literal></expr><operator>,</operator> <expr><name>p</name><operator>+=</operator><literal type="number">3</literal></expr><operator>,</operator> <expr><name>b</name><operator>+=</operator><literal type="number">2</literal></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>AV_WB24</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dst</name><index>[<expr><name>x</name></expr> ]</index></name></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name>b</name><operator>&amp;</operator><literal type="number">1</literal><operator>)</operator> <operator>==</operator> <operator>(</operator><name>y</name><operator>&amp;</operator><literal type="number">1</literal><operator>)</operator></expr> ?</condition><then> <expr><call><name>AV_RB24</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>left</name><index>[<expr><name>p</name><operator>*</operator><name>m</name></expr>]</index></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>AV_RB24</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>right</name><index>[<expr><name>p</name><operator>*</operator><name>m</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_WB24</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dst</name><index>[<expr><name>x</name><operator>+</operator><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name>b</name><operator>&amp;</operator><literal type="number">1</literal><operator>)</operator> <operator>!=</operator> <operator>(</operator><name>y</name><operator>&amp;</operator><literal type="number">1</literal><operator>)</operator></expr> ?</condition><then> <expr><call><name>AV_RB24</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>left</name><index>[<expr><name>p</name><operator>*</operator><name>m</name></expr>]</index></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>AV_RB24</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>right</name><index>[<expr><name>p</name><operator>*</operator><name>m</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<break>break;</break>

<case>case <expr><literal type="number">4</literal></expr>:</case>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>b</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>p</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>x</name><operator>+=</operator><literal type="number">8</literal></expr><operator>,</operator> <expr><name>p</name><operator>+=</operator><literal type="number">4</literal></expr><operator>,</operator> <expr><name>b</name><operator>+=</operator><literal type="number">2</literal></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>AV_WN32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dst</name><index>[<expr><name>x</name></expr> ]</index></name></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name>b</name><operator>&amp;</operator><literal type="number">1</literal><operator>)</operator> <operator>==</operator> <operator>(</operator><name>y</name><operator>&amp;</operator><literal type="number">1</literal><operator>)</operator></expr> ?</condition><then> <expr><call><name>AV_RN32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>left</name><index>[<expr><name>p</name><operator>*</operator><name>m</name></expr>]</index></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>AV_RN32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>right</name><index>[<expr><name>p</name><operator>*</operator><name>m</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_WN32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dst</name><index>[<expr><name>x</name><operator>+</operator><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name>b</name><operator>&amp;</operator><literal type="number">1</literal><operator>)</operator> <operator>!=</operator> <operator>(</operator><name>y</name><operator>&amp;</operator><literal type="number">1</literal><operator>)</operator></expr> ?</condition><then> <expr><call><name>AV_RN32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>left</name><index>[<expr><name>p</name><operator>*</operator><name>m</name></expr>]</index></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>AV_RN32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>right</name><index>[<expr><name>p</name><operator>*</operator><name>m</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<break>break;</break>

<case>case <expr><literal type="number">6</literal></expr>:</case>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>b</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>p</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>x</name><operator>+=</operator><literal type="number">12</literal></expr><operator>,</operator> <expr><name>p</name><operator>+=</operator><literal type="number">6</literal></expr><operator>,</operator> <expr><name>b</name><operator>+=</operator><literal type="number">2</literal></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>AV_WB48</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dst</name><index>[<expr><name>x</name></expr> ]</index></name></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name>b</name><operator>&amp;</operator><literal type="number">1</literal><operator>)</operator> <operator>==</operator> <operator>(</operator><name>y</name><operator>&amp;</operator><literal type="number">1</literal><operator>)</operator></expr> ?</condition><then> <expr><call><name>AV_RB48</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>left</name><index>[<expr><name>p</name><operator>*</operator><name>m</name></expr>]</index></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>AV_RB48</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>right</name><index>[<expr><name>p</name><operator>*</operator><name>m</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_WB48</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dst</name><index>[<expr><name>x</name><operator>+</operator><literal type="number">6</literal></expr>]</index></name></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name>b</name><operator>&amp;</operator><literal type="number">1</literal><operator>)</operator> <operator>!=</operator> <operator>(</operator><name>y</name><operator>&amp;</operator><literal type="number">1</literal><operator>)</operator></expr> ?</condition><then> <expr><call><name>AV_RB48</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>left</name><index>[<expr><name>p</name><operator>*</operator><name>m</name></expr>]</index></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>AV_RB48</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>right</name><index>[<expr><name>p</name><operator>*</operator><name>m</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<break>break;</break>

<case>case <expr><literal type="number">8</literal></expr>:</case>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>b</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>p</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>x</name><operator>+=</operator><literal type="number">16</literal></expr><operator>,</operator> <expr><name>p</name><operator>+=</operator><literal type="number">8</literal></expr><operator>,</operator> <expr><name>b</name><operator>+=</operator><literal type="number">2</literal></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>AV_WN64</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dst</name><index>[<expr><name>x</name></expr> ]</index></name></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name>b</name><operator>&amp;</operator><literal type="number">1</literal><operator>)</operator> <operator>==</operator> <operator>(</operator><name>y</name><operator>&amp;</operator><literal type="number">1</literal><operator>)</operator></expr> ?</condition><then> <expr><call><name>AV_RN64</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>left</name><index>[<expr><name>p</name><operator>*</operator><name>m</name></expr>]</index></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>AV_RN64</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>right</name><index>[<expr><name>p</name><operator>*</operator><name>m</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_WN64</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dst</name><index>[<expr><name>x</name><operator>+</operator><literal type="number">8</literal></expr>]</index></name></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name>b</name><operator>&amp;</operator><literal type="number">1</literal><operator>)</operator> <operator>!=</operator> <operator>(</operator><name>y</name><operator>&amp;</operator><literal type="number">1</literal><operator>)</operator></expr> ?</condition><then> <expr><call><name>AV_RN64</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>left</name><index>[<expr><name>p</name><operator>*</operator><name>m</name></expr>]</index></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>AV_RN64</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>right</name><index>[<expr><name>p</name><operator>*</operator><name>m</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></for>

</block_content>}</block></for>

<break>break;</break>

<case>case <expr><name>INTERLEAVE_COLS_LR</name></expr>:</case>

<case>case <expr><name>INTERLEAVE_COLS_RL</name></expr>:</case>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>nb_planes</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>d</name> <init>= <expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>format</name></name> <operator>==</operator> <name>INTERLEAVE_COLS_LR</name> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>format</name></name> <operator>==</operator> <name>INTERLEAVE_COLS_RL</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>m</name> <init>= <expr><literal type="number">1</literal> <operator>+</operator> <name>d</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>pheight</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name>y</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>left</name> <init>= <expr><name><name>ileft</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name><name>ileft</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name>y</name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>row_step</name></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>in_off_left</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name>d</name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>pixstep</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>right</name> <init>= <expr><name><name>iright</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name><name>iright</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name>y</name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>row_step</name></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>in_off_right</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>p</name></decl>, <decl><type ref="prev"/><name>b</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>out</name><operator>.</operator><name>format</name></name> <operator>==</operator> <name>INTERLEAVE_COLS_LR</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>FFSWAP</name><argument_list>(<argument><expr><name>uint8_t</name><operator>*</operator></expr></argument>, <argument><expr><name>left</name></expr></argument>, <argument><expr><name>right</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<switch>switch <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>pixstep</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">1</literal></expr>:</case>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>b</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>p</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>x</name><operator>+=</operator><literal type="number">2</literal></expr><operator>,</operator> <expr><name>p</name><operator>++</operator></expr><operator>,</operator> <expr><name>b</name><operator>+=</operator><literal type="number">2</literal></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>dst</name><index>[<expr><name>x</name></expr> ]</index></name> <operator>=</operator> <ternary><condition><expr><name>b</name><operator>&amp;</operator><literal type="number">1</literal></expr> ?</condition><then> <expr><name><name>left</name><index>[<expr><name>p</name><operator>*</operator><name>m</name></expr>]</index></name></expr> </then><else>: <expr><name><name>right</name><index>[<expr><name>p</name><operator>*</operator><name>m</name></expr>]</index></name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><index>[<expr><name>x</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><operator>!</operator><operator>(</operator><name>b</name><operator>&amp;</operator><literal type="number">1</literal><operator>)</operator></expr> ?</condition><then> <expr><name><name>left</name><index>[<expr><name>p</name><operator>*</operator><name>m</name></expr>]</index></name></expr> </then><else>: <expr><name><name>right</name><index>[<expr><name>p</name><operator>*</operator><name>m</name></expr>]</index></name></expr></else></ternary></expr>;</expr_stmt>

</block_content>}</block></for>

<break>break;</break>

<case>case <expr><literal type="number">2</literal></expr>:</case>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>b</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>p</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>x</name><operator>+=</operator><literal type="number">4</literal></expr><operator>,</operator> <expr><name>p</name><operator>+=</operator><literal type="number">2</literal></expr><operator>,</operator> <expr><name>b</name><operator>+=</operator><literal type="number">2</literal></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>AV_WN16</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dst</name><index>[<expr><name>x</name></expr> ]</index></name></expr></argument>, <argument><expr><ternary><condition><expr><name>b</name><operator>&amp;</operator><literal type="number">1</literal></expr> ?</condition><then> <expr><call><name>AV_RN16</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>left</name><index>[<expr><name>p</name><operator>*</operator><name>m</name></expr>]</index></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>AV_RN16</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>right</name><index>[<expr><name>p</name><operator>*</operator><name>m</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_WN16</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dst</name><index>[<expr><name>x</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><ternary><condition><expr><operator>!</operator><operator>(</operator><name>b</name><operator>&amp;</operator><literal type="number">1</literal><operator>)</operator></expr> ?</condition><then> <expr><call><name>AV_RN16</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>left</name><index>[<expr><name>p</name><operator>*</operator><name>m</name></expr>]</index></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>AV_RN16</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>right</name><index>[<expr><name>p</name><operator>*</operator><name>m</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<break>break;</break>

<case>case <expr><literal type="number">3</literal></expr>:</case>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>b</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>p</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>x</name><operator>+=</operator><literal type="number">6</literal></expr><operator>,</operator> <expr><name>p</name><operator>+=</operator><literal type="number">3</literal></expr><operator>,</operator> <expr><name>b</name><operator>+=</operator><literal type="number">2</literal></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>AV_WB24</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dst</name><index>[<expr><name>x</name></expr> ]</index></name></expr></argument>, <argument><expr><ternary><condition><expr><name>b</name><operator>&amp;</operator><literal type="number">1</literal></expr> ?</condition><then> <expr><call><name>AV_RB24</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>left</name><index>[<expr><name>p</name><operator>*</operator><name>m</name></expr>]</index></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>AV_RB24</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>right</name><index>[<expr><name>p</name><operator>*</operator><name>m</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_WB24</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dst</name><index>[<expr><name>x</name><operator>+</operator><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><ternary><condition><expr><operator>!</operator><operator>(</operator><name>b</name><operator>&amp;</operator><literal type="number">1</literal><operator>)</operator></expr> ?</condition><then> <expr><call><name>AV_RB24</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>left</name><index>[<expr><name>p</name><operator>*</operator><name>m</name></expr>]</index></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>AV_RB24</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>right</name><index>[<expr><name>p</name><operator>*</operator><name>m</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<break>break;</break>

<case>case <expr><literal type="number">4</literal></expr>:</case>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>b</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>p</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>x</name><operator>+=</operator><literal type="number">8</literal></expr><operator>,</operator> <expr><name>p</name><operator>+=</operator><literal type="number">4</literal></expr><operator>,</operator> <expr><name>b</name><operator>+=</operator><literal type="number">2</literal></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>AV_WN32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dst</name><index>[<expr><name>x</name></expr> ]</index></name></expr></argument>, <argument><expr><ternary><condition><expr><name>b</name><operator>&amp;</operator><literal type="number">1</literal></expr> ?</condition><then> <expr><call><name>AV_RN32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>left</name><index>[<expr><name>p</name><operator>*</operator><name>m</name></expr>]</index></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>AV_RN32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>right</name><index>[<expr><name>p</name><operator>*</operator><name>m</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_WN32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dst</name><index>[<expr><name>x</name><operator>+</operator><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><ternary><condition><expr><operator>!</operator><operator>(</operator><name>b</name><operator>&amp;</operator><literal type="number">1</literal><operator>)</operator></expr> ?</condition><then> <expr><call><name>AV_RN32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>left</name><index>[<expr><name>p</name><operator>*</operator><name>m</name></expr>]</index></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>AV_RN32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>right</name><index>[<expr><name>p</name><operator>*</operator><name>m</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<break>break;</break>

<case>case <expr><literal type="number">6</literal></expr>:</case>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>b</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>p</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>x</name><operator>+=</operator><literal type="number">12</literal></expr><operator>,</operator> <expr><name>p</name><operator>+=</operator><literal type="number">6</literal></expr><operator>,</operator> <expr><name>b</name><operator>+=</operator><literal type="number">2</literal></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>AV_WB48</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dst</name><index>[<expr><name>x</name></expr> ]</index></name></expr></argument>, <argument><expr><ternary><condition><expr><name>b</name><operator>&amp;</operator><literal type="number">1</literal></expr> ?</condition><then> <expr><call><name>AV_RB48</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>left</name><index>[<expr><name>p</name><operator>*</operator><name>m</name></expr>]</index></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>AV_RB48</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>right</name><index>[<expr><name>p</name><operator>*</operator><name>m</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_WB48</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dst</name><index>[<expr><name>x</name><operator>+</operator><literal type="number">6</literal></expr>]</index></name></expr></argument>, <argument><expr><ternary><condition><expr><operator>!</operator><operator>(</operator><name>b</name><operator>&amp;</operator><literal type="number">1</literal><operator>)</operator></expr> ?</condition><then> <expr><call><name>AV_RB48</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>left</name><index>[<expr><name>p</name><operator>*</operator><name>m</name></expr>]</index></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>AV_RB48</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>right</name><index>[<expr><name>p</name><operator>*</operator><name>m</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<break>break;</break>

<case>case <expr><literal type="number">8</literal></expr>:</case>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>b</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>p</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>x</name><operator>+=</operator><literal type="number">16</literal></expr><operator>,</operator> <expr><name>p</name><operator>+=</operator><literal type="number">8</literal></expr><operator>,</operator> <expr><name>b</name><operator>+=</operator><literal type="number">2</literal></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>AV_WN64</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dst</name><index>[<expr><name>x</name></expr> ]</index></name></expr></argument>, <argument><expr><ternary><condition><expr><name>b</name><operator>&amp;</operator><literal type="number">1</literal></expr> ?</condition><then> <expr><call><name>AV_RN64</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>left</name><index>[<expr><name>p</name><operator>*</operator><name>m</name></expr>]</index></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>AV_RN64</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>right</name><index>[<expr><name>p</name><operator>*</operator><name>m</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_WN64</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dst</name><index>[<expr><name>x</name><operator>+</operator><literal type="number">8</literal></expr>]</index></name></expr></argument>, <argument><expr><ternary><condition><expr><operator>!</operator><operator>(</operator><name>b</name><operator>&amp;</operator><literal type="number">1</literal><operator>)</operator></expr> ?</condition><then> <expr><call><name>AV_RN64</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>left</name><index>[<expr><name>p</name><operator>*</operator><name>m</name></expr>]</index></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>AV_RN64</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>right</name><index>[<expr><name>p</name><operator>*</operator><name>m</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></for>

</block_content>}</block></for>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name>oright</name> <operator>!=</operator> <name>oleft</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>out</name><operator>.</operator><name>format</name></name> <operator>==</operator> <name>ALTERNATING_LR</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>FFSWAP</name><argument_list>(<argument><expr><name>AVFrame</name> <operator>*</operator></expr></argument>, <argument><expr><name>oleft</name></expr></argument>, <argument><expr><name>oright</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>oright</name><operator>-&gt;</operator><name>pts</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>prev</name><operator>-&gt;</operator><name>pts</name></name> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_filter_frame</name><argument_list>(<argument><expr><name>outlink</name></expr></argument>, <argument><expr><name>oright</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>out</name> <operator>=</operator> <name>oleft</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>oleft</name><operator>-&gt;</operator><name>pts</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>prev</name><operator>-&gt;</operator><name>pts</name></name> <operator>+</operator> <name><name>inpicref</name><operator>-&gt;</operator><name>pts</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>prev</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <name>inpicref</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>format</name></name> <operator>==</operator> <name>ALTERNATING_LR</name> <operator>||</operator>

<name><name>s</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>format</name></name> <operator>==</operator> <name>ALTERNATING_RL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>pts</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>prev</name><operator>-&gt;</operator><name>pts</name></name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>prev</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>inpicref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>prev</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>inpicref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>sample_aspect_ratio</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>aspect</name></name></expr>;</expr_stmt>

<return>return <expr><call><name>ff_filter_frame</name><argument_list>(<argument><expr><name>outlink</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>void</name></type> <name>uninit</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>Stereo3DContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>prev</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVFilterPad</name></type> <name><name>stereo3d_inputs</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"default"</literal></expr>,

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,

<expr><operator>.</operator><name>filter_frame</name> <operator>=</operator> <name>filter_frame</name></expr>,

}</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVFilterPad</name></type> <name><name>stereo3d_outputs</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"default"</literal></expr>,

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,

<expr><operator>.</operator><name>config_props</name> <operator>=</operator> <name>config_output</name></expr>,

}</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFilter</name></type> <name>ff_vf_stereo3d</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"stereo3d"</literal></expr>,

<expr><operator>.</operator><name>description</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"Convert video stereoscopic 3D view."</literal></expr></argument>)</argument_list></call></expr>,

<expr><operator>.</operator><name>priv_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>Stereo3DContext</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><operator>.</operator><name>uninit</name> <operator>=</operator> <name>uninit</name></expr>,

<expr><operator>.</operator><name>query_formats</name> <operator>=</operator> <name>query_formats</name></expr>,

<expr><operator>.</operator><name>inputs</name> <operator>=</operator> <name>stereo3d_inputs</name></expr>,

<expr><operator>.</operator><name>outputs</name> <operator>=</operator> <name>stereo3d_outputs</name></expr>,

<expr><operator>.</operator><name>priv_class</name> <operator>=</operator> <operator>&amp;</operator><name>stereo3d_class</name></expr>,

<expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>AVFILTER_FLAG_SLICE_THREADS</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

</unit>
