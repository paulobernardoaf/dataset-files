<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavfilter\vf_normalize.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/imgutils.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/intreadwrite.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/opt.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/pixdesc.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avfilter.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"drawutils.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"formats.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"video.h"</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct <name>NormalizeHistory</name> <block>{

<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>history</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint64_t</name></type> <name>history_sum</name></decl>;</decl_stmt> 

}</block></struct></type> <name>NormalizeHistory</name>;</typedef>

<typedef>typedef <type><struct>struct <name>NormalizeLocal</name> <block>{

<decl_stmt><decl><type><name>uint16_t</name></type> <name>in</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>float</name></type> <name>smoothed</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>float</name></type> <name>out</name></decl>;</decl_stmt> 

}</block></struct></type> <name>NormalizeLocal</name>;</typedef>

<typedef>typedef <type><struct>struct <name>NormalizeContext</name> <block>{

<decl_stmt><decl><type><specifier>const</specifier> <name>AVClass</name> <modifier>*</modifier></type><name>class</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>blackpt</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>whitept</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>smoothing</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>independence</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>strength</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>co</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>depth</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>sblackpt</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>swhitept</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>num_components</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>step</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>history_len</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>frame_num</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>NormalizeHistory</name></type> <name><name>min</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>, <name><name>max</name><index>[<expr><literal type="number">3</literal></expr>]</index></name>;</decl_stmt> 

<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>history_mem</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint16_t</name></type> <name><name>lut</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">65536</literal></expr>]</index></name></decl>;</decl_stmt> 

<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>find_min_max</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>NormalizeContext</name></name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>NormalizeLocal</name></type> <name><name>min</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>NormalizeLocal</name></type> <name><name>max</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>process</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>NormalizeContext</name></name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>out</name></decl></parameter>)</parameter_list>;</function_decl>

}</block></struct></type> <name>NormalizeContext</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OFFSET</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>offsetof(NormalizeContext, x)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLAGS</name></cpp:macro> <cpp:value>AV_OPT_FLAG_VIDEO_PARAM|AV_OPT_FLAG_FILTERING_PARAM</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLAGSR</name></cpp:macro> <cpp:value>AV_OPT_FLAG_VIDEO_PARAM|AV_OPT_FLAG_FILTERING_PARAM|AV_OPT_FLAG_RUNTIME_PARAM</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVOption</name></type> <name><name>normalize_options</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><literal type="string">"blackpt"</literal></expr>, <expr><literal type="string">"output color to which darkest input color is mapped"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>blackpt</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_COLOR</name></expr>, <expr><block>{ <expr><operator>.</operator><name>str</name> <operator>=</operator> <literal type="string">"black"</literal></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGSR</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"whitept"</literal></expr>, <expr><literal type="string">"output color to which brightest input color is mapped"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>whitept</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_COLOR</name></expr>, <expr><block>{ <expr><operator>.</operator><name>str</name> <operator>=</operator> <literal type="string">"white"</literal></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGSR</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"smoothing"</literal></expr>, <expr><literal type="string">"amount of temporal smoothing of the input range, to reduce flicker"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>smoothing</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">0</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>INT_MAX</name><operator>/</operator><literal type="number">8</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"independence"</literal></expr>, <expr><literal type="string">"proportion of independent to linked channel normalization"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>independence</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_FLOAT</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name><operator>=</operator><literal type="number">1.0</literal></expr>}</block></expr>, <expr><literal type="number">0.0</literal></expr>, <expr><literal type="number">1.0</literal></expr>, <expr><name>FLAGSR</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"strength"</literal></expr>, <expr><literal type="string">"strength of filter, from no effect to full normalization"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>strength</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_FLOAT</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name><operator>=</operator><literal type="number">1.0</literal></expr>}</block></expr>, <expr><literal type="number">0.0</literal></expr>, <expr><literal type="number">1.0</literal></expr>, <expr><name>FLAGSR</name></expr> }</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>AVFILTER_DEFINE_CLASS</name><argument_list>(<argument><expr><name>normalize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>find_min_max</name><parameter_list>(<parameter><decl><type><name>NormalizeContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>NormalizeLocal</name></type> <name><name>min</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>NormalizeLocal</name></type> <name><name>max</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl></parameter>)</parameter_list>

<block>{<block_content>

<for>for <control>(<init><decl><type><name>int</name></type> <name>c</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>c</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>c</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>min</name><index>[<expr><name>c</name></expr>]</index></name><operator>.</operator><name>in</name> <operator>=</operator> <name><name>max</name><index>[<expr><name>c</name></expr>]</index></name><operator>.</operator><name>in</name> <operator>=</operator> <name><name>in</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>co</name><index>[<expr><name>c</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<for>for <control>(<init><decl><type><name>int</name></type> <name>y</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name><name>in</name><operator>-&gt;</operator><name>height</name></name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>inp</name> <init>= <expr><name><name>in</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>y</name> <operator>*</operator> <name><name>in</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>x</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name><name>in</name><operator>-&gt;</operator><name>width</name></name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><decl><type><name>int</name></type> <name>c</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>c</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>c</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>min</name><index>[<expr><name>c</name></expr>]</index></name><operator>.</operator><name>in</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name><name>min</name><index>[<expr><name>c</name></expr>]</index></name><operator>.</operator><name>in</name></expr></argument>, <argument><expr><name><name>inp</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>co</name><index>[<expr><name>c</name></expr>]</index></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>max</name><index>[<expr><name>c</name></expr>]</index></name><operator>.</operator><name>in</name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name><name>max</name><index>[<expr><name>c</name></expr>]</index></name><operator>.</operator><name>in</name></expr></argument>, <argument><expr><name><name>inp</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>co</name><index>[<expr><name>c</name></expr>]</index></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>inp</name> <operator>+=</operator> <name><name>s</name><operator>-&gt;</operator><name>step</name></name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>process</name><parameter_list>(<parameter><decl><type><name>NormalizeContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>out</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<for>for <control>(<init><decl><type><name>int</name></type> <name>y</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name><name>in</name><operator>-&gt;</operator><name>height</name></name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>inp</name> <init>= <expr><name><name>in</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>y</name> <operator>*</operator> <name><name>in</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>outp</name> <init>= <expr><name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>y</name> <operator>*</operator> <name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>x</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name><name>in</name><operator>-&gt;</operator><name>width</name></name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><decl><type><name>int</name></type> <name>c</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>c</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>c</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>outp</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>co</name><index>[<expr><name>c</name></expr>]</index></name></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>lut</name><index>[<expr><name>c</name></expr>]</index><index>[<expr><name><name>inp</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>co</name><index>[<expr><name>c</name></expr>]</index></name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>num_components</name></name> <operator>==</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>outp</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>co</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>]</index></name> <operator>=</operator> <name><name>inp</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>co</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>inp</name> <operator>+=</operator> <name><name>s</name><operator>-&gt;</operator><name>step</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>outp</name> <operator>+=</operator> <name><name>s</name><operator>-&gt;</operator><name>step</name></name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>find_min_max_planar</name><parameter_list>(<parameter><decl><type><name>NormalizeContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>NormalizeLocal</name></type> <name><name>min</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>NormalizeLocal</name></type> <name><name>max</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>min</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>in</name> <operator>=</operator> <name><name>max</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>in</name> <operator>=</operator> <name><name>in</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>min</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>in</name> <operator>=</operator> <name><name>max</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>in</name> <operator>=</operator> <name><name>in</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>min</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>in</name> <operator>=</operator> <name><name>max</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>in</name> <operator>=</operator> <name><name>in</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>y</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name><name>in</name><operator>-&gt;</operator><name>height</name></name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>inrp</name> <init>= <expr><name><name>in</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <name>y</name> <operator>*</operator> <name><name>in</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>ingp</name> <init>= <expr><name><name>in</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>y</name> <operator>*</operator> <name><name>in</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>inbp</name> <init>= <expr><name><name>in</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name>y</name> <operator>*</operator> <name><name>in</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>x</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name><name>in</name><operator>-&gt;</operator><name>width</name></name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>min</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>in</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name><name>min</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>in</name></expr></argument>, <argument><expr><name><name>inrp</name><index>[<expr><name>x</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>max</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>in</name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name><name>max</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>in</name></expr></argument>, <argument><expr><name><name>inrp</name><index>[<expr><name>x</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>min</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>in</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name><name>min</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>in</name></expr></argument>, <argument><expr><name><name>ingp</name><index>[<expr><name>x</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>max</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>in</name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name><name>max</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>in</name></expr></argument>, <argument><expr><name><name>ingp</name><index>[<expr><name>x</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>min</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>in</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name><name>min</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>in</name></expr></argument>, <argument><expr><name><name>inbp</name><index>[<expr><name>x</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>max</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>in</name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name><name>max</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>in</name></expr></argument>, <argument><expr><name><name>inbp</name><index>[<expr><name>x</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>process_planar</name><parameter_list>(<parameter><decl><type><name>NormalizeContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>out</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<for>for <control>(<init><decl><type><name>int</name></type> <name>y</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name><name>in</name><operator>-&gt;</operator><name>height</name></name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>inrp</name> <init>= <expr><name><name>in</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <name>y</name> <operator>*</operator> <name><name>in</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>ingp</name> <init>= <expr><name><name>in</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>y</name> <operator>*</operator> <name><name>in</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>inbp</name> <init>= <expr><name><name>in</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name>y</name> <operator>*</operator> <name><name>in</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>inap</name> <init>= <expr><name><name>in</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>+</operator> <name>y</name> <operator>*</operator> <name><name>in</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>outrp</name> <init>= <expr><name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <name>y</name> <operator>*</operator> <name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>outgp</name> <init>= <expr><name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>y</name> <operator>*</operator> <name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>outbp</name> <init>= <expr><name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name>y</name> <operator>*</operator> <name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>outap</name> <init>= <expr><name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>+</operator> <name>y</name> <operator>*</operator> <name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>x</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name><name>in</name><operator>-&gt;</operator><name>width</name></name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>outrp</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>lut</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name><name>inrp</name><index>[<expr><name>x</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>outgp</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>lut</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name><name>ingp</name><index>[<expr><name>x</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>outbp</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>lut</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name><name>inbp</name><index>[<expr><name>x</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>num_components</name></name> <operator>==</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>outap</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <name><name>inap</name><index>[<expr><name>x</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>find_min_max_16</name><parameter_list>(<parameter><decl><type><name>NormalizeContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>NormalizeLocal</name></type> <name><name>min</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>NormalizeLocal</name></type> <name><name>max</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl></parameter>)</parameter_list>

<block>{<block_content>

<for>for <control>(<init><decl><type><name>int</name></type> <name>c</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>c</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>c</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>min</name><index>[<expr><name>c</name></expr>]</index></name><operator>.</operator><name>in</name> <operator>=</operator> <name><name>max</name><index>[<expr><name>c</name></expr>]</index></name><operator>.</operator><name>in</name> <operator>=</operator> <call><name>AV_RN16</name><argument_list>(<argument><expr><name><name>in</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>co</name><index>[<expr><name>c</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<for>for <control>(<init><decl><type><name>int</name></type> <name>y</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name><name>in</name><operator>-&gt;</operator><name>height</name></name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>inp</name> <init>= <expr><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>in</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>y</name> <operator>*</operator> <name><name>in</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>x</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name><name>in</name><operator>-&gt;</operator><name>width</name></name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><decl><type><name>int</name></type> <name>c</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>c</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>c</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>min</name><index>[<expr><name>c</name></expr>]</index></name><operator>.</operator><name>in</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name><name>min</name><index>[<expr><name>c</name></expr>]</index></name><operator>.</operator><name>in</name></expr></argument>, <argument><expr><name><name>inp</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>co</name><index>[<expr><name>c</name></expr>]</index></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>max</name><index>[<expr><name>c</name></expr>]</index></name><operator>.</operator><name>in</name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name><name>max</name><index>[<expr><name>c</name></expr>]</index></name><operator>.</operator><name>in</name></expr></argument>, <argument><expr><name><name>inp</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>co</name><index>[<expr><name>c</name></expr>]</index></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>inp</name> <operator>+=</operator> <name><name>s</name><operator>-&gt;</operator><name>step</name></name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>process_16</name><parameter_list>(<parameter><decl><type><name>NormalizeContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>out</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<for>for <control>(<init><decl><type><name>int</name></type> <name>y</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name><name>in</name><operator>-&gt;</operator><name>height</name></name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>inp</name> <init>= <expr><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>in</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>y</name> <operator>*</operator> <name><name>in</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>outp</name> <init>= <expr><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>y</name> <operator>*</operator> <name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>x</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name><name>in</name><operator>-&gt;</operator><name>width</name></name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><decl><type><name>int</name></type> <name>c</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>c</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>c</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>outp</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>co</name><index>[<expr><name>c</name></expr>]</index></name></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>lut</name><index>[<expr><name>c</name></expr>]</index><index>[<expr><name><name>inp</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>co</name><index>[<expr><name>c</name></expr>]</index></name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>num_components</name></name> <operator>==</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>outp</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>co</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>]</index></name> <operator>=</operator> <name><name>inp</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>co</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>inp</name> <operator>+=</operator> <name><name>s</name><operator>-&gt;</operator><name>step</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>outp</name> <operator>+=</operator> <name><name>s</name><operator>-&gt;</operator><name>step</name></name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>find_min_max_planar_16</name><parameter_list>(<parameter><decl><type><name>NormalizeContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>NormalizeLocal</name></type> <name><name>min</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>NormalizeLocal</name></type> <name><name>max</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>min</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>in</name> <operator>=</operator> <name><name>max</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>in</name> <operator>=</operator> <call><name>AV_RN16</name><argument_list>(<argument><expr><name><name>in</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>min</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>in</name> <operator>=</operator> <name><name>max</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>in</name> <operator>=</operator> <call><name>AV_RN16</name><argument_list>(<argument><expr><name><name>in</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>min</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>in</name> <operator>=</operator> <name><name>max</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>in</name> <operator>=</operator> <call><name>AV_RN16</name><argument_list>(<argument><expr><name><name>in</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>y</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name><name>in</name><operator>-&gt;</operator><name>height</name></name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>inrp</name> <init>= <expr><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>in</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <name>y</name> <operator>*</operator> <name><name>in</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>ingp</name> <init>= <expr><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>in</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>y</name> <operator>*</operator> <name><name>in</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>inbp</name> <init>= <expr><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>in</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name>y</name> <operator>*</operator> <name><name>in</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>x</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name><name>in</name><operator>-&gt;</operator><name>width</name></name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>min</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>in</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name><name>min</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>in</name></expr></argument>, <argument><expr><name><name>inrp</name><index>[<expr><name>x</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>max</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>in</name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name><name>max</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>in</name></expr></argument>, <argument><expr><name><name>inrp</name><index>[<expr><name>x</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>min</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>in</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name><name>min</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>in</name></expr></argument>, <argument><expr><name><name>ingp</name><index>[<expr><name>x</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>max</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>in</name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name><name>max</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>in</name></expr></argument>, <argument><expr><name><name>ingp</name><index>[<expr><name>x</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>min</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>in</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name><name>min</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>in</name></expr></argument>, <argument><expr><name><name>inbp</name><index>[<expr><name>x</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>max</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>in</name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name><name>max</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>in</name></expr></argument>, <argument><expr><name><name>inbp</name><index>[<expr><name>x</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>process_planar_16</name><parameter_list>(<parameter><decl><type><name>NormalizeContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>out</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<for>for <control>(<init><decl><type><name>int</name></type> <name>y</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name><name>in</name><operator>-&gt;</operator><name>height</name></name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>inrp</name> <init>= <expr><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>in</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <name>y</name> <operator>*</operator> <name><name>in</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>ingp</name> <init>= <expr><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>in</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>y</name> <operator>*</operator> <name><name>in</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>inbp</name> <init>= <expr><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>in</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name>y</name> <operator>*</operator> <name><name>in</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>inap</name> <init>= <expr><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>in</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>+</operator> <name>y</name> <operator>*</operator> <name><name>in</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>outrp</name> <init>= <expr><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <name>y</name> <operator>*</operator> <name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>outgp</name> <init>= <expr><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>y</name> <operator>*</operator> <name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>outbp</name> <init>= <expr><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name>y</name> <operator>*</operator> <name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>outap</name> <init>= <expr><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>+</operator> <name>y</name> <operator>*</operator> <name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>)</operator></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>x</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name><name>in</name><operator>-&gt;</operator><name>width</name></name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>outrp</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>lut</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name><name>inrp</name><index>[<expr><name>x</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>outgp</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>lut</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name><name>ingp</name><index>[<expr><name>x</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>outbp</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>lut</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name><name>inbp</name><index>[<expr><name>x</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>num_components</name></name> <operator>==</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>outap</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <name><name>inap</name><index>[<expr><name>x</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>normalize</name><parameter_list>(<parameter><decl><type><name>NormalizeContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>out</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>NormalizeLocal</name></type> <name><name>min</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>max</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>float</name></type> <name>rgb_min_smoothed</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>float</name></type> <name>rgb_max_smoothed</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>find_min_max</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><name>min</name></expr></argument>, <argument><expr><name>max</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>history_idx</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>frame_num</name></name> <operator>%</operator> <name><name>s</name><operator>-&gt;</operator><name>history_len</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>num_history_vals</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>frame_num</name></name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>frame_num</name></name> <operator>&gt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>history_len</name></name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>c</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>c</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>c</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>min</name><index>[<expr><name>c</name></expr>]</index></name><operator>.</operator><name>history_sum</name> <operator>-=</operator> <name><name>s</name><operator>-&gt;</operator><name>min</name><index>[<expr><name>c</name></expr>]</index></name><operator>.</operator><name><name>history</name><index>[<expr><name>history_idx</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>max</name><index>[<expr><name>c</name></expr>]</index></name><operator>.</operator><name>history_sum</name> <operator>-=</operator> <name><name>s</name><operator>-&gt;</operator><name>max</name><index>[<expr><name>c</name></expr>]</index></name><operator>.</operator><name><name>history</name><index>[<expr><name>history_idx</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>num_history_vals</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>history_len</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>c</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>c</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>c</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>min</name><index>[<expr><name>c</name></expr>]</index></name><operator>.</operator><name>history_sum</name> <operator>+=</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>min</name><index>[<expr><name>c</name></expr>]</index></name><operator>.</operator><name><name>history</name><index>[<expr><name>history_idx</name></expr>]</index></name> <operator>=</operator> <name><name>min</name><index>[<expr><name>c</name></expr>]</index></name><operator>.</operator><name>in</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>min</name><index>[<expr><name>c</name></expr>]</index></name><operator>.</operator><name>smoothed</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>min</name><index>[<expr><name>c</name></expr>]</index></name><operator>.</operator><name>history_sum</name> <operator>/</operator> <operator>(</operator><name>float</name><operator>)</operator><name>num_history_vals</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>max</name><index>[<expr><name>c</name></expr>]</index></name><operator>.</operator><name>history_sum</name> <operator>+=</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>max</name><index>[<expr><name>c</name></expr>]</index></name><operator>.</operator><name><name>history</name><index>[<expr><name>history_idx</name></expr>]</index></name> <operator>=</operator> <name><name>max</name><index>[<expr><name>c</name></expr>]</index></name><operator>.</operator><name>in</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>max</name><index>[<expr><name>c</name></expr>]</index></name><operator>.</operator><name>smoothed</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>max</name><index>[<expr><name>c</name></expr>]</index></name><operator>.</operator><name>history_sum</name> <operator>/</operator> <operator>(</operator><name>float</name><operator>)</operator><name>num_history_vals</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block>

<expr_stmt><expr><name>rgb_min_smoothed</name> <operator>=</operator> <call><name>FFMIN3</name><argument_list>(<argument><expr><name><name>min</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>smoothed</name></expr></argument>, <argument><expr><name><name>min</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>smoothed</name></expr></argument>, <argument><expr><name><name>min</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>smoothed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>rgb_max_smoothed</name> <operator>=</operator> <call><name>FFMAX3</name><argument_list>(<argument><expr><name><name>max</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>smoothed</name></expr></argument>, <argument><expr><name><name>max</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>smoothed</name></expr></argument>, <argument><expr><name><name>max</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>smoothed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>c</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>c</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>c</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>in_val</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>min</name><index>[<expr><name>c</name></expr>]</index></name><operator>.</operator><name>smoothed</name> <operator>=</operator> <operator>(</operator><name><name>min</name><index>[<expr><name>c</name></expr>]</index></name><operator>.</operator><name>smoothed</name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>independence</name></name><operator>)</operator>

<operator>+</operator> <operator>(</operator><name>rgb_min_smoothed</name> <operator>*</operator> <operator>(</operator><literal type="number">1.0f</literal> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>independence</name></name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>max</name><index>[<expr><name>c</name></expr>]</index></name><operator>.</operator><name>smoothed</name> <operator>=</operator> <operator>(</operator><name><name>max</name><index>[<expr><name>c</name></expr>]</index></name><operator>.</operator><name>smoothed</name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>independence</name></name><operator>)</operator>

<operator>+</operator> <operator>(</operator><name>rgb_max_smoothed</name> <operator>*</operator> <operator>(</operator><literal type="number">1.0f</literal> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>independence</name></name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>min</name><index>[<expr><name>c</name></expr>]</index></name><operator>.</operator><name>out</name> <operator>=</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>sblackpt</name><index>[<expr><name>c</name></expr>]</index></name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>strength</name></name><operator>)</operator>

<operator>+</operator> <operator>(</operator><name><name>min</name><index>[<expr><name>c</name></expr>]</index></name><operator>.</operator><name>in</name> <operator>*</operator> <operator>(</operator><literal type="number">1.0f</literal> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>strength</name></name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>max</name><index>[<expr><name>c</name></expr>]</index></name><operator>.</operator><name>out</name> <operator>=</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>swhitept</name><index>[<expr><name>c</name></expr>]</index></name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>strength</name></name><operator>)</operator>

<operator>+</operator> <operator>(</operator><name><name>max</name><index>[<expr><name>c</name></expr>]</index></name><operator>.</operator><name>in</name> <operator>*</operator> <operator>(</operator><literal type="number">1.0f</literal> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>strength</name></name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>min</name><index>[<expr><name>c</name></expr>]</index></name><operator>.</operator><name>smoothed</name> <operator>==</operator> <name><name>max</name><index>[<expr><name>c</name></expr>]</index></name><operator>.</operator><name>smoothed</name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>in_val</name> <operator>=</operator> <name><name>min</name><index>[<expr><name>c</name></expr>]</index></name><operator>.</operator><name>in</name></expr>;</init> <condition><expr><name>in_val</name> <operator>&lt;=</operator> <name><name>max</name><index>[<expr><name>c</name></expr>]</index></name><operator>.</operator><name>in</name></expr>;</condition> <incr><expr><name>in_val</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>lut</name><index>[<expr><name>c</name></expr>]</index><index>[<expr><name>in_val</name></expr>]</index></name> <operator>=</operator> <name><name>min</name><index>[<expr><name>c</name></expr>]</index></name><operator>.</operator><name>out</name></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>scale</name> <init>= <expr><operator>(</operator><name><name>max</name><index>[<expr><name>c</name></expr>]</index></name><operator>.</operator><name>out</name> <operator>-</operator> <name><name>min</name><index>[<expr><name>c</name></expr>]</index></name><operator>.</operator><name>out</name><operator>)</operator> <operator>/</operator> <operator>(</operator><name><name>max</name><index>[<expr><name>c</name></expr>]</index></name><operator>.</operator><name>smoothed</name> <operator>-</operator> <name><name>min</name><index>[<expr><name>c</name></expr>]</index></name><operator>.</operator><name>smoothed</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>in_val</name> <operator>=</operator> <name><name>min</name><index>[<expr><name>c</name></expr>]</index></name><operator>.</operator><name>in</name></expr>;</init> <condition><expr><name>in_val</name> <operator>&lt;=</operator> <name><name>max</name><index>[<expr><name>c</name></expr>]</index></name><operator>.</operator><name>in</name></expr>;</condition> <incr><expr><name>in_val</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>out_val</name> <init>= <expr><operator>(</operator><name>in_val</name> <operator>-</operator> <name><name>min</name><index>[<expr><name>c</name></expr>]</index></name><operator>.</operator><name>smoothed</name><operator>)</operator> <operator>*</operator> <name>scale</name> <operator>+</operator> <name><name>min</name><index>[<expr><name>c</name></expr>]</index></name><operator>.</operator><name>out</name> <operator>+</operator> <literal type="number">0.5f</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>out_val</name> <operator>=</operator> <call><name>av_clip_uintp2_c</name><argument_list>(<argument><expr><name>out_val</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>depth</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>lut</name><index>[<expr><name>c</name></expr>]</index><index>[<expr><name>in_val</name></expr>]</index></name> <operator>=</operator> <name>out_val</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>process</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>frame_num</name></name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>query_formats</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>enum</name> <name>AVPixelFormat</name></name></type> <name><name>pixel_fmts</name><index>[]</index></name> <init>= <expr><block>{

<expr><name>AV_PIX_FMT_RGB24</name></expr>,

<expr><name>AV_PIX_FMT_BGR24</name></expr>,

<expr><name>AV_PIX_FMT_ARGB</name></expr>,

<expr><name>AV_PIX_FMT_RGBA</name></expr>,

<expr><name>AV_PIX_FMT_ABGR</name></expr>,

<expr><name>AV_PIX_FMT_BGRA</name></expr>,

<expr><name>AV_PIX_FMT_0RGB</name></expr>,

<expr><name>AV_PIX_FMT_RGB0</name></expr>,

<expr><name>AV_PIX_FMT_0BGR</name></expr>,

<expr><name>AV_PIX_FMT_BGR0</name></expr>,

<expr><name>AV_PIX_FMT_RGB48</name></expr>, <expr><name>AV_PIX_FMT_BGR48</name></expr>,

<expr><name>AV_PIX_FMT_RGBA64</name></expr>, <expr><name>AV_PIX_FMT_BGRA64</name></expr>,

<expr><name>AV_PIX_FMT_GBRP</name></expr>, <expr><name>AV_PIX_FMT_GBRP9</name></expr>, <expr><name>AV_PIX_FMT_GBRP10</name></expr>,

<expr><name>AV_PIX_FMT_GBRP12</name></expr>, <expr><name>AV_PIX_FMT_GBRP14</name></expr>, <expr><name>AV_PIX_FMT_GBRP16</name></expr>,

<expr><name>AV_PIX_FMT_GBRAP</name></expr>, <expr><name>AV_PIX_FMT_GBRAP10</name></expr>, <expr><name>AV_PIX_FMT_GBRAP12</name></expr>, <expr><name>AV_PIX_FMT_GBRAP16</name></expr>,

<expr><name>AV_PIX_FMT_NONE</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFilterFormats</name> <modifier>*</modifier></type><name>formats</name> <init>= <expr><call><name>ff_make_format_list</name><argument_list>(<argument><expr><name>pixel_fmts</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>formats</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>ff_set_common_formats</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>formats</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>config_input</name><parameter_list>(<parameter><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>inlink</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>NormalizeContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>inlink</name><operator>-&gt;</operator><name>dst</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>AVPixFmtDescriptor</name> <modifier>*</modifier></type><name>desc</name> <init>= <expr><call><name>av_pix_fmt_desc_get</name><argument_list>(<argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>format</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>, <decl><type ref="prev"/><name>planar</name></decl>, <decl><type ref="prev"/><name>scale</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ff_fill_rgba_map</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>co</name></name></expr></argument>, <argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>format</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>depth</name></name> <operator>=</operator> <name><name>desc</name><operator>-&gt;</operator><name>comp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>depth</name></expr>;</expr_stmt>

<expr_stmt><expr><name>scale</name> <operator>=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>depth</name></name> <operator>-</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>num_components</name></name> <operator>=</operator> <name><name>desc</name><operator>-&gt;</operator><name>nb_components</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>step</name></name> <operator>=</operator> <call><name>av_get_padded_bits_per_pixel</name><argument_list>(<argument><expr><name>desc</name></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <operator>(</operator><literal type="number">3</literal> <operator>+</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>depth</name></name> <operator>&gt;</operator> <literal type="number">8</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>history_len</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>smoothing</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>history_mem</name></name> <operator>=</operator> <call><name>av_malloc</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>history_len</name></name> <operator>*</operator> <literal type="number">6</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>history_mem</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>history_mem</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>c</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>c</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>c</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>min</name><index>[<expr><name>c</name></expr>]</index></name><operator>.</operator><name>history</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>history_mem</name></name> <operator>+</operator> <operator>(</operator><name>c</name><operator>*</operator><literal type="number">2</literal><operator>)</operator> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>history_len</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>max</name><index>[<expr><name>c</name></expr>]</index></name><operator>.</operator><name>history</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>history_mem</name></name> <operator>+</operator> <operator>(</operator><name>c</name><operator>*</operator><literal type="number">2</literal><operator>+</operator><literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>history_len</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>sblackpt</name><index>[<expr><name>c</name></expr>]</index></name> <operator>=</operator> <name>scale</name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>blackpt</name><index>[<expr><name>c</name></expr>]</index></name> <operator>+</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>blackpt</name><index>[<expr><name>c</name></expr>]</index></name> <operator>&gt;&gt;</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>depth</name></name> <operator>-</operator> <literal type="number">8</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>swhitept</name><index>[<expr><name>c</name></expr>]</index></name> <operator>=</operator> <name>scale</name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>whitept</name><index>[<expr><name>c</name></expr>]</index></name> <operator>+</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>whitept</name><index>[<expr><name>c</name></expr>]</index></name> <operator>&gt;&gt;</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>depth</name></name> <operator>-</operator> <literal type="number">8</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>planar</name> <operator>=</operator> <name><name>desc</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_PIX_FMT_FLAG_PLANAR</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>depth</name></name> <operator>&lt;=</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>find_min_max</name></name> <operator>=</operator> <ternary><condition><expr><name>planar</name></expr> ?</condition><then> <expr><name>find_min_max_planar</name></expr> </then><else>: <expr><name>find_min_max</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>process</name></name> <operator>=</operator> <ternary><condition><expr><name>planar</name></expr>?</condition><then> <expr><name>process_planar</name></expr> </then><else>: <expr><name>process</name></expr></else></ternary></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>find_min_max</name></name> <operator>=</operator> <ternary><condition><expr><name>planar</name></expr> ?</condition><then> <expr><name>find_min_max_planar_16</name></expr> </then><else>: <expr><name>find_min_max_16</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>process</name></name> <operator>=</operator> <ternary><condition><expr><name>planar</name></expr>?</condition><then> <expr><name>process_planar_16</name></expr> </then><else>: <expr><name>process_16</name></expr></else></ternary></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>void</name></type> <name>uninit</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>NormalizeContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>history_mem</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>filter_frame</name><parameter_list>(<parameter><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>inlink</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>in</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>inlink</name><operator>-&gt;</operator><name>dst</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>outlink</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>outputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>NormalizeContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>out</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>direct</name> <init>= <expr><call><name>av_frame_is_writable</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>is_disabled</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>direct</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>out</name> <operator>=</operator> <name>in</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>out</name> <operator>=</operator> <call><name>ff_get_video_buffer</name><argument_list>(<argument><expr><name>outlink</name></expr></argument>, <argument><expr><name><name>outlink</name><operator>-&gt;</operator><name>w</name></name></expr></argument>, <argument><expr><name><name>outlink</name><operator>-&gt;</operator><name>h</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>out</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_frame_copy_props</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>normalize</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>is_disabled</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>ff_filter_frame</name><argument_list>(<argument><expr><name>outlink</name></expr></argument>, <argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>direct</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><call><name>ff_filter_frame</name><argument_list>(<argument><expr><name>outlink</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVFilterPad</name></type> <name><name>inputs</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"default"</literal></expr>,

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,

<expr><operator>.</operator><name>filter_frame</name> <operator>=</operator> <name>filter_frame</name></expr>,

<expr><operator>.</operator><name>config_props</name> <operator>=</operator> <name>config_input</name></expr>,

}</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVFilterPad</name></type> <name><name>outputs</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"default"</literal></expr>,

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,

}</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFilter</name></type> <name>ff_vf_normalize</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"normalize"</literal></expr>,

<expr><operator>.</operator><name>description</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"Normalize RGB video."</literal></expr></argument>)</argument_list></call></expr>,

<expr><operator>.</operator><name>priv_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>NormalizeContext</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><operator>.</operator><name>priv_class</name> <operator>=</operator> <operator>&amp;</operator><name>normalize_class</name></expr>,

<expr><operator>.</operator><name>uninit</name> <operator>=</operator> <name>uninit</name></expr>,

<expr><operator>.</operator><name>query_formats</name> <operator>=</operator> <name>query_formats</name></expr>,

<expr><operator>.</operator><name>inputs</name> <operator>=</operator> <name>inputs</name></expr>,

<expr><operator>.</operator><name>outputs</name> <operator>=</operator> <name>outputs</name></expr>,

<expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>AVFILTER_FLAG_SUPPORT_TIMELINE_INTERNAL</name></expr>,

<expr><operator>.</operator><name>process_command</name> <operator>=</operator> <name>ff_filter_process_command</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

</unit>
