<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavfilter\asrc_sinc.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avassert.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/opt.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavcodec/avfft.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"audio.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avfilter.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct <name>SincContext</name> <block>{

<decl_stmt><decl><type><specifier>const</specifier> <name>AVClass</name> <modifier>*</modifier></type><name>class</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>sample_rate</name></decl>, <name>nb_samples</name>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>att</name></decl>, <name>beta</name>, <name>phase</name>, <name>Fc0</name>, <name>Fc1</name>, <name>tbw0</name>, <name>tbw1</name>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>num_taps</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>round</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <name>rdft_len</name>;</decl_stmt>

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>coeffs</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>pts</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RDFTContext</name> <modifier>*</modifier></type><name>rdft</name></decl>, <modifier>*</modifier><name>irdft</name>;</decl_stmt>

}</block></struct></type> <name>SincContext</name>;</typedef>

<function><type><specifier>static</specifier> <name>int</name></type> <name>request_frame</name><parameter_list>(<parameter><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>outlink</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>outlink</name><operator>-&gt;</operator><name>src</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SincContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>coeffs</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>coeffs</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>frame</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>nb_samples</name></decl>;</decl_stmt>

<expr_stmt><expr><name>nb_samples</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>nb_samples</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>n</name></name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>pts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>nb_samples</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_EOF</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>frame</name> <operator>=</operator> <call><name>ff_get_audio_buffer</name><argument_list>(<argument><expr><name>outlink</name></expr></argument>, <argument><expr><name>nb_samples</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>coeffs</name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>pts</name></name></expr></argument>, <argument><expr><name>nb_samples</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>pts</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>pts</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>pts</name></name> <operator>+=</operator> <name>nb_samples</name></expr>;</expr_stmt>

<return>return <expr><call><name>ff_filter_frame</name><argument_list>(<argument><expr><name>outlink</name></expr></argument>, <argument><expr><name>frame</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>query_formats</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>SincContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int64_t</name></type> <name><name>chlayouts</name><index>[]</index></name> <init>= <expr><block>{ <expr><name>AV_CH_LAYOUT_MONO</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>sample_rates</name><index>[]</index></name> <init>= <expr><block>{ <expr><name><name>s</name><operator>-&gt;</operator><name>sample_rate</name></name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>enum</name> <name>AVSampleFormat</name></name></type> <name><name>sample_fmts</name><index>[]</index></name> <init>= <expr><block>{ <expr><name>AV_SAMPLE_FMT_FLT</name></expr>,

<expr><name>AV_SAMPLE_FMT_NONE</name></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFilterFormats</name> <modifier>*</modifier></type><name>formats</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFilterChannelLayouts</name> <modifier>*</modifier></type><name>layouts</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name>formats</name> <operator>=</operator> <call><name>ff_make_format_list</name><argument_list>(<argument><expr><name>sample_fmts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>formats</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_set_common_formats</name> <argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>formats</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>layouts</name> <operator>=</operator> <call><name>avfilter_make_format64_list</name><argument_list>(<argument><expr><name>chlayouts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>layouts</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_set_common_channel_layouts</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>layouts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>formats</name> <operator>=</operator> <call><name>ff_make_format_list</name><argument_list>(<argument><expr><name>sample_rates</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>formats</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>ff_set_common_samplerates</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>formats</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>float</name></type> <name>bessel_I_0</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>x</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>term</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>sum</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>last_sum</name></decl>, <decl><type ref="prev"/><name>x2</name> <init>= <expr><name>x</name> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<do>do <block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>y</name> <init>= <expr><name>x2</name> <operator>/</operator> <name>i</name><operator>++</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>last_sum</name> <operator>=</operator> <name>sum</name></expr>;</expr_stmt>

<expr_stmt><expr><name>sum</name> <operator>+=</operator> <name>term</name> <operator>*=</operator> <name>y</name> <operator>*</operator> <name>y</name></expr>;</expr_stmt>

</block_content>}</block> while <condition>(<expr><name>sum</name> <operator>!=</operator> <name>last_sum</name></expr>)</condition>;</do>

<return>return <expr><name>sum</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>float</name> <modifier>*</modifier></type><name>make_lpf</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>num_taps</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>Fc</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>beta</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>rho</name></decl></parameter>,

<parameter><decl><type><name>float</name></type> <name>scale</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dc_norm</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>m</name> <init>= <expr><name>num_taps</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>h</name> <init>= <expr><call><name>av_calloc</name><argument_list>(<argument><expr><name>num_taps</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>h</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>, <decl><type ref="prev"/><name>sum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>mult</name> <init>= <expr><name>scale</name> <operator>/</operator> <call><name>bessel_I_0</name><argument_list>(<argument><expr><name>beta</name></expr></argument>)</argument_list></call></expr></init></decl>, <decl><type ref="prev"/><name>mult1</name> <init>= <expr><literal type="number">1.f</literal> <operator>/</operator> <operator>(</operator><literal type="number">.5f</literal> <operator>*</operator> <name>m</name> <operator>+</operator> <name>rho</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name>Fc</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>Fc</name> <operator>&lt;=</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>m</name> <operator>/</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>z</name> <init>= <expr><name>i</name> <operator>-</operator> <literal type="number">.5f</literal> <operator>*</operator> <name>m</name></expr></init></decl>, <decl><type ref="prev"/><name>x</name> <init>= <expr><name>z</name> <operator>*</operator> <name>M_PI</name></expr></init></decl>, <decl><type ref="prev"/><name>y</name> <init>= <expr><name>z</name> <operator>*</operator> <name>mult1</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>h</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><name>x</name></expr> ?</condition><then> <expr><call><name>sinf</name><argument_list>(<argument><expr><name>Fc</name> <operator>*</operator> <name>x</name></expr></argument>)</argument_list></call> <operator>/</operator> <name>x</name></expr> </then><else>: <expr><name>Fc</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>sum</name> <operator>+=</operator> <name><name>h</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*=</operator> <call><name>bessel_I_0</name><argument_list>(<argument><expr><name>beta</name> <operator>*</operator> <call><name>sqrtf</name><argument_list>(<argument><expr><literal type="number">1.f</literal> <operator>-</operator> <name>y</name> <operator>*</operator> <name>y</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>*</operator> <name>mult</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>m</name> <operator>-</operator> <name>i</name> <operator>!=</operator> <name>i</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>h</name><index>[<expr><name>m</name> <operator>-</operator> <name>i</name></expr>]</index></name> <operator>=</operator> <name><name>h</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>sum</name> <operator>+=</operator> <name><name>h</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>dc_norm</name> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;</operator> <name>num_taps</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>h</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*=</operator> <name>scale</name> <operator>/</operator> <name>sum</name></expr>;</expr_stmt></block_content></block></for>

<return>return <expr><name>h</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>float</name></type> <name>kaiser_beta</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>att</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>tr_bw</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>att</name> <operator>&gt;=</operator> <literal type="number">60.f</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>float</name></type> <name><name>coefs</name><index>[]</index><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{

<expr><block>{<expr><operator>-</operator><literal type="number">6.784957e-10</literal></expr>, <expr><literal type="number">1.02856e-05</literal></expr>, <expr><literal type="number">0.1087556</literal></expr>, <expr><operator>-</operator><literal type="number">0.8988365</literal> <operator>+</operator> <literal type="number">.001</literal></expr>}</block></expr>,

<expr><block>{<expr><operator>-</operator><literal type="number">6.897885e-10</literal></expr>, <expr><literal type="number">1.027433e-05</literal></expr>, <expr><literal type="number">0.10876</literal></expr>, <expr><operator>-</operator><literal type="number">0.8994658</literal> <operator>+</operator> <literal type="number">.002</literal></expr>}</block></expr>,

<expr><block>{<expr><operator>-</operator><literal type="number">1.000683e-09</literal></expr>, <expr><literal type="number">1.030092e-05</literal></expr>, <expr><literal type="number">0.1087677</literal></expr>, <expr><operator>-</operator><literal type="number">0.9007898</literal> <operator>+</operator> <literal type="number">.003</literal></expr>}</block></expr>,

<expr><block>{<expr><operator>-</operator><literal type="number">3.654474e-10</literal></expr>, <expr><literal type="number">1.040631e-05</literal></expr>, <expr><literal type="number">0.1087085</literal></expr>, <expr><operator>-</operator><literal type="number">0.8977766</literal> <operator>+</operator> <literal type="number">.006</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">8.106988e-09</literal></expr>, <expr><literal type="number">6.983091e-06</literal></expr>, <expr><literal type="number">0.1091387</literal></expr>, <expr><operator>-</operator><literal type="number">0.9172048</literal> <operator>+</operator> <literal type="number">.015</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">9.519571e-09</literal></expr>, <expr><literal type="number">7.272678e-06</literal></expr>, <expr><literal type="number">0.1090068</literal></expr>, <expr><operator>-</operator><literal type="number">0.9140768</literal> <operator>+</operator> <literal type="number">.025</literal></expr>}</block></expr>,

<expr><block>{<expr><operator>-</operator><literal type="number">5.626821e-09</literal></expr>, <expr><literal type="number">1.342186e-05</literal></expr>, <expr><literal type="number">0.1083999</literal></expr>, <expr><operator>-</operator><literal type="number">0.9065452</literal> <operator>+</operator> <literal type="number">.05</literal></expr>}</block></expr>,

<expr><block>{<expr><operator>-</operator><literal type="number">9.965946e-08</literal></expr>, <expr><literal type="number">5.073548e-05</literal></expr>, <expr><literal type="number">0.1040967</literal></expr>, <expr><operator>-</operator><literal type="number">0.7672778</literal> <operator>+</operator> <literal type="number">.085</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">1.604808e-07</literal></expr>, <expr><operator>-</operator><literal type="number">5.856462e-05</literal></expr>, <expr><literal type="number">0.1185998</literal></expr>, <expr><operator>-</operator><literal type="number">1.34824</literal> <operator>+</operator> <literal type="number">.1</literal></expr>}</block></expr>,

<expr><block>{<expr><operator>-</operator><literal type="number">1.511964e-07</literal></expr>, <expr><literal type="number">6.363034e-05</literal></expr>, <expr><literal type="number">0.1064627</literal></expr>, <expr><operator>-</operator><literal type="number">0.9876665</literal> <operator>+</operator> <literal type="number">.18</literal></expr>}</block></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>realm</name> <init>= <expr><call><name>logf</name><argument_list>(<argument><expr><name>tr_bw</name> <operator>/</operator> <literal type="number">.0005f</literal></expr></argument>)</argument_list></call> <operator>/</operator> <call><name>logf</name><argument_list>(<argument><expr><literal type="number">2.f</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name> <specifier>const</specifier> <modifier>*</modifier></type><name>c0</name> <init>= <expr><name><name>coefs</name><index>[<expr><call><name>av_clip</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>realm</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>coefs</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name> <specifier>const</specifier> <modifier>*</modifier></type><name>c1</name> <init>= <expr><name><name>coefs</name><index>[<expr><call><name>av_clip</name><argument_list>(<argument><expr><literal type="number">1</literal> <operator>+</operator> <operator>(</operator><name>int</name><operator>)</operator><name>realm</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>coefs</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>b0</name> <init>= <expr><operator>(</operator><operator>(</operator><name><name>c0</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name>att</name> <operator>+</operator> <name><name>c0</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator> <operator>*</operator> <name>att</name> <operator>+</operator> <name><name>c0</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>)</operator> <operator>*</operator> <name>att</name> <operator>+</operator> <name><name>c0</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>b1</name> <init>= <expr><operator>(</operator><operator>(</operator><name><name>c1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name>att</name> <operator>+</operator> <name><name>c1</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator> <operator>*</operator> <name>att</name> <operator>+</operator> <name><name>c1</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>)</operator> <operator>*</operator> <name>att</name> <operator>+</operator> <name><name>c1</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<return>return <expr><name>b0</name> <operator>+</operator> <operator>(</operator><name>b1</name> <operator>-</operator> <name>b0</name><operator>)</operator> <operator>*</operator> <operator>(</operator><name>realm</name> <operator>-</operator> <operator>(</operator><name>int</name><operator>)</operator><name>realm</name><operator>)</operator></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>att</name> <operator>&gt;</operator> <literal type="number">50.f</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">.1102f</literal> <operator>*</operator> <operator>(</operator><name>att</name> <operator>-</operator> <literal type="number">8.7f</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>att</name> <operator>&gt;</operator> <literal type="number">20.96f</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">.58417f</literal> <operator>*</operator> <call><name>powf</name><argument_list>(<argument><expr><name>att</name> <operator>-</operator> <literal type="number">20.96f</literal></expr></argument>, <argument><expr><literal type="number">.4f</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">.07886f</literal> <operator>*</operator> <operator>(</operator><name>att</name> <operator>-</operator> <literal type="number">20.96f</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>kaiser_params</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>att</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>Fc</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>tr_bw</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>beta</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>num_taps</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>beta</name> <operator>=</operator> <ternary><condition><expr><operator>*</operator><name>beta</name> <operator>&lt;</operator> <literal type="number">0.f</literal></expr> ?</condition><then> <expr><call><name>kaiser_beta</name><argument_list>(<argument><expr><name>att</name></expr></argument>, <argument><expr><name>tr_bw</name> <operator>*</operator> <literal type="number">.5f</literal> <operator>/</operator> <name>Fc</name></expr></argument>)</argument_list></call></expr></then><else>: <expr><operator>*</operator><name>beta</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>att</name> <operator>=</operator> <ternary><condition><expr><name>att</name> <operator>&lt;</operator> <literal type="number">60.f</literal></expr> ?</condition><then> <expr><operator>(</operator><name>att</name> <operator>-</operator> <literal type="number">7.95f</literal><operator>)</operator> <operator>/</operator> <operator>(</operator><literal type="number">2.285f</literal> <operator>*</operator> <name>M_PI</name> <operator>*</operator> <literal type="number">2.f</literal><operator>)</operator></expr> </then><else>:

<expr><operator>(</operator><operator>(</operator><literal type="number">.0007528358f</literal><operator>-</operator><literal type="number">1.577737e-05</literal> <operator>*</operator> <operator>*</operator><name>beta</name><operator>)</operator> <operator>*</operator> <operator>*</operator><name>beta</name> <operator>+</operator> <literal type="number">0.6248022f</literal><operator>)</operator> <operator>*</operator> <operator>*</operator><name>beta</name> <operator>+</operator> <literal type="number">.06186902f</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>num_taps</name> <operator>=</operator> <ternary><condition><expr><operator>!</operator><operator>*</operator><name>num_taps</name></expr> ?</condition><then> <expr><call><name>ceilf</name><argument_list>(<argument><expr><name>att</name><operator>/</operator><name>tr_bw</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr> </then><else>: <expr><operator>*</operator><name>num_taps</name></expr></else></ternary></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>float</name> <modifier>*</modifier></type><name>lpf</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>Fn</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>Fc</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>tbw</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>num_taps</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>att</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>beta</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>round</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><operator>*</operator><name>num_taps</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>Fc</name> <operator>/=</operator> <name>Fn</name><operator>)</operator> <operator>&lt;=</operator> <literal type="number">0.f</literal> <operator>||</operator> <name>Fc</name> <operator>&gt;=</operator> <literal type="number">1.f</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>num_taps</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>att</name> <operator>=</operator> <ternary><condition><expr><name>att</name></expr> ?</condition><then> <expr><name>att</name></expr> </then><else>: <expr><literal type="number">120.f</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><call><name>kaiser_params</name><argument_list>(<argument><expr><name>att</name></expr></argument>, <argument><expr><name>Fc</name></expr></argument>, <argument><expr><operator>(</operator><ternary><condition><expr><name>tbw</name></expr> ?</condition><then> <expr><name>tbw</name> <operator>/</operator> <name>Fn</name></expr> </then><else>: <expr><literal type="number">.05f</literal></expr></else></ternary><operator>)</operator> <operator>*</operator> <literal type="number">.5f</literal></expr></argument>, <argument><expr><name>beta</name></expr></argument>, <argument><expr><name>num_taps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>n</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>n</name> <operator>=</operator> <operator>*</operator><name>num_taps</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>num_taps</name> <operator>=</operator> <call><name>av_clip</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><literal type="number">11</literal></expr></argument>, <argument><expr><literal type="number">32767</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>round</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>num_taps</name> <operator>=</operator> <literal type="number">1</literal> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><operator>(</operator><operator>*</operator><name>num_taps</name> <operator>/</operator> <literal type="number">2</literal><operator>)</operator> <operator>*</operator> <name>Fc</name> <operator>+</operator> <literal type="number">.5f</literal><operator>)</operator> <operator>/</operator> <name>Fc</name> <operator>+</operator> <literal type="number">.5f</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>make_lpf</name><argument_list>(<argument><expr><operator>*</operator><name>num_taps</name> <operator>|=</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>Fc</name></expr></argument>, <argument><expr><operator>*</operator><name>beta</name></expr></argument>, <argument><expr><literal type="number">0.f</literal></expr></argument>, <argument><expr><literal type="number">1.f</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>invert</name><parameter_list>(<parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>h</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>-</operator><name><name>h</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name><name>h</name><index>[<expr><operator>(</operator><name>n</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr>]</index></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PACK</name><parameter_list>(<parameter><type><name>h</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>h[1] = h[n]</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UNPACK</name><parameter_list>(<parameter><type><name>h</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>h[n] = h[1], h[n + 1] = h[1] = 0;</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SQR</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((a) * (a))</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>float</name></type> <name>safe_log</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>x</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name>x</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>x</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>logf</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><operator>-</operator><literal type="number">26</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>fir_to_phase</name><parameter_list>(<parameter><decl><type><name>SincContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier><modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>len</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>post_len</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>phase</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>pi_wraps</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>work</name></decl>, <decl><type ref="prev"/><name>phase1</name> <init>= <expr><operator>(</operator><ternary><condition><expr><name>phase</name> <operator>&gt;</operator> <literal type="number">50.f</literal></expr> ?</condition><then> <expr><literal type="number">100.f</literal> <operator>-</operator> <name>phase</name></expr> </then><else>: <expr><name>phase</name></expr></else></ternary><operator>)</operator> <operator>/</operator> <literal type="number">50.f</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>work_len</name></decl>, <decl><type ref="prev"/><name>begin</name></decl>, <decl><type ref="prev"/><name>end</name></decl>, <decl><type ref="prev"/><name>imp_peak</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>peak</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>imp_sum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>peak_imp_sum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>prev_angle2</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>cum_2pi</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>prev_angle1</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>cum_1pi</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <operator>*</operator><name>len</name></expr><operator>,</operator> <expr><name>work_len</name> <operator>=</operator> <literal type="number">2</literal> <operator>*</operator> <literal type="number">2</literal> <operator>*</operator> <literal type="number">8</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>work_len</name> <operator>&lt;&lt;=</operator> <literal type="number">1</literal></expr><operator>,</operator> <expr><name>i</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr></incr>)</control><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></for>

<expr_stmt><expr><name>work</name> <operator>=</operator> <call><name>av_calloc</name><argument_list>(<argument><expr><operator>(</operator><name>work_len</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>work_len</name> <operator>/</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>work</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>pi_wraps</name> <operator>=</operator> <operator>&amp;</operator><name><name>work</name><index>[<expr><name>work_len</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>work</name></expr></argument>, <argument><expr><operator>*</operator><name>h</name></expr></argument>, <argument><expr><operator>*</operator><name>len</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>work</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_rdft_end</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>rdft</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_rdft_end</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>irdft</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>rdft</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>irdft</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>rdft</name></name> <operator>=</operator> <call><name>av_rdft_init</name><argument_list>(<argument><expr><call><name>av_log2</name><argument_list>(<argument><expr><name>work_len</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>DFT_R2C</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>irdft</name></name> <operator>=</operator> <call><name>av_rdft_init</name><argument_list>(<argument><expr><call><name>av_log2</name><argument_list>(<argument><expr><name>work_len</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>IDFT_C2R</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>rdft</name></name> <operator>||</operator> <operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>irdft</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>work</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_rdft_calc</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>rdft</name></name></expr></argument>, <argument><expr><name>work</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>UNPACK</name><argument_list>(<argument><expr><name>work</name></expr></argument>, <argument><expr><name>work_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>work_len</name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">2</literal></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>angle</name> <init>= <expr><call><name>atan2f</name><argument_list>(<argument><expr><name><name>work</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>work</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>detect</name> <init>= <expr><literal type="number">2</literal> <operator>*</operator> <name>M_PI</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>delta</name> <init>= <expr><name>angle</name> <operator>-</operator> <name>prev_angle2</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>adjust</name> <init>= <expr><name>detect</name> <operator>*</operator> <operator>(</operator><operator>(</operator><name>delta</name> <operator>&lt;</operator> <operator>-</operator><name>detect</name> <operator>*</operator> <literal type="number">.7f</literal><operator>)</operator> <operator>-</operator> <operator>(</operator><name>delta</name> <operator>&gt;</operator> <name>detect</name> <operator>*</operator> <literal type="number">.7f</literal><operator>)</operator><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>prev_angle2</name> <operator>=</operator> <name>angle</name></expr>;</expr_stmt>

<expr_stmt><expr><name>cum_2pi</name> <operator>+=</operator> <name>adjust</name></expr>;</expr_stmt>

<expr_stmt><expr><name>angle</name> <operator>+=</operator> <name>cum_2pi</name></expr>;</expr_stmt>

<expr_stmt><expr><name>detect</name> <operator>=</operator> <name>M_PI</name></expr>;</expr_stmt>

<expr_stmt><expr><name>delta</name> <operator>=</operator> <name>angle</name> <operator>-</operator> <name>prev_angle1</name></expr>;</expr_stmt>

<expr_stmt><expr><name>adjust</name> <operator>=</operator> <name>detect</name> <operator>*</operator> <operator>(</operator><operator>(</operator><name>delta</name> <operator>&lt;</operator> <operator>-</operator><name>detect</name> <operator>*</operator> <literal type="number">.7f</literal><operator>)</operator> <operator>-</operator> <operator>(</operator><name>delta</name> <operator>&gt;</operator> <name>detect</name> <operator>*</operator> <literal type="number">.7f</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>prev_angle1</name> <operator>=</operator> <name>angle</name></expr>;</expr_stmt>

<expr_stmt><expr><name>cum_1pi</name> <operator>+=</operator> <call><name>fabsf</name><argument_list>(<argument><expr><name>adjust</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>pi_wraps</name><index>[<expr><name>i</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>cum_1pi</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>work</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>safe_log</name><argument_list>(<argument><expr><call><name>sqrtf</name><argument_list>(<argument><expr><call><name>SQR</name><argument_list>(<argument><expr><name><name>work</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>SQR</name><argument_list>(<argument><expr><name><name>work</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>work</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>PACK</name><argument_list>(<argument><expr><name>work</name></expr></argument>, <argument><expr><name>work_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_rdft_calc</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>irdft</name></name></expr></argument>, <argument><expr><name>work</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>work_len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>work</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*=</operator> <literal type="number">2.f</literal> <operator>/</operator> <name>work_len</name></expr>;</expr_stmt></block_content></block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>work_len</name> <operator>/</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content> 

<expr_stmt><expr><name><name>work</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>work</name><index>[<expr><name>i</name> <operator>+</operator> <name>work_len</name> <operator>/</operator> <literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>av_rdft_calc</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>rdft</name></name></expr></argument>, <argument><expr><name>work</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">2</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>work_len</name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">2</literal></expr></incr>)</control><block type="pseudo"><block_content> 

<expr_stmt><expr><name><name>work</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>phase1</name> <operator>*</operator> <name>i</name> <operator>/</operator> <name>work_len</name> <operator>*</operator> <name><name>pi_wraps</name><index>[<expr><name>work_len</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><literal type="number">1</literal> <operator>-</operator> <name>phase1</name><operator>)</operator> <operator>*</operator> <operator>(</operator><name><name>work</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>pi_wraps</name><index>[<expr><name>i</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>]</index></name><operator>)</operator> <operator>-</operator> <name><name>pi_wraps</name><index>[<expr><name>i</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name><name>work</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>exp</name><argument_list>(<argument><expr><name><name>work</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>work</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>exp</name><argument_list>(<argument><expr><name><name>work</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">2</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>work_len</name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">2</literal></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>x</name> <init>= <expr><call><name>expf</name><argument_list>(<argument><expr><name><name>work</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>work</name><index>[<expr><name>i</name></expr> ]</index></name> <operator>=</operator> <name>x</name> <operator>*</operator> <call><name>cosf</name><argument_list>(<argument><expr><name><name>work</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>work</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>x</name> <operator>*</operator> <call><name>sinf</name><argument_list>(<argument><expr><name><name>work</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>av_rdft_calc</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>irdft</name></name></expr></argument>, <argument><expr><name>work</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>work_len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>work</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*=</operator> <literal type="number">2.f</literal> <operator>/</operator> <name>work_len</name></expr>;</expr_stmt></block_content></block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><name><name>pi_wraps</name><index>[<expr><name>work_len</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>]</index></name> <operator>/</operator> <name>M_PI</name> <operator>+</operator> <literal type="number">.5f</literal><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>imp_sum</name> <operator>+=</operator> <name><name>work</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>fabs</name><argument_list>(<argument><expr><name>imp_sum</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <call><name>fabs</name><argument_list>(<argument><expr><name>peak_imp_sum</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>peak_imp_sum</name> <operator>=</operator> <name>imp_sum</name></expr>;</expr_stmt>

<expr_stmt><expr><name>peak</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>work</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;</operator> <name><name>work</name><index>[<expr><name>imp_peak</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><name>imp_peak</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<while>while <condition>(<expr><name>peak</name> <operator>&amp;&amp;</operator> <call><name>fabsf</name><argument_list>(<argument><expr><name><name>work</name><index>[<expr><name>peak</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <call><name>fabsf</name><argument_list>(<argument><expr><name><name>work</name><index>[<expr><name>peak</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>work</name><index>[<expr><name>peak</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name><name>work</name><index>[<expr><name>peak</name></expr>]</index></name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>peak</name><operator>--</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>phase1</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>begin</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>phase1</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>begin</name> <operator>=</operator> <name>peak</name> <operator>-</operator> <operator>*</operator><name>len</name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>begin</name> <operator>=</operator> <operator>(</operator><literal type="number">.997f</literal> <operator>-</operator> <operator>(</operator><literal type="number">2</literal> <operator>-</operator> <name>phase1</name><operator>)</operator> <operator>*</operator> <literal type="number">.22f</literal><operator>)</operator> <operator>*</operator> <operator>*</operator><name>len</name> <operator>+</operator> <literal type="number">.5f</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>end</name> <operator>=</operator> <operator>(</operator><literal type="number">.997f</literal> <operator>+</operator> <operator>(</operator><literal type="number">0</literal> <operator>-</operator> <name>phase1</name><operator>)</operator> <operator>*</operator> <literal type="number">.22f</literal><operator>)</operator> <operator>*</operator> <operator>*</operator><name>len</name> <operator>+</operator> <literal type="number">.5f</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>begin</name> <operator>=</operator> <name>peak</name> <operator>-</operator> <operator>(</operator><name>begin</name> <operator>&amp;</operator> <operator>~</operator><literal type="number">3</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>end</name> <operator>=</operator> <name>peak</name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <operator>(</operator><operator>(</operator><name>end</name> <operator>+</operator> <literal type="number">3</literal><operator>)</operator> <operator>&amp;</operator> <operator>~</operator><literal type="number">3</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>len</name> <operator>=</operator> <name>end</name> <operator>-</operator> <name>begin</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>h</name> <operator>=</operator> <call><name>av_realloc_f</name><argument_list>(<argument><expr><operator>*</operator><name>h</name></expr></argument>, <argument><expr><operator>*</operator><name>len</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><operator>*</operator><name>h</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>h</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>work</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>*</operator><name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>h</name><operator>)</operator><index>[<expr><name>i</name></expr>]</index> <operator>=</operator> <name><name>work</name><index>[<expr><operator>(</operator><name>begin</name> <operator>+</operator> <operator>(</operator><ternary><condition><expr><name>phase</name> <operator>&gt;</operator> <literal type="number">50.f</literal></expr> ?</condition><then> <expr><operator>*</operator><name>len</name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <name>i</name></expr> </then><else>: <expr><name>i</name></expr></else></ternary><operator>)</operator> <operator>+</operator> <name>work_len</name><operator>)</operator> <operator>&amp;</operator> <operator>(</operator><name>work_len</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><operator>*</operator><name>post_len</name> <operator>=</operator> <ternary><condition><expr><name>phase</name> <operator>&gt;</operator> <literal type="number">50</literal></expr> ?</condition><then> <expr><name>peak</name> <operator>-</operator> <name>begin</name></expr> </then><else>: <expr><name>begin</name> <operator>+</operator> <operator>*</operator><name>len</name> <operator>-</operator> <operator>(</operator><name>peak</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"%d nPI=%g peak-sum@%i=%g (val@%i=%g); len=%i post=%i (%g%%)\n"</literal></expr></argument>,

<argument><expr><name>work_len</name></expr></argument>, <argument><expr><name><name>pi_wraps</name><index>[<expr><name>work_len</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>]</index></name> <operator>/</operator> <name>M_PI</name></expr></argument>, <argument><expr><name>peak</name></expr></argument>, <argument><expr><name>peak_imp_sum</name></expr></argument>, <argument><expr><name>imp_peak</name></expr></argument>,

<argument><expr><name><name>work</name><index>[<expr><name>imp_peak</name></expr>]</index></name></expr></argument>, <argument><expr><operator>*</operator><name>len</name></expr></argument>, <argument><expr><operator>*</operator><name>post_len</name></expr></argument>, <argument><expr><literal type="number">100.f</literal> <operator>-</operator> <literal type="number">100.f</literal> <operator>*</operator> <operator>*</operator><name>post_len</name> <operator>/</operator> <operator>(</operator><operator>*</operator><name>len</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>work</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>config_output</name><parameter_list>(<parameter><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>outlink</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>outlink</name><operator>-&gt;</operator><name>src</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SincContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>Fn</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>sample_rate</name></name> <operator>*</operator> <literal type="number">.5f</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name><name>h</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>n</name></decl>, <decl><type ref="prev"/><name>post_peak</name></decl>, <decl><type ref="prev"/><name>longer</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>outlink</name><operator>-&gt;</operator><name>sample_rate</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>sample_rate</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>pts</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>Fc0</name></name> <operator>&gt;=</operator> <name>Fn</name> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>Fc1</name></name> <operator>&gt;=</operator> <name>Fn</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"filter frequency must be less than %d/2.\n"</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>sample_rate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>h</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>lpf</name><argument_list>(<argument><expr><name>Fn</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>Fc0</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>tbw0</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>num_taps</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>att</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>beta</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>round</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>lpf</name><argument_list>(<argument><expr><name>Fn</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>Fc1</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>tbw1</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>num_taps</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>att</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>beta</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>round</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>h</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>invert</name><argument_list>(<argument><expr><name><name>h</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>num_taps</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>longer</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>num_taps</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&gt;</operator> <name><name>s</name><operator>-&gt;</operator><name>num_taps</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>n</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>num_taps</name><index>[<expr><name>longer</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>h</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>h</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>num_taps</name><index>[<expr><operator>!</operator><name>longer</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>h</name><index>[<expr><name>longer</name></expr>]</index><index>[<expr><name>i</name> <operator>+</operator> <operator>(</operator><name>n</name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>num_taps</name><index>[<expr><operator>!</operator><name>longer</name></expr>]</index></name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr>]</index></name> <operator>+=</operator> <name><name>h</name><index>[<expr><operator>!</operator><name>longer</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>Fc0</name></name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>Fc1</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>invert</name><argument_list>(<argument><expr><name><name>h</name><index>[<expr><name>longer</name></expr>]</index></name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name><name>h</name><index>[<expr><operator>!</operator><name>longer</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>phase</name></name> <operator>!=</operator> <literal type="number">50.f</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>fir_to_phase</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>h</name><index>[<expr><name>longer</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>post_peak</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>phase</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>post_peak</name> <operator>=</operator> <name>n</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>n</name></name> <operator>=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><call><name>av_log2</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>rdft_len</name></name> <operator>=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <call><name>av_log2</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>coeffs</name></name> <operator>=</operator> <call><name>av_calloc</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>n</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>coeffs</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>coeffs</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>coeffs</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>h</name><index>[<expr><name>longer</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name><name>h</name><index>[<expr><name>longer</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_rdft_end</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>rdft</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_rdft_end</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>irdft</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>rdft</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>irdft</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>void</name></type> <name>uninit</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>SincContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>coeffs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_rdft_end</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>rdft</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_rdft_end</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>irdft</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>rdft</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>irdft</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVFilterPad</name></type> <name><name>sinc_outputs</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"default"</literal></expr>,

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_AUDIO</name></expr>,

<expr><operator>.</operator><name>config_props</name> <operator>=</operator> <name>config_output</name></expr>,

<expr><operator>.</operator><name>request_frame</name> <operator>=</operator> <name>request_frame</name></expr>,

}</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AF</name></cpp:macro> <cpp:value>AV_OPT_FLAG_AUDIO_PARAM|AV_OPT_FLAG_FILTERING_PARAM</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OFFSET</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>offsetof(SincContext, x)</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVOption</name></type> <name><name>sinc_options</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><literal type="string">"sample_rate"</literal></expr>, <expr><literal type="string">"set sample rate"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>sample_rate</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">44100</literal></expr>}</block></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>AF</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"r"</literal></expr>, <expr><literal type="string">"set sample rate"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>sample_rate</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">44100</literal></expr>}</block></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>AF</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"nb_samples"</literal></expr>, <expr><literal type="string">"set the number of samples per requested frame"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>nb_samples</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">1024</literal></expr>}</block></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>AF</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"n"</literal></expr>, <expr><literal type="string">"set the number of samples per requested frame"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>nb_samples</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">1024</literal></expr>}</block></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>AF</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"hp"</literal></expr>, <expr><literal type="string">"set high-pass filter frequency"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>Fc0</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_FLOAT</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name><operator>=</operator><literal type="number">0</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>AF</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"lp"</literal></expr>, <expr><literal type="string">"set low-pass filter frequency"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>Fc1</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_FLOAT</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name><operator>=</operator><literal type="number">0</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>AF</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"phase"</literal></expr>, <expr><literal type="string">"set filter phase response"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>phase</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_FLOAT</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name><operator>=</operator><literal type="number">50</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">100</literal></expr>, <expr><name>AF</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"beta"</literal></expr>, <expr><literal type="string">"set kaiser window beta"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>beta</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_FLOAT</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name><operator>=</operator><operator>-</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">256</literal></expr>, <expr><name>AF</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"att"</literal></expr>, <expr><literal type="string">"set stop-band attenuation"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>att</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_FLOAT</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name><operator>=</operator><literal type="number">120</literal></expr>}</block></expr>, <expr><literal type="number">40</literal></expr>, <expr><literal type="number">180</literal></expr>, <expr><name>AF</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"round"</literal></expr>, <expr><literal type="string">"enable rounding"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>round</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_BOOL</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">0</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>AF</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"hptaps"</literal></expr>, <expr><literal type="string">"set number of taps for high-pass filter"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name><name>num_taps</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">0</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">32768</literal></expr>, <expr><name>AF</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"lptaps"</literal></expr>, <expr><literal type="string">"set number of taps for low-pass filter"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name><name>num_taps</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">0</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">32768</literal></expr>, <expr><name>AF</name></expr> }</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>AVFILTER_DEFINE_CLASS</name><argument_list>(<argument><expr><name>sinc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>AVFilter</name></type> <name>ff_asrc_sinc</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"sinc"</literal></expr>,

<expr><operator>.</operator><name>description</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"Generate a sinc kaiser-windowed low-pass, high-pass, band-pass, or band-reject FIR coefficients."</literal></expr></argument>)</argument_list></call></expr>,

<expr><operator>.</operator><name>priv_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SincContext</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><operator>.</operator><name>priv_class</name> <operator>=</operator> <operator>&amp;</operator><name>sinc_class</name></expr>,

<expr><operator>.</operator><name>query_formats</name> <operator>=</operator> <name>query_formats</name></expr>,

<expr><operator>.</operator><name>uninit</name> <operator>=</operator> <name>uninit</name></expr>,

<expr><operator>.</operator><name>inputs</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>outputs</name> <operator>=</operator> <name>sinc_outputs</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

</unit>
