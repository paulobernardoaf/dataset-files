<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavfilter\motion_estimation.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"motion_estimation.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int8_t</name></type> <name><name>sqr1</name><index>[<expr><literal type="number">8</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{<expr><block>{ <expr><literal type="number">0</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>, <expr><block>{<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>, <expr><block>{<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><block>{<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int8_t</name></type> <name><name>dia1</name><index>[<expr><literal type="number">4</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{<expr><block>{<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int8_t</name></type> <name><name>dia2</name><index>[<expr><literal type="number">8</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{<expr><block>{<expr><operator>-</operator><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>, <expr><block>{<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0</literal></expr>,<expr><operator>-</operator><literal type="number">2</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>, <expr><block>{<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int8_t</name></type> <name><name>hex2</name><index>[<expr><literal type="number">6</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{<expr><block>{<expr><operator>-</operator><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>, <expr><block>{<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">2</literal></expr>}</block></expr>, <expr><block>{<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">2</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int8_t</name></type> <name><name>hex4</name><index>[<expr><literal type="number">16</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{<expr><block>{<expr><operator>-</operator><literal type="number">4</literal></expr>,<expr><operator>-</operator><literal type="number">2</literal></expr>}</block></expr>, <expr><block>{<expr><operator>-</operator><literal type="number">4</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><block>{<expr><operator>-</operator><literal type="number">4</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>, <expr><block>{<expr><operator>-</operator><literal type="number">4</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>, <expr><block>{<expr><operator>-</operator><literal type="number">4</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="number">4</literal></expr>,<expr><operator>-</operator><literal type="number">2</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">4</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">4</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">4</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">4</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>,

<expr><block>{<expr><operator>-</operator><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">4</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>, <expr><block>{<expr><operator>-</operator><literal type="number">2</literal></expr>,<expr><operator>-</operator><literal type="number">3</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0</literal></expr>,<expr><operator>-</operator><literal type="number">4</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">2</literal></expr>,<expr><operator>-</operator><literal type="number">3</literal></expr>}</block></expr>}</block></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COST_MV</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro><cpp:value>do {cost = me_ctx-&gt;get_cost(me_ctx, x_mb, y_mb, x, y);if (cost &lt; cost_min) {cost_min = cost;mv[0] = x;mv[1] = y;}} while(0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COST_P_MV</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro><cpp:value>if (x &gt;= x_min &amp;&amp; x &lt;= x_max &amp;&amp; y &gt;= y_min &amp;&amp; y &lt;= y_max)COST_MV(x, y);</cpp:value></cpp:define>

<function><type><name>void</name></type> <name>ff_me_init_context</name><parameter_list>(<parameter><decl><type><name>AVMotionEstContext</name> <modifier>*</modifier></type><name>me_ctx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mb_size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>search_param</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x_min</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x_max</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y_min</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y_max</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>me_ctx</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator> <name>width</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>me_ctx</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <name>height</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>me_ctx</name><operator>-&gt;</operator><name>mb_size</name></name> <operator>=</operator> <name>mb_size</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>me_ctx</name><operator>-&gt;</operator><name>search_param</name></name> <operator>=</operator> <name>search_param</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>me_ctx</name><operator>-&gt;</operator><name>get_cost</name></name> <operator>=</operator> <operator>&amp;</operator><name>ff_me_cmp_sad</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>me_ctx</name><operator>-&gt;</operator><name>x_min</name></name> <operator>=</operator> <name>x_min</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>me_ctx</name><operator>-&gt;</operator><name>x_max</name></name> <operator>=</operator> <name>x_max</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>me_ctx</name><operator>-&gt;</operator><name>y_min</name></name> <operator>=</operator> <name>y_min</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>me_ctx</name><operator>-&gt;</operator><name>y_max</name></name> <operator>=</operator> <name>y_max</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>uint64_t</name></type> <name>ff_me_cmp_sad</name><parameter_list>(<parameter><decl><type><name>AVMotionEstContext</name> <modifier>*</modifier></type><name>me_ctx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x_mb</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y_mb</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x_mv</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y_mv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>linesize</name> <init>= <expr><name><name>me_ctx</name><operator>-&gt;</operator><name>linesize</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>data_ref</name> <init>= <expr><name><name>me_ctx</name><operator>-&gt;</operator><name>data_ref</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>data_cur</name> <init>= <expr><name><name>me_ctx</name><operator>-&gt;</operator><name>data_cur</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>sad</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<expr_stmt><expr><name>data_ref</name> <operator>+=</operator> <name>y_mv</name> <operator>*</operator> <name>linesize</name></expr>;</expr_stmt>

<expr_stmt><expr><name>data_cur</name> <operator>+=</operator> <name>y_mb</name> <operator>*</operator> <name>linesize</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>me_ctx</name><operator>-&gt;</operator><name>mb_size</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>me_ctx</name><operator>-&gt;</operator><name>mb_size</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name>sad</name> <operator>+=</operator> <call><name>FFABS</name><argument_list>(<argument><expr><name><name>data_ref</name><index>[<expr><name>x_mv</name> <operator>+</operator> <name>i</name> <operator>+</operator> <name>j</name> <operator>*</operator> <name>linesize</name></expr>]</index></name> <operator>-</operator> <name><name>data_cur</name><index>[<expr><name>x_mb</name> <operator>+</operator> <name>i</name> <operator>+</operator> <name>j</name> <operator>*</operator> <name>linesize</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for></block_content></block></for>

<return>return <expr><name>sad</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>uint64_t</name></type> <name>ff_me_search_esa</name><parameter_list>(<parameter><decl><type><name>AVMotionEstContext</name> <modifier>*</modifier></type><name>me_ctx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x_mb</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y_mb</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>mv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>x_min</name> <init>= <expr><call><name>FFMAX</name><argument_list>(<argument><expr><name><name>me_ctx</name><operator>-&gt;</operator><name>x_min</name></name></expr></argument>, <argument><expr><name>x_mb</name> <operator>-</operator> <name><name>me_ctx</name><operator>-&gt;</operator><name>search_param</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>y_min</name> <init>= <expr><call><name>FFMAX</name><argument_list>(<argument><expr><name><name>me_ctx</name><operator>-&gt;</operator><name>y_min</name></name></expr></argument>, <argument><expr><name>y_mb</name> <operator>-</operator> <name><name>me_ctx</name><operator>-&gt;</operator><name>search_param</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>x_max</name> <init>= <expr><call><name>FFMIN</name><argument_list>(<argument><expr><name>x_mb</name> <operator>+</operator> <name><name>me_ctx</name><operator>-&gt;</operator><name>search_param</name></name></expr></argument>, <argument><expr><name><name>me_ctx</name><operator>-&gt;</operator><name>x_max</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>y_max</name> <init>= <expr><call><name>FFMIN</name><argument_list>(<argument><expr><name>y_mb</name> <operator>+</operator> <name><name>me_ctx</name><operator>-&gt;</operator><name>search_param</name></name></expr></argument>, <argument><expr><name><name>me_ctx</name><operator>-&gt;</operator><name>y_max</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>cost</name></decl>, <decl><type ref="prev"/><name>cost_min</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>cost_min</name> <operator>=</operator> <call><name><name>me_ctx</name><operator>-&gt;</operator><name>get_cost</name></name><argument_list>(<argument><expr><name>me_ctx</name></expr></argument>, <argument><expr><name>x_mb</name></expr></argument>, <argument><expr><name>y_mb</name></expr></argument>, <argument><expr><name>x_mb</name></expr></argument>, <argument><expr><name>y_mb</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>cost_min</name></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <name>y_min</name></expr>;</init> <condition><expr><name>y</name> <operator>&lt;=</operator> <name>y_max</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <name>x_min</name></expr>;</init> <condition><expr><name>x</name> <operator>&lt;=</operator> <name>x_max</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>COST_MV</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for></block_content></block></for>

<return>return <expr><name>cost_min</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>uint64_t</name></type> <name>ff_me_search_tss</name><parameter_list>(<parameter><decl><type><name>AVMotionEstContext</name> <modifier>*</modifier></type><name>me_ctx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x_mb</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y_mb</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>mv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>x_min</name> <init>= <expr><call><name>FFMAX</name><argument_list>(<argument><expr><name><name>me_ctx</name><operator>-&gt;</operator><name>x_min</name></name></expr></argument>, <argument><expr><name>x_mb</name> <operator>-</operator> <name><name>me_ctx</name><operator>-&gt;</operator><name>search_param</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>y_min</name> <init>= <expr><call><name>FFMAX</name><argument_list>(<argument><expr><name><name>me_ctx</name><operator>-&gt;</operator><name>y_min</name></name></expr></argument>, <argument><expr><name>y_mb</name> <operator>-</operator> <name><name>me_ctx</name><operator>-&gt;</operator><name>search_param</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>x_max</name> <init>= <expr><call><name>FFMIN</name><argument_list>(<argument><expr><name>x_mb</name> <operator>+</operator> <name><name>me_ctx</name><operator>-&gt;</operator><name>search_param</name></name></expr></argument>, <argument><expr><name><name>me_ctx</name><operator>-&gt;</operator><name>x_max</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>y_max</name> <init>= <expr><call><name>FFMIN</name><argument_list>(<argument><expr><name>y_mb</name> <operator>+</operator> <name><name>me_ctx</name><operator>-&gt;</operator><name>search_param</name></name></expr></argument>, <argument><expr><name><name>me_ctx</name><operator>-&gt;</operator><name>y_max</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>cost</name></decl>, <decl><type ref="prev"/><name>cost_min</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>step</name> <init>= <expr><call><name>ROUNDED_DIV</name><argument_list>(<argument><expr><name><name>me_ctx</name><operator>-&gt;</operator><name>search_param</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>mv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>x_mb</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>y_mb</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>cost_min</name> <operator>=</operator> <call><name><name>me_ctx</name><operator>-&gt;</operator><name>get_cost</name></name><argument_list>(<argument><expr><name>me_ctx</name></expr></argument>, <argument><expr><name>x_mb</name></expr></argument>, <argument><expr><name>y_mb</name></expr></argument>, <argument><expr><name>x_mb</name></expr></argument>, <argument><expr><name>y_mb</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>cost_min</name></expr>;</return></block_content></block></if></if_stmt>

<do>do <block>{<block_content>

<expr_stmt><expr><name>x</name> <operator>=</operator> <name><name>mv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>y</name> <operator>=</operator> <name><name>mv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>COST_P_MV</name><argument_list>(<argument><expr><name>x</name> <operator>+</operator> <name><name>sqr1</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name>step</name></expr></argument>, <argument><expr><name>y</name> <operator>+</operator> <name><name>sqr1</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name>step</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>step</name> <operator>=</operator> <name>step</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block> while <condition>(<expr><name>step</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>;</do>

<return>return <expr><name>cost_min</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>uint64_t</name></type> <name>ff_me_search_tdls</name><parameter_list>(<parameter><decl><type><name>AVMotionEstContext</name> <modifier>*</modifier></type><name>me_ctx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x_mb</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y_mb</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>mv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>x_min</name> <init>= <expr><call><name>FFMAX</name><argument_list>(<argument><expr><name><name>me_ctx</name><operator>-&gt;</operator><name>x_min</name></name></expr></argument>, <argument><expr><name>x_mb</name> <operator>-</operator> <name><name>me_ctx</name><operator>-&gt;</operator><name>search_param</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>y_min</name> <init>= <expr><call><name>FFMAX</name><argument_list>(<argument><expr><name><name>me_ctx</name><operator>-&gt;</operator><name>y_min</name></name></expr></argument>, <argument><expr><name>y_mb</name> <operator>-</operator> <name><name>me_ctx</name><operator>-&gt;</operator><name>search_param</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>x_max</name> <init>= <expr><call><name>FFMIN</name><argument_list>(<argument><expr><name>x_mb</name> <operator>+</operator> <name><name>me_ctx</name><operator>-&gt;</operator><name>search_param</name></name></expr></argument>, <argument><expr><name><name>me_ctx</name><operator>-&gt;</operator><name>x_max</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>y_max</name> <init>= <expr><call><name>FFMIN</name><argument_list>(<argument><expr><name>y_mb</name> <operator>+</operator> <name><name>me_ctx</name><operator>-&gt;</operator><name>search_param</name></name></expr></argument>, <argument><expr><name><name>me_ctx</name><operator>-&gt;</operator><name>y_max</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>cost</name></decl>, <decl><type ref="prev"/><name>cost_min</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>step</name> <init>= <expr><call><name>ROUNDED_DIV</name><argument_list>(<argument><expr><name><name>me_ctx</name><operator>-&gt;</operator><name>search_param</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>mv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>x_mb</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>y_mb</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>cost_min</name> <operator>=</operator> <call><name><name>me_ctx</name><operator>-&gt;</operator><name>get_cost</name></name><argument_list>(<argument><expr><name>me_ctx</name></expr></argument>, <argument><expr><name>x_mb</name></expr></argument>, <argument><expr><name>y_mb</name></expr></argument>, <argument><expr><name>x_mb</name></expr></argument>, <argument><expr><name>y_mb</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>cost_min</name></expr>;</return></block_content></block></if></if_stmt>

<do>do <block>{<block_content>

<expr_stmt><expr><name>x</name> <operator>=</operator> <name><name>mv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>y</name> <operator>=</operator> <name><name>mv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>COST_P_MV</name><argument_list>(<argument><expr><name>x</name> <operator>+</operator> <name><name>dia1</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name>step</name></expr></argument>, <argument><expr><name>y</name> <operator>+</operator> <name><name>dia1</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name>step</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name>x</name> <operator>==</operator> <name><name>mv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <name>y</name> <operator>==</operator> <name><name>mv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>step</name> <operator>=</operator> <name>step</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block> while <condition>(<expr><name>step</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>;</do>

<return>return <expr><name>cost_min</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>uint64_t</name></type> <name>ff_me_search_ntss</name><parameter_list>(<parameter><decl><type><name>AVMotionEstContext</name> <modifier>*</modifier></type><name>me_ctx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x_mb</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y_mb</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>mv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>x_min</name> <init>= <expr><call><name>FFMAX</name><argument_list>(<argument><expr><name><name>me_ctx</name><operator>-&gt;</operator><name>x_min</name></name></expr></argument>, <argument><expr><name>x_mb</name> <operator>-</operator> <name><name>me_ctx</name><operator>-&gt;</operator><name>search_param</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>y_min</name> <init>= <expr><call><name>FFMAX</name><argument_list>(<argument><expr><name><name>me_ctx</name><operator>-&gt;</operator><name>y_min</name></name></expr></argument>, <argument><expr><name>y_mb</name> <operator>-</operator> <name><name>me_ctx</name><operator>-&gt;</operator><name>search_param</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>x_max</name> <init>= <expr><call><name>FFMIN</name><argument_list>(<argument><expr><name>x_mb</name> <operator>+</operator> <name><name>me_ctx</name><operator>-&gt;</operator><name>search_param</name></name></expr></argument>, <argument><expr><name><name>me_ctx</name><operator>-&gt;</operator><name>x_max</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>y_max</name> <init>= <expr><call><name>FFMIN</name><argument_list>(<argument><expr><name>y_mb</name> <operator>+</operator> <name><name>me_ctx</name><operator>-&gt;</operator><name>search_param</name></name></expr></argument>, <argument><expr><name><name>me_ctx</name><operator>-&gt;</operator><name>y_max</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>cost</name></decl>, <decl><type ref="prev"/><name>cost_min</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>step</name> <init>= <expr><call><name>ROUNDED_DIV</name><argument_list>(<argument><expr><name><name>me_ctx</name><operator>-&gt;</operator><name>search_param</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>first_step</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>mv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>x_mb</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>y_mb</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>cost_min</name> <operator>=</operator> <call><name><name>me_ctx</name><operator>-&gt;</operator><name>get_cost</name></name><argument_list>(<argument><expr><name>me_ctx</name></expr></argument>, <argument><expr><name>x_mb</name></expr></argument>, <argument><expr><name>y_mb</name></expr></argument>, <argument><expr><name>x_mb</name></expr></argument>, <argument><expr><name>y_mb</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>cost_min</name></expr>;</return></block_content></block></if></if_stmt>

<do>do <block>{<block_content>

<expr_stmt><expr><name>x</name> <operator>=</operator> <name><name>mv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>y</name> <operator>=</operator> <name><name>mv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>COST_P_MV</name><argument_list>(<argument><expr><name>x</name> <operator>+</operator> <name><name>sqr1</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name>step</name></expr></argument>, <argument><expr><name>y</name> <operator>+</operator> <name><name>sqr1</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name>step</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name>first_step</name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>COST_P_MV</name><argument_list>(<argument><expr><name>x</name> <operator>+</operator> <name><name>sqr1</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>y</name> <operator>+</operator> <name><name>sqr1</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name>x</name> <operator>==</operator> <name><name>mv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <name>y</name> <operator>==</operator> <name><name>mv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>cost_min</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FFABS</name><argument_list>(<argument><expr><name>x</name> <operator>-</operator> <name><name>mv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <call><name>FFABS</name><argument_list>(<argument><expr><name>y</name> <operator>-</operator> <name><name>mv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>x</name> <operator>=</operator> <name><name>mv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>y</name> <operator>=</operator> <name><name>mv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>COST_P_MV</name><argument_list>(<argument><expr><name>x</name> <operator>+</operator> <name><name>sqr1</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>y</name> <operator>+</operator> <name><name>sqr1</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<return>return <expr><name>cost_min</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>first_step</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>step</name> <operator>=</operator> <name>step</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block> while <condition>(<expr><name>step</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>;</do>

<return>return <expr><name>cost_min</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>uint64_t</name></type> <name>ff_me_search_fss</name><parameter_list>(<parameter><decl><type><name>AVMotionEstContext</name> <modifier>*</modifier></type><name>me_ctx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x_mb</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y_mb</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>mv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>x_min</name> <init>= <expr><call><name>FFMAX</name><argument_list>(<argument><expr><name><name>me_ctx</name><operator>-&gt;</operator><name>x_min</name></name></expr></argument>, <argument><expr><name>x_mb</name> <operator>-</operator> <name><name>me_ctx</name><operator>-&gt;</operator><name>search_param</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>y_min</name> <init>= <expr><call><name>FFMAX</name><argument_list>(<argument><expr><name><name>me_ctx</name><operator>-&gt;</operator><name>y_min</name></name></expr></argument>, <argument><expr><name>y_mb</name> <operator>-</operator> <name><name>me_ctx</name><operator>-&gt;</operator><name>search_param</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>x_max</name> <init>= <expr><call><name>FFMIN</name><argument_list>(<argument><expr><name>x_mb</name> <operator>+</operator> <name><name>me_ctx</name><operator>-&gt;</operator><name>search_param</name></name></expr></argument>, <argument><expr><name><name>me_ctx</name><operator>-&gt;</operator><name>x_max</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>y_max</name> <init>= <expr><call><name>FFMIN</name><argument_list>(<argument><expr><name>y_mb</name> <operator>+</operator> <name><name>me_ctx</name><operator>-&gt;</operator><name>search_param</name></name></expr></argument>, <argument><expr><name><name>me_ctx</name><operator>-&gt;</operator><name>y_max</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>cost</name></decl>, <decl><type ref="prev"/><name>cost_min</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>step</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>mv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>x_mb</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>y_mb</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>cost_min</name> <operator>=</operator> <call><name><name>me_ctx</name><operator>-&gt;</operator><name>get_cost</name></name><argument_list>(<argument><expr><name>me_ctx</name></expr></argument>, <argument><expr><name>x_mb</name></expr></argument>, <argument><expr><name>y_mb</name></expr></argument>, <argument><expr><name>x_mb</name></expr></argument>, <argument><expr><name>y_mb</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>cost_min</name></expr>;</return></block_content></block></if></if_stmt>

<do>do <block>{<block_content>

<expr_stmt><expr><name>x</name> <operator>=</operator> <name><name>mv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>y</name> <operator>=</operator> <name><name>mv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>COST_P_MV</name><argument_list>(<argument><expr><name>x</name> <operator>+</operator> <name><name>sqr1</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name>step</name></expr></argument>, <argument><expr><name>y</name> <operator>+</operator> <name><name>sqr1</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name>step</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name>x</name> <operator>==</operator> <name><name>mv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <name>y</name> <operator>==</operator> <name><name>mv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>step</name> <operator>=</operator> <name>step</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block> while <condition>(<expr><name>step</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>;</do>

<return>return <expr><name>cost_min</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>uint64_t</name></type> <name>ff_me_search_ds</name><parameter_list>(<parameter><decl><type><name>AVMotionEstContext</name> <modifier>*</modifier></type><name>me_ctx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x_mb</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y_mb</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>mv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>x_min</name> <init>= <expr><call><name>FFMAX</name><argument_list>(<argument><expr><name><name>me_ctx</name><operator>-&gt;</operator><name>x_min</name></name></expr></argument>, <argument><expr><name>x_mb</name> <operator>-</operator> <name><name>me_ctx</name><operator>-&gt;</operator><name>search_param</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>y_min</name> <init>= <expr><call><name>FFMAX</name><argument_list>(<argument><expr><name><name>me_ctx</name><operator>-&gt;</operator><name>y_min</name></name></expr></argument>, <argument><expr><name>y_mb</name> <operator>-</operator> <name><name>me_ctx</name><operator>-&gt;</operator><name>search_param</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>x_max</name> <init>= <expr><call><name>FFMIN</name><argument_list>(<argument><expr><name>x_mb</name> <operator>+</operator> <name><name>me_ctx</name><operator>-&gt;</operator><name>search_param</name></name></expr></argument>, <argument><expr><name><name>me_ctx</name><operator>-&gt;</operator><name>x_max</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>y_max</name> <init>= <expr><call><name>FFMIN</name><argument_list>(<argument><expr><name>y_mb</name> <operator>+</operator> <name><name>me_ctx</name><operator>-&gt;</operator><name>search_param</name></name></expr></argument>, <argument><expr><name><name>me_ctx</name><operator>-&gt;</operator><name>y_max</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>cost</name></decl>, <decl><type ref="prev"/><name>cost_min</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>av_unused</name> <name>int</name></type> <name>dir_x</name></decl>, <decl><type ref="prev"/><name>dir_y</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>cost_min</name> <operator>=</operator> <call><name><name>me_ctx</name><operator>-&gt;</operator><name>get_cost</name></name><argument_list>(<argument><expr><name>me_ctx</name></expr></argument>, <argument><expr><name>x_mb</name></expr></argument>, <argument><expr><name>y_mb</name></expr></argument>, <argument><expr><name>x_mb</name></expr></argument>, <argument><expr><name>y_mb</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>cost_min</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>x</name> <operator>=</operator> <name>x_mb</name></expr>;</expr_stmt> <expr_stmt><expr><name>y</name> <operator>=</operator> <name>y_mb</name></expr>;</expr_stmt>

<expr_stmt><expr><name>dir_x</name> <operator>=</operator> <name>dir_y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<do>do <block>{<block_content>

<expr_stmt><expr><name>x</name> <operator>=</operator> <name><name>mv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>y</name> <operator>=</operator> <name><name>mv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">1</literal></expr></cpp:if>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>COST_P_MV</name><argument_list>(<argument><expr><name>x</name> <operator>+</operator> <name><name>dia2</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>y</name> <operator>+</operator> <name><name>dia2</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<if_stmt><if>if <condition>(<expr><name>dir_x</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>COST_P_MV</name><argument_list>(<argument><expr><name>x</name> <operator>-</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>dir_x</name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>dir_y</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>COST_P_MV</name><argument_list>(<argument><expr><name>x</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>y</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>dir_y</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>COST_P_MV</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name> <operator>-</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>dir_x</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>dir_y</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>COST_P_MV</name><argument_list>(<argument><expr><name>x</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>y</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>dir_x</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>COST_P_MV</name><argument_list>(<argument><expr><name>x</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>dir_x</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>dir_y</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>COST_P_MV</name><argument_list>(<argument><expr><name>x</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>y</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>dir_y</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>COST_P_MV</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>dir_x</name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>dir_y</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>COST_P_MV</name><argument_list>(<argument><expr><name>x</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>y</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>dir_x</name> <operator>=</operator> <name><name>mv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <name>x</name></expr>;</expr_stmt>

<expr_stmt><expr><name>dir_y</name> <operator>=</operator> <name><name>mv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name>y</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block> while <condition>(<expr><name>x</name> <operator>!=</operator> <name><name>mv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>||</operator> <name>y</name> <operator>!=</operator> <name><name>mv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition>;</do>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>COST_P_MV</name><argument_list>(<argument><expr><name>x</name> <operator>+</operator> <name><name>dia1</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>y</name> <operator>+</operator> <name><name>dia1</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<return>return <expr><name>cost_min</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>uint64_t</name></type> <name>ff_me_search_hexbs</name><parameter_list>(<parameter><decl><type><name>AVMotionEstContext</name> <modifier>*</modifier></type><name>me_ctx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x_mb</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y_mb</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>mv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>x_min</name> <init>= <expr><call><name>FFMAX</name><argument_list>(<argument><expr><name><name>me_ctx</name><operator>-&gt;</operator><name>x_min</name></name></expr></argument>, <argument><expr><name>x_mb</name> <operator>-</operator> <name><name>me_ctx</name><operator>-&gt;</operator><name>search_param</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>y_min</name> <init>= <expr><call><name>FFMAX</name><argument_list>(<argument><expr><name><name>me_ctx</name><operator>-&gt;</operator><name>y_min</name></name></expr></argument>, <argument><expr><name>y_mb</name> <operator>-</operator> <name><name>me_ctx</name><operator>-&gt;</operator><name>search_param</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>x_max</name> <init>= <expr><call><name>FFMIN</name><argument_list>(<argument><expr><name>x_mb</name> <operator>+</operator> <name><name>me_ctx</name><operator>-&gt;</operator><name>search_param</name></name></expr></argument>, <argument><expr><name><name>me_ctx</name><operator>-&gt;</operator><name>x_max</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>y_max</name> <init>= <expr><call><name>FFMIN</name><argument_list>(<argument><expr><name>y_mb</name> <operator>+</operator> <name><name>me_ctx</name><operator>-&gt;</operator><name>search_param</name></name></expr></argument>, <argument><expr><name><name>me_ctx</name><operator>-&gt;</operator><name>y_max</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>cost</name></decl>, <decl><type ref="prev"/><name>cost_min</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>cost_min</name> <operator>=</operator> <call><name><name>me_ctx</name><operator>-&gt;</operator><name>get_cost</name></name><argument_list>(<argument><expr><name>me_ctx</name></expr></argument>, <argument><expr><name>x_mb</name></expr></argument>, <argument><expr><name>y_mb</name></expr></argument>, <argument><expr><name>x_mb</name></expr></argument>, <argument><expr><name>y_mb</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>cost_min</name></expr>;</return></block_content></block></if></if_stmt>

<do>do <block>{<block_content>

<expr_stmt><expr><name>x</name> <operator>=</operator> <name><name>mv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>y</name> <operator>=</operator> <name><name>mv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">6</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>COST_P_MV</name><argument_list>(<argument><expr><name>x</name> <operator>+</operator> <name><name>hex2</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>y</name> <operator>+</operator> <name><name>hex2</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block> while <condition>(<expr><name>x</name> <operator>!=</operator> <name><name>mv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>||</operator> <name>y</name> <operator>!=</operator> <name><name>mv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition>;</do>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>COST_P_MV</name><argument_list>(<argument><expr><name>x</name> <operator>+</operator> <name><name>dia1</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>y</name> <operator>+</operator> <name><name>dia1</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<return>return <expr><name>cost_min</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>uint64_t</name></type> <name>ff_me_search_epzs</name><parameter_list>(<parameter><decl><type><name>AVMotionEstContext</name> <modifier>*</modifier></type><name>me_ctx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x_mb</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y_mb</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>mv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>x_min</name> <init>= <expr><call><name>FFMAX</name><argument_list>(<argument><expr><name><name>me_ctx</name><operator>-&gt;</operator><name>x_min</name></name></expr></argument>, <argument><expr><name>x_mb</name> <operator>-</operator> <name><name>me_ctx</name><operator>-&gt;</operator><name>search_param</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>y_min</name> <init>= <expr><call><name>FFMAX</name><argument_list>(<argument><expr><name><name>me_ctx</name><operator>-&gt;</operator><name>y_min</name></name></expr></argument>, <argument><expr><name>y_mb</name> <operator>-</operator> <name><name>me_ctx</name><operator>-&gt;</operator><name>search_param</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>x_max</name> <init>= <expr><call><name>FFMIN</name><argument_list>(<argument><expr><name>x_mb</name> <operator>+</operator> <name><name>me_ctx</name><operator>-&gt;</operator><name>search_param</name></name></expr></argument>, <argument><expr><name><name>me_ctx</name><operator>-&gt;</operator><name>x_max</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>y_max</name> <init>= <expr><call><name>FFMIN</name><argument_list>(<argument><expr><name>y_mb</name> <operator>+</operator> <name><name>me_ctx</name><operator>-&gt;</operator><name>search_param</name></name></expr></argument>, <argument><expr><name><name>me_ctx</name><operator>-&gt;</operator><name>y_max</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>cost</name></decl>, <decl><type ref="prev"/><name>cost_min</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVMotionEstPredictor</name> <modifier>*</modifier></type><name>preds</name> <init>= <expr><name><name>me_ctx</name><operator>-&gt;</operator><name>preds</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>cost_min</name> <operator>=</operator> <name>UINT64_MAX</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>COST_P_MV</name><argument_list>(<argument><expr><name>x_mb</name> <operator>+</operator> <name><name>me_ctx</name><operator>-&gt;</operator><name>pred_x</name></name></expr></argument>, <argument><expr><name>y_mb</name> <operator>+</operator> <name><name>me_ctx</name><operator>-&gt;</operator><name>pred_y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>preds</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>nb</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>COST_P_MV</name><argument_list>(<argument><expr><name>x_mb</name> <operator>+</operator> <name><name>preds</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>mvs</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>y_mb</name> <operator>+</operator> <name><name>preds</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>mvs</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>preds</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>nb</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>COST_P_MV</name><argument_list>(<argument><expr><name>x_mb</name> <operator>+</operator> <name><name>preds</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>mvs</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>y_mb</name> <operator>+</operator> <name><name>preds</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>mvs</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<do>do <block>{<block_content>

<expr_stmt><expr><name>x</name> <operator>=</operator> <name><name>mv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>y</name> <operator>=</operator> <name><name>mv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>COST_P_MV</name><argument_list>(<argument><expr><name>x</name> <operator>+</operator> <name><name>dia1</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>y</name> <operator>+</operator> <name><name>dia1</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block> while <condition>(<expr><name>x</name> <operator>!=</operator> <name><name>mv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>||</operator> <name>y</name> <operator>!=</operator> <name><name>mv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition>;</do>

<return>return <expr><name>cost_min</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>uint64_t</name></type> <name>ff_me_search_umh</name><parameter_list>(<parameter><decl><type><name>AVMotionEstContext</name> <modifier>*</modifier></type><name>me_ctx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x_mb</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y_mb</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>mv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>x_min</name> <init>= <expr><call><name>FFMAX</name><argument_list>(<argument><expr><name><name>me_ctx</name><operator>-&gt;</operator><name>x_min</name></name></expr></argument>, <argument><expr><name>x_mb</name> <operator>-</operator> <name><name>me_ctx</name><operator>-&gt;</operator><name>search_param</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>y_min</name> <init>= <expr><call><name>FFMAX</name><argument_list>(<argument><expr><name><name>me_ctx</name><operator>-&gt;</operator><name>y_min</name></name></expr></argument>, <argument><expr><name>y_mb</name> <operator>-</operator> <name><name>me_ctx</name><operator>-&gt;</operator><name>search_param</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>x_max</name> <init>= <expr><call><name>FFMIN</name><argument_list>(<argument><expr><name>x_mb</name> <operator>+</operator> <name><name>me_ctx</name><operator>-&gt;</operator><name>search_param</name></name></expr></argument>, <argument><expr><name><name>me_ctx</name><operator>-&gt;</operator><name>x_max</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>y_max</name> <init>= <expr><call><name>FFMIN</name><argument_list>(<argument><expr><name>y_mb</name> <operator>+</operator> <name><name>me_ctx</name><operator>-&gt;</operator><name>search_param</name></name></expr></argument>, <argument><expr><name><name>me_ctx</name><operator>-&gt;</operator><name>y_max</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>cost</name></decl>, <decl><type ref="prev"/><name>cost_min</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>d</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>end_x</name></decl>, <decl><type ref="prev"/><name>end_y</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVMotionEstPredictor</name> <modifier>*</modifier></type><name>pred</name> <init>= <expr><operator>&amp;</operator><name><name>me_ctx</name><operator>-&gt;</operator><name>preds</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>cost_min</name> <operator>=</operator> <name>UINT64_MAX</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>COST_P_MV</name><argument_list>(<argument><expr><name>x_mb</name> <operator>+</operator> <name><name>me_ctx</name><operator>-&gt;</operator><name>pred_x</name></name></expr></argument>, <argument><expr><name>y_mb</name> <operator>+</operator> <name><name>me_ctx</name><operator>-&gt;</operator><name>pred_y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pred</name><operator>-&gt;</operator><name>nb</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>COST_P_MV</name><argument_list>(<argument><expr><name>x_mb</name> <operator>+</operator> <name><name>pred</name><operator>-&gt;</operator><name>mvs</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>y_mb</name> <operator>+</operator> <name><name>pred</name><operator>-&gt;</operator><name>mvs</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>x</name> <operator>=</operator> <name><name>mv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>y</name> <operator>=</operator> <name><name>mv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>d</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>d</name> <operator>&lt;=</operator> <name><name>me_ctx</name><operator>-&gt;</operator><name>search_param</name></name></expr>;</condition> <incr><expr><name>d</name> <operator>+=</operator> <literal type="number">2</literal></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>COST_P_MV</name><argument_list>(<argument><expr><name>x</name> <operator>-</operator> <name>d</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>COST_P_MV</name><argument_list>(<argument><expr><name>x</name> <operator>+</operator> <name>d</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>d</name> <operator>&lt;=</operator> <name><name>me_ctx</name><operator>-&gt;</operator><name>search_param</name></name> <operator>/</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>COST_P_MV</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name> <operator>-</operator> <name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>COST_P_MV</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name> <operator>+</operator> <name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>end_x</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name><name>mv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>x_max</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>end_y</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name><name>mv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>y_max</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name>y_min</name></expr></argument>, <argument><expr><name><name>mv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>y</name> <operator>&lt;=</operator> <name>end_y</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name>x_min</name></expr></argument>, <argument><expr><name><name>mv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>x</name> <operator>&lt;=</operator> <name>end_x</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>COST_P_MV</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for></block_content></block></for>

<expr_stmt><expr><name>x</name> <operator>=</operator> <name><name>mv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>y</name> <operator>=</operator> <name><name>mv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>d</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>d</name> <operator>&lt;=</operator> <name><name>me_ctx</name><operator>-&gt;</operator><name>search_param</name></name> <operator>/</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>d</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>COST_P_MV</name><argument_list>(<argument><expr><name>x</name> <operator>+</operator> <name><name>hex4</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name>d</name></expr></argument>, <argument><expr><name>y</name> <operator>+</operator> <name><name>hex4</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for></block_content></block></for>

<do>do <block>{<block_content>

<expr_stmt><expr><name>x</name> <operator>=</operator> <name><name>mv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>y</name> <operator>=</operator> <name><name>mv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">6</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>COST_P_MV</name><argument_list>(<argument><expr><name>x</name> <operator>+</operator> <name><name>hex2</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>y</name> <operator>+</operator> <name><name>hex2</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block> while <condition>(<expr><name>x</name> <operator>!=</operator> <name><name>mv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>||</operator> <name>y</name> <operator>!=</operator> <name><name>mv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition>;</do>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>COST_P_MV</name><argument_list>(<argument><expr><name>x</name> <operator>+</operator> <name><name>dia1</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>y</name> <operator>+</operator> <name><name>dia1</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<return>return <expr><name>cost_min</name></expr>;</return>

</block_content>}</block></function>

</unit>
