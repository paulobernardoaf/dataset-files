<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavfilter\af_channelsplit.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/attributes.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/channel_layout.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/opt.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"audio.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avfilter.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"formats.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct <name>ChannelSplitContext</name> <block>{

<decl_stmt><decl><type><specifier>const</specifier> <name>AVClass</name> <modifier>*</modifier></type><name>class</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>channel_layout</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>channel_layout_str</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>channels_str</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>map</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>

}</block></struct></type> <name>ChannelSplitContext</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OFFSET</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>offsetof(ChannelSplitContext, x)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>A</name></cpp:macro> <cpp:value>AV_OPT_FLAG_AUDIO_PARAM</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F</name></cpp:macro> <cpp:value>AV_OPT_FLAG_FILTERING_PARAM</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVOption</name></type> <name><name>channelsplit_options</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><literal type="string">"channel_layout"</literal></expr>, <expr><literal type="string">"Input channel layout."</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>channel_layout_str</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_STRING</name></expr>, <expr><block>{ <expr><operator>.</operator><name>str</name> <operator>=</operator> <literal type="string">"stereo"</literal></expr> }</block></expr>, <expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>A</name><operator>|</operator><name>F</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"channels"</literal></expr>, <expr><literal type="string">"Channels to extract."</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>channels_str</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_STRING</name></expr>, <expr><block>{ <expr><operator>.</operator><name>str</name> <operator>=</operator> <literal type="string">"all"</literal></expr> }</block></expr>, <expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>A</name><operator>|</operator><name>F</name></expr> }</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>AVFILTER_DEFINE_CLASS</name><argument_list>(<argument><expr><name>channelsplit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>init</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ChannelSplitContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>channel_layout</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>nb_channels</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>all</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>channel_layout</name></name> <operator>=</operator> <call><name>av_get_channel_layout</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>channel_layout_str</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Error parsing channel layout '%s'.\n"</literal></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>channel_layout_str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>channels_str</name></name></expr></argument>, <argument><expr><literal type="string">"all"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>nb_channels</name> <operator>=</operator> <call><name>av_get_channel_layout_nb_channels</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>channel_layout</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>channel_layout</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>channel_layout</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>all</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>av_get_extended_channel_layout</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>channels_str</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>channel_layout</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nb_channels</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nb_channels</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>channel</name> <init>= <expr><call><name>av_channel_layout_extract_channel</name><argument_list>(<argument><expr><name>channel_layout</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFilterPad</name></type> <name>pad</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>pad</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>AVMEDIA_TYPE_AUDIO</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pad</name><operator>.</operator><name>name</name></name> <operator>=</operator> <call><name>av_get_channel_name</name><argument_list>(<argument><expr><name>channel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>all</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>map</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>av_get_channel_layout_channel_index</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>channel_layout</name></name></expr></argument>, <argument><expr><name>channel</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Channel name '%s' not present in channel layout '%s'.\n"</literal></expr></argument>,

<argument><expr><call><name>av_get_channel_name</name><argument_list>(<argument><expr><name>channel</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>channel_layout_str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>map</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>ret</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_insert_outpad</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pad</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<label><name>fail</name>:</label>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>query_formats</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ChannelSplitContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFilterChannelLayouts</name> <modifier>*</modifier></type><name>in_layouts</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_set_common_formats</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><call><name>ff_planar_sample_fmts</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator>

<operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_set_common_samplerates</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><call><name>ff_all_samplerates</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_add_channel_layout</name><argument_list>(<argument><expr><operator>&amp;</operator><name>in_layouts</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>channel_layout</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator>

<operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_channel_layouts_ref</name><argument_list>(<argument><expr><name>in_layouts</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>inputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>out_channel_layouts</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>nb_outputs</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>AVFilterChannelLayouts</name> <modifier>*</modifier></type><name>out_layouts</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>channel</name> <init>= <expr><call><name>av_channel_layout_extract_channel</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>channel_layout</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>map</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_add_channel_layout</name><argument_list>(<argument><expr><operator>&amp;</operator><name>out_layouts</name></expr></argument>, <argument><expr><name>channel</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator>

<operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_channel_layouts_ref</name><argument_list>(<argument><expr><name>out_layouts</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>outputs</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>in_channel_layouts</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>filter_frame</name><parameter_list>(<parameter><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>inlink</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>inlink</name><operator>-&gt;</operator><name>dst</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ChannelSplitContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>nb_outputs</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>buf_out</name> <init>= <expr><call><name>av_frame_clone</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>buf_out</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>buf_out</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>buf_out</name><operator>-&gt;</operator><name>extended_data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>buf_out</name><operator>-&gt;</operator><name>extended_data</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>map</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf_out</name><operator>-&gt;</operator><name>channel_layout</name></name> <operator>=</operator>

<call><name>av_channel_layout_extract_channel</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>channel_layout</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>map</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf_out</name><operator>-&gt;</operator><name>channels</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_filter_frame</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>outputs</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>buf_out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVFilterPad</name></type> <name><name>avfilter_af_channelsplit_inputs</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"default"</literal></expr>,

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_AUDIO</name></expr>,

<expr><operator>.</operator><name>filter_frame</name> <operator>=</operator> <name>filter_frame</name></expr>,

}</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFilter</name></type> <name>ff_af_channelsplit</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"channelsplit"</literal></expr>,

<expr><operator>.</operator><name>description</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"Split audio into per-channel streams."</literal></expr></argument>)</argument_list></call></expr>,

<expr><operator>.</operator><name>priv_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>ChannelSplitContext</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><operator>.</operator><name>priv_class</name> <operator>=</operator> <operator>&amp;</operator><name>channelsplit_class</name></expr>,

<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>init</name></expr>,

<expr><operator>.</operator><name>query_formats</name> <operator>=</operator> <name>query_formats</name></expr>,

<expr><operator>.</operator><name>inputs</name> <operator>=</operator> <name>avfilter_af_channelsplit_inputs</name></expr>,

<expr><operator>.</operator><name>outputs</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>AVFILTER_FLAG_DYNAMIC_OUTPUTS</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

</unit>
