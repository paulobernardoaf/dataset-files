<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavfilter\vf_paletteuse.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/bprint.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/opt.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/qsort.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avfilter.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"filters.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"framesync.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>

<enum>enum <name>dithering_mode</name> <block>{

<decl><name>DITHERING_NONE</name></decl>,

<decl><name>DITHERING_BAYER</name></decl>,

<decl><name>DITHERING_HECKBERT</name></decl>,

<decl><name>DITHERING_FLOYD_STEINBERG</name></decl>,

<decl><name>DITHERING_SIERRA2</name></decl>,

<decl><name>DITHERING_SIERRA2_4A</name></decl>,

<decl><name>NB_DITHERING</name></decl>

}</block>;</enum>

<enum>enum <name>color_search_method</name> <block>{

<decl><name>COLOR_SEARCH_NNS_ITERATIVE</name></decl>,

<decl><name>COLOR_SEARCH_NNS_RECURSIVE</name></decl>,

<decl><name>COLOR_SEARCH_BRUTEFORCE</name></decl>,

<decl><name>NB_COLOR_SEARCHES</name></decl>

}</block>;</enum>

<enum>enum <name>diff_mode</name> <block>{

<decl><name>DIFF_MODE_NONE</name></decl>,

<decl><name>DIFF_MODE_RECTANGLE</name></decl>,

<decl><name>NB_DIFF_MODE</name></decl>

}</block>;</enum>

<struct>struct <name>color_node</name> <block>{

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>val</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>palette_id</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>split</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>left_id</name></decl>, <decl><type ref="prev"/><name>right_id</name></decl>;</decl_stmt>

}</block>;</struct>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NBITS</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CACHE_SIZE</name></cpp:macro> <cpp:value>(1&lt;&lt;(3*NBITS))</cpp:value></cpp:define>

<struct>struct <name>cached_color</name> <block>{

<decl_stmt><decl><type><name>uint32_t</name></type> <name>color</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>pal_entry</name></decl>;</decl_stmt>

}</block>;</struct>

<struct>struct <name>cache_node</name> <block>{

<decl_stmt><decl><type><name><name>struct</name> <name>cached_color</name></name> <modifier>*</modifier></type><name>entries</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>nb_entries</name></decl>;</decl_stmt>

}</block>;</struct>

<struct_decl>struct <name>PaletteUseContext</name>;</struct_decl>

<typedef>typedef <function_decl><type><name>int</name></type> (<modifier>*</modifier><name>set_frame_func</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>PaletteUseContext</name></name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>in</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>x_start</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y_start</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <type><struct>struct <name>PaletteUseContext</name> <block>{

<decl_stmt><decl><type><specifier>const</specifier> <name>AVClass</name> <modifier>*</modifier></type><name>class</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>FFFrameSync</name></type> <name>fs</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>cache_node</name></name></type> <name><name>cache</name><index>[<expr><name>CACHE_SIZE</name></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name><name>struct</name> <name>color_node</name></name></type> <name><name>map</name><index>[<expr><name>AVPALETTE_COUNT</name></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name><name>palette</name><index>[<expr><name>AVPALETTE_COUNT</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>transparency_index</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>trans_thresh</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>palette_loaded</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>dither</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>new</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>set_frame_func</name></type> <name>set_frame</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>bayer_scale</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>ordered_dither</name><index>[<expr><literal type="number">8</literal><operator>*</operator><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>diff_mode</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>last_in</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>last_out</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>dot_filename</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>color_search_method</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>calc_mean_err</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>total_mean_err</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>debug_accuracy</name></decl>;</decl_stmt>

}</block></struct></type> <name>PaletteUseContext</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OFFSET</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>offsetof(PaletteUseContext, x)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLAGS</name></cpp:macro> <cpp:value>AV_OPT_FLAG_FILTERING_PARAM|AV_OPT_FLAG_VIDEO_PARAM</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVOption</name></type> <name><name>paletteuse_options</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><literal type="string">"dither"</literal></expr>, <expr><literal type="string">"select dithering mode"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>dither</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>DITHERING_SIERRA2_4A</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NB_DITHERING</name><operator>-</operator><literal type="number">1</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"dithering_mode"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"bayer"</literal></expr>, <expr><literal type="string">"ordered 8x8 bayer dithering (deterministic)"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>DITHERING_BAYER</name></expr>}</block></expr>, <expr><name>INT_MIN</name></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"dithering_mode"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"heckbert"</literal></expr>, <expr><literal type="string">"dithering as defined by Paul Heckbert in 1982 (simple error diffusion)"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>DITHERING_HECKBERT</name></expr>}</block></expr>, <expr><name>INT_MIN</name></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"dithering_mode"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"floyd_steinberg"</literal></expr>, <expr><literal type="string">"Floyd and Steingberg dithering (error diffusion)"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>DITHERING_FLOYD_STEINBERG</name></expr>}</block></expr>, <expr><name>INT_MIN</name></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"dithering_mode"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"sierra2"</literal></expr>, <expr><literal type="string">"Frankie Sierra dithering v2 (error diffusion)"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>DITHERING_SIERRA2</name></expr>}</block></expr>, <expr><name>INT_MIN</name></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"dithering_mode"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"sierra2_4a"</literal></expr>, <expr><literal type="string">"Frankie Sierra dithering v2 \"Lite\" (error diffusion)"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>DITHERING_SIERRA2_4A</name></expr>}</block></expr>, <expr><name>INT_MIN</name></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"dithering_mode"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"bayer_scale"</literal></expr>, <expr><literal type="string">"set scale for bayer dithering"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>bayer_scale</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">2</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"diff_mode"</literal></expr>, <expr><literal type="string">"set frame difference mode"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>diff_mode</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>DIFF_MODE_NONE</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NB_DIFF_MODE</name><operator>-</operator><literal type="number">1</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"diff_mode"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"rectangle"</literal></expr>, <expr><literal type="string">"process smallest different rectangle"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>DIFF_MODE_RECTANGLE</name></expr>}</block></expr>, <expr><name>INT_MIN</name></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"diff_mode"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"new"</literal></expr>, <expr><literal type="string">"take new palette for each output frame"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>new</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_BOOL</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">0</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"alpha_threshold"</literal></expr>, <expr><literal type="string">"set the alpha threshold for transparency"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>trans_thresh</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">128</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">255</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"debug_kdtree"</literal></expr>, <expr><literal type="string">"save Graphviz graph of the kdtree in specified file"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>dot_filename</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_STRING</name></expr>, <expr><block>{<expr><operator>.</operator><name>str</name><operator>=</operator><name>NULL</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"color_search"</literal></expr>, <expr><literal type="string">"set reverse colormap color search method"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>color_search_method</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>COLOR_SEARCH_NNS_ITERATIVE</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NB_COLOR_SEARCHES</name><operator>-</operator><literal type="number">1</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"search"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"nns_iterative"</literal></expr>, <expr><literal type="string">"iterative search"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>COLOR_SEARCH_NNS_ITERATIVE</name></expr>}</block></expr>, <expr><name>INT_MIN</name></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"search"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"nns_recursive"</literal></expr>, <expr><literal type="string">"recursive search"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>COLOR_SEARCH_NNS_RECURSIVE</name></expr>}</block></expr>, <expr><name>INT_MIN</name></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"search"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"bruteforce"</literal></expr>, <expr><literal type="string">"brute-force into the palette"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>COLOR_SEARCH_BRUTEFORCE</name></expr>}</block></expr>, <expr><name>INT_MIN</name></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"search"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"mean_err"</literal></expr>, <expr><literal type="string">"compute and print mean error"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>calc_mean_err</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_BOOL</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">0</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"debug_accuracy"</literal></expr>, <expr><literal type="string">"test color search accuracy"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>debug_accuracy</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_BOOL</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">0</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>AVFILTER_DEFINE_CLASS</name><argument_list>(<argument><expr><name>paletteuse</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>load_apply_palette</name><parameter_list>(<parameter><decl><type><name>FFFrameSync</name> <modifier>*</modifier></type><name>fs</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>int</name></type> <name>query_formats</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>enum</name> <name>AVPixelFormat</name></name></type> <name><name>in_fmts</name><index>[]</index></name> <init>= <expr><block>{<expr><name>AV_PIX_FMT_RGB32</name></expr>, <expr><name>AV_PIX_FMT_NONE</name></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>enum</name> <name>AVPixelFormat</name></name></type> <name><name>inpal_fmts</name><index>[]</index></name> <init>= <expr><block>{<expr><name>AV_PIX_FMT_RGB32</name></expr>, <expr><name>AV_PIX_FMT_NONE</name></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>enum</name> <name>AVPixelFormat</name></name></type> <name><name>out_fmts</name><index>[]</index></name> <init>= <expr><block>{<expr><name>AV_PIX_FMT_PAL8</name></expr>, <expr><name>AV_PIX_FMT_NONE</name></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFilterFormats</name> <modifier>*</modifier></type><name>in</name> <init>= <expr><call><name>ff_make_format_list</name><argument_list>(<argument><expr><name>in_fmts</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFilterFormats</name> <modifier>*</modifier></type><name>inpal</name> <init>= <expr><call><name>ff_make_format_list</name><argument_list>(<argument><expr><name>inpal_fmts</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFilterFormats</name> <modifier>*</modifier></type><name>out</name> <init>= <expr><call><name>ff_make_format_list</name><argument_list>(<argument><expr><name>out_fmts</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>in</name> <operator>||</operator> <operator>!</operator><name>inpal</name> <operator>||</operator> <operator>!</operator><name>out</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>inpal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_formats_ref</name><argument_list>(<argument><expr><name>in</name></expr></argument> , <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>inputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>out_formats</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator>

<operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_formats_ref</name><argument_list>(<argument><expr><name>inpal</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>inputs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>out_formats</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator>

<operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_formats_ref</name><argument_list>(<argument><expr><name>out</name></expr></argument> , <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>outputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>in_formats</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>int</name></type> <name>dither_color</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>px</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>er</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>eg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>eb</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>scale</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>shift</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>av_clip_uint8</name><argument_list>( <argument><expr><name>px</name> <operator>&gt;&gt;</operator> <literal type="number">24</literal></expr></argument> )</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">24</literal>

<operator>|</operator> <call><name>av_clip_uint8</name><argument_list>(<argument><expr><operator>(</operator><name>px</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><name>er</name> <operator>*</operator> <name>scale</name><operator>)</operator> <operator>/</operator> <operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><name>shift</name><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">16</literal>

<operator>|</operator> <call><name>av_clip_uint8</name><argument_list>(<argument><expr><operator>(</operator><name>px</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><name>eg</name> <operator>*</operator> <name>scale</name><operator>)</operator> <operator>/</operator> <operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><name>shift</name><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">8</literal>

<operator>|</operator> <call><name>av_clip_uint8</name><argument_list>(<argument><expr><operator>(</operator><name>px</name> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><name>eb</name> <operator>*</operator> <name>scale</name><operator>)</operator> <operator>/</operator> <operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><name>shift</name><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>int</name></type> <name>diff</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>c1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>c2</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>trans_thresh</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>dr</name> <init>= <expr><name><name>c1</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>c2</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>dg</name> <init>= <expr><name><name>c1</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>-</operator> <name><name>c2</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>db</name> <init>= <expr><name><name>c1</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>-</operator> <name><name>c2</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>c1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;</operator> <name>trans_thresh</name> <operator>&amp;&amp;</operator> <name><name>c2</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;</operator> <name>trans_thresh</name></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>c1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;=</operator> <name>trans_thresh</name> <operator>&amp;&amp;</operator> <name><name>c2</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;=</operator> <name>trans_thresh</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>dr</name><operator>*</operator><name>dr</name> <operator>+</operator> <name>dg</name><operator>*</operator><name>dg</name> <operator>+</operator> <name>db</name><operator>*</operator><name>db</name></expr>;</return>

</block_content>}</block></if> <else>else <block>{<block_content>

<return>return <expr><literal type="number">255</literal><operator>*</operator><literal type="number">255</literal> <operator>+</operator> <literal type="number">255</literal><operator>*</operator><literal type="number">255</literal> <operator>+</operator> <literal type="number">255</literal><operator>*</operator><literal type="number">255</literal></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>uint8_t</name></type> <name>colormap_nearest_bruteforce</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type><name>palette</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>argb</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>trans_thresh</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>pal_id</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>min_dist</name> <init>= <expr><name>INT_MAX</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>AVPALETTE_COUNT</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>c</name> <init>= <expr><name><name>palette</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>&gt;&gt;</operator> <literal type="number">24</literal> <operator>&gt;=</operator> <name>trans_thresh</name></expr>)</condition> <block>{<block_content> 

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name></type> <name><name>palargb</name><index>[]</index></name> <init>= <expr><block>{

<expr><name><name>palette</name><index>[<expr><name>i</name></expr>]</index></name><operator>&gt;&gt;</operator><literal type="number">24</literal> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>,

<expr><name><name>palette</name><index>[<expr><name>i</name></expr>]</index></name><operator>&gt;&gt;</operator><literal type="number">16</literal> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>,

<expr><name><name>palette</name><index>[<expr><name>i</name></expr>]</index></name><operator>&gt;&gt;</operator> <literal type="number">8</literal> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>,

<expr><name><name>palette</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>d</name> <init>= <expr><call><name>diff</name><argument_list>(<argument><expr><name>palargb</name></expr></argument>, <argument><expr><name>argb</name></expr></argument>, <argument><expr><name>trans_thresh</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>d</name> <operator>&lt;</operator> <name>min_dist</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>pal_id</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

<expr_stmt><expr><name>min_dist</name> <operator>=</operator> <name>d</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>pal_id</name></expr>;</return>

</block_content>}</block></function>

<struct>struct <name>nearest_color</name> <block>{

<decl_stmt><decl><type><name>int</name></type> <name>node_pos</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>dist_sqd</name></decl>;</decl_stmt>

}</block>;</struct>

<function><type><specifier>static</specifier> <name>void</name></type> <name>colormap_nearest_node</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>color_node</name></name> <modifier>*</modifier></type><name>map</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>node_pos</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>target</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>trans_thresh</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>nearest_color</name></name> <modifier>*</modifier></type><name>nearest</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>color_node</name></name> <modifier>*</modifier></type><name>kd</name> <init>= <expr><name>map</name> <operator>+</operator> <name>node_pos</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>s</name> <init>= <expr><name><name>kd</name><operator>-&gt;</operator><name>split</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>dx</name></decl>, <decl><type ref="prev"/><name>nearer_kd_id</name></decl>, <decl><type ref="prev"/><name>further_kd_id</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>current</name> <init>= <expr><name><name>kd</name><operator>-&gt;</operator><name>val</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>current_to_target</name> <init>= <expr><call><name>diff</name><argument_list>(<argument><expr><name>target</name></expr></argument>, <argument><expr><name>current</name></expr></argument>, <argument><expr><name>trans_thresh</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>current_to_target</name> <operator>&lt;</operator> <name><name>nearest</name><operator>-&gt;</operator><name>dist_sqd</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>nearest</name><operator>-&gt;</operator><name>node_pos</name></name> <operator>=</operator> <name>node_pos</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>nearest</name><operator>-&gt;</operator><name>dist_sqd</name></name> <operator>=</operator> <name>current_to_target</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>kd</name><operator>-&gt;</operator><name>left_id</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal> <operator>||</operator> <name><name>kd</name><operator>-&gt;</operator><name>right_id</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>dx</name> <operator>=</operator> <name><name>target</name><index>[<expr><name>s</name></expr>]</index></name> <operator>-</operator> <name><name>current</name><index>[<expr><name>s</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>dx</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>nearer_kd_id</name> <operator>=</operator> <name><name>kd</name><operator>-&gt;</operator><name>left_id</name></name></expr><operator>,</operator> <expr><name>further_kd_id</name> <operator>=</operator> <name><name>kd</name><operator>-&gt;</operator><name>right_id</name></name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name>nearer_kd_id</name> <operator>=</operator> <name><name>kd</name><operator>-&gt;</operator><name>right_id</name></name></expr><operator>,</operator> <expr><name>further_kd_id</name> <operator>=</operator> <name><name>kd</name><operator>-&gt;</operator><name>left_id</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>nearer_kd_id</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>colormap_nearest_node</name><argument_list>(<argument><expr><name>map</name></expr></argument>, <argument><expr><name>nearer_kd_id</name></expr></argument>, <argument><expr><name>target</name></expr></argument>, <argument><expr><name>trans_thresh</name></expr></argument>, <argument><expr><name>nearest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>further_kd_id</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>dx</name><operator>*</operator><name>dx</name> <operator>&lt;</operator> <name><name>nearest</name><operator>-&gt;</operator><name>dist_sqd</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>colormap_nearest_node</name><argument_list>(<argument><expr><name>map</name></expr></argument>, <argument><expr><name>further_kd_id</name></expr></argument>, <argument><expr><name>target</name></expr></argument>, <argument><expr><name>trans_thresh</name></expr></argument>, <argument><expr><name>nearest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>uint8_t</name></type> <name>colormap_nearest_recursive</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>color_node</name></name> <modifier>*</modifier></type><name>node</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>rgb</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>trans_thresh</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>nearest_color</name></name></type> <name>res</name> <init>= <expr><block>{<expr><operator>.</operator><name>dist_sqd</name> <operator>=</operator> <name>INT_MAX</name></expr>, <expr><operator>.</operator><name>node_pos</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>colormap_nearest_node</name><argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>rgb</name></expr></argument>, <argument><expr><name>trans_thresh</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name><name>node</name><index>[<expr><name><name>res</name><operator>.</operator><name>node_pos</name></name></expr>]</index></name><operator>.</operator><name>palette_id</name></expr>;</return>

</block_content>}</block></function>

<struct>struct <name>stack_node</name> <block>{

<decl_stmt><decl><type><name>int</name></type> <name>color_id</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>dx2</name></decl>;</decl_stmt>

}</block>;</struct>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>uint8_t</name></type> <name>colormap_nearest_iterative</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>color_node</name></name> <modifier>*</modifier></type><name>root</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>target</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>trans_thresh</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>pos</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>best_node_id</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>best_dist</name> <init>= <expr><name>INT_MAX</name></expr></init></decl>, <decl><type ref="prev"/><name>cur_color_id</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>stack_node</name></name></type> <name><name>nodes</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>stack_node</name></name> <modifier>*</modifier></type><name>node</name> <init>= <expr><operator>&amp;</operator><name><name>nodes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>color_node</name></name> <modifier>*</modifier></type><name>kd</name> <init>= <expr><operator>&amp;</operator><name><name>root</name><index>[<expr><name>cur_color_id</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>current</name> <init>= <expr><name><name>kd</name><operator>-&gt;</operator><name>val</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>current_to_target</name> <init>= <expr><call><name>diff</name><argument_list>(<argument><expr><name>target</name></expr></argument>, <argument><expr><name>current</name></expr></argument>, <argument><expr><name>trans_thresh</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>current_to_target</name> <operator>&lt;</operator> <name>best_dist</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>best_node_id</name> <operator>=</operator> <name>cur_color_id</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>current_to_target</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>end</name>;</goto></block_content></block></if></if_stmt> 

<expr_stmt><expr><name>best_dist</name> <operator>=</operator> <name>current_to_target</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>kd</name><operator>-&gt;</operator><name>left_id</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal> <operator>||</operator> <name><name>kd</name><operator>-&gt;</operator><name>right_id</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>split</name> <init>= <expr><name><name>kd</name><operator>-&gt;</operator><name>split</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>dx</name> <init>= <expr><name><name>target</name><index>[<expr><name>split</name></expr>]</index></name> <operator>-</operator> <name><name>current</name><index>[<expr><name>split</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>nearer_kd_id</name></decl>, <decl><type ref="prev"/><name>further_kd_id</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>dx</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>nearer_kd_id</name> <operator>=</operator> <name><name>kd</name><operator>-&gt;</operator><name>left_id</name></name></expr><operator>,</operator> <expr><name>further_kd_id</name> <operator>=</operator> <name><name>kd</name><operator>-&gt;</operator><name>right_id</name></name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name>nearer_kd_id</name> <operator>=</operator> <name><name>kd</name><operator>-&gt;</operator><name>right_id</name></name></expr><operator>,</operator> <expr><name>further_kd_id</name> <operator>=</operator> <name><name>kd</name><operator>-&gt;</operator><name>left_id</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>nearer_kd_id</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>further_kd_id</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>color_id</name></name> <operator>=</operator> <name>further_kd_id</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>dx2</name></name> <operator>=</operator> <name>dx</name><operator>*</operator><name>dx</name></expr>;</expr_stmt>

<expr_stmt><expr><name>pos</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>node</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>cur_color_id</name> <operator>=</operator> <name>nearer_kd_id</name></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>dx</name><operator>*</operator><name>dx</name> <operator>&lt;</operator> <name>best_dist</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>cur_color_id</name> <operator>=</operator> <name>further_kd_id</name></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<do>do <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>--</operator><name>pos</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>end</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>node</name><operator>--</operator></expr>;</expr_stmt>

</block_content>}</block> while <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>dx2</name></name> <operator>&gt;=</operator> <name>best_dist</name></expr>)</condition>;</do>

<expr_stmt><expr><name>cur_color_id</name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>color_id</name></name></expr>;</expr_stmt>

</block_content>}</block></for>

<label><name>end</name>:</label>

<return>return <expr><name><name>root</name><index>[<expr><name>best_node_id</name></expr>]</index></name><operator>.</operator><name>palette_id</name></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COLORMAP_NEAREST</name><parameter_list>(<parameter><type><name>search</name></type></parameter>, <parameter><type><name>palette</name></type></parameter>, <parameter><type><name>root</name></type></parameter>, <parameter><type><name>target</name></type></parameter>, <parameter><type><name>trans_thresh</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>search == COLOR_SEARCH_NNS_ITERATIVE ? colormap_nearest_iterative(root, target, trans_thresh) : search == COLOR_SEARCH_NNS_RECURSIVE ? colormap_nearest_recursive(root, target, trans_thresh) : colormap_nearest_bruteforce(palette, target, trans_thresh)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>int</name></type> <name>color_get</name><parameter_list>(<parameter><decl><type><name>PaletteUseContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>color</name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>r</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>g</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>b</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name><name>enum</name> <name>color_search_method</name></name></type> <name>search_method</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name></type> <name><name>argb_elts</name><index>[]</index></name> <init>= <expr><block>{<expr><name>a</name></expr>, <expr><name>r</name></expr>, <expr><name>g</name></expr>, <expr><name>b</name></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name></type> <name>rhash</name> <init>= <expr><name>r</name> <operator>&amp;</operator> <operator>(</operator><operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><name>NBITS</name><operator>)</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name></type> <name>ghash</name> <init>= <expr><name>g</name> <operator>&amp;</operator> <operator>(</operator><operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><name>NBITS</name><operator>)</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name></type> <name>bhash</name> <init>= <expr><name>b</name> <operator>&amp;</operator> <operator>(</operator><operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><name>NBITS</name><operator>)</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name></type> <name>hash</name> <init>= <expr><name>rhash</name><operator>&lt;&lt;</operator><operator>(</operator><name>NBITS</name><operator>*</operator><literal type="number">2</literal><operator>)</operator> <operator>|</operator> <name>ghash</name><operator>&lt;&lt;</operator><name>NBITS</name> <operator>|</operator> <name>bhash</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>cache_node</name></name> <modifier>*</modifier></type><name>node</name> <init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>cache</name><index>[<expr><name>hash</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>cached_color</name></name> <modifier>*</modifier></type><name>e</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>a</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>trans_thresh</name></name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>transparency_index</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name><name>s</name><operator>-&gt;</operator><name>transparency_index</name></name></expr>;</return>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>node</name><operator>-&gt;</operator><name>nb_entries</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>e</name> <operator>=</operator> <operator>&amp;</operator><name><name>node</name><operator>-&gt;</operator><name>entries</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>e</name><operator>-&gt;</operator><name>color</name></name> <operator>==</operator> <name>color</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name><name>e</name><operator>-&gt;</operator><name>pal_entry</name></name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>e</name> <operator>=</operator> <call><name>av_dynarray2_add</name><argument_list>(<argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>node</name><operator>-&gt;</operator><name>entries</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>node</name><operator>-&gt;</operator><name>nb_entries</name></name></expr></argument>,

<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>node</name><operator>-&gt;</operator><name>entries</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>e</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>color</name></name> <operator>=</operator> <name>color</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>pal_entry</name></name> <operator>=</operator> <call><name>COLORMAP_NEAREST</name><argument_list>(<argument><expr><name>search_method</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>palette</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>map</name></name></expr></argument>, <argument><expr><name>argb_elts</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>trans_thresh</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name><name>e</name><operator>-&gt;</operator><name>pal_entry</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>int</name></type> <name>get_dst_color_err</name><parameter_list>(<parameter><decl><type><name>PaletteUseContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>,

<parameter><decl><type><name>uint32_t</name></type> <name>c</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>er</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>eg</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>eb</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name><name>enum</name> <name>color_search_method</name></name></type> <name>search_method</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name></type> <name>a</name> <init>= <expr><name>c</name> <operator>&gt;&gt;</operator> <literal type="number">24</literal> <operator>&amp;</operator> <literal type="number">0xff</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name></type> <name>r</name> <init>= <expr><name>c</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal> <operator>&amp;</operator> <literal type="number">0xff</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name></type> <name>g</name> <init>= <expr><name>c</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal> <operator>&amp;</operator> <literal type="number">0xff</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name></type> <name>b</name> <init>= <expr><name>c</name> <operator>&amp;</operator> <literal type="number">0xff</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>dstc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>dstx</name> <init>= <expr><call><name>color_get</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>g</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>search_method</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>dstx</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>dstx</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>dstc</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>palette</name><index>[<expr><name>dstx</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>er</name> <operator>=</operator> <name>r</name> <operator>-</operator> <operator>(</operator><name>dstc</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>eg</name> <operator>=</operator> <name>g</name> <operator>-</operator> <operator>(</operator><name>dstc</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>eb</name> <operator>=</operator> <name>b</name> <operator>-</operator> <operator>(</operator><name>dstc</name> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator></expr>;</expr_stmt>

<return>return <expr><name>dstx</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>int</name></type> <name>set_frame</name><parameter_list>(<parameter><decl><type><name>PaletteUseContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>in</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>x_start</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y_start</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>,

<parameter><decl><type><name><name>enum</name> <name>dithering_mode</name></name></type> <name>dither</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name><name>enum</name> <name>color_search_method</name></name></type> <name>search_method</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>src_linesize</name> <init>= <expr><name><name>in</name> <operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>dst_linesize</name> <init>= <expr><name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><operator>(</operator><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><name><name>in</name> <operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator> <operator>+</operator> <name>y_start</name><operator>*</operator><name>src_linesize</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>y_start</name><operator>*</operator><name>dst_linesize</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>w</name> <operator>+=</operator> <name>x_start</name></expr>;</expr_stmt>

<expr_stmt><expr><name>h</name> <operator>+=</operator> <name>y_start</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <name>y_start</name></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>h</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <name>x_start</name></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>w</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>er</name></decl>, <decl><type ref="prev"/><name>eg</name></decl>, <decl><type ref="prev"/><name>eb</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>dither</name> <operator>==</operator> <name>DITHERING_BAYER</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>d</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>ordered_dither</name><index>[<expr><operator>(</operator><name>y</name> <operator>&amp;</operator> <literal type="number">7</literal><operator>)</operator><operator>&lt;&lt;</operator><literal type="number">3</literal> <operator>|</operator> <operator>(</operator><name>x</name> <operator>&amp;</operator> <literal type="number">7</literal><operator>)</operator></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name></type> <name>a8</name> <init>= <expr><name><name>src</name><index>[<expr><name>x</name></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">24</literal> <operator>&amp;</operator> <literal type="number">0xff</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name></type> <name>r8</name> <init>= <expr><name><name>src</name><index>[<expr><name>x</name></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">16</literal> <operator>&amp;</operator> <literal type="number">0xff</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name></type> <name>g8</name> <init>= <expr><name><name>src</name><index>[<expr><name>x</name></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">8</literal> <operator>&amp;</operator> <literal type="number">0xff</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name></type> <name>b8</name> <init>= <expr><name><name>src</name><index>[<expr><name>x</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xff</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name></type> <name>r</name> <init>= <expr><call><name>av_clip_uint8</name><argument_list>(<argument><expr><name>r8</name> <operator>+</operator> <name>d</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name></type> <name>g</name> <init>= <expr><call><name>av_clip_uint8</name><argument_list>(<argument><expr><name>g8</name> <operator>+</operator> <name>d</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name></type> <name>b</name> <init>= <expr><call><name>av_clip_uint8</name><argument_list>(<argument><expr><name>b8</name> <operator>+</operator> <name>d</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>color</name> <init>= <expr><call><name>color_get</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>src</name><index>[<expr><name>x</name></expr>]</index></name></expr></argument>, <argument><expr><name>a8</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>g</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>search_method</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>color</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>color</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>dst</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <name>color</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>dither</name> <operator>==</operator> <name>DITHERING_HECKBERT</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>right</name> <init>= <expr><name>x</name> <operator>&lt;</operator> <name>w</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>down</name> <init>= <expr><name>y</name> <operator>&lt;</operator> <name>h</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>color</name> <init>= <expr><call><name>get_dst_color_err</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>src</name><index>[<expr><name>x</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>er</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>eg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>eb</name></expr></argument>, <argument><expr><name>search_method</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>color</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>color</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>dst</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <name>color</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>right</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>src</name><index>[ <expr><name>x</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>dither_color</name><argument_list>(<argument><expr><name><name>src</name><index>[ <expr><name>x</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>er</name></expr></argument>, <argument><expr><name>eg</name></expr></argument>, <argument><expr><name>eb</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>( <expr><name>down</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>src</name><index>[<expr><name>src_linesize</name> <operator>+</operator> <name>x</name></expr> ]</index></name> <operator>=</operator> <call><name>dither_color</name><argument_list>(<argument><expr><name><name>src</name><index>[<expr><name>src_linesize</name> <operator>+</operator> <name>x</name></expr> ]</index></name></expr></argument>, <argument><expr><name>er</name></expr></argument>, <argument><expr><name>eg</name></expr></argument>, <argument><expr><name>eb</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>right</name> <operator>&amp;&amp;</operator> <name>down</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>src</name><index>[<expr><name>src_linesize</name> <operator>+</operator> <name>x</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>dither_color</name><argument_list>(<argument><expr><name><name>src</name><index>[<expr><name>src_linesize</name> <operator>+</operator> <name>x</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>er</name></expr></argument>, <argument><expr><name>eg</name></expr></argument>, <argument><expr><name>eb</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>dither</name> <operator>==</operator> <name>DITHERING_FLOYD_STEINBERG</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>right</name> <init>= <expr><name>x</name> <operator>&lt;</operator> <name>w</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>down</name> <init>= <expr><name><name>y</name> <argument_list type="generic">&lt; <argument><expr><name>h</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>left</name> <operator>=</operator> <name>x</name></expr></argument> &gt;</argument_list></name> <name>x_start</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>color</name> <init>= <expr><call><name>get_dst_color_err</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>src</name><index>[<expr><name>x</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>er</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>eg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>eb</name></expr></argument>, <argument><expr><name>search_method</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>color</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>color</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>dst</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <name>color</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>right</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>src</name><index>[ <expr><name>x</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>dither_color</name><argument_list>(<argument><expr><name><name>src</name><index>[ <expr><name>x</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>er</name></expr></argument>, <argument><expr><name>eg</name></expr></argument>, <argument><expr><name>eb</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>left</name> <operator>&amp;&amp;</operator> <name>down</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>src</name><index>[<expr><name>src_linesize</name> <operator>+</operator> <name>x</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>dither_color</name><argument_list>(<argument><expr><name><name>src</name><index>[<expr><name>src_linesize</name> <operator>+</operator> <name>x</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>er</name></expr></argument>, <argument><expr><name>eg</name></expr></argument>, <argument><expr><name>eb</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>( <expr><name>down</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>src</name><index>[<expr><name>src_linesize</name> <operator>+</operator> <name>x</name></expr> ]</index></name> <operator>=</operator> <call><name>dither_color</name><argument_list>(<argument><expr><name><name>src</name><index>[<expr><name>src_linesize</name> <operator>+</operator> <name>x</name></expr> ]</index></name></expr></argument>, <argument><expr><name>er</name></expr></argument>, <argument><expr><name>eg</name></expr></argument>, <argument><expr><name>eb</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>right</name> <operator>&amp;&amp;</operator> <name>down</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>src</name><index>[<expr><name>src_linesize</name> <operator>+</operator> <name>x</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>dither_color</name><argument_list>(<argument><expr><name><name>src</name><index>[<expr><name>src_linesize</name> <operator>+</operator> <name>x</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>er</name></expr></argument>, <argument><expr><name>eg</name></expr></argument>, <argument><expr><name>eb</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>dither</name> <operator>==</operator> <name>DITHERING_SIERRA2</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>right</name> <init>= <expr><name>x</name> <operator>&lt;</operator> <name>w</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>down</name> <init>= <expr><name><name>y</name> <argument_list type="generic">&lt; <argument><expr><name>h</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>left</name> <operator>=</operator> <name>x</name></expr></argument> &gt;</argument_list></name> <name>x_start</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>right2</name> <init>= <expr><name><name>x</name> <argument_list type="generic">&lt; <argument><expr><name>w</name> <operator>-</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>left2</name> <operator>=</operator> <name>x</name></expr></argument> &gt;</argument_list></name> <name>x_start</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>color</name> <init>= <expr><call><name>get_dst_color_err</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>src</name><index>[<expr><name>x</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>er</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>eg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>eb</name></expr></argument>, <argument><expr><name>search_method</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>color</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>color</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>dst</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <name>color</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>right</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>src</name><index>[ <expr><name>x</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>dither_color</name><argument_list>(<argument><expr><name><name>src</name><index>[ <expr><name>x</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>er</name></expr></argument>, <argument><expr><name>eg</name></expr></argument>, <argument><expr><name>eb</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>right2</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>src</name><index>[ <expr><name>x</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>dither_color</name><argument_list>(<argument><expr><name><name>src</name><index>[ <expr><name>x</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name>er</name></expr></argument>, <argument><expr><name>eg</name></expr></argument>, <argument><expr><name>eb</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>down</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>left2</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>src</name><index>[ <expr><name>src_linesize</name> <operator>+</operator> <name>x</name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>dither_color</name><argument_list>(<argument><expr><name><name>src</name><index>[ <expr><name>src_linesize</name> <operator>+</operator> <name>x</name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name>er</name></expr></argument>, <argument><expr><name>eg</name></expr></argument>, <argument><expr><name>eb</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>left</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>src</name><index>[ <expr><name>src_linesize</name> <operator>+</operator> <name>x</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>dither_color</name><argument_list>(<argument><expr><name><name>src</name><index>[ <expr><name>src_linesize</name> <operator>+</operator> <name>x</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>er</name></expr></argument>, <argument><expr><name>eg</name></expr></argument>, <argument><expr><name>eb</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>src</name><index>[ <expr><name>src_linesize</name> <operator>+</operator> <name>x</name></expr> ]</index></name> <operator>=</operator> <call><name>dither_color</name><argument_list>(<argument><expr><name><name>src</name><index>[ <expr><name>src_linesize</name> <operator>+</operator> <name>x</name></expr> ]</index></name></expr></argument>, <argument><expr><name>er</name></expr></argument>, <argument><expr><name>eg</name></expr></argument>, <argument><expr><name>eb</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>right</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>src</name><index>[ <expr><name>src_linesize</name> <operator>+</operator> <name>x</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>dither_color</name><argument_list>(<argument><expr><name><name>src</name><index>[ <expr><name>src_linesize</name> <operator>+</operator> <name>x</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>er</name></expr></argument>, <argument><expr><name>eg</name></expr></argument>, <argument><expr><name>eb</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>right2</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>src</name><index>[ <expr><name>src_linesize</name> <operator>+</operator> <name>x</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>dither_color</name><argument_list>(<argument><expr><name><name>src</name><index>[ <expr><name>src_linesize</name> <operator>+</operator> <name>x</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name>er</name></expr></argument>, <argument><expr><name>eg</name></expr></argument>, <argument><expr><name>eb</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>dither</name> <operator>==</operator> <name>DITHERING_SIERRA2_4A</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>right</name> <init>= <expr><name>x</name> <operator>&lt;</operator> <name>w</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>down</name> <init>= <expr><name><name>y</name> <argument_list type="generic">&lt; <argument><expr><name>h</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>left</name> <operator>=</operator> <name>x</name></expr></argument> &gt;</argument_list></name> <name>x_start</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>color</name> <init>= <expr><call><name>get_dst_color_err</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>src</name><index>[<expr><name>x</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>er</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>eg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>eb</name></expr></argument>, <argument><expr><name>search_method</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>color</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>color</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>dst</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <name>color</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>right</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>src</name><index>[ <expr><name>x</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>dither_color</name><argument_list>(<argument><expr><name><name>src</name><index>[ <expr><name>x</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>er</name></expr></argument>, <argument><expr><name>eg</name></expr></argument>, <argument><expr><name>eb</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>left</name> <operator>&amp;&amp;</operator> <name>down</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>src</name><index>[<expr><name>src_linesize</name> <operator>+</operator> <name>x</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>dither_color</name><argument_list>(<argument><expr><name><name>src</name><index>[<expr><name>src_linesize</name> <operator>+</operator> <name>x</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>er</name></expr></argument>, <argument><expr><name>eg</name></expr></argument>, <argument><expr><name>eb</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>( <expr><name>down</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>src</name><index>[<expr><name>src_linesize</name> <operator>+</operator> <name>x</name></expr> ]</index></name> <operator>=</operator> <call><name>dither_color</name><argument_list>(<argument><expr><name><name>src</name><index>[<expr><name>src_linesize</name> <operator>+</operator> <name>x</name></expr> ]</index></name></expr></argument>, <argument><expr><name>er</name></expr></argument>, <argument><expr><name>eg</name></expr></argument>, <argument><expr><name>eb</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name></type> <name>a</name> <init>= <expr><name><name>src</name><index>[<expr><name>x</name></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">24</literal> <operator>&amp;</operator> <literal type="number">0xff</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name></type> <name>r</name> <init>= <expr><name><name>src</name><index>[<expr><name>x</name></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">16</literal> <operator>&amp;</operator> <literal type="number">0xff</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name></type> <name>g</name> <init>= <expr><name><name>src</name><index>[<expr><name>x</name></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">8</literal> <operator>&amp;</operator> <literal type="number">0xff</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name></type> <name>b</name> <init>= <expr><name><name>src</name><index>[<expr><name>x</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xff</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>color</name> <init>= <expr><call><name>color_get</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>src</name><index>[<expr><name>x</name></expr>]</index></name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>g</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>search_method</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>color</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>color</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>dst</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <name>color</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>src_linesize</name></expr>;</expr_stmt>

<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dst_linesize</name></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INDENT</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type> <name>disp_node</name><parameter_list>(<parameter><decl><type><name>AVBPrint</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>color_node</name></name> <modifier>*</modifier></type><name>map</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>parent_id</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>node_id</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>depth</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>color_node</name></name> <modifier>*</modifier></type><name>node</name> <init>= <expr><operator>&amp;</operator><name><name>map</name><index>[<expr><name>node_id</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>fontcolor</name> <init>= <expr><ternary><condition><expr><name><name>node</name><operator>-&gt;</operator><name>val</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&gt;</operator> <literal type="number">0x50</literal> <operator>&amp;&amp;</operator>

<name><name>node</name><operator>-&gt;</operator><name>val</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&gt;</operator> <literal type="number">0x50</literal> <operator>&amp;&amp;</operator>

<name><name>node</name><operator>-&gt;</operator><name>val</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&gt;</operator> <literal type="number">0x50</literal></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><literal type="number">0xffffff</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>rgb_comp</name> <init>= <expr><name><name>node</name><operator>-&gt;</operator><name>split</name></name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_bprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"%*cnode%d ["</literal>

<literal type="string">"label=\"%c%02X%c%02X%c%02X%c\" "</literal>

<literal type="string">"fillcolor=\"#%02x%02x%02x\" "</literal>

<literal type="string">"fontcolor=\"#%06"</literal><name>PRIX32</name><literal type="string">"\"]\n"</literal></expr></argument>,

<argument><expr><name>depth</name><operator>*</operator><name>INDENT</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>palette_id</name></name></expr></argument>,

<argument><expr><literal type="string">"[ "</literal><index>[<expr><name>rgb_comp</name></expr>]</index></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>val</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,

<argument><expr><literal type="string">"][ "</literal><index>[<expr><name>rgb_comp</name></expr>]</index></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>val</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>,

<argument><expr><literal type="string">" ]["</literal><index>[<expr><name>rgb_comp</name></expr>]</index></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>val</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>,

<argument><expr><literal type="string">" ]"</literal><index>[<expr><name>rgb_comp</name></expr>]</index></expr></argument>,

<argument><expr><name><name>node</name><operator>-&gt;</operator><name>val</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>val</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>val</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>,

<argument><expr><name>fontcolor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>parent_id</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_bprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"%*cnode%d -&gt; node%d\n"</literal></expr></argument>, <argument><expr><name>depth</name><operator>*</operator><name>INDENT</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>,

<argument><expr><name><name>map</name><index>[<expr><name>parent_id</name></expr>]</index></name><operator>.</operator><name>palette_id</name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>palette_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>left_id</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>disp_node</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>map</name></expr></argument>, <argument><expr><name>node_id</name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>left_id</name></name></expr></argument>, <argument><expr><name>depth</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>right_id</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>disp_node</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>map</name></expr></argument>, <argument><expr><name>node_id</name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>right_id</name></name></expr></argument>, <argument><expr><name>depth</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>disp_tree</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>color_node</name></name> <modifier>*</modifier></type><name>node</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fname</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVBPrint</name></type> <name>buf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>f</name> <init>= <expr><call><name>av_fopen_utf8</name><argument_list>(<argument><expr><name>fname</name></expr></argument>, <argument><expr><literal type="string">"w"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>f</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Cannot open file '%s' for writing: %s\n"</literal></expr></argument>,

<argument><expr><name>fname</name></expr></argument>, <argument><expr><call><name>av_err2str</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_bprint_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>AV_BPRINT_SIZE_UNLIMITED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_bprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><literal type="string">"digraph {\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_bprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><literal type="string">" node [style=filled fontsize=10 shape=box]\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>disp_node</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name>node</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_bprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><literal type="string">"}\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fwrite</name><argument_list>(<argument><expr><name><name>buf</name><operator>.</operator><name>str</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>buf</name><operator>.</operator><name>len</name></name></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_bprint_finalize</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>debug_accuracy</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>color_node</name></name> <modifier>*</modifier></type><name>node</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type><name>palette</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>trans_thresh</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name><name>enum</name> <name>color_search_method</name></name></type> <name>search_method</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>, <decl><type ref="prev"/><name>g</name></decl>, <decl><type ref="prev"/><name>b</name></decl>, <decl><type ref="prev"/><name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>r</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>r</name> <operator>&lt;</operator> <literal type="number">256</literal></expr>;</condition> <incr><expr><name>r</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>g</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>g</name> <operator>&lt;</operator> <literal type="number">256</literal></expr>;</condition> <incr><expr><name>g</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>b</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>b</name> <operator>&lt;</operator> <literal type="number">256</literal></expr>;</condition> <incr><expr><name>b</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name></type> <name><name>argb</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="number">0xff</literal></expr>, <expr><name>r</name></expr>, <expr><name>g</name></expr>, <expr><name>b</name></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>r1</name> <init>= <expr><call><name>COLORMAP_NEAREST</name><argument_list>(<argument><expr><name>search_method</name></expr></argument>, <argument><expr><name>palette</name></expr></argument>, <argument><expr><name>node</name></expr></argument>, <argument><expr><name>argb</name></expr></argument>, <argument><expr><name>trans_thresh</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>r2</name> <init>= <expr><call><name>colormap_nearest_bruteforce</name><argument_list>(<argument><expr><name>palette</name></expr></argument>, <argument><expr><name>argb</name></expr></argument>, <argument><expr><name>trans_thresh</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>r1</name> <operator>!=</operator> <name>r2</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>c1</name> <init>= <expr><name><name>palette</name><index>[<expr><name>r1</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>c2</name> <init>= <expr><name><name>palette</name><index>[<expr><name>r2</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name></type> <name><name>palargb1</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xff</literal></expr>, <expr><name>c1</name><operator>&gt;&gt;</operator><literal type="number">16</literal> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>, <expr><name>c1</name><operator>&gt;&gt;</operator> <literal type="number">8</literal> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>, <expr><name>c1</name> <operator>&amp;</operator> <literal type="number">0xff</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name></type> <name><name>palargb2</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xff</literal></expr>, <expr><name>c2</name><operator>&gt;&gt;</operator><literal type="number">16</literal> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>, <expr><name>c2</name><operator>&gt;&gt;</operator> <literal type="number">8</literal> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>, <expr><name>c2</name> <operator>&amp;</operator> <literal type="number">0xff</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>d1</name> <init>= <expr><call><name>diff</name><argument_list>(<argument><expr><name>palargb1</name></expr></argument>, <argument><expr><name>argb</name></expr></argument>, <argument><expr><name>trans_thresh</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>d2</name> <init>= <expr><call><name>diff</name><argument_list>(<argument><expr><name>palargb2</name></expr></argument>, <argument><expr><name>argb</name></expr></argument>, <argument><expr><name>trans_thresh</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>d1</name> <operator>!=</operator> <name>d2</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"/!\\ %02X%02X%02X: %d ! %d (%06"</literal><name>PRIX32</name><literal type="string">" ! %06"</literal><name>PRIX32</name><literal type="string">") / dist: %d ! %d\n"</literal></expr></argument>,

<argument><expr><name>r</name></expr></argument>, <argument><expr><name>g</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>r1</name></expr></argument>, <argument><expr><name>r2</name></expr></argument>, <argument><expr><name>c1</name> <operator>&amp;</operator> <literal type="number">0xffffff</literal></expr></argument>, <argument><expr><name>c2</name> <operator>&amp;</operator> <literal type="number">0xffffff</literal></expr></argument>, <argument><expr><name>d1</name></expr></argument>, <argument><expr><name>d2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></for>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<struct>struct <name>color</name> <block>{

<decl_stmt><decl><type><name>uint32_t</name></type> <name>value</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>pal_id</name></decl>;</decl_stmt>

}</block>;</struct>

<struct>struct <name>color_rect</name> <block>{

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>min</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>max</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>

}</block>;</struct>

<typedef>typedef <function_decl><type><name>int</name></type> (<modifier>*</modifier><name>cmp_func</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DECLARE_CMP_FUNC</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>pos</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static int cmp_##name(const void *pa, const void *pb) { const struct color *a = pa; const struct color *b = pb; return (a-&gt;value &gt;&gt; (8 * (3 - (pos))) &amp; 0xff) - (b-&gt;value &gt;&gt; (8 * (3 - (pos))) &amp; 0xff); }</cpp:value></cpp:define>

<macro><name>DECLARE_CMP_FUNC</name><argument_list>(<argument>a</argument>, <argument><literal type="number">0</literal></argument>)</argument_list></macro>

<macro><name>DECLARE_CMP_FUNC</name><argument_list>(<argument>r</argument>, <argument><literal type="number">1</literal></argument>)</argument_list></macro>

<macro><name>DECLARE_CMP_FUNC</name><argument_list>(<argument>g</argument>, <argument><literal type="number">2</literal></argument>)</argument_list></macro>

<macro><name>DECLARE_CMP_FUNC</name><argument_list>(<argument>b</argument>, <argument><literal type="number">3</literal></argument>)</argument_list></macro>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>cmp_func</name></type> <name><name>cmp_funcs</name><index>[]</index></name> <init>= <expr><block>{<expr><name>cmp_a</name></expr>, <expr><name>cmp_r</name></expr>, <expr><name>cmp_g</name></expr>, <expr><name>cmp_b</name></expr>}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int</name></type> <name>get_next_color</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>color_used</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type><name>palette</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>trans_thresh</name></decl></parameter>,

<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>component</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>color_rect</name></name> <modifier>*</modifier></type><name>box</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>wr</name></decl>, <decl><type ref="prev"/><name>wg</name></decl>, <decl><type ref="prev"/><name>wb</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>longest</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>nb_color</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>color_rect</name></name></type> <name>ranges</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>color</name></name></type> <name><name>tmp_pal</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>cmp_func</name></type> <name>cmpf</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>ranges</name><operator>.</operator><name>min</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>ranges</name><operator>.</operator><name>min</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>ranges</name><operator>.</operator><name>min</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ranges</name><operator>.</operator><name>max</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>ranges</name><operator>.</operator><name>max</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>ranges</name><operator>.</operator><name>max</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x00</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>AVPALETTE_COUNT</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>c</name> <init>= <expr><name><name>palette</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name></type> <name>a</name> <init>= <expr><name>c</name> <operator>&gt;&gt;</operator> <literal type="number">24</literal> <operator>&amp;</operator> <literal type="number">0xff</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name></type> <name>r</name> <init>= <expr><name>c</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal> <operator>&amp;</operator> <literal type="number">0xff</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name></type> <name>g</name> <init>= <expr><name>c</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal> <operator>&amp;</operator> <literal type="number">0xff</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name></type> <name>b</name> <init>= <expr><name>c</name> <operator>&amp;</operator> <literal type="number">0xff</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>a</name> <operator>&lt;</operator> <name>trans_thresh</name></expr>)</condition> <block>{<block_content>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>color_used</name><index>[<expr><name>i</name></expr>]</index></name> <operator>||</operator> <operator>(</operator><name>a</name> <operator>!=</operator> <literal type="number">0xff</literal><operator>)</operator> <operator>||</operator>

<name><name>r</name> <argument_list type="generic">&lt; <argument><expr><name><name>box</name><operator>-&gt;</operator><name>min</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>||</operator> <name><name>g</name> <argument_list type="generic">&lt; <argument><expr><name><name>box</name><operator>-&gt;</operator><name>min</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>||</operator> <name><name>b</name> <argument_list type="generic">&lt; <argument><expr><name><name>box</name><operator>-&gt;</operator><name>min</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>||</operator>

<name>r</name></expr></argument> &gt;</argument_list></name> <name><name>box</name><operator>-&gt;</operator><name>max</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>||</operator> <name>g</name></expr></argument> &gt;</argument_list></name> <name><name>box</name><operator>-&gt;</operator><name>max</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>||</operator> <name>b</name></expr></argument> &gt;</argument_list></name> <name><name>box</name><operator>-&gt;</operator><name>max</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&lt;</operator> <name><name>ranges</name><operator>.</operator><name>min</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>ranges</name><operator>.</operator><name>min</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>r</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>g</name> <operator>&lt;</operator> <name><name>ranges</name><operator>.</operator><name>min</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>ranges</name><operator>.</operator><name>min</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>g</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>b</name> <operator>&lt;</operator> <name><name>ranges</name><operator>.</operator><name>min</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>ranges</name><operator>.</operator><name>min</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>b</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&gt;</operator> <name><name>ranges</name><operator>.</operator><name>max</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>ranges</name><operator>.</operator><name>max</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>r</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>g</name> <operator>&gt;</operator> <name><name>ranges</name><operator>.</operator><name>max</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>ranges</name><operator>.</operator><name>max</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>g</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>b</name> <operator>&gt;</operator> <name><name>ranges</name><operator>.</operator><name>max</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>ranges</name><operator>.</operator><name>max</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>b</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>tmp_pal</name><index>[<expr><name>nb_color</name></expr>]</index></name><operator>.</operator><name>value</name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tmp_pal</name><index>[<expr><name>nb_color</name></expr>]</index></name><operator>.</operator><name>pal_id</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

<expr_stmt><expr><name>nb_color</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>nb_color</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>wr</name> <operator>=</operator> <name><name>ranges</name><operator>.</operator><name>max</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <name><name>ranges</name><operator>.</operator><name>min</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>wg</name> <operator>=</operator> <name><name>ranges</name><operator>.</operator><name>max</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>ranges</name><operator>.</operator><name>min</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>wb</name> <operator>=</operator> <name><name>ranges</name><operator>.</operator><name>max</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>-</operator> <name><name>ranges</name><operator>.</operator><name>min</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>wr</name> <operator>&gt;=</operator> <name>wg</name> <operator>&amp;&amp;</operator> <name>wr</name> <operator>&gt;=</operator> <name>wb</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>longest</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>wg</name> <operator>&gt;=</operator> <name>wr</name> <operator>&amp;&amp;</operator> <name>wg</name> <operator>&gt;=</operator> <name>wb</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>longest</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>wb</name> <operator>&gt;=</operator> <name>wr</name> <operator>&amp;&amp;</operator> <name>wb</name> <operator>&gt;=</operator> <name>wg</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>longest</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>cmpf</name> <operator>=</operator> <name><name>cmp_funcs</name><index>[<expr><name>longest</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>component</name> <operator>=</operator> <name>longest</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_QSORT</name><argument_list>(<argument><expr><name>tmp_pal</name></expr></argument>, <argument><expr><name>nb_color</name></expr></argument>, <argument><expr>struct <name>color</name></expr></argument>, <argument><expr><name>cmpf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name><name>tmp_pal</name><index>[<expr><name>nb_color</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>pal_id</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>colormap_insert</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>color_node</name></name> <modifier>*</modifier></type><name>map</name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>color_used</name></decl></parameter>,

<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>nb_used</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type><name>palette</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>trans_thresh</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>color_rect</name></name> <modifier>*</modifier></type><name>box</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>c</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>component</name></decl>, <decl><type ref="prev"/><name>cur_id</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>node_left_id</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>node_right_id</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>color_node</name></name> <modifier>*</modifier></type><name>node</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>color_rect</name></name></type> <name>box1</name></decl>, <decl><type ref="prev"/><name>box2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>pal_id</name> <init>= <expr><call><name>get_next_color</name><argument_list>(<argument><expr><name>color_used</name></expr></argument>, <argument><expr><name>palette</name></expr></argument>, <argument><expr><name>trans_thresh</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>component</name></expr></argument>, <argument><expr><name>box</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>pal_id</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>cur_id</name> <operator>=</operator> <operator>(</operator><operator>*</operator><name>nb_used</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <name><name>palette</name><index>[<expr><name>pal_id</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>node</name> <operator>=</operator> <operator>&amp;</operator><name><name>map</name><index>[<expr><name>cur_id</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>split</name></name> <operator>=</operator> <name>component</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>palette_id</name></name> <operator>=</operator> <name>pal_id</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>val</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>c</name><operator>&gt;&gt;</operator><literal type="number">24</literal> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>val</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>c</name><operator>&gt;&gt;</operator><literal type="number">16</literal> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>val</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>c</name><operator>&gt;&gt;</operator> <literal type="number">8</literal> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>val</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>c</name> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>color_used</name><index>[<expr><name>pal_id</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>box1</name> <operator>=</operator> <name>box2</name> <operator>=</operator> <operator>*</operator><name>box</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>box1</name><operator>.</operator><name>max</name><index>[<expr><name>component</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>val</name><index>[<expr><name>component</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>box2</name><operator>.</operator><name>min</name><index>[<expr><name>component</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>val</name><index>[<expr><name>component</name></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>node_left_id</name> <operator>=</operator> <call><name>colormap_insert</name><argument_list>(<argument><expr><name>map</name></expr></argument>, <argument><expr><name>color_used</name></expr></argument>, <argument><expr><name>nb_used</name></expr></argument>, <argument><expr><name>palette</name></expr></argument>, <argument><expr><name>trans_thresh</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>box1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>box2</name><operator>.</operator><name>min</name><index>[<expr><name>component</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>&lt;=</operator> <name><name>box2</name><operator>.</operator><name>max</name><index>[<expr><name>component</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>node_right_id</name> <operator>=</operator> <call><name>colormap_insert</name><argument_list>(<argument><expr><name>map</name></expr></argument>, <argument><expr><name>color_used</name></expr></argument>, <argument><expr><name>nb_used</name></expr></argument>, <argument><expr><name>palette</name></expr></argument>, <argument><expr><name>trans_thresh</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>box2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>left_id</name></name> <operator>=</operator> <name>node_left_id</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>right_id</name></name> <operator>=</operator> <name>node_right_id</name></expr>;</expr_stmt>

<return>return <expr><name>cur_id</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>cmp_pal_entry</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>c1</name> <init>= <expr><operator>*</operator><operator>(</operator><specifier>const</specifier> <name>uint32_t</name> <operator>*</operator><operator>)</operator><name>a</name> <operator>&amp;</operator> <literal type="number">0xffffff</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>c2</name> <init>= <expr><operator>*</operator><operator>(</operator><specifier>const</specifier> <name>uint32_t</name> <operator>*</operator><operator>)</operator><name>b</name> <operator>&amp;</operator> <literal type="number">0xffffff</literal></expr></init></decl>;</decl_stmt>

<return>return <expr><name>c1</name> <operator>-</operator> <name>c2</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>load_colormap</name><parameter_list>(<parameter><decl><type><name>PaletteUseContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>nb_used</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>color_used</name><index>[<expr><name>AVPALETTE_COUNT</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>last_color</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>color_rect</name></name></type> <name>box</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>qsort</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>palette</name></name></expr></argument>, <argument><expr><name>AVPALETTE_COUNT</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>palette</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>cmp_pal_entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>transparency_index</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>AVPALETTE_COUNT</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>palette</name><index>[<expr><name>i</name></expr>]</index></name><operator>&gt;&gt;</operator><literal type="number">24</literal> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>transparency_index</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt> 

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>AVPALETTE_COUNT</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>c</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>palette</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>==</operator> <name>last_color</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>color_used</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>last_color</name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>&gt;&gt;</operator> <literal type="number">24</literal> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>trans_thresh</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>color_used</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> 

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>box</name><operator>.</operator><name>min</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>box</name><operator>.</operator><name>min</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>box</name><operator>.</operator><name>min</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x00</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>box</name><operator>.</operator><name>max</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>box</name><operator>.</operator><name>max</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>box</name><operator>.</operator><name>max</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>colormap_insert</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>map</name></name></expr></argument>, <argument><expr><name>color_used</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nb_used</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>palette</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>trans_thresh</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>box</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>dot_filename</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>disp_tree</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>map</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>dot_filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>debug_accuracy</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>debug_accuracy</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>map</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>palette</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>trans_thresh</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>color_search_method</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"Accuracy check passed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>debug_mean_error</name><parameter_list>(<parameter><decl><type><name>PaletteUseContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>AVFrame</name> <modifier>*</modifier></type><name>in1</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>AVFrame</name> <modifier>*</modifier></type><name>in2</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>frame_count</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type><name>palette</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>palette</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>src1</name> <init>= <expr><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><name><name>in1</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src2</name> <init>= <expr><name><name>in2</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>src1_linesize</name> <init>= <expr><name><name>in1</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>src2_linesize</name> <init>= <expr><name><name>in2</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>div</name> <init>= <expr><name><name>in1</name><operator>-&gt;</operator><name>width</name></name> <operator>*</operator> <name><name>in1</name><operator>-&gt;</operator><name>height</name></name> <operator>*</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>mean_err</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name><name>in1</name><operator>-&gt;</operator><name>height</name></name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name><name>in1</name><operator>-&gt;</operator><name>width</name></name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>c1</name> <init>= <expr><name><name>src1</name><index>[<expr><name>x</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>c2</name> <init>= <expr><name><name>palette</name><index>[<expr><name><name>src2</name><index>[<expr><name>x</name></expr>]</index></name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name></type> <name><name>argb1</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="number">0xff</literal></expr>, <expr><name>c1</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>, <expr><name>c1</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>, <expr><name>c1</name> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name></type> <name><name>argb2</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="number">0xff</literal></expr>, <expr><name>c2</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>, <expr><name>c2</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>, <expr><name>c2</name> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>mean_err</name> <operator>+=</operator> <call><name>diff</name><argument_list>(<argument><expr><name>argb1</name></expr></argument>, <argument><expr><name>argb2</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>trans_thresh</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>src1</name> <operator>+=</operator> <name>src1_linesize</name></expr>;</expr_stmt>

<expr_stmt><expr><name>src2</name> <operator>+=</operator> <name>src2_linesize</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>total_mean_err</name></name> <operator>+=</operator> <name>mean_err</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"MEP:%.3f TotalMEP:%.3f\n"</literal></expr></argument>,

<argument><expr><name>mean_err</name> <operator>/</operator> <name>div</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>total_mean_err</name></name> <operator>/</operator> <operator>(</operator><name>div</name> <operator>*</operator> <name>frame_count</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>set_processing_window</name><parameter_list>(<parameter><decl><type><name><name>enum</name> <name>diff_mode</name></name></type> <name>diff_mode</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>AVFrame</name> <modifier>*</modifier></type><name>prv_src</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>AVFrame</name> <modifier>*</modifier></type><name>cur_src</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>AVFrame</name> <modifier>*</modifier></type><name>prv_dst</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>cur_dst</name></decl></parameter>,

<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>xp</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>yp</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>wp</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>hp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>x_start</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>y_start</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>width</name> <init>= <expr><name><name>cur_src</name><operator>-&gt;</operator><name>width</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>height</name> <init>= <expr><name><name>cur_src</name><operator>-&gt;</operator><name>height</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>prv_src</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <name>diff_mode</name> <operator>==</operator> <name>DIFF_MODE_RECTANGLE</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>x_end</name> <init>= <expr><name><name>cur_src</name><operator>-&gt;</operator><name>width</name></name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>,

<decl><type ref="prev"/><name>y_end</name> <init>= <expr><name><name>cur_src</name><operator>-&gt;</operator><name>height</name></name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type><name>prv_srcp</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint32_t</name> <operator>*</operator><operator>)</operator><name><name>prv_src</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type><name>cur_srcp</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint32_t</name> <operator>*</operator><operator>)</operator><name><name>cur_src</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>prv_dstp</name> <init>= <expr><name><name>prv_dst</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>cur_dstp</name> <init>= <expr><name><name>cur_dst</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>prv_src_linesize</name> <init>= <expr><name><name>prv_src</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>cur_src_linesize</name> <init>= <expr><name><name>cur_src</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>prv_dst_linesize</name> <init>= <expr><name><name>prv_dst</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>cur_dst_linesize</name> <init>= <expr><name><name>cur_dst</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>y_start</name> <operator>&lt;</operator> <name>y_end</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>memcmp</name><argument_list>(<argument><expr><name>prv_srcp</name> <operator>+</operator> <name>y_start</name><operator>*</operator><name>prv_src_linesize</name></expr></argument>,

<argument><expr><name>cur_srcp</name> <operator>+</operator> <name>y_start</name><operator>*</operator><name>cur_src_linesize</name></expr></argument>,

<argument><expr><name><name>cur_src</name><operator>-&gt;</operator><name>width</name></name> <operator>*</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>cur_dstp</name> <operator>+</operator> <name>y_start</name><operator>*</operator><name>cur_dst_linesize</name></expr></argument>,

<argument><expr><name>prv_dstp</name> <operator>+</operator> <name>y_start</name><operator>*</operator><name>prv_dst_linesize</name></expr></argument>,

<argument><expr><name><name>cur_dst</name><operator>-&gt;</operator><name>width</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>y_start</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<while>while <condition>(<expr><name>y_end</name> <operator>&gt;</operator> <name>y_start</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>memcmp</name><argument_list>(<argument><expr><name>prv_srcp</name> <operator>+</operator> <name>y_end</name><operator>*</operator><name>prv_src_linesize</name></expr></argument>,

<argument><expr><name>cur_srcp</name> <operator>+</operator> <name>y_end</name><operator>*</operator><name>cur_src_linesize</name></expr></argument>,

<argument><expr><name><name>cur_src</name><operator>-&gt;</operator><name>width</name></name> <operator>*</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>cur_dstp</name> <operator>+</operator> <name>y_end</name><operator>*</operator><name>cur_dst_linesize</name></expr></argument>,

<argument><expr><name>prv_dstp</name> <operator>+</operator> <name>y_end</name><operator>*</operator><name>prv_dst_linesize</name></expr></argument>,

<argument><expr><name><name>cur_dst</name><operator>-&gt;</operator><name>width</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>y_end</name><operator>--</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><name>height</name> <operator>=</operator> <name>y_end</name> <operator>+</operator> <literal type="number">1</literal> <operator>-</operator> <name>y_start</name></expr>;</expr_stmt>

<while>while <condition>(<expr><name>x_start</name> <operator>&lt;</operator> <name>x_end</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>same_column</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <name>y_start</name></expr>;</init> <condition><expr><name>y</name> <operator>&lt;=</operator> <name>y_end</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>prv_srcp</name><index>[<expr><name>y</name><operator>*</operator><name>prv_src_linesize</name> <operator>+</operator> <name>x_start</name></expr>]</index></name> <operator>!=</operator> <name><name>cur_srcp</name><index>[<expr><name>y</name><operator>*</operator><name>cur_src_linesize</name> <operator>+</operator> <name>x_start</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>same_column</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>same_column</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>x_start</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<while>while <condition>(<expr><name>x_end</name> <operator>&gt;</operator> <name>x_start</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>same_column</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <name>y_start</name></expr>;</init> <condition><expr><name>y</name> <operator>&lt;=</operator> <name>y_end</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>prv_srcp</name><index>[<expr><name>y</name><operator>*</operator><name>prv_src_linesize</name> <operator>+</operator> <name>x_end</name></expr>]</index></name> <operator>!=</operator> <name><name>cur_srcp</name><index>[<expr><name>y</name><operator>*</operator><name>cur_src_linesize</name> <operator>+</operator> <name>x_end</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>same_column</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>same_column</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>x_end</name><operator>--</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><name>width</name> <operator>=</operator> <name>x_end</name> <operator>+</operator> <literal type="number">1</literal> <operator>-</operator> <name>x_start</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>x_start</name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <name>y_start</name></expr>;</init> <condition><expr><name>y</name> <operator>&lt;=</operator> <name>y_end</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>cur_dstp</name> <operator>+</operator> <name>y</name><operator>*</operator><name>cur_dst_linesize</name></expr></argument>,

<argument><expr><name>prv_dstp</name> <operator>+</operator> <name>y</name><operator>*</operator><name>prv_dst_linesize</name></expr></argument>, <argument><expr><name>x_start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>x_end</name> <operator>!=</operator> <name><name>cur_src</name><operator>-&gt;</operator><name>width</name></name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>copy_len</name> <init>= <expr><name><name>cur_src</name><operator>-&gt;</operator><name>width</name></name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <name>x_end</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <name>y_start</name></expr>;</init> <condition><expr><name>y</name> <operator>&lt;=</operator> <name>y_end</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>cur_dstp</name> <operator>+</operator> <name>y</name><operator>*</operator><name>cur_dst_linesize</name> <operator>+</operator> <name>x_end</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>,

<argument><expr><name>prv_dstp</name> <operator>+</operator> <name>y</name><operator>*</operator><name>prv_dst_linesize</name> <operator>+</operator> <name>x_end</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>,

<argument><expr><name>copy_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>xp</name> <operator>=</operator> <name>x_start</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>yp</name> <operator>=</operator> <name>y_start</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>wp</name> <operator>=</operator> <name>width</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>hp</name> <operator>=</operator> <name>height</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>apply_palette</name><parameter_list>(<parameter><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>inlink</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier><modifier>*</modifier></type><name>outf</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>, <decl><type ref="prev"/><name>w</name></decl>, <decl><type ref="prev"/><name>h</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>inlink</name><operator>-&gt;</operator><name>dst</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PaletteUseContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>outlink</name> <init>= <expr><name><name>inlink</name><operator>-&gt;</operator><name>dst</name><operator>-&gt;</operator><name>outputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>out</name> <init>= <expr><call><name>ff_get_video_buffer</name><argument_list>(<argument><expr><name>outlink</name></expr></argument>, <argument><expr><name><name>outlink</name><operator>-&gt;</operator><name>w</name></name></expr></argument>, <argument><expr><name><name>outlink</name><operator>-&gt;</operator><name>h</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>out</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>outf</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_frame_copy_props</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_processing_window</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>diff_mode</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>last_in</name></name></expr></argument>, <argument><expr><name>in</name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>last_out</name></name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>x</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>y</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>w</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_frame_unref</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>last_in</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_frame_unref</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>last_out</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>av_frame_ref</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>last_in</name></name></expr></argument>, <argument><expr><name>in</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator>

<operator>(</operator><name>ret</name> <operator>=</operator> <call><name>av_frame_ref</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>last_out</name></name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator>

<operator>(</operator><name>ret</name> <operator>=</operator> <call><name>av_frame_make_writable</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>last_in</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>outf</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ff_dlog</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="string">"%dx%d rect: (%d;%d) -&gt; (%d,%d) [area:%dx%d]\n"</literal></expr></argument>,

<argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>x</name><operator>+</operator><name>w</name></expr></argument>, <argument><expr><name>y</name><operator>+</operator><name>h</name></expr></argument>, <argument><expr><name><name>in</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>in</name><operator>-&gt;</operator><name>height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name><name>s</name><operator>-&gt;</operator><name>set_frame</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>outf</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>palette</name></name></expr></argument>, <argument><expr><name>AVPALETTE_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>calc_mean_err</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>debug_mean_error</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>frame_count_out</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>outf</name> <operator>=</operator> <name>out</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>config_output</name><parameter_list>(<parameter><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>outlink</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>outlink</name><operator>-&gt;</operator><name>src</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PaletteUseContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_framesync_init_dualinput</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>fs</name></name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>fs</name><operator>.</operator><name>opt_repeatlast</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>fs</name><operator>.</operator><name>in</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>before</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>fs</name><operator>.</operator><name>in</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>after</name> <operator>=</operator> <name>EXT_INFINITY</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>fs</name><operator>.</operator><name>on_event</name></name> <operator>=</operator> <name>load_apply_palette</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>outlink</name><operator>-&gt;</operator><name>w</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>inputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>w</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>outlink</name><operator>-&gt;</operator><name>h</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>inputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>h</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>outlink</name><operator>-&gt;</operator><name>time_base</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>inputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>time_base</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_framesync_configure</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>fs</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>config_input_palette</name><parameter_list>(<parameter><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>inlink</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>inlink</name><operator>-&gt;</operator><name>dst</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>inlink</name><operator>-&gt;</operator><name>w</name></name> <operator>*</operator> <name><name>inlink</name><operator>-&gt;</operator><name>h</name></name> <operator>!=</operator> <name>AVPALETTE_COUNT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"Palette input must contain exactly %d pixels. "</literal>

<literal type="string">"Specified input has %dx%d=%d pixels\n"</literal></expr></argument>,

<argument><expr><name>AVPALETTE_COUNT</name></expr></argument>, <argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>w</name></name></expr></argument>, <argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>h</name></name></expr></argument>,

<argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>w</name></name> <operator>*</operator> <name><name>inlink</name><operator>-&gt;</operator><name>h</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>load_palette</name><parameter_list>(<parameter><decl><type><name>PaletteUseContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>AVFrame</name> <modifier>*</modifier></type><name>palette_frame</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint32_t</name> <operator>*</operator><operator>)</operator><name><name>palette_frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>p_linesize</name> <init>= <expr><name><name>palette_frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>transparency_index</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>new</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>palette</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>palette</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>map</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>map</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>CACHE_SIZE</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>cache</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>entries</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>cache</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>cache</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name><name>palette_frame</name><operator>-&gt;</operator><name>height</name></name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name><name>palette_frame</name><operator>-&gt;</operator><name>width</name></name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>palette</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>p</name><index>[<expr><name>x</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p</name><index>[<expr><name>x</name></expr>]</index></name><operator>&gt;&gt;</operator><literal type="number">24</literal> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>trans_thresh</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>transparency_index</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt> 

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>p</name> <operator>+=</operator> <name>p_linesize</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>load_colormap</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>new</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>palette_loaded</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>load_apply_palette</name><parameter_list>(<parameter><decl><type><name>FFFrameSync</name> <modifier>*</modifier></type><name>fs</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>fs</name><operator>-&gt;</operator><name>parent</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>inlink</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>inputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PaletteUseContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>master</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>second</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>out</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_framesync_dualinput_get_writable</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>master</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>second</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>master</name> <operator>||</operator> <operator>!</operator><name>second</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>master</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_BUG</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>palette_loaded</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>load_palette</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>second</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>apply_palette</name><argument_list>(<argument><expr><name>inlink</name></expr></argument>, <argument><expr><name>master</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>master</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>ff_filter_frame</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>outputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFINE_SET_FRAME</name><parameter_list>(<parameter><type><name>color_search</name></type></parameter>, <parameter><type><name>name</name></type></parameter>, <parameter><type><name>value</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static int set_frame_##name(PaletteUseContext *s, AVFrame *out, AVFrame *in, int x_start, int y_start, int w, int h) { return set_frame(s, out, in, x_start, y_start, w, h, value, color_search); }</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFINE_SET_FRAME_COLOR_SEARCH</name><parameter_list>(<parameter><type><name>color_search</name></type></parameter>, <parameter><type><name>color_search_macro</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>DEFINE_SET_FRAME(color_search_macro, color_search##_##none, DITHERING_NONE) DEFINE_SET_FRAME(color_search_macro, color_search##_##bayer, DITHERING_BAYER) DEFINE_SET_FRAME(color_search_macro, color_search##_##heckbert, DITHERING_HECKBERT) DEFINE_SET_FRAME(color_search_macro, color_search##_##floyd_steinberg, DITHERING_FLOYD_STEINBERG) DEFINE_SET_FRAME(color_search_macro, color_search##_##sierra2, DITHERING_SIERRA2) DEFINE_SET_FRAME(color_search_macro, color_search##_##sierra2_4a, DITHERING_SIERRA2_4A)</cpp:value></cpp:define> 

<macro><name>DEFINE_SET_FRAME_COLOR_SEARCH</name><argument_list>(<argument>nns_iterative</argument>, <argument>COLOR_SEARCH_NNS_ITERATIVE</argument>)</argument_list></macro>

<macro><name>DEFINE_SET_FRAME_COLOR_SEARCH</name><argument_list>(<argument>nns_recursive</argument>, <argument>COLOR_SEARCH_NNS_RECURSIVE</argument>)</argument_list></macro>

<macro><name>DEFINE_SET_FRAME_COLOR_SEARCH</name><argument_list>(<argument>bruteforce</argument>, <argument>COLOR_SEARCH_BRUTEFORCE</argument>)</argument_list></macro>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DITHERING_ENTRIES</name><parameter_list>(<parameter><type><name>color_search</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ set_frame_##color_search##_none, set_frame_##color_search##_bayer, set_frame_##color_search##_heckbert, set_frame_##color_search##_floyd_steinberg, set_frame_##color_search##_sierra2, set_frame_##color_search##_sierra2_4a, }</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>set_frame_func</name></type> <name><name>set_frame_lut</name><index>[<expr><name>NB_COLOR_SEARCHES</name></expr>]</index><index>[<expr><name>NB_DITHERING</name></expr>]</index></name> <init>= <expr><block>{

<expr><call><name>DITHERING_ENTRIES</name><argument_list>(<argument><expr><name>nns_iterative</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>DITHERING_ENTRIES</name><argument_list>(<argument><expr><name>nns_recursive</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>DITHERING_ENTRIES</name><argument_list>(<argument><expr><name>bruteforce</name></expr></argument>)</argument_list></call></expr>,

}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int</name></type> <name>dither_value</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>p</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>q</name> <init>= <expr><name>p</name> <operator>^</operator> <operator>(</operator><name>p</name> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<return>return <expr><operator>(</operator><name>p</name> <operator>&amp;</operator> <literal type="number">4</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal> <operator>|</operator> <operator>(</operator><name>q</name> <operator>&amp;</operator> <literal type="number">4</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal> \

<operator>|</operator> <operator>(</operator><name>p</name> <operator>&amp;</operator> <literal type="number">2</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">1</literal> <operator>|</operator> <operator>(</operator><name>q</name> <operator>&amp;</operator> <literal type="number">2</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">2</literal> \

<operator>|</operator> <operator>(</operator><name>p</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">4</literal> <operator>|</operator> <operator>(</operator><name>q</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">5</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>init</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>PaletteUseContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>last_in</name></name> <operator>=</operator> <call><name>av_frame_alloc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>last_out</name></name> <operator>=</operator> <call><name>av_frame_alloc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>last_in</name></name> <operator>||</operator> <operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>last_out</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>last_in</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>last_out</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>set_frame</name></name> <operator>=</operator> <name><name>set_frame_lut</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>color_search_method</name></name></expr>]</index><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>dither</name></name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>dither</name></name> <operator>==</operator> <name>DITHERING_BAYER</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>delta</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><literal type="number">5</literal> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>bayer_scale</name></name><operator>)</operator></expr></init></decl>;</decl_stmt> 

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>ordered_dither</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>ordered_dither</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><call><name>dither_value</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <name><name>s</name><operator>-&gt;</operator><name>bayer_scale</name></name><operator>)</operator> <operator>-</operator> <name>delta</name></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>activate</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>PaletteUseContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>ff_framesync_activate</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>fs</name></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>void</name></type> <name>uninit</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PaletteUseContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ff_framesync_uninit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>fs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>CACHE_SIZE</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>cache</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>entries</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>last_in</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>last_out</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVFilterPad</name></type> <name><name>paletteuse_inputs</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"default"</literal></expr>,

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,

}</block></expr>,<expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"palette"</literal></expr>,

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,

<expr><operator>.</operator><name>config_props</name> <operator>=</operator> <name>config_input_palette</name></expr>,

}</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVFilterPad</name></type> <name><name>paletteuse_outputs</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"default"</literal></expr>,

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,

<expr><operator>.</operator><name>config_props</name> <operator>=</operator> <name>config_output</name></expr>,

}</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFilter</name></type> <name>ff_vf_paletteuse</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"paletteuse"</literal></expr>,

<expr><operator>.</operator><name>description</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"Use a palette to downsample an input video stream."</literal></expr></argument>)</argument_list></call></expr>,

<expr><operator>.</operator><name>priv_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>PaletteUseContext</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><operator>.</operator><name>query_formats</name> <operator>=</operator> <name>query_formats</name></expr>,

<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>init</name></expr>,

<expr><operator>.</operator><name>uninit</name> <operator>=</operator> <name>uninit</name></expr>,

<expr><operator>.</operator><name>activate</name> <operator>=</operator> <name>activate</name></expr>,

<expr><operator>.</operator><name>inputs</name> <operator>=</operator> <name>paletteuse_inputs</name></expr>,

<expr><operator>.</operator><name>outputs</name> <operator>=</operator> <name>paletteuse_outputs</name></expr>,

<expr><operator>.</operator><name>priv_class</name> <operator>=</operator> <operator>&amp;</operator><name>paletteuse_class</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

</unit>
