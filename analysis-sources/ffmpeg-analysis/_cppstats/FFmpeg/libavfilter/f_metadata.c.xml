<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavfilter\f_metadata.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;float.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avassert.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avstring.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/eval.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/opt.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/timestamp.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavformat/avio.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avfilter.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"audio.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"formats.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"video.h"</cpp:file></cpp:include>

<enum>enum <name>MetadataMode</name> <block>{

<decl><name>METADATA_SELECT</name></decl>,

<decl><name>METADATA_ADD</name></decl>,

<decl><name>METADATA_MODIFY</name></decl>,

<decl><name>METADATA_DELETE</name></decl>,

<decl><name>METADATA_PRINT</name></decl>,

<decl><name>METADATA_NB</name></decl>

}</block>;</enum>

<enum>enum <name>MetadataFunction</name> <block>{

<decl><name>METADATAF_SAME_STR</name></decl>,

<decl><name>METADATAF_STARTS_WITH</name></decl>,

<decl><name>METADATAF_LESS</name></decl>,

<decl><name>METADATAF_EQUAL</name></decl>,

<decl><name>METADATAF_GREATER</name></decl>,

<decl><name>METADATAF_EXPR</name></decl>,

<decl><name>METADATAF_ENDS_WITH</name></decl>,

<decl><name>METADATAF_NB</name></decl>

}</block>;</enum>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>var_names</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="string">"VALUE1"</literal></expr>,

<expr><literal type="string">"VALUE2"</literal></expr>,

<expr><name>NULL</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<enum>enum <name>var_name</name> <block>{

<decl><name>VAR_VALUE1</name></decl>,

<decl><name>VAR_VALUE2</name></decl>,

<decl><name>VAR_VARS_NB</name></decl>

}</block>;</enum>

<typedef>typedef <type><struct>struct <name>MetadataContext</name> <block>{

<decl_stmt><decl><type><specifier>const</specifier> <name>AVClass</name> <modifier>*</modifier></type><name>class</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>mode</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>key</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>value</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>function</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>expr_str</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVExpr</name> <modifier>*</modifier></type><name>expr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name><name>var_values</name><index>[<expr><name>VAR_VARS_NB</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVIOContext</name><modifier>*</modifier></type> <name>avio_context</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>file_str</name></decl>;</decl_stmt>

<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>compare</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>MetadataContext</name></name> <modifier>*</modifier></type><name>s</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value2</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>print</name>)<parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>msg</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list> av_printf_format<parameter_list>(</parameter_list>2<operator>,</operator> 3</function_decl>)</block>;</struct></type></typedef>

<decl_stmt><decl><type><name>int</name></type> <name>direct</name></decl>;</decl_stmt> 

} MetadataContext<empty_stmt>;</empty_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OFFSET</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>offsetof(MetadataContext, x)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFINE_OPTIONS</name><parameter_list>(<parameter><type><name>filt_name</name></type></parameter>, <parameter><type><name>FLAGS</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static const AVOption filt_name##_options[] = { { "mode", "set a mode of operation", OFFSET(mode), AV_OPT_TYPE_INT, {.i64 = 0 }, 0, METADATA_NB-1, FLAGS, "mode" }, { "select", "select frame", 0, AV_OPT_TYPE_CONST, {.i64 = METADATA_SELECT }, 0, 0, FLAGS, "mode" }, { "add", "add new metadata", 0, AV_OPT_TYPE_CONST, {.i64 = METADATA_ADD }, 0, 0, FLAGS, "mode" }, { "modify", "modify metadata", 0, AV_OPT_TYPE_CONST, {.i64 = METADATA_MODIFY }, 0, 0, FLAGS, "mode" }, { "delete", "delete metadata", 0, AV_OPT_TYPE_CONST, {.i64 = METADATA_DELETE }, 0, 0, FLAGS, "mode" }, { "print", "print metadata", 0, AV_OPT_TYPE_CONST, {.i64 = METADATA_PRINT }, 0, 0, FLAGS, "mode" }, { "key", "set metadata key", OFFSET(key), AV_OPT_TYPE_STRING, {.str = NULL }, 0, 0, FLAGS }, { "value", "set metadata value", OFFSET(value), AV_OPT_TYPE_STRING, {.str = NULL }, 0, 0, FLAGS }, { "function", "function for comparing values", OFFSET(function), AV_OPT_TYPE_INT, {.i64 = 0 }, 0, METADATAF_NB-1, FLAGS, "function" }, { "same_str", NULL, 0, AV_OPT_TYPE_CONST, {.i64 = METADATAF_SAME_STR }, 0, 3, FLAGS, "function" }, { "starts_with", NULL, 0, AV_OPT_TYPE_CONST, {.i64 = METADATAF_STARTS_WITH }, 0, 0, FLAGS, "function" }, { "less", NULL, 0, AV_OPT_TYPE_CONST, {.i64 = METADATAF_LESS }, 0, 3, FLAGS, "function" }, { "equal", NULL, 0, AV_OPT_TYPE_CONST, {.i64 = METADATAF_EQUAL }, 0, 3, FLAGS, "function" }, { "greater", NULL, 0, AV_OPT_TYPE_CONST, {.i64 = METADATAF_GREATER }, 0, 3, FLAGS, "function" }, { "expr", NULL, 0, AV_OPT_TYPE_CONST, {.i64 = METADATAF_EXPR }, 0, 3, FLAGS, "function" }, { "ends_with", NULL, 0, AV_OPT_TYPE_CONST, {.i64 = METADATAF_ENDS_WITH }, 0, 0, FLAGS, "function" }, { "expr", "set expression for expr function", OFFSET(expr_str), AV_OPT_TYPE_STRING, {.str = NULL }, 0, 0, FLAGS }, { "file", "set file where to print metadata information", OFFSET(file_str), AV_OPT_TYPE_STRING, {.str=NULL}, 0, 0, FLAGS }, { "direct", "reduce buffering when printing to user-set file or pipe", OFFSET(direct), AV_OPT_TYPE_BOOL, {.i64 = 0}, 0, 1, FLAGS }, { NULL } }</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>int</name></type> <name>same_str</name><parameter_list>(<parameter><decl><type><name>MetadataContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value2</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>value1</name></expr></argument>, <argument><expr><name>value2</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>starts_with</name><parameter_list>(<parameter><decl><type><name>MetadataContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value2</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><operator>!</operator><call><name>strncmp</name><argument_list>(<argument><expr><name>value1</name></expr></argument>, <argument><expr><name>value2</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>value2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ends_with</name><parameter_list>(<parameter><decl><type><name>MetadataContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value2</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>len1</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>value1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>len2</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>value2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><operator>!</operator><call><name>strncmp</name><argument_list>(<argument><expr><name>value1</name> <operator>+</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name>len1</name> <operator>-</operator> <name>len2</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>value2</name></expr></argument>, <argument><expr><name>len2</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>equal</name><parameter_list>(<parameter><decl><type><name>MetadataContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value2</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>f1</name></decl>, <decl><type ref="prev"/><name>f2</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>sscanf</name><argument_list>(<argument><expr><name>value1</name></expr></argument>, <argument><expr><literal type="string">"%f"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>f1</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>sscanf</name><argument_list>(<argument><expr><name>value2</name></expr></argument>, <argument><expr><literal type="string">"%f"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>f2</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>fabsf</name><argument_list>(<argument><expr><name>f1</name> <operator>-</operator> <name>f2</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>FLT_EPSILON</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>less</name><parameter_list>(<parameter><decl><type><name>MetadataContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value2</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>f1</name></decl>, <decl><type ref="prev"/><name>f2</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>sscanf</name><argument_list>(<argument><expr><name>value1</name></expr></argument>, <argument><expr><literal type="string">"%f"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>f1</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>sscanf</name><argument_list>(<argument><expr><name>value2</name></expr></argument>, <argument><expr><literal type="string">"%f"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>f2</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><name>f1</name> <operator>-</operator> <name>f2</name><operator>)</operator> <operator>&lt;</operator> <name>FLT_EPSILON</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>greater</name><parameter_list>(<parameter><decl><type><name>MetadataContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value2</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>f1</name></decl>, <decl><type ref="prev"/><name>f2</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>sscanf</name><argument_list>(<argument><expr><name>value1</name></expr></argument>, <argument><expr><literal type="string">"%f"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>f1</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>sscanf</name><argument_list>(<argument><expr><name>value2</name></expr></argument>, <argument><expr><literal type="string">"%f"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>f2</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><name>f2</name> <operator>-</operator> <name>f1</name><operator>)</operator> <operator>&lt;</operator> <name>FLT_EPSILON</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>parse_expr</name><parameter_list>(<parameter><decl><type><name>MetadataContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value2</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>double</name></type> <name>f1</name></decl>, <decl><type ref="prev"/><name>f2</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>sscanf</name><argument_list>(<argument><expr><name>value1</name></expr></argument>, <argument><expr><literal type="string">"%lf"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>f1</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>sscanf</name><argument_list>(<argument><expr><name>value2</name></expr></argument>, <argument><expr><literal type="string">"%lf"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>f2</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>var_values</name><index>[<expr><name>VAR_VALUE1</name></expr>]</index></name> <operator>=</operator> <name>f1</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>var_values</name><index>[<expr><name>VAR_VALUE2</name></expr>]</index></name> <operator>=</operator> <name>f2</name></expr>;</expr_stmt>

<return>return <expr><call><name>av_expr_eval</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>expr</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>var_values</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>print_log</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>msg</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>va_list</name></type> <name>argument_list</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>argument_list</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>msg</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_vlog</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>, <argument><expr><name>argument_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>argument_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>print_file</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>msg</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>MetadataContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>va_list</name></type> <name>argument_list</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>argument_list</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>msg</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vsnprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>msg</name></expr></argument>, <argument><expr><name>argument_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_write</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avio_context</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><call><name>av_strnlen</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>argument_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>init</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>MetadataContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>key</name></name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>mode</name></name> <operator>!=</operator> <name>METADATA_PRINT</name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>mode</name></name> <operator>!=</operator> <name>METADATA_DELETE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Metadata key must be set\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>mode</name></name> <operator>==</operator> <name>METADATA_MODIFY</name> <operator>||</operator>

<name><name>s</name><operator>-&gt;</operator><name>mode</name></name> <operator>==</operator> <name>METADATA_ADD</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>value</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Missing metadata value\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>function</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>METADATAF_SAME_STR</name></expr>:</case>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>compare</name></name> <operator>=</operator> <name>same_str</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>METADATAF_STARTS_WITH</name></expr>:</case>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>compare</name></name> <operator>=</operator> <name>starts_with</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>METADATAF_ENDS_WITH</name></expr>:</case>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>compare</name></name> <operator>=</operator> <name>ends_with</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>METADATAF_LESS</name></expr>:</case>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>compare</name></name> <operator>=</operator> <name>less</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>METADATAF_EQUAL</name></expr>:</case>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>compare</name></name> <operator>=</operator> <name>equal</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>METADATAF_GREATER</name></expr>:</case>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>compare</name></name> <operator>=</operator> <name>greater</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>METADATAF_EXPR</name></expr>:</case>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>compare</name></name> <operator>=</operator> <name>parse_expr</name></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></switch><empty_stmt>;</empty_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>function</name></name> <operator>==</operator> <name>METADATAF_EXPR</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>expr_str</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"expr option not set\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>av_expr_parse</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>expr</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>expr_str</name></name></expr></argument>,

<argument><expr><name>var_names</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Error while parsing expression '%s'\n"</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>expr_str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>mode</name></name> <operator>==</operator> <name>METADATA_PRINT</name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>file_str</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>print</name></name> <operator>=</operator> <name>print_file</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>print</name></name> <operator>=</operator> <name>print_log</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>avio_context</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>file_str</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><literal type="string">"-"</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>file_str</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>avio_open</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>avio_context</name></name></expr></argument>, <argument><expr><literal type="string">"pipe:1"</literal></expr></argument>, <argument><expr><name>AVIO_FLAG_WRITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>avio_open</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>avio_context</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>file_str</name></name></expr></argument>, <argument><expr><name>AVIO_FLAG_WRITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_strerror</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Could not open %s: %s\n"</literal></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>file_str</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>direct</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>avio_context</name><operator>-&gt;</operator><name>direct</name></name> <operator>=</operator> <name>AVIO_FLAG_DIRECT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>void</name></type> <name>uninit</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>MetadataContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_expr_free</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>expr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>expr</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>avio_context</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>avio_closep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>avio_context</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>filter_frame</name><parameter_list>(<parameter><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>inlink</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>frame</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>inlink</name><operator>-&gt;</operator><name>dst</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>outlink</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>outputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>MetadataContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVDictionary</name> <modifier>*</modifier><modifier>*</modifier></type><name>metadata</name> <init>= <expr><operator>&amp;</operator><name><name>frame</name><operator>-&gt;</operator><name>metadata</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVDictionaryEntry</name> <modifier>*</modifier></type><name>e</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>metadata</name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>mode</name></name> <operator>!=</operator> <name>METADATA_ADD</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>ff_filter_frame</name><argument_list>(<argument><expr><name>outlink</name></expr></argument>, <argument><expr><name>frame</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>e</name> <operator>=</operator> <call><name>av_dict_get</name><argument_list>(<argument><expr><operator>*</operator><name>metadata</name></expr></argument>, <argument><expr><ternary><condition><expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>key</name></name></expr> ?</condition><then> <expr><literal type="string">""</literal></expr> </then><else>: <expr><name><name>s</name><operator>-&gt;</operator><name>key</name></name></expr></else></ternary></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,

<argument><expr><ternary><condition><expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>key</name></name></expr> ?</condition><then> <expr><name>AV_DICT_IGNORE_SUFFIX</name></expr></then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>mode</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>METADATA_SELECT</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>value</name></name> <operator>&amp;&amp;</operator> <name>e</name> <operator>&amp;&amp;</operator> <name><name>e</name><operator>-&gt;</operator><name>value</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>ff_filter_frame</name><argument_list>(<argument><expr><name>outlink</name></expr></argument>, <argument><expr><name>frame</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>value</name></name> <operator>&amp;&amp;</operator> <name>e</name> <operator>&amp;&amp;</operator> <name><name>e</name><operator>-&gt;</operator><name>value</name></name> <operator>&amp;&amp;</operator>

<call><name><name>s</name><operator>-&gt;</operator><name>compare</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>e</name><operator>-&gt;</operator><name>value</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>ff_filter_frame</name><argument_list>(<argument><expr><name>outlink</name></expr></argument>, <argument><expr><name>frame</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><name>METADATA_ADD</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name>e</name> <operator>&amp;&amp;</operator> <name><name>e</name><operator>-&gt;</operator><name>value</name></name></expr>)</condition> <block>{<block_content>

<empty_stmt>;</empty_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>av_dict_set</name><argument_list>(<argument><expr><name>metadata</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>value</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><call><name>ff_filter_frame</name><argument_list>(<argument><expr><name>outlink</name></expr></argument>, <argument><expr><name>frame</name></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><name>METADATA_MODIFY</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name>e</name> <operator>&amp;&amp;</operator> <name><name>e</name><operator>-&gt;</operator><name>value</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_dict_set</name><argument_list>(<argument><expr><name>metadata</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>value</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>ff_filter_frame</name><argument_list>(<argument><expr><name>outlink</name></expr></argument>, <argument><expr><name>frame</name></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><name>METADATA_PRINT</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>key</name></name> <operator>&amp;&amp;</operator> <name>e</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>print</name></name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="string">"frame:%-4"</literal><name>PRId64</name><literal type="string">" pts:%-7s pts_time:%s\n"</literal></expr></argument>,

<argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>frame_count_out</name></name></expr></argument>, <argument><expr><call><name>av_ts2str</name><argument_list>(<argument><expr><name><name>frame</name><operator>-&gt;</operator><name>pts</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>av_ts2timestr</name><argument_list>(<argument><expr><name><name>frame</name><operator>-&gt;</operator><name>pts</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>inlink</name><operator>-&gt;</operator><name>time_base</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>print</name></name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="string">"%s=%s\n"</literal></expr></argument>, <argument><expr><name><name>e</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><name><name>e</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>(</operator><name>e</name> <operator>=</operator> <call><name>av_dict_get</name><argument_list>(<argument><expr><operator>*</operator><name>metadata</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><name>e</name></expr></argument>, <argument><expr><name>AV_DICT_IGNORE_SUFFIX</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>print</name></name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="string">"%s=%s\n"</literal></expr></argument>, <argument><expr><name><name>e</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><name><name>e</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>e</name> <operator>&amp;&amp;</operator> <name><name>e</name><operator>-&gt;</operator><name>value</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>value</name></name> <operator>||</operator> <operator>(</operator><name><name>e</name><operator>-&gt;</operator><name>value</name></name> <operator>&amp;&amp;</operator> <call><name><name>s</name><operator>-&gt;</operator><name>compare</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>e</name><operator>-&gt;</operator><name>value</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>print</name></name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="string">"frame:%-4"</literal><name>PRId64</name><literal type="string">" pts:%-7s pts_time:%s\n"</literal></expr></argument>,

<argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>frame_count_out</name></name></expr></argument>, <argument><expr><call><name>av_ts2str</name><argument_list>(<argument><expr><name><name>frame</name><operator>-&gt;</operator><name>pts</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>av_ts2timestr</name><argument_list>(<argument><expr><name><name>frame</name><operator>-&gt;</operator><name>pts</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>inlink</name><operator>-&gt;</operator><name>time_base</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>print</name></name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="string">"%s=%s\n"</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><name><name>e</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>ff_filter_frame</name><argument_list>(<argument><expr><name>outlink</name></expr></argument>, <argument><expr><name>frame</name></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><name>METADATA_DELETE</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>key</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_dict_free</name><argument_list>(<argument><expr><name>metadata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>e</name> <operator>&amp;&amp;</operator> <name><name>e</name><operator>-&gt;</operator><name>value</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>value</name></name> <operator>||</operator> <call><name><name>s</name><operator>-&gt;</operator><name>compare</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>e</name><operator>-&gt;</operator><name>value</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_dict_set</name><argument_list>(<argument><expr><name>metadata</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>ff_filter_frame</name><argument_list>(<argument><expr><name>outlink</name></expr></argument>, <argument><expr><name>frame</name></expr></argument>)</argument_list></call></expr>;</return>

<default>default:</default>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></switch><empty_stmt>;</empty_stmt>

<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_AMETADATA_FILTER</name></expr></cpp:if>

<expr_stmt><expr><call><name>DEFINE_OPTIONS</name><argument_list>(<argument><expr><name>ametadata</name></expr></argument>, <argument><expr><name>AV_OPT_FLAG_AUDIO_PARAM</name><operator>|</operator><name>AV_OPT_FLAG_FILTERING_PARAM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AVFILTER_DEFINE_CLASS</name><argument_list>(<argument><expr><name>ametadata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVFilterPad</name></type> <name><name>ainputs</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"default"</literal></expr>,

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_AUDIO</name></expr>,

<expr><operator>.</operator><name>filter_frame</name> <operator>=</operator> <name>filter_frame</name></expr>,

}</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVFilterPad</name></type> <name><name>aoutputs</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"default"</literal></expr>,

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_AUDIO</name></expr>,

}</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFilter</name></type> <name>ff_af_ametadata</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"ametadata"</literal></expr>,

<expr><operator>.</operator><name>description</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"Manipulate audio frame metadata."</literal></expr></argument>)</argument_list></call></expr>,

<expr><operator>.</operator><name>priv_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>MetadataContext</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><operator>.</operator><name>priv_class</name> <operator>=</operator> <operator>&amp;</operator><name>ametadata_class</name></expr>,

<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>init</name></expr>,

<expr><operator>.</operator><name>uninit</name> <operator>=</operator> <name>uninit</name></expr>,

<expr><operator>.</operator><name>inputs</name> <operator>=</operator> <name>ainputs</name></expr>,

<expr><operator>.</operator><name>outputs</name> <operator>=</operator> <name>aoutputs</name></expr>,

<expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>AVFILTER_FLAG_SUPPORT_TIMELINE_GENERIC</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_METADATA_FILTER</name></expr></cpp:if>

<expr_stmt><expr><call><name>DEFINE_OPTIONS</name><argument_list>(<argument><expr><name>metadata</name></expr></argument>, <argument><expr><name>AV_OPT_FLAG_VIDEO_PARAM</name><operator>|</operator><name>AV_OPT_FLAG_FILTERING_PARAM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AVFILTER_DEFINE_CLASS</name><argument_list>(<argument><expr><name>metadata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVFilterPad</name></type> <name><name>inputs</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"default"</literal></expr>,

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,

<expr><operator>.</operator><name>filter_frame</name> <operator>=</operator> <name>filter_frame</name></expr>,

}</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVFilterPad</name></type> <name><name>outputs</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"default"</literal></expr>,

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,

}</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFilter</name></type> <name>ff_vf_metadata</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"metadata"</literal></expr>,

<expr><operator>.</operator><name>description</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"Manipulate video frame metadata."</literal></expr></argument>)</argument_list></call></expr>,

<expr><operator>.</operator><name>priv_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>MetadataContext</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><operator>.</operator><name>priv_class</name> <operator>=</operator> <operator>&amp;</operator><name>metadata_class</name></expr>,

<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>init</name></expr>,

<expr><operator>.</operator><name>uninit</name> <operator>=</operator> <name>uninit</name></expr>,

<expr><operator>.</operator><name>inputs</name> <operator>=</operator> <name>inputs</name></expr>,

<expr><operator>.</operator><name>outputs</name> <operator>=</operator> <name>outputs</name></expr>,

<expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>AVFILTER_FLAG_SUPPORT_TIMELINE_GENERIC</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

</unit>
