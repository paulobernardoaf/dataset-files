<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavfilter\signature_lookup.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"signature.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HOUGH_MAX_OFFSET</name></cpp:macro> <cpp:value>90</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_FRAMERATE</name></cpp:macro> <cpp:value>60</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIR_PREV</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIR_NEXT</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIR_PREV_END</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIR_NEXT_END</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STATUS_NULL</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STATUS_END_REACHED</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STATUS_BEGIN_REACHED</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type> <name>fill_l1distlut</name><parameter_list>(<parameter><decl><type><name>uint8_t</name></type> <name><name>lut</name><index>[]</index></name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>tmp_i</name></decl>, <decl><type ref="prev"/><name>tmp_j</name></decl>,<decl><type ref="prev"/><name>count</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>dist</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>count</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">242</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">243</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr><operator>,</operator> <expr><name>count</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>dist</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp_i</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt> <expr_stmt><expr><name>tmp_j</name> <operator>=</operator> <name>j</name></expr>;</expr_stmt>

<do>do <block>{<block_content>

<expr_stmt><expr><name>dist</name> <operator>+=</operator> <call><name>FFABS</name><argument_list>(<argument><expr><operator>(</operator><name>tmp_j</name> <operator>%</operator> <literal type="number">3</literal><operator>)</operator> <operator>-</operator> <operator>(</operator><name>tmp_i</name> <operator>%</operator> <literal type="number">3</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp_j</name> <operator>/=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp_i</name> <operator>/=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

</block_content>}</block> while <condition>(<expr><name>tmp_i</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>tmp_j</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>;</do>

<expr_stmt><expr><name><name>lut</name><index>[<expr><name>count</name></expr>]</index></name> <operator>=</operator> <name>dist</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>unsigned</name> <name>int</name></type> <name>intersection_word</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>first</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>second</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>val</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">28</literal></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">4</literal></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>val</name> <operator>+=</operator> <call><name>av_popcount</name><argument_list>( <argument><expr><operator>(</operator><name><name>first</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;</operator> <name><name>second</name><index>[<expr><name>i</name></expr>]</index></name> <operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">24</literal> <operator>|</operator>

<operator>(</operator><name><name>first</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <name><name>second</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">16</literal> <operator>|</operator>

<operator>(</operator><name><name>first</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name> <operator>&amp;</operator> <name><name>second</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">8</literal> <operator>|</operator>

<operator>(</operator><name><name>first</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">3</literal></expr>]</index></name> <operator>&amp;</operator> <name><name>second</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">3</literal></expr>]</index></name><operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>val</name> <operator>+=</operator> <call><name>av_popcount</name><argument_list>( <argument><expr><operator>(</operator><name><name>first</name><index>[<expr><literal type="number">28</literal></expr>]</index></name> <operator>&amp;</operator> <name><name>second</name><index>[<expr><literal type="number">28</literal></expr>]</index></name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">16</literal> <operator>|</operator>

<operator>(</operator><name><name>first</name><index>[<expr><literal type="number">29</literal></expr>]</index></name> <operator>&amp;</operator> <name><name>second</name><index>[<expr><literal type="number">29</literal></expr>]</index></name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">8</literal> <operator>|</operator>

<operator>(</operator><name><name>first</name><index>[<expr><literal type="number">30</literal></expr>]</index></name> <operator>&amp;</operator> <name><name>second</name><index>[<expr><literal type="number">30</literal></expr>]</index></name><operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>val</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>unsigned</name> <name>int</name></type> <name>union_word</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>first</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>second</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>val</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">28</literal></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">4</literal></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>val</name> <operator>+=</operator> <call><name>av_popcount</name><argument_list>( <argument><expr><operator>(</operator><name><name>first</name><index>[<expr><name>i</name></expr>]</index></name> <operator>|</operator> <name><name>second</name><index>[<expr><name>i</name></expr>]</index></name> <operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">24</literal> <operator>|</operator>

<operator>(</operator><name><name>first</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>|</operator> <name><name>second</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">16</literal> <operator>|</operator>

<operator>(</operator><name><name>first</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name> <operator>|</operator> <name><name>second</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">8</literal> <operator>|</operator>

<operator>(</operator><name><name>first</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">3</literal></expr>]</index></name> <operator>|</operator> <name><name>second</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">3</literal></expr>]</index></name><operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>val</name> <operator>+=</operator> <call><name>av_popcount</name><argument_list>( <argument><expr><operator>(</operator><name><name>first</name><index>[<expr><literal type="number">28</literal></expr>]</index></name> <operator>|</operator> <name><name>second</name><index>[<expr><literal type="number">28</literal></expr>]</index></name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">16</literal> <operator>|</operator>

<operator>(</operator><name><name>first</name><index>[<expr><literal type="number">29</literal></expr>]</index></name> <operator>|</operator> <name><name>second</name><index>[<expr><literal type="number">29</literal></expr>]</index></name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">8</literal> <operator>|</operator>

<operator>(</operator><name><name>first</name><index>[<expr><literal type="number">30</literal></expr>]</index></name> <operator>|</operator> <name><name>second</name><index>[<expr><literal type="number">30</literal></expr>]</index></name><operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>val</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>unsigned</name> <name>int</name></type> <name>get_l1dist</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>SignatureContext</name> <modifier>*</modifier></type><name>sc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>first</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>second</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>dist</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>f</name></decl>, <decl><type ref="prev"/><name>s</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>SIGELEM_SIZE</name><operator>/</operator><literal type="number">5</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>first</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name><name>second</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>f</name> <operator>=</operator> <name><name>first</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <name><name>second</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>f</name> <operator>&gt;</operator> <name>s</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>dist</name> <operator>+=</operator> <name><name>sc</name><operator>-&gt;</operator><name>l1distlut</name><index>[<expr><literal type="number">243</literal><operator>*</operator><literal type="number">242</literal><operator>/</operator><literal type="number">2</literal> <operator>-</operator> <operator>(</operator><literal type="number">243</literal><operator>-</operator><name>s</name><operator>)</operator><operator>*</operator><operator>(</operator><literal type="number">242</literal><operator>-</operator><name>s</name><operator>)</operator><operator>/</operator><literal type="number">2</literal> <operator>+</operator> <name>f</name> <operator>-</operator> <name>s</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>dist</name> <operator>+=</operator> <name><name>sc</name><operator>-&gt;</operator><name>l1distlut</name><index>[<expr><literal type="number">243</literal><operator>*</operator><literal type="number">242</literal><operator>/</operator><literal type="number">2</literal> <operator>-</operator> <operator>(</operator><literal type="number">243</literal><operator>-</operator><name>f</name><operator>)</operator><operator>*</operator><operator>(</operator><literal type="number">242</literal><operator>-</operator><name>f</name><operator>)</operator><operator>/</operator><literal type="number">2</literal> <operator>+</operator> <name>s</name> <operator>-</operator> <name>f</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>dist</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>get_jaccarddist</name><parameter_list>(<parameter><decl><type><name>SignatureContext</name> <modifier>*</modifier></type><name>sc</name></decl></parameter>, <parameter><decl><type><name>CoarseSignature</name> <modifier>*</modifier></type><name>first</name></decl></parameter>, <parameter><decl><type><name>CoarseSignature</name> <modifier>*</modifier></type><name>second</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>jaccarddist</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>composdist</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>cwthcount</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">5</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>jaccarddist</name> <operator>=</operator> <call><name>intersection_word</name><argument_list>(<argument><expr><name><name>first</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>second</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>jaccarddist</name> <operator>/=</operator> <call><name>union_word</name><argument_list>(<argument><expr><name><name>first</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>second</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>jaccarddist</name> <operator>&gt;=</operator> <name><name>sc</name><operator>-&gt;</operator><name>thworddist</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>++</operator><name>cwthcount</name> <operator>&gt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>composdist</name> <operator>+=</operator> <name>jaccarddist</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>composdist</name> <operator>&gt;</operator> <name><name>sc</name><operator>-&gt;</operator><name>thcomposdist</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>find_next_coarsecandidate</name><parameter_list>(<parameter><decl><type><name>SignatureContext</name> <modifier>*</modifier></type><name>sc</name></decl></parameter>, <parameter><decl><type><name>CoarseSignature</name> <modifier>*</modifier></type><name>secondstart</name></decl></parameter>, <parameter><decl><type><name>CoarseSignature</name> <modifier>*</modifier><modifier>*</modifier></type><name>first</name></decl></parameter>, <parameter><decl><type><name>CoarseSignature</name> <modifier>*</modifier><modifier>*</modifier></type><name>second</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>start</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>start</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><operator>(</operator><operator>*</operator><name>second</name><operator>)</operator><operator>-&gt;</operator><name>next</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>second</name> <operator>=</operator> <name><operator>(</operator><operator>*</operator><name>second</name><operator>)</operator><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><operator>(</operator><operator>*</operator><name>first</name><operator>)</operator><operator>-&gt;</operator><name>next</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>second</name> <operator>=</operator> <name>secondstart</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>first</name> <operator>=</operator> <name><operator>(</operator><operator>*</operator><name>first</name><operator>)</operator><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>get_jaccarddist</name><argument_list>(<argument><expr><name>sc</name></expr></argument>, <argument><expr><operator>*</operator><name>first</name></expr></argument>, <argument><expr><operator>*</operator><name>second</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><operator>(</operator><operator>*</operator><name>second</name><operator>)</operator><operator>-&gt;</operator><name>next</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>second</name> <operator>=</operator> <name><operator>(</operator><operator>*</operator><name>second</name><operator>)</operator><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><operator>(</operator><operator>*</operator><name>first</name><operator>)</operator><operator>-&gt;</operator><name>next</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>second</name> <operator>=</operator> <name>secondstart</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>first</name> <operator>=</operator> <name><operator>(</operator><operator>*</operator><name>first</name><operator>)</operator><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></while>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>MatchingInfo</name><modifier>*</modifier></type> <name>get_matching_parameters</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>SignatureContext</name> <modifier>*</modifier></type><name>sc</name></decl></parameter>, <parameter><decl><type><name>FineSignature</name> <modifier>*</modifier></type><name>first</name></decl></parameter>, <parameter><decl><type><name>FineSignature</name> <modifier>*</modifier></type><name>second</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>FineSignature</name> <modifier>*</modifier></type><name>f</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>k</name></decl>, <decl><type ref="prev"/><name>l</name></decl>, <decl><type ref="prev"/><name>hmax</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>score</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>framerate</name></decl>, <decl><type ref="prev"/><name>offset</name></decl>, <decl><type ref="prev"/><name>l1dist</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>m</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>MatchingInfo</name> <modifier>*</modifier></type><name>cands</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>c</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<struct>struct <block>{

<decl_stmt><decl><type><name>uint8_t</name></type> <name>size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>dist</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>FineSignature</name> <modifier>*</modifier></type><name>a</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>b_pos</name><index>[<expr><name>COARSE_SIZE</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>FineSignature</name> <modifier>*</modifier></type><name><name>b</name><index>[<expr><name>COARSE_SIZE</name></expr>]</index></name></decl>;</decl_stmt>

}</block> <decl><name><name>pairs</name><index>[<expr><name>COARSE_SIZE</name></expr>]</index></name></decl>;</struct>

<typedef>typedef <type><struct>struct <name>hspace_elem</name> <block>{

<decl_stmt><decl><type><name>int</name></type> <name>dist</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>score</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>FineSignature</name> <modifier>*</modifier></type><name>a</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>FineSignature</name> <modifier>*</modifier></type><name>b</name></decl>;</decl_stmt>

}</block></struct></type> <name>hspace_elem</name>;</typedef>

<decl_stmt><decl><type><name>hspace_elem</name><modifier>*</modifier><modifier>*</modifier></type> <name>hspace</name> <init>= <expr><call><name>av_malloc_array</name><argument_list>(<argument><expr><name>MAX_FRAMERATE</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>hspace_elem</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_FRAMERATE</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>hspace</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>av_malloc_array</name><argument_list>(<argument><expr><literal type="number">2</literal> <operator>*</operator> <name>HOUGH_MAX_OFFSET</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>hspace_elem</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>HOUGH_MAX_OFFSET</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>hspace</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>score</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>hspace</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>dist</name> <operator>=</operator> <literal type="number">99999</literal></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>f</name> <operator>=</operator> <name>first</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>COARSE_SIZE</name> <operator>&amp;&amp;</operator> <name><name>f</name><operator>-&gt;</operator><name>next</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>f</name> <operator>=</operator> <name><name>f</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>pairs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pairs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>dist</name> <operator>=</operator> <literal type="number">99999</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pairs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>a</name> <operator>=</operator> <name>f</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>s</name> <operator>=</operator> <name>second</name></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>COARSE_SIZE</name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>next</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr><operator>,</operator> <expr><name>s</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>l1dist</name> <operator>=</operator> <call><name>get_l1dist</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>sc</name></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>framesig</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>framesig</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>l1dist</name> <operator>&lt;</operator> <name><name>sc</name><operator>-&gt;</operator><name>thl1</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>l1dist</name> <operator>&lt;</operator> <name><name>pairs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>dist</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>pairs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>size</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pairs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>dist</name> <operator>=</operator> <name>l1dist</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pairs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>b_pos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>j</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pairs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>b</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>l1dist</name> <operator>==</operator> <name><name>pairs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>dist</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>pairs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>b</name><index>[<expr><name><name>pairs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>size</name></expr>]</index></name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pairs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>b_pos</name><index>[<expr><name><name>pairs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>size</name></expr>]</index></name> <operator>=</operator> <name>j</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pairs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>size</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>next</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>COARSE_SIZE</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>pairs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pairs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>dist</name> <operator>=</operator> <literal type="number">99999</literal></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>COARSE_SIZE</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>pairs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>size</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>COARSE_SIZE</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>l</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>l</name> <operator>&lt;</operator> <name><name>pairs</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>size</name></expr>;</condition> <incr><expr><name>l</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>pairs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>b</name><index>[<expr><name>j</name></expr>]</index></name> <operator>!=</operator> <name><name>pairs</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name><name>b</name><index>[<expr><name>l</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>m</name> <operator>=</operator> <operator>(</operator><name><name>pairs</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name><name>b_pos</name><index>[<expr><name>l</name></expr>]</index></name><operator>-</operator><name><name>pairs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>b_pos</name><index>[<expr><name>j</name></expr>]</index></name><operator>)</operator> <operator>/</operator> <operator>(</operator><name>k</name><operator>-</operator><name>i</name><operator>)</operator></expr>;</expr_stmt> 

<expr_stmt><expr><name>framerate</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <name>m</name><operator>*</operator><literal type="number">30</literal> <operator>+</operator> <literal type="number">0.5</literal></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name>framerate</name><operator>&gt;</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>framerate</name> <operator>&lt;=</operator> <name>MAX_FRAMERATE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>offset</name> <operator>=</operator> <name><name>pairs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>b_pos</name><index>[<expr><name>j</name></expr>]</index></name> <operator>-</operator> <operator>(</operator><operator>(</operator><name>int</name><operator>)</operator> <name>m</name><operator>*</operator><name>i</name> <operator>+</operator> <literal type="number">0.5</literal><operator>)</operator></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name>offset</name> <operator>&gt;</operator> <operator>-</operator><name>HOUGH_MAX_OFFSET</name> <operator>&amp;&amp;</operator> <name>offset</name> <operator>&lt;</operator> <name>HOUGH_MAX_OFFSET</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>pairs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>dist</name> <operator>&lt;</operator> <name><name>pairs</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>dist</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>pairs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>dist</name> <operator>&lt;</operator> <name><name>hspace</name><index>[<expr><name>framerate</name><operator>-</operator><literal type="number">1</literal></expr>]</index><index>[<expr><name>offset</name><operator>+</operator><name>HOUGH_MAX_OFFSET</name></expr>]</index></name><operator>.</operator><name>dist</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>hspace</name><index>[<expr><name>framerate</name><operator>-</operator><literal type="number">1</literal></expr>]</index><index>[<expr><name>offset</name><operator>+</operator><name>HOUGH_MAX_OFFSET</name></expr>]</index></name><operator>.</operator><name>dist</name> <operator>=</operator> <name><name>pairs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>dist</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>hspace</name><index>[<expr><name>framerate</name><operator>-</operator><literal type="number">1</literal></expr>]</index><index>[<expr><name>offset</name><operator>+</operator><name>HOUGH_MAX_OFFSET</name></expr>]</index></name><operator>.</operator><name>a</name> <operator>=</operator> <name><name>pairs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>a</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>hspace</name><index>[<expr><name>framerate</name><operator>-</operator><literal type="number">1</literal></expr>]</index><index>[<expr><name>offset</name><operator>+</operator><name>HOUGH_MAX_OFFSET</name></expr>]</index></name><operator>.</operator><name>b</name> <operator>=</operator> <name><name>pairs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>b</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>pairs</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>dist</name> <operator>&lt;</operator> <name><name>hspace</name><index>[<expr><name>framerate</name><operator>-</operator><literal type="number">1</literal></expr>]</index><index>[<expr><name>offset</name><operator>+</operator><name>HOUGH_MAX_OFFSET</name></expr>]</index></name><operator>.</operator><name>dist</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>hspace</name><index>[<expr><name>framerate</name><operator>-</operator><literal type="number">1</literal></expr>]</index><index>[<expr><name>offset</name><operator>+</operator><name>HOUGH_MAX_OFFSET</name></expr>]</index></name><operator>.</operator><name>dist</name> <operator>=</operator> <name><name>pairs</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>dist</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>hspace</name><index>[<expr><name>framerate</name><operator>-</operator><literal type="number">1</literal></expr>]</index><index>[<expr><name>offset</name><operator>+</operator><name>HOUGH_MAX_OFFSET</name></expr>]</index></name><operator>.</operator><name>a</name> <operator>=</operator> <name><name>pairs</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>a</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>hspace</name><index>[<expr><name>framerate</name><operator>-</operator><literal type="number">1</literal></expr>]</index><index>[<expr><name>offset</name><operator>+</operator><name>HOUGH_MAX_OFFSET</name></expr>]</index></name><operator>.</operator><name>b</name> <operator>=</operator> <name><name>pairs</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name><name>b</name><index>[<expr><name>l</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>score</name> <operator>=</operator> <name><name>hspace</name><index>[<expr><name>framerate</name><operator>-</operator><literal type="number">1</literal></expr>]</index><index>[<expr><name>offset</name><operator>+</operator><name>HOUGH_MAX_OFFSET</name></expr>]</index></name><operator>.</operator><name>score</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>score</name> <operator>&gt;</operator> <name>hmax</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>hmax</name> <operator>=</operator> <name>score</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>hspace</name><index>[<expr><name>framerate</name><operator>-</operator><literal type="number">1</literal></expr>]</index><index>[<expr><name>offset</name><operator>+</operator><name>HOUGH_MAX_OFFSET</name></expr>]</index></name><operator>.</operator><name>score</name> <operator>=</operator> <name>score</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>hmax</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>hmax</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><literal type="number">0.7</literal><operator>*</operator><name>hmax</name><operator>)</operator></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_FRAMERATE</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>HOUGH_MAX_OFFSET</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>hmax</name> <operator>&lt;</operator> <name><name>hspace</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>score</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>av_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>MatchingInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>c</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_FATAL</name></expr></argument>, <argument><expr><literal type="string">"Could not allocate memory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>cands</name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <call><name>av_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>MatchingInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>c</name><operator>-&gt;</operator><name>next</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_FATAL</name></expr></argument>, <argument><expr><literal type="string">"Could not allocate memory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>framerateratio</name></name> <operator>=</operator> <operator>(</operator><name>i</name><operator>+</operator><literal type="number">1.0</literal><operator>)</operator> <operator>/</operator> <literal type="number">30</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>score</name></name> <operator>=</operator> <name><name>hspace</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>score</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>offset</name></name> <operator>=</operator> <name>j</name><operator>-</operator><literal type="number">90</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>first</name></name> <operator>=</operator> <name><name>hspace</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>a</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>second</name></name> <operator>=</operator> <name><name>hspace</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>b</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>meandist</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>matchframes</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>whole</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_FRAMERATE</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>hspace</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hspace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>cands</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>iterate_frame</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>frr</name></decl></parameter>, <parameter><decl><type><name>FineSignature</name> <modifier>*</modifier><modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>FineSignature</name> <modifier>*</modifier><modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fcount</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>bcount</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dir</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>step</name></decl>;</decl_stmt>

<expr_stmt><expr><name>step</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>int</name><operator>)</operator> <literal type="number">0.5</literal> <operator>+</operator> <name>fcount</name> <operator>*</operator> <name>frr</name><operator>)</operator> 

<operator>-</operator><operator>(</operator><operator>(</operator><name>int</name><operator>)</operator> <literal type="number">0.5</literal> <operator>+</operator> <operator>(</operator><name>fcount</name><operator>-</operator><literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>frr</name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>dir</name> <operator>==</operator> <name>DIR_NEXT</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>frr</name> <operator>&gt;=</operator> <literal type="number">1.0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><operator>(</operator><operator>*</operator><name>a</name><operator>)</operator><operator>-&gt;</operator><name>next</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>a</name> <operator>=</operator> <name><operator>(</operator><operator>*</operator><name>a</name><operator>)</operator><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<return>return <expr><name>DIR_NEXT_END</name></expr>;</return>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>step</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><operator>(</operator><operator>*</operator><name>b</name><operator>)</operator><operator>-&gt;</operator><name>next</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>b</name> <operator>=</operator> <name><operator>(</operator><operator>*</operator><name>b</name><operator>)</operator><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>bcount</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<return>return <expr><name>DIR_NEXT_END</name></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><operator>(</operator><operator>*</operator><name>b</name><operator>)</operator><operator>-&gt;</operator><name>next</name></name> <operator>&amp;&amp;</operator> <name><operator>(</operator><operator>*</operator><name>b</name><operator>)</operator><operator>-&gt;</operator><name><name>next</name><operator>-&gt;</operator><name>next</name></name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>b</name> <operator>=</operator> <name><operator>(</operator><operator>*</operator><name>b</name><operator>)</operator><operator>-&gt;</operator><name><name>next</name><operator>-&gt;</operator><name>next</name></name></name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>bcount</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<return>return <expr><name>DIR_NEXT_END</name></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><operator>(</operator><operator>*</operator><name>b</name><operator>)</operator><operator>-&gt;</operator><name>next</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>b</name> <operator>=</operator> <name><operator>(</operator><operator>*</operator><name>b</name><operator>)</operator><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>bcount</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<return>return <expr><name>DIR_NEXT_END</name></expr>;</return>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>step</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><operator>(</operator><operator>*</operator><name>a</name><operator>)</operator><operator>-&gt;</operator><name>next</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>a</name> <operator>=</operator> <name><operator>(</operator><operator>*</operator><name>a</name><operator>)</operator><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<return>return <expr><name>DIR_NEXT_END</name></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><operator>(</operator><operator>*</operator><name>a</name><operator>)</operator><operator>-&gt;</operator><name>next</name></name> <operator>&amp;&amp;</operator> <name><operator>(</operator><operator>*</operator><name>a</name><operator>)</operator><operator>-&gt;</operator><name><name>next</name><operator>-&gt;</operator><name>next</name></name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>a</name> <operator>=</operator> <name><operator>(</operator><operator>*</operator><name>a</name><operator>)</operator><operator>-&gt;</operator><name><name>next</name><operator>-&gt;</operator><name>next</name></name></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<return>return <expr><name>DIR_NEXT_END</name></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><name>DIR_NEXT</name></expr>;</return>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>frr</name> <operator>&gt;=</operator> <literal type="number">1.0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><operator>(</operator><operator>*</operator><name>a</name><operator>)</operator><operator>-&gt;</operator><name>prev</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>a</name> <operator>=</operator> <name><operator>(</operator><operator>*</operator><name>a</name><operator>)</operator><operator>-&gt;</operator><name>prev</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<return>return <expr><name>DIR_PREV_END</name></expr>;</return>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>step</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><operator>(</operator><operator>*</operator><name>b</name><operator>)</operator><operator>-&gt;</operator><name>prev</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>b</name> <operator>=</operator> <name><operator>(</operator><operator>*</operator><name>b</name><operator>)</operator><operator>-&gt;</operator><name>prev</name></name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>bcount</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<return>return <expr><name>DIR_PREV_END</name></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><operator>(</operator><operator>*</operator><name>b</name><operator>)</operator><operator>-&gt;</operator><name>prev</name></name> <operator>&amp;&amp;</operator> <name><operator>(</operator><operator>*</operator><name>b</name><operator>)</operator><operator>-&gt;</operator><name><name>prev</name><operator>-&gt;</operator><name>prev</name></name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>b</name> <operator>=</operator> <name><operator>(</operator><operator>*</operator><name>b</name><operator>)</operator><operator>-&gt;</operator><name><name>prev</name><operator>-&gt;</operator><name>prev</name></name></name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>bcount</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<return>return <expr><name>DIR_PREV_END</name></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><operator>(</operator><operator>*</operator><name>b</name><operator>)</operator><operator>-&gt;</operator><name>prev</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>b</name> <operator>=</operator> <name><operator>(</operator><operator>*</operator><name>b</name><operator>)</operator><operator>-&gt;</operator><name>prev</name></name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>bcount</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<return>return <expr><name>DIR_PREV_END</name></expr>;</return>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>step</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><operator>(</operator><operator>*</operator><name>a</name><operator>)</operator><operator>-&gt;</operator><name>prev</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>a</name> <operator>=</operator> <name><operator>(</operator><operator>*</operator><name>a</name><operator>)</operator><operator>-&gt;</operator><name>prev</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<return>return <expr><name>DIR_PREV_END</name></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><operator>(</operator><operator>*</operator><name>a</name><operator>)</operator><operator>-&gt;</operator><name>prev</name></name> <operator>&amp;&amp;</operator> <name><operator>(</operator><operator>*</operator><name>a</name><operator>)</operator><operator>-&gt;</operator><name><name>prev</name><operator>-&gt;</operator><name>prev</name></name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>a</name> <operator>=</operator> <name><operator>(</operator><operator>*</operator><name>a</name><operator>)</operator><operator>-&gt;</operator><name><name>prev</name><operator>-&gt;</operator><name>prev</name></name></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<return>return <expr><name>DIR_PREV_END</name></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><name>DIR_PREV</name></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>MatchingInfo</name></type> <name>evaluate_parameters</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>SignatureContext</name> <modifier>*</modifier></type><name>sc</name></decl></parameter>, <parameter><decl><type><name>MatchingInfo</name> <modifier>*</modifier></type><name>infos</name></decl></parameter>, <parameter><decl><type><name>MatchingInfo</name></type> <name>bestmatch</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>dist</name></decl>, <decl><type ref="prev"/><name>distsum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>bcount</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>dir</name> <init>= <expr><name>DIR_NEXT</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>fcount</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>goodfcount</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>gooda</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>goodb</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>meandist</name></decl>, <decl><type ref="prev"/><name>minmeandist</name> <init>= <expr><name><name>bestmatch</name><operator>.</operator><name>meandist</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>tolerancecount</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>FineSignature</name> <modifier>*</modifier></type><name>a</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>b</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>aprev</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>bprev</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>status</name> <init>= <expr><name>STATUS_NULL</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init>;</init> <condition><expr><name>infos</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>infos</name> <operator>=</operator> <name><name>infos</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>a</name> <operator>=</operator> <name><name>infos</name><operator>-&gt;</operator><name>first</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>b</name> <operator>=</operator> <name><name>infos</name><operator>-&gt;</operator><name>second</name></name></expr>;</expr_stmt>

<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>dist</name> <operator>=</operator> <call><name>get_l1dist</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>sc</name></expr></argument>, <argument><expr><name><name>a</name><operator>-&gt;</operator><name>framesig</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>framesig</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>dist</name> <operator>&gt;</operator> <name><name>sc</name><operator>-&gt;</operator><name>thl1</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>confidence</name></name> <operator>&gt;=</operator> <literal type="number">1</literal> <operator>||</operator> <name><name>b</name><operator>-&gt;</operator><name>confidence</name></name> <operator>&gt;=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>tolerancecount</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>tolerancecount</name> <operator>&gt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>a</name> <operator>=</operator> <name>aprev</name></expr>;</expr_stmt>

<expr_stmt><expr><name>b</name> <operator>=</operator> <name>bprev</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>dir</name> <operator>==</operator> <name>DIR_NEXT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>a</name> <operator>=</operator> <name><name>infos</name><operator>-&gt;</operator><name>first</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>b</name> <operator>=</operator> <name><name>infos</name><operator>-&gt;</operator><name>second</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>dir</name> <operator>=</operator> <name>DIR_PREV</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<break>break;</break>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>distsum</name> <operator>+=</operator> <name>dist</name></expr>;</expr_stmt>

<expr_stmt><expr><name>goodfcount</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>tolerancecount</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>aprev</name> <operator>=</operator> <name>a</name></expr>;</expr_stmt>

<expr_stmt><expr><name>bprev</name> <operator>=</operator> <name>b</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>confidence</name></name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>gooda</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>b</name><operator>-&gt;</operator><name>confidence</name></name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>goodb</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>fcount</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>dir</name> <operator>=</operator> <call><name>iterate_frame</name><argument_list>(<argument><expr><name><name>infos</name><operator>-&gt;</operator><name>framerateratio</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>a</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>b</name></expr></argument>, <argument><expr><name>fcount</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bcount</name></expr></argument>, <argument><expr><name>dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>dir</name> <operator>==</operator> <name>DIR_NEXT_END</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>status</name> <operator>=</operator> <name>STATUS_END_REACHED</name></expr>;</expr_stmt>

<expr_stmt><expr><name>a</name> <operator>=</operator> <name><name>infos</name><operator>-&gt;</operator><name>first</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>b</name> <operator>=</operator> <name><name>infos</name><operator>-&gt;</operator><name>second</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>dir</name> <operator>=</operator> <call><name>iterate_frame</name><argument_list>(<argument><expr><name><name>infos</name><operator>-&gt;</operator><name>framerateratio</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>a</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>b</name></expr></argument>, <argument><expr><name>fcount</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bcount</name></expr></argument>, <argument><expr><name>DIR_PREV</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>dir</name> <operator>==</operator> <name>DIR_PREV_END</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>status</name> <operator>|=</operator> <name>STATUS_BEGIN_REACHED</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sc</name><operator>-&gt;</operator><name>thdi</name></name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>bcount</name> <operator>&gt;=</operator> <name><name>sc</name><operator>-&gt;</operator><name>thdi</name></name></expr>)</condition> <block>{<block_content>

<break>break;</break> 

</block_content>}</block></if></if_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>bcount</name> <operator>&lt;</operator> <name><name>sc</name><operator>-&gt;</operator><name>thdi</name></name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt> 

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>double</name><operator>)</operator> <name>goodfcount</name> <operator>/</operator> <operator>(</operator><name>double</name><operator>)</operator> <name>fcount</name> <operator>&lt;</operator> <name><name>sc</name><operator>-&gt;</operator><name>thit</name></name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>double</name><operator>)</operator> <name>goodfcount</name><operator>*</operator><literal type="number">0.5</literal> <operator>&lt;</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name>gooda</name></expr></argument>, <argument><expr><name>goodb</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name>meandist</name> <operator>=</operator> <operator>(</operator><name>double</name><operator>)</operator> <name>goodfcount</name> <operator>/</operator> <operator>(</operator><name>double</name><operator>)</operator> <name>distsum</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>meandist</name> <operator>&lt;</operator> <name>minmeandist</name> <operator>||</operator>

<name>status</name> <operator>==</operator> <name>STATUS_END_REACHED</name> <operator>|</operator> <name>STATUS_BEGIN_REACHED</name> <operator>||</operator>

<name>mode</name> <operator>==</operator> <name>MODE_FAST</name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name>minmeandist</name> <operator>=</operator> <name>meandist</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bestmatch</name><operator>.</operator><name>meandist</name></name> <operator>=</operator> <name>meandist</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bestmatch</name><operator>.</operator><name>matchframes</name></name> <operator>=</operator> <name>bcount</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bestmatch</name><operator>.</operator><name>framerateratio</name></name> <operator>=</operator> <name><name>infos</name><operator>-&gt;</operator><name>framerateratio</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bestmatch</name><operator>.</operator><name>score</name></name> <operator>=</operator> <name><name>infos</name><operator>-&gt;</operator><name>score</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bestmatch</name><operator>.</operator><name>offset</name></name> <operator>=</operator> <name><name>infos</name><operator>-&gt;</operator><name>offset</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bestmatch</name><operator>.</operator><name>first</name></name> <operator>=</operator> <name><name>infos</name><operator>-&gt;</operator><name>first</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bestmatch</name><operator>.</operator><name>second</name></name> <operator>=</operator> <name><name>infos</name><operator>-&gt;</operator><name>second</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bestmatch</name><operator>.</operator><name>whole</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>bestmatch</name><operator>.</operator><name>next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>status</name> <operator>==</operator> <operator>(</operator><name>STATUS_END_REACHED</name> <operator>|</operator> <name>STATUS_BEGIN_REACHED</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>bestmatch</name><operator>.</operator><name>whole</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>mode</name> <operator>==</operator> <name>MODE_FAST</name></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>bestmatch</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>sll_free</name><parameter_list>(<parameter><decl><type><name>MatchingInfo</name> <modifier>*</modifier></type><name>sll</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>tmp</name></decl>;</decl_stmt>

<while>while <condition>(<expr><name>sll</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>tmp</name> <operator>=</operator> <name>sll</name></expr>;</expr_stmt>

<expr_stmt><expr><name>sll</name> <operator>=</operator> <name><name>sll</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>MatchingInfo</name></type> <name>lookup_signatures</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>SignatureContext</name> <modifier>*</modifier></type><name>sc</name></decl></parameter>, <parameter><decl><type><name>StreamContext</name> <modifier>*</modifier></type><name>first</name></decl></parameter>, <parameter><decl><type><name>StreamContext</name> <modifier>*</modifier></type><name>second</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>CoarseSignature</name> <modifier>*</modifier></type><name>cs</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>cs2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>MatchingInfo</name> <modifier>*</modifier></type><name>infos</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>MatchingInfo</name></type> <name>bestmatch</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>MatchingInfo</name> <modifier>*</modifier></type><name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name>cs</name> <operator>=</operator> <name><name>first</name><operator>-&gt;</operator><name>coarsesiglist</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>cs2</name> <operator>=</operator> <name><name>second</name><operator>-&gt;</operator><name>coarsesiglist</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bestmatch</name><operator>.</operator><name>score</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bestmatch</name><operator>.</operator><name>meandist</name></name> <operator>=</operator> <literal type="number">99999</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bestmatch</name><operator>.</operator><name>whole</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fill_l1distlut</name><argument_list>(<argument><expr><name><name>sc</name><operator>-&gt;</operator><name>l1distlut</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>find_next_coarsecandidate</name><argument_list>(<argument><expr><name>sc</name></expr></argument>, <argument><expr><name><name>second</name><operator>-&gt;</operator><name>coarsesiglist</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cs2</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>bestmatch</name></expr>;</return></block_content></block></if></if_stmt> 

<do>do <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Stage 1: got coarsesignature pair. "</literal>

<literal type="string">"indices of first frame: %"</literal><name>PRIu32</name><literal type="string">" and %"</literal><name>PRIu32</name><literal type="string">"\n"</literal></expr></argument>,

<argument><expr><name><name>cs</name><operator>-&gt;</operator><name>first</name><operator>-&gt;</operator><name>index</name></name></expr></argument>, <argument><expr><name><name>cs2</name><operator>-&gt;</operator><name>first</name><operator>-&gt;</operator><name>index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Stage 2: calculate matching parameters\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>infos</name> <operator>=</operator> <call><name>get_matching_parameters</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>sc</name></expr></argument>, <argument><expr><name><name>cs</name><operator>-&gt;</operator><name>first</name></name></expr></argument>, <argument><expr><name><name>cs2</name><operator>-&gt;</operator><name>first</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>av_log_get_level</name><argument_list>()</argument_list></call> <operator>==</operator> <name>AV_LOG_DEBUG</name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>infos</name></expr>;</init> <condition><expr><name>i</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>i</name> <operator>=</operator> <name><name>i</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Stage 2: matching pair at %"</literal><name>PRIu32</name><literal type="string">" and %"</literal><name>PRIu32</name><literal type="string">", "</literal>

<literal type="string">"ratio %f, offset %d\n"</literal></expr></argument>, <argument><expr><name><name>i</name><operator>-&gt;</operator><name>first</name><operator>-&gt;</operator><name>index</name></name></expr></argument>, <argument><expr><name><name>i</name><operator>-&gt;</operator><name>second</name><operator>-&gt;</operator><name>index</name></name></expr></argument>,

<argument><expr><name><name>i</name><operator>-&gt;</operator><name>framerateratio</name></name></expr></argument>, <argument><expr><name><name>i</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Stage 3: evaluate\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>infos</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>bestmatch</name> <operator>=</operator> <call><name>evaluate_parameters</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>sc</name></expr></argument>, <argument><expr><name>infos</name></expr></argument>, <argument><expr><name>bestmatch</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Stage 3: best matching pair at %"</literal><name>PRIu32</name><literal type="string">" and %"</literal><name>PRIu32</name><literal type="string">", "</literal>

<literal type="string">"ratio %f, offset %d, score %d, %d frames matching\n"</literal></expr></argument>,

<argument><expr><name><name>bestmatch</name><operator>.</operator><name>first</name><operator>-&gt;</operator><name>index</name></name></expr></argument>, <argument><expr><name><name>bestmatch</name><operator>.</operator><name>second</name><operator>-&gt;</operator><name>index</name></name></expr></argument>,

<argument><expr><name><name>bestmatch</name><operator>.</operator><name>framerateratio</name></name></expr></argument>, <argument><expr><name><name>bestmatch</name><operator>.</operator><name>offset</name></name></expr></argument>, <argument><expr><name><name>bestmatch</name><operator>.</operator><name>score</name></name></expr></argument>, <argument><expr><name><name>bestmatch</name><operator>.</operator><name>matchframes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sll_free</name><argument_list>(<argument><expr><name>infos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block> while <condition>(<expr><call><name>find_next_coarsecandidate</name><argument_list>(<argument><expr><name>sc</name></expr></argument>, <argument><expr><name><name>second</name><operator>-&gt;</operator><name>coarsesiglist</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cs2</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>bestmatch</name><operator>.</operator><name>whole</name></name></expr>)</condition>;</do>

<return>return <expr><name>bestmatch</name></expr>;</return>

</block_content>}</block></function>

</unit>
