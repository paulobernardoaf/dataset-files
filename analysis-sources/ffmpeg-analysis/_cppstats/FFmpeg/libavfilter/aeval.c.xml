<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavfilter\aeval.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avassert.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avstring.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/channel_layout.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/eval.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/opt.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/parseutils.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avfilter.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"audio.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier> <specifier>const</specifier></type> <name><name>var_names</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="string">"ch"</literal></expr>, 

<expr><literal type="string">"n"</literal></expr>, 

<expr><literal type="string">"nb_in_channels"</literal></expr>,

<expr><literal type="string">"nb_out_channels"</literal></expr>,

<expr><literal type="string">"t"</literal></expr>, 

<expr><literal type="string">"s"</literal></expr>, 

<expr><name>NULL</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<enum>enum <name>var_name</name> <block>{

<decl><name>VAR_CH</name></decl>,

<decl><name>VAR_N</name></decl>,

<decl><name>VAR_NB_IN_CHANNELS</name></decl>,

<decl><name>VAR_NB_OUT_CHANNELS</name></decl>,

<decl><name>VAR_T</name></decl>,

<decl><name>VAR_S</name></decl>,

<decl><name>VAR_VARS_NB</name></decl>

}</block>;</enum>

<typedef>typedef <type><struct>struct <name>EvalContext</name> <block>{

<decl_stmt><decl><type><specifier>const</specifier> <name>AVClass</name> <modifier>*</modifier></type><name>class</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>sample_rate_str</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>sample_rate</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>chlayout</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>chlayout_str</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>nb_channels</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>nb_in_channels</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>same_chlayout</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int64_t</name></type> <name>pts</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVExpr</name> <modifier>*</modifier><modifier>*</modifier></type><name>expr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>exprs</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>nb_samples</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int64_t</name></type> <name>duration</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>n</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name><name>var_values</name><index>[<expr><name>VAR_VARS_NB</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name> <modifier>*</modifier></type><name>channel_values</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>out_channel_layout</name></decl>;</decl_stmt>

}</block></struct></type> <name>EvalContext</name>;</typedef>

<function><type><specifier>static</specifier> <name>double</name></type> <name>val</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>priv</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>ch</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>EvalContext</name> <modifier>*</modifier></type><name>eval</name> <init>= <expr><name>priv</name></expr></init></decl>;</decl_stmt>

<return>return <expr><name><name>eval</name><operator>-&gt;</operator><name>channel_values</name><index>[<expr><call><name>FFMIN</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>ch</name></expr></argument>, <argument><expr><name><name>eval</name><operator>-&gt;</operator><name>nb_in_channels</name></name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</return>

</block_content>}</block></function>

<expr_stmt><expr><specifier>static</specifier> <call><call><name>double</name> <argument_list>(<argument><expr><operator>*</operator> <specifier>const</specifier> <name><name>aeval_func1</name><index>[]</index></name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>void</name> <operator>*</operator></expr></argument>, <argument><expr><name>double</name></expr></argument>)</argument_list></call> <operator>=</operator> <block>{ <expr><name>val</name></expr>, <expr><name>NULL</name></expr> }</block></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier> <specifier>const</specifier></type> <name><name>aeval_func1_names</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="string">"val"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OFFSET</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>offsetof(EvalContext, x)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLAGS</name></cpp:macro> <cpp:value>AV_OPT_FLAG_AUDIO_PARAM|AV_OPT_FLAG_FILTERING_PARAM</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVOption</name></type> <name><name>aevalsrc_options</name><index>[]</index></name><init>= <expr><block>{

<expr><block>{ <expr><literal type="string">"exprs"</literal></expr>, <expr><literal type="string">"set the '|'-separated list of channels expressions"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>exprs</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_STRING</name></expr>, <expr><block>{<expr><operator>.</operator><name>str</name> <operator>=</operator> <name>NULL</name></expr>}</block></expr>, <expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>FLAGS</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"nb_samples"</literal></expr>, <expr><literal type="string">"set the number of samples per requested frame"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>nb_samples</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">1024</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"n"</literal></expr>, <expr><literal type="string">"set the number of samples per requested frame"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>nb_samples</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">1024</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"sample_rate"</literal></expr>, <expr><literal type="string">"set the sample rate"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>sample_rate_str</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_STRING</name></expr>, <expr><block>{<expr><operator>.</operator><name>str</name> <operator>=</operator> <literal type="string">"44100"</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"s"</literal></expr>, <expr><literal type="string">"set the sample rate"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>sample_rate_str</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_STRING</name></expr>, <expr><block>{<expr><operator>.</operator><name>str</name> <operator>=</operator> <literal type="string">"44100"</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"duration"</literal></expr>, <expr><literal type="string">"set audio duration"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>duration</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_DURATION</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><name>INT64_MAX</name></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"d"</literal></expr>, <expr><literal type="string">"set audio duration"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>duration</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_DURATION</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><name>INT64_MAX</name></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"channel_layout"</literal></expr>, <expr><literal type="string">"set channel layout"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>chlayout_str</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_STRING</name></expr>, <expr><block>{<expr><operator>.</operator><name>str</name> <operator>=</operator> <name>NULL</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"c"</literal></expr>, <expr><literal type="string">"set channel layout"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>chlayout_str</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_STRING</name></expr>, <expr><block>{<expr><operator>.</operator><name>str</name> <operator>=</operator> <name>NULL</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>AVFILTER_DEFINE_CLASS</name><argument_list>(<argument><expr><name>aevalsrc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function><type><specifier>static</specifier> <name>int</name></type> <name>parse_channel_expressions</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>expected_nb_channels</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>EvalContext</name> <modifier>*</modifier></type><name>eval</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>args1</name> <init>= <expr><call><name>av_strdup</name><argument_list>(<argument><expr><name><name>eval</name><operator>-&gt;</operator><name>exprs</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>expr</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>last_expr</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>

<expr_stmt><expr><call><call><name>double</name> <argument_list>(<argument><expr><operator>*</operator> <specifier>const</specifier> <operator>*</operator><name>func1</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>void</name> <operator>*</operator></expr></argument>, <argument><expr><name>double</name></expr></argument>)</argument_list></call> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier> <specifier>const</specifier> <modifier>*</modifier></type><name>func1_names</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>args1</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>eval</name><operator>-&gt;</operator><name>exprs</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Channels expressions list is empty\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>filter</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="string">"aeval"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>func1</name> <operator>=</operator> <name>aeval_func1</name></expr>;</expr_stmt>

<expr_stmt><expr><name>func1_names</name> <operator>=</operator> <name>aeval_func1_names</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ADD_EXPRESSION</name><parameter_list>(<parameter><type><name>expr_</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { if (!av_dynarray2_add((void **)&amp;eval-&gt;expr, &amp;eval-&gt;nb_channels, sizeof(*eval-&gt;expr), NULL)) { ret = AVERROR(ENOMEM); goto end; } eval-&gt;expr[eval-&gt;nb_channels-1] = NULL; ret = av_expr_parse(&amp;eval-&gt;expr[eval-&gt;nb_channels - 1], expr_, var_names, func1_names, func1, NULL, NULL, 0, ctx); if (ret &lt; 0) goto end; } while (0)</cpp:value></cpp:define>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>eval</name><operator>-&gt;</operator><name>nb_channels</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>av_expr_free</name><argument_list>(<argument><expr><name><name>eval</name><operator>-&gt;</operator><name>expr</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>eval</name><operator>-&gt;</operator><name>expr</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>eval</name><operator>-&gt;</operator><name>expr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>eval</name><operator>-&gt;</operator><name>nb_channels</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>buf</name> <operator>=</operator> <name>args1</name></expr>;</expr_stmt>

<while>while <condition>(<expr><name>expr</name> <operator>=</operator> <call><name>av_strtok</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"|"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ADD_EXPRESSION</name><argument_list>(<argument><expr><name>expr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>last_expr</name> <operator>=</operator> <name>expr</name></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>expected_nb_channels</name> <operator>&gt;</operator> <name><name>eval</name><operator>-&gt;</operator><name>nb_channels</name></name></expr>)</condition><block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name><name>eval</name><operator>-&gt;</operator><name>nb_channels</name></name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>expected_nb_channels</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ADD_EXPRESSION</name><argument_list>(<argument><expr><name>last_expr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>expected_nb_channels</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>eval</name><operator>-&gt;</operator><name>nb_channels</name></name> <operator>!=</operator> <name>expected_nb_channels</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"Mismatch between the specified number of channel expressions '%d' "</literal>

<literal type="string">"and the number of expected output channels '%d' for the specified channel layout\n"</literal></expr></argument>,

<argument><expr><name><name>eval</name><operator>-&gt;</operator><name>nb_channels</name></name></expr></argument>, <argument><expr><name>expected_nb_channels</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>end</name>;</goto>

</block_content>}</block></if></if_stmt>

<label><name>end</name>:</label>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>args1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>init</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>EvalContext</name> <modifier>*</modifier></type><name>eval</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>eval</name><operator>-&gt;</operator><name>chlayout_str</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>eval</name><operator>-&gt;</operator><name>chlayout_str</name></name></expr></argument>, <argument><expr><literal type="string">"same"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>filter</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="string">"aeval"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>eval</name><operator>-&gt;</operator><name>same_chlayout</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_parse_channel_layout</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>eval</name><operator>-&gt;</operator><name>chlayout</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>eval</name><operator>-&gt;</operator><name>chlayout_str</name></name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>parse_channel_expressions</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><call><name>av_get_channel_layout_nb_channels</name><argument_list>(<argument><expr><name><name>eval</name><operator>-&gt;</operator><name>chlayout</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>parse_channel_expressions</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>eval</name><operator>-&gt;</operator><name>chlayout</name></name> <operator>=</operator> <call><name>av_get_default_channel_layout</name><argument_list>(<argument><expr><name><name>eval</name><operator>-&gt;</operator><name>nb_channels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>eval</name><operator>-&gt;</operator><name>chlayout</name></name> <operator>&amp;&amp;</operator> <name><name>eval</name><operator>-&gt;</operator><name>nb_channels</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid number of channels '%d' provided\n"</literal></expr></argument>,

<argument><expr><name><name>eval</name><operator>-&gt;</operator><name>nb_channels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>eval</name><operator>-&gt;</operator><name>sample_rate_str</name></name></expr>)</condition><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_parse_sample_rate</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>eval</name><operator>-&gt;</operator><name>sample_rate</name></name></expr></argument>, <argument><expr><name><name>eval</name><operator>-&gt;</operator><name>sample_rate_str</name></name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>eval</name><operator>-&gt;</operator><name>n</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>void</name></type> <name>uninit</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>EvalContext</name> <modifier>*</modifier></type><name>eval</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>eval</name><operator>-&gt;</operator><name>nb_channels</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>av_expr_free</name><argument_list>(<argument><expr><name><name>eval</name><operator>-&gt;</operator><name>expr</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>eval</name><operator>-&gt;</operator><name>expr</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>eval</name><operator>-&gt;</operator><name>expr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>eval</name><operator>-&gt;</operator><name>channel_values</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>config_props</name><parameter_list>(<parameter><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>outlink</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>EvalContext</name> <modifier>*</modifier></type><name>eval</name> <init>= <expr><name><name>outlink</name><operator>-&gt;</operator><name>src</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>outlink</name><operator>-&gt;</operator><name>time_base</name></name> <operator>=</operator> <operator>(</operator><name>AVRational</name><operator>)</operator><block>{<expr><literal type="number">1</literal></expr>, <expr><name><name>eval</name><operator>-&gt;</operator><name>sample_rate</name></name></expr>}</block></expr>;</expr_stmt>

<expr_stmt><expr><name><name>outlink</name><operator>-&gt;</operator><name>sample_rate</name></name> <operator>=</operator> <name><name>eval</name><operator>-&gt;</operator><name>sample_rate</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>eval</name><operator>-&gt;</operator><name>var_values</name><index>[<expr><name>VAR_S</name></expr>]</index></name> <operator>=</operator> <name><name>eval</name><operator>-&gt;</operator><name>sample_rate</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>eval</name><operator>-&gt;</operator><name>var_values</name><index>[<expr><name>VAR_NB_IN_CHANNELS</name></expr>]</index></name> <operator>=</operator> <name>NAN</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>eval</name><operator>-&gt;</operator><name>var_values</name><index>[<expr><name>VAR_NB_OUT_CHANNELS</name></expr>]</index></name> <operator>=</operator> <name><name>outlink</name><operator>-&gt;</operator><name>channels</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_get_channel_layout_string</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>eval</name><operator>-&gt;</operator><name>chlayout</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>outlink</name><operator>-&gt;</operator><name>src</name></name></expr></argument>, <argument><expr><name>AV_LOG_VERBOSE</name></expr></argument>,

<argument><expr><literal type="string">"sample_rate:%d chlayout:%s duration:%"</literal><name>PRId64</name><literal type="string">"\n"</literal></expr></argument>,

<argument><expr><name><name>eval</name><operator>-&gt;</operator><name>sample_rate</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>eval</name><operator>-&gt;</operator><name>duration</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>query_formats</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>EvalContext</name> <modifier>*</modifier></type><name>eval</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>enum</name> <name>AVSampleFormat</name></name></type> <name><name>sample_fmts</name><index>[]</index></name> <init>= <expr><block>{ <expr><name>AV_SAMPLE_FMT_DBLP</name></expr>, <expr><name>AV_SAMPLE_FMT_NONE</name></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name><name>chlayouts</name><index>[]</index></name> <init>= <expr><block>{ <expr><name><name>eval</name><operator>-&gt;</operator><name>chlayout</name></name> <operator>?</operator> <name><name>eval</name><operator>-&gt;</operator><name>chlayout</name></name> <operator>:</operator> <call><name>FF_COUNT2LAYOUT</name><argument_list>(<argument><expr><name><name>eval</name><operator>-&gt;</operator><name>nb_channels</name></name></expr></argument>)</argument_list></call></expr> , <expr><operator>-</operator><literal type="number">1</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>sample_rates</name><index>[]</index></name> <init>= <expr><block>{ <expr><name><name>eval</name><operator>-&gt;</operator><name>sample_rate</name></name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFilterFormats</name> <modifier>*</modifier></type><name>formats</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFilterChannelLayouts</name> <modifier>*</modifier></type><name>layouts</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name>formats</name> <operator>=</operator> <call><name>ff_make_format_list</name><argument_list>(<argument><expr><name>sample_fmts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>formats</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_set_common_formats</name> <argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>formats</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>layouts</name> <operator>=</operator> <call><name>avfilter_make_format64_list</name><argument_list>(<argument><expr><name>chlayouts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>layouts</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_set_common_channel_layouts</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>layouts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>formats</name> <operator>=</operator> <call><name>ff_make_format_list</name><argument_list>(<argument><expr><name>sample_rates</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>formats</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>ff_set_common_samplerates</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>formats</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>request_frame</name><parameter_list>(<parameter><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>outlink</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>EvalContext</name> <modifier>*</modifier></type><name>eval</name> <init>= <expr><name><name>outlink</name><operator>-&gt;</operator><name>src</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>samplesref</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>t</name> <init>= <expr><call><name>av_rescale</name><argument_list>(<argument><expr><name><name>eval</name><operator>-&gt;</operator><name>n</name></name></expr></argument>, <argument><expr><name>AV_TIME_BASE</name></expr></argument>, <argument><expr><name><name>eval</name><operator>-&gt;</operator><name>sample_rate</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>nb_samples</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>eval</name><operator>-&gt;</operator><name>duration</name></name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>t</name> <operator>&gt;=</operator> <name><name>eval</name><operator>-&gt;</operator><name>duration</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_EOF</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>eval</name><operator>-&gt;</operator><name>duration</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>nb_samples</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name><name>eval</name><operator>-&gt;</operator><name>nb_samples</name></name></expr></argument>, <argument><expr><call><name>av_rescale</name><argument_list>(<argument><expr><name><name>eval</name><operator>-&gt;</operator><name>duration</name></name></expr></argument>, <argument><expr><name><name>eval</name><operator>-&gt;</operator><name>sample_rate</name></name></expr></argument>, <argument><expr><name>AV_TIME_BASE</name></expr></argument>)</argument_list></call> <operator>-</operator> <name><name>eval</name><operator>-&gt;</operator><name>pts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>nb_samples</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_EOF</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>nb_samples</name> <operator>=</operator> <name><name>eval</name><operator>-&gt;</operator><name>nb_samples</name></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>samplesref</name> <operator>=</operator> <call><name>ff_get_audio_buffer</name><argument_list>(<argument><expr><name>outlink</name></expr></argument>, <argument><expr><name>nb_samples</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>samplesref</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nb_samples</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name><name>eval</name><operator>-&gt;</operator><name>n</name></name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>eval</name><operator>-&gt;</operator><name>var_values</name><index>[<expr><name>VAR_N</name></expr>]</index></name> <operator>=</operator> <name><name>eval</name><operator>-&gt;</operator><name>n</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>eval</name><operator>-&gt;</operator><name>var_values</name><index>[<expr><name>VAR_T</name></expr>]</index></name> <operator>=</operator> <name><name>eval</name><operator>-&gt;</operator><name>var_values</name><index>[<expr><name>VAR_N</name></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>double</name><operator>)</operator><literal type="number">1</literal><operator>/</operator><name><name>eval</name><operator>-&gt;</operator><name>sample_rate</name></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>eval</name><operator>-&gt;</operator><name>nb_channels</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>double</name> <operator>*</operator><operator>)</operator> <name><name>samplesref</name><operator>-&gt;</operator><name>extended_data</name><index>[<expr><name>j</name></expr>]</index></name> <operator>+</operator> <name>i</name><operator>)</operator> <operator>=</operator>

<call><name>av_expr_eval</name><argument_list>(<argument><expr><name><name>eval</name><operator>-&gt;</operator><name>expr</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>eval</name><operator>-&gt;</operator><name>var_values</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<expr_stmt><expr><name><name>samplesref</name><operator>-&gt;</operator><name>pts</name></name> <operator>=</operator> <name><name>eval</name><operator>-&gt;</operator><name>pts</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>samplesref</name><operator>-&gt;</operator><name>sample_rate</name></name> <operator>=</operator> <name><name>eval</name><operator>-&gt;</operator><name>sample_rate</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>eval</name><operator>-&gt;</operator><name>pts</name></name> <operator>+=</operator> <name>nb_samples</name></expr>;</expr_stmt>

<return>return <expr><call><name>ff_filter_frame</name><argument_list>(<argument><expr><name>outlink</name></expr></argument>, <argument><expr><name>samplesref</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_AEVALSRC_FILTER</name></expr></cpp:if>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVFilterPad</name></type> <name><name>aevalsrc_outputs</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"default"</literal></expr>,

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_AUDIO</name></expr>,

<expr><operator>.</operator><name>config_props</name> <operator>=</operator> <name>config_props</name></expr>,

<expr><operator>.</operator><name>request_frame</name> <operator>=</operator> <name>request_frame</name></expr>,

}</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFilter</name></type> <name>ff_asrc_aevalsrc</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"aevalsrc"</literal></expr>,

<expr><operator>.</operator><name>description</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"Generate an audio signal generated by an expression."</literal></expr></argument>)</argument_list></call></expr>,

<expr><operator>.</operator><name>query_formats</name> <operator>=</operator> <name>query_formats</name></expr>,

<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>init</name></expr>,

<expr><operator>.</operator><name>uninit</name> <operator>=</operator> <name>uninit</name></expr>,

<expr><operator>.</operator><name>priv_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>EvalContext</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><operator>.</operator><name>inputs</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>outputs</name> <operator>=</operator> <name>aevalsrc_outputs</name></expr>,

<expr><operator>.</operator><name>priv_class</name> <operator>=</operator> <operator>&amp;</operator><name>aevalsrc_class</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OFFSET</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>offsetof(EvalContext, x)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLAGS</name></cpp:macro> <cpp:value>AV_OPT_FLAG_AUDIO_PARAM|AV_OPT_FLAG_FILTERING_PARAM</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVOption</name></type> <name><name>aeval_options</name><index>[]</index></name><init>= <expr><block>{

<expr><block>{ <expr><literal type="string">"exprs"</literal></expr>, <expr><literal type="string">"set the '|'-separated list of channels expressions"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>exprs</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_STRING</name></expr>, <expr><block>{<expr><operator>.</operator><name>str</name> <operator>=</operator> <name>NULL</name></expr>}</block></expr>, <expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>FLAGS</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"channel_layout"</literal></expr>, <expr><literal type="string">"set channel layout"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>chlayout_str</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_STRING</name></expr>, <expr><block>{<expr><operator>.</operator><name>str</name> <operator>=</operator> <name>NULL</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"c"</literal></expr>, <expr><literal type="string">"set channel layout"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>chlayout_str</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_STRING</name></expr>, <expr><block>{<expr><operator>.</operator><name>str</name> <operator>=</operator> <name>NULL</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>AVFILTER_DEFINE_CLASS</name><argument_list>(<argument><expr><name>aeval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function><type><specifier>static</specifier> <name>int</name></type> <name>aeval_query_formats</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVFilterFormats</name> <modifier>*</modifier></type><name>formats</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFilterChannelLayouts</name> <modifier>*</modifier></type><name>layouts</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>inlink</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>inputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>outlink</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>outputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EvalContext</name> <modifier>*</modifier></type><name>eval</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>enum</name> <name>AVSampleFormat</name></name></type> <name><name>sample_fmts</name><index>[]</index></name> <init>= <expr><block>{

<expr><name>AV_SAMPLE_FMT_DBLP</name></expr>, <expr><name>AV_SAMPLE_FMT_NONE</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name>layouts</name> <operator>=</operator> <call><name>ff_all_channel_counts</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_channel_layouts_ref</name><argument_list>(<argument><expr><name>layouts</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>inlink</name><operator>-&gt;</operator><name>out_channel_layouts</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>eval</name><operator>-&gt;</operator><name>same_chlayout</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>layouts</name> <operator>=</operator> <call><name>ff_all_channel_counts</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_set_common_channel_layouts</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>layouts</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>layouts</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_add_channel_layout</name><argument_list>(<argument><expr><operator>&amp;</operator><name>layouts</name></expr></argument>,

<argument><expr><ternary><condition><expr><name><name>eval</name><operator>-&gt;</operator><name>out_channel_layout</name></name></expr> ?</condition><then> <expr><name><name>eval</name><operator>-&gt;</operator><name>out_channel_layout</name></name></expr> </then><else>:

<expr><call><name>FF_COUNT2LAYOUT</name><argument_list>(<argument><expr><name><name>eval</name><operator>-&gt;</operator><name>nb_channels</name></name></expr></argument>)</argument_list></call></expr></else></ternary></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_channel_layouts_ref</name><argument_list>(<argument><expr><name>layouts</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>outlink</name><operator>-&gt;</operator><name>in_channel_layouts</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>formats</name> <operator>=</operator> <call><name>ff_make_format_list</name><argument_list>(<argument><expr><name>sample_fmts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_set_common_formats</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>formats</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>formats</name> <operator>=</operator> <call><name>ff_all_samplerates</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>ff_set_common_samplerates</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>formats</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>aeval_config_output</name><parameter_list>(<parameter><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>outlink</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>outlink</name><operator>-&gt;</operator><name>src</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EvalContext</name> <modifier>*</modifier></type><name>eval</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>inlink</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>inputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>eval</name><operator>-&gt;</operator><name>same_chlayout</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>eval</name><operator>-&gt;</operator><name>chlayout</name></name> <operator>=</operator> <name><name>inlink</name><operator>-&gt;</operator><name>channel_layout</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>parse_channel_expressions</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>channels</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>eval</name><operator>-&gt;</operator><name>n</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>eval</name><operator>-&gt;</operator><name>nb_in_channels</name></name> <operator>=</operator> <name><name>eval</name><operator>-&gt;</operator><name>var_values</name><index>[<expr><name>VAR_NB_IN_CHANNELS</name></expr>]</index></name> <operator>=</operator> <name><name>inlink</name><operator>-&gt;</operator><name>channels</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>eval</name><operator>-&gt;</operator><name>var_values</name><index>[<expr><name>VAR_NB_OUT_CHANNELS</name></expr>]</index></name> <operator>=</operator> <name><name>outlink</name><operator>-&gt;</operator><name>channels</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>eval</name><operator>-&gt;</operator><name>var_values</name><index>[<expr><name>VAR_S</name></expr>]</index></name> <operator>=</operator> <name><name>inlink</name><operator>-&gt;</operator><name>sample_rate</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>eval</name><operator>-&gt;</operator><name>var_values</name><index>[<expr><name>VAR_T</name></expr>]</index></name> <operator>=</operator> <name>NAN</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>eval</name><operator>-&gt;</operator><name>channel_values</name></name> <operator>=</operator> <call><name>av_realloc_f</name><argument_list>(<argument><expr><name><name>eval</name><operator>-&gt;</operator><name>channel_values</name></name></expr></argument>,

<argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>channels</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>eval</name><operator>-&gt;</operator><name>channel_values</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>eval</name><operator>-&gt;</operator><name>channel_values</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TS2T</name><parameter_list>(<parameter><type><name>ts</name></type></parameter>, <parameter><type><name>tb</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((ts) == AV_NOPTS_VALUE ? NAN : (double)(ts)*av_q2d(tb))</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>int</name></type> <name>filter_frame</name><parameter_list>(<parameter><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>inlink</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>in</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>EvalContext</name> <modifier>*</modifier></type><name>eval</name> <init>= <expr><name><name>inlink</name><operator>-&gt;</operator><name>dst</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>outlink</name> <init>= <expr><name><name>inlink</name><operator>-&gt;</operator><name>dst</name><operator>-&gt;</operator><name>outputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>nb_samples</name> <init>= <expr><name><name>in</name><operator>-&gt;</operator><name>nb_samples</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>out</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>t0</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<expr_stmt><expr><name>out</name> <operator>=</operator> <call><name>ff_get_audio_buffer</name><argument_list>(<argument><expr><name>outlink</name></expr></argument>, <argument><expr><name>nb_samples</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>out</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_frame_copy_props</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>t0</name> <operator>=</operator> <call><name>TS2T</name><argument_list>(<argument><expr><name><name>in</name><operator>-&gt;</operator><name>pts</name></name></expr></argument>, <argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>time_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nb_samples</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name><name>eval</name><operator>-&gt;</operator><name>n</name></name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>eval</name><operator>-&gt;</operator><name>var_values</name><index>[<expr><name>VAR_N</name></expr>]</index></name> <operator>=</operator> <name><name>eval</name><operator>-&gt;</operator><name>n</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>eval</name><operator>-&gt;</operator><name>var_values</name><index>[<expr><name>VAR_T</name></expr>]</index></name> <operator>=</operator> <name>t0</name> <operator>+</operator> <name>i</name> <operator>*</operator> <operator>(</operator><name>double</name><operator>)</operator><literal type="number">1</literal><operator>/</operator><name><name>inlink</name><operator>-&gt;</operator><name>sample_rate</name></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>inlink</name><operator>-&gt;</operator><name>channels</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>eval</name><operator>-&gt;</operator><name>channel_values</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <operator>*</operator><operator>(</operator><operator>(</operator><name>double</name> <operator>*</operator><operator>)</operator> <name><name>in</name><operator>-&gt;</operator><name>extended_data</name><index>[<expr><name>j</name></expr>]</index></name> <operator>+</operator> <name>i</name><operator>)</operator></expr>;</expr_stmt></block_content></block></for>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>outlink</name><operator>-&gt;</operator><name>channels</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>eval</name><operator>-&gt;</operator><name>var_values</name><index>[<expr><name>VAR_CH</name></expr>]</index></name> <operator>=</operator> <name>j</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>double</name> <operator>*</operator><operator>)</operator> <name><name>out</name><operator>-&gt;</operator><name>extended_data</name><index>[<expr><name>j</name></expr>]</index></name> <operator>+</operator> <name>i</name><operator>)</operator> <operator>=</operator>

<call><name>av_expr_eval</name><argument_list>(<argument><expr><name><name>eval</name><operator>-&gt;</operator><name>expr</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>eval</name><operator>-&gt;</operator><name>var_values</name></name></expr></argument>, <argument><expr><name>eval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>ff_filter_frame</name><argument_list>(<argument><expr><name>outlink</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_AEVAL_FILTER</name></expr></cpp:if>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVFilterPad</name></type> <name><name>aeval_inputs</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"default"</literal></expr>,

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_AUDIO</name></expr>,

<expr><operator>.</operator><name>filter_frame</name> <operator>=</operator> <name>filter_frame</name></expr>,

}</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVFilterPad</name></type> <name><name>aeval_outputs</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"default"</literal></expr>,

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_AUDIO</name></expr>,

<expr><operator>.</operator><name>config_props</name> <operator>=</operator> <name>aeval_config_output</name></expr>,

}</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFilter</name></type> <name>ff_af_aeval</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"aeval"</literal></expr>,

<expr><operator>.</operator><name>description</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"Filter audio signal according to a specified expression."</literal></expr></argument>)</argument_list></call></expr>,

<expr><operator>.</operator><name>query_formats</name> <operator>=</operator> <name>aeval_query_formats</name></expr>,

<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>init</name></expr>,

<expr><operator>.</operator><name>uninit</name> <operator>=</operator> <name>uninit</name></expr>,

<expr><operator>.</operator><name>priv_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>EvalContext</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><operator>.</operator><name>inputs</name> <operator>=</operator> <name>aeval_inputs</name></expr>,

<expr><operator>.</operator><name>outputs</name> <operator>=</operator> <name>aeval_outputs</name></expr>,

<expr><operator>.</operator><name>priv_class</name> <operator>=</operator> <operator>&amp;</operator><name>aeval_class</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

</unit>
