<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavfilter\vf_geq.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avassert.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avstring.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/eval.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/opt.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/pixdesc.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_NB_THREADS</name></cpp:macro> <cpp:value>32</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NB_PLANES</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>

<enum>enum <name>InterpolationMethods</name> <block>{

<decl><name>INTERP_NEAREST</name></decl>,

<decl><name>INTERP_BILINEAR</name></decl>,

<decl><name>NB_INTERP</name></decl>

}</block>;</enum>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>var_names</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="string">"X"</literal></expr>, <expr><literal type="string">"Y"</literal></expr>, <expr><literal type="string">"W"</literal></expr>, <expr><literal type="string">"H"</literal></expr>, <expr><literal type="string">"N"</literal></expr>, <expr><literal type="string">"SW"</literal></expr>, <expr><literal type="string">"SH"</literal></expr>, <expr><literal type="string">"T"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr></init></decl>;</decl_stmt>

<enum>enum <block>{ <decl><name>VAR_X</name></decl>, <decl><name>VAR_Y</name></decl>, <decl><name>VAR_W</name></decl>, <decl><name>VAR_H</name></decl>, <decl><name>VAR_N</name></decl>, <decl><name>VAR_SW</name></decl>, <decl><name>VAR_SH</name></decl>, <decl><name>VAR_T</name></decl>, <decl><name>VAR_VARS_NB</name></decl> }</block>;</enum>

<typedef>typedef <type><struct>struct <name>GEQContext</name> <block>{

<decl_stmt><decl><type><specifier>const</specifier> <name>AVClass</name> <modifier>*</modifier></type><name>class</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVExpr</name> <modifier>*</modifier></type><name><name>e</name><index>[<expr><name>NB_PLANES</name></expr>]</index><index>[<expr><name>MAX_NB_THREADS</name></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name><name>expr_str</name><index>[<expr><literal type="number">4</literal><operator>+</operator><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>picref</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst16</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>double</name></type> <name><name>values</name><index>[<expr><name>VAR_VARS_NB</name></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>hsub</name></decl>, <name>vsub</name>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>planes</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>interpolation</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>is_rgb</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>bps</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name> <modifier>*</modifier></type><name><name>pixel_sums</name><index>[<expr><name>NB_PLANES</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>needs_sum</name><index>[<expr><name>NB_PLANES</name></expr>]</index></name></decl>;</decl_stmt>

}</block></struct></type> <name>GEQContext</name>;</typedef>

<enum>enum <block>{ <decl><name>Y</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><name>U</name></decl>, <decl><name>V</name></decl>, <decl><name>A</name></decl>, <decl><name>G</name></decl>, <decl><name>B</name></decl>, <decl><name>R</name></decl> }</block>;</enum>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OFFSET</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>offsetof(GEQContext, x)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLAGS</name></cpp:macro> <cpp:value>AV_OPT_FLAG_VIDEO_PARAM|AV_OPT_FLAG_FILTERING_PARAM</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVOption</name></type> <name><name>geq_options</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><literal type="string">"lum_expr"</literal></expr>, <expr><literal type="string">"set luminance expression"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name><name>expr_str</name><index>[<expr><name>Y</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_STRING</name></expr>, <expr><block>{<expr><operator>.</operator><name>str</name><operator>=</operator><name>NULL</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"lum"</literal></expr>, <expr><literal type="string">"set luminance expression"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name><name>expr_str</name><index>[<expr><name>Y</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_STRING</name></expr>, <expr><block>{<expr><operator>.</operator><name>str</name><operator>=</operator><name>NULL</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"cb_expr"</literal></expr>, <expr><literal type="string">"set chroma blue expression"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name><name>expr_str</name><index>[<expr><name>U</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_STRING</name></expr>, <expr><block>{<expr><operator>.</operator><name>str</name><operator>=</operator><name>NULL</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"cb"</literal></expr>, <expr><literal type="string">"set chroma blue expression"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name><name>expr_str</name><index>[<expr><name>U</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_STRING</name></expr>, <expr><block>{<expr><operator>.</operator><name>str</name><operator>=</operator><name>NULL</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"cr_expr"</literal></expr>, <expr><literal type="string">"set chroma red expression"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name><name>expr_str</name><index>[<expr><name>V</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_STRING</name></expr>, <expr><block>{<expr><operator>.</operator><name>str</name><operator>=</operator><name>NULL</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"cr"</literal></expr>, <expr><literal type="string">"set chroma red expression"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name><name>expr_str</name><index>[<expr><name>V</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_STRING</name></expr>, <expr><block>{<expr><operator>.</operator><name>str</name><operator>=</operator><name>NULL</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"alpha_expr"</literal></expr>, <expr><literal type="string">"set alpha expression"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name><name>expr_str</name><index>[<expr><name>A</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_STRING</name></expr>, <expr><block>{<expr><operator>.</operator><name>str</name><operator>=</operator><name>NULL</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"a"</literal></expr>, <expr><literal type="string">"set alpha expression"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name><name>expr_str</name><index>[<expr><name>A</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_STRING</name></expr>, <expr><block>{<expr><operator>.</operator><name>str</name><operator>=</operator><name>NULL</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"red_expr"</literal></expr>, <expr><literal type="string">"set red expression"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name><name>expr_str</name><index>[<expr><name>R</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_STRING</name></expr>, <expr><block>{<expr><operator>.</operator><name>str</name><operator>=</operator><name>NULL</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"r"</literal></expr>, <expr><literal type="string">"set red expression"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name><name>expr_str</name><index>[<expr><name>R</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_STRING</name></expr>, <expr><block>{<expr><operator>.</operator><name>str</name><operator>=</operator><name>NULL</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"green_expr"</literal></expr>, <expr><literal type="string">"set green expression"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name><name>expr_str</name><index>[<expr><name>G</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_STRING</name></expr>, <expr><block>{<expr><operator>.</operator><name>str</name><operator>=</operator><name>NULL</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"g"</literal></expr>, <expr><literal type="string">"set green expression"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name><name>expr_str</name><index>[<expr><name>G</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_STRING</name></expr>, <expr><block>{<expr><operator>.</operator><name>str</name><operator>=</operator><name>NULL</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"blue_expr"</literal></expr>, <expr><literal type="string">"set blue expression"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name><name>expr_str</name><index>[<expr><name>B</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_STRING</name></expr>, <expr><block>{<expr><operator>.</operator><name>str</name><operator>=</operator><name>NULL</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"b"</literal></expr>, <expr><literal type="string">"set blue expression"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name><name>expr_str</name><index>[<expr><name>B</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_STRING</name></expr>, <expr><block>{<expr><operator>.</operator><name>str</name><operator>=</operator><name>NULL</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"interpolation"</literal></expr>,<expr><literal type="string">"set interpolation method"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>interpolation</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>INTERP_BILINEAR</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NB_INTERP</name><operator>-</operator><literal type="number">1</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"interp"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"i"</literal></expr>, <expr><literal type="string">"set interpolation method"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>interpolation</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>INTERP_BILINEAR</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NB_INTERP</name><operator>-</operator><literal type="number">1</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"interp"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"nearest"</literal></expr>, <expr><literal type="string">"nearest interpolation"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>INTERP_NEAREST</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"interp"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"n"</literal></expr>, <expr><literal type="string">"nearest interpolation"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>INTERP_NEAREST</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"interp"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"bilinear"</literal></expr>, <expr><literal type="string">"bilinear interpolation"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>INTERP_BILINEAR</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"interp"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"b"</literal></expr>, <expr><literal type="string">"bilinear interpolation"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>INTERP_BILINEAR</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"interp"</literal></expr> }</block></expr>,

<expr><block>{<expr><name>NULL</name></expr>}</block></expr>,

}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>AVFILTER_DEFINE_CLASS</name><argument_list>(<argument><expr><name>geq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>double</name></type> <name>getpix</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>priv</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>plane</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>xi</name></decl>, <decl><type ref="prev"/><name>yi</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GEQContext</name> <modifier>*</modifier></type><name>geq</name> <init>= <expr><name>priv</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>picref</name> <init>= <expr><name><name>geq</name><operator>-&gt;</operator><name>picref</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><name><name>picref</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>plane</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>linesize</name> <init>= <expr><name><name>picref</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>plane</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>w</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>plane</name> <operator>==</operator> <literal type="number">1</literal> <operator>||</operator> <name>plane</name> <operator>==</operator> <literal type="number">2</literal><operator>)</operator></expr> ?</condition><then> <expr><call><name>AV_CEIL_RSHIFT</name><argument_list>(<argument><expr><name><name>picref</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>geq</name><operator>-&gt;</operator><name>hsub</name></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name><name>picref</name><operator>-&gt;</operator><name>width</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>h</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>plane</name> <operator>==</operator> <literal type="number">1</literal> <operator>||</operator> <name>plane</name> <operator>==</operator> <literal type="number">2</literal><operator>)</operator></expr> ?</condition><then> <expr><call><name>AV_CEIL_RSHIFT</name><argument_list>(<argument><expr><name><name>picref</name><operator>-&gt;</operator><name>height</name></name></expr></argument>, <argument><expr><name><name>geq</name><operator>-&gt;</operator><name>vsub</name></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name><name>picref</name><operator>-&gt;</operator><name>height</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>src</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>geq</name><operator>-&gt;</operator><name>interpolation</name></name> <operator>==</operator> <name>INTERP_BILINEAR</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>xi</name> <operator>=</operator> <name>x</name> <operator>=</operator> <call><name>av_clipd</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>w</name> <operator>-</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>yi</name> <operator>=</operator> <name>y</name> <operator>=</operator> <call><name>av_clipd</name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>h</name> <operator>-</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>x</name> <operator>-=</operator> <name>xi</name></expr>;</expr_stmt>

<expr_stmt><expr><name>y</name> <operator>-=</operator> <name>yi</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>geq</name><operator>-&gt;</operator><name>bps</name></name> <operator>&gt;</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>src16</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint16_t</name><operator>*</operator><operator>)</operator><name>src</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>linesize</name> <operator>/=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>-</operator><name>y</name><operator>)</operator><operator>*</operator><operator>(</operator><operator>(</operator><literal type="number">1</literal><operator>-</operator><name>x</name><operator>)</operator><operator>*</operator><name><name>src16</name><index>[<expr><name>xi</name> <operator>+</operator> <name>yi</name> <operator>*</operator> <name>linesize</name></expr>]</index></name> <operator>+</operator> <name>x</name><operator>*</operator><name><name>src16</name><index>[<expr><name>xi</name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <name>yi</name> <operator>*</operator> <name>linesize</name></expr>]</index></name><operator>)</operator>

<operator>+</operator> <name>y</name> <operator>*</operator><operator>(</operator><operator>(</operator><literal type="number">1</literal><operator>-</operator><name>x</name><operator>)</operator><operator>*</operator><name><name>src16</name><index>[<expr><name>xi</name> <operator>+</operator> <operator>(</operator><name>yi</name><operator>+</operator><literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>linesize</name></expr>]</index></name> <operator>+</operator> <name>x</name><operator>*</operator><name><name>src16</name><index>[<expr><name>xi</name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <operator>(</operator><name>yi</name><operator>+</operator><literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>linesize</name></expr>]</index></name><operator>)</operator></expr>;</return>

</block_content>}</block></if> <else>else <block>{<block_content>

<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>-</operator><name>y</name><operator>)</operator><operator>*</operator><operator>(</operator><operator>(</operator><literal type="number">1</literal><operator>-</operator><name>x</name><operator>)</operator><operator>*</operator><name><name>src</name><index>[<expr><name>xi</name> <operator>+</operator> <name>yi</name> <operator>*</operator> <name>linesize</name></expr>]</index></name> <operator>+</operator> <name>x</name><operator>*</operator><name><name>src</name><index>[<expr><name>xi</name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <name>yi</name> <operator>*</operator> <name>linesize</name></expr>]</index></name><operator>)</operator>

<operator>+</operator> <name>y</name> <operator>*</operator><operator>(</operator><operator>(</operator><literal type="number">1</literal><operator>-</operator><name>x</name><operator>)</operator><operator>*</operator><name><name>src</name><index>[<expr><name>xi</name> <operator>+</operator> <operator>(</operator><name>yi</name><operator>+</operator><literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>linesize</name></expr>]</index></name> <operator>+</operator> <name>x</name><operator>*</operator><name><name>src</name><index>[<expr><name>xi</name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <operator>(</operator><name>yi</name><operator>+</operator><literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>linesize</name></expr>]</index></name><operator>)</operator></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>xi</name> <operator>=</operator> <call><name>av_clipd</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>w</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>yi</name> <operator>=</operator> <call><name>av_clipd</name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>h</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>geq</name><operator>-&gt;</operator><name>bps</name></name> <operator>&gt;</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>src16</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint16_t</name><operator>*</operator><operator>)</operator><name>src</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>linesize</name> <operator>/=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<return>return <expr><name><name>src16</name><index>[<expr><name>xi</name> <operator>+</operator> <name>yi</name> <operator>*</operator> <name>linesize</name></expr>]</index></name></expr>;</return>

</block_content>}</block></if> <else>else <block>{<block_content>

<return>return <expr><name><name>src</name><index>[<expr><name>xi</name> <operator>+</operator> <name>yi</name> <operator>*</operator> <name>linesize</name></expr>]</index></name></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>calculate_sums</name><parameter_list>(<parameter><decl><type><name>GEQContext</name> <modifier>*</modifier></type><name>geq</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>plane</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>xi</name></decl>, <decl><type ref="prev"/><name>yi</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>picref</name> <init>= <expr><name><name>geq</name><operator>-&gt;</operator><name>picref</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><name><name>picref</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>plane</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>linesize</name> <init>= <expr><name><name>picref</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>plane</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>geq</name><operator>-&gt;</operator><name>pixel_sums</name><index>[<expr><name>plane</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>geq</name><operator>-&gt;</operator><name>pixel_sums</name><index>[<expr><name>plane</name></expr>]</index></name> <operator>=</operator> <call><name>av_malloc_array</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name><name>geq</name><operator>-&gt;</operator><name>pixel_sums</name><index>[<expr><name>plane</name></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>geq</name><operator>-&gt;</operator><name>pixel_sums</name><index>[<expr><name>plane</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>geq</name><operator>-&gt;</operator><name>bps</name></name> <operator>&gt;</operator> <literal type="number">8</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>linesize</name> <operator>/=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>yi</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>yi</name> <operator>&lt;</operator> <name>h</name></expr>;</condition> <incr><expr><name>yi</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>geq</name><operator>-&gt;</operator><name>bps</name></name> <operator>&gt;</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>src16</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint16_t</name><operator>*</operator><operator>)</operator><name>src</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>linesum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>xi</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>xi</name> <operator>&lt;</operator> <name>w</name></expr>;</condition> <incr><expr><name>xi</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>linesum</name> <operator>+=</operator> <name><name>src16</name><index>[<expr><name>xi</name> <operator>+</operator> <name>yi</name> <operator>*</operator> <name>linesize</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>geq</name><operator>-&gt;</operator><name>pixel_sums</name><index>[<expr><name>plane</name></expr>]</index><index>[<expr><name>xi</name> <operator>+</operator> <name>yi</name> <operator>*</operator> <name>w</name></expr>]</index></name> <operator>=</operator> <name>linesum</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>double</name></type> <name>linesum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>xi</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>xi</name> <operator>&lt;</operator> <name>w</name></expr>;</condition> <incr><expr><name>xi</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>linesum</name> <operator>+=</operator> <name><name>src</name><index>[<expr><name>xi</name> <operator>+</operator> <name>yi</name> <operator>*</operator> <name>linesize</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>geq</name><operator>-&gt;</operator><name>pixel_sums</name><index>[<expr><name>plane</name></expr>]</index><index>[<expr><name>xi</name> <operator>+</operator> <name>yi</name> <operator>*</operator> <name>w</name></expr>]</index></name> <operator>=</operator> <name>linesum</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>yi</name></expr>)</condition><block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>xi</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>xi</name> <operator>&lt;</operator> <name>w</name></expr>;</condition> <incr><expr><name>xi</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>geq</name><operator>-&gt;</operator><name>pixel_sums</name><index>[<expr><name>plane</name></expr>]</index><index>[<expr><name>xi</name> <operator>+</operator> <name>yi</name> <operator>*</operator> <name>w</name></expr>]</index></name> <operator>+=</operator> <name><name>geq</name><operator>-&gt;</operator><name>pixel_sums</name><index>[<expr><name>plane</name></expr>]</index><index>[<expr><name>xi</name> <operator>+</operator> <name>yi</name> <operator>*</operator> <name>w</name> <operator>-</operator> <name>w</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for></block_content></block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>double</name></type> <name>getpix_integrate_internal</name><parameter_list>(<parameter><decl><type><name>GEQContext</name> <modifier>*</modifier></type><name>geq</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>plane</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>x</name> <operator>&gt;</operator> <name>w</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>double</name></type> <name>boundary</name> <init>= <expr><call><name>getpix_integrate_internal</name><argument_list>(<argument><expr><name>geq</name></expr></argument>, <argument><expr><name>w</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>plane</name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><literal type="number">2</literal><operator>*</operator><name>boundary</name> <operator>-</operator> <call><name>getpix_integrate_internal</name><argument_list>(<argument><expr><name>geq</name></expr></argument>, <argument><expr><literal type="number">2</literal><operator>*</operator><operator>(</operator><name>w</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>-</operator> <name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>plane</name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>y</name> <operator>&gt;</operator> <name>h</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>double</name></type> <name>boundary</name> <init>= <expr><call><name>getpix_integrate_internal</name><argument_list>(<argument><expr><name>geq</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>h</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>plane</name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><literal type="number">2</literal><operator>*</operator><name>boundary</name> <operator>-</operator> <call><name>getpix_integrate_internal</name><argument_list>(<argument><expr><name>geq</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><literal type="number">2</literal><operator>*</operator><operator>(</operator><name>h</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>-</operator> <name>y</name></expr></argument>, <argument><expr><name>plane</name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>x</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>x</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><operator>-</operator> <call><name>getpix_integrate_internal</name><argument_list>(<argument><expr><name>geq</name></expr></argument>, <argument><expr><operator>-</operator><name>x</name><operator>-</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>plane</name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>y</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>y</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><operator>-</operator> <call><name>getpix_integrate_internal</name><argument_list>(<argument><expr><name>geq</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><operator>-</operator><name>y</name><operator>-</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>plane</name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name><name>geq</name><operator>-&gt;</operator><name>pixel_sums</name><index>[<expr><name>plane</name></expr>]</index><index>[<expr><name>x</name> <operator>+</operator> <name>y</name> <operator>*</operator> <name>w</name></expr>]</index></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>double</name></type> <name>getpix_integrate</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>priv</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>plane</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>GEQContext</name> <modifier>*</modifier></type><name>geq</name> <init>= <expr><name>priv</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>picref</name> <init>= <expr><name><name>geq</name><operator>-&gt;</operator><name>picref</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><name><name>picref</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>plane</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>w</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>plane</name> <operator>==</operator> <literal type="number">1</literal> <operator>||</operator> <name>plane</name> <operator>==</operator> <literal type="number">2</literal><operator>)</operator></expr> ?</condition><then> <expr><call><name>AV_CEIL_RSHIFT</name><argument_list>(<argument><expr><name><name>picref</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>geq</name><operator>-&gt;</operator><name>hsub</name></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name><name>picref</name><operator>-&gt;</operator><name>width</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>h</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>plane</name> <operator>==</operator> <literal type="number">1</literal> <operator>||</operator> <name>plane</name> <operator>==</operator> <literal type="number">2</literal><operator>)</operator></expr> ?</condition><then> <expr><call><name>AV_CEIL_RSHIFT</name><argument_list>(<argument><expr><name><name>picref</name><operator>-&gt;</operator><name>height</name></name></expr></argument>, <argument><expr><name><name>geq</name><operator>-&gt;</operator><name>vsub</name></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name><name>picref</name><operator>-&gt;</operator><name>height</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>src</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>getpix_integrate_internal</name><argument_list>(<argument><expr><name>geq</name></expr></argument>, <argument><expr><call><name>lrint</name><argument_list>(<argument><expr><call><name>av_clipd</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><operator>-</operator><name>w</name></expr></argument>, <argument><expr><literal type="number">2</literal><operator>*</operator><name>w</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>lrint</name><argument_list>(<argument><expr><call><name>av_clipd</name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><operator>-</operator><name>h</name></expr></argument>, <argument><expr><literal type="number">2</literal><operator>*</operator><name>h</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>plane</name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>double</name></type> <name>lum</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>priv</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>y</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>getpix</name><argument_list>(<argument><expr><name>priv</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><specifier>static</specifier> <name>double</name></type> <name>cb</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>priv</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>y</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>getpix</name><argument_list>(<argument><expr><name>priv</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><specifier>static</specifier> <name>double</name></type> <name>cr</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>priv</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>y</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>getpix</name><argument_list>(<argument><expr><name>priv</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><specifier>static</specifier> <name>double</name></type> <name>alpha</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>priv</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>y</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>getpix</name><argument_list>(<argument><expr><name>priv</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><specifier>static</specifier> <name>double</name></type> <name>lumsum</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>priv</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>y</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>getpix_integrate</name><argument_list>(<argument><expr><name>priv</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><specifier>static</specifier> <name>double</name></type> <name>cbsum</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>priv</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>y</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>getpix_integrate</name><argument_list>(<argument><expr><name>priv</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><specifier>static</specifier> <name>double</name></type> <name>crsub</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>priv</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>y</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>getpix_integrate</name><argument_list>(<argument><expr><name>priv</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><specifier>static</specifier> <name>double</name></type> <name>alphasum</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>priv</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>y</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>getpix_integrate</name><argument_list>(<argument><expr><name>priv</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>geq_init</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>GEQContext</name> <modifier>*</modifier></type><name>geq</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>plane</name></decl>, <decl><type ref="prev"/><name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>geq</name><operator>-&gt;</operator><name>expr_str</name><index>[<expr><name>Y</name></expr>]</index></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>geq</name><operator>-&gt;</operator><name>expr_str</name><index>[<expr><name>G</name></expr>]</index></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>geq</name><operator>-&gt;</operator><name>expr_str</name><index>[<expr><name>B</name></expr>]</index></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>geq</name><operator>-&gt;</operator><name>expr_str</name><index>[<expr><name>R</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"A luminance or RGB expression is mandatory\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>end</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>geq</name><operator>-&gt;</operator><name>is_rgb</name></name> <operator>=</operator> <operator>!</operator><name><name>geq</name><operator>-&gt;</operator><name>expr_str</name><index>[<expr><name>Y</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>geq</name><operator>-&gt;</operator><name>expr_str</name><index>[<expr><name>Y</name></expr>]</index></name> <operator>||</operator> <name><name>geq</name><operator>-&gt;</operator><name>expr_str</name><index>[<expr><name>U</name></expr>]</index></name> <operator>||</operator> <name><name>geq</name><operator>-&gt;</operator><name>expr_str</name><index>[<expr><name>V</name></expr>]</index></name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>geq</name><operator>-&gt;</operator><name>expr_str</name><index>[<expr><name>G</name></expr>]</index></name> <operator>||</operator> <name><name>geq</name><operator>-&gt;</operator><name>expr_str</name><index>[<expr><name>B</name></expr>]</index></name> <operator>||</operator> <name><name>geq</name><operator>-&gt;</operator><name>expr_str</name><index>[<expr><name>R</name></expr>]</index></name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Either YCbCr or RGB but not both must be specified\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>end</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>geq</name><operator>-&gt;</operator><name>expr_str</name><index>[<expr><name>U</name></expr>]</index></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>geq</name><operator>-&gt;</operator><name>expr_str</name><index>[<expr><name>V</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>geq</name><operator>-&gt;</operator><name>expr_str</name><index>[<expr><name>U</name></expr>]</index></name> <operator>=</operator> <call><name>av_strdup</name><argument_list>(<argument><expr><name><name>geq</name><operator>-&gt;</operator><name>expr_str</name><index>[<expr><name>Y</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>geq</name><operator>-&gt;</operator><name>expr_str</name><index>[<expr><name>V</name></expr>]</index></name> <operator>=</operator> <call><name>av_strdup</name><argument_list>(<argument><expr><name><name>geq</name><operator>-&gt;</operator><name>expr_str</name><index>[<expr><name>Y</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>geq</name><operator>-&gt;</operator><name>expr_str</name><index>[<expr><name>U</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>geq</name><operator>-&gt;</operator><name>expr_str</name><index>[<expr><name>U</name></expr>]</index></name> <operator>=</operator> <call><name>av_strdup</name><argument_list>(<argument><expr><name><name>geq</name><operator>-&gt;</operator><name>expr_str</name><index>[<expr><name>V</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>geq</name><operator>-&gt;</operator><name>expr_str</name><index>[<expr><name>V</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>geq</name><operator>-&gt;</operator><name>expr_str</name><index>[<expr><name>V</name></expr>]</index></name> <operator>=</operator> <call><name>av_strdup</name><argument_list>(<argument><expr><name><name>geq</name><operator>-&gt;</operator><name>expr_str</name><index>[<expr><name>U</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>geq</name><operator>-&gt;</operator><name>expr_str</name><index>[<expr><name>A</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>bps_string</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>bps_string</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>bps_string</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><name><name>geq</name><operator>-&gt;</operator><name>bps</name></name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>geq</name><operator>-&gt;</operator><name>expr_str</name><index>[<expr><name>A</name></expr>]</index></name> <operator>=</operator> <call><name>av_strdup</name><argument_list>(<argument><expr><name>bps_string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>geq</name><operator>-&gt;</operator><name>expr_str</name><index>[<expr><name>G</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>geq</name><operator>-&gt;</operator><name>expr_str</name><index>[<expr><name>G</name></expr>]</index></name> <operator>=</operator> <call><name>av_strdup</name><argument_list>(<argument><expr><literal type="string">"g(X,Y)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>geq</name><operator>-&gt;</operator><name>expr_str</name><index>[<expr><name>B</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>geq</name><operator>-&gt;</operator><name>expr_str</name><index>[<expr><name>B</name></expr>]</index></name> <operator>=</operator> <call><name>av_strdup</name><argument_list>(<argument><expr><literal type="string">"b(X,Y)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>geq</name><operator>-&gt;</operator><name>expr_str</name><index>[<expr><name>R</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>geq</name><operator>-&gt;</operator><name>expr_str</name><index>[<expr><name>R</name></expr>]</index></name> <operator>=</operator> <call><name>av_strdup</name><argument_list>(<argument><expr><literal type="string">"r(X,Y)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><ternary><condition><expr><name><name>geq</name><operator>-&gt;</operator><name>is_rgb</name></name></expr> ?</condition><then>

<expr><operator>(</operator><operator>!</operator><name><name>geq</name><operator>-&gt;</operator><name>expr_str</name><index>[<expr><name>G</name></expr>]</index></name> <operator>||</operator> <operator>!</operator><name><name>geq</name><operator>-&gt;</operator><name>expr_str</name><index>[<expr><name>B</name></expr>]</index></name> <operator>||</operator> <operator>!</operator><name><name>geq</name><operator>-&gt;</operator><name>expr_str</name><index>[<expr><name>R</name></expr>]</index></name><operator>)</operator></expr>

</then><else>:

<expr><operator>(</operator><operator>!</operator><name><name>geq</name><operator>-&gt;</operator><name>expr_str</name><index>[<expr><name>U</name></expr>]</index></name> <operator>||</operator> <operator>!</operator><name><name>geq</name><operator>-&gt;</operator><name>expr_str</name><index>[<expr><name>V</name></expr>]</index></name> <operator>||</operator> <operator>!</operator><name><name>geq</name><operator>-&gt;</operator><name>expr_str</name><index>[<expr><name>A</name></expr>]</index></name><operator>)</operator></expr></else></ternary></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>end</name>;</goto>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>plane</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>plane</name> <operator>&lt;</operator> <name>NB_PLANES</name></expr>;</condition> <incr><expr><name>plane</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<function_decl><type><specifier>static</specifier> <name>double</name></type> (<modifier>*</modifier><name>p</name><index>[]</index>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>double</name></type></decl></parameter>, <parameter><decl><type><name>double</name></type></decl></parameter>)</parameter_list> <init>= <expr><block>{

<expr><name>lum</name></expr></block></expr></init> <operator>,</operator> cb <operator>,</operator> cr <operator>,</operator> alpha <operator>,</operator>

lumsum<operator>,</operator> cbsum<operator>,</operator> crsub<operator>,</operator> alphasum<operator>,</operator></function_decl>

</block_content>}</block></for><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>func2_yuv_names</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="string">"lum"</literal></expr> , <expr><literal type="string">"cb"</literal></expr> , <expr><literal type="string">"cr"</literal></expr> , <expr><literal type="string">"alpha"</literal></expr> , <expr><literal type="string">"p"</literal></expr>,

<expr><literal type="string">"lumsum"</literal></expr>, <expr><literal type="string">"cbsum"</literal></expr>, <expr><literal type="string">"crsum"</literal></expr>, <expr><literal type="string">"alphasum"</literal></expr>, <expr><literal type="string">"psum"</literal></expr>,

<expr><name>NULL</name></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>func2_rgb_names</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="string">"g"</literal></expr> , <expr><literal type="string">"b"</literal></expr> , <expr><literal type="string">"r"</literal></expr> , <expr><literal type="string">"alpha"</literal></expr> , <expr><literal type="string">"p"</literal></expr>,

<expr><literal type="string">"gsum"</literal></expr>, <expr><literal type="string">"bsum"</literal></expr>, <expr><literal type="string">"rsum"</literal></expr>, <expr><literal type="string">"alphasum"</literal></expr>, <expr><literal type="string">"psum"</literal></expr>,

<expr><name>NULL</name></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier> <modifier>*</modifier></type><name>func2_names</name> <init>= <expr><ternary><condition><expr><name><name>geq</name><operator>-&gt;</operator><name>is_rgb</name></name></expr> ?</condition><then> <expr><name>func2_rgb_names</name></expr> </then><else>: <expr><name>func2_yuv_names</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<function_decl><type><name>double</name></type> (<modifier>*</modifier><name>func2</name><index>[]</index>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>double</name></type></decl></parameter>, <parameter><decl><type><name>double</name></type></decl></parameter>)</parameter_list> <init>= <expr><block>{

<expr><name>lum</name></expr></block></expr></init> <operator>,</operator> cb <operator>,</operator> cr <operator>,</operator> alpha <operator>,</operator> p[plane]<operator>,</operator>

lumsum<operator>,</operator> cbsum<operator>,</operator> crsub<operator>,</operator> alphasum<operator>,</operator> p[plane + 4]<operator>,</operator>

NULL</function_decl> </block_content>}</block></function><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>counter</name><index>[<expr><literal type="number">10</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_NB_THREADS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>av_expr_parse</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>geq</name><operator>-&gt;</operator><name>e</name><index>[<expr><name>plane</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>geq</name><operator>-&gt;</operator><name>expr_str</name><index>[<expr><ternary><condition><expr><name>plane</name> <operator>&lt;</operator> <literal type="number">3</literal> <operator>&amp;&amp;</operator> <name><name>geq</name><operator>-&gt;</operator><name>is_rgb</name></name></expr> ?</condition><then> <expr><name>plane</name><operator>+</operator><literal type="number">4</literal></expr> </then><else>: <expr><name>plane</name></expr></else></ternary></expr>]</index></name></expr></argument>, <argument><expr><name>var_names</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>func2_names</name></expr></argument>, <argument><expr><name>func2</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>end</name>;</goto></block_content></block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>av_expr_count_func</name><argument_list>(<argument><expr><name><name>geq</name><operator>-&gt;</operator><name>e</name><index>[<expr><name>plane</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>counter</name></expr></argument>, <argument><expr><call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>counter</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>geq</name><operator>-&gt;</operator><name>needs_sum</name><index>[<expr><name>plane</name></expr>]</index></name> <operator>=</operator> <name><name>counter</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>+</operator> <name><name>counter</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>+</operator> <name><name>counter</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>+</operator> <name><name>counter</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>+</operator> <name><name>counter</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></expr>;</expr_stmt>

}

end:

<return>return <expr><name>ret</name></expr>;</return>

}

static <function><type><name>int</name></type> <name>geq_query_formats</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>GEQContext</name> <modifier>*</modifier></type><name>geq</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>enum</name> <name>AVPixelFormat</name></name></type> <name><name>yuv_pix_fmts</name><index>[]</index></name> <init>= <expr><block>{

<expr><name>AV_PIX_FMT_YUV444P</name></expr>, <expr><name>AV_PIX_FMT_YUV422P</name></expr>, <expr><name>AV_PIX_FMT_YUV420P</name></expr>,

<expr><name>AV_PIX_FMT_YUV411P</name></expr>, <expr><name>AV_PIX_FMT_YUV410P</name></expr>, <expr><name>AV_PIX_FMT_YUV440P</name></expr>,

<expr><name>AV_PIX_FMT_YUVA444P</name></expr>, <expr><name>AV_PIX_FMT_YUVA422P</name></expr>, <expr><name>AV_PIX_FMT_YUVA420P</name></expr>,

<expr><name>AV_PIX_FMT_GRAY8</name></expr>,

<expr><name>AV_PIX_FMT_YUV444P9</name></expr>, <expr><name>AV_PIX_FMT_YUV422P9</name></expr>, <expr><name>AV_PIX_FMT_YUV420P9</name></expr>,

<expr><name>AV_PIX_FMT_YUVA444P9</name></expr>, <expr><name>AV_PIX_FMT_YUVA422P9</name></expr>, <expr><name>AV_PIX_FMT_YUVA420P9</name></expr>,

<expr><name>AV_PIX_FMT_YUV444P10</name></expr>, <expr><name>AV_PIX_FMT_YUV422P10</name></expr>, <expr><name>AV_PIX_FMT_YUV420P10</name></expr>,

<expr><name>AV_PIX_FMT_YUV440P10</name></expr>,

<expr><name>AV_PIX_FMT_YUVA444P10</name></expr>, <expr><name>AV_PIX_FMT_YUVA422P10</name></expr>, <expr><name>AV_PIX_FMT_YUVA420P10</name></expr>,

<expr><name>AV_PIX_FMT_GRAY9</name></expr>, <expr><name>AV_PIX_FMT_GRAY10</name></expr>,

<expr><name>AV_PIX_FMT_YUV444P12</name></expr>, <expr><name>AV_PIX_FMT_YUV422P12</name></expr>, <expr><name>AV_PIX_FMT_YUV420P12</name></expr>,

<expr><name>AV_PIX_FMT_GRAY12</name></expr>, <expr><name>AV_PIX_FMT_GRAY14</name></expr>,

<expr><name>AV_PIX_FMT_YUV444P14</name></expr>, <expr><name>AV_PIX_FMT_YUV422P14</name></expr>, <expr><name>AV_PIX_FMT_YUV420P14</name></expr>,

<expr><name>AV_PIX_FMT_YUV444P16</name></expr>, <expr><name>AV_PIX_FMT_YUV422P16</name></expr>, <expr><name>AV_PIX_FMT_YUV420P16</name></expr>,

<expr><name>AV_PIX_FMT_YUVA444P16</name></expr>, <expr><name>AV_PIX_FMT_YUVA422P16</name></expr>, <expr><name>AV_PIX_FMT_YUVA420P16</name></expr>,

<expr><name>AV_PIX_FMT_GRAY16</name></expr>,

<expr><name>AV_PIX_FMT_NONE</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>enum</name> <name>AVPixelFormat</name></name></type> <name><name>rgb_pix_fmts</name><index>[]</index></name> <init>= <expr><block>{

<expr><name>AV_PIX_FMT_GBRP</name></expr>, <expr><name>AV_PIX_FMT_GBRAP</name></expr>,

<expr><name>AV_PIX_FMT_GBRP9</name></expr>,

<expr><name>AV_PIX_FMT_GBRP10</name></expr>, <expr><name>AV_PIX_FMT_GBRAP10</name></expr>,

<expr><name>AV_PIX_FMT_GBRP12</name></expr>, <expr><name>AV_PIX_FMT_GBRAP12</name></expr>,

<expr><name>AV_PIX_FMT_GBRP14</name></expr>,

<expr><name>AV_PIX_FMT_GBRP16</name></expr>, <expr><name>AV_PIX_FMT_GBRAP16</name></expr>,

<expr><name>AV_PIX_FMT_NONE</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFilterFormats</name> <modifier>*</modifier></type><name>fmts_list</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>geq</name><operator>-&gt;</operator><name>is_rgb</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>fmts_list</name> <operator>=</operator> <call><name>ff_make_format_list</name><argument_list>(<argument><expr><name>rgb_pix_fmts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>fmts_list</name> <operator>=</operator> <call><name>ff_make_format_list</name><argument_list>(<argument><expr><name>yuv_pix_fmts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>fmts_list</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>ff_set_common_formats</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>fmts_list</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>geq_config_props</name><parameter_list>(<parameter><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>inlink</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>GEQContext</name> <modifier>*</modifier></type><name>geq</name> <init>= <expr><name><name>inlink</name><operator>-&gt;</operator><name>dst</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>AVPixFmtDescriptor</name> <modifier>*</modifier></type><name>desc</name> <init>= <expr><call><name>av_pix_fmt_desc_get</name><argument_list>(<argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>format</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>geq</name><operator>-&gt;</operator><name>hsub</name></name> <operator>=</operator> <name><name>desc</name><operator>-&gt;</operator><name>log2_chroma_w</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>geq</name><operator>-&gt;</operator><name>vsub</name></name> <operator>=</operator> <name><name>desc</name><operator>-&gt;</operator><name>log2_chroma_h</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>geq</name><operator>-&gt;</operator><name>bps</name></name> <operator>=</operator> <name><name>desc</name><operator>-&gt;</operator><name>comp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>depth</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>geq</name><operator>-&gt;</operator><name>planes</name></name> <operator>=</operator> <name><name>desc</name><operator>-&gt;</operator><name>nb_components</name></name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<typedef>typedef <type><struct>struct <name>ThreadData</name> <block>{

<decl_stmt><decl><type><name>int</name></type> <name>height</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>width</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>plane</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>linesize</name></decl>;</decl_stmt>

}</block></struct></type> <name>ThreadData</name>;</typedef>

<function><type><specifier>static</specifier> <name>int</name></type> <name>slice_geq_filter</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>jobnr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nb_jobs</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>GEQContext</name> <modifier>*</modifier></type><name>geq</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ThreadData</name> <modifier>*</modifier></type><name>td</name> <init>= <expr><name>arg</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>height</name> <init>= <expr><name><name>td</name><operator>-&gt;</operator><name>height</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>width</name> <init>= <expr><name><name>td</name><operator>-&gt;</operator><name>width</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>plane</name> <init>= <expr><name><name>td</name><operator>-&gt;</operator><name>plane</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>linesize</name> <init>= <expr><name><name>td</name><operator>-&gt;</operator><name>linesize</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>slice_start</name> <init>= <expr><operator>(</operator><name>height</name> <operator>*</operator> <name>jobnr</name><operator>)</operator> <operator>/</operator> <name>nb_jobs</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>slice_end</name> <init>= <expr><operator>(</operator><name>height</name> <operator>*</operator> <operator>(</operator><name>jobnr</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>/</operator> <name>nb_jobs</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name><name>values</name><index>[<expr><name>VAR_VARS_NB</name></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>values</name><index>[<expr><name>VAR_W</name></expr>]</index></name> <operator>=</operator> <name><name>geq</name><operator>-&gt;</operator><name>values</name><index>[<expr><name>VAR_W</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>values</name><index>[<expr><name>VAR_H</name></expr>]</index></name> <operator>=</operator> <name><name>geq</name><operator>-&gt;</operator><name>values</name><index>[<expr><name>VAR_H</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>values</name><index>[<expr><name>VAR_N</name></expr>]</index></name> <operator>=</operator> <name><name>geq</name><operator>-&gt;</operator><name>values</name><index>[<expr><name>VAR_N</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>values</name><index>[<expr><name>VAR_SW</name></expr>]</index></name> <operator>=</operator> <name><name>geq</name><operator>-&gt;</operator><name>values</name><index>[<expr><name>VAR_SW</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>values</name><index>[<expr><name>VAR_SH</name></expr>]</index></name> <operator>=</operator> <name><name>geq</name><operator>-&gt;</operator><name>values</name><index>[<expr><name>VAR_SH</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>values</name><index>[<expr><name>VAR_T</name></expr>]</index></name> <operator>=</operator> <name><name>geq</name><operator>-&gt;</operator><name>values</name><index>[<expr><name>VAR_T</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>geq</name><operator>-&gt;</operator><name>bps</name></name> <operator>==</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><name><name>geq</name><operator>-&gt;</operator><name>dst</name></name> <operator>+</operator> <name>linesize</name> <operator>*</operator> <name>slice_start</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <name>slice_start</name></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>slice_end</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>values</name><index>[<expr><name>VAR_Y</name></expr>]</index></name> <operator>=</operator> <name>y</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>values</name><index>[<expr><name>VAR_X</name></expr>]</index></name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ptr</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <call><name>av_expr_eval</name><argument_list>(<argument><expr><name><name>geq</name><operator>-&gt;</operator><name>e</name><index>[<expr><name>plane</name></expr>]</index><index>[<expr><name>jobnr</name></expr>]</index></name></expr></argument>, <argument><expr><name>values</name></expr></argument>, <argument><expr><name>geq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>ptr</name> <operator>+=</operator> <name>linesize</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>ptr16</name> <init>= <expr><name><name>geq</name><operator>-&gt;</operator><name>dst16</name></name> <operator>+</operator> <operator>(</operator><name>linesize</name><operator>/</operator><literal type="number">2</literal><operator>)</operator> <operator>*</operator> <name>slice_start</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <name>slice_start</name></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>slice_end</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>values</name><index>[<expr><name>VAR_Y</name></expr>]</index></name> <operator>=</operator> <name>y</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>values</name><index>[<expr><name>VAR_X</name></expr>]</index></name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ptr16</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <call><name>av_expr_eval</name><argument_list>(<argument><expr><name><name>geq</name><operator>-&gt;</operator><name>e</name><index>[<expr><name>plane</name></expr>]</index><index>[<expr><name>jobnr</name></expr>]</index></name></expr></argument>, <argument><expr><name>values</name></expr></argument>, <argument><expr><name>geq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>ptr16</name> <operator>+=</operator> <name>linesize</name><operator>/</operator><literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></else></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>geq_filter_frame</name><parameter_list>(<parameter><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>inlink</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>in</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>plane</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>inlink</name><operator>-&gt;</operator><name>dst</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>nb_threads</name> <init>= <expr><call><name>FFMIN</name><argument_list>(<argument><expr><name>MAX_NB_THREADS</name></expr></argument>, <argument><expr><call><name>ff_filter_get_nb_threads</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GEQContext</name> <modifier>*</modifier></type><name>geq</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>outlink</name> <init>= <expr><name><name>inlink</name><operator>-&gt;</operator><name>dst</name><operator>-&gt;</operator><name>outputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>out</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>geq</name><operator>-&gt;</operator><name>values</name><index>[<expr><name>VAR_N</name></expr>]</index></name> <operator>=</operator> <name><name>inlink</name><operator>-&gt;</operator><name>frame_count_out</name></name></expr><operator>,</operator>

<expr><name><name>geq</name><operator>-&gt;</operator><name>values</name><index>[<expr><name>VAR_T</name></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><name><name>in</name><operator>-&gt;</operator><name>pts</name></name> <operator>==</operator> <name>AV_NOPTS_VALUE</name></expr> ?</condition><then> <expr><name>NAN</name></expr> </then><else>: <expr><name><name>in</name><operator>-&gt;</operator><name>pts</name></name> <operator>*</operator> <call><name>av_q2d</name><argument_list>(<argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>time_base</name></name></expr></argument>)</argument_list></call></expr></else></ternary></expr><operator>,</operator>

<expr><name><name>geq</name><operator>-&gt;</operator><name>picref</name></name> <operator>=</operator> <name>in</name></expr>;</expr_stmt>

<expr_stmt><expr><name>out</name> <operator>=</operator> <call><name>ff_get_video_buffer</name><argument_list>(<argument><expr><name>outlink</name></expr></argument>, <argument><expr><name><name>outlink</name><operator>-&gt;</operator><name>w</name></name></expr></argument>, <argument><expr><name><name>outlink</name><operator>-&gt;</operator><name>h</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>out</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_frame_copy_props</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>plane</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>plane</name> <operator>&lt;</operator> <name><name>geq</name><operator>-&gt;</operator><name>planes</name></name> <operator>&amp;&amp;</operator> <name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>plane</name></expr>]</index></name></expr>;</condition> <incr><expr><name>plane</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>width</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>plane</name> <operator>==</operator> <literal type="number">1</literal> <operator>||</operator> <name>plane</name> <operator>==</operator> <literal type="number">2</literal><operator>)</operator></expr> ?</condition><then> <expr><call><name>AV_CEIL_RSHIFT</name><argument_list>(<argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>w</name></name></expr></argument>, <argument><expr><name><name>geq</name><operator>-&gt;</operator><name>hsub</name></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name><name>inlink</name><operator>-&gt;</operator><name>w</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>height</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>plane</name> <operator>==</operator> <literal type="number">1</literal> <operator>||</operator> <name>plane</name> <operator>==</operator> <literal type="number">2</literal><operator>)</operator></expr> ?</condition><then> <expr><call><name>AV_CEIL_RSHIFT</name><argument_list>(<argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>h</name></name></expr></argument>, <argument><expr><name><name>geq</name><operator>-&gt;</operator><name>vsub</name></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name><name>inlink</name><operator>-&gt;</operator><name>h</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>linesize</name> <init>= <expr><name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>plane</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ThreadData</name></type> <name>td</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>geq</name><operator>-&gt;</operator><name>dst</name></name> <operator>=</operator> <name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>plane</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>geq</name><operator>-&gt;</operator><name>dst16</name></name> <operator>=</operator> <operator>(</operator><name>uint16_t</name><operator>*</operator><operator>)</operator><name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>plane</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>geq</name><operator>-&gt;</operator><name>values</name><index>[<expr><name>VAR_W</name></expr>]</index></name> <operator>=</operator> <name>width</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>geq</name><operator>-&gt;</operator><name>values</name><index>[<expr><name>VAR_H</name></expr>]</index></name> <operator>=</operator> <name>height</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>geq</name><operator>-&gt;</operator><name>values</name><index>[<expr><name>VAR_SW</name></expr>]</index></name> <operator>=</operator> <name>width</name> <operator>/</operator> <operator>(</operator><name>double</name><operator>)</operator><name><name>inlink</name><operator>-&gt;</operator><name>w</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>geq</name><operator>-&gt;</operator><name>values</name><index>[<expr><name>VAR_SH</name></expr>]</index></name> <operator>=</operator> <name>height</name> <operator>/</operator> <operator>(</operator><name>double</name><operator>)</operator><name><name>inlink</name><operator>-&gt;</operator><name>h</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>td</name><operator>.</operator><name>width</name></name> <operator>=</operator> <name>width</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>td</name><operator>.</operator><name>height</name></name> <operator>=</operator> <name>height</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>td</name><operator>.</operator><name>plane</name></name> <operator>=</operator> <name>plane</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>td</name><operator>.</operator><name>linesize</name></name> <operator>=</operator> <name>linesize</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>geq</name><operator>-&gt;</operator><name>needs_sum</name><index>[<expr><name>plane</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>calculate_sums</name><argument_list>(<argument><expr><name>geq</name></expr></argument>, <argument><expr><name>plane</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name><name>ctx</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>slice_geq_filter</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>td</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><call><name>FFMIN</name><argument_list>(<argument><expr><name>height</name></expr></argument>, <argument><expr><name>nb_threads</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>geq</name><operator>-&gt;</operator><name>picref</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>ff_filter_frame</name><argument_list>(<argument><expr><name>outlink</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>void</name></type> <name>geq_uninit</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GEQContext</name> <modifier>*</modifier></type><name>geq</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>NB_PLANES</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>MAX_NB_THREADS</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_expr_free</name><argument_list>(<argument><expr><name><name>geq</name><operator>-&gt;</operator><name>e</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for></block_content></block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>NB_PLANES</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>geq</name><operator>-&gt;</operator><name>pixel_sums</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVFilterPad</name></type> <name><name>geq_inputs</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"default"</literal></expr>,

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,

<expr><operator>.</operator><name>config_props</name> <operator>=</operator> <name>geq_config_props</name></expr>,

<expr><operator>.</operator><name>filter_frame</name> <operator>=</operator> <name>geq_filter_frame</name></expr>,

}</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVFilterPad</name></type> <name><name>geq_outputs</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"default"</literal></expr>,

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,

}</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFilter</name></type> <name>ff_vf_geq</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"geq"</literal></expr>,

<expr><operator>.</operator><name>description</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"Apply generic equation to each pixel."</literal></expr></argument>)</argument_list></call></expr>,

<expr><operator>.</operator><name>priv_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>GEQContext</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>geq_init</name></expr>,

<expr><operator>.</operator><name>uninit</name> <operator>=</operator> <name>geq_uninit</name></expr>,

<expr><operator>.</operator><name>query_formats</name> <operator>=</operator> <name>geq_query_formats</name></expr>,

<expr><operator>.</operator><name>inputs</name> <operator>=</operator> <name>geq_inputs</name></expr>,

<expr><operator>.</operator><name>outputs</name> <operator>=</operator> <name>geq_outputs</name></expr>,

<expr><operator>.</operator><name>priv_class</name> <operator>=</operator> <operator>&amp;</operator><name>geq_class</name></expr>,

<expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>AVFILTER_FLAG_SUPPORT_TIMELINE_GENERIC</name> <operator>|</operator> <name>AVFILTER_FLAG_SLICE_THREADS</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

</unit>
