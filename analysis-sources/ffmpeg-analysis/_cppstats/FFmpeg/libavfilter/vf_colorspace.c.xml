<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavfilter\vf_colorspace.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avassert.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/opt.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/pixdesc.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/pixfmt.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avfilter.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"colorspacedsp.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"formats.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"video.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"colorspace.h"</cpp:file></cpp:include>

<enum>enum <name>DitherMode</name> <block>{

<decl><name>DITHER_NONE</name></decl>,

<decl><name>DITHER_FSB</name></decl>,

<decl><name>DITHER_NB</name></decl>,

}</block>;</enum>

<enum>enum <name>Colorspace</name> <block>{

<decl><name>CS_UNSPECIFIED</name></decl>,

<decl><name>CS_BT470M</name></decl>,

<decl><name>CS_BT470BG</name></decl>,

<decl><name>CS_BT601_6_525</name></decl>,

<decl><name>CS_BT601_6_625</name></decl>,

<decl><name>CS_BT709</name></decl>,

<decl><name>CS_SMPTE170M</name></decl>,

<decl><name>CS_SMPTE240M</name></decl>,

<decl><name>CS_BT2020</name></decl>,

<decl><name>CS_NB</name></decl>,

}</block>;</enum>

<enum>enum <name>Whitepoint</name> <block>{

<decl><name>WP_D65</name></decl>,

<decl><name>WP_C</name></decl>,

<decl><name>WP_DCI</name></decl>,

<decl><name>WP_E</name></decl>,

<decl><name>WP_NB</name></decl>,

}</block>;</enum>

<enum>enum <name>WhitepointAdaptation</name> <block>{

<decl><name>WP_ADAPT_BRADFORD</name></decl>,

<decl><name>WP_ADAPT_VON_KRIES</name></decl>,

<decl><name>NB_WP_ADAPT_NON_IDENTITY</name></decl>,

<decl><name>WP_ADAPT_IDENTITY</name> <init>= <expr><name>NB_WP_ADAPT_NON_IDENTITY</name></expr></init></decl>,

<decl><name>NB_WP_ADAPT</name></decl>,

}</block>;</enum>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>enum</name> <name>AVColorTransferCharacteristic</name></name></type> <name><name>default_trc</name><index>[<expr><name>CS_NB</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <init>= <expr><block>{

<expr><index>[<expr><name>CS_UNSPECIFIED</name></expr>]</index> <operator>=</operator> <name>AVCOL_TRC_UNSPECIFIED</name></expr>,

<expr><index>[<expr><name>CS_BT470M</name></expr>]</index> <operator>=</operator> <name>AVCOL_TRC_GAMMA22</name></expr>,

<expr><index>[<expr><name>CS_BT470BG</name></expr>]</index> <operator>=</operator> <name>AVCOL_TRC_GAMMA28</name></expr>,

<expr><index>[<expr><name>CS_BT601_6_525</name></expr>]</index> <operator>=</operator> <name>AVCOL_TRC_SMPTE170M</name></expr>,

<expr><index>[<expr><name>CS_BT601_6_625</name></expr>]</index> <operator>=</operator> <name>AVCOL_TRC_SMPTE170M</name></expr>,

<expr><index>[<expr><name>CS_BT709</name></expr>]</index> <operator>=</operator> <name>AVCOL_TRC_BT709</name></expr>,

<expr><index>[<expr><name>CS_SMPTE170M</name></expr>]</index> <operator>=</operator> <name>AVCOL_TRC_SMPTE170M</name></expr>,

<expr><index>[<expr><name>CS_SMPTE240M</name></expr>]</index> <operator>=</operator> <name>AVCOL_TRC_SMPTE240M</name></expr>,

<expr><index>[<expr><name>CS_BT2020</name></expr>]</index> <operator>=</operator> <name>AVCOL_TRC_BT2020_10</name></expr>,

<expr><index>[<expr><name>CS_NB</name></expr>]</index> <operator>=</operator> <name>AVCOL_TRC_UNSPECIFIED</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>enum</name> <name>AVColorPrimaries</name></name></type> <name><name>default_prm</name><index>[<expr><name>CS_NB</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <init>= <expr><block>{

<expr><index>[<expr><name>CS_UNSPECIFIED</name></expr>]</index> <operator>=</operator> <name>AVCOL_PRI_UNSPECIFIED</name></expr>,

<expr><index>[<expr><name>CS_BT470M</name></expr>]</index> <operator>=</operator> <name>AVCOL_PRI_BT470M</name></expr>,

<expr><index>[<expr><name>CS_BT470BG</name></expr>]</index> <operator>=</operator> <name>AVCOL_PRI_BT470BG</name></expr>,

<expr><index>[<expr><name>CS_BT601_6_525</name></expr>]</index> <operator>=</operator> <name>AVCOL_PRI_SMPTE170M</name></expr>,

<expr><index>[<expr><name>CS_BT601_6_625</name></expr>]</index> <operator>=</operator> <name>AVCOL_PRI_BT470BG</name></expr>,

<expr><index>[<expr><name>CS_BT709</name></expr>]</index> <operator>=</operator> <name>AVCOL_PRI_BT709</name></expr>,

<expr><index>[<expr><name>CS_SMPTE170M</name></expr>]</index> <operator>=</operator> <name>AVCOL_PRI_SMPTE170M</name></expr>,

<expr><index>[<expr><name>CS_SMPTE240M</name></expr>]</index> <operator>=</operator> <name>AVCOL_PRI_SMPTE240M</name></expr>,

<expr><index>[<expr><name>CS_BT2020</name></expr>]</index> <operator>=</operator> <name>AVCOL_PRI_BT2020</name></expr>,

<expr><index>[<expr><name>CS_NB</name></expr>]</index> <operator>=</operator> <name>AVCOL_PRI_UNSPECIFIED</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>enum</name> <name>AVColorSpace</name></name></type> <name><name>default_csp</name><index>[<expr><name>CS_NB</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <init>= <expr><block>{

<expr><index>[<expr><name>CS_UNSPECIFIED</name></expr>]</index> <operator>=</operator> <name>AVCOL_SPC_UNSPECIFIED</name></expr>,

<expr><index>[<expr><name>CS_BT470M</name></expr>]</index> <operator>=</operator> <name>AVCOL_SPC_SMPTE170M</name></expr>,

<expr><index>[<expr><name>CS_BT470BG</name></expr>]</index> <operator>=</operator> <name>AVCOL_SPC_BT470BG</name></expr>,

<expr><index>[<expr><name>CS_BT601_6_525</name></expr>]</index> <operator>=</operator> <name>AVCOL_SPC_SMPTE170M</name></expr>,

<expr><index>[<expr><name>CS_BT601_6_625</name></expr>]</index> <operator>=</operator> <name>AVCOL_SPC_BT470BG</name></expr>,

<expr><index>[<expr><name>CS_BT709</name></expr>]</index> <operator>=</operator> <name>AVCOL_SPC_BT709</name></expr>,

<expr><index>[<expr><name>CS_SMPTE170M</name></expr>]</index> <operator>=</operator> <name>AVCOL_SPC_SMPTE170M</name></expr>,

<expr><index>[<expr><name>CS_SMPTE240M</name></expr>]</index> <operator>=</operator> <name>AVCOL_SPC_SMPTE240M</name></expr>,

<expr><index>[<expr><name>CS_BT2020</name></expr>]</index> <operator>=</operator> <name>AVCOL_SPC_BT2020_NCL</name></expr>,

<expr><index>[<expr><name>CS_NB</name></expr>]</index> <operator>=</operator> <name>AVCOL_SPC_UNSPECIFIED</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<struct>struct <name>ColorPrimaries</name> <block>{

<decl_stmt><decl><type><name><name>enum</name> <name>Whitepoint</name></name></type> <name>wp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>PrimaryCoefficients</name></name></type> <name>coeff</name></decl>;</decl_stmt>

}</block>;</struct>

<struct>struct <name>TransferCharacteristics</name> <block>{

<decl_stmt><decl><type><name>double</name></type> <name>alpha</name></decl>, <decl><type ref="prev"/><name>beta</name></decl>, <decl><type ref="prev"/><name>gamma</name></decl>, <decl><type ref="prev"/><name>delta</name></decl>;</decl_stmt>

}</block>;</struct>

<typedef>typedef <type><struct>struct <name>ColorSpaceContext</name> <block>{

<decl_stmt><decl><type><specifier>const</specifier> <name>AVClass</name> <modifier>*</modifier></type><name>class</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ColorSpaceDSPContext</name></type> <name>dsp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>Colorspace</name></name></type> <name>user_all</name></decl>, <name>user_iall</name>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>AVColorSpace</name></name></type> <name>in_csp</name></decl>, <name>out_csp</name>, <name>user_csp</name>, <name>user_icsp</name>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>AVColorRange</name></name></type> <name>in_rng</name></decl>, <name>out_rng</name>, <name>user_rng</name>, <name>user_irng</name>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>AVColorTransferCharacteristic</name></name></type> <name>in_trc</name></decl>, <name>out_trc</name>, <name>user_trc</name>, <name>user_itrc</name>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>AVColorPrimaries</name></name></type> <name>in_prm</name></decl>, <name>out_prm</name>, <name>user_prm</name>, <name>user_iprm</name>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>in_format</name></decl>, <name>user_format</name>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>fast_mode</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>DitherMode</name></name></type> <name>dither</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>WhitepointAdaptation</name></name></type> <name>wp_adapt</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier></type><name><name>rgb</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ptrdiff_t</name></type> <name>rgb_stride</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>rgb_sz</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name><name>dither_scratch</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>, <modifier>*</modifier><name><name>dither_scratch_base</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>ColorPrimaries</name></name> <modifier>*</modifier></type><name>in_primaries</name></decl>, <modifier>*</modifier><name>out_primaries</name>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>lrgb2lrgb_passthrough</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>int16_t</name></expr></argument>, <argument><expr><name>lrgb2lrgb_coeffs</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">8</literal></expr>]</index></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>TransferCharacteristics</name></name> <modifier>*</modifier></type><name>in_txchr</name></decl>, <modifier>*</modifier><name>out_txchr</name>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>rgb2rgb_passthrough</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>lin_lut</name></decl>, <modifier>*</modifier><name>delin_lut</name>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>LumaCoefficients</name></name> <modifier>*</modifier></type><name>in_lumacoef</name></decl>, <modifier>*</modifier><name>out_lumacoef</name>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>yuv2yuv_passthrough</name></decl>, <name>yuv2yuv_fastmode</name>;</decl_stmt>

<expr_stmt><expr><call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>int16_t</name></expr></argument>, <argument><expr><name>yuv2rgb_coeffs</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">8</literal></expr>]</index></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>int16_t</name></expr></argument>, <argument><expr><name>rgb2yuv_coeffs</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">8</literal></expr>]</index></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>int16_t</name></expr></argument>, <argument><expr><name>yuv2yuv_coeffs</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">8</literal></expr>]</index></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>int16_t</name></expr></argument>, <argument><expr><name>yuv_offset</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">2</literal></expr> ]</index><index>[<expr><literal type="number">8</literal></expr>]</index></expr>;</expr_stmt>

<decl_stmt><decl><type><name>yuv2rgb_fn</name></type> <name>yuv2rgb</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>rgb2yuv_fn</name></type> <name>rgb2yuv</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>rgb2yuv_fsb_fn</name></type> <name>rgb2yuv_fsb</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>yuv2yuv_fn</name></type> <name>yuv2yuv</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name><name>yuv2rgb_dbl_coeffs</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>, <name><name>rgb2yuv_dbl_coeffs</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>in_y_rng</name></decl>, <name>in_uv_rng</name>, <name>out_y_rng</name>, <name>out_uv_rng</name>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>did_warn_range</name></decl>;</decl_stmt>

}</block></struct></type> <name>ColorSpaceContext</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>TransferCharacteristics</name></name></type> <name><name>transfer_characteristics</name><index>[<expr><name>AVCOL_TRC_NB</name></expr>]</index></name> <init>= <expr><block>{

<expr><index>[<expr><name>AVCOL_TRC_BT709</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="number">1.099</literal></expr>, <expr><literal type="number">0.018</literal></expr>, <expr><literal type="number">0.45</literal></expr>, <expr><literal type="number">4.5</literal></expr> }</block></expr>,

<expr><index>[<expr><name>AVCOL_TRC_GAMMA22</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="number">1.0</literal></expr>, <expr><literal type="number">0.0</literal></expr>, <expr><literal type="number">1.0</literal> <operator>/</operator> <literal type="number">2.2</literal></expr>, <expr><literal type="number">0.0</literal></expr> }</block></expr>,

<expr><index>[<expr><name>AVCOL_TRC_GAMMA28</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="number">1.0</literal></expr>, <expr><literal type="number">0.0</literal></expr>, <expr><literal type="number">1.0</literal> <operator>/</operator> <literal type="number">2.8</literal></expr>, <expr><literal type="number">0.0</literal></expr> }</block></expr>,

<expr><index>[<expr><name>AVCOL_TRC_SMPTE170M</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="number">1.099</literal></expr>, <expr><literal type="number">0.018</literal></expr>, <expr><literal type="number">0.45</literal></expr>, <expr><literal type="number">4.5</literal></expr> }</block></expr>,

<expr><index>[<expr><name>AVCOL_TRC_SMPTE240M</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="number">1.1115</literal></expr>, <expr><literal type="number">0.0228</literal></expr>, <expr><literal type="number">0.45</literal></expr>, <expr><literal type="number">4.0</literal></expr> }</block></expr>,

<expr><index>[<expr><name>AVCOL_TRC_IEC61966_2_1</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="number">1.055</literal></expr>, <expr><literal type="number">0.0031308</literal></expr>, <expr><literal type="number">1.0</literal> <operator>/</operator> <literal type="number">2.4</literal></expr>, <expr><literal type="number">12.92</literal></expr> }</block></expr>,

<expr><index>[<expr><name>AVCOL_TRC_IEC61966_2_4</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="number">1.099</literal></expr>, <expr><literal type="number">0.018</literal></expr>, <expr><literal type="number">0.45</literal></expr>, <expr><literal type="number">4.5</literal></expr> }</block></expr>,

<expr><index>[<expr><name>AVCOL_TRC_BT2020_10</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="number">1.099</literal></expr>, <expr><literal type="number">0.018</literal></expr>, <expr><literal type="number">0.45</literal></expr>, <expr><literal type="number">4.5</literal></expr> }</block></expr>,

<expr><index>[<expr><name>AVCOL_TRC_BT2020_12</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="number">1.0993</literal></expr>, <expr><literal type="number">0.0181</literal></expr>, <expr><literal type="number">0.45</literal></expr>, <expr><literal type="number">4.5</literal></expr> }</block></expr>,

}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>TransferCharacteristics</name></name> <modifier>*</modifier></type>

<name>get_transfer_characteristics</name><parameter_list>(<parameter><decl><type><name><name>enum</name> <name>AVColorTransferCharacteristic</name></name></type> <name>trc</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>TransferCharacteristics</name></name> <modifier>*</modifier></type><name>coeffs</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>trc</name> <operator>&gt;=</operator> <name>AVCOL_TRC_NB</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>coeffs</name> <operator>=</operator> <operator>&amp;</operator><name><name>transfer_characteristics</name><index>[<expr><name>trc</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>coeffs</name><operator>-&gt;</operator><name>alpha</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>coeffs</name></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>WhitepointCoefficients</name></name></type> <name><name>whitepoint_coefficients</name><index>[<expr><name>WP_NB</name></expr>]</index></name> <init>= <expr><block>{

<expr><index>[<expr><name>WP_D65</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="number">0.3127</literal></expr>, <expr><literal type="number">0.3290</literal></expr> }</block></expr>,

<expr><index>[<expr><name>WP_C</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="number">0.3100</literal></expr>, <expr><literal type="number">0.3160</literal></expr> }</block></expr>,

<expr><index>[<expr><name>WP_DCI</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="number">0.3140</literal></expr>, <expr><literal type="number">0.3510</literal></expr> }</block></expr>,

<expr><index>[<expr><name>WP_E</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="number">1</literal><operator>/</operator><literal type="number">3.0f</literal></expr>, <expr><literal type="number">1</literal><operator>/</operator><literal type="number">3.0f</literal></expr> }</block></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>ColorPrimaries</name></name></type> <name><name>color_primaries</name><index>[<expr><name>AVCOL_PRI_NB</name></expr>]</index></name> <init>= <expr><block>{

<expr><index>[<expr><name>AVCOL_PRI_BT709</name></expr>]</index> <operator>=</operator> <block>{ <expr><name>WP_D65</name></expr>, <expr><block>{ <expr><literal type="number">0.640</literal></expr>, <expr><literal type="number">0.330</literal></expr>, <expr><literal type="number">0.300</literal></expr>, <expr><literal type="number">0.600</literal></expr>, <expr><literal type="number">0.150</literal></expr>, <expr><literal type="number">0.060</literal></expr> }</block></expr> }</block></expr>,

<expr><index>[<expr><name>AVCOL_PRI_BT470M</name></expr>]</index> <operator>=</operator> <block>{ <expr><name>WP_C</name></expr>, <expr><block>{ <expr><literal type="number">0.670</literal></expr>, <expr><literal type="number">0.330</literal></expr>, <expr><literal type="number">0.210</literal></expr>, <expr><literal type="number">0.710</literal></expr>, <expr><literal type="number">0.140</literal></expr>, <expr><literal type="number">0.080</literal></expr> }</block></expr> }</block></expr>,

<expr><index>[<expr><name>AVCOL_PRI_BT470BG</name></expr>]</index> <operator>=</operator> <block>{ <expr><name>WP_D65</name></expr>, <expr><block>{ <expr><literal type="number">0.640</literal></expr>, <expr><literal type="number">0.330</literal></expr>, <expr><literal type="number">0.290</literal></expr>, <expr><literal type="number">0.600</literal></expr>, <expr><literal type="number">0.150</literal></expr>, <expr><literal type="number">0.060</literal></expr> }</block></expr> }</block></expr>,

<expr><index>[<expr><name>AVCOL_PRI_SMPTE170M</name></expr>]</index> <operator>=</operator> <block>{ <expr><name>WP_D65</name></expr>, <expr><block>{ <expr><literal type="number">0.630</literal></expr>, <expr><literal type="number">0.340</literal></expr>, <expr><literal type="number">0.310</literal></expr>, <expr><literal type="number">0.595</literal></expr>, <expr><literal type="number">0.155</literal></expr>, <expr><literal type="number">0.070</literal></expr> }</block></expr> }</block></expr>,

<expr><index>[<expr><name>AVCOL_PRI_SMPTE240M</name></expr>]</index> <operator>=</operator> <block>{ <expr><name>WP_D65</name></expr>, <expr><block>{ <expr><literal type="number">0.630</literal></expr>, <expr><literal type="number">0.340</literal></expr>, <expr><literal type="number">0.310</literal></expr>, <expr><literal type="number">0.595</literal></expr>, <expr><literal type="number">0.155</literal></expr>, <expr><literal type="number">0.070</literal></expr> }</block></expr> }</block></expr>,

<expr><index>[<expr><name>AVCOL_PRI_SMPTE428</name></expr>]</index> <operator>=</operator> <block>{ <expr><name>WP_E</name></expr>, <expr><block>{ <expr><literal type="number">0.735</literal></expr>, <expr><literal type="number">0.265</literal></expr>, <expr><literal type="number">0.274</literal></expr>, <expr><literal type="number">0.718</literal></expr>, <expr><literal type="number">0.167</literal></expr>, <expr><literal type="number">0.009</literal></expr> }</block></expr> }</block></expr>,

<expr><index>[<expr><name>AVCOL_PRI_SMPTE431</name></expr>]</index> <operator>=</operator> <block>{ <expr><name>WP_DCI</name></expr>, <expr><block>{ <expr><literal type="number">0.680</literal></expr>, <expr><literal type="number">0.320</literal></expr>, <expr><literal type="number">0.265</literal></expr>, <expr><literal type="number">0.690</literal></expr>, <expr><literal type="number">0.150</literal></expr>, <expr><literal type="number">0.060</literal></expr> }</block></expr> }</block></expr>,

<expr><index>[<expr><name>AVCOL_PRI_SMPTE432</name></expr>]</index> <operator>=</operator> <block>{ <expr><name>WP_D65</name></expr>, <expr><block>{ <expr><literal type="number">0.680</literal></expr>, <expr><literal type="number">0.320</literal></expr>, <expr><literal type="number">0.265</literal></expr>, <expr><literal type="number">0.690</literal></expr>, <expr><literal type="number">0.150</literal></expr>, <expr><literal type="number">0.060</literal></expr> }</block></expr> }</block></expr>,

<expr><index>[<expr><name>AVCOL_PRI_FILM</name></expr>]</index> <operator>=</operator> <block>{ <expr><name>WP_C</name></expr>, <expr><block>{ <expr><literal type="number">0.681</literal></expr>, <expr><literal type="number">0.319</literal></expr>, <expr><literal type="number">0.243</literal></expr>, <expr><literal type="number">0.692</literal></expr>, <expr><literal type="number">0.145</literal></expr>, <expr><literal type="number">0.049</literal></expr> }</block></expr> }</block></expr>,

<expr><index>[<expr><name>AVCOL_PRI_BT2020</name></expr>]</index> <operator>=</operator> <block>{ <expr><name>WP_D65</name></expr>, <expr><block>{ <expr><literal type="number">0.708</literal></expr>, <expr><literal type="number">0.292</literal></expr>, <expr><literal type="number">0.170</literal></expr>, <expr><literal type="number">0.797</literal></expr>, <expr><literal type="number">0.131</literal></expr>, <expr><literal type="number">0.046</literal></expr> }</block></expr> }</block></expr>,

<expr><index>[<expr><name>AVCOL_PRI_JEDEC_P22</name></expr>]</index> <operator>=</operator> <block>{ <expr><name>WP_D65</name></expr>, <expr><block>{ <expr><literal type="number">0.630</literal></expr>, <expr><literal type="number">0.340</literal></expr>, <expr><literal type="number">0.295</literal></expr>, <expr><literal type="number">0.605</literal></expr>, <expr><literal type="number">0.155</literal></expr>, <expr><literal type="number">0.077</literal></expr> }</block></expr> }</block></expr>,

}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>ColorPrimaries</name></name> <modifier>*</modifier></type><name>get_color_primaries</name><parameter_list>(<parameter><decl><type><name><name>enum</name> <name>AVColorPrimaries</name></name></type> <name>prm</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>ColorPrimaries</name></name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>prm</name> <operator>&gt;=</operator> <name>AVCOL_PRI_NB</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <operator>&amp;</operator><name><name>color_primaries</name><index>[<expr><name>prm</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>p</name><operator>-&gt;</operator><name>coeff</name><operator>.</operator><name>xr</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>p</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>fill_gamma_table</name><parameter_list>(<parameter><decl><type><name>ColorSpaceContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>in_alpha</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>in_txchr</name><operator>-&gt;</operator><name>alpha</name></name></expr></init></decl>, <decl><type ref="prev"/><name>in_beta</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>in_txchr</name><operator>-&gt;</operator><name>beta</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>in_gamma</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>in_txchr</name><operator>-&gt;</operator><name>gamma</name></name></expr></init></decl>, <decl><type ref="prev"/><name>in_delta</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>in_txchr</name><operator>-&gt;</operator><name>delta</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>in_ialpha</name> <init>= <expr><literal type="number">1.0</literal> <operator>/</operator> <name>in_alpha</name></expr></init></decl>, <decl><type ref="prev"/><name>in_igamma</name> <init>= <expr><literal type="number">1.0</literal> <operator>/</operator> <name>in_gamma</name></expr></init></decl>, <decl><type ref="prev"/><name>in_idelta</name> <init>= <expr><literal type="number">1.0</literal> <operator>/</operator> <name>in_delta</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>out_alpha</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>out_txchr</name><operator>-&gt;</operator><name>alpha</name></name></expr></init></decl>, <decl><type ref="prev"/><name>out_beta</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>out_txchr</name><operator>-&gt;</operator><name>beta</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>out_gamma</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>out_txchr</name><operator>-&gt;</operator><name>gamma</name></name></expr></init></decl>, <decl><type ref="prev"/><name>out_delta</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>out_txchr</name><operator>-&gt;</operator><name>delta</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>lin_lut</name></name> <operator>=</operator> <call><name>av_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>lin_lut</name></name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <literal type="number">32768</literal> <operator>*</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>lin_lut</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>delin_lut</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>lin_lut</name><index>[<expr><literal type="number">32768</literal></expr>]</index></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <literal type="number">32768</literal></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>double</name></type> <name>v</name> <init>= <expr><operator>(</operator><name>n</name> <operator>-</operator> <literal type="number">2048.0</literal><operator>)</operator> <operator>/</operator> <literal type="number">28672.0</literal></expr></init></decl>, <decl><type ref="prev"/><name>d</name></decl>, <decl><type ref="prev"/><name>l</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>v</name> <operator>&lt;=</operator> <operator>-</operator><name>out_beta</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>d</name> <operator>=</operator> <operator>-</operator><name>out_alpha</name> <operator>*</operator> <call><name>pow</name><argument_list>(<argument><expr><operator>-</operator><name>v</name></expr></argument>, <argument><expr><name>out_gamma</name></expr></argument>)</argument_list></call> <operator>+</operator> <operator>(</operator><name>out_alpha</name> <operator>-</operator> <literal type="number">1.0</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>v</name> <operator>&lt;</operator> <name>out_beta</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>d</name> <operator>=</operator> <name>out_delta</name> <operator>*</operator> <name>v</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>d</name> <operator>=</operator> <name>out_alpha</name> <operator>*</operator> <call><name>pow</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>out_gamma</name></expr></argument>)</argument_list></call> <operator>-</operator> <operator>(</operator><name>out_alpha</name> <operator>-</operator> <literal type="number">1.0</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>delin_lut</name><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <call><name>av_clip_int16</name><argument_list>(<argument><expr><call><name>lrint</name><argument_list>(<argument><expr><name>d</name> <operator>*</operator> <literal type="number">28672.0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>v</name> <operator>&lt;=</operator> <operator>-</operator><name>in_beta</name> <operator>*</operator> <name>in_delta</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>l</name> <operator>=</operator> <operator>-</operator><call><name>pow</name><argument_list>(<argument><expr><operator>(</operator><literal type="number">1.0</literal> <operator>-</operator> <name>in_alpha</name> <operator>-</operator> <name>v</name><operator>)</operator> <operator>*</operator> <name>in_ialpha</name></expr></argument>, <argument><expr><name>in_igamma</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>v</name> <operator>&lt;</operator> <name>in_beta</name> <operator>*</operator> <name>in_delta</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>l</name> <operator>=</operator> <name>v</name> <operator>*</operator> <name>in_idelta</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>l</name> <operator>=</operator> <call><name>pow</name><argument_list>(<argument><expr><operator>(</operator><name>v</name> <operator>+</operator> <name>in_alpha</name> <operator>-</operator> <literal type="number">1.0</literal><operator>)</operator> <operator>*</operator> <name>in_ialpha</name></expr></argument>, <argument><expr><name>in_igamma</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>lin_lut</name><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <call><name>av_clip_int16</name><argument_list>(<argument><expr><call><name>lrint</name><argument_list>(<argument><expr><name>l</name> <operator>*</operator> <literal type="number">28672.0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>fill_whitepoint_conv_table</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name><name>out</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>WhitepointAdaptation</name></name></type> <name>wp_adapt</name></decl></parameter>,

<parameter><decl><type><name><name>enum</name> <name>Whitepoint</name></name></type> <name>src</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>Whitepoint</name></name></type> <name>dst</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>double</name></type> <name><name>ma_tbl</name><index>[<expr><name>NB_WP_ADAPT_NON_IDENTITY</name></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{

<expr><index>[<expr><name>WP_ADAPT_BRADFORD</name></expr>]</index> <operator>=</operator> <block>{

<expr><block>{ <expr><literal type="number">0.8951</literal></expr>, <expr><literal type="number">0.2664</literal></expr>, <expr><operator>-</operator><literal type="number">0.1614</literal></expr> }</block></expr>,

<expr><block>{ <expr><operator>-</operator><literal type="number">0.7502</literal></expr>, <expr><literal type="number">1.7135</literal></expr>, <expr><literal type="number">0.0367</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0.0389</literal></expr>, <expr><operator>-</operator><literal type="number">0.0685</literal></expr>, <expr><literal type="number">1.0296</literal></expr> }</block></expr>,

}</block></expr>, <expr><index>[<expr><name>WP_ADAPT_VON_KRIES</name></expr>]</index> <operator>=</operator> <block>{

<expr><block>{ <expr><literal type="number">0.40024</literal></expr>, <expr><literal type="number">0.70760</literal></expr>, <expr><operator>-</operator><literal type="number">0.08081</literal></expr> }</block></expr>,

<expr><block>{ <expr><operator>-</operator><literal type="number">0.22630</literal></expr>, <expr><literal type="number">1.16532</literal></expr>, <expr><literal type="number">0.04570</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0.00000</literal></expr>, <expr><literal type="number">0.00000</literal></expr>, <expr><literal type="number">0.91822</literal></expr> }</block></expr>,

}</block></expr>,

}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><specifier>const</specifier> <call><name>double</name> <argument_list>(<argument><expr><operator>*</operator><name>ma</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">3</literal></expr>]</index> <operator>=</operator> <name><name>ma_tbl</name><index>[<expr><name>wp_adapt</name></expr>]</index></name></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>WhitepointCoefficients</name></name> <modifier>*</modifier></type><name>wp_src</name> <init>= <expr><operator>&amp;</operator><name><name>whitepoint_coefficients</name><index>[<expr><name>src</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>zw_src</name> <init>= <expr><literal type="number">1.0</literal> <operator>-</operator> <name><name>wp_src</name><operator>-&gt;</operator><name>xw</name></name> <operator>-</operator> <name><name>wp_src</name><operator>-&gt;</operator><name>yw</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>WhitepointCoefficients</name></name> <modifier>*</modifier></type><name>wp_dst</name> <init>= <expr><operator>&amp;</operator><name><name>whitepoint_coefficients</name><index>[<expr><name>dst</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>zw_dst</name> <init>= <expr><literal type="number">1.0</literal> <operator>-</operator> <name><name>wp_dst</name><operator>-&gt;</operator><name>xw</name></name> <operator>-</operator> <name><name>wp_dst</name><operator>-&gt;</operator><name>yw</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name><name>mai</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>fac</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>tmp</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>rs</name></decl>, <decl><type ref="prev"/><name>gs</name></decl>, <decl><type ref="prev"/><name>bs</name></decl>, <decl><type ref="prev"/><name>rd</name></decl>, <decl><type ref="prev"/><name>gd</name></decl>, <decl><type ref="prev"/><name>bd</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ff_matrix_invert_3x3</name><argument_list>(<argument><expr><name>ma</name></expr></argument>, <argument><expr><name>mai</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>rs</name> <operator>=</operator> <name><name>ma</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name><name>wp_src</name><operator>-&gt;</operator><name>xw</name></name> <operator>+</operator> <name><name>ma</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name><name>wp_src</name><operator>-&gt;</operator><name>yw</name></name> <operator>+</operator> <name><name>ma</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>*</operator> <name>zw_src</name></expr>;</expr_stmt>

<expr_stmt><expr><name>gs</name> <operator>=</operator> <name><name>ma</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name><name>wp_src</name><operator>-&gt;</operator><name>xw</name></name> <operator>+</operator> <name><name>ma</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name><name>wp_src</name><operator>-&gt;</operator><name>yw</name></name> <operator>+</operator> <name><name>ma</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>*</operator> <name>zw_src</name></expr>;</expr_stmt>

<expr_stmt><expr><name>bs</name> <operator>=</operator> <name><name>ma</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name><name>wp_src</name><operator>-&gt;</operator><name>xw</name></name> <operator>+</operator> <name><name>ma</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name><name>wp_src</name><operator>-&gt;</operator><name>yw</name></name> <operator>+</operator> <name><name>ma</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>*</operator> <name>zw_src</name></expr>;</expr_stmt>

<expr_stmt><expr><name>rd</name> <operator>=</operator> <name><name>ma</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name><name>wp_dst</name><operator>-&gt;</operator><name>xw</name></name> <operator>+</operator> <name><name>ma</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name><name>wp_dst</name><operator>-&gt;</operator><name>yw</name></name> <operator>+</operator> <name><name>ma</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>*</operator> <name>zw_dst</name></expr>;</expr_stmt>

<expr_stmt><expr><name>gd</name> <operator>=</operator> <name><name>ma</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name><name>wp_dst</name><operator>-&gt;</operator><name>xw</name></name> <operator>+</operator> <name><name>ma</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name><name>wp_dst</name><operator>-&gt;</operator><name>yw</name></name> <operator>+</operator> <name><name>ma</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>*</operator> <name>zw_dst</name></expr>;</expr_stmt>

<expr_stmt><expr><name>bd</name> <operator>=</operator> <name><name>ma</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name><name>wp_dst</name><operator>-&gt;</operator><name>xw</name></name> <operator>+</operator> <name><name>ma</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name><name>wp_dst</name><operator>-&gt;</operator><name>yw</name></name> <operator>+</operator> <name><name>ma</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>*</operator> <name>zw_dst</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fac</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>rd</name> <operator>/</operator> <name>rs</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fac</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>gd</name> <operator>/</operator> <name>gs</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fac</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>bd</name> <operator>/</operator> <name>bs</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fac</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>fac</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>fac</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>fac</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>fac</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>fac</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0.0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_matrix_mul_3x3</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>ma</name></expr></argument>, <argument><expr><name>fac</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_matrix_mul_3x3</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>mai</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>apply_lut</name><parameter_list>(<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name><name>buf</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name>lut</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>, <decl><type ref="prev"/><name>x</name></decl>, <decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>buf</name><index>[<expr><name>n</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>h</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>w</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <name><name>lut</name><index>[<expr><call><name>av_clip_uintp2</name><argument_list>(<argument><expr><literal type="number">2048</literal> <operator>+</operator> <name><name>data</name><index>[<expr><name>x</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">15</literal></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>data</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></function>

<typedef>typedef <type><struct>struct <name>ThreadData</name> <block>{

<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>in</name></decl>, <modifier>*</modifier><name>out</name>;</decl_stmt>

<decl_stmt><decl><type><name>ptrdiff_t</name></type> <name><name>in_linesize</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>, <name><name>out_linesize</name><index>[<expr><literal type="number">3</literal></expr>]</index></name>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>in_ss_h</name></decl>, <name>out_ss_h</name>;</decl_stmt>

}</block></struct></type> <name>ThreadData</name>;</typedef>

<function><type><specifier>static</specifier> <name>int</name></type> <name>convert</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>job_nr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n_jobs</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>ThreadData</name> <modifier>*</modifier></type><name>td</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ColorSpaceContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name><name>in_data</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name><name>out_data</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier></type><name><name>rgb</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>h_in</name> <init>= <expr><operator>(</operator><name><name>td</name><operator>-&gt;</operator><name>in</name><operator>-&gt;</operator><name>height</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>h1</name> <init>= <expr><literal type="number">2</literal> <operator>*</operator> <operator>(</operator><name>job_nr</name> <operator>*</operator> <name>h_in</name> <operator>/</operator> <name>n_jobs</name><operator>)</operator></expr></init></decl>, <decl><type ref="prev"/><name>h2</name> <init>= <expr><literal type="number">2</literal> <operator>*</operator> <operator>(</operator><operator>(</operator><name>job_nr</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>h_in</name> <operator>/</operator> <name>n_jobs</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>w</name> <init>= <expr><name><name>td</name><operator>-&gt;</operator><name>in</name><operator>-&gt;</operator><name>width</name></name></expr></init></decl>, <decl><type ref="prev"/><name>h</name> <init>= <expr><name>h2</name> <operator>-</operator> <name>h1</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>in_data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>td</name><operator>-&gt;</operator><name>in</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>td</name><operator>-&gt;</operator><name>in_linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name>h1</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>in_data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>td</name><operator>-&gt;</operator><name>in</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>td</name><operator>-&gt;</operator><name>in_linesize</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>h1</name> <operator>&gt;&gt;</operator> <name><name>td</name><operator>-&gt;</operator><name>in_ss_h</name></name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>in_data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>td</name><operator>-&gt;</operator><name>in</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <name><name>td</name><operator>-&gt;</operator><name>in_linesize</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>h1</name> <operator>&gt;&gt;</operator> <name><name>td</name><operator>-&gt;</operator><name>in_ss_h</name></name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out_data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>td</name><operator>-&gt;</operator><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>td</name><operator>-&gt;</operator><name>out_linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name>h1</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out_data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>td</name><operator>-&gt;</operator><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>td</name><operator>-&gt;</operator><name>out_linesize</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>h1</name> <operator>&gt;&gt;</operator> <name><name>td</name><operator>-&gt;</operator><name>out_ss_h</name></name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out_data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>td</name><operator>-&gt;</operator><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <name><name>td</name><operator>-&gt;</operator><name>out_linesize</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>h1</name> <operator>&gt;&gt;</operator> <name><name>td</name><operator>-&gt;</operator><name>out_ss_h</name></name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rgb</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>rgb</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>rgb_stride</name></name> <operator>*</operator> <name>h1</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rgb</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>rgb</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>rgb_stride</name></name> <operator>*</operator> <name>h1</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rgb</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>rgb</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>rgb_stride</name></name> <operator>*</operator> <name>h1</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>yuv2yuv_fastmode</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>yuv2yuv</name></name><argument_list>(<argument><expr><name>out_data</name></expr></argument>, <argument><expr><name><name>td</name><operator>-&gt;</operator><name>out_linesize</name></name></expr></argument>, <argument><expr><name>in_data</name></expr></argument>, <argument><expr><name><name>td</name><operator>-&gt;</operator><name>in_linesize</name></name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>yuv2yuv_coeffs</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>yuv_offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>yuv2rgb</name></name><argument_list>(<argument><expr><name>rgb</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>rgb_stride</name></name></expr></argument>, <argument><expr><name>in_data</name></expr></argument>, <argument><expr><name><name>td</name><operator>-&gt;</operator><name>in_linesize</name></name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>yuv2rgb_coeffs</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>yuv_offset</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>rgb2rgb_passthrough</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>apply_lut</name><argument_list>(<argument><expr><name>rgb</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>rgb_stride</name></name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>lin_lut</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>lrgb2lrgb_passthrough</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>dsp</name><operator>.</operator><name>multiply3x3</name></name><argument_list>(<argument><expr><name>rgb</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>rgb_stride</name></name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>lrgb2lrgb_coeffs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>apply_lut</name><argument_list>(<argument><expr><name>rgb</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>rgb_stride</name></name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>delin_lut</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>dither</name></name> <operator>==</operator> <name>DITHER_FSB</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>rgb2yuv_fsb</name></name><argument_list>(<argument><expr><name>out_data</name></expr></argument>, <argument><expr><name><name>td</name><operator>-&gt;</operator><name>out_linesize</name></name></expr></argument>, <argument><expr><name>rgb</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>rgb_stride</name></name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>rgb2yuv_coeffs</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>yuv_offset</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>dither_scratch</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>rgb2yuv</name></name><argument_list>(<argument><expr><name>out_data</name></expr></argument>, <argument><expr><name><name>td</name><operator>-&gt;</operator><name>out_linesize</name></name></expr></argument>, <argument><expr><name>rgb</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>rgb_stride</name></name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>rgb2yuv_coeffs</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>yuv_offset</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>get_range_off</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>off</name></decl></parameter>,

<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>y_rng</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>uv_rng</name></decl></parameter>,

<parameter><decl><type><name><name>enum</name> <name>AVColorRange</name></name></type> <name>rng</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>depth</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<switch>switch <condition>(<expr><name>rng</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>AVCOL_RANGE_UNSPECIFIED</name></expr>:</case> <block>{<block_content>

<decl_stmt><decl><type><name>ColorSpaceContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>did_warn_range</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Input range not set, assuming tv/mpeg\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>did_warn_range</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block>

<case>case <expr><name>AVCOL_RANGE_MPEG</name></expr>:</case>

<expr_stmt><expr><operator>*</operator><name>off</name> <operator>=</operator> <literal type="number">16</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>depth</name> <operator>-</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>y_rng</name> <operator>=</operator> <literal type="number">219</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>depth</name> <operator>-</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>uv_rng</name> <operator>=</operator> <literal type="number">224</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>depth</name> <operator>-</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AVCOL_RANGE_JPEG</name></expr>:</case>

<expr_stmt><expr><operator>*</operator><name>off</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>y_rng</name> <operator>=</operator> <operator>*</operator><name>uv_rng</name> <operator>=</operator> <operator>(</operator><literal type="number">256</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>depth</name> <operator>-</operator> <literal type="number">8</literal><operator>)</operator><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></switch>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>create_filtergraph</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>AVFrame</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>AVFrame</name> <modifier>*</modifier></type><name>out</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ColorSpaceContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>AVPixFmtDescriptor</name> <modifier>*</modifier></type><name>in_desc</name> <init>= <expr><call><name>av_pix_fmt_desc_get</name><argument_list>(<argument><expr><name><name>in</name><operator>-&gt;</operator><name>format</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>AVPixFmtDescriptor</name> <modifier>*</modifier></type><name>out_desc</name> <init>= <expr><call><name>av_pix_fmt_desc_get</name><argument_list>(<argument><expr><name><name>out</name><operator>-&gt;</operator><name>format</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>emms</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>m</name></decl>, <decl><type ref="prev"/><name>n</name></decl>, <decl><type ref="prev"/><name>o</name></decl>, <decl><type ref="prev"/><name>res</name></decl>, <decl><type ref="prev"/><name>fmt_identical</name></decl>, <decl><type ref="prev"/><name>redo_yuv2rgb</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>redo_rgb2yuv</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>supported_depth</name><parameter_list>(<parameter><type><name>d</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((d) == 8 || (d) == 10 || (d) == 12)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>supported_subsampling</name><parameter_list>(<parameter><type><name>lcw</name></type></parameter>, <parameter><type><name>lch</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((lcw) == 0 &amp;&amp; (lch) == 0) || ((lcw) == 1 &amp;&amp; (lch) == 0) || ((lcw) == 1 &amp;&amp; (lch) == 1))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>supported_format</name><parameter_list>(<parameter><type><name>d</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((d) != NULL &amp;&amp; (d)-&gt;nb_components == 3 &amp;&amp; !((d)-&gt;flags &amp; AV_PIX_FMT_FLAG_RGB) &amp;&amp; supported_depth((d)-&gt;comp[0].depth) &amp;&amp; supported_subsampling((d)-&gt;log2_chroma_w, (d)-&gt;log2_chroma_h))</cpp:value></cpp:define>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>supported_format</name><argument_list>(<argument><expr><name>in_desc</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"Unsupported input format %d (%s) or bitdepth (%d)\n"</literal></expr></argument>,

<argument><expr><name><name>in</name><operator>-&gt;</operator><name>format</name></name></expr></argument>, <argument><expr><call><name>av_get_pix_fmt_name</name><argument_list>(<argument><expr><name><name>in</name><operator>-&gt;</operator><name>format</name></name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><ternary><condition><expr><name>in_desc</name></expr> ?</condition><then> <expr><name><name>in_desc</name><operator>-&gt;</operator><name>comp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>depth</name></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>supported_format</name><argument_list>(<argument><expr><name>out_desc</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"Unsupported output format %d (%s) or bitdepth (%d)\n"</literal></expr></argument>,

<argument><expr><name><name>out</name><operator>-&gt;</operator><name>format</name></name></expr></argument>, <argument><expr><call><name>av_get_pix_fmt_name</name><argument_list>(<argument><expr><name><name>out</name><operator>-&gt;</operator><name>format</name></name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><ternary><condition><expr><name>out_desc</name></expr> ?</condition><then> <expr><name><name>out_desc</name><operator>-&gt;</operator><name>comp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>depth</name></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>in</name><operator>-&gt;</operator><name>color_primaries</name></name> <operator>!=</operator> <name><name>s</name><operator>-&gt;</operator><name>in_prm</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>in_primaries</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>out</name><operator>-&gt;</operator><name>color_primaries</name></name> <operator>!=</operator> <name><name>s</name><operator>-&gt;</operator><name>out_prm</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>out_primaries</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>in</name><operator>-&gt;</operator><name>color_trc</name></name> <operator>!=</operator> <name><name>s</name><operator>-&gt;</operator><name>in_trc</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>in_txchr</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>out</name><operator>-&gt;</operator><name>color_trc</name></name> <operator>!=</operator> <name><name>s</name><operator>-&gt;</operator><name>out_trc</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>out_txchr</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>in</name><operator>-&gt;</operator><name>colorspace</name></name> <operator>!=</operator> <name><name>s</name><operator>-&gt;</operator><name>in_csp</name></name> <operator>||</operator>

<name><name>in</name><operator>-&gt;</operator><name>color_range</name></name> <operator>!=</operator> <name><name>s</name><operator>-&gt;</operator><name>in_rng</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>in_lumacoef</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>out</name><operator>-&gt;</operator><name>colorspace</name></name> <operator>!=</operator> <name><name>s</name><operator>-&gt;</operator><name>out_csp</name></name> <operator>||</operator>

<name><name>out</name><operator>-&gt;</operator><name>color_range</name></name> <operator>!=</operator> <name><name>s</name><operator>-&gt;</operator><name>out_rng</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>out_lumacoef</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>out_primaries</name></name> <operator>||</operator> <operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>in_primaries</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>in_prm</name></name> <operator>=</operator> <name><name>in</name><operator>-&gt;</operator><name>color_primaries</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>user_iall</name></name> <operator>!=</operator> <name>CS_UNSPECIFIED</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>in_prm</name></name> <operator>=</operator> <name><name>default_prm</name><index>[<expr><call><name>FFMIN</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>user_iall</name></name></expr></argument>, <argument><expr><name>CS_NB</name></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>user_iprm</name></name> <operator>!=</operator> <name>AVCOL_PRI_UNSPECIFIED</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>in_prm</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>user_iprm</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>in_primaries</name></name> <operator>=</operator> <call><name>get_color_primaries</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>in_prm</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>in_primaries</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"Unsupported input primaries %d (%s)\n"</literal></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>in_prm</name></name></expr></argument>, <argument><expr><call><name>av_color_primaries_name</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>in_prm</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>out_prm</name></name> <operator>=</operator> <name><name>out</name><operator>-&gt;</operator><name>color_primaries</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>out_primaries</name></name> <operator>=</operator> <call><name>get_color_primaries</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>out_prm</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>out_primaries</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>out_prm</name></name> <operator>==</operator> <name>AVCOL_PRI_UNSPECIFIED</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>user_all</name></name> <operator>==</operator> <name>CS_UNSPECIFIED</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Please specify output primaries\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"Unsupported output color property %d\n"</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>user_all</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"Unsupported output primaries %d (%s)\n"</literal></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>out_prm</name></name></expr></argument>, <argument><expr><call><name>av_color_primaries_name</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>out_prm</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>lrgb2lrgb_passthrough</name></name> <operator>=</operator> <operator>!</operator><call><name>memcmp</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>in_primaries</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>out_primaries</name></name></expr></argument>,

<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>in_primaries</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>lrgb2lrgb_passthrough</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>double</name></type> <name><name>rgb2xyz</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>xyz2rgb</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>rgb2rgb</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>WhitepointCoefficients</name></name> <modifier>*</modifier></type><name>wp_out</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>wp_in</name></decl>;</decl_stmt>

<expr_stmt><expr><name>wp_out</name> <operator>=</operator> <operator>&amp;</operator><name><name>whitepoint_coefficients</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>out_primaries</name><operator>-&gt;</operator><name>wp</name></name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>wp_in</name> <operator>=</operator> <operator>&amp;</operator><name><name>whitepoint_coefficients</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>in_primaries</name><operator>-&gt;</operator><name>wp</name></name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_fill_rgb2xyz_table</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>out_primaries</name><operator>-&gt;</operator><name>coeff</name></name></expr></argument>, <argument><expr><name>wp_out</name></expr></argument>, <argument><expr><name>rgb2xyz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_matrix_invert_3x3</name><argument_list>(<argument><expr><name>rgb2xyz</name></expr></argument>, <argument><expr><name>xyz2rgb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_fill_rgb2xyz_table</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>in_primaries</name><operator>-&gt;</operator><name>coeff</name></name></expr></argument>, <argument><expr><name>wp_in</name></expr></argument>, <argument><expr><name>rgb2xyz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>out_primaries</name><operator>-&gt;</operator><name>wp</name></name> <operator>!=</operator> <name><name>s</name><operator>-&gt;</operator><name>in_primaries</name><operator>-&gt;</operator><name>wp</name></name> <operator>&amp;&amp;</operator>

<name><name>s</name><operator>-&gt;</operator><name>wp_adapt</name></name> <operator>!=</operator> <name>WP_ADAPT_IDENTITY</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>double</name></type> <name><name>wpconv</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>tmp</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>fill_whitepoint_conv_table</name><argument_list>(<argument><expr><name>wpconv</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>wp_adapt</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>in_primaries</name><operator>-&gt;</operator><name>wp</name></name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>out_primaries</name><operator>-&gt;</operator><name>wp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_matrix_mul_3x3</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>rgb2xyz</name></expr></argument>, <argument><expr><name>wpconv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_matrix_mul_3x3</name><argument_list>(<argument><expr><name>rgb2rgb</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>xyz2rgb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>ff_matrix_mul_3x3</name><argument_list>(<argument><expr><name>rgb2rgb</name></expr></argument>, <argument><expr><name>rgb2xyz</name></expr></argument>, <argument><expr><name>xyz2rgb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<for>for <control>(<init><expr><name>m</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>m</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>m</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>lrgb2lrgb_coeffs</name><index>[<expr><name>m</name></expr>]</index><index>[<expr><name>n</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>lrint</name><argument_list>(<argument><expr><literal type="number">16384.0</literal> <operator>*</operator> <name><name>rgb2rgb</name><index>[<expr><name>m</name></expr>]</index><index>[<expr><name>n</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>o</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>o</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>o</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>lrgb2lrgb_coeffs</name><index>[<expr><name>m</name></expr>]</index><index>[<expr><name>n</name></expr>]</index><index>[<expr><name>o</name></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>lrgb2lrgb_coeffs</name><index>[<expr><name>m</name></expr>]</index><index>[<expr><name>n</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></for></block_content></block></for>

<expr_stmt><expr><name>emms</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>in_txchr</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>lin_lut</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>in_trc</name></name> <operator>=</operator> <name><name>in</name><operator>-&gt;</operator><name>color_trc</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>user_iall</name></name> <operator>!=</operator> <name>CS_UNSPECIFIED</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>in_trc</name></name> <operator>=</operator> <name><name>default_trc</name><index>[<expr><call><name>FFMIN</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>user_iall</name></name></expr></argument>, <argument><expr><name>CS_NB</name></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>user_itrc</name></name> <operator>!=</operator> <name>AVCOL_TRC_UNSPECIFIED</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>in_trc</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>user_itrc</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>in_txchr</name></name> <operator>=</operator> <call><name>get_transfer_characteristics</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>in_trc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>in_txchr</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"Unsupported input transfer characteristics %d (%s)\n"</literal></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>in_trc</name></name></expr></argument>, <argument><expr><call><name>av_color_transfer_name</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>in_trc</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>out_txchr</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>lin_lut</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>out_trc</name></name> <operator>=</operator> <name><name>out</name><operator>-&gt;</operator><name>color_trc</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>out_txchr</name></name> <operator>=</operator> <call><name>get_transfer_characteristics</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>out_trc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>out_txchr</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>out_trc</name></name> <operator>==</operator> <name>AVCOL_TRC_UNSPECIFIED</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>user_all</name></name> <operator>==</operator> <name>CS_UNSPECIFIED</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"Please specify output transfer characteristics\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"Unsupported output color property %d\n"</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>user_all</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"Unsupported output transfer characteristics %d (%s)\n"</literal></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>out_trc</name></name></expr></argument>, <argument><expr><call><name>av_color_transfer_name</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>out_trc</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>rgb2rgb_passthrough</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>fast_mode</name></name> <operator>||</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>lrgb2lrgb_passthrough</name></name> <operator>&amp;&amp;</operator>

<operator>!</operator><call><name>memcmp</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>in_txchr</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>out_txchr</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>in_txchr</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>rgb2rgb_passthrough</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>lin_lut</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>fill_gamma_table</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>res</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>res</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>emms</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>in_lumacoef</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>in_csp</name></name> <operator>=</operator> <name><name>in</name><operator>-&gt;</operator><name>colorspace</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>user_iall</name></name> <operator>!=</operator> <name>CS_UNSPECIFIED</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>in_csp</name></name> <operator>=</operator> <name><name>default_csp</name><index>[<expr><call><name>FFMIN</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>user_iall</name></name></expr></argument>, <argument><expr><name>CS_NB</name></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>user_icsp</name></name> <operator>!=</operator> <name>AVCOL_SPC_UNSPECIFIED</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>in_csp</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>user_icsp</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>in_rng</name></name> <operator>=</operator> <name><name>in</name><operator>-&gt;</operator><name>color_range</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>user_irng</name></name> <operator>!=</operator> <name>AVCOL_RANGE_UNSPECIFIED</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>in_rng</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>user_irng</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>in_lumacoef</name></name> <operator>=</operator> <call><name>ff_get_luma_coefficients</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>in_csp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>in_lumacoef</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"Unsupported input colorspace %d (%s)\n"</literal></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>in_csp</name></name></expr></argument>, <argument><expr><call><name>av_color_space_name</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>in_csp</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>redo_yuv2rgb</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>out_lumacoef</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>out_csp</name></name> <operator>=</operator> <name><name>out</name><operator>-&gt;</operator><name>colorspace</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>out_rng</name></name> <operator>=</operator> <name><name>out</name><operator>-&gt;</operator><name>color_range</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>out_lumacoef</name></name> <operator>=</operator> <call><name>ff_get_luma_coefficients</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>out_csp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>out_lumacoef</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>out_csp</name></name> <operator>==</operator> <name>AVCOL_SPC_UNSPECIFIED</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>user_all</name></name> <operator>==</operator> <name>CS_UNSPECIFIED</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"Please specify output transfer characteristics\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"Unsupported output color property %d\n"</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>user_all</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"Unsupported output transfer characteristics %d (%s)\n"</literal></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>out_csp</name></name></expr></argument>, <argument><expr><call><name>av_color_space_name</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>out_csp</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>redo_rgb2yuv</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>fmt_identical</name> <operator>=</operator> <name><name>in_desc</name><operator>-&gt;</operator><name>log2_chroma_h</name></name> <operator>==</operator> <name><name>out_desc</name><operator>-&gt;</operator><name>log2_chroma_h</name></name> <operator>&amp;&amp;</operator>

<name><name>in_desc</name><operator>-&gt;</operator><name>log2_chroma_w</name></name> <operator>==</operator> <name><name>out_desc</name><operator>-&gt;</operator><name>log2_chroma_w</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>yuv2yuv_fastmode</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>rgb2rgb_passthrough</name></name> <operator>&amp;&amp;</operator> <name>fmt_identical</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>yuv2yuv_passthrough</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>yuv2yuv_fastmode</name></name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>in_rng</name></name> <operator>==</operator> <name><name>s</name><operator>-&gt;</operator><name>out_rng</name></name> <operator>&amp;&amp;</operator>

<operator>!</operator><call><name>memcmp</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>in_lumacoef</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>out_lumacoef</name></name></expr></argument>,

<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>in_lumacoef</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>

<name><name>in_desc</name><operator>-&gt;</operator><name>comp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>depth</name> <operator>==</operator> <name><name>out_desc</name><operator>-&gt;</operator><name>comp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>depth</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>yuv2yuv_passthrough</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>redo_yuv2rgb</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>double</name></type> <name><name>rgb2yuv</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>, <argument_list>(<argument><expr><operator>*</operator><name>yuv2rgb</name></expr></argument>)</argument_list>[3] <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>yuv2rgb_dbl_coeffs</name></name></expr></init>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>off</name></decl>, <decl><type ref="prev"/><name>bits</name></decl>, <decl><type ref="prev"/><name>in_rng</name></decl>;</decl_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>get_range_off</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>off</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>in_y_rng</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>in_uv_rng</name></name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>in_rng</name></name></expr></argument>, <argument><expr><name><name>in_desc</name><operator>-&gt;</operator><name>comp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>depth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>res</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"Unsupported input color range %d (%s)\n"</literal></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>in_rng</name></name></expr></argument>, <argument><expr><call><name>av_color_range_name</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>in_rng</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>res</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>yuv_offset</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <name>off</name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>ff_fill_rgb2yuv_table</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>in_lumacoef</name></name></expr></argument>, <argument><expr><name>rgb2yuv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_matrix_invert_3x3</name><argument_list>(<argument><expr><name>rgb2yuv</name></expr></argument>, <argument><expr><name>yuv2rgb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>bits</name> <operator>=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name><name>in_desc</name><operator>-&gt;</operator><name>comp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>depth</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>in_rng</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>in_y_rng</name></name></expr><operator>,</operator> <expr><name>m</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>m</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>m</name><operator>++</operator></expr><operator>,</operator> <expr><name>in_rng</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>in_uv_rng</name></name></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>yuv2rgb_coeffs</name><index>[<expr><name>n</name></expr>]</index><index>[<expr><name>m</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>lrint</name><argument_list>(<argument><expr><literal type="number">28672</literal> <operator>*</operator> <name>bits</name> <operator>*</operator> <name><name>yuv2rgb</name><index>[<expr><name>n</name></expr>]</index><index>[<expr><name>m</name></expr>]</index></name> <operator>/</operator> <name>in_rng</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>o</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>o</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>o</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>yuv2rgb_coeffs</name><index>[<expr><name>n</name></expr>]</index><index>[<expr><name>m</name></expr>]</index><index>[<expr><name>o</name></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>yuv2rgb_coeffs</name><index>[<expr><name>n</name></expr>]</index><index>[<expr><name>m</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></for>

</block_content>}</block></for>

<expr_stmt><expr><call><name>av_assert2</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>yuv2rgb_coeffs</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_assert2</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>yuv2rgb_coeffs</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_assert2</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>yuv2rgb_coeffs</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name><name>s</name><operator>-&gt;</operator><name>yuv2rgb_coeffs</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_assert2</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>yuv2rgb_coeffs</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name><name>s</name><operator>-&gt;</operator><name>yuv2rgb_coeffs</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>yuv2rgb</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>dsp</name><operator>.</operator><name>yuv2rgb</name><index>[<expr><operator>(</operator><name><name>in_desc</name><operator>-&gt;</operator><name>comp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>depth</name> <operator>-</operator> <literal type="number">8</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>]</index>

<index>[<expr><name><name>in_desc</name><operator>-&gt;</operator><name>log2_chroma_h</name></name> <operator>+</operator> <name><name>in_desc</name><operator>-&gt;</operator><name>log2_chroma_w</name></name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>emms</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>redo_rgb2yuv</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>double</name> <argument_list>(<argument><expr><operator>*</operator><name>rgb2yuv</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">3</literal></expr>]</index> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>rgb2yuv_dbl_coeffs</name></name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>off</name></decl>, <decl><type ref="prev"/><name>out_rng</name></decl>, <decl><type ref="prev"/><name>bits</name></decl>;</decl_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>get_range_off</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>off</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>out_y_rng</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>out_uv_rng</name></name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>out_rng</name></name></expr></argument>, <argument><expr><name><name>out_desc</name><operator>-&gt;</operator><name>comp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>depth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>res</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"Unsupported output color range %d (%s)\n"</literal></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>out_rng</name></name></expr></argument>, <argument><expr><call><name>av_color_range_name</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>out_rng</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>res</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>yuv_offset</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <name>off</name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>ff_fill_rgb2yuv_table</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>out_lumacoef</name></name></expr></argument>, <argument><expr><name>rgb2yuv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>bits</name> <operator>=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><literal type="number">29</literal> <operator>-</operator> <name><name>out_desc</name><operator>-&gt;</operator><name>comp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>depth</name><operator>)</operator></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>out_rng</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>out_y_rng</name></name></expr><operator>,</operator> <expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr><operator>,</operator> <expr><name>out_rng</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>out_uv_rng</name></name></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>m</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>m</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>m</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>rgb2yuv_coeffs</name><index>[<expr><name>n</name></expr>]</index><index>[<expr><name>m</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>lrint</name><argument_list>(<argument><expr><name>bits</name> <operator>*</operator> <name>out_rng</name> <operator>*</operator> <name><name>rgb2yuv</name><index>[<expr><name>n</name></expr>]</index><index>[<expr><name>m</name></expr>]</index></name> <operator>/</operator> <literal type="number">28672</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>o</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>o</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>o</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>rgb2yuv_coeffs</name><index>[<expr><name>n</name></expr>]</index><index>[<expr><name>m</name></expr>]</index><index>[<expr><name>o</name></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>rgb2yuv_coeffs</name><index>[<expr><name>n</name></expr>]</index><index>[<expr><name>m</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></for>

</block_content>}</block></for>

<expr_stmt><expr><call><name>av_assert2</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>rgb2yuv_coeffs</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name><name>s</name><operator>-&gt;</operator><name>rgb2yuv_coeffs</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>rgb2yuv</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>dsp</name><operator>.</operator><name>rgb2yuv</name><index>[<expr><operator>(</operator><name><name>out_desc</name><operator>-&gt;</operator><name>comp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>depth</name> <operator>-</operator> <literal type="number">8</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>]</index>

<index>[<expr><name><name>out_desc</name><operator>-&gt;</operator><name>log2_chroma_h</name></name> <operator>+</operator> <name><name>out_desc</name><operator>-&gt;</operator><name>log2_chroma_w</name></name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>rgb2yuv_fsb</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>dsp</name><operator>.</operator><name>rgb2yuv_fsb</name><index>[<expr><operator>(</operator><name><name>out_desc</name><operator>-&gt;</operator><name>comp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>depth</name> <operator>-</operator> <literal type="number">8</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>]</index>

<index>[<expr><name><name>out_desc</name><operator>-&gt;</operator><name>log2_chroma_h</name></name> <operator>+</operator> <name><name>out_desc</name><operator>-&gt;</operator><name>log2_chroma_w</name></name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>emms</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>yuv2yuv_fastmode</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name>redo_yuv2rgb</name> <operator>||</operator> <name>redo_rgb2yuv</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>idepth</name> <init>= <expr><name><name>in_desc</name><operator>-&gt;</operator><name>comp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>depth</name></expr></init></decl>, <decl><type ref="prev"/><name>odepth</name> <init>= <expr><name><name>out_desc</name><operator>-&gt;</operator><name>comp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>depth</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>double</name> <argument_list>(<argument><expr><operator>*</operator><name>rgb2yuv</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">3</literal></expr>]</index> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>rgb2yuv_dbl_coeffs</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>double</name> <argument_list>(<argument><expr><operator>*</operator><name>yuv2rgb</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">3</literal></expr>]</index> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>yuv2rgb_dbl_coeffs</name></name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>double</name></type> <name><name>yuv2yuv</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>in_rng</name></decl>, <decl><type ref="prev"/><name>out_rng</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ff_matrix_mul_3x3</name><argument_list>(<argument><expr><name>yuv2yuv</name></expr></argument>, <argument><expr><name>yuv2rgb</name></expr></argument>, <argument><expr><name>rgb2yuv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>out_rng</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>out_y_rng</name></name></expr><operator>,</operator> <expr><name>m</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>m</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>m</name><operator>++</operator></expr><operator>,</operator> <expr><name>out_rng</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>out_uv_rng</name></name></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>in_rng</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>in_y_rng</name></name></expr><operator>,</operator> <expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr><operator>,</operator> <expr><name>in_rng</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>in_uv_rng</name></name></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>yuv2yuv_coeffs</name><index>[<expr><name>m</name></expr>]</index><index>[<expr><name>n</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator>

<call><name>lrint</name><argument_list>(<argument><expr><literal type="number">16384</literal> <operator>*</operator> <name><name>yuv2yuv</name><index>[<expr><name>m</name></expr>]</index><index>[<expr><name>n</name></expr>]</index></name> <operator>*</operator> <name>out_rng</name> <operator>*</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>idepth</name><operator>)</operator> <operator>/</operator>

<operator>(</operator><name>in_rng</name> <operator>*</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>odepth</name><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>o</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>o</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>o</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>yuv2yuv_coeffs</name><index>[<expr><name>m</name></expr>]</index><index>[<expr><name>n</name></expr>]</index><index>[<expr><name>o</name></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>yuv2yuv_coeffs</name><index>[<expr><name>m</name></expr>]</index><index>[<expr><name>n</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></for>

</block_content>}</block></for>

<expr_stmt><expr><call><name>av_assert2</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>yuv2yuv_coeffs</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_assert2</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>yuv2yuv_coeffs</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>yuv2yuv</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>dsp</name><operator>.</operator><name>yuv2yuv</name><index>[<expr><operator>(</operator><name>idepth</name> <operator>-</operator> <literal type="number">8</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><operator>(</operator><name>odepth</name> <operator>-</operator> <literal type="number">8</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>]</index>

<index>[<expr><name><name>in_desc</name><operator>-&gt;</operator><name>log2_chroma_h</name></name> <operator>+</operator> <name><name>in_desc</name><operator>-&gt;</operator><name>log2_chroma_w</name></name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>emms</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>emms_c</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>init</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ColorSpaceContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ff_colorspacedsp_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>dsp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>uninit</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ColorSpaceContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>rgb</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>rgb</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>rgb</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>rgb_sz</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>dither_scratch_base</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>dither_scratch_base</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>dither_scratch_base</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>dither_scratch_base</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>dither_scratch_base</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>dither_scratch_base</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>lin_lut</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>filter_frame</name><parameter_list>(<parameter><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>link</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>in</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>link</name><operator>-&gt;</operator><name>dst</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>outlink</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>outputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ColorSpaceContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>out</name> <init>= <expr><call><name>ff_get_video_buffer</name><argument_list>(<argument><expr><name>outlink</name></expr></argument>, <argument><expr><name><name>outlink</name><operator>-&gt;</operator><name>w</name></name></expr></argument>, <argument><expr><name><name>outlink</name><operator>-&gt;</operator><name>h</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>res</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ptrdiff_t</name></type> <name>rgb_stride</name> <init>= <expr><call><name>FFALIGN</name><argument_list>(<argument><expr><name><name>in</name><operator>-&gt;</operator><name>width</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int16_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>rgb_sz</name> <init>= <expr><name>rgb_stride</name> <operator>*</operator> <name><name>in</name><operator>-&gt;</operator><name>height</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ThreadData</name></type> <name>td</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>out</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>av_frame_copy_props</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>res</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>res</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>color_primaries</name></name> <operator>=</operator> <ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>user_prm</name></name> <operator>==</operator> <name>AVCOL_PRI_UNSPECIFIED</name></expr> ?</condition><then>

<expr><name><name>default_prm</name><index>[<expr><call><name>FFMIN</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>user_all</name></name></expr></argument>, <argument><expr><name>CS_NB</name></expr></argument>)</argument_list></call></expr>]</index></name></expr> </then><else>: <expr><name><name>s</name><operator>-&gt;</operator><name>user_prm</name></name></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>user_trc</name></name> <operator>==</operator> <name>AVCOL_TRC_UNSPECIFIED</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>AVPixFmtDescriptor</name> <modifier>*</modifier></type><name>desc</name> <init>= <expr><call><name>av_pix_fmt_desc_get</name><argument_list>(<argument><expr><name><name>out</name><operator>-&gt;</operator><name>format</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>color_trc</name></name> <operator>=</operator> <name><name>default_trc</name><index>[<expr><call><name>FFMIN</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>user_all</name></name></expr></argument>, <argument><expr><name>CS_NB</name></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>out</name><operator>-&gt;</operator><name>color_trc</name></name> <operator>==</operator> <name>AVCOL_TRC_BT2020_10</name> <operator>&amp;&amp;</operator> <name>desc</name> <operator>&amp;&amp;</operator> <name><name>desc</name><operator>-&gt;</operator><name>comp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>depth</name> <operator>&gt;=</operator> <literal type="number">12</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>color_trc</name></name> <operator>=</operator> <name>AVCOL_TRC_BT2020_12</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>color_trc</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>user_trc</name></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>colorspace</name></name> <operator>=</operator> <ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>user_csp</name></name> <operator>==</operator> <name>AVCOL_SPC_UNSPECIFIED</name></expr> ?</condition><then>

<expr><name><name>default_csp</name><index>[<expr><call><name>FFMIN</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>user_all</name></name></expr></argument>, <argument><expr><name>CS_NB</name></expr></argument>)</argument_list></call></expr>]</index></name></expr> </then><else>: <expr><name><name>s</name><operator>-&gt;</operator><name>user_csp</name></name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>color_range</name></name> <operator>=</operator> <ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>user_rng</name></name> <operator>==</operator> <name>AVCOL_RANGE_UNSPECIFIED</name></expr> ?</condition><then>

<expr><name><name>in</name><operator>-&gt;</operator><name>color_range</name></name></expr> </then><else>: <expr><name><name>s</name><operator>-&gt;</operator><name>user_rng</name></name></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>rgb_sz</name> <operator>!=</operator> <name><name>s</name><operator>-&gt;</operator><name>rgb_sz</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>AVPixFmtDescriptor</name> <modifier>*</modifier></type><name>desc</name> <init>= <expr><call><name>av_pix_fmt_desc_get</name><argument_list>(<argument><expr><name><name>out</name><operator>-&gt;</operator><name>format</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>uvw</name> <init>= <expr><name><name>in</name><operator>-&gt;</operator><name>width</name></name> <operator>&gt;&gt;</operator> <name><name>desc</name><operator>-&gt;</operator><name>log2_chroma_w</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>rgb</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>rgb</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>rgb</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>rgb_sz</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>dither_scratch_base</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>dither_scratch_base</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>dither_scratch_base</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>dither_scratch_base</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>dither_scratch_base</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>dither_scratch_base</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>rgb</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>av_malloc</name><argument_list>(<argument><expr><name>rgb_sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>rgb</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>av_malloc</name><argument_list>(<argument><expr><name>rgb_sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>rgb</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>av_malloc</name><argument_list>(<argument><expr><name>rgb_sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>dither_scratch_base</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator>

<call><name>av_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>dither_scratch_base</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name><name>in</name><operator>-&gt;</operator><name>width</name></name> <operator>+</operator> <literal type="number">4</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>dither_scratch_base</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator>

<call><name>av_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>dither_scratch_base</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name><name>in</name><operator>-&gt;</operator><name>width</name></name> <operator>+</operator> <literal type="number">4</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>dither_scratch_base</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator>

<call><name>av_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>dither_scratch_base</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name>uvw</name> <operator>+</operator> <literal type="number">4</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>dither_scratch_base</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator>

<call><name>av_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>dither_scratch_base</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name>uvw</name> <operator>+</operator> <literal type="number">4</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>dither_scratch_base</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator>

<call><name>av_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>dither_scratch_base</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name>uvw</name> <operator>+</operator> <literal type="number">4</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>dither_scratch_base</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator>

<call><name>av_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>dither_scratch_base</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name>uvw</name> <operator>+</operator> <literal type="number">4</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>dither_scratch</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>dither_scratch_base</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>dither_scratch</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>dither_scratch_base</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>dither_scratch</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>dither_scratch_base</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>dither_scratch</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>dither_scratch_base</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>dither_scratch</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>dither_scratch_base</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>dither_scratch</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>dither_scratch_base</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>rgb</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>||</operator> <operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>rgb</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>||</operator> <operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>rgb</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>||</operator>

<operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>dither_scratch_base</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>||</operator> <operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>dither_scratch_base</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>||</operator>

<operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>dither_scratch_base</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>||</operator> <operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>dither_scratch_base</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>||</operator>

<operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>dither_scratch_base</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>||</operator> <operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>dither_scratch_base</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>uninit</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>rgb_sz</name></name> <operator>=</operator> <name>rgb_sz</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>create_filtergraph</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>res</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>res</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>rgb_stride</name></name> <operator>=</operator> <name>rgb_stride</name> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int16_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<expr_stmt><expr><name><name>td</name><operator>.</operator><name>in</name></name> <operator>=</operator> <name>in</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>td</name><operator>.</operator><name>out</name></name> <operator>=</operator> <name>out</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>td</name><operator>.</operator><name>in_linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>in</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>td</name><operator>.</operator><name>in_linesize</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>in</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>td</name><operator>.</operator><name>in_linesize</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>in</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>td</name><operator>.</operator><name>out_linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>td</name><operator>.</operator><name>out_linesize</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>td</name><operator>.</operator><name>out_linesize</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>td</name><operator>.</operator><name>in_ss_h</name></name> <operator>=</operator> <call><name>av_pix_fmt_desc_get</name><argument_list>(<argument><expr><name><name>in</name><operator>-&gt;</operator><name>format</name></name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>log2_chroma_h</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>td</name><operator>.</operator><name>out_ss_h</name></name> <operator>=</operator> <call><name>av_pix_fmt_desc_get</name><argument_list>(<argument><expr><name><name>out</name><operator>-&gt;</operator><name>format</name></name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>log2_chroma_h</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>yuv2yuv_passthrough</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>av_frame_copy</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>res</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>res</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name><name>ctx</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>convert</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>td</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,

<argument><expr><call><name>FFMIN</name><argument_list>(<argument><expr><operator>(</operator><name><name>in</name><operator>-&gt;</operator><name>height</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><call><name>ff_filter_get_nb_threads</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>ff_filter_frame</name><argument_list>(<argument><expr><name>outlink</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>query_formats</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>enum</name> <name>AVPixelFormat</name></name></type> <name><name>pix_fmts</name><index>[]</index></name> <init>= <expr><block>{

<expr><name>AV_PIX_FMT_YUV420P</name></expr>, <expr><name>AV_PIX_FMT_YUV422P</name></expr>, <expr><name>AV_PIX_FMT_YUV444P</name></expr>,

<expr><name>AV_PIX_FMT_YUV420P10</name></expr>, <expr><name>AV_PIX_FMT_YUV422P10</name></expr>, <expr><name>AV_PIX_FMT_YUV444P10</name></expr>,

<expr><name>AV_PIX_FMT_YUV420P12</name></expr>, <expr><name>AV_PIX_FMT_YUV422P12</name></expr>, <expr><name>AV_PIX_FMT_YUV444P12</name></expr>,

<expr><name>AV_PIX_FMT_YUVJ420P</name></expr>, <expr><name>AV_PIX_FMT_YUVJ422P</name></expr>, <expr><name>AV_PIX_FMT_YUVJ444P</name></expr>,

<expr><name>AV_PIX_FMT_NONE</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>res</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ColorSpaceContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFilterFormats</name> <modifier>*</modifier></type><name>formats</name> <init>= <expr><call><name>ff_make_format_list</name><argument_list>(<argument><expr><name>pix_fmts</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>formats</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>user_format</name></name> <operator>==</operator> <name>AV_PIX_FMT_NONE</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>ff_set_common_formats</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>formats</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>ff_formats_ref</name><argument_list>(<argument><expr><name>formats</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>inputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>out_formats</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>res</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>res</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>formats</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>ff_add_format</name><argument_list>(<argument><expr><operator>&amp;</operator><name>formats</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>user_format</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>res</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>res</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>ff_formats_ref</name><argument_list>(<argument><expr><name>formats</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>outputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>in_formats</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>config_props</name><parameter_list>(<parameter><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>outlink</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>outlink</name><operator>-&gt;</operator><name>dst</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>inlink</name> <init>= <expr><name><name>outlink</name><operator>-&gt;</operator><name>src</name><operator>-&gt;</operator><name>inputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>inlink</name><operator>-&gt;</operator><name>w</name></name> <operator>%</operator> <literal type="number">2</literal> <operator>||</operator> <name><name>inlink</name><operator>-&gt;</operator><name>h</name></name> <operator>%</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid odd size (%dx%d)\n"</literal></expr></argument>,

<argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>w</name></name></expr></argument>, <argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>h</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_PATCHWELCOME</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>outlink</name><operator>-&gt;</operator><name>w</name></name> <operator>=</operator> <name><name>inlink</name><operator>-&gt;</operator><name>w</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>outlink</name><operator>-&gt;</operator><name>h</name></name> <operator>=</operator> <name><name>inlink</name><operator>-&gt;</operator><name>h</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>outlink</name><operator>-&gt;</operator><name>sample_aspect_ratio</name></name> <operator>=</operator> <name><name>inlink</name><operator>-&gt;</operator><name>sample_aspect_ratio</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>outlink</name><operator>-&gt;</operator><name>time_base</name></name> <operator>=</operator> <name><name>inlink</name><operator>-&gt;</operator><name>time_base</name></name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OFFSET</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>offsetof(ColorSpaceContext, x)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLAGS</name></cpp:macro> <cpp:value>AV_OPT_FLAG_FILTERING_PARAM | AV_OPT_FLAG_VIDEO_PARAM</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENUM</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>y</name></type></parameter>, <parameter><type><name>z</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ x, "", 0, AV_OPT_TYPE_CONST, { .i64 = y }, INT_MIN, INT_MAX, FLAGS, z }</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVOption</name></type> <name><name>colorspace_options</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><literal type="string">"all"</literal></expr>, <expr><literal type="string">"Set all color properties together"</literal></expr>,

<expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>user_all</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>CS_UNSPECIFIED</name></expr> }</block></expr>,

<expr><name>CS_UNSPECIFIED</name></expr>, <expr><name>CS_NB</name> <operator>-</operator> <literal type="number">1</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"all"</literal></expr> }</block></expr>,

<expr><call><name>ENUM</name><argument_list>(<argument><expr><literal type="string">"bt470m"</literal></expr></argument>, <argument><expr><name>CS_BT470M</name></expr></argument>, <argument><expr><literal type="string">"all"</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>ENUM</name><argument_list>(<argument><expr><literal type="string">"bt470bg"</literal></expr></argument>, <argument><expr><name>CS_BT470BG</name></expr></argument>, <argument><expr><literal type="string">"all"</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>ENUM</name><argument_list>(<argument><expr><literal type="string">"bt601-6-525"</literal></expr></argument>, <argument><expr><name>CS_BT601_6_525</name></expr></argument>, <argument><expr><literal type="string">"all"</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>ENUM</name><argument_list>(<argument><expr><literal type="string">"bt601-6-625"</literal></expr></argument>, <argument><expr><name>CS_BT601_6_625</name></expr></argument>, <argument><expr><literal type="string">"all"</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>ENUM</name><argument_list>(<argument><expr><literal type="string">"bt709"</literal></expr></argument>, <argument><expr><name>CS_BT709</name></expr></argument>, <argument><expr><literal type="string">"all"</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>ENUM</name><argument_list>(<argument><expr><literal type="string">"smpte170m"</literal></expr></argument>, <argument><expr><name>CS_SMPTE170M</name></expr></argument>, <argument><expr><literal type="string">"all"</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>ENUM</name><argument_list>(<argument><expr><literal type="string">"smpte240m"</literal></expr></argument>, <argument><expr><name>CS_SMPTE240M</name></expr></argument>, <argument><expr><literal type="string">"all"</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>ENUM</name><argument_list>(<argument><expr><literal type="string">"bt2020"</literal></expr></argument>, <argument><expr><name>CS_BT2020</name></expr></argument>, <argument><expr><literal type="string">"all"</literal></expr></argument>)</argument_list></call></expr>,

<expr><block>{ <expr><literal type="string">"space"</literal></expr>, <expr><literal type="string">"Output colorspace"</literal></expr>,

<expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>user_csp</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>AVCOL_SPC_UNSPECIFIED</name></expr> }</block></expr>,

<expr><name>AVCOL_SPC_RGB</name></expr>, <expr><name>AVCOL_SPC_NB</name> <operator>-</operator> <literal type="number">1</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"csp"</literal></expr>}</block></expr>,

<expr><call><name>ENUM</name><argument_list>(<argument><expr><literal type="string">"bt709"</literal></expr></argument>, <argument><expr><name>AVCOL_SPC_BT709</name></expr></argument>, <argument><expr><literal type="string">"csp"</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>ENUM</name><argument_list>(<argument><expr><literal type="string">"fcc"</literal></expr></argument>, <argument><expr><name>AVCOL_SPC_FCC</name></expr></argument>, <argument><expr><literal type="string">"csp"</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>ENUM</name><argument_list>(<argument><expr><literal type="string">"bt470bg"</literal></expr></argument>, <argument><expr><name>AVCOL_SPC_BT470BG</name></expr></argument>, <argument><expr><literal type="string">"csp"</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>ENUM</name><argument_list>(<argument><expr><literal type="string">"smpte170m"</literal></expr></argument>, <argument><expr><name>AVCOL_SPC_SMPTE170M</name></expr></argument>, <argument><expr><literal type="string">"csp"</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>ENUM</name><argument_list>(<argument><expr><literal type="string">"smpte240m"</literal></expr></argument>, <argument><expr><name>AVCOL_SPC_SMPTE240M</name></expr></argument>, <argument><expr><literal type="string">"csp"</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>ENUM</name><argument_list>(<argument><expr><literal type="string">"ycgco"</literal></expr></argument>, <argument><expr><name>AVCOL_SPC_YCGCO</name></expr></argument>, <argument><expr><literal type="string">"csp"</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>ENUM</name><argument_list>(<argument><expr><literal type="string">"gbr"</literal></expr></argument>, <argument><expr><name>AVCOL_SPC_RGB</name></expr></argument>, <argument><expr><literal type="string">"csp"</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>ENUM</name><argument_list>(<argument><expr><literal type="string">"bt2020nc"</literal></expr></argument>, <argument><expr><name>AVCOL_SPC_BT2020_NCL</name></expr></argument>, <argument><expr><literal type="string">"csp"</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>ENUM</name><argument_list>(<argument><expr><literal type="string">"bt2020ncl"</literal></expr></argument>, <argument><expr><name>AVCOL_SPC_BT2020_NCL</name></expr></argument>, <argument><expr><literal type="string">"csp"</literal></expr></argument>)</argument_list></call></expr>,

<expr><block>{ <expr><literal type="string">"range"</literal></expr>, <expr><literal type="string">"Output color range"</literal></expr>,

<expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>user_rng</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>AVCOL_RANGE_UNSPECIFIED</name></expr> }</block></expr>,

<expr><name>AVCOL_RANGE_UNSPECIFIED</name></expr>, <expr><name>AVCOL_RANGE_NB</name> <operator>-</operator> <literal type="number">1</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"rng"</literal></expr> }</block></expr>,

<expr><call><name>ENUM</name><argument_list>(<argument><expr><literal type="string">"tv"</literal></expr></argument>, <argument><expr><name>AVCOL_RANGE_MPEG</name></expr></argument>, <argument><expr><literal type="string">"rng"</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>ENUM</name><argument_list>(<argument><expr><literal type="string">"mpeg"</literal></expr></argument>, <argument><expr><name>AVCOL_RANGE_MPEG</name></expr></argument>, <argument><expr><literal type="string">"rng"</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>ENUM</name><argument_list>(<argument><expr><literal type="string">"pc"</literal></expr></argument>, <argument><expr><name>AVCOL_RANGE_JPEG</name></expr></argument>, <argument><expr><literal type="string">"rng"</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>ENUM</name><argument_list>(<argument><expr><literal type="string">"jpeg"</literal></expr></argument>, <argument><expr><name>AVCOL_RANGE_JPEG</name></expr></argument>, <argument><expr><literal type="string">"rng"</literal></expr></argument>)</argument_list></call></expr>,

<expr><block>{ <expr><literal type="string">"primaries"</literal></expr>, <expr><literal type="string">"Output color primaries"</literal></expr>,

<expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>user_prm</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>AVCOL_PRI_UNSPECIFIED</name></expr> }</block></expr>,

<expr><name>AVCOL_PRI_RESERVED0</name></expr>, <expr><name>AVCOL_PRI_NB</name> <operator>-</operator> <literal type="number">1</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"prm"</literal></expr> }</block></expr>,

<expr><call><name>ENUM</name><argument_list>(<argument><expr><literal type="string">"bt709"</literal></expr></argument>, <argument><expr><name>AVCOL_PRI_BT709</name></expr></argument>, <argument><expr><literal type="string">"prm"</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>ENUM</name><argument_list>(<argument><expr><literal type="string">"bt470m"</literal></expr></argument>, <argument><expr><name>AVCOL_PRI_BT470M</name></expr></argument>, <argument><expr><literal type="string">"prm"</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>ENUM</name><argument_list>(<argument><expr><literal type="string">"bt470bg"</literal></expr></argument>, <argument><expr><name>AVCOL_PRI_BT470BG</name></expr></argument>, <argument><expr><literal type="string">"prm"</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>ENUM</name><argument_list>(<argument><expr><literal type="string">"smpte170m"</literal></expr></argument>, <argument><expr><name>AVCOL_PRI_SMPTE170M</name></expr></argument>, <argument><expr><literal type="string">"prm"</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>ENUM</name><argument_list>(<argument><expr><literal type="string">"smpte240m"</literal></expr></argument>, <argument><expr><name>AVCOL_PRI_SMPTE240M</name></expr></argument>, <argument><expr><literal type="string">"prm"</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>ENUM</name><argument_list>(<argument><expr><literal type="string">"smpte428"</literal></expr></argument>, <argument><expr><name>AVCOL_PRI_SMPTE428</name></expr></argument>, <argument><expr><literal type="string">"prm"</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>ENUM</name><argument_list>(<argument><expr><literal type="string">"film"</literal></expr></argument>, <argument><expr><name>AVCOL_PRI_FILM</name></expr></argument>, <argument><expr><literal type="string">"prm"</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>ENUM</name><argument_list>(<argument><expr><literal type="string">"smpte431"</literal></expr></argument>, <argument><expr><name>AVCOL_PRI_SMPTE431</name></expr></argument>, <argument><expr><literal type="string">"prm"</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>ENUM</name><argument_list>(<argument><expr><literal type="string">"smpte432"</literal></expr></argument>, <argument><expr><name>AVCOL_PRI_SMPTE432</name></expr></argument>, <argument><expr><literal type="string">"prm"</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>ENUM</name><argument_list>(<argument><expr><literal type="string">"bt2020"</literal></expr></argument>, <argument><expr><name>AVCOL_PRI_BT2020</name></expr></argument>, <argument><expr><literal type="string">"prm"</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>ENUM</name><argument_list>(<argument><expr><literal type="string">"jedec-p22"</literal></expr></argument>, <argument><expr><name>AVCOL_PRI_JEDEC_P22</name></expr></argument>, <argument><expr><literal type="string">"prm"</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>ENUM</name><argument_list>(<argument><expr><literal type="string">"ebu3213"</literal></expr></argument>, <argument><expr><name>AVCOL_PRI_EBU3213</name></expr></argument>, <argument><expr><literal type="string">"prm"</literal></expr></argument>)</argument_list></call></expr>,

<expr><block>{ <expr><literal type="string">"trc"</literal></expr>, <expr><literal type="string">"Output transfer characteristics"</literal></expr>,

<expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>user_trc</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>AVCOL_TRC_UNSPECIFIED</name></expr> }</block></expr>,

<expr><name>AVCOL_TRC_RESERVED0</name></expr>, <expr><name>AVCOL_TRC_NB</name> <operator>-</operator> <literal type="number">1</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"trc"</literal></expr> }</block></expr>,

<expr><call><name>ENUM</name><argument_list>(<argument><expr><literal type="string">"bt709"</literal></expr></argument>, <argument><expr><name>AVCOL_TRC_BT709</name></expr></argument>, <argument><expr><literal type="string">"trc"</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>ENUM</name><argument_list>(<argument><expr><literal type="string">"bt470m"</literal></expr></argument>, <argument><expr><name>AVCOL_TRC_GAMMA22</name></expr></argument>, <argument><expr><literal type="string">"trc"</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>ENUM</name><argument_list>(<argument><expr><literal type="string">"gamma22"</literal></expr></argument>, <argument><expr><name>AVCOL_TRC_GAMMA22</name></expr></argument>, <argument><expr><literal type="string">"trc"</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>ENUM</name><argument_list>(<argument><expr><literal type="string">"bt470bg"</literal></expr></argument>, <argument><expr><name>AVCOL_TRC_GAMMA28</name></expr></argument>, <argument><expr><literal type="string">"trc"</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>ENUM</name><argument_list>(<argument><expr><literal type="string">"gamma28"</literal></expr></argument>, <argument><expr><name>AVCOL_TRC_GAMMA28</name></expr></argument>, <argument><expr><literal type="string">"trc"</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>ENUM</name><argument_list>(<argument><expr><literal type="string">"smpte170m"</literal></expr></argument>, <argument><expr><name>AVCOL_TRC_SMPTE170M</name></expr></argument>, <argument><expr><literal type="string">"trc"</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>ENUM</name><argument_list>(<argument><expr><literal type="string">"smpte240m"</literal></expr></argument>, <argument><expr><name>AVCOL_TRC_SMPTE240M</name></expr></argument>, <argument><expr><literal type="string">"trc"</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>ENUM</name><argument_list>(<argument><expr><literal type="string">"srgb"</literal></expr></argument>, <argument><expr><name>AVCOL_TRC_IEC61966_2_1</name></expr></argument>, <argument><expr><literal type="string">"trc"</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>ENUM</name><argument_list>(<argument><expr><literal type="string">"iec61966-2-1"</literal></expr></argument>, <argument><expr><name>AVCOL_TRC_IEC61966_2_1</name></expr></argument>, <argument><expr><literal type="string">"trc"</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>ENUM</name><argument_list>(<argument><expr><literal type="string">"xvycc"</literal></expr></argument>, <argument><expr><name>AVCOL_TRC_IEC61966_2_4</name></expr></argument>, <argument><expr><literal type="string">"trc"</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>ENUM</name><argument_list>(<argument><expr><literal type="string">"iec61966-2-4"</literal></expr></argument>, <argument><expr><name>AVCOL_TRC_IEC61966_2_4</name></expr></argument>, <argument><expr><literal type="string">"trc"</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>ENUM</name><argument_list>(<argument><expr><literal type="string">"bt2020-10"</literal></expr></argument>, <argument><expr><name>AVCOL_TRC_BT2020_10</name></expr></argument>, <argument><expr><literal type="string">"trc"</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>ENUM</name><argument_list>(<argument><expr><literal type="string">"bt2020-12"</literal></expr></argument>, <argument><expr><name>AVCOL_TRC_BT2020_12</name></expr></argument>, <argument><expr><literal type="string">"trc"</literal></expr></argument>)</argument_list></call></expr>,

<expr><block>{ <expr><literal type="string">"format"</literal></expr>, <expr><literal type="string">"Output pixel format"</literal></expr>,

<expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>user_format</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>AV_PIX_FMT_NONE</name></expr> }</block></expr>,

<expr><name>AV_PIX_FMT_NONE</name></expr>, <expr><name>AV_PIX_FMT_GBRAP12LE</name></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"fmt"</literal></expr> }</block></expr>,

<expr><call><name>ENUM</name><argument_list>(<argument><expr><literal type="string">"yuv420p"</literal></expr></argument>, <argument><expr><name>AV_PIX_FMT_YUV420P</name></expr></argument>, <argument><expr><literal type="string">"fmt"</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>ENUM</name><argument_list>(<argument><expr><literal type="string">"yuv420p10"</literal></expr></argument>, <argument><expr><name>AV_PIX_FMT_YUV420P10</name></expr></argument>, <argument><expr><literal type="string">"fmt"</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>ENUM</name><argument_list>(<argument><expr><literal type="string">"yuv420p12"</literal></expr></argument>, <argument><expr><name>AV_PIX_FMT_YUV420P12</name></expr></argument>, <argument><expr><literal type="string">"fmt"</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>ENUM</name><argument_list>(<argument><expr><literal type="string">"yuv422p"</literal></expr></argument>, <argument><expr><name>AV_PIX_FMT_YUV422P</name></expr></argument>, <argument><expr><literal type="string">"fmt"</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>ENUM</name><argument_list>(<argument><expr><literal type="string">"yuv422p10"</literal></expr></argument>, <argument><expr><name>AV_PIX_FMT_YUV422P10</name></expr></argument>, <argument><expr><literal type="string">"fmt"</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>ENUM</name><argument_list>(<argument><expr><literal type="string">"yuv422p12"</literal></expr></argument>, <argument><expr><name>AV_PIX_FMT_YUV422P12</name></expr></argument>, <argument><expr><literal type="string">"fmt"</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>ENUM</name><argument_list>(<argument><expr><literal type="string">"yuv444p"</literal></expr></argument>, <argument><expr><name>AV_PIX_FMT_YUV444P</name></expr></argument>, <argument><expr><literal type="string">"fmt"</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>ENUM</name><argument_list>(<argument><expr><literal type="string">"yuv444p10"</literal></expr></argument>, <argument><expr><name>AV_PIX_FMT_YUV444P10</name></expr></argument>, <argument><expr><literal type="string">"fmt"</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>ENUM</name><argument_list>(<argument><expr><literal type="string">"yuv444p12"</literal></expr></argument>, <argument><expr><name>AV_PIX_FMT_YUV444P12</name></expr></argument>, <argument><expr><literal type="string">"fmt"</literal></expr></argument>)</argument_list></call></expr>,

<expr><block>{ <expr><literal type="string">"fast"</literal></expr>, <expr><literal type="string">"Ignore primary chromaticity and gamma correction"</literal></expr>,

<expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>fast_mode</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_BOOL</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0</literal></expr> }</block></expr>,

<expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"dither"</literal></expr>, <expr><literal type="string">"Dithering mode"</literal></expr>,

<expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>dither</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>DITHER_NONE</name></expr> }</block></expr>,

<expr><name>DITHER_NONE</name></expr>, <expr><name>DITHER_NB</name> <operator>-</operator> <literal type="number">1</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"dither"</literal></expr> }</block></expr>,

<expr><call><name>ENUM</name><argument_list>(<argument><expr><literal type="string">"none"</literal></expr></argument>, <argument><expr><name>DITHER_NONE</name></expr></argument>, <argument><expr><literal type="string">"dither"</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>ENUM</name><argument_list>(<argument><expr><literal type="string">"fsb"</literal></expr></argument>, <argument><expr><name>DITHER_FSB</name></expr></argument>, <argument><expr><literal type="string">"dither"</literal></expr></argument>)</argument_list></call></expr>,

<expr><block>{ <expr><literal type="string">"wpadapt"</literal></expr>, <expr><literal type="string">"Whitepoint adaptation method"</literal></expr>,

<expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>wp_adapt</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>WP_ADAPT_BRADFORD</name></expr> }</block></expr>,

<expr><name>WP_ADAPT_BRADFORD</name></expr>, <expr><name>NB_WP_ADAPT</name> <operator>-</operator> <literal type="number">1</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"wpadapt"</literal></expr> }</block></expr>,

<expr><call><name>ENUM</name><argument_list>(<argument><expr><literal type="string">"bradford"</literal></expr></argument>, <argument><expr><name>WP_ADAPT_BRADFORD</name></expr></argument>, <argument><expr><literal type="string">"wpadapt"</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>ENUM</name><argument_list>(<argument><expr><literal type="string">"vonkries"</literal></expr></argument>, <argument><expr><name>WP_ADAPT_VON_KRIES</name></expr></argument>, <argument><expr><literal type="string">"wpadapt"</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>ENUM</name><argument_list>(<argument><expr><literal type="string">"identity"</literal></expr></argument>, <argument><expr><name>WP_ADAPT_IDENTITY</name></expr></argument>, <argument><expr><literal type="string">"wpadapt"</literal></expr></argument>)</argument_list></call></expr>,

<expr><block>{ <expr><literal type="string">"iall"</literal></expr>, <expr><literal type="string">"Set all input color properties together"</literal></expr>,

<expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>user_iall</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>CS_UNSPECIFIED</name></expr> }</block></expr>,

<expr><name>CS_UNSPECIFIED</name></expr>, <expr><name>CS_NB</name> <operator>-</operator> <literal type="number">1</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"all"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"ispace"</literal></expr>, <expr><literal type="string">"Input colorspace"</literal></expr>,

<expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>user_icsp</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>AVCOL_SPC_UNSPECIFIED</name></expr> }</block></expr>,

<expr><name>AVCOL_PRI_RESERVED0</name></expr>, <expr><name>AVCOL_PRI_NB</name> <operator>-</operator> <literal type="number">1</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"csp"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"irange"</literal></expr>, <expr><literal type="string">"Input color range"</literal></expr>,

<expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>user_irng</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>AVCOL_RANGE_UNSPECIFIED</name></expr> }</block></expr>,

<expr><name>AVCOL_RANGE_UNSPECIFIED</name></expr>, <expr><name>AVCOL_RANGE_NB</name> <operator>-</operator> <literal type="number">1</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"rng"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"iprimaries"</literal></expr>, <expr><literal type="string">"Input color primaries"</literal></expr>,

<expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>user_iprm</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>AVCOL_PRI_UNSPECIFIED</name></expr> }</block></expr>,

<expr><name>AVCOL_PRI_RESERVED0</name></expr>, <expr><name>AVCOL_PRI_NB</name> <operator>-</operator> <literal type="number">1</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"prm"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"itrc"</literal></expr>, <expr><literal type="string">"Input transfer characteristics"</literal></expr>,

<expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>user_itrc</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>AVCOL_TRC_UNSPECIFIED</name></expr> }</block></expr>,

<expr><name>AVCOL_TRC_RESERVED0</name></expr>, <expr><name>AVCOL_TRC_NB</name> <operator>-</operator> <literal type="number">1</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"trc"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>AVFILTER_DEFINE_CLASS</name><argument_list>(<argument><expr><name>colorspace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVFilterPad</name></type> <name><name>inputs</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"default"</literal></expr>,

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,

<expr><operator>.</operator><name>filter_frame</name> <operator>=</operator> <name>filter_frame</name></expr>,

}</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVFilterPad</name></type> <name><name>outputs</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"default"</literal></expr>,

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,

<expr><operator>.</operator><name>config_props</name> <operator>=</operator> <name>config_props</name></expr>,

}</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFilter</name></type> <name>ff_vf_colorspace</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"colorspace"</literal></expr>,

<expr><operator>.</operator><name>description</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"Convert between colorspaces."</literal></expr></argument>)</argument_list></call></expr>,

<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>init</name></expr>,

<expr><operator>.</operator><name>uninit</name> <operator>=</operator> <name>uninit</name></expr>,

<expr><operator>.</operator><name>query_formats</name> <operator>=</operator> <name>query_formats</name></expr>,

<expr><operator>.</operator><name>priv_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>ColorSpaceContext</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><operator>.</operator><name>priv_class</name> <operator>=</operator> <operator>&amp;</operator><name>colorspace_class</name></expr>,

<expr><operator>.</operator><name>inputs</name> <operator>=</operator> <name>inputs</name></expr>,

<expr><operator>.</operator><name>outputs</name> <operator>=</operator> <name>outputs</name></expr>,

<expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>AVFILTER_FLAG_SUPPORT_TIMELINE_GENERIC</name> <operator>|</operator> <name>AVFILTER_FLAG_SLICE_THREADS</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

</unit>
