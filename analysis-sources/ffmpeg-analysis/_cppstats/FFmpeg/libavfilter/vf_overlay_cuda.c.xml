<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavfilter\vf_overlay_cuda.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/log.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/mem.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/opt.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/pixdesc.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/hwcontext.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/hwcontext_cuda_internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/cuda_check.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avfilter.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"framesync.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHECK_CU</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>FF_CUDA_CHECK_DL(ctx, ctx-&gt;hwctx-&gt;internal-&gt;cuda_dl, x)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIV_UP</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>( ((a) + (b) - 1) / (b) )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BLOCK_X</name></cpp:macro> <cpp:value>32</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BLOCK_Y</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>enum</name> <name>AVPixelFormat</name></name></type> <name><name>supported_main_formats</name><index>[]</index></name> <init>= <expr><block>{

<expr><name>AV_PIX_FMT_NV12</name></expr>,

<expr><name>AV_PIX_FMT_YUV420P</name></expr>,

<expr><name>AV_PIX_FMT_NONE</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>enum</name> <name>AVPixelFormat</name></name></type> <name><name>supported_overlay_formats</name><index>[]</index></name> <init>= <expr><block>{

<expr><name>AV_PIX_FMT_NV12</name></expr>,

<expr><name>AV_PIX_FMT_YUV420P</name></expr>,

<expr><name>AV_PIX_FMT_YUVA420P</name></expr>,

<expr><name>AV_PIX_FMT_NONE</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<typedef>typedef <type><struct>struct <name>OverlayCUDAContext</name> <block>{

<decl_stmt><decl><type><specifier>const</specifier> <name>AVClass</name> <modifier>*</modifier></type><name>class</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>in_format_overlay</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>in_format_main</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVCUDADeviceContext</name> <modifier>*</modifier></type><name>hwctx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CUcontext</name></type> <name>cu_ctx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CUmodule</name></type> <name>cu_module</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CUfunction</name></type> <name>cu_func</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CUstream</name></type> <name>cu_stream</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>FFFrameSync</name></type> <name>fs</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>x_position</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>y_position</name></decl>;</decl_stmt>

}</block></struct></type> <name>OverlayCUDAContext</name>;</typedef>

<function><type><specifier>static</specifier> <name>int</name></type> <name>format_is_supported</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>enum</name> <name>AVPixelFormat</name></name></type> <name><name>formats</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>fmt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name><name>formats</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name>AV_PIX_FMT_NONE</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name><name>formats</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>fmt</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>formats_match</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>format_main</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>format_overlay</name></decl></parameter>)</parameter_list> <block>{<block_content>

<switch>switch<condition>(<expr><name>format_main</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>AV_PIX_FMT_NV12</name></expr>:</case>

<return>return <expr><name>format_overlay</name> <operator>==</operator> <name>AV_PIX_FMT_NV12</name></expr>;</return>

<case>case <expr><name>AV_PIX_FMT_YUV420P</name></expr>:</case>

<return>return <expr><name>format_overlay</name> <operator>==</operator> <name>AV_PIX_FMT_YUV420P</name> <operator>||</operator>

<name>format_overlay</name> <operator>==</operator> <name>AV_PIX_FMT_YUVA420P</name></expr>;</return>

<default>default:</default>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>overlay_cuda_call_kernel</name><parameter_list>(

<parameter><decl><type><name>OverlayCUDAContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>x_position</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y_position</name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name><modifier>*</modifier></type> <name>main_data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>main_linesize</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>main_width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>main_height</name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name><modifier>*</modifier></type> <name>overlay_data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>overlay_linesize</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>overlay_width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>overlay_height</name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name><modifier>*</modifier></type> <name>alpha_data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>alpha_linesize</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>alpha_adj_x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>alpha_adj_y</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>CudaFunctions</name> <modifier>*</modifier></type><name>cu</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>hwctx</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>cuda_dl</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name><name>kernel_args</name><index>[]</index></name> <init>= <expr><block>{

<expr><operator>&amp;</operator><name>x_position</name></expr>, <expr><operator>&amp;</operator><name>y_position</name></expr>,

<expr><operator>&amp;</operator><name>main_data</name></expr>, <expr><operator>&amp;</operator><name>main_linesize</name></expr>,

<expr><operator>&amp;</operator><name>overlay_data</name></expr>, <expr><operator>&amp;</operator><name>overlay_linesize</name></expr>,

<expr><operator>&amp;</operator><name>overlay_width</name></expr>, <expr><operator>&amp;</operator><name>overlay_height</name></expr>,

<expr><operator>&amp;</operator><name>alpha_data</name></expr>, <expr><operator>&amp;</operator><name>alpha_linesize</name></expr>,

<expr><operator>&amp;</operator><name>alpha_adj_x</name></expr>, <expr><operator>&amp;</operator><name>alpha_adj_y</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>CHECK_CU</name><argument_list>(<argument><expr><call><name><name>cu</name><operator>-&gt;</operator><name>cuLaunchKernel</name></name><argument_list>(

<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>cu_func</name></name></expr></argument>,

<argument><expr><call><name>DIV_UP</name><argument_list>(<argument><expr><name>main_width</name></expr></argument>, <argument><expr><name>BLOCK_X</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>DIV_UP</name><argument_list>(<argument><expr><name>main_height</name></expr></argument>, <argument><expr><name>BLOCK_Y</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,

<argument><expr><name>BLOCK_X</name></expr></argument>, <argument><expr><name>BLOCK_Y</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,

<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>cu_stream</name></name></expr></argument>, <argument><expr><name>kernel_args</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>overlay_cuda_blend</name><parameter_list>(<parameter><decl><type><name>FFFrameSync</name> <modifier>*</modifier></type><name>fs</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>avctx</name> <init>= <expr><name><name>fs</name><operator>-&gt;</operator><name>parent</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>OverlayCUDAContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>outlink</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>outputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CudaFunctions</name> <modifier>*</modifier></type><name>cu</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>hwctx</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>cuda_dl</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CUcontext</name></type> <name>dummy</name></decl>, <decl><type ref="prev"/><name>cuda_ctx</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>hwctx</name><operator>-&gt;</operator><name>cuda_ctx</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>input_main</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>input_overlay</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>cu_ctx</name></name> <operator>=</operator> <name>cuda_ctx</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_framesync_dualinput_get</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>input_main</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>input_overlay</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>input_main</name> <operator>||</operator> <operator>!</operator><name>input_overlay</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_BUG</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>av_frame_make_writable</name><argument_list>(<argument><expr><name>input_main</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>input_main</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>CHECK_CU</name><argument_list>(<argument><expr><call><name><name>cu</name><operator>-&gt;</operator><name>cuCtxPushCurrent</name></name><argument_list>(<argument><expr><name>cuda_ctx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>input_main</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>overlay_cuda_call_kernel</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>,

<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>x_position</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>y_position</name></name></expr></argument>,

<argument><expr><name><name>input_main</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>input_main</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,

<argument><expr><name><name>input_main</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>input_main</name><operator>-&gt;</operator><name>height</name></name></expr></argument>,

<argument><expr><name><name>input_overlay</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>input_overlay</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,

<argument><expr><name><name>input_overlay</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>input_overlay</name><operator>-&gt;</operator><name>height</name></name></expr></argument>,

<argument><expr><name><name>input_overlay</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>input_overlay</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch<condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>in_format_overlay</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>AV_PIX_FMT_NV12</name></expr>:</case>

<expr_stmt><expr><call><name>overlay_cuda_call_kernel</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>,

<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>x_position</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>y_position</name></name> <operator>/</operator> <literal type="number">2</literal></expr></argument>,

<argument><expr><name><name>input_main</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>input_main</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,

<argument><expr><name><name>input_main</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>input_main</name><operator>-&gt;</operator><name>height</name></name> <operator>/</operator> <literal type="number">2</literal></expr></argument>,

<argument><expr><name><name>input_overlay</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>input_overlay</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,

<argument><expr><name><name>input_overlay</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>input_overlay</name><operator>-&gt;</operator><name>height</name></name> <operator>/</operator> <literal type="number">2</literal></expr></argument>,

<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AV_PIX_FMT_YUV420P</name></expr>:</case>

<case>case <expr><name>AV_PIX_FMT_YUVA420P</name></expr>:</case>

<expr_stmt><expr><call><name>overlay_cuda_call_kernel</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>,

<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>x_position</name></name> <operator>/</operator> <literal type="number">2</literal></expr></argument> , <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>y_position</name></name> <operator>/</operator> <literal type="number">2</literal></expr></argument>,

<argument><expr><name><name>input_main</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>input_main</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,

<argument><expr><name><name>input_main</name><operator>-&gt;</operator><name>width</name></name> <operator>/</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name><name>input_main</name><operator>-&gt;</operator><name>height</name></name> <operator>/</operator> <literal type="number">2</literal></expr></argument>,

<argument><expr><name><name>input_overlay</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>input_overlay</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,

<argument><expr><name><name>input_overlay</name><operator>-&gt;</operator><name>width</name></name> <operator>/</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name><name>input_overlay</name><operator>-&gt;</operator><name>height</name></name> <operator>/</operator> <literal type="number">2</literal></expr></argument>,

<argument><expr><name><name>input_overlay</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>input_overlay</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>overlay_cuda_call_kernel</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>,

<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>x_position</name></name> <operator>/</operator> <literal type="number">2</literal></expr></argument> , <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>y_position</name></name> <operator>/</operator> <literal type="number">2</literal></expr></argument>,

<argument><expr><name><name>input_main</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>input_main</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>,

<argument><expr><name><name>input_main</name><operator>-&gt;</operator><name>width</name></name> <operator>/</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name><name>input_main</name><operator>-&gt;</operator><name>height</name></name> <operator>/</operator> <literal type="number">2</literal></expr></argument>,

<argument><expr><name><name>input_overlay</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>input_overlay</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>,

<argument><expr><name><name>input_overlay</name><operator>-&gt;</operator><name>width</name></name> <operator>/</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name><name>input_overlay</name><operator>-&gt;</operator><name>height</name></name> <operator>/</operator> <literal type="number">2</literal></expr></argument>,

<argument><expr><name><name>input_overlay</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>input_overlay</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Passed unsupported overlay pixel format\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>input_main</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CHECK_CU</name><argument_list>(<argument><expr><call><name><name>cu</name><operator>-&gt;</operator><name>cuCtxPopCurrent</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>dummy</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_BUG</name></expr>;</return>

</block_content>}</block></switch>

<expr_stmt><expr><call><name>CHECK_CU</name><argument_list>(<argument><expr><call><name><name>cu</name><operator>-&gt;</operator><name>cuCtxPopCurrent</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>dummy</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>ff_filter_frame</name><argument_list>(<argument><expr><name>outlink</name></expr></argument>, <argument><expr><name>input_main</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>overlay_cuda_init</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>OverlayCUDAContext</name><modifier>*</modifier></type> <name>ctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>fs</name><operator>.</operator><name>on_event</name></name> <operator>=</operator> <operator>&amp;</operator><name>overlay_cuda_blend</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>void</name></type> <name>overlay_cuda_uninit</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>OverlayCUDAContext</name><modifier>*</modifier></type> <name>ctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ff_framesync_uninit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>fs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>hwctx</name></name> <operator>&amp;&amp;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>cu_module</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>CUcontext</name></type> <name>dummy</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CudaFunctions</name> <modifier>*</modifier></type><name>cu</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>hwctx</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>cuda_dl</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>CHECK_CU</name><argument_list>(<argument><expr><call><name><name>cu</name><operator>-&gt;</operator><name>cuCtxPushCurrent</name></name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>cu_ctx</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CHECK_CU</name><argument_list>(<argument><expr><call><name><name>cu</name><operator>-&gt;</operator><name>cuModuleUnload</name></name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>cu_module</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CHECK_CU</name><argument_list>(<argument><expr><call><name><name>cu</name><operator>-&gt;</operator><name>cuCtxPopCurrent</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>dummy</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>overlay_cuda_activate</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>OverlayCUDAContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>ff_framesync_activate</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>fs</name></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>overlay_cuda_query_formats</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>enum</name> <name>AVPixelFormat</name></name></type> <name><name>pixel_formats</name><index>[]</index></name> <init>= <expr><block>{

<expr><name>AV_PIX_FMT_CUDA</name></expr>, <expr><name>AV_PIX_FMT_NONE</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFilterFormats</name> <modifier>*</modifier></type><name>pix_fmts</name> <init>= <expr><call><name>ff_make_format_list</name><argument_list>(<argument><expr><name>pixel_formats</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>ff_set_common_formats</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>pix_fmts</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>overlay_cuda_config_output</name><parameter_list>(<parameter><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>outlink</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>extern</specifier> <name>char</name></type> <name><name>vf_overlay_cuda_ptx</name><index>[]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFilterContext</name><modifier>*</modifier></type> <name>avctx</name> <init>= <expr><name><name>outlink</name><operator>-&gt;</operator><name>src</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>OverlayCUDAContext</name><modifier>*</modifier></type> <name>ctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>inlink</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>inputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVHWFramesContext</name> <modifier>*</modifier></type><name>frames_ctx</name> <init>= <expr><operator>(</operator><name>AVHWFramesContext</name><operator>*</operator><operator>)</operator><name><name>inlink</name><operator>-&gt;</operator><name>hw_frames_ctx</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>inlink_overlay</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>inputs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVHWFramesContext</name> <modifier>*</modifier></type><name>frames_ctx_overlay</name> <init>= <expr><operator>(</operator><name>AVHWFramesContext</name><operator>*</operator><operator>)</operator><name><name>inlink_overlay</name><operator>-&gt;</operator><name>hw_frames_ctx</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CUcontext</name></type> <name>dummy</name></decl>, <decl><type ref="prev"/><name>cuda_ctx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CudaFunctions</name> <modifier>*</modifier></type><name>cu</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>frames_ctx</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"No hw context provided on main input\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>in_format_main</name></name> <operator>=</operator> <name><name>frames_ctx</name><operator>-&gt;</operator><name>sw_format</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>format_is_supported</name><argument_list>(<argument><expr><name>supported_main_formats</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>in_format_main</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Unsupported main input format: %s\n"</literal></expr></argument>,

<argument><expr><call><name>av_get_pix_fmt_name</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>in_format_main</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOSYS</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>frames_ctx_overlay</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"No hw context provided on overlay input\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>in_format_overlay</name></name> <operator>=</operator> <name><name>frames_ctx_overlay</name><operator>-&gt;</operator><name>sw_format</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>format_is_supported</name><argument_list>(<argument><expr><name>supported_overlay_formats</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>in_format_overlay</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Unsupported overlay input format: %s\n"</literal></expr></argument>,

<argument><expr><call><name>av_get_pix_fmt_name</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>in_format_overlay</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOSYS</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>formats_match</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>in_format_main</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>in_format_overlay</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Can't overlay %s on %s \n"</literal></expr></argument>,

<argument><expr><call><name>av_get_pix_fmt_name</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>in_format_overlay</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>av_get_pix_fmt_name</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>in_format_main</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>hwctx</name></name> <operator>=</operator> <name><name>frames_ctx</name><operator>-&gt;</operator><name>device_ctx</name><operator>-&gt;</operator><name>hwctx</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>cuda_ctx</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>hwctx</name><operator>-&gt;</operator><name>cuda_ctx</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>fs</name><operator>.</operator><name>time_base</name></name> <operator>=</operator> <name><name>inlink</name><operator>-&gt;</operator><name>time_base</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>cu_stream</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>hwctx</name><operator>-&gt;</operator><name>stream</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>outlink</name><operator>-&gt;</operator><name>hw_frames_ctx</name></name> <operator>=</operator> <call><name>av_buffer_ref</name><argument_list>(<argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>hw_frames_ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cu</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>hwctx</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>cuda_dl</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>CHECK_CU</name><argument_list>(<argument><expr><call><name><name>cu</name><operator>-&gt;</operator><name>cuCtxPushCurrent</name></name><argument_list>(<argument><expr><name>cuda_ctx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>err</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>CHECK_CU</name><argument_list>(<argument><expr><call><name><name>cu</name><operator>-&gt;</operator><name>cuModuleLoadData</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>cu_module</name></name></expr></argument>, <argument><expr><name>vf_overlay_cuda_ptx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>CHECK_CU</name><argument_list>(<argument><expr><call><name><name>cu</name><operator>-&gt;</operator><name>cuCtxPopCurrent</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>dummy</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>err</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>CHECK_CU</name><argument_list>(<argument><expr><call><name><name>cu</name><operator>-&gt;</operator><name>cuModuleGetFunction</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>cu_func</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>cu_module</name></name></expr></argument>, <argument><expr><literal type="string">"Overlay_Cuda"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>CHECK_CU</name><argument_list>(<argument><expr><call><name><name>cu</name><operator>-&gt;</operator><name>cuCtxPopCurrent</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>dummy</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>err</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>CHECK_CU</name><argument_list>(<argument><expr><call><name><name>cu</name><operator>-&gt;</operator><name>cuCtxPopCurrent</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>dummy</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>ff_framesync_init_dualinput</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>fs</name></name></expr></argument>, <argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>err</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>ff_framesync_configure</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>fs</name></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OFFSET</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>offsetof(OverlayCUDAContext, x)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLAGS</name></cpp:macro> <cpp:value>(AV_OPT_FLAG_FILTERING_PARAM | AV_OPT_FLAG_VIDEO_PARAM)</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVOption</name></type> <name><name>overlay_cuda_options</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><literal type="string">"x"</literal></expr>, <expr><literal type="string">"Overlay x position"</literal></expr>,

<expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>x_position</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0</literal></expr> }</block></expr>, <expr><name>INT_MIN</name></expr>, <expr><name>INT_MAX</name></expr>, <expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>FLAGS</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"y"</literal></expr>, <expr><literal type="string">"Overlay y position"</literal></expr>,

<expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>y_position</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0</literal></expr> }</block></expr>, <expr><name>INT_MIN</name></expr>, <expr><name>INT_MAX</name></expr>, <expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>FLAGS</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"eof_action"</literal></expr>, <expr><literal type="string">"Action to take when encountering EOF from secondary input "</literal></expr>,

<expr><call><name>OFFSET</name><argument_list>(<argument><expr><name><name>fs</name><operator>.</operator><name>opt_eof_action</name></name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>EOF_ACTION_REPEAT</name></expr> }</block></expr>,

<expr><name>EOF_ACTION_REPEAT</name></expr>, <expr><name>EOF_ACTION_PASS</name></expr>, <expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>FLAGS</name></expr>, <expr><literal type="string">"eof_action"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"repeat"</literal></expr>, <expr><literal type="string">"Repeat the previous frame."</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>EOF_ACTION_REPEAT</name></expr> }</block></expr>, <expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>FLAGS</name></expr>, <expr><literal type="string">"eof_action"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"endall"</literal></expr>, <expr><literal type="string">"End both streams."</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>EOF_ACTION_ENDALL</name></expr> }</block></expr>, <expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>FLAGS</name></expr>, <expr><literal type="string">"eof_action"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"pass"</literal></expr>, <expr><literal type="string">"Pass through the main input."</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>EOF_ACTION_PASS</name></expr> }</block></expr>, <expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>FLAGS</name></expr>, <expr><literal type="string">"eof_action"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"shortest"</literal></expr>, <expr><literal type="string">"force termination when the shortest input terminates"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name><name>fs</name><operator>.</operator><name>opt_shortest</name></name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_BOOL</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0</literal></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"repeatlast"</literal></expr>, <expr><literal type="string">"repeat overlay of the last overlay frame"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name><name>fs</name><operator>.</operator><name>opt_repeatlast</name></name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_BOOL</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>,

}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>FRAMESYNC_DEFINE_CLASS</name><argument_list>(<argument><expr><name>overlay_cuda</name></expr></argument>, <argument><expr><name>OverlayCUDAContext</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVFilterPad</name></type> <name><name>overlay_cuda_inputs</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"main"</literal></expr>,

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,

}</block></expr>,

<expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"overlay"</literal></expr>,

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,

}</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVFilterPad</name></type> <name><name>overlay_cuda_outputs</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"default"</literal></expr>,

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,

<expr><operator>.</operator><name>config_props</name> <operator>=</operator> <operator>&amp;</operator><name>overlay_cuda_config_output</name></expr>,

}</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFilter</name></type> <name>ff_vf_overlay_cuda</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"overlay_cuda"</literal></expr>,

<expr><operator>.</operator><name>description</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"Overlay one video on top of another using CUDA"</literal></expr></argument>)</argument_list></call></expr>,

<expr><operator>.</operator><name>priv_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>OverlayCUDAContext</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><operator>.</operator><name>priv_class</name> <operator>=</operator> <operator>&amp;</operator><name>overlay_cuda_class</name></expr>,

<expr><operator>.</operator><name>init</name> <operator>=</operator> <operator>&amp;</operator><name>overlay_cuda_init</name></expr>,

<expr><operator>.</operator><name>uninit</name> <operator>=</operator> <operator>&amp;</operator><name>overlay_cuda_uninit</name></expr>,

<expr><operator>.</operator><name>activate</name> <operator>=</operator> <operator>&amp;</operator><name>overlay_cuda_activate</name></expr>,

<expr><operator>.</operator><name>query_formats</name> <operator>=</operator> <operator>&amp;</operator><name>overlay_cuda_query_formats</name></expr>,

<expr><operator>.</operator><name>inputs</name> <operator>=</operator> <name>overlay_cuda_inputs</name></expr>,

<expr><operator>.</operator><name>outputs</name> <operator>=</operator> <name>overlay_cuda_outputs</name></expr>,

<expr><operator>.</operator><name>preinit</name> <operator>=</operator> <name>overlay_cuda_framesync_preinit</name></expr>,

<expr><operator>.</operator><name>flags_internal</name> <operator>=</operator> <name>FF_FILTER_FLAG_HWFRAME_AWARE</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

</unit>
