<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavfilter\af_acrusher.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/opt.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avfilter.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"audio.h"</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct <name>LFOContext</name> <block>{

<decl_stmt><decl><type><name>double</name></type> <name>freq</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>offset</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>srate</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>amount</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>pwidth</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>phase</name></decl>;</decl_stmt>

}</block></struct></type> <name>LFOContext</name>;</typedef>

<typedef>typedef <type><struct>struct <name>SRContext</name> <block>{

<decl_stmt><decl><type><name>double</name></type> <name>target</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>real</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>samples</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>last</name></decl>;</decl_stmt>

}</block></struct></type> <name>SRContext</name>;</typedef>

<typedef>typedef <type><struct>struct <name>ACrusherContext</name> <block>{

<decl_stmt><decl><type><specifier>const</specifier> <name>AVClass</name> <modifier>*</modifier></type><name>class</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>level_in</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>level_out</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>bits</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>mix</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>mode</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>dc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>idc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>aa</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>samples</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>is_lfo</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>lforange</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>lforate</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>sqr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>aa1</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>coeff</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>round</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>sov</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>smin</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>sdiff</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>LFOContext</name></type> <name>lfo</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SRContext</name> <modifier>*</modifier></type><name>sr</name></decl>;</decl_stmt>

}</block></struct></type> <name>ACrusherContext</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OFFSET</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>offsetof(ACrusherContext, x)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>A</name></cpp:macro> <cpp:value>AV_OPT_FLAG_AUDIO_PARAM|AV_OPT_FLAG_FILTERING_PARAM</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVOption</name></type> <name><name>acrusher_options</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><literal type="string">"level_in"</literal></expr>, <expr><literal type="string">"set level in"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>level_in</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_DOUBLE</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name><operator>=</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><literal type="number">0.015625</literal></expr>, <expr><literal type="number">64</literal></expr>, <expr><name>A</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"level_out"</literal></expr>,<expr><literal type="string">"set level out"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>level_out</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_DOUBLE</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name><operator>=</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><literal type="number">0.015625</literal></expr>, <expr><literal type="number">64</literal></expr>, <expr><name>A</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"bits"</literal></expr>, <expr><literal type="string">"set bit reduction"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>bits</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_DOUBLE</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name><operator>=</operator><literal type="number">8</literal></expr>}</block></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">64</literal></expr>, <expr><name>A</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"mix"</literal></expr>, <expr><literal type="string">"set mix"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>mix</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_DOUBLE</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name><operator>=</operator><literal type="number">.5</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>A</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"mode"</literal></expr>, <expr><literal type="string">"set mode"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">0</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>A</name></expr>, <expr><literal type="string">"mode"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"lin"</literal></expr>, <expr><literal type="string">"linear"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">0</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>A</name></expr>, <expr><literal type="string">"mode"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"log"</literal></expr>, <expr><literal type="string">"logarithmic"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>A</name></expr>, <expr><literal type="string">"mode"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"dc"</literal></expr>, <expr><literal type="string">"set DC"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>dc</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_DOUBLE</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name><operator>=</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><literal type="number">.25</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><name>A</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"aa"</literal></expr>, <expr><literal type="string">"set anti-aliasing"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>aa</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_DOUBLE</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name><operator>=</operator><literal type="number">.5</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>A</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"samples"</literal></expr>, <expr><literal type="string">"set sample reduction"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>samples</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_DOUBLE</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name><operator>=</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">250</literal></expr>, <expr><name>A</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"lfo"</literal></expr>, <expr><literal type="string">"enable LFO"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>is_lfo</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_BOOL</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">0</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>A</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"lforange"</literal></expr>, <expr><literal type="string">"set LFO depth"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>lforange</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_DOUBLE</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name><operator>=</operator><literal type="number">20</literal></expr>}</block></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">250</literal></expr>, <expr><name>A</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"lforate"</literal></expr>, <expr><literal type="string">"set LFO rate"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>lforate</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_DOUBLE</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name><operator>=</operator><literal type="number">.3</literal></expr>}</block></expr>, <expr><literal type="number">.01</literal></expr>, <expr><literal type="number">200</literal></expr>, <expr><name>A</name></expr> }</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>AVFILTER_DEFINE_CLASS</name><argument_list>(<argument><expr><name>acrusher</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function><type><specifier>static</specifier> <name>double</name></type> <name>samplereduction</name><parameter_list>(<parameter><decl><type><name>ACrusherContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>SRContext</name> <modifier>*</modifier></type><name>sr</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>in</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>sr</name><operator>-&gt;</operator><name>samples</name></name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sr</name><operator>-&gt;</operator><name>samples</name></name> <operator>&gt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>round</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>sr</name><operator>-&gt;</operator><name>target</name></name> <operator>+=</operator> <name><name>s</name><operator>-&gt;</operator><name>samples</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sr</name><operator>-&gt;</operator><name>real</name></name> <operator>+=</operator> <name><name>s</name><operator>-&gt;</operator><name>round</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sr</name><operator>-&gt;</operator><name>target</name></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>samples</name></name> <operator>&gt;=</operator> <name><name>sr</name><operator>-&gt;</operator><name>real</name></name> <operator>+</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>sr</name><operator>-&gt;</operator><name>last</name></name> <operator>=</operator> <name>in</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sr</name><operator>-&gt;</operator><name>target</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sr</name><operator>-&gt;</operator><name>real</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>sr</name><operator>-&gt;</operator><name>samples</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name><name>sr</name><operator>-&gt;</operator><name>last</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>double</name></type> <name>add_dc</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>dc</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>idc</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><ternary><condition><expr><name>s</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>s</name> <operator>*</operator> <name>dc</name></expr> </then><else>: <expr><name>s</name> <operator>*</operator> <name>idc</name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>double</name></type> <name>remove_dc</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>dc</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>idc</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><ternary><condition><expr><name>s</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>s</name> <operator>*</operator> <name>idc</name></expr> </then><else>: <expr><name>s</name> <operator>*</operator> <name>dc</name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>double</name></type> <name>factor</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>k</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>aa1</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>aa</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><literal type="number">0.5</literal> <operator>*</operator> <operator>(</operator><call><name>sin</name><argument_list>(<argument><expr><name>M_PI</name> <operator>*</operator> <operator>(</operator><call><name>fabs</name><argument_list>(<argument><expr><name>y</name> <operator>-</operator> <name>k</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>aa1</name><operator>)</operator> <operator>/</operator> <name>aa</name> <operator>-</operator> <name>M_PI_2</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>double</name></type> <name>bitreduction</name><parameter_list>(<parameter><decl><type><name>ACrusherContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>in</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>double</name></type> <name>sqr</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>sqr</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>double</name></type> <name>coeff</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>coeff</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>double</name></type> <name>aa</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>aa</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>double</name></type> <name>aa1</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>aa1</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>y</name></decl>, <decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>

<expr_stmt><expr><name>in</name> <operator>=</operator> <call><name>add_dc</name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>dc</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>idc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>mode</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">0</literal></expr>:</case>

<default>default:</default>

<expr_stmt><expr><name>y</name> <operator>=</operator> <name>in</name> <operator>*</operator> <name>coeff</name></expr>;</expr_stmt>

<expr_stmt><expr><name>k</name> <operator>=</operator> <call><name>roundf</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>k</name> <operator>-</operator> <name>aa1</name> <operator>&lt;=</operator> <name>y</name> <operator>&amp;&amp;</operator> <name>y</name> <operator>&lt;=</operator> <name>k</name> <operator>+</operator> <name>aa1</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>k</name> <operator>/=</operator> <name>coeff</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>y</name> <operator>&gt;</operator> <name>k</name> <operator>+</operator> <name>aa1</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>k</name> <operator>=</operator> <name>k</name> <operator>/</operator> <name>coeff</name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>k</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <name>coeff</name> <operator>-</operator> <name>k</name> <operator>/</operator> <name>coeff</name><operator>)</operator> <operator>*</operator>

<call><name>factor</name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><name>k</name></expr></argument>, <argument><expr><name>aa1</name></expr></argument>, <argument><expr><name>aa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>k</name> <operator>=</operator> <name>k</name> <operator>/</operator> <name>coeff</name> <operator>-</operator> <operator>(</operator><name>k</name> <operator>/</operator> <name>coeff</name> <operator>-</operator> <operator>(</operator><name>k</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <name>coeff</name><operator>)</operator> <operator>*</operator>

<call><name>factor</name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><name>k</name></expr></argument>, <argument><expr><name>aa1</name></expr></argument>, <argument><expr><name>aa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<case>case <expr><literal type="number">1</literal></expr>:</case>

<expr_stmt><expr><name>y</name> <operator>=</operator> <name>sqr</name> <operator>*</operator> <call><name>log</name><argument_list>(<argument><expr><call><name>fabs</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>+</operator> <name>sqr</name> <operator>*</operator> <name>sqr</name></expr>;</expr_stmt>

<expr_stmt><expr><name>k</name> <operator>=</operator> <call><name>roundf</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>in</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>k</name> <operator>-</operator> <name>aa1</name> <operator>&lt;=</operator> <name>y</name> <operator>&amp;&amp;</operator> <name>y</name> <operator>&lt;=</operator> <name>k</name> <operator>+</operator> <name>aa1</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>k</name> <operator>=</operator> <name>in</name> <operator>/</operator> <call><name>fabs</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call> <operator>*</operator> <call><name>exp</name><argument_list>(<argument><expr><name>k</name> <operator>/</operator> <name>sqr</name> <operator>-</operator> <name>sqr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>y</name> <operator>&gt;</operator> <name>k</name> <operator>+</operator> <name>aa1</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>double</name></type> <name>x</name> <init>= <expr><call><name>exp</name><argument_list>(<argument><expr><name>k</name> <operator>/</operator> <name>sqr</name> <operator>-</operator> <name>sqr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>k</name> <operator>=</operator> <call><name>FFSIGN</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call> <operator>*</operator> <operator>(</operator><name>x</name> <operator>+</operator> <operator>(</operator><call><name>exp</name><argument_list>(<argument><expr><operator>(</operator><name>k</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <name>sqr</name> <operator>-</operator> <name>sqr</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>x</name><operator>)</operator> <operator>*</operator>

<call><name>factor</name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><name>k</name></expr></argument>, <argument><expr><name>aa1</name></expr></argument>, <argument><expr><name>aa</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>double</name></type> <name>x</name> <init>= <expr><call><name>exp</name><argument_list>(<argument><expr><name>k</name> <operator>/</operator> <name>sqr</name> <operator>-</operator> <name>sqr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>k</name> <operator>=</operator> <name>in</name> <operator>/</operator> <call><name>fabs</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call> <operator>*</operator> <operator>(</operator><name>x</name> <operator>-</operator> <operator>(</operator><name>x</name> <operator>-</operator> <call><name>exp</name><argument_list>(<argument><expr><operator>(</operator><name>k</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <name>sqr</name> <operator>-</operator> <name>sqr</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>*</operator>

<call><name>factor</name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><name>k</name></expr></argument>, <argument><expr><name>aa1</name></expr></argument>, <argument><expr><name>aa</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

</block_content>}</block></switch>

<expr_stmt><expr><name>k</name> <operator>+=</operator> <operator>(</operator><name>in</name> <operator>-</operator> <name>k</name><operator>)</operator> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>mix</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>k</name> <operator>=</operator> <call><name>remove_dc</name><argument_list>(<argument><expr><name>k</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>dc</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>idc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>k</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>double</name></type> <name>lfo_get</name><parameter_list>(<parameter><decl><type><name>LFOContext</name> <modifier>*</modifier></type><name>lfo</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>double</name></type> <name>phs</name> <init>= <expr><call><name>FFMIN</name><argument_list>(<argument><expr><literal type="number">100.</literal></expr></argument>, <argument><expr><name><name>lfo</name><operator>-&gt;</operator><name>phase</name></name> <operator>/</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><literal type="number">1.99</literal></expr></argument>, <argument><expr><call><name>FFMAX</name><argument_list>(<argument><expr><literal type="number">0.01</literal></expr></argument>, <argument><expr><name><name>lfo</name><operator>-&gt;</operator><name>pwidth</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>lfo</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>val</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>phs</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>phs</name> <operator>=</operator> <call><name>fmod</name><argument_list>(<argument><expr><name>phs</name></expr></argument>, <argument><expr><literal type="number">1.</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>sin</name><argument_list>(<argument><expr><operator>(</operator><name>phs</name> <operator>*</operator> <literal type="number">360.</literal><operator>)</operator> <operator>*</operator> <name>M_PI</name> <operator>/</operator> <literal type="number">180</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>val</name> <operator>*</operator> <name><name>lfo</name><operator>-&gt;</operator><name>amount</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>lfo_advance</name><parameter_list>(<parameter><decl><type><name>LFOContext</name> <modifier>*</modifier></type><name>lfo</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>count</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>lfo</name><operator>-&gt;</operator><name>phase</name></name> <operator>=</operator> <call><name>fabs</name><argument_list>(<argument><expr><name><name>lfo</name><operator>-&gt;</operator><name>phase</name></name> <operator>+</operator> <name>count</name> <operator>*</operator> <name><name>lfo</name><operator>-&gt;</operator><name>freq</name></name> <operator>*</operator> <operator>(</operator><literal type="number">1.</literal> <operator>/</operator> <name><name>lfo</name><operator>-&gt;</operator><name>srate</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>lfo</name><operator>-&gt;</operator><name>phase</name></name> <operator>&gt;=</operator> <literal type="number">1.</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>lfo</name><operator>-&gt;</operator><name>phase</name></name> <operator>=</operator> <call><name>fmod</name><argument_list>(<argument><expr><name><name>lfo</name><operator>-&gt;</operator><name>phase</name></name></expr></argument>, <argument><expr><literal type="number">1.</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>filter_frame</name><parameter_list>(<parameter><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>inlink</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>in</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>inlink</name><operator>-&gt;</operator><name>dst</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ACrusherContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>outlink</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>outputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>out</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>double</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>double</name> <operator>*</operator><operator>)</operator><name><name>in</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name> <modifier>*</modifier></type><name>dst</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>double</name></type> <name>level_in</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>level_in</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>double</name></type> <name>level_out</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>level_out</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>double</name></type> <name>mix</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>mix</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>c</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>av_frame_is_writable</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>out</name> <operator>=</operator> <name>in</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>out</name> <operator>=</operator> <call><name>ff_get_audio_buffer</name><argument_list>(<argument><expr><name>inlink</name></expr></argument>, <argument><expr><name><name>in</name><operator>-&gt;</operator><name>nb_samples</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>out</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_frame_copy_props</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>dst</name> <operator>=</operator> <operator>(</operator><name>double</name> <operator>*</operator><operator>)</operator><name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name><name>in</name><operator>-&gt;</operator><name>nb_samples</name></name></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>is_lfo</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>samples</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>smin</name></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>sdiff</name></name> <operator>*</operator> <operator>(</operator><call><name>lfo_get</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>lfo</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">0.5</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>round</name></name> <operator>=</operator> <call><name>round</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>samples</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>c</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>c</name> <operator>&lt;</operator> <name><name>inlink</name><operator>-&gt;</operator><name>channels</name></name></expr>;</condition> <incr><expr><name>c</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>double</name></type> <name>sample</name> <init>= <expr><name><name>src</name><index>[<expr><name>c</name></expr>]</index></name> <operator>*</operator> <name>level_in</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>sample</name> <operator>=</operator> <name>mix</name> <operator>*</operator> <call><name>samplereduction</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>sr</name><index>[<expr><name>c</name></expr>]</index></name></expr></argument>, <argument><expr><name>sample</name></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>src</name><index>[<expr><name>c</name></expr>]</index></name> <operator>*</operator> <operator>(</operator><literal type="number">1.</literal> <operator>-</operator> <name>mix</name><operator>)</operator> <operator>*</operator> <name>level_in</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><index>[<expr><name>c</name></expr>]</index></name> <operator>=</operator> <call><name>bitreduction</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>sample</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>level_out</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>c</name></expr>;</expr_stmt>

<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>c</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>is_lfo</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>lfo_advance</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>lfo</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>in</name> <operator>!=</operator> <name>out</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><call><name>ff_filter_frame</name><argument_list>(<argument><expr><name>outlink</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>query_formats</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVFilterFormats</name> <modifier>*</modifier></type><name>formats</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFilterChannelLayouts</name> <modifier>*</modifier></type><name>layouts</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>enum</name> <name>AVSampleFormat</name></name></type> <name><name>sample_fmts</name><index>[]</index></name> <init>= <expr><block>{

<expr><name>AV_SAMPLE_FMT_DBL</name></expr>,

<expr><name>AV_SAMPLE_FMT_NONE</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name>layouts</name> <operator>=</operator> <call><name>ff_all_channel_counts</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>layouts</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_set_common_channel_layouts</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>layouts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>formats</name> <operator>=</operator> <call><name>ff_make_format_list</name><argument_list>(<argument><expr><name>sample_fmts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>formats</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_set_common_formats</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>formats</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>formats</name> <operator>=</operator> <call><name>ff_all_samplerates</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>formats</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>ff_set_common_samplerates</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>formats</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>void</name></type> <name>uninit</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ACrusherContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>sr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>config_input</name><parameter_list>(<parameter><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>inlink</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>inlink</name><operator>-&gt;</operator><name>dst</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ACrusherContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>rad</name></decl>, <decl><type ref="prev"/><name>sunder</name></decl>, <decl><type ref="prev"/><name>smax</name></decl>, <decl><type ref="prev"/><name>sover</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>idc</name></name> <operator>=</operator> <literal type="number">1.</literal> <operator>/</operator> <name><name>s</name><operator>-&gt;</operator><name>dc</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>coeff</name></name> <operator>=</operator> <call><name>exp2</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>bits</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>sqr</name></name> <operator>=</operator> <call><name>sqrt</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>coeff</name></name> <operator>/</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>aa1</name></name> <operator>=</operator> <operator>(</operator><literal type="number">1.</literal> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>aa</name></name><operator>)</operator> <operator>/</operator> <literal type="number">2.</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>round</name></name> <operator>=</operator> <call><name>round</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>samples</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>rad</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>lforange</name></name> <operator>/</operator> <literal type="number">2.</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>smin</name></name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>samples</name></name> <operator>-</operator> <name>rad</name></expr></argument>, <argument><expr><literal type="number">1.</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sunder</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>samples</name></name> <operator>-</operator> <name>rad</name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>smin</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>smax</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>samples</name></name> <operator>+</operator> <name>rad</name></expr></argument>, <argument><expr><literal type="number">250.</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sover</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>samples</name></name> <operator>+</operator> <name>rad</name> <operator>-</operator> <name>smax</name></expr>;</expr_stmt>

<expr_stmt><expr><name>smax</name> <operator>-=</operator> <name>sunder</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>smin</name></name> <operator>-=</operator> <name>sover</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>sdiff</name></name> <operator>=</operator> <name>smax</name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>smin</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>lfo</name><operator>.</operator><name>freq</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>lforate</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>lfo</name><operator>.</operator><name>pwidth</name></name> <operator>=</operator> <literal type="number">1.</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>lfo</name><operator>.</operator><name>srate</name></name> <operator>=</operator> <name><name>inlink</name><operator>-&gt;</operator><name>sample_rate</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>lfo</name><operator>.</operator><name>amount</name></name> <operator>=</operator> <literal type="number">.5</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>sr</name></name> <operator>=</operator> <call><name>av_calloc</name><argument_list>(<argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>channels</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>sr</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>sr</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVFilterPad</name></type> <name><name>avfilter_af_acrusher_inputs</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"default"</literal></expr>,

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_AUDIO</name></expr>,

<expr><operator>.</operator><name>config_props</name> <operator>=</operator> <name>config_input</name></expr>,

<expr><operator>.</operator><name>filter_frame</name> <operator>=</operator> <name>filter_frame</name></expr>,

}</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVFilterPad</name></type> <name><name>avfilter_af_acrusher_outputs</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"default"</literal></expr>,

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_AUDIO</name></expr>,

}</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFilter</name></type> <name>ff_af_acrusher</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"acrusher"</literal></expr>,

<expr><operator>.</operator><name>description</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"Reduce audio bit resolution."</literal></expr></argument>)</argument_list></call></expr>,

<expr><operator>.</operator><name>priv_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>ACrusherContext</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><operator>.</operator><name>priv_class</name> <operator>=</operator> <operator>&amp;</operator><name>acrusher_class</name></expr>,

<expr><operator>.</operator><name>uninit</name> <operator>=</operator> <name>uninit</name></expr>,

<expr><operator>.</operator><name>query_formats</name> <operator>=</operator> <name>query_formats</name></expr>,

<expr><operator>.</operator><name>inputs</name> <operator>=</operator> <name>avfilter_af_acrusher_inputs</name></expr>,

<expr><operator>.</operator><name>outputs</name> <operator>=</operator> <name>avfilter_af_acrusher_outputs</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

</unit>
