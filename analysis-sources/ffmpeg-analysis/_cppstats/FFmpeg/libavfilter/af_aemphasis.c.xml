<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavfilter\af_aemphasis.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/opt.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avfilter.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"audio.h"</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct <name>BiquadCoeffs</name> <block>{

<decl_stmt><decl><type><name>double</name></type> <name>a0</name></decl>, <name>a1</name>, <name>a2</name>, <name>b1</name>, <name>b2</name>;</decl_stmt>

}</block></struct></type> <name>BiquadCoeffs</name>;</typedef>

<typedef>typedef <type><struct>struct <name>BiquadD2</name> <block>{

<decl_stmt><decl><type><name>double</name></type> <name>a0</name></decl>, <name>a1</name>, <name>a2</name>, <name>b1</name>, <name>b2</name>, <name>w1</name>, <name>w2</name>;</decl_stmt>

}</block></struct></type> <name>BiquadD2</name>;</typedef>

<typedef>typedef <type><struct>struct <name>RIAACurve</name> <block>{

<decl_stmt><decl><type><name>BiquadD2</name></type> <name>r1</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>BiquadD2</name></type> <name>brickw</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>use_brickw</name></decl>;</decl_stmt>

}</block></struct></type> <name>RIAACurve</name>;</typedef>

<typedef>typedef <type><struct>struct <name>AudioEmphasisContext</name> <block>{

<decl_stmt><decl><type><specifier>const</specifier> <name>AVClass</name> <modifier>*</modifier></type><name>class</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>mode</name></decl>, <name>type</name>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>level_in</name></decl>, <name>level_out</name>;</decl_stmt>

<decl_stmt><decl><type><name>RIAACurve</name> <modifier>*</modifier></type><name>rc</name></decl>;</decl_stmt>

}</block></struct></type> <name>AudioEmphasisContext</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OFFSET</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>offsetof(AudioEmphasisContext, x)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLAGS</name></cpp:macro> <cpp:value>AV_OPT_FLAG_AUDIO_PARAM|AV_OPT_FLAG_FILTERING_PARAM</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVOption</name></type> <name><name>aemphasis_options</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><literal type="string">"level_in"</literal></expr>, <expr><literal type="string">"set input gain"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>level_in</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_DOUBLE</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name><operator>=</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">64</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"level_out"</literal></expr>, <expr><literal type="string">"set output gain"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>level_out</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_DOUBLE</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name><operator>=</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">64</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"mode"</literal></expr>, <expr><literal type="string">"set filter mode"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">0</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"mode"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"reproduction"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">0</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"mode"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"production"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"mode"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"type"</literal></expr>, <expr><literal type="string">"set filter type"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">4</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"type"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"col"</literal></expr>, <expr><literal type="string">"Columbia"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">0</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"type"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"emi"</literal></expr>, <expr><literal type="string">"EMI"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"type"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"bsi"</literal></expr>, <expr><literal type="string">"BSI (78RPM)"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">2</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"type"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"riaa"</literal></expr>, <expr><literal type="string">"RIAA"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">3</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"type"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"cd"</literal></expr>, <expr><literal type="string">"Compact Disc (CD)"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">4</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"type"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"50fm"</literal></expr>, <expr><literal type="string">"50Âµs (FM)"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">5</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"type"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"75fm"</literal></expr>, <expr><literal type="string">"75Âµs (FM)"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">6</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"type"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"50kf"</literal></expr>, <expr><literal type="string">"50Âµs (FM-KF)"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">7</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"type"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"75kf"</literal></expr>, <expr><literal type="string">"75Âµs (FM-KF)"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">8</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"type"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>AVFILTER_DEFINE_CLASS</name><argument_list>(<argument><expr><name>aemphasis</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>double</name></type> <name>biquad</name><parameter_list>(<parameter><decl><type><name>BiquadD2</name> <modifier>*</modifier></type><name>bq</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>in</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>double</name></type> <name>n</name> <init>= <expr><name>in</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>tmp</name> <init>= <expr><name>n</name> <operator>-</operator> <name><name>bq</name><operator>-&gt;</operator><name>w1</name></name> <operator>*</operator> <name><name>bq</name><operator>-&gt;</operator><name>b1</name></name> <operator>-</operator> <name><name>bq</name><operator>-&gt;</operator><name>w2</name></name> <operator>*</operator> <name><name>bq</name><operator>-&gt;</operator><name>b2</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>out</name> <init>= <expr><name>tmp</name> <operator>*</operator> <name><name>bq</name><operator>-&gt;</operator><name>a0</name></name> <operator>+</operator> <name><name>bq</name><operator>-&gt;</operator><name>w1</name></name> <operator>*</operator> <name><name>bq</name><operator>-&gt;</operator><name>a1</name></name> <operator>+</operator> <name><name>bq</name><operator>-&gt;</operator><name>w2</name></name> <operator>*</operator> <name><name>bq</name><operator>-&gt;</operator><name>a2</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>bq</name><operator>-&gt;</operator><name>w2</name></name> <operator>=</operator> <name><name>bq</name><operator>-&gt;</operator><name>w1</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bq</name><operator>-&gt;</operator><name>w1</name></name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>

<return>return <expr><name>out</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>filter_frame</name><parameter_list>(<parameter><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>inlink</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>in</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>inlink</name><operator>-&gt;</operator><name>dst</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>outlink</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>outputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AudioEmphasisContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>double</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>double</name> <operator>*</operator><operator>)</operator><name><name>in</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>double</name></type> <name>level_out</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>level_out</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>double</name></type> <name>level_in</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>level_in</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>out</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name> <modifier>*</modifier></type><name>dst</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>c</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>av_frame_is_writable</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>out</name> <operator>=</operator> <name>in</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>out</name> <operator>=</operator> <call><name>ff_get_audio_buffer</name><argument_list>(<argument><expr><name>outlink</name></expr></argument>, <argument><expr><name><name>in</name><operator>-&gt;</operator><name>nb_samples</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>out</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_frame_copy_props</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>dst</name> <operator>=</operator> <operator>(</operator><name>double</name> <operator>*</operator><operator>)</operator><name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name><name>in</name><operator>-&gt;</operator><name>nb_samples</name></name></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>c</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>c</name> <operator>&lt;</operator> <name><name>inlink</name><operator>-&gt;</operator><name>channels</name></name></expr>;</condition> <incr><expr><name>c</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>dst</name><index>[<expr><name>c</name></expr>]</index></name> <operator>=</operator> <name>level_out</name> <operator>*</operator> <call><name>biquad</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>rc</name><index>[<expr><name>c</name></expr>]</index></name><operator>.</operator><name>r1</name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>rc</name><index>[<expr><name>c</name></expr>]</index></name><operator>.</operator><name>use_brickw</name></expr> ?</condition><then> <expr><call><name>biquad</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>rc</name><index>[<expr><name>c</name></expr>]</index></name><operator>.</operator><name>brickw</name></expr></argument>, <argument><expr><name><name>src</name><index>[<expr><name>c</name></expr>]</index></name> <operator>*</operator> <name>level_in</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name><name>src</name><index>[<expr><name>c</name></expr>]</index></name> <operator>*</operator> <name>level_in</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name><name>inlink</name><operator>-&gt;</operator><name>channels</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>src</name> <operator>+=</operator> <name><name>inlink</name><operator>-&gt;</operator><name>channels</name></name></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>in</name> <operator>!=</operator> <name>out</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><call><name>ff_filter_frame</name><argument_list>(<argument><expr><name>outlink</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>query_formats</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVFilterChannelLayouts</name> <modifier>*</modifier></type><name>layouts</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFilterFormats</name> <modifier>*</modifier></type><name>formats</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>enum</name> <name>AVSampleFormat</name></name></type> <name><name>sample_fmts</name><index>[]</index></name> <init>= <expr><block>{

<expr><name>AV_SAMPLE_FMT_DBL</name></expr>,

<expr><name>AV_SAMPLE_FMT_NONE</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name>layouts</name> <operator>=</operator> <call><name>ff_all_channel_counts</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>layouts</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_set_common_channel_layouts</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>layouts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>formats</name> <operator>=</operator> <call><name>ff_make_format_list</name><argument_list>(<argument><expr><name>sample_fmts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>formats</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_set_common_formats</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>formats</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>formats</name> <operator>=</operator> <call><name>ff_all_samplerates</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>formats</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>ff_set_common_samplerates</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>formats</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>set_highshelf_rbj</name><parameter_list>(<parameter><decl><type><name>BiquadD2</name> <modifier>*</modifier></type><name>bq</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>freq</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>q</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>peak</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>sr</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>double</name></type> <name>A</name> <init>= <expr><call><name>sqrt</name><argument_list>(<argument><expr><name>peak</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>w0</name> <init>= <expr><name>freq</name> <operator>*</operator> <literal type="number">2</literal> <operator>*</operator> <name>M_PI</name> <operator>/</operator> <name>sr</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>alpha</name> <init>= <expr><call><name>sin</name><argument_list>(<argument><expr><name>w0</name></expr></argument>)</argument_list></call> <operator>/</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>q</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>cw0</name> <init>= <expr><call><name>cos</name><argument_list>(<argument><expr><name>w0</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>tmp</name> <init>= <expr><literal type="number">2</literal> <operator>*</operator> <call><name>sqrt</name><argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>alpha</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>b0</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>ib0</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>bq</name><operator>-&gt;</operator><name>a0</name></name> <operator>=</operator> <name>A</name><operator>*</operator><operator>(</operator> <operator>(</operator><name>A</name><operator>+</operator><literal type="number">1</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>A</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><name>cw0</name> <operator>+</operator> <name>tmp</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bq</name><operator>-&gt;</operator><name>a1</name></name> <operator>=</operator> <operator>-</operator><literal type="number">2</literal><operator>*</operator><name>A</name><operator>*</operator><operator>(</operator> <operator>(</operator><name>A</name><operator>-</operator><literal type="number">1</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>A</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><name>cw0</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bq</name><operator>-&gt;</operator><name>a2</name></name> <operator>=</operator> <name>A</name><operator>*</operator><operator>(</operator> <operator>(</operator><name>A</name><operator>+</operator><literal type="number">1</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>A</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><name>cw0</name> <operator>-</operator> <name>tmp</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>b0</name> <operator>=</operator> <operator>(</operator><name>A</name><operator>+</operator><literal type="number">1</literal><operator>)</operator> <operator>-</operator> <operator>(</operator><name>A</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><name>cw0</name> <operator>+</operator> <name>tmp</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bq</name><operator>-&gt;</operator><name>b1</name></name> <operator>=</operator> <literal type="number">2</literal><operator>*</operator><operator>(</operator> <operator>(</operator><name>A</name><operator>-</operator><literal type="number">1</literal><operator>)</operator> <operator>-</operator> <operator>(</operator><name>A</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><name>cw0</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bq</name><operator>-&gt;</operator><name>b2</name></name> <operator>=</operator> <operator>(</operator><name>A</name><operator>+</operator><literal type="number">1</literal><operator>)</operator> <operator>-</operator> <operator>(</operator><name>A</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><name>cw0</name> <operator>-</operator> <name>tmp</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ib0</name> <operator>=</operator> <literal type="number">1</literal> <operator>/</operator> <name>b0</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bq</name><operator>-&gt;</operator><name>b1</name></name> <operator>*=</operator> <name>ib0</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bq</name><operator>-&gt;</operator><name>b2</name></name> <operator>*=</operator> <name>ib0</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bq</name><operator>-&gt;</operator><name>a0</name></name> <operator>*=</operator> <name>ib0</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bq</name><operator>-&gt;</operator><name>a1</name></name> <operator>*=</operator> <name>ib0</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bq</name><operator>-&gt;</operator><name>a2</name></name> <operator>*=</operator> <name>ib0</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>set_lp_rbj</name><parameter_list>(<parameter><decl><type><name>BiquadD2</name> <modifier>*</modifier></type><name>bq</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>fc</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>q</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>sr</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>gain</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>double</name></type> <name>omega</name> <init>= <expr><literal type="number">2.0</literal> <operator>*</operator> <name>M_PI</name> <operator>*</operator> <name>fc</name> <operator>/</operator> <name>sr</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>sn</name> <init>= <expr><call><name>sin</name><argument_list>(<argument><expr><name>omega</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>cs</name> <init>= <expr><call><name>cos</name><argument_list>(<argument><expr><name>omega</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>alpha</name> <init>= <expr><name>sn</name><operator>/</operator><operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>q</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>inv</name> <init>= <expr><literal type="number">1.0</literal><operator>/</operator><operator>(</operator><literal type="number">1.0</literal> <operator>+</operator> <name>alpha</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>bq</name><operator>-&gt;</operator><name>a2</name></name> <operator>=</operator> <name><name>bq</name><operator>-&gt;</operator><name>a0</name></name> <operator>=</operator> <name>gain</name> <operator>*</operator> <name>inv</name> <operator>*</operator> <operator>(</operator><literal type="number">1.0</literal> <operator>-</operator> <name>cs</name><operator>)</operator> <operator>*</operator> <literal type="number">0.5</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bq</name><operator>-&gt;</operator><name>a1</name></name> <operator>=</operator> <name><name>bq</name><operator>-&gt;</operator><name>a0</name></name> <operator>+</operator> <name><name>bq</name><operator>-&gt;</operator><name>a0</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bq</name><operator>-&gt;</operator><name>b1</name></name> <operator>=</operator> <operator>(</operator><operator>-</operator><literal type="number">2.0</literal> <operator>*</operator> <name>cs</name> <operator>*</operator> <name>inv</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bq</name><operator>-&gt;</operator><name>b2</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><literal type="number">1.0</literal> <operator>-</operator> <name>alpha</name><operator>)</operator> <operator>*</operator> <name>inv</name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>double</name></type> <name>freq_gain</name><parameter_list>(<parameter><decl><type><name>BiquadCoeffs</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>freq</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>sr</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>double</name></type> <name>zr</name></decl>, <decl><type ref="prev"/><name>zi</name></decl>;</decl_stmt>

<expr_stmt><expr><name>freq</name> <operator>*=</operator> <literal type="number">2.0</literal> <operator>*</operator> <name>M_PI</name> <operator>/</operator> <name>sr</name></expr>;</expr_stmt>

<expr_stmt><expr><name>zr</name> <operator>=</operator> <call><name>cos</name><argument_list>(<argument><expr><name>freq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>zi</name> <operator>=</operator> <operator>-</operator><call><name>sin</name><argument_list>(<argument><expr><name>freq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>hypot</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>a0</name></name> <operator>+</operator> <name><name>c</name><operator>-&gt;</operator><name>a1</name></name><operator>*</operator><name>zr</name> <operator>+</operator> <name><name>c</name><operator>-&gt;</operator><name>a2</name></name><operator>*</operator><operator>(</operator><name>zr</name><operator>*</operator><name>zr</name><operator>-</operator><name>zi</name><operator>*</operator><name>zi</name><operator>)</operator></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>a1</name></name><operator>*</operator><name>zi</name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name><name>c</name><operator>-&gt;</operator><name>a2</name></name><operator>*</operator><name>zr</name><operator>*</operator><name>zi</name></expr></argument>)</argument_list></call> <operator>/</operator>

<call><name>hypot</name><argument_list>(<argument><expr><literal type="number">1</literal> <operator>+</operator> <name><name>c</name><operator>-&gt;</operator><name>b1</name></name><operator>*</operator><name>zr</name> <operator>+</operator> <name><name>c</name><operator>-&gt;</operator><name>b2</name></name><operator>*</operator><operator>(</operator><name>zr</name><operator>*</operator><name>zr</name><operator>-</operator><name>zi</name><operator>*</operator><name>zi</name><operator>)</operator></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>b1</name></name><operator>*</operator><name>zi</name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name><name>c</name><operator>-&gt;</operator><name>b2</name></name><operator>*</operator><name>zr</name><operator>*</operator><name>zi</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>config_input</name><parameter_list>(<parameter><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>inlink</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>double</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>k</name></decl>, <decl><type ref="prev"/><name>g</name></decl>, <decl><type ref="prev"/><name>t</name></decl>, <decl><type ref="prev"/><name>a0</name></decl>, <decl><type ref="prev"/><name>a1</name></decl>, <decl><type ref="prev"/><name>a2</name></decl>, <decl><type ref="prev"/><name>b1</name></decl>, <decl><type ref="prev"/><name>b2</name></decl>, <decl><type ref="prev"/><name>tau1</name></decl>, <decl><type ref="prev"/><name>tau2</name></decl>, <decl><type ref="prev"/><name>tau3</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>cutfreq</name></decl>, <decl><type ref="prev"/><name>gain1kHz</name></decl>, <decl><type ref="prev"/><name>gc</name></decl>, <decl><type ref="prev"/><name>sr</name> <init>= <expr><name><name>inlink</name><operator>-&gt;</operator><name>sample_rate</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>inlink</name><operator>-&gt;</operator><name>dst</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AudioEmphasisContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>BiquadCoeffs</name></type> <name>coeffs</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ch</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>rc</name></name> <operator>=</operator> <call><name>av_calloc</name><argument_list>(<argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>channels</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>rc</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>rc</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<switch>switch <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">0</literal></expr>:</case> 

<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">100.</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>j</name> <operator>=</operator> <literal type="number">500.</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>k</name> <operator>=</operator> <literal type="number">1590.</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">1</literal></expr>:</case> 

<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">70.</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>j</name> <operator>=</operator> <literal type="number">500.</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>k</name> <operator>=</operator> <literal type="number">2500.</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">2</literal></expr>:</case> 

<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">50.</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>j</name> <operator>=</operator> <literal type="number">353.</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>k</name> <operator>=</operator> <literal type="number">3180.</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">3</literal></expr>:</case> 

<default>default:</default>

<expr_stmt><expr><name>tau1</name> <operator>=</operator> <literal type="number">0.003180</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>tau2</name> <operator>=</operator> <literal type="number">0.000318</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>tau3</name> <operator>=</operator> <literal type="number">0.000075</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">1.</literal> <operator>/</operator> <operator>(</operator><literal type="number">2.</literal> <operator>*</operator> <name>M_PI</name> <operator>*</operator> <name>tau1</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>j</name> <operator>=</operator> <literal type="number">1.</literal> <operator>/</operator> <operator>(</operator><literal type="number">2.</literal> <operator>*</operator> <name>M_PI</name> <operator>*</operator> <name>tau2</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>k</name> <operator>=</operator> <literal type="number">1.</literal> <operator>/</operator> <operator>(</operator><literal type="number">2.</literal> <operator>*</operator> <name>M_PI</name> <operator>*</operator> <name>tau3</name><operator>)</operator></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">4</literal></expr>:</case> 

<expr_stmt><expr><name>tau1</name> <operator>=</operator> <literal type="number">0.000050</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>tau2</name> <operator>=</operator> <literal type="number">0.000015</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>tau3</name> <operator>=</operator> <literal type="number">0.0000001</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">1.</literal> <operator>/</operator> <operator>(</operator><literal type="number">2.</literal> <operator>*</operator> <name>M_PI</name> <operator>*</operator> <name>tau1</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>j</name> <operator>=</operator> <literal type="number">1.</literal> <operator>/</operator> <operator>(</operator><literal type="number">2.</literal> <operator>*</operator> <name>M_PI</name> <operator>*</operator> <name>tau2</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>k</name> <operator>=</operator> <literal type="number">1.</literal> <operator>/</operator> <operator>(</operator><literal type="number">2.</literal> <operator>*</operator> <name>M_PI</name> <operator>*</operator> <name>tau3</name><operator>)</operator></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">5</literal></expr>:</case> 

<expr_stmt><expr><name>tau1</name> <operator>=</operator> <literal type="number">0.000050</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>tau2</name> <operator>=</operator> <name>tau1</name> <operator>/</operator> <literal type="number">20</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>tau3</name> <operator>=</operator> <name>tau1</name> <operator>/</operator> <literal type="number">50</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">1.</literal> <operator>/</operator> <operator>(</operator><literal type="number">2.</literal> <operator>*</operator> <name>M_PI</name> <operator>*</operator> <name>tau1</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>j</name> <operator>=</operator> <literal type="number">1.</literal> <operator>/</operator> <operator>(</operator><literal type="number">2.</literal> <operator>*</operator> <name>M_PI</name> <operator>*</operator> <name>tau2</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>k</name> <operator>=</operator> <literal type="number">1.</literal> <operator>/</operator> <operator>(</operator><literal type="number">2.</literal> <operator>*</operator> <name>M_PI</name> <operator>*</operator> <name>tau3</name><operator>)</operator></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">6</literal></expr>:</case> 

<expr_stmt><expr><name>tau1</name> <operator>=</operator> <literal type="number">0.000075</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>tau2</name> <operator>=</operator> <name>tau1</name> <operator>/</operator> <literal type="number">20</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>tau3</name> <operator>=</operator> <name>tau1</name> <operator>/</operator> <literal type="number">50</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">1.</literal> <operator>/</operator> <operator>(</operator><literal type="number">2.</literal> <operator>*</operator> <name>M_PI</name> <operator>*</operator> <name>tau1</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>j</name> <operator>=</operator> <literal type="number">1.</literal> <operator>/</operator> <operator>(</operator><literal type="number">2.</literal> <operator>*</operator> <name>M_PI</name> <operator>*</operator> <name>tau2</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>k</name> <operator>=</operator> <literal type="number">1.</literal> <operator>/</operator> <operator>(</operator><literal type="number">2.</literal> <operator>*</operator> <name>M_PI</name> <operator>*</operator> <name>tau3</name><operator>)</operator></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<expr_stmt><expr><name>i</name> <operator>*=</operator> <literal type="number">2</literal> <operator>*</operator> <name>M_PI</name></expr>;</expr_stmt>

<expr_stmt><expr><name>j</name> <operator>*=</operator> <literal type="number">2</literal> <operator>*</operator> <name>M_PI</name></expr>;</expr_stmt>

<expr_stmt><expr><name>k</name> <operator>*=</operator> <literal type="number">2</literal> <operator>*</operator> <name>M_PI</name></expr>;</expr_stmt>

<expr_stmt><expr><name>t</name> <operator>=</operator> <literal type="number">1.</literal> <operator>/</operator> <name>sr</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <literal type="number">7</literal> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>double</name></type> <name>tau</name> <init>= <expr><operator>(</operator><ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <literal type="number">7</literal></expr> ?</condition><then> <expr><literal type="number">0.000050</literal></expr> </then><else>: <expr><literal type="number">0.000075</literal></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>f</name> <init>= <expr><literal type="number">1.0</literal> <operator>/</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>M_PI</name> <operator>*</operator> <name>tau</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>nyq</name> <init>= <expr><name>sr</name> <operator>*</operator> <literal type="number">0.5</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>gain</name> <init>= <expr><call><name>sqrt</name><argument_list>(<argument><expr><literal type="number">1.0</literal> <operator>+</operator> <name>nyq</name> <operator>*</operator> <name>nyq</name> <operator>/</operator> <operator>(</operator><name>f</name> <operator>*</operator> <name>f</name><operator>)</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>double</name></type> <name>cfreq</name> <init>= <expr><call><name>sqrt</name><argument_list>(<argument><expr><operator>(</operator><name>gain</name> <operator>-</operator> <literal type="number">1.0</literal><operator>)</operator> <operator>*</operator> <name>f</name> <operator>*</operator> <name>f</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>double</name></type> <name>q</name> <init>= <expr><literal type="number">1.0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <literal type="number">8</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>q</name> <operator>=</operator> <call><name>pow</name><argument_list>(<argument><expr><operator>(</operator><name>sr</name> <operator>/</operator> <literal type="number">3269.0</literal><operator>)</operator> <operator>+</operator> <literal type="number">19.5</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">0.25</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <literal type="number">7</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>q</name> <operator>=</operator> <call><name>pow</name><argument_list>(<argument><expr><operator>(</operator><name>sr</name> <operator>/</operator> <literal type="number">4750.0</literal><operator>)</operator> <operator>+</operator> <literal type="number">19.5</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">0.25</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>mode</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>set_highshelf_rbj</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>rc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>r1</name></expr></argument>, <argument><expr><name>cfreq</name></expr></argument>, <argument><expr><name>q</name></expr></argument>, <argument><expr><literal type="number">1.</literal> <operator>/</operator> <name>gain</name></expr></argument>, <argument><expr><name>sr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>set_highshelf_rbj</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>rc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>r1</name></expr></argument>, <argument><expr><name>cfreq</name></expr></argument>, <argument><expr><name>q</name></expr></argument>, <argument><expr><name>gain</name></expr></argument>, <argument><expr><name>sr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>rc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>use_brickw</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>rc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>use_brickw</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>mode</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name>g</name> <operator>=</operator> <literal type="number">1.</literal> <operator>/</operator> <operator>(</operator><literal type="number">4.</literal><operator>+</operator><literal type="number">2.</literal><operator>*</operator><name>i</name><operator>*</operator><name>t</name><operator>+</operator><literal type="number">2.</literal><operator>*</operator><name>k</name><operator>*</operator><name>t</name><operator>+</operator><name>i</name><operator>*</operator><name>k</name><operator>*</operator><name>t</name><operator>*</operator><name>t</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>a0</name> <operator>=</operator> <operator>(</operator><literal type="number">2.</literal><operator>*</operator><name>t</name><operator>+</operator><name>j</name><operator>*</operator><name>t</name><operator>*</operator><name>t</name><operator>)</operator><operator>*</operator><name>g</name></expr>;</expr_stmt>

<expr_stmt><expr><name>a1</name> <operator>=</operator> <operator>(</operator><literal type="number">2.</literal><operator>*</operator><name>j</name><operator>*</operator><name>t</name><operator>*</operator><name>t</name><operator>)</operator><operator>*</operator><name>g</name></expr>;</expr_stmt>

<expr_stmt><expr><name>a2</name> <operator>=</operator> <operator>(</operator><operator>-</operator><literal type="number">2.</literal><operator>*</operator><name>t</name><operator>+</operator><name>j</name><operator>*</operator><name>t</name><operator>*</operator><name>t</name><operator>)</operator><operator>*</operator><name>g</name></expr>;</expr_stmt>

<expr_stmt><expr><name>b1</name> <operator>=</operator> <operator>(</operator><operator>-</operator><literal type="number">8.</literal><operator>+</operator><literal type="number">2.</literal><operator>*</operator><name>i</name><operator>*</operator><name>k</name><operator>*</operator><name>t</name><operator>*</operator><name>t</name><operator>)</operator><operator>*</operator><name>g</name></expr>;</expr_stmt>

<expr_stmt><expr><name>b2</name> <operator>=</operator> <operator>(</operator><literal type="number">4.</literal><operator>-</operator><literal type="number">2.</literal><operator>*</operator><name>i</name><operator>*</operator><name>t</name><operator>-</operator><literal type="number">2.</literal><operator>*</operator><name>k</name><operator>*</operator><name>t</name><operator>+</operator><name>i</name><operator>*</operator><name>k</name><operator>*</operator><name>t</name><operator>*</operator><name>t</name><operator>)</operator><operator>*</operator><name>g</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content> 

<expr_stmt><expr><name>g</name> <operator>=</operator> <literal type="number">1.</literal> <operator>/</operator> <operator>(</operator><literal type="number">2.</literal><operator>*</operator><name>t</name><operator>+</operator><name>j</name><operator>*</operator><name>t</name><operator>*</operator><name>t</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>a0</name> <operator>=</operator> <operator>(</operator><literal type="number">4.</literal><operator>+</operator><literal type="number">2.</literal><operator>*</operator><name>i</name><operator>*</operator><name>t</name><operator>+</operator><literal type="number">2.</literal><operator>*</operator><name>k</name><operator>*</operator><name>t</name><operator>+</operator><name>i</name><operator>*</operator><name>k</name><operator>*</operator><name>t</name><operator>*</operator><name>t</name><operator>)</operator><operator>*</operator><name>g</name></expr>;</expr_stmt>

<expr_stmt><expr><name>a1</name> <operator>=</operator> <operator>(</operator><operator>-</operator><literal type="number">8.</literal><operator>+</operator><literal type="number">2.</literal><operator>*</operator><name>i</name><operator>*</operator><name>k</name><operator>*</operator><name>t</name><operator>*</operator><name>t</name><operator>)</operator><operator>*</operator><name>g</name></expr>;</expr_stmt>

<expr_stmt><expr><name>a2</name> <operator>=</operator> <operator>(</operator><literal type="number">4.</literal><operator>-</operator><literal type="number">2.</literal><operator>*</operator><name>i</name><operator>*</operator><name>t</name><operator>-</operator><literal type="number">2.</literal><operator>*</operator><name>k</name><operator>*</operator><name>t</name><operator>+</operator><name>i</name><operator>*</operator><name>k</name><operator>*</operator><name>t</name><operator>*</operator><name>t</name><operator>)</operator><operator>*</operator><name>g</name></expr>;</expr_stmt>

<expr_stmt><expr><name>b1</name> <operator>=</operator> <operator>(</operator><literal type="number">2.</literal><operator>*</operator><name>j</name><operator>*</operator><name>t</name><operator>*</operator><name>t</name><operator>)</operator><operator>*</operator><name>g</name></expr>;</expr_stmt>

<expr_stmt><expr><name>b2</name> <operator>=</operator> <operator>(</operator><operator>-</operator><literal type="number">2.</literal><operator>*</operator><name>t</name><operator>+</operator><name>j</name><operator>*</operator><name>t</name><operator>*</operator><name>t</name><operator>)</operator><operator>*</operator><name>g</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>coeffs</name><operator>.</operator><name>a0</name></name> <operator>=</operator> <name>a0</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>coeffs</name><operator>.</operator><name>a1</name></name> <operator>=</operator> <name>a1</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>coeffs</name><operator>.</operator><name>a2</name></name> <operator>=</operator> <name>a2</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>coeffs</name><operator>.</operator><name>b1</name></name> <operator>=</operator> <name>b1</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>coeffs</name><operator>.</operator><name>b2</name></name> <operator>=</operator> <name>b2</name></expr>;</expr_stmt>

<expr_stmt><expr><name>gain1kHz</name> <operator>=</operator> <call><name>freq_gain</name><argument_list>(<argument><expr><operator>&amp;</operator><name>coeffs</name></expr></argument>, <argument><expr><literal type="number">1000.0</literal></expr></argument>, <argument><expr><name>sr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>gc</name> <operator>=</operator> <literal type="number">1.0</literal> <operator>/</operator> <name>gain1kHz</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>rc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>r1</name><operator>.</operator><name>a0</name></name> <operator>=</operator> <name><name>coeffs</name><operator>.</operator><name>a0</name></name> <operator>*</operator> <name>gc</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>rc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>r1</name><operator>.</operator><name>a1</name></name> <operator>=</operator> <name><name>coeffs</name><operator>.</operator><name>a1</name></name> <operator>*</operator> <name>gc</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>rc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>r1</name><operator>.</operator><name>a2</name></name> <operator>=</operator> <name><name>coeffs</name><operator>.</operator><name>a2</name></name> <operator>*</operator> <name>gc</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>rc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>r1</name><operator>.</operator><name>b1</name></name> <operator>=</operator> <name><name>coeffs</name><operator>.</operator><name>b1</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>rc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>r1</name><operator>.</operator><name>b2</name></name> <operator>=</operator> <name><name>coeffs</name><operator>.</operator><name>b2</name></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>cutfreq</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><literal type="number">0.45</literal> <operator>*</operator> <name>sr</name></expr></argument>, <argument><expr><literal type="number">21000.</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_lp_rbj</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>rc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>brickw</name></expr></argument>, <argument><expr><name>cutfreq</name></expr></argument>, <argument><expr><literal type="number">0.707</literal></expr></argument>, <argument><expr><name>sr</name></expr></argument>, <argument><expr><literal type="number">1.</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>ch</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>ch</name> <operator>&lt;</operator> <name><name>inlink</name><operator>-&gt;</operator><name>channels</name></name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>rc</name><index>[<expr><name>ch</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>rc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>RIAACurve</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>void</name></type> <name>uninit</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AudioEmphasisContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>rc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVFilterPad</name></type> <name><name>avfilter_af_aemphasis_inputs</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"default"</literal></expr>,

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_AUDIO</name></expr>,

<expr><operator>.</operator><name>config_props</name> <operator>=</operator> <name>config_input</name></expr>,

<expr><operator>.</operator><name>filter_frame</name> <operator>=</operator> <name>filter_frame</name></expr>,

}</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVFilterPad</name></type> <name><name>avfilter_af_aemphasis_outputs</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"default"</literal></expr>,

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_AUDIO</name></expr>,

}</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFilter</name></type> <name>ff_af_aemphasis</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"aemphasis"</literal></expr>,

<expr><operator>.</operator><name>description</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"Audio emphasis."</literal></expr></argument>)</argument_list></call></expr>,

<expr><operator>.</operator><name>priv_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>AudioEmphasisContext</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><operator>.</operator><name>priv_class</name> <operator>=</operator> <operator>&amp;</operator><name>aemphasis_class</name></expr>,

<expr><operator>.</operator><name>uninit</name> <operator>=</operator> <name>uninit</name></expr>,

<expr><operator>.</operator><name>query_formats</name> <operator>=</operator> <name>query_formats</name></expr>,

<expr><operator>.</operator><name>inputs</name> <operator>=</operator> <name>avfilter_af_aemphasis_inputs</name></expr>,

<expr><operator>.</operator><name>outputs</name> <operator>=</operator> <name>avfilter_af_aemphasis_outputs</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

</unit>
