<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavfilter\af_astats.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;float.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/opt.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"audio.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avfilter.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MEASURE_ALL</name></cpp:macro> <cpp:value>UINT_MAX</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MEASURE_NONE</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MEASURE_DC_OFFSET</name></cpp:macro> <cpp:value>(1 &lt;&lt; 0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MEASURE_MIN_LEVEL</name></cpp:macro> <cpp:value>(1 &lt;&lt; 1)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MEASURE_MAX_LEVEL</name></cpp:macro> <cpp:value>(1 &lt;&lt; 2)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MEASURE_MIN_DIFFERENCE</name></cpp:macro> <cpp:value>(1 &lt;&lt; 3)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MEASURE_MAX_DIFFERENCE</name></cpp:macro> <cpp:value>(1 &lt;&lt; 4)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MEASURE_MEAN_DIFFERENCE</name></cpp:macro> <cpp:value>(1 &lt;&lt; 5)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MEASURE_RMS_DIFFERENCE</name></cpp:macro> <cpp:value>(1 &lt;&lt; 6)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MEASURE_PEAK_LEVEL</name></cpp:macro> <cpp:value>(1 &lt;&lt; 7)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MEASURE_RMS_LEVEL</name></cpp:macro> <cpp:value>(1 &lt;&lt; 8)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MEASURE_RMS_PEAK</name></cpp:macro> <cpp:value>(1 &lt;&lt; 9)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MEASURE_RMS_TROUGH</name></cpp:macro> <cpp:value>(1 &lt;&lt; 10)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MEASURE_CREST_FACTOR</name></cpp:macro> <cpp:value>(1 &lt;&lt; 11)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MEASURE_FLAT_FACTOR</name></cpp:macro> <cpp:value>(1 &lt;&lt; 12)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MEASURE_PEAK_COUNT</name></cpp:macro> <cpp:value>(1 &lt;&lt; 13)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MEASURE_BIT_DEPTH</name></cpp:macro> <cpp:value>(1 &lt;&lt; 14)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MEASURE_DYNAMIC_RANGE</name></cpp:macro> <cpp:value>(1 &lt;&lt; 15)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MEASURE_ZERO_CROSSINGS</name></cpp:macro> <cpp:value>(1 &lt;&lt; 16)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MEASURE_ZERO_CROSSINGS_RATE</name></cpp:macro> <cpp:value>(1 &lt;&lt; 17)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MEASURE_NUMBER_OF_SAMPLES</name></cpp:macro> <cpp:value>(1 &lt;&lt; 18)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MEASURE_NUMBER_OF_NANS</name></cpp:macro> <cpp:value>(1 &lt;&lt; 19)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MEASURE_NUMBER_OF_INFS</name></cpp:macro> <cpp:value>(1 &lt;&lt; 20)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MEASURE_NUMBER_OF_DENORMALS</name></cpp:macro> <cpp:value>(1 &lt;&lt; 21)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MEASURE_MINMAXPEAK</name></cpp:macro> <cpp:value>(MEASURE_MIN_LEVEL | MEASURE_MAX_LEVEL | MEASURE_PEAK_LEVEL)</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <name>ChannelStats</name> <block>{

<decl_stmt><decl><type><name>double</name></type> <name>last</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>last_non_zero</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>min_non_zero</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>sigma_x</name></decl>, <name>sigma_x2</name>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>avg_sigma_x2</name></decl>, <name>min_sigma_x2</name>, <name>max_sigma_x2</name>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>min</name></decl>, <name>max</name>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>nmin</name></decl>, <name>nmax</name>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>min_run</name></decl>, <name>max_run</name>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>min_runs</name></decl>, <name>max_runs</name>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>min_diff</name></decl>, <name>max_diff</name>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>diff1_sum</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>diff1_sum_x2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>mask</name></decl>, <name>imask</name>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>min_count</name></decl>, <name>max_count</name>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>zero_runs</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>nb_samples</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>nb_nans</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>nb_infs</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>nb_denormals</name></decl>;</decl_stmt>

}</block></struct></type> <name>ChannelStats</name>;</typedef>

<typedef>typedef <type><struct>struct <name>AudioStatsContext</name> <block>{

<decl_stmt><decl><type><specifier>const</specifier> <name>AVClass</name> <modifier>*</modifier></type><name>class</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ChannelStats</name> <modifier>*</modifier></type><name>chstats</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>nb_channels</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>tc_samples</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>time_constant</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>mult</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>metadata</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>reset_count</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>nb_frames</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>maxbitdepth</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>measure_perchannel</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>measure_overall</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>is_float</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>is_double</name></decl>;</decl_stmt>

}</block></struct></type> <name>AudioStatsContext</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OFFSET</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>offsetof(AudioStatsContext, x)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLAGS</name></cpp:macro> <cpp:value>AV_OPT_FLAG_AUDIO_PARAM|AV_OPT_FLAG_FILTERING_PARAM</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVOption</name></type> <name><name>astats_options</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><literal type="string">"length"</literal></expr>, <expr><literal type="string">"set the window length"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>time_constant</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_DOUBLE</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name><operator>=</operator><literal type="number">.05</literal></expr>}</block></expr>, <expr><literal type="number">.01</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"metadata"</literal></expr>, <expr><literal type="string">"inject metadata in the filtergraph"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>metadata</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_BOOL</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">0</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"reset"</literal></expr>, <expr><literal type="string">"recalculate stats after this many frames"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>reset_count</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">0</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"measure_perchannel"</literal></expr>, <expr><literal type="string">"only measure_perchannel these per-channel statistics"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>measure_perchannel</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_FLAGS</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>MEASURE_ALL</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>UINT_MAX</name></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"measure"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"none"</literal></expr> , <expr><literal type="string">""</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>MEASURE_NONE</name></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"measure"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"all"</literal></expr> , <expr><literal type="string">""</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>MEASURE_ALL</name></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"measure"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"DC_offset"</literal></expr> , <expr><literal type="string">""</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>MEASURE_DC_OFFSET</name></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"measure"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Min_level"</literal></expr> , <expr><literal type="string">""</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>MEASURE_MIN_LEVEL</name></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"measure"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Max_level"</literal></expr> , <expr><literal type="string">""</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>MEASURE_MAX_LEVEL</name></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"measure"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Min_difference"</literal></expr> , <expr><literal type="string">""</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>MEASURE_MIN_DIFFERENCE</name></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"measure"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Max_difference"</literal></expr> , <expr><literal type="string">""</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>MEASURE_MAX_DIFFERENCE</name></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"measure"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Mean_difference"</literal></expr> , <expr><literal type="string">""</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>MEASURE_MEAN_DIFFERENCE</name></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"measure"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"RMS_difference"</literal></expr> , <expr><literal type="string">""</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>MEASURE_RMS_DIFFERENCE</name></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"measure"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Peak_level"</literal></expr> , <expr><literal type="string">""</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>MEASURE_PEAK_LEVEL</name></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"measure"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"RMS_level"</literal></expr> , <expr><literal type="string">""</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>MEASURE_RMS_LEVEL</name></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"measure"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"RMS_peak"</literal></expr> , <expr><literal type="string">""</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>MEASURE_RMS_PEAK</name></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"measure"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"RMS_trough"</literal></expr> , <expr><literal type="string">""</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>MEASURE_RMS_TROUGH</name></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"measure"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Crest_factor"</literal></expr> , <expr><literal type="string">""</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>MEASURE_CREST_FACTOR</name></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"measure"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Flat_factor"</literal></expr> , <expr><literal type="string">""</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>MEASURE_FLAT_FACTOR</name></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"measure"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Peak_count"</literal></expr> , <expr><literal type="string">""</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>MEASURE_PEAK_COUNT</name></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"measure"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Bit_depth"</literal></expr> , <expr><literal type="string">""</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>MEASURE_BIT_DEPTH</name></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"measure"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Dynamic_range"</literal></expr> , <expr><literal type="string">""</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>MEASURE_DYNAMIC_RANGE</name></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"measure"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Zero_crossings"</literal></expr> , <expr><literal type="string">""</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>MEASURE_ZERO_CROSSINGS</name></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"measure"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Zero_crossings_rate"</literal></expr> , <expr><literal type="string">""</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>MEASURE_ZERO_CROSSINGS_RATE</name></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"measure"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Number_of_samples"</literal></expr> , <expr><literal type="string">""</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>MEASURE_NUMBER_OF_SAMPLES</name></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"measure"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Number_of_NaNs"</literal></expr> , <expr><literal type="string">""</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>MEASURE_NUMBER_OF_NANS</name></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"measure"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Number_of_Infs"</literal></expr> , <expr><literal type="string">""</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>MEASURE_NUMBER_OF_INFS</name></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"measure"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Number_of_denormals"</literal></expr> , <expr><literal type="string">""</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>MEASURE_NUMBER_OF_DENORMALS</name></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"measure"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"measure_overall"</literal></expr>, <expr><literal type="string">"only measure_perchannel these overall statistics"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>measure_overall</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_FLAGS</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>MEASURE_ALL</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>UINT_MAX</name></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"measure"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>AVFILTER_DEFINE_CLASS</name><argument_list>(<argument><expr><name>astats</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function><type><specifier>static</specifier> <name>int</name></type> <name>query_formats</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVFilterFormats</name> <modifier>*</modifier></type><name>formats</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFilterChannelLayouts</name> <modifier>*</modifier></type><name>layouts</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>enum</name> <name>AVSampleFormat</name></name></type> <name><name>sample_fmts</name><index>[]</index></name> <init>= <expr><block>{

<expr><name>AV_SAMPLE_FMT_S16</name></expr>, <expr><name>AV_SAMPLE_FMT_S16P</name></expr>,

<expr><name>AV_SAMPLE_FMT_S32</name></expr>, <expr><name>AV_SAMPLE_FMT_S32P</name></expr>,

<expr><name>AV_SAMPLE_FMT_S64</name></expr>, <expr><name>AV_SAMPLE_FMT_S64P</name></expr>,

<expr><name>AV_SAMPLE_FMT_FLT</name></expr>, <expr><name>AV_SAMPLE_FMT_FLTP</name></expr>,

<expr><name>AV_SAMPLE_FMT_DBL</name></expr>, <expr><name>AV_SAMPLE_FMT_DBLP</name></expr>,

<expr><name>AV_SAMPLE_FMT_NONE</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name>layouts</name> <operator>=</operator> <call><name>ff_all_channel_counts</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>layouts</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_set_common_channel_layouts</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>layouts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>formats</name> <operator>=</operator> <call><name>ff_make_format_list</name><argument_list>(<argument><expr><name>sample_fmts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>formats</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_set_common_formats</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>formats</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>formats</name> <operator>=</operator> <call><name>ff_all_samplerates</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>formats</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>ff_set_common_samplerates</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>formats</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>reset_stats</name><parameter_list>(<parameter><decl><type><name>AudioStatsContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>c</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>c</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>nb_channels</name></name></expr>;</condition> <incr><expr><name>c</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>ChannelStats</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>chstats</name><index>[<expr><name>c</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>min</name></name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>nmin</name></name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>min_sigma_x2</name></name> <operator>=</operator> <name>DBL_MAX</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>max</name></name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>nmax</name></name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>max_sigma_x2</name></name> <operator>=</operator><operator>-</operator><name>DBL_MAX</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>min_non_zero</name></name> <operator>=</operator> <name>DBL_MAX</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>min_diff</name></name> <operator>=</operator> <name>DBL_MAX</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>max_diff</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>sigma_x</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>sigma_x2</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>avg_sigma_x2</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>min_run</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>max_run</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>min_runs</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>max_runs</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>diff1_sum</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>diff1_sum_x2</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>mask</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>imask</name></name> <operator>=</operator> <literal type="number">0xFFFFFFFFFFFFFFFF</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>min_count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>max_count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>zero_runs</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>nb_samples</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>nb_nans</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>nb_infs</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>nb_denormals</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>last</name></name> <operator>=</operator> <name>NAN</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>config_output</name><parameter_list>(<parameter><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>outlink</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AudioStatsContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>outlink</name><operator>-&gt;</operator><name>src</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>chstats</name></name> <operator>=</operator> <call><name>av_calloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>chstats</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name><name>outlink</name><operator>-&gt;</operator><name>channels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>chstats</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>nb_channels</name></name> <operator>=</operator> <name><name>outlink</name><operator>-&gt;</operator><name>channels</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mult</name></name> <operator>=</operator> <call><name>exp</name><argument_list>(<argument><expr><operator>(</operator><operator>-</operator><literal type="number">1</literal> <operator>/</operator> <name><name>s</name><operator>-&gt;</operator><name>time_constant</name></name> <operator>/</operator> <name><name>outlink</name><operator>-&gt;</operator><name>sample_rate</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>tc_samples</name></name> <operator>=</operator> <literal type="number">5</literal> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>time_constant</name></name> <operator>*</operator> <name><name>outlink</name><operator>-&gt;</operator><name>sample_rate</name></name> <operator>+</operator> <literal type="number">.5</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>nb_frames</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>maxbitdepth</name></name> <operator>=</operator> <call><name>av_get_bytes_per_sample</name><argument_list>(<argument><expr><name><name>outlink</name><operator>-&gt;</operator><name>format</name></name></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>is_double</name></name> <operator>=</operator> <name><name>outlink</name><operator>-&gt;</operator><name>format</name></name> <operator>==</operator> <name>AV_SAMPLE_FMT_DBL</name> <operator>||</operator>

<name><name>outlink</name><operator>-&gt;</operator><name>format</name></name> <operator>==</operator> <name>AV_SAMPLE_FMT_DBLP</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>is_float</name></name> <operator>=</operator> <name><name>outlink</name><operator>-&gt;</operator><name>format</name></name> <operator>==</operator> <name>AV_SAMPLE_FMT_FLT</name> <operator>||</operator>

<name><name>outlink</name><operator>-&gt;</operator><name>format</name></name> <operator>==</operator> <name>AV_SAMPLE_FMT_FLTP</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>reset_stats</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>bit_depth</name><parameter_list>(<parameter><decl><type><name>AudioStatsContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>mask</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>imask</name></decl></parameter>, <parameter><decl><type><name>AVRational</name> <modifier>*</modifier></type><name>depth</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name></type> <name>result</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>maxbitdepth</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>mask</name> <operator>=</operator> <name>mask</name> <operator>&amp;</operator> <operator>(</operator><operator>~</operator><name>imask</name><operator>)</operator></expr>;</expr_stmt>

<for>for <control>(<init>;</init> <condition><expr><name>result</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>mask</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</condition> <incr><expr><operator>--</operator><name>result</name></expr><operator>,</operator> <expr><name>mask</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr></incr>)</control><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></for>

<expr_stmt><expr><name><name>depth</name><operator>-&gt;</operator><name>den</name></name> <operator>=</operator> <name>result</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>depth</name><operator>-&gt;</operator><name>num</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init>;</init> <condition><expr><name>result</name></expr>;</condition> <incr><expr><operator>--</operator><name>result</name></expr><operator>,</operator> <expr><name>mask</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name>mask</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>depth</name><operator>-&gt;</operator><name>num</name></name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>update_minmax</name><parameter_list>(<parameter><decl><type><name>AudioStatsContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>ChannelStats</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>d</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>d</name> <operator>&lt;</operator> <name><name>p</name><operator>-&gt;</operator><name>min</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>min</name></name> <operator>=</operator> <name>d</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>d</name> <operator>&gt;</operator> <name><name>p</name><operator>-&gt;</operator><name>max</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>max</name></name> <operator>=</operator> <name>d</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>update_stat</name><parameter_list>(<parameter><decl><type><name>AudioStatsContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>ChannelStats</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>d</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>nd</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>i</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>d</name> <operator>&lt;</operator> <name><name>p</name><operator>-&gt;</operator><name>min</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>min</name></name> <operator>=</operator> <name>d</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>nmin</name></name> <operator>=</operator> <name>nd</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>min_run</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>min_runs</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>min_count</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>d</name> <operator>==</operator> <name><name>p</name><operator>-&gt;</operator><name>min</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>min_count</name></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>min_run</name></name> <operator>=</operator> <ternary><condition><expr><name>d</name> <operator>==</operator> <name><name>p</name><operator>-&gt;</operator><name>last</name></name></expr> ?</condition><then> <expr><name><name>p</name><operator>-&gt;</operator><name>min_run</name></name> <operator>+</operator> <literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>last</name></name> <operator>==</operator> <name><name>p</name><operator>-&gt;</operator><name>min</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>min_runs</name></name> <operator>+=</operator> <name><name>p</name><operator>-&gt;</operator><name>min_run</name></name> <operator>*</operator> <name><name>p</name><operator>-&gt;</operator><name>min_run</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>d</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>FFABS</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name><name>p</name><operator>-&gt;</operator><name>min_non_zero</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>min_non_zero</name></name> <operator>=</operator> <call><name>FFABS</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>d</name> <operator>&gt;</operator> <name><name>p</name><operator>-&gt;</operator><name>max</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>max</name></name> <operator>=</operator> <name>d</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>nmax</name></name> <operator>=</operator> <name>nd</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>max_run</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>max_runs</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>max_count</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>d</name> <operator>==</operator> <name><name>p</name><operator>-&gt;</operator><name>max</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>max_count</name></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>max_run</name></name> <operator>=</operator> <ternary><condition><expr><name>d</name> <operator>==</operator> <name><name>p</name><operator>-&gt;</operator><name>last</name></name></expr> ?</condition><then> <expr><name><name>p</name><operator>-&gt;</operator><name>max_run</name></name> <operator>+</operator> <literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>last</name></name> <operator>==</operator> <name><name>p</name><operator>-&gt;</operator><name>max</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>max_runs</name></name> <operator>+=</operator> <name><name>p</name><operator>-&gt;</operator><name>max_run</name></name> <operator>*</operator> <name><name>p</name><operator>-&gt;</operator><name>max_run</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>d</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>zero_runs</name></name> <operator>+=</operator> <call><name>FFSIGN</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call> <operator>!=</operator> <call><name>FFSIGN</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>last_non_zero</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>last_non_zero</name></name> <operator>=</operator> <name>d</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>sigma_x</name></name> <operator>+=</operator> <name>nd</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>sigma_x2</name></name> <operator>+=</operator> <name>nd</name> <operator>*</operator> <name>nd</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>avg_sigma_x2</name></name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>avg_sigma_x2</name></name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>mult</name></name> <operator>+</operator> <operator>(</operator><literal type="number">1.0</literal> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>mult</name></name><operator>)</operator> <operator>*</operator> <name>nd</name> <operator>*</operator> <name>nd</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isnan</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>last</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>min_diff</name></name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>min_diff</name></name></expr></argument>, <argument><expr><call><name>fabs</name><argument_list>(<argument><expr><name>d</name> <operator>-</operator> <name><name>p</name><operator>-&gt;</operator><name>last</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>max_diff</name></name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>max_diff</name></name></expr></argument>, <argument><expr><call><name>fabs</name><argument_list>(<argument><expr><name>d</name> <operator>-</operator> <name><name>p</name><operator>-&gt;</operator><name>last</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>diff1_sum</name></name> <operator>+=</operator> <call><name>fabs</name><argument_list>(<argument><expr><name>d</name> <operator>-</operator> <name><name>p</name><operator>-&gt;</operator><name>last</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>diff1_sum_x2</name></name> <operator>+=</operator> <operator>(</operator><name>d</name> <operator>-</operator> <name><name>p</name><operator>-&gt;</operator><name>last</name></name><operator>)</operator> <operator>*</operator> <operator>(</operator><name>d</name> <operator>-</operator> <name><name>p</name><operator>-&gt;</operator><name>last</name></name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>last</name></name> <operator>=</operator> <name>d</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>mask</name></name> <operator>|=</operator> <name>i</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>imask</name></name> <operator>&amp;=</operator> <name>i</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>nb_samples</name></name> <operator>&gt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>tc_samples</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>max_sigma_x2</name></name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>max_sigma_x2</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>avg_sigma_x2</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>min_sigma_x2</name></name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>min_sigma_x2</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>avg_sigma_x2</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>nb_samples</name></name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>update_float_stat</name><parameter_list>(<parameter><decl><type><name>AudioStatsContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>ChannelStats</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>d</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>type</name> <init>= <expr><call><name>fpclassify</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>nb_nans</name></name> <operator>+=</operator> <name>type</name> <operator>==</operator> <name>FP_NAN</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>nb_infs</name></name> <operator>+=</operator> <name>type</name> <operator>==</operator> <name>FP_INFINITE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>nb_denormals</name></name> <operator>+=</operator> <name>type</name> <operator>==</operator> <name>FP_SUBNORMAL</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>update_double_stat</name><parameter_list>(<parameter><decl><type><name>AudioStatsContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>ChannelStats</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>d</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>type</name> <init>= <expr><call><name>fpclassify</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>nb_nans</name></name> <operator>+=</operator> <name>type</name> <operator>==</operator> <name>FP_NAN</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>nb_infs</name></name> <operator>+=</operator> <name>type</name> <operator>==</operator> <name>FP_INFINITE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>nb_denormals</name></name> <operator>+=</operator> <name>type</name> <operator>==</operator> <name>FP_SUBNORMAL</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>set_meta</name><parameter_list>(<parameter><decl><type><name>AVDictionary</name> <modifier>*</modifier><modifier>*</modifier></type><name>metadata</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>chan</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>val</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>value</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>key2</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>chan</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>key2</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>key2</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"lavfi.astats.%d.%s"</literal></expr></argument>, <argument><expr><name>chan</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>key2</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>key2</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"lavfi.astats.%s"</literal></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>av_dict_set</name><argument_list>(<argument><expr><name>metadata</name></expr></argument>, <argument><expr><name>key2</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LINEAR_TO_DB</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(log10(x) * 20)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type> <name>set_metadata</name><parameter_list>(<parameter><decl><type><name>AudioStatsContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>AVDictionary</name> <modifier>*</modifier><modifier>*</modifier></type><name>metadata</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>mask</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>imask</name> <init>= <expr><literal type="number">0xFFFFFFFFFFFFFFFF</literal></expr></init></decl>, <decl><type ref="prev"/><name>min_count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>max_count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>nb_samples</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>nb_nans</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>nb_infs</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>nb_denormals</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>min_runs</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>max_runs</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,

<decl><type ref="prev"/><name>min</name> <init>= <expr><name>DBL_MAX</name></expr></init></decl>, <decl><type ref="prev"/><name>max</name> <init>=<expr><operator>-</operator><name>DBL_MAX</name></expr></init></decl>, <decl><type ref="prev"/><name>min_diff</name> <init>= <expr><name>DBL_MAX</name></expr></init></decl>, <decl><type ref="prev"/><name>max_diff</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,

<decl><type ref="prev"/><name>nmin</name> <init>= <expr><name>DBL_MAX</name></expr></init></decl>, <decl><type ref="prev"/><name>nmax</name> <init>=<expr><operator>-</operator><name>DBL_MAX</name></expr></init></decl>,

<decl><type ref="prev"/><name>max_sigma_x</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,

<decl><type ref="prev"/><name>diff1_sum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,

<decl><type ref="prev"/><name>diff1_sum_x2</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,

<decl><type ref="prev"/><name>sigma_x</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,

<decl><type ref="prev"/><name>sigma_x2</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,

<decl><type ref="prev"/><name>min_sigma_x2</name> <init>= <expr><name>DBL_MAX</name></expr></init></decl>,

<decl><type ref="prev"/><name>max_sigma_x2</name> <init>=<expr><operator>-</operator><name>DBL_MAX</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVRational</name></type> <name>depth</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>c</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>c</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>nb_channels</name></name></expr>;</condition> <incr><expr><name>c</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>ChannelStats</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>chstats</name><index>[<expr><name>c</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>nb_samples</name></name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>tc_samples</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>min_sigma_x2</name></name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>max_sigma_x2</name></name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>sigma_x2</name></name> <operator>/</operator> <name><name>p</name><operator>-&gt;</operator><name>nb_samples</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>min</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>min</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>min</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>max</name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name>max</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>max</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>nmin</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>nmin</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>nmin</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>nmax</name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name>nmax</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>nmax</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>min_diff</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>min_diff</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>min_diff</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>max_diff</name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name>max_diff</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>max_diff</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>diff1_sum</name> <operator>+=</operator> <name><name>p</name><operator>-&gt;</operator><name>diff1_sum</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>diff1_sum_x2</name> <operator>+=</operator> <name><name>p</name><operator>-&gt;</operator><name>diff1_sum_x2</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>min_sigma_x2</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>min_sigma_x2</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>min_sigma_x2</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>max_sigma_x2</name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name>max_sigma_x2</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>max_sigma_x2</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sigma_x</name> <operator>+=</operator> <name><name>p</name><operator>-&gt;</operator><name>sigma_x</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>sigma_x2</name> <operator>+=</operator> <name><name>p</name><operator>-&gt;</operator><name>sigma_x2</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>min_count</name> <operator>+=</operator> <name><name>p</name><operator>-&gt;</operator><name>min_count</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>max_count</name> <operator>+=</operator> <name><name>p</name><operator>-&gt;</operator><name>max_count</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>min_runs</name> <operator>+=</operator> <name><name>p</name><operator>-&gt;</operator><name>min_runs</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>max_runs</name> <operator>+=</operator> <name><name>p</name><operator>-&gt;</operator><name>max_runs</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>mask</name> <operator>|=</operator> <name><name>p</name><operator>-&gt;</operator><name>mask</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>imask</name> <operator>&amp;=</operator> <name><name>p</name><operator>-&gt;</operator><name>imask</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>nb_samples</name> <operator>+=</operator> <name><name>p</name><operator>-&gt;</operator><name>nb_samples</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>nb_nans</name> <operator>+=</operator> <name><name>p</name><operator>-&gt;</operator><name>nb_nans</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>nb_infs</name> <operator>+=</operator> <name><name>p</name><operator>-&gt;</operator><name>nb_infs</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>nb_denormals</name> <operator>+=</operator> <name><name>p</name><operator>-&gt;</operator><name>nb_denormals</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>fabs</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>sigma_x</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <call><name>fabs</name><argument_list>(<argument><expr><name>max_sigma_x</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>max_sigma_x</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>sigma_x</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>measure_perchannel</name></name> <operator>&amp;</operator> <name>MEASURE_DC_OFFSET</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>set_meta</name><argument_list>(<argument><expr><name>metadata</name></expr></argument>, <argument><expr><name>c</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"DC_offset"</literal></expr></argument>, <argument><expr><literal type="string">"%f"</literal></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>sigma_x</name></name> <operator>/</operator> <name><name>p</name><operator>-&gt;</operator><name>nb_samples</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>measure_perchannel</name></name> <operator>&amp;</operator> <name>MEASURE_MIN_LEVEL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>set_meta</name><argument_list>(<argument><expr><name>metadata</name></expr></argument>, <argument><expr><name>c</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"Min_level"</literal></expr></argument>, <argument><expr><literal type="string">"%f"</literal></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>min</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>measure_perchannel</name></name> <operator>&amp;</operator> <name>MEASURE_MAX_LEVEL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>set_meta</name><argument_list>(<argument><expr><name>metadata</name></expr></argument>, <argument><expr><name>c</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"Max_level"</literal></expr></argument>, <argument><expr><literal type="string">"%f"</literal></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>max</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>measure_perchannel</name></name> <operator>&amp;</operator> <name>MEASURE_MIN_DIFFERENCE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>set_meta</name><argument_list>(<argument><expr><name>metadata</name></expr></argument>, <argument><expr><name>c</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"Min_difference"</literal></expr></argument>, <argument><expr><literal type="string">"%f"</literal></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>min_diff</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>measure_perchannel</name></name> <operator>&amp;</operator> <name>MEASURE_MAX_DIFFERENCE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>set_meta</name><argument_list>(<argument><expr><name>metadata</name></expr></argument>, <argument><expr><name>c</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"Max_difference"</literal></expr></argument>, <argument><expr><literal type="string">"%f"</literal></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>max_diff</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>measure_perchannel</name></name> <operator>&amp;</operator> <name>MEASURE_MEAN_DIFFERENCE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>set_meta</name><argument_list>(<argument><expr><name>metadata</name></expr></argument>, <argument><expr><name>c</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"Mean_difference"</literal></expr></argument>, <argument><expr><literal type="string">"%f"</literal></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>diff1_sum</name></name> <operator>/</operator> <operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>nb_samples</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>measure_perchannel</name></name> <operator>&amp;</operator> <name>MEASURE_RMS_DIFFERENCE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>set_meta</name><argument_list>(<argument><expr><name>metadata</name></expr></argument>, <argument><expr><name>c</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"RMS_difference"</literal></expr></argument>, <argument><expr><literal type="string">"%f"</literal></expr></argument>, <argument><expr><call><name>sqrt</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>diff1_sum_x2</name></name> <operator>/</operator> <operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>nb_samples</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>measure_perchannel</name></name> <operator>&amp;</operator> <name>MEASURE_PEAK_LEVEL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>set_meta</name><argument_list>(<argument><expr><name>metadata</name></expr></argument>, <argument><expr><name>c</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"Peak_level"</literal></expr></argument>, <argument><expr><literal type="string">"%f"</literal></expr></argument>, <argument><expr><call><name>LINEAR_TO_DB</name><argument_list>(<argument><expr><call><name>FFMAX</name><argument_list>(<argument><expr><operator>-</operator><name><name>p</name><operator>-&gt;</operator><name>nmin</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>nmax</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>measure_perchannel</name></name> <operator>&amp;</operator> <name>MEASURE_RMS_LEVEL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>set_meta</name><argument_list>(<argument><expr><name>metadata</name></expr></argument>, <argument><expr><name>c</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"RMS_level"</literal></expr></argument>, <argument><expr><literal type="string">"%f"</literal></expr></argument>, <argument><expr><call><name>LINEAR_TO_DB</name><argument_list>(<argument><expr><call><name>sqrt</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>sigma_x2</name></name> <operator>/</operator> <name><name>p</name><operator>-&gt;</operator><name>nb_samples</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>measure_perchannel</name></name> <operator>&amp;</operator> <name>MEASURE_RMS_PEAK</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>set_meta</name><argument_list>(<argument><expr><name>metadata</name></expr></argument>, <argument><expr><name>c</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"RMS_peak"</literal></expr></argument>, <argument><expr><literal type="string">"%f"</literal></expr></argument>, <argument><expr><call><name>LINEAR_TO_DB</name><argument_list>(<argument><expr><call><name>sqrt</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>max_sigma_x2</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>measure_perchannel</name></name> <operator>&amp;</operator> <name>MEASURE_RMS_TROUGH</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>set_meta</name><argument_list>(<argument><expr><name>metadata</name></expr></argument>, <argument><expr><name>c</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"RMS_trough"</literal></expr></argument>, <argument><expr><literal type="string">"%f"</literal></expr></argument>, <argument><expr><call><name>LINEAR_TO_DB</name><argument_list>(<argument><expr><call><name>sqrt</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>min_sigma_x2</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>measure_perchannel</name></name> <operator>&amp;</operator> <name>MEASURE_CREST_FACTOR</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>set_meta</name><argument_list>(<argument><expr><name>metadata</name></expr></argument>, <argument><expr><name>c</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"Crest_factor"</literal></expr></argument>, <argument><expr><literal type="string">"%f"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name><name>p</name><operator>-&gt;</operator><name>sigma_x2</name></name></expr> ?</condition><then> <expr><call><name>FFMAX</name><argument_list>(<argument><expr><operator>-</operator><name><name>p</name><operator>-&gt;</operator><name>min</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>max</name></name></expr></argument>)</argument_list></call> <operator>/</operator> <call><name>sqrt</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>sigma_x2</name></name> <operator>/</operator> <name><name>p</name><operator>-&gt;</operator><name>nb_samples</name></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>measure_perchannel</name></name> <operator>&amp;</operator> <name>MEASURE_FLAT_FACTOR</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>set_meta</name><argument_list>(<argument><expr><name>metadata</name></expr></argument>, <argument><expr><name>c</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"Flat_factor"</literal></expr></argument>, <argument><expr><literal type="string">"%f"</literal></expr></argument>, <argument><expr><call><name>LINEAR_TO_DB</name><argument_list>(<argument><expr><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>min_runs</name></name> <operator>+</operator> <name><name>p</name><operator>-&gt;</operator><name>max_runs</name></name><operator>)</operator> <operator>/</operator> <operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>min_count</name></name> <operator>+</operator> <name><name>p</name><operator>-&gt;</operator><name>max_count</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>measure_perchannel</name></name> <operator>&amp;</operator> <name>MEASURE_PEAK_COUNT</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>set_meta</name><argument_list>(<argument><expr><name>metadata</name></expr></argument>, <argument><expr><name>c</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"Peak_count"</literal></expr></argument>, <argument><expr><literal type="string">"%f"</literal></expr></argument>, <argument><expr><operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>min_count</name></name> <operator>+</operator> <name><name>p</name><operator>-&gt;</operator><name>max_count</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>measure_perchannel</name></name> <operator>&amp;</operator> <name>MEASURE_BIT_DEPTH</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>bit_depth</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>mask</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>imask</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>depth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_meta</name><argument_list>(<argument><expr><name>metadata</name></expr></argument>, <argument><expr><name>c</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"Bit_depth"</literal></expr></argument>, <argument><expr><literal type="string">"%f"</literal></expr></argument>, <argument><expr><name><name>depth</name><operator>.</operator><name>num</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_meta</name><argument_list>(<argument><expr><name>metadata</name></expr></argument>, <argument><expr><name>c</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"Bit_depth2"</literal></expr></argument>, <argument><expr><literal type="string">"%f"</literal></expr></argument>, <argument><expr><name><name>depth</name><operator>.</operator><name>den</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>measure_perchannel</name></name> <operator>&amp;</operator> <name>MEASURE_DYNAMIC_RANGE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>set_meta</name><argument_list>(<argument><expr><name>metadata</name></expr></argument>, <argument><expr><name>c</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"Dynamic_range"</literal></expr></argument>, <argument><expr><literal type="string">"%f"</literal></expr></argument>, <argument><expr><call><name>LINEAR_TO_DB</name><argument_list>(<argument><expr><literal type="number">2</literal> <operator>*</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><call><name>FFABS</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>min</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>FFABS</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>max</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>/</operator> <name><name>p</name><operator>-&gt;</operator><name>min_non_zero</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>measure_perchannel</name></name> <operator>&amp;</operator> <name>MEASURE_ZERO_CROSSINGS</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>set_meta</name><argument_list>(<argument><expr><name>metadata</name></expr></argument>, <argument><expr><name>c</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"Zero_crossings"</literal></expr></argument>, <argument><expr><literal type="string">"%f"</literal></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>zero_runs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>measure_perchannel</name></name> <operator>&amp;</operator> <name>MEASURE_ZERO_CROSSINGS_RATE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>set_meta</name><argument_list>(<argument><expr><name>metadata</name></expr></argument>, <argument><expr><name>c</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"Zero_crossings_rate"</literal></expr></argument>, <argument><expr><literal type="string">"%f"</literal></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>zero_runs</name></name><operator>/</operator><operator>(</operator><name>double</name><operator>)</operator><name><name>p</name><operator>-&gt;</operator><name>nb_samples</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>is_float</name></name> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>is_double</name></name><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>measure_perchannel</name></name> <operator>&amp;</operator> <name>MEASURE_NUMBER_OF_NANS</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>set_meta</name><argument_list>(<argument><expr><name>metadata</name></expr></argument>, <argument><expr><name>c</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"Number of NaNs"</literal></expr></argument>, <argument><expr><literal type="string">"%f"</literal></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>nb_nans</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>is_float</name></name> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>is_double</name></name><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>measure_perchannel</name></name> <operator>&amp;</operator> <name>MEASURE_NUMBER_OF_INFS</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>set_meta</name><argument_list>(<argument><expr><name>metadata</name></expr></argument>, <argument><expr><name>c</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"Number of Infs"</literal></expr></argument>, <argument><expr><literal type="string">"%f"</literal></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>nb_infs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>is_float</name></name> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>is_double</name></name><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>measure_perchannel</name></name> <operator>&amp;</operator> <name>MEASURE_NUMBER_OF_DENORMALS</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>set_meta</name><argument_list>(<argument><expr><name>metadata</name></expr></argument>, <argument><expr><name>c</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"Number of denormals"</literal></expr></argument>, <argument><expr><literal type="string">"%f"</literal></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>nb_denormals</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>measure_overall</name></name> <operator>&amp;</operator> <name>MEASURE_DC_OFFSET</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>set_meta</name><argument_list>(<argument><expr><name>metadata</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"Overall.DC_offset"</literal></expr></argument>, <argument><expr><literal type="string">"%f"</literal></expr></argument>, <argument><expr><name>max_sigma_x</name> <operator>/</operator> <operator>(</operator><name>nb_samples</name> <operator>/</operator> <name><name>s</name><operator>-&gt;</operator><name>nb_channels</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>measure_overall</name></name> <operator>&amp;</operator> <name>MEASURE_MIN_LEVEL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>set_meta</name><argument_list>(<argument><expr><name>metadata</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"Overall.Min_level"</literal></expr></argument>, <argument><expr><literal type="string">"%f"</literal></expr></argument>, <argument><expr><name>min</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>measure_overall</name></name> <operator>&amp;</operator> <name>MEASURE_MAX_LEVEL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>set_meta</name><argument_list>(<argument><expr><name>metadata</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"Overall.Max_level"</literal></expr></argument>, <argument><expr><literal type="string">"%f"</literal></expr></argument>, <argument><expr><name>max</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>measure_overall</name></name> <operator>&amp;</operator> <name>MEASURE_MIN_DIFFERENCE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>set_meta</name><argument_list>(<argument><expr><name>metadata</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"Overall.Min_difference"</literal></expr></argument>, <argument><expr><literal type="string">"%f"</literal></expr></argument>, <argument><expr><name>min_diff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>measure_overall</name></name> <operator>&amp;</operator> <name>MEASURE_MAX_DIFFERENCE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>set_meta</name><argument_list>(<argument><expr><name>metadata</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"Overall.Max_difference"</literal></expr></argument>, <argument><expr><literal type="string">"%f"</literal></expr></argument>, <argument><expr><name>max_diff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>measure_overall</name></name> <operator>&amp;</operator> <name>MEASURE_MEAN_DIFFERENCE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>set_meta</name><argument_list>(<argument><expr><name>metadata</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"Overall.Mean_difference"</literal></expr></argument>, <argument><expr><literal type="string">"%f"</literal></expr></argument>, <argument><expr><name>diff1_sum</name> <operator>/</operator> <operator>(</operator><name>nb_samples</name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>nb_channels</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>measure_overall</name></name> <operator>&amp;</operator> <name>MEASURE_RMS_DIFFERENCE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>set_meta</name><argument_list>(<argument><expr><name>metadata</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"Overall.RMS_difference"</literal></expr></argument>, <argument><expr><literal type="string">"%f"</literal></expr></argument>, <argument><expr><call><name>sqrt</name><argument_list>(<argument><expr><name>diff1_sum_x2</name> <operator>/</operator> <operator>(</operator><name>nb_samples</name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>nb_channels</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>measure_overall</name></name> <operator>&amp;</operator> <name>MEASURE_PEAK_LEVEL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>set_meta</name><argument_list>(<argument><expr><name>metadata</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"Overall.Peak_level"</literal></expr></argument>, <argument><expr><literal type="string">"%f"</literal></expr></argument>, <argument><expr><call><name>LINEAR_TO_DB</name><argument_list>(<argument><expr><call><name>FFMAX</name><argument_list>(<argument><expr><operator>-</operator><name>nmin</name></expr></argument>, <argument><expr><name>nmax</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>measure_overall</name></name> <operator>&amp;</operator> <name>MEASURE_RMS_LEVEL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>set_meta</name><argument_list>(<argument><expr><name>metadata</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"Overall.RMS_level"</literal></expr></argument>, <argument><expr><literal type="string">"%f"</literal></expr></argument>, <argument><expr><call><name>LINEAR_TO_DB</name><argument_list>(<argument><expr><call><name>sqrt</name><argument_list>(<argument><expr><name>sigma_x2</name> <operator>/</operator> <name>nb_samples</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>measure_overall</name></name> <operator>&amp;</operator> <name>MEASURE_RMS_PEAK</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>set_meta</name><argument_list>(<argument><expr><name>metadata</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"Overall.RMS_peak"</literal></expr></argument>, <argument><expr><literal type="string">"%f"</literal></expr></argument>, <argument><expr><call><name>LINEAR_TO_DB</name><argument_list>(<argument><expr><call><name>sqrt</name><argument_list>(<argument><expr><name>max_sigma_x2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>measure_overall</name></name> <operator>&amp;</operator> <name>MEASURE_RMS_TROUGH</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>set_meta</name><argument_list>(<argument><expr><name>metadata</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"Overall.RMS_trough"</literal></expr></argument>, <argument><expr><literal type="string">"%f"</literal></expr></argument>, <argument><expr><call><name>LINEAR_TO_DB</name><argument_list>(<argument><expr><call><name>sqrt</name><argument_list>(<argument><expr><name>min_sigma_x2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>measure_overall</name></name> <operator>&amp;</operator> <name>MEASURE_FLAT_FACTOR</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>set_meta</name><argument_list>(<argument><expr><name>metadata</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"Overall.Flat_factor"</literal></expr></argument>, <argument><expr><literal type="string">"%f"</literal></expr></argument>, <argument><expr><call><name>LINEAR_TO_DB</name><argument_list>(<argument><expr><operator>(</operator><name>min_runs</name> <operator>+</operator> <name>max_runs</name><operator>)</operator> <operator>/</operator> <operator>(</operator><name>min_count</name> <operator>+</operator> <name>max_count</name><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>measure_overall</name></name> <operator>&amp;</operator> <name>MEASURE_PEAK_COUNT</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>set_meta</name><argument_list>(<argument><expr><name>metadata</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"Overall.Peak_count"</literal></expr></argument>, <argument><expr><literal type="string">"%f"</literal></expr></argument>, <argument><expr><operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><name>min_count</name> <operator>+</operator> <name>max_count</name><operator>)</operator> <operator>/</operator> <operator>(</operator><name>double</name><operator>)</operator><name><name>s</name><operator>-&gt;</operator><name>nb_channels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>measure_overall</name></name> <operator>&amp;</operator> <name>MEASURE_BIT_DEPTH</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>bit_depth</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>imask</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>depth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_meta</name><argument_list>(<argument><expr><name>metadata</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"Overall.Bit_depth"</literal></expr></argument>, <argument><expr><literal type="string">"%f"</literal></expr></argument>, <argument><expr><name><name>depth</name><operator>.</operator><name>num</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_meta</name><argument_list>(<argument><expr><name>metadata</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"Overall.Bit_depth2"</literal></expr></argument>, <argument><expr><literal type="string">"%f"</literal></expr></argument>, <argument><expr><name><name>depth</name><operator>.</operator><name>den</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>measure_overall</name></name> <operator>&amp;</operator> <name>MEASURE_NUMBER_OF_SAMPLES</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>set_meta</name><argument_list>(<argument><expr><name>metadata</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"Overall.Number_of_samples"</literal></expr></argument>, <argument><expr><literal type="string">"%f"</literal></expr></argument>, <argument><expr><name>nb_samples</name> <operator>/</operator> <name><name>s</name><operator>-&gt;</operator><name>nb_channels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>is_float</name></name> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>is_double</name></name><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>measure_overall</name></name> <operator>&amp;</operator> <name>MEASURE_NUMBER_OF_NANS</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>set_meta</name><argument_list>(<argument><expr><name>metadata</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"Number of NaNs"</literal></expr></argument>, <argument><expr><literal type="string">"%f"</literal></expr></argument>, <argument><expr><name>nb_nans</name> <operator>/</operator> <operator>(</operator><name>float</name><operator>)</operator><name><name>s</name><operator>-&gt;</operator><name>nb_channels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>is_float</name></name> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>is_double</name></name><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>measure_overall</name></name> <operator>&amp;</operator> <name>MEASURE_NUMBER_OF_INFS</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>set_meta</name><argument_list>(<argument><expr><name>metadata</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"Number of Infs"</literal></expr></argument>, <argument><expr><literal type="string">"%f"</literal></expr></argument>, <argument><expr><name>nb_infs</name> <operator>/</operator> <operator>(</operator><name>float</name><operator>)</operator><name><name>s</name><operator>-&gt;</operator><name>nb_channels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>is_float</name></name> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>is_double</name></name><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>measure_overall</name></name> <operator>&amp;</operator> <name>MEASURE_NUMBER_OF_DENORMALS</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>set_meta</name><argument_list>(<argument><expr><name>metadata</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"Number of denormals"</literal></expr></argument>, <argument><expr><literal type="string">"%f"</literal></expr></argument>, <argument><expr><name>nb_denormals</name> <operator>/</operator> <operator>(</operator><name>float</name><operator>)</operator><name><name>s</name><operator>-&gt;</operator><name>nb_channels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UPDATE_STATS_P</name><parameter_list>(<parameter><type><name>type</name></type></parameter>, <parameter><type><name>update_func</name></type></parameter>, <parameter><type><name>update_float</name></type></parameter>, <parameter><type><name>channel_func</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for (int c = 0; c &lt; channels; c++) { ChannelStats *p = &amp;s-&gt;chstats[c]; const type *src = (const type *)data[c]; const type * const srcend = src + samples; for (; src &lt; srcend; src++) { update_func; update_float; } channel_func; }</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UPDATE_STATS_I</name><parameter_list>(<parameter><type><name>type</name></type></parameter>, <parameter><type><name>update_func</name></type></parameter>, <parameter><type><name>update_float</name></type></parameter>, <parameter><type><name>channel_func</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for (int c = 0; c &lt; channels; c++) { ChannelStats *p = &amp;s-&gt;chstats[c]; const type *src = (const type *)data[0]; const type * const srcend = src + samples * channels; for (src += c; src &lt; srcend; src += channels) { update_func; update_float; } channel_func; }</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UPDATE_STATS</name><parameter_list>(<parameter><type><name>planar</name></type></parameter>, <parameter><type><name>type</name></type></parameter>, <parameter><type><name>sample</name></type></parameter>, <parameter><type><name>normalizer_suffix</name></type></parameter>, <parameter><type><name>int_sample</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>if ((s-&gt;measure_overall | s-&gt;measure_perchannel) &amp; ~MEASURE_MINMAXPEAK) { UPDATE_STATS_##planar(type, update_stat(s, p, sample, sample normalizer_suffix, int_sample), s-&gt;is_float ? update_float_stat(s, p, sample) : s-&gt;is_double ? update_double_stat(s, p, sample) : (void)NULL, ); } else { UPDATE_STATS_##planar(type, update_minmax(s, p, sample), , p-&gt;nmin = p-&gt;min normalizer_suffix; p-&gt;nmax = p-&gt;max normalizer_suffix;); }</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>int</name></type> <name>filter_frame</name><parameter_list>(<parameter><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>inlink</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AudioStatsContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>inlink</name><operator>-&gt;</operator><name>dst</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVDictionary</name> <modifier>*</modifier><modifier>*</modifier></type><name>metadata</name> <init>= <expr><operator>&amp;</operator><name><name>buf</name><operator>-&gt;</operator><name>metadata</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>channels</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>nb_channels</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>samples</name> <init>= <expr><name><name>buf</name><operator>-&gt;</operator><name>nb_samples</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier> <specifier>const</specifier> <modifier>*</modifier> <specifier>const</specifier></type> <name>data</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint8_t</name> <operator>*</operator> <specifier>const</specifier> <operator>*</operator><operator>)</operator><name><name>buf</name><operator>-&gt;</operator><name>extended_data</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>reset_count</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>nb_frames</name></name> <operator>&gt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>reset_count</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>reset_stats</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>nb_frames</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>nb_frames</name></name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><name><name>inlink</name><operator>-&gt;</operator><name>format</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>AV_SAMPLE_FMT_DBLP</name></expr>:</case>

<expr_stmt><expr><call><name>UPDATE_STATS</name><argument_list>(<argument><expr><name>P</name></expr></argument>, <argument><expr><name>double</name></expr></argument>, <argument><expr><operator>*</operator><name>src</name></expr></argument>, , <argument><expr><call><name>llrint</name><argument_list>(<argument><expr><operator>*</operator><name>src</name> <operator>*</operator> <operator>(</operator><call><name>UINT64_C</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">63</literal><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AV_SAMPLE_FMT_DBL</name></expr>:</case>

<expr_stmt><expr><call><name>UPDATE_STATS</name><argument_list>(<argument><expr><name>I</name></expr></argument>, <argument><expr><name>double</name></expr></argument>, <argument><expr><operator>*</operator><name>src</name></expr></argument>, , <argument><expr><call><name>llrint</name><argument_list>(<argument><expr><operator>*</operator><name>src</name> <operator>*</operator> <operator>(</operator><call><name>UINT64_C</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">63</literal><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AV_SAMPLE_FMT_FLTP</name></expr>:</case>

<expr_stmt><expr><call><name>UPDATE_STATS</name><argument_list>(<argument><expr><name>P</name></expr></argument>, <argument><expr><name>float</name></expr></argument>, <argument><expr><operator>*</operator><name>src</name></expr></argument>, , <argument><expr><call><name>llrint</name><argument_list>(<argument><expr><operator>*</operator><name>src</name> <operator>*</operator> <operator>(</operator><call><name>UINT64_C</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">31</literal><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AV_SAMPLE_FMT_FLT</name></expr>:</case>

<expr_stmt><expr><call><name>UPDATE_STATS</name><argument_list>(<argument><expr><name>I</name></expr></argument>, <argument><expr><name>float</name></expr></argument>, <argument><expr><operator>*</operator><name>src</name></expr></argument>, , <argument><expr><call><name>llrint</name><argument_list>(<argument><expr><operator>*</operator><name>src</name> <operator>*</operator> <operator>(</operator><call><name>UINT64_C</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">31</literal><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AV_SAMPLE_FMT_S64P</name></expr>:</case>

<expr_stmt><expr><call><name>UPDATE_STATS</name><argument_list>(<argument><expr><name>P</name></expr></argument>, <argument><expr><name>int64_t</name></expr></argument>, <argument><expr><operator>*</operator><name>src</name></expr></argument>, <argument><expr><operator>/</operator> <operator>(</operator><name>double</name><operator>)</operator><name>INT64_MAX</name></expr></argument>, <argument><expr><operator>*</operator><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AV_SAMPLE_FMT_S64</name></expr>:</case>

<expr_stmt><expr><call><name>UPDATE_STATS</name><argument_list>(<argument><expr><name>I</name></expr></argument>, <argument><expr><name>int64_t</name></expr></argument>, <argument><expr><operator>*</operator><name>src</name></expr></argument>, <argument><expr><operator>/</operator> <operator>(</operator><name>double</name><operator>)</operator><name>INT64_MAX</name></expr></argument>, <argument><expr><operator>*</operator><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AV_SAMPLE_FMT_S32P</name></expr>:</case>

<expr_stmt><expr><call><name>UPDATE_STATS</name><argument_list>(<argument><expr><name>P</name></expr></argument>, <argument><expr><name>int32_t</name></expr></argument>, <argument><expr><operator>*</operator><name>src</name></expr></argument>, <argument><expr><operator>/</operator> <operator>(</operator><name>double</name><operator>)</operator><name>INT32_MAX</name></expr></argument>, <argument><expr><operator>*</operator><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AV_SAMPLE_FMT_S32</name></expr>:</case>

<expr_stmt><expr><call><name>UPDATE_STATS</name><argument_list>(<argument><expr><name>I</name></expr></argument>, <argument><expr><name>int32_t</name></expr></argument>, <argument><expr><operator>*</operator><name>src</name></expr></argument>, <argument><expr><operator>/</operator> <operator>(</operator><name>double</name><operator>)</operator><name>INT32_MAX</name></expr></argument>, <argument><expr><operator>*</operator><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AV_SAMPLE_FMT_S16P</name></expr>:</case>

<expr_stmt><expr><call><name>UPDATE_STATS</name><argument_list>(<argument><expr><name>P</name></expr></argument>, <argument><expr><name>int16_t</name></expr></argument>, <argument><expr><operator>*</operator><name>src</name></expr></argument>, <argument><expr><operator>/</operator> <operator>(</operator><name>double</name><operator>)</operator><name>INT16_MAX</name></expr></argument>, <argument><expr><operator>*</operator><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AV_SAMPLE_FMT_S16</name></expr>:</case>

<expr_stmt><expr><call><name>UPDATE_STATS</name><argument_list>(<argument><expr><name>I</name></expr></argument>, <argument><expr><name>int16_t</name></expr></argument>, <argument><expr><operator>*</operator><name>src</name></expr></argument>, <argument><expr><operator>/</operator> <operator>(</operator><name>double</name><operator>)</operator><name>INT16_MAX</name></expr></argument>, <argument><expr><operator>*</operator><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>metadata</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>set_metadata</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>metadata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><call><name>ff_filter_frame</name><argument_list>(<argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>dst</name><operator>-&gt;</operator><name>outputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>print_stats</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AudioStatsContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>mask</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>imask</name> <init>= <expr><literal type="number">0xFFFFFFFFFFFFFFFF</literal></expr></init></decl>, <decl><type ref="prev"/><name>min_count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>max_count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>nb_samples</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>nb_nans</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>nb_infs</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>nb_denormals</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>min_runs</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>max_runs</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,

<decl><type ref="prev"/><name>min</name> <init>= <expr><name>DBL_MAX</name></expr></init></decl>, <decl><type ref="prev"/><name>max</name> <init>=<expr><operator>-</operator><name>DBL_MAX</name></expr></init></decl>, <decl><type ref="prev"/><name>min_diff</name> <init>= <expr><name>DBL_MAX</name></expr></init></decl>, <decl><type ref="prev"/><name>max_diff</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,

<decl><type ref="prev"/><name>nmin</name> <init>= <expr><name>DBL_MAX</name></expr></init></decl>, <decl><type ref="prev"/><name>nmax</name> <init>=<expr><operator>-</operator><name>DBL_MAX</name></expr></init></decl>,

<decl><type ref="prev"/><name>max_sigma_x</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,

<decl><type ref="prev"/><name>diff1_sum_x2</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,

<decl><type ref="prev"/><name>diff1_sum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,

<decl><type ref="prev"/><name>sigma_x</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,

<decl><type ref="prev"/><name>sigma_x2</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,

<decl><type ref="prev"/><name>min_sigma_x2</name> <init>= <expr><name>DBL_MAX</name></expr></init></decl>,

<decl><type ref="prev"/><name>max_sigma_x2</name> <init>=<expr><operator>-</operator><name>DBL_MAX</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVRational</name></type> <name>depth</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>c</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>c</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>nb_channels</name></name></expr>;</condition> <incr><expr><name>c</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>ChannelStats</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>chstats</name><index>[<expr><name>c</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>nb_samples</name></name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>tc_samples</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>min_sigma_x2</name></name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>max_sigma_x2</name></name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>sigma_x2</name></name> <operator>/</operator> <name><name>p</name><operator>-&gt;</operator><name>nb_samples</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>min</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>min</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>min</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>max</name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name>max</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>max</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>nmin</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>nmin</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>nmin</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>nmax</name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name>nmax</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>nmax</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>min_diff</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>min_diff</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>min_diff</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>max_diff</name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name>max_diff</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>max_diff</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>diff1_sum_x2</name> <operator>+=</operator> <name><name>p</name><operator>-&gt;</operator><name>diff1_sum_x2</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>diff1_sum</name> <operator>+=</operator> <name><name>p</name><operator>-&gt;</operator><name>diff1_sum</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>min_sigma_x2</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>min_sigma_x2</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>min_sigma_x2</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>max_sigma_x2</name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name>max_sigma_x2</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>max_sigma_x2</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sigma_x</name> <operator>+=</operator> <name><name>p</name><operator>-&gt;</operator><name>sigma_x</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>sigma_x2</name> <operator>+=</operator> <name><name>p</name><operator>-&gt;</operator><name>sigma_x2</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>min_count</name> <operator>+=</operator> <name><name>p</name><operator>-&gt;</operator><name>min_count</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>max_count</name> <operator>+=</operator> <name><name>p</name><operator>-&gt;</operator><name>max_count</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>min_runs</name> <operator>+=</operator> <name><name>p</name><operator>-&gt;</operator><name>min_runs</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>max_runs</name> <operator>+=</operator> <name><name>p</name><operator>-&gt;</operator><name>max_runs</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>mask</name> <operator>|=</operator> <name><name>p</name><operator>-&gt;</operator><name>mask</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>imask</name> <operator>&amp;=</operator> <name><name>p</name><operator>-&gt;</operator><name>imask</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>nb_samples</name> <operator>+=</operator> <name><name>p</name><operator>-&gt;</operator><name>nb_samples</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>nb_nans</name> <operator>+=</operator> <name><name>p</name><operator>-&gt;</operator><name>nb_nans</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>nb_infs</name> <operator>+=</operator> <name><name>p</name><operator>-&gt;</operator><name>nb_infs</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>nb_denormals</name> <operator>+=</operator> <name><name>p</name><operator>-&gt;</operator><name>nb_denormals</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>fabs</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>sigma_x</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <call><name>fabs</name><argument_list>(<argument><expr><name>max_sigma_x</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>max_sigma_x</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>sigma_x</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"Channel: %d\n"</literal></expr></argument>, <argument><expr><name>c</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>measure_perchannel</name></name> <operator>&amp;</operator> <name>MEASURE_DC_OFFSET</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"DC offset: %f\n"</literal></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>sigma_x</name></name> <operator>/</operator> <name><name>p</name><operator>-&gt;</operator><name>nb_samples</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>measure_perchannel</name></name> <operator>&amp;</operator> <name>MEASURE_MIN_LEVEL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"Min level: %f\n"</literal></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>min</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>measure_perchannel</name></name> <operator>&amp;</operator> <name>MEASURE_MAX_LEVEL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"Max level: %f\n"</literal></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>max</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>measure_perchannel</name></name> <operator>&amp;</operator> <name>MEASURE_MIN_DIFFERENCE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"Min difference: %f\n"</literal></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>min_diff</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>measure_perchannel</name></name> <operator>&amp;</operator> <name>MEASURE_MAX_DIFFERENCE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"Max difference: %f\n"</literal></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>max_diff</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>measure_perchannel</name></name> <operator>&amp;</operator> <name>MEASURE_MEAN_DIFFERENCE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"Mean difference: %f\n"</literal></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>diff1_sum</name></name> <operator>/</operator> <operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>nb_samples</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>measure_perchannel</name></name> <operator>&amp;</operator> <name>MEASURE_RMS_DIFFERENCE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"RMS difference: %f\n"</literal></expr></argument>, <argument><expr><call><name>sqrt</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>diff1_sum_x2</name></name> <operator>/</operator> <operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>nb_samples</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>measure_perchannel</name></name> <operator>&amp;</operator> <name>MEASURE_PEAK_LEVEL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"Peak level dB: %f\n"</literal></expr></argument>, <argument><expr><call><name>LINEAR_TO_DB</name><argument_list>(<argument><expr><call><name>FFMAX</name><argument_list>(<argument><expr><operator>-</operator><name><name>p</name><operator>-&gt;</operator><name>nmin</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>nmax</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>measure_perchannel</name></name> <operator>&amp;</operator> <name>MEASURE_RMS_LEVEL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"RMS level dB: %f\n"</literal></expr></argument>, <argument><expr><call><name>LINEAR_TO_DB</name><argument_list>(<argument><expr><call><name>sqrt</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>sigma_x2</name></name> <operator>/</operator> <name><name>p</name><operator>-&gt;</operator><name>nb_samples</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>measure_perchannel</name></name> <operator>&amp;</operator> <name>MEASURE_RMS_PEAK</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"RMS peak dB: %f\n"</literal></expr></argument>, <argument><expr><call><name>LINEAR_TO_DB</name><argument_list>(<argument><expr><call><name>sqrt</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>max_sigma_x2</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>measure_perchannel</name></name> <operator>&amp;</operator> <name>MEASURE_RMS_TROUGH</name></expr>)</condition><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>min_sigma_x2</name></name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"RMS trough dB: %f\n"</literal></expr></argument>,<argument><expr><call><name>LINEAR_TO_DB</name><argument_list>(<argument><expr><call><name>sqrt</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>min_sigma_x2</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>measure_perchannel</name></name> <operator>&amp;</operator> <name>MEASURE_CREST_FACTOR</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"Crest factor: %f\n"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name><name>p</name><operator>-&gt;</operator><name>sigma_x2</name></name></expr> ?</condition><then> <expr><call><name>FFMAX</name><argument_list>(<argument><expr><operator>-</operator><name><name>p</name><operator>-&gt;</operator><name>nmin</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>nmax</name></name></expr></argument>)</argument_list></call> <operator>/</operator> <call><name>sqrt</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>sigma_x2</name></name> <operator>/</operator> <name><name>p</name><operator>-&gt;</operator><name>nb_samples</name></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>measure_perchannel</name></name> <operator>&amp;</operator> <name>MEASURE_FLAT_FACTOR</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"Flat factor: %f\n"</literal></expr></argument>, <argument><expr><call><name>LINEAR_TO_DB</name><argument_list>(<argument><expr><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>min_runs</name></name> <operator>+</operator> <name><name>p</name><operator>-&gt;</operator><name>max_runs</name></name><operator>)</operator> <operator>/</operator> <operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>min_count</name></name> <operator>+</operator> <name><name>p</name><operator>-&gt;</operator><name>max_count</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>measure_perchannel</name></name> <operator>&amp;</operator> <name>MEASURE_PEAK_COUNT</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"Peak count: %"</literal><name>PRId64</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>min_count</name></name> <operator>+</operator> <name><name>p</name><operator>-&gt;</operator><name>max_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>measure_perchannel</name></name> <operator>&amp;</operator> <name>MEASURE_BIT_DEPTH</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>bit_depth</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>mask</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>imask</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>depth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"Bit depth: %u/%u\n"</literal></expr></argument>, <argument><expr><name><name>depth</name><operator>.</operator><name>num</name></name></expr></argument>, <argument><expr><name><name>depth</name><operator>.</operator><name>den</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>measure_perchannel</name></name> <operator>&amp;</operator> <name>MEASURE_DYNAMIC_RANGE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"Dynamic range: %f\n"</literal></expr></argument>, <argument><expr><call><name>LINEAR_TO_DB</name><argument_list>(<argument><expr><literal type="number">2</literal> <operator>*</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><call><name>FFABS</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>min</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>FFABS</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>max</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>/</operator> <name><name>p</name><operator>-&gt;</operator><name>min_non_zero</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>measure_perchannel</name></name> <operator>&amp;</operator> <name>MEASURE_ZERO_CROSSINGS</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"Zero crossings: %"</literal><name>PRId64</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>zero_runs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>measure_perchannel</name></name> <operator>&amp;</operator> <name>MEASURE_ZERO_CROSSINGS_RATE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"Zero crossings rate: %f\n"</literal></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>zero_runs</name></name><operator>/</operator><operator>(</operator><name>double</name><operator>)</operator><name><name>p</name><operator>-&gt;</operator><name>nb_samples</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>is_float</name></name> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>is_double</name></name><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>measure_perchannel</name></name> <operator>&amp;</operator> <name>MEASURE_NUMBER_OF_NANS</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"Number of NaNs: %"</literal><name>PRId64</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>nb_nans</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>is_float</name></name> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>is_double</name></name><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>measure_perchannel</name></name> <operator>&amp;</operator> <name>MEASURE_NUMBER_OF_INFS</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"Number of Infs: %"</literal><name>PRId64</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>nb_infs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>is_float</name></name> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>is_double</name></name><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>measure_perchannel</name></name> <operator>&amp;</operator> <name>MEASURE_NUMBER_OF_DENORMALS</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"Number of denormals: %"</literal><name>PRId64</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>nb_denormals</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"Overall\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>measure_overall</name></name> <operator>&amp;</operator> <name>MEASURE_DC_OFFSET</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"DC offset: %f\n"</literal></expr></argument>, <argument><expr><name>max_sigma_x</name> <operator>/</operator> <operator>(</operator><name>nb_samples</name> <operator>/</operator> <name><name>s</name><operator>-&gt;</operator><name>nb_channels</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>measure_overall</name></name> <operator>&amp;</operator> <name>MEASURE_MIN_LEVEL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"Min level: %f\n"</literal></expr></argument>, <argument><expr><name>min</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>measure_overall</name></name> <operator>&amp;</operator> <name>MEASURE_MAX_LEVEL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"Max level: %f\n"</literal></expr></argument>, <argument><expr><name>max</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>measure_overall</name></name> <operator>&amp;</operator> <name>MEASURE_MIN_DIFFERENCE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"Min difference: %f\n"</literal></expr></argument>, <argument><expr><name>min_diff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>measure_overall</name></name> <operator>&amp;</operator> <name>MEASURE_MAX_DIFFERENCE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"Max difference: %f\n"</literal></expr></argument>, <argument><expr><name>max_diff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>measure_overall</name></name> <operator>&amp;</operator> <name>MEASURE_MEAN_DIFFERENCE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"Mean difference: %f\n"</literal></expr></argument>, <argument><expr><name>diff1_sum</name> <operator>/</operator> <operator>(</operator><name>nb_samples</name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>nb_channels</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>measure_overall</name></name> <operator>&amp;</operator> <name>MEASURE_RMS_DIFFERENCE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"RMS difference: %f\n"</literal></expr></argument>, <argument><expr><call><name>sqrt</name><argument_list>(<argument><expr><name>diff1_sum_x2</name> <operator>/</operator> <operator>(</operator><name>nb_samples</name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>nb_channels</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>measure_overall</name></name> <operator>&amp;</operator> <name>MEASURE_PEAK_LEVEL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"Peak level dB: %f\n"</literal></expr></argument>, <argument><expr><call><name>LINEAR_TO_DB</name><argument_list>(<argument><expr><call><name>FFMAX</name><argument_list>(<argument><expr><operator>-</operator><name>nmin</name></expr></argument>, <argument><expr><name>nmax</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>measure_overall</name></name> <operator>&amp;</operator> <name>MEASURE_RMS_LEVEL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"RMS level dB: %f\n"</literal></expr></argument>, <argument><expr><call><name>LINEAR_TO_DB</name><argument_list>(<argument><expr><call><name>sqrt</name><argument_list>(<argument><expr><name>sigma_x2</name> <operator>/</operator> <name>nb_samples</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>measure_overall</name></name> <operator>&amp;</operator> <name>MEASURE_RMS_PEAK</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"RMS peak dB: %f\n"</literal></expr></argument>, <argument><expr><call><name>LINEAR_TO_DB</name><argument_list>(<argument><expr><call><name>sqrt</name><argument_list>(<argument><expr><name>max_sigma_x2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>measure_overall</name></name> <operator>&amp;</operator> <name>MEASURE_RMS_TROUGH</name></expr>)</condition><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name>min_sigma_x2</name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"RMS trough dB: %f\n"</literal></expr></argument>, <argument><expr><call><name>LINEAR_TO_DB</name><argument_list>(<argument><expr><call><name>sqrt</name><argument_list>(<argument><expr><name>min_sigma_x2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>measure_overall</name></name> <operator>&amp;</operator> <name>MEASURE_FLAT_FACTOR</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"Flat factor: %f\n"</literal></expr></argument>, <argument><expr><call><name>LINEAR_TO_DB</name><argument_list>(<argument><expr><operator>(</operator><name>min_runs</name> <operator>+</operator> <name>max_runs</name><operator>)</operator> <operator>/</operator> <operator>(</operator><name>min_count</name> <operator>+</operator> <name>max_count</name><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>measure_overall</name></name> <operator>&amp;</operator> <name>MEASURE_PEAK_COUNT</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"Peak count: %f\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>min_count</name> <operator>+</operator> <name>max_count</name><operator>)</operator> <operator>/</operator> <operator>(</operator><name>double</name><operator>)</operator><name><name>s</name><operator>-&gt;</operator><name>nb_channels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>measure_overall</name></name> <operator>&amp;</operator> <name>MEASURE_BIT_DEPTH</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>bit_depth</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>imask</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>depth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"Bit depth: %u/%u\n"</literal></expr></argument>, <argument><expr><name><name>depth</name><operator>.</operator><name>num</name></name></expr></argument>, <argument><expr><name><name>depth</name><operator>.</operator><name>den</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>measure_overall</name></name> <operator>&amp;</operator> <name>MEASURE_NUMBER_OF_SAMPLES</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"Number of samples: %"</literal><name>PRId64</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name>nb_samples</name> <operator>/</operator> <name><name>s</name><operator>-&gt;</operator><name>nb_channels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>is_float</name></name> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>is_double</name></name><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>measure_overall</name></name> <operator>&amp;</operator> <name>MEASURE_NUMBER_OF_NANS</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"Number of NaNs: %f\n"</literal></expr></argument>, <argument><expr><name>nb_nans</name> <operator>/</operator> <operator>(</operator><name>float</name><operator>)</operator><name><name>s</name><operator>-&gt;</operator><name>nb_channels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>is_float</name></name> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>is_double</name></name><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>measure_overall</name></name> <operator>&amp;</operator> <name>MEASURE_NUMBER_OF_INFS</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"Number of Infs: %f\n"</literal></expr></argument>, <argument><expr><name>nb_infs</name> <operator>/</operator> <operator>(</operator><name>float</name><operator>)</operator><name><name>s</name><operator>-&gt;</operator><name>nb_channels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>is_float</name></name> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>is_double</name></name><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>measure_overall</name></name> <operator>&amp;</operator> <name>MEASURE_NUMBER_OF_DENORMALS</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"Number of denormals: %f\n"</literal></expr></argument>, <argument><expr><name>nb_denormals</name> <operator>/</operator> <operator>(</operator><name>float</name><operator>)</operator><name><name>s</name><operator>-&gt;</operator><name>nb_channels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>void</name></type> <name>uninit</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AudioStatsContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>nb_channels</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>print_stats</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>chstats</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVFilterPad</name></type> <name><name>astats_inputs</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"default"</literal></expr>,

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_AUDIO</name></expr>,

<expr><operator>.</operator><name>filter_frame</name> <operator>=</operator> <name>filter_frame</name></expr>,

}</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVFilterPad</name></type> <name><name>astats_outputs</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"default"</literal></expr>,

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_AUDIO</name></expr>,

<expr><operator>.</operator><name>config_props</name> <operator>=</operator> <name>config_output</name></expr>,

}</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFilter</name></type> <name>ff_af_astats</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"astats"</literal></expr>,

<expr><operator>.</operator><name>description</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"Show time domain statistics about audio frames."</literal></expr></argument>)</argument_list></call></expr>,

<expr><operator>.</operator><name>query_formats</name> <operator>=</operator> <name>query_formats</name></expr>,

<expr><operator>.</operator><name>priv_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>AudioStatsContext</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><operator>.</operator><name>priv_class</name> <operator>=</operator> <operator>&amp;</operator><name>astats_class</name></expr>,

<expr><operator>.</operator><name>uninit</name> <operator>=</operator> <name>uninit</name></expr>,

<expr><operator>.</operator><name>inputs</name> <operator>=</operator> <name>astats_inputs</name></expr>,

<expr><operator>.</operator><name>outputs</name> <operator>=</operator> <name>astats_outputs</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

</unit>
