<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavfilter\formats.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avassert.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/channel_layout.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/common.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/eval.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/pixdesc.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/parseutils.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avfilter.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"formats.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KNOWN</name><parameter_list>(<parameter><type><name>l</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(!FF_LAYOUT2COUNT(l))</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MERGE_REF</name><parameter_list>(<parameter><type><name>ret</name></type></parameter>, <parameter><type><name>a</name></type></parameter>, <parameter><type><name>fmts</name></type></parameter>, <parameter><type><name>type</name></type></parameter>, <parameter><type><name>fail</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { type ***tmp; int i; if (!(tmp = av_realloc_array(ret-&gt;refs, ret-&gt;refcount + a-&gt;refcount, sizeof(*tmp)))) goto fail; ret-&gt;refs = tmp; for (i = 0; i &lt; a-&gt;refcount; i ++) { ret-&gt;refs[ret-&gt;refcount] = a-&gt;refs[i]; *ret-&gt;refs[ret-&gt;refcount++] = ret; } av_freep(&amp;a-&gt;refs); av_freep(&amp;a-&gt;fmts); av_freep(&amp;a); } while (0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MERGE_FORMATS</name><parameter_list>(<parameter><type><name>ret</name></type></parameter>, <parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>, <parameter><type><name>fmts</name></type></parameter>, <parameter><type><name>nb</name></type></parameter>, <parameter><type><name>type</name></type></parameter>, <parameter><type><name>fail</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { int i, j, k = 0, count = FFMIN(a-&gt;nb, b-&gt;nb); if (!(ret = av_mallocz(sizeof(*ret)))) goto fail; if (count) { if (!(ret-&gt;fmts = av_malloc_array(count, sizeof(*ret-&gt;fmts)))) goto fail; for (i = 0; i &lt; a-&gt;nb; i++) for (j = 0; j &lt; b-&gt;nb; j++) if (a-&gt;fmts[i] == b-&gt;fmts[j]) { if(k &gt;= FFMIN(a-&gt;nb, b-&gt;nb)){ av_log(NULL, AV_LOG_ERROR, "Duplicate formats in %s detected\n", __FUNCTION__); av_free(ret-&gt;fmts); av_free(ret); return NULL; } ret-&gt;fmts[k++] = a-&gt;fmts[i]; } } ret-&gt;nb = k; if (!ret-&gt;nb) goto fail; MERGE_REF(ret, a, fmts, type, fail); MERGE_REF(ret, b, fmts, type, fail); } while (0)</cpp:value></cpp:define>

<function><type><name>AVFilterFormats</name> <modifier>*</modifier></type><name>ff_merge_formats</name><parameter_list>(<parameter><decl><type><name>AVFilterFormats</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>AVFilterFormats</name> <modifier>*</modifier></type><name>b</name></decl></parameter>,

<parameter><decl><type><name><name>enum</name> <name>AVMediaType</name></name></type> <name>type</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVFilterFormats</name> <modifier>*</modifier></type><name>ret</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>alpha1</name><init>=<expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>alpha2</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>chroma1</name><init>=<expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>chroma2</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>a</name> <operator>==</operator> <name>b</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>a</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>)</condition><block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>a</name><operator>-&gt;</operator><name>nb_formats</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>b</name><operator>-&gt;</operator><name>nb_formats</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>AVPixFmtDescriptor</name> <modifier>*</modifier></type><name>adesc</name> <init>= <expr><call><name>av_pix_fmt_desc_get</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>formats</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>AVPixFmtDescriptor</name> <modifier>*</modifier></type><name>bdesc</name> <init>= <expr><call><name>av_pix_fmt_desc_get</name><argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>formats</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>alpha2</name> <operator>|=</operator> <name><name>adesc</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name><name>bdesc</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_PIX_FMT_FLAG_ALPHA</name></expr>;</expr_stmt>

<expr_stmt><expr><name>chroma2</name><operator>|=</operator> <name><name>adesc</name><operator>-&gt;</operator><name>nb_components</name></name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>bdesc</name><operator>-&gt;</operator><name>nb_components</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>formats</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name><name>b</name><operator>-&gt;</operator><name>formats</name><index>[<expr><name>j</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>alpha1</name> <operator>|=</operator> <name><name>adesc</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_PIX_FMT_FLAG_ALPHA</name></expr>;</expr_stmt>

<expr_stmt><expr><name>chroma1</name><operator>|=</operator> <name><name>adesc</name><operator>-&gt;</operator><name>nb_components</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for></block_content></block></for></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>alpha2</name> <operator>&gt;</operator> <name>alpha1</name> <operator>||</operator> <name>chroma2</name> <operator>&gt;</operator> <name>chroma1</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>MERGE_FORMATS</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>formats</name></expr></argument>, <argument><expr><name>nb_formats</name></expr></argument>, <argument><expr><name>AVFilterFormats</name></expr></argument>, <argument><expr><name>fail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

<label><name>fail</name>:</label>

<if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ret</name><operator>-&gt;</operator><name>refs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ret</name><operator>-&gt;</operator><name>formats</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>AVFilterFormats</name> <modifier>*</modifier></type><name>ff_merge_samplerates</name><parameter_list>(<parameter><decl><type><name>AVFilterFormats</name> <modifier>*</modifier></type><name>a</name></decl></parameter>,

<parameter><decl><type><name>AVFilterFormats</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVFilterFormats</name> <modifier>*</modifier></type><name>ret</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>a</name> <operator>==</operator> <name>b</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>a</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>nb_formats</name></name> <operator>&amp;&amp;</operator> <name><name>b</name><operator>-&gt;</operator><name>nb_formats</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>MERGE_FORMATS</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>formats</name></expr></argument>, <argument><expr><name>nb_formats</name></expr></argument>, <argument><expr><name>AVFilterFormats</name></expr></argument>, <argument><expr><name>fail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>nb_formats</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>MERGE_REF</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>formats</name></expr></argument>, <argument><expr><name>AVFilterFormats</name></expr></argument>, <argument><expr><name>fail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>a</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>MERGE_REF</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>formats</name></expr></argument>, <argument><expr><name>AVFilterFormats</name></expr></argument>, <argument><expr><name>fail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>b</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>

<label><name>fail</name>:</label>

<if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ret</name><operator>-&gt;</operator><name>refs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ret</name><operator>-&gt;</operator><name>formats</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>AVFilterChannelLayouts</name> <modifier>*</modifier></type><name>ff_merge_channel_layouts</name><parameter_list>(<parameter><decl><type><name>AVFilterChannelLayouts</name> <modifier>*</modifier></type><name>a</name></decl></parameter>,

<parameter><decl><type><name>AVFilterChannelLayouts</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVFilterChannelLayouts</name> <modifier>*</modifier></type><name>ret</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>a_all</name> <init>= <expr><name><name>a</name><operator>-&gt;</operator><name>all_layouts</name></name> <operator>+</operator> <name><name>a</name><operator>-&gt;</operator><name>all_counts</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>b_all</name> <init>= <expr><name><name>b</name><operator>-&gt;</operator><name>all_layouts</name></name> <operator>+</operator> <name><name>b</name><operator>-&gt;</operator><name>all_counts</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret_max</name></decl>, <decl><type ref="prev"/><name>ret_nb</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>round</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>a</name> <operator>==</operator> <name>b</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>a</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>a_all</name> <operator>&lt;</operator> <name>b_all</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>FFSWAP</name><argument_list>(<argument><expr><name>AVFilterChannelLayouts</name> <operator>*</operator></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>FFSWAP</name><argument_list>(<argument><expr><name>unsigned</name></expr></argument>, <argument><expr><name>a_all</name></expr></argument>, <argument><expr><name>b_all</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>a_all</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>a_all</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name>b_all</name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>b</name><operator>-&gt;</operator><name>nb_channel_layouts</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><call><name>KNOWN</name><argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>channel_layouts</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>channel_layouts</name><index>[<expr><name>j</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>b</name><operator>-&gt;</operator><name>channel_layouts</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>j</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>nb_channel_layouts</name></name> <operator>=</operator> <name>j</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>MERGE_REF</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>channel_layouts</name></expr></argument>, <argument><expr><name>AVFilterChannelLayouts</name></expr></argument>, <argument><expr><name>fail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>b</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret_max</name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>nb_channel_layouts</name></name> <operator>+</operator> <name><name>b</name><operator>-&gt;</operator><name>nb_channel_layouts</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>ret</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator>

<operator>!</operator><operator>(</operator><name><name>ret</name><operator>-&gt;</operator><name>channel_layouts</name></name> <operator>=</operator> <call><name>av_malloc_array</name><argument_list>(<argument><expr><name>ret_max</name></expr></argument>,

<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>ret</name><operator>-&gt;</operator><name>channel_layouts</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>a</name><operator>-&gt;</operator><name>nb_channel_layouts</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>KNOWN</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>channel_layouts</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>b</name><operator>-&gt;</operator><name>nb_channel_layouts</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>channel_layouts</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name><name>b</name><operator>-&gt;</operator><name>channel_layouts</name><index>[<expr><name>j</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>channel_layouts</name><index>[<expr><name>ret_nb</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>channel_layouts</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>channel_layouts</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>b</name><operator>-&gt;</operator><name>channel_layouts</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>round</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>round</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>round</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>a</name><operator>-&gt;</operator><name>nb_channel_layouts</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>fmt</name> <init>= <expr><name><name>a</name><operator>-&gt;</operator><name>channel_layouts</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>bfmt</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>fmt</name> <operator>||</operator> <operator>!</operator><call><name>KNOWN</name><argument_list>(<argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name>bfmt</name> <operator>=</operator> <call><name>FF_COUNT2LAYOUT</name><argument_list>(<argument><expr><call><name>av_get_channel_layout_nb_channels</name><argument_list>(<argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>b</name><operator>-&gt;</operator><name>nb_channel_layouts</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name><name>b</name><operator>-&gt;</operator><name>channel_layouts</name><index>[<expr><name>j</name></expr>]</index></name> <operator>==</operator> <name>bfmt</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>channel_layouts</name><index>[<expr><name>ret_nb</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>channel_layouts</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>

</block_content>}</block></for>

<expr_stmt><expr><call><name>FFSWAP</name><argument_list>(<argument><expr><name>AVFilterChannelLayouts</name> <operator>*</operator></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>a</name><operator>-&gt;</operator><name>nb_channel_layouts</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>KNOWN</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>channel_layouts</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>b</name><operator>-&gt;</operator><name>nb_channel_layouts</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>channel_layouts</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name><name>b</name><operator>-&gt;</operator><name>channel_layouts</name><index>[<expr><name>j</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>channel_layouts</name><index>[<expr><name>ret_nb</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>channel_layouts</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>

</block_content>}</block></for>

<expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>nb_channel_layouts</name></name> <operator>=</operator> <name>ret_nb</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ret</name><operator>-&gt;</operator><name>nb_channel_layouts</name></name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>MERGE_REF</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>channel_layouts</name></expr></argument>, <argument><expr><name>AVFilterChannelLayouts</name></expr></argument>, <argument><expr><name>fail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MERGE_REF</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>channel_layouts</name></expr></argument>, <argument><expr><name>AVFilterChannelLayouts</name></expr></argument>, <argument><expr><name>fail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

<label><name>fail</name>:</label>

<if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ret</name><operator>-&gt;</operator><name>refs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ret</name><operator>-&gt;</operator><name>channel_layouts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_fmt_is_in</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fmt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name> <modifier>*</modifier></type><name>fmts</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name>fmts</name></expr>;</init> <condition><expr><operator>*</operator><name>p</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>fmt</name> <operator>==</operator> <operator>*</operator><name>p</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAKE_FORMAT_LIST</name><parameter_list>(<parameter><type><name>type</name></type></parameter>, <parameter><type><name>field</name></type></parameter>, <parameter><type><name>count_field</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>type *formats; int count = 0; if (fmts) for (count = 0; fmts[count] != -1; count++) ; formats = av_mallocz(sizeof(*formats)); if (!formats) return NULL; formats-&gt;count_field = count; if (count) { formats-&gt;field = av_malloc_array(count, sizeof(*formats-&gt;field)); if (!formats-&gt;field) { av_freep(&amp;formats); return NULL; } }</cpp:value></cpp:define>

<function><type><name>AVFilterFormats</name> <modifier>*</modifier></type><name>ff_make_format_list</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int</name> <modifier>*</modifier></type><name>fmts</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>MAKE_FORMAT_LIST</name><argument_list>(<argument><expr><name>AVFilterFormats</name></expr></argument>, <argument><expr><name>formats</name></expr></argument>, <argument><expr><name>nb_formats</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><name>count</name><operator>--</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>formats</name><operator>-&gt;</operator><name>formats</name><index>[<expr><name>count</name></expr>]</index></name> <operator>=</operator> <name><name>fmts</name><index>[<expr><name>count</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></while>

<return>return <expr><name>formats</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>AVFilterChannelLayouts</name> <modifier>*</modifier></type><name>ff_make_formatu64_list</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint64_t</name> <modifier>*</modifier></type><name>fmts</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>MAKE_FORMAT_LIST</name><argument_list>(<argument><expr><name>AVFilterChannelLayouts</name></expr></argument>,

<argument><expr><name>channel_layouts</name></expr></argument>, <argument><expr><name>nb_channel_layouts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>count</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>formats</name><operator>-&gt;</operator><name>channel_layouts</name></name></expr></argument>, <argument><expr><name>fmts</name></expr></argument>,

<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>formats</name><operator>-&gt;</operator><name>channel_layouts</name></name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>formats</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>AVFilterChannelLayouts</name> <modifier>*</modifier></type><name>avfilter_make_format64_list</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier></type><name>fmts</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>MAKE_FORMAT_LIST</name><argument_list>(<argument><expr><name>AVFilterChannelLayouts</name></expr></argument>,

<argument><expr><name>channel_layouts</name></expr></argument>, <argument><expr><name>nb_channel_layouts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>count</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>formats</name><operator>-&gt;</operator><name>channel_layouts</name></name></expr></argument>, <argument><expr><name>fmts</name></expr></argument>,

<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>formats</name><operator>-&gt;</operator><name>channel_layouts</name></name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>formats</name></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ADD_FORMAT</name><parameter_list>(<parameter><type><name>f</name></type></parameter>, <parameter><type><name>fmt</name></type></parameter>, <parameter><type><name>unref_fn</name></type></parameter>, <parameter><type><name>type</name></type></parameter>, <parameter><type><name>list</name></type></parameter>, <parameter><type><name>nb</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { type *fmts; void *oldf = *f; if (!(*f) &amp;&amp; !(*f = av_mallocz(sizeof(**f)))) { return AVERROR(ENOMEM); } fmts = av_realloc_array((*f)-&gt;list, (*f)-&gt;nb + 1, sizeof(*(*f)-&gt;list)); if (!fmts) { unref_fn(f); if (!oldf) av_freep(f); return AVERROR(ENOMEM); } (*f)-&gt;list = fmts; (*f)-&gt;list[(*f)-&gt;nb++] = fmt; } while (0)</cpp:value></cpp:define>

<function><type><name>int</name></type> <name>ff_add_format</name><parameter_list>(<parameter><decl><type><name>AVFilterFormats</name> <modifier>*</modifier><modifier>*</modifier></type><name>avff</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>fmt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>ADD_FORMAT</name><argument_list>(<argument><expr><name>avff</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>ff_formats_unref</name></expr></argument>, <argument><expr><name>int</name></expr></argument>, <argument><expr><name>formats</name></expr></argument>, <argument><expr><name>nb_formats</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_add_channel_layout</name><parameter_list>(<parameter><decl><type><name>AVFilterChannelLayouts</name> <modifier>*</modifier><modifier>*</modifier></type><name>l</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>channel_layout</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>av_assert1</name><argument_list>(<argument><expr><operator>!</operator><operator>(</operator><operator>*</operator><name>l</name> <operator>&amp;&amp;</operator> <name><operator>(</operator><operator>*</operator><name>l</name><operator>)</operator><operator>-&gt;</operator><name>all_layouts</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ADD_FORMAT</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><name>channel_layout</name></expr></argument>, <argument><expr><name>ff_channel_layouts_unref</name></expr></argument>, <argument><expr><name>uint64_t</name></expr></argument>, <argument><expr><name>channel_layouts</name></expr></argument>, <argument><expr><name>nb_channel_layouts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>AVFilterFormats</name> <modifier>*</modifier></type><name>ff_all_formats</name><parameter_list>(<parameter><decl><type><name><name>enum</name> <name>AVMediaType</name></name></type> <name>type</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVFilterFormats</name> <modifier>*</modifier></type><name>ret</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>AVPixFmtDescriptor</name> <modifier>*</modifier></type><name>desc</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><operator>(</operator><name>desc</name> <operator>=</operator> <call><name>av_pix_fmt_desc_next</name><argument_list>(<argument><expr><name>desc</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>ff_add_format</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ret</name></expr></argument>, <argument><expr><call><name>av_pix_fmt_desc_get_id</name><argument_list>(<argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></while>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>type</name> <operator>==</operator> <name>AVMEDIA_TYPE_AUDIO</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name><name>enum</name> <name>AVSampleFormat</name></name></type> <name>fmt</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><call><name>av_get_sample_fmt_name</name><argument_list>(<argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>ff_add_format</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ret</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>fmt</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name><name>avfilter_all_channel_layouts</name><index>[]</index></name> <init>= <expr><block>{

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"all_channel_layouts.inc"</cpp:file></cpp:include>

<expr><operator>-</operator><literal type="number">1</literal></expr>

}</block></expr></init></decl>;</decl_stmt>

<function><type><name>AVFilterFormats</name> <modifier>*</modifier></type><name>ff_planar_sample_fmts</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVFilterFormats</name> <modifier>*</modifier></type><name>ret</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>fmt</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>fmt</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><call><name>av_get_bytes_per_sample</name><argument_list>(<argument><expr><name>fmt</name></expr></argument>)</argument_list></call><operator>&gt;</operator><literal type="number">0</literal></expr>;</condition> <incr><expr><name>fmt</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><call><name>av_sample_fmt_is_planar</name><argument_list>(<argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><call><name>ff_add_format</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ret</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></for>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>AVFilterFormats</name> <modifier>*</modifier></type><name>ff_all_samplerates</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVFilterFormats</name> <modifier>*</modifier></type><name>ret</name> <init>= <expr><call><name>av_mallocz</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>ret</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>AVFilterChannelLayouts</name> <modifier>*</modifier></type><name>ff_all_channel_layouts</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVFilterChannelLayouts</name> <modifier>*</modifier></type><name>ret</name> <init>= <expr><call><name>av_mallocz</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>ret</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ret</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>all_layouts</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>AVFilterChannelLayouts</name> <modifier>*</modifier></type><name>ff_all_channel_counts</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVFilterChannelLayouts</name> <modifier>*</modifier></type><name>ret</name> <init>= <expr><call><name>av_mallocz</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>ret</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ret</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>all_layouts</name></name> <operator>=</operator> <name><name>ret</name><operator>-&gt;</operator><name>all_counts</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FORMATS_REF</name><parameter_list>(<parameter><type><name>f</name></type></parameter>, <parameter><type><name>ref</name></type></parameter>, <parameter><type><name>unref_fn</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>void *tmp; if (!f || !ref) return AVERROR(ENOMEM); tmp = av_realloc_array(f-&gt;refs, sizeof(*f-&gt;refs), f-&gt;refcount + 1); if (!tmp) { unref_fn(&amp;f); return AVERROR(ENOMEM); } f-&gt;refs = tmp; f-&gt;refs[f-&gt;refcount++] = ref; *ref = f; return 0</cpp:value></cpp:define>

<function><type><name>int</name></type> <name>ff_channel_layouts_ref</name><parameter_list>(<parameter><decl><type><name>AVFilterChannelLayouts</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>AVFilterChannelLayouts</name> <modifier>*</modifier><modifier>*</modifier></type><name>ref</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>FORMATS_REF</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>ref</name></expr></argument>, <argument><expr><name>ff_channel_layouts_unref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_formats_ref</name><parameter_list>(<parameter><decl><type><name>AVFilterFormats</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>AVFilterFormats</name> <modifier>*</modifier><modifier>*</modifier></type><name>ref</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>FORMATS_REF</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>ref</name></expr></argument>, <argument><expr><name>ff_formats_unref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FIND_REF_INDEX</name><parameter_list>(<parameter><type><name>ref</name></type></parameter>, <parameter><type><name>idx</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { int i; for (i = 0; i &lt; (*ref)-&gt;refcount; i ++) if((*ref)-&gt;refs[i] == ref) { idx = i; break; } } while (0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FORMATS_UNREF</name><parameter_list>(<parameter><type><name>ref</name></type></parameter>, <parameter><type><name>list</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { int idx = -1; if (!ref || !*ref || !(*ref)-&gt;refs) return; FIND_REF_INDEX(ref, idx); if (idx &gt;= 0) memmove((*ref)-&gt;refs + idx, (*ref)-&gt;refs + idx + 1, sizeof(*(*ref)-&gt;refs) * ((*ref)-&gt;refcount - idx - 1)); if(!--(*ref)-&gt;refcount) { av_free((*ref)-&gt;list); av_free((*ref)-&gt;refs); av_free(*ref); } *ref = NULL; } while (0)</cpp:value></cpp:define>

<function><type><name>void</name></type> <name>ff_formats_unref</name><parameter_list>(<parameter><decl><type><name>AVFilterFormats</name> <modifier>*</modifier><modifier>*</modifier></type><name>ref</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>FORMATS_UNREF</name><argument_list>(<argument><expr><name>ref</name></expr></argument>, <argument><expr><name>formats</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_channel_layouts_unref</name><parameter_list>(<parameter><decl><type><name>AVFilterChannelLayouts</name> <modifier>*</modifier><modifier>*</modifier></type><name>ref</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>FORMATS_UNREF</name><argument_list>(<argument><expr><name>ref</name></expr></argument>, <argument><expr><name>channel_layouts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FORMATS_CHANGEREF</name><parameter_list>(<parameter><type><name>oldref</name></type></parameter>, <parameter><type><name>newref</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { int idx = -1; FIND_REF_INDEX(oldref, idx); if (idx &gt;= 0) { (*oldref)-&gt;refs[idx] = newref; *newref = *oldref; *oldref = NULL; } } while (0)</cpp:value></cpp:define>

<function><type><name>void</name></type> <name>ff_channel_layouts_changeref</name><parameter_list>(<parameter><decl><type><name>AVFilterChannelLayouts</name> <modifier>*</modifier><modifier>*</modifier></type><name>oldref</name></decl></parameter>,

<parameter><decl><type><name>AVFilterChannelLayouts</name> <modifier>*</modifier><modifier>*</modifier></type><name>newref</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>FORMATS_CHANGEREF</name><argument_list>(<argument><expr><name>oldref</name></expr></argument>, <argument><expr><name>newref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_formats_changeref</name><parameter_list>(<parameter><decl><type><name>AVFilterFormats</name> <modifier>*</modifier><modifier>*</modifier></type><name>oldref</name></decl></parameter>, <parameter><decl><type><name>AVFilterFormats</name> <modifier>*</modifier><modifier>*</modifier></type><name>newref</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>FORMATS_CHANGEREF</name><argument_list>(<argument><expr><name>oldref</name></expr></argument>, <argument><expr><name>newref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SET_COMMON_FORMATS</name><parameter_list>(<parameter><type><name>ctx</name></type></parameter>, <parameter><type><name>fmts</name></type></parameter>, <parameter><type><name>in_fmts</name></type></parameter>, <parameter><type><name>out_fmts</name></type></parameter>, <parameter><type><name>ref_fn</name></type></parameter>, <parameter><type><name>unref_fn</name></type></parameter>, <parameter><type><name>list</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>int count = 0, i; if (!fmts) return AVERROR(ENOMEM); for (i = 0; i &lt; ctx-&gt;nb_inputs; i++) { if (ctx-&gt;inputs[i] &amp;&amp; !ctx-&gt;inputs[i]-&gt;out_fmts) { int ret = ref_fn(fmts, &amp;ctx-&gt;inputs[i]-&gt;out_fmts); if (ret &lt; 0) { unref_fn(&amp;fmts); if (fmts) av_freep(&amp;fmts-&gt;list); av_freep(&amp;fmts); return ret; } count++; } } for (i = 0; i &lt; ctx-&gt;nb_outputs; i++) { if (ctx-&gt;outputs[i] &amp;&amp; !ctx-&gt;outputs[i]-&gt;in_fmts) { int ret = ref_fn(fmts, &amp;ctx-&gt;outputs[i]-&gt;in_fmts); if (ret &lt; 0) { unref_fn(&amp;fmts); if (fmts) av_freep(&amp;fmts-&gt;list); av_freep(&amp;fmts); return ret; } count++; } } if (!count) { av_freep(&amp;fmts-&gt;list); av_freep(&amp;fmts-&gt;refs); av_freep(&amp;fmts); } return 0;</cpp:value></cpp:define>

<function><type><name>int</name></type> <name>ff_set_common_channel_layouts</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,

<parameter><decl><type><name>AVFilterChannelLayouts</name> <modifier>*</modifier></type><name>layouts</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>SET_COMMON_FORMATS</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>layouts</name></expr></argument>, <argument><expr><name>in_channel_layouts</name></expr></argument>, <argument><expr><name>out_channel_layouts</name></expr></argument>,

<argument><expr><name>ff_channel_layouts_ref</name></expr></argument>, <argument><expr><name>ff_channel_layouts_unref</name></expr></argument>, <argument><expr><name>channel_layouts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_set_common_samplerates</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,

<parameter><decl><type><name>AVFilterFormats</name> <modifier>*</modifier></type><name>samplerates</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>SET_COMMON_FORMATS</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>samplerates</name></expr></argument>, <argument><expr><name>in_samplerates</name></expr></argument>, <argument><expr><name>out_samplerates</name></expr></argument>,

<argument><expr><name>ff_formats_ref</name></expr></argument>, <argument><expr><name>ff_formats_unref</name></expr></argument>, <argument><expr><name>formats</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_set_common_formats</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>AVFilterFormats</name> <modifier>*</modifier></type><name>formats</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>SET_COMMON_FORMATS</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>formats</name></expr></argument>, <argument><expr><name>in_formats</name></expr></argument>, <argument><expr><name>out_formats</name></expr></argument>,

<argument><expr><name>ff_formats_ref</name></expr></argument>, <argument><expr><name>ff_formats_unref</name></expr></argument>, <argument><expr><name>formats</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>default_query_formats_common</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,

<parameter><function_decl><type><name>AVFilterChannelLayouts</name> <modifier>*</modifier></type>(<name>layouts</name>)<parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>AVMediaType</name></name></type> <name>type</name> <init>= <expr><ternary><condition><expr><name><name>ctx</name><operator>-&gt;</operator><name>inputs</name></name> <operator>&amp;&amp;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>inputs</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name></expr> ?</condition><then> <expr><name><name>ctx</name><operator>-&gt;</operator><name>inputs</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>type</name></expr> </then><else>:

<expr><ternary><condition><expr><name><name>ctx</name><operator>-&gt;</operator><name>outputs</name></name> <operator>&amp;&amp;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>outputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr> ?</condition><then> <expr><name><name>ctx</name><operator>-&gt;</operator><name>outputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>type</name></expr> </then><else>:

<expr><name>AVMEDIA_TYPE_VIDEO</name></expr></else></ternary></expr></else></ternary></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_set_common_formats</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><call><name>ff_all_formats</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>AVMEDIA_TYPE_AUDIO</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_set_common_channel_layouts</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><call><name>layouts</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_set_common_samplerates</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><call><name>ff_all_samplerates</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_default_query_formats</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>default_query_formats_common</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>ff_all_channel_counts</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_query_formats_all_layouts</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>default_query_formats_common</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>ff_all_channel_layouts</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_parse_pixel_format</name><parameter_list>(<parameter><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name> <modifier>*</modifier></type><name>ret</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>log_ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>tail</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>pix_fmt</name> <init>= <expr><call><name>av_get_pix_fmt</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>pix_fmt</name> <operator>==</operator> <name>AV_PIX_FMT_NONE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>pix_fmt</name> <operator>=</operator> <call><name>strtol</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tail</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>tail</name> <operator>||</operator> <operator>!</operator><call><name>av_pix_fmt_desc_get</name><argument_list>(<argument><expr><name>pix_fmt</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>log_ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid pixel format '%s'\n"</literal></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>ret</name> <operator>=</operator> <name>pix_fmt</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_parse_sample_format</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>ret</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>log_ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>tail</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>sfmt</name> <init>= <expr><call><name>av_get_sample_fmt</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>sfmt</name> <operator>==</operator> <name>AV_SAMPLE_FMT_NONE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>sfmt</name> <operator>=</operator> <call><name>strtol</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tail</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>tail</name> <operator>||</operator> <call><name>av_get_bytes_per_sample</name><argument_list>(<argument><expr><name>sfmt</name></expr></argument>)</argument_list></call><operator>&lt;=</operator><literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>log_ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid sample format '%s'\n"</literal></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>ret</name> <operator>=</operator> <name>sfmt</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_parse_time_base</name><parameter_list>(<parameter><decl><type><name>AVRational</name> <modifier>*</modifier></type><name>ret</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>log_ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVRational</name></type> <name>r</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><call><name>av_parse_ratio</name><argument_list>(<argument><expr><operator>&amp;</operator><name>r</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><name>INT_MAX</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>log_ctx</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator><name><name>r</name><operator>.</operator><name>num</name></name><operator>&lt;=</operator><literal type="number">0</literal> <operator>||</operator><name><name>r</name><operator>.</operator><name>den</name></name><operator>&lt;=</operator><literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>log_ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid time base '%s'\n"</literal></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>ret</name> <operator>=</operator> <name>r</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_parse_sample_rate</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>ret</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>log_ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>tail</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>srate</name> <init>= <expr><call><name>av_strtod</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tail</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>tail</name> <operator>||</operator> <name><name>srate</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">1</literal> <operator>||</operator> <operator>(</operator><name>int</name><operator>)</operator><name>srate</name> <operator>!=</operator> <name>srate</name> <operator>||</operator> <name>srate</name></expr></argument> &gt;</argument_list></name> <name>INT_MAX</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>log_ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid sample rate '%s'\n"</literal></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>ret</name> <operator>=</operator> <name>srate</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_parse_channel_layout</name><parameter_list>(<parameter><decl><type><name>int64_t</name> <modifier>*</modifier></type><name>ret</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>nret</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>log_ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int64_t</name></type> <name>chlayout</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>nb_channels</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>av_get_extended_channel_layout</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>chlayout</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nb_channels</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>log_ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid channel layout '%s'\n"</literal></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>chlayout</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>nret</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>log_ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Unknown channel layout '%s' is not supported.\n"</literal></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>ret</name> <operator>=</operator> <name>chlayout</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>nret</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>nret</name> <operator>=</operator> <name>nb_channels</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

</unit>
