<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavfilter\vf_misc_vaapi.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avassert.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/mem.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/opt.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/pixdesc.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avfilter.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"formats.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vaapi_vpp.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DENOISE_MIN</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DENOISE_MAX</name></cpp:macro> <cpp:value>64</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DENOISE_DEFAULT</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHARPNESS_MIN</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHARPNESS_MAX</name></cpp:macro> <cpp:value>64</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHARPNESS_DEFAULT</name></cpp:macro> <cpp:value>44</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <name>DenoiseVAAPIContext</name> <block>{

<decl_stmt><decl><type><name>VAAPIVPPContext</name></type> <name>vpp_ctx</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>denoise</name></decl>;</decl_stmt> 

}</block></struct></type> <name>DenoiseVAAPIContext</name>;</typedef>

<typedef>typedef <type><struct>struct <name>SharpnessVAAPIContext</name> <block>{

<decl_stmt><decl><type><name>VAAPIVPPContext</name></type> <name>vpp_ctx</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>sharpness</name></decl>;</decl_stmt> 

}</block></struct></type> <name>SharpnessVAAPIContext</name>;</typedef>

<function><type><specifier>static</specifier> <name>float</name></type> <name>map</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>in_min</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>in_max</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>out_min</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>out_max</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>double</name></type> <name>slope</name></decl>, <decl><type ref="prev"/><name>output</name></decl>;</decl_stmt>

<expr_stmt><expr><name>slope</name> <operator>=</operator> <literal type="number">1.0</literal> <operator>*</operator> <operator>(</operator><name>out_max</name> <operator>-</operator> <name>out_min</name><operator>)</operator> <operator>/</operator> <operator>(</operator><name>in_max</name> <operator>-</operator> <name>in_min</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>output</name> <operator>=</operator> <name>out_min</name> <operator>+</operator> <name>slope</name> <operator>*</operator> <operator>(</operator><name>x</name> <operator>-</operator> <name>in_min</name><operator>)</operator></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>float</name><operator>)</operator><name>output</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>denoise_vaapi_build_filter_params</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VAAPIVPPContext</name> <modifier>*</modifier></type><name>vpp_ctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DenoiseVAAPIContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VAProcFilterCap</name></type> <name>caps</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VAStatus</name></type> <name>vas</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>num_caps</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VAProcFilterParameterBuffer</name></type> <name>denoise</name></decl>;</decl_stmt>

<expr_stmt><expr><name>vas</name> <operator>=</operator> <call><name>vaQueryVideoProcFilterCaps</name><argument_list>(<argument><expr><name><name>vpp_ctx</name><operator>-&gt;</operator><name>hwctx</name><operator>-&gt;</operator><name>display</name></name></expr></argument>, <argument><expr><name><name>vpp_ctx</name><operator>-&gt;</operator><name>va_context</name></name></expr></argument>,

<argument><expr><name>VAProcFilterNoiseReduction</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>caps</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>num_caps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>vas</name> <operator>!=</operator> <name>VA_STATUS_SUCCESS</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to query denoise caps "</literal>

<literal type="string">"context: %d (%s).\n"</literal></expr></argument>, <argument><expr><name>vas</name></expr></argument>, <argument><expr><call><name>vaErrorStr</name><argument_list>(<argument><expr><name>vas</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EIO</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>denoise</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>VAProcFilterNoiseReduction</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>denoise</name><operator>.</operator><name>value</name></name> <operator>=</operator> <call><name>map</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>denoise</name></name></expr></argument>, <argument><expr><name>DENOISE_MIN</name></expr></argument>, <argument><expr><name>DENOISE_MAX</name></expr></argument>,

<argument><expr><name><name>caps</name><operator>.</operator><name>range</name><operator>.</operator><name>min_value</name></name></expr></argument>,

<argument><expr><name><name>caps</name><operator>.</operator><name>range</name><operator>.</operator><name>max_value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>ff_vaapi_vpp_make_param_buffers</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>,

<argument><expr><name>VAProcFilterParameterBufferType</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>denoise</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>denoise</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>sharpness_vaapi_build_filter_params</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VAAPIVPPContext</name> <modifier>*</modifier></type><name>vpp_ctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SharpnessVAAPIContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VAProcFilterCap</name></type> <name>caps</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VAStatus</name></type> <name>vas</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>num_caps</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VAProcFilterParameterBuffer</name></type> <name>sharpness</name></decl>;</decl_stmt>

<expr_stmt><expr><name>vas</name> <operator>=</operator> <call><name>vaQueryVideoProcFilterCaps</name><argument_list>(<argument><expr><name><name>vpp_ctx</name><operator>-&gt;</operator><name>hwctx</name><operator>-&gt;</operator><name>display</name></name></expr></argument>, <argument><expr><name><name>vpp_ctx</name><operator>-&gt;</operator><name>va_context</name></name></expr></argument>,

<argument><expr><name>VAProcFilterSharpening</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>caps</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>num_caps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>vas</name> <operator>!=</operator> <name>VA_STATUS_SUCCESS</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to query sharpness caps "</literal>

<literal type="string">"context: %d (%s).\n"</literal></expr></argument>, <argument><expr><name>vas</name></expr></argument>, <argument><expr><call><name>vaErrorStr</name><argument_list>(<argument><expr><name>vas</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EIO</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>sharpness</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>VAProcFilterSharpening</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sharpness</name><operator>.</operator><name>value</name></name> <operator>=</operator> <call><name>map</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>sharpness</name></name></expr></argument>,

<argument><expr><name>SHARPNESS_MIN</name></expr></argument>, <argument><expr><name>SHARPNESS_MAX</name></expr></argument>,

<argument><expr><name><name>caps</name><operator>.</operator><name>range</name><operator>.</operator><name>min_value</name></name></expr></argument>,

<argument><expr><name><name>caps</name><operator>.</operator><name>range</name><operator>.</operator><name>max_value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>ff_vaapi_vpp_make_param_buffers</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>,

<argument><expr><name>VAProcFilterParameterBufferType</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>sharpness</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sharpness</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>misc_vaapi_filter_frame</name><parameter_list>(<parameter><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>inlink</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>input_frame</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>avctx</name> <init>= <expr><name><name>inlink</name><operator>-&gt;</operator><name>dst</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>outlink</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>outputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VAAPIVPPContext</name> <modifier>*</modifier></type><name>vpp_ctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>output_frame</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VAProcPipelineParameterBuffer</name></type> <name>params</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Filter input: %s, %ux%u (%"</literal><name>PRId64</name><literal type="string">").\n"</literal></expr></argument>,

<argument><expr><call><name>av_get_pix_fmt_name</name><argument_list>(<argument><expr><name><name>input_frame</name><operator>-&gt;</operator><name>format</name></name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name><name>input_frame</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>input_frame</name><operator>-&gt;</operator><name>height</name></name></expr></argument>, <argument><expr><name><name>input_frame</name><operator>-&gt;</operator><name>pts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>vpp_ctx</name><operator>-&gt;</operator><name>va_context</name></name> <operator>==</operator> <name>VA_INVALID_ID</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>output_frame</name> <operator>=</operator> <call><name>ff_get_video_buffer</name><argument_list>(<argument><expr><name>outlink</name></expr></argument>, <argument><expr><name><name>vpp_ctx</name><operator>-&gt;</operator><name>output_width</name></name></expr></argument>,

<argument><expr><name><name>vpp_ctx</name><operator>-&gt;</operator><name>output_height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>output_frame</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>av_frame_copy_props</name><argument_list>(<argument><expr><name>output_frame</name></expr></argument>, <argument><expr><name>input_frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>ff_vaapi_vpp_init_params</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>params</name></expr></argument>,

<argument><expr><name>input_frame</name></expr></argument>, <argument><expr><name>output_frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>vpp_ctx</name><operator>-&gt;</operator><name>nb_filter_buffers</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>params</name><operator>.</operator><name>filters</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>vpp_ctx</name><operator>-&gt;</operator><name>filter_buffers</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>params</name><operator>.</operator><name>num_filters</name></name> <operator>=</operator> <name><name>vpp_ctx</name><operator>-&gt;</operator><name>nb_filter_buffers</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>ff_vaapi_vpp_render_picture</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>params</name></expr></argument>, <argument><expr><name>output_frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>input_frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Filter output: %s, %ux%u (%"</literal><name>PRId64</name><literal type="string">").\n"</literal></expr></argument>,

<argument><expr><call><name>av_get_pix_fmt_name</name><argument_list>(<argument><expr><name><name>output_frame</name><operator>-&gt;</operator><name>format</name></name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name><name>output_frame</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>output_frame</name><operator>-&gt;</operator><name>height</name></name></expr></argument>, <argument><expr><name><name>output_frame</name><operator>-&gt;</operator><name>pts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>ff_filter_frame</name><argument_list>(<argument><expr><name>outlink</name></expr></argument>, <argument><expr><name>output_frame</name></expr></argument>)</argument_list></call></expr>;</return>

<label><name>fail</name>:</label>

<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>input_frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>output_frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>err</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>denoise_vaapi_init</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VAAPIVPPContext</name> <modifier>*</modifier></type><name>vpp_ctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ff_vaapi_vpp_ctx_init</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vpp_ctx</name><operator>-&gt;</operator><name>pipeline_uninit</name></name> <operator>=</operator> <name>ff_vaapi_vpp_pipeline_uninit</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vpp_ctx</name><operator>-&gt;</operator><name>build_filter_params</name></name> <operator>=</operator> <name>denoise_vaapi_build_filter_params</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vpp_ctx</name><operator>-&gt;</operator><name>output_format</name></name> <operator>=</operator> <name>AV_PIX_FMT_NONE</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>sharpness_vaapi_init</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VAAPIVPPContext</name> <modifier>*</modifier></type><name>vpp_ctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ff_vaapi_vpp_ctx_init</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vpp_ctx</name><operator>-&gt;</operator><name>pipeline_uninit</name></name> <operator>=</operator> <name>ff_vaapi_vpp_pipeline_uninit</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vpp_ctx</name><operator>-&gt;</operator><name>build_filter_params</name></name> <operator>=</operator> <name>sharpness_vaapi_build_filter_params</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vpp_ctx</name><operator>-&gt;</operator><name>output_format</name></name> <operator>=</operator> <name>AV_PIX_FMT_NONE</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DOFFSET</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>offsetof(DenoiseVAAPIContext, x)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLAGS</name></cpp:macro> <cpp:value>(AV_OPT_FLAG_VIDEO_PARAM | AV_OPT_FLAG_FILTERING_PARAM)</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVOption</name></type> <name><name>denoise_vaapi_options</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><literal type="string">"denoise"</literal></expr>, <expr><literal type="string">"denoise level"</literal></expr>,

<expr><call><name>DOFFSET</name><argument_list>(<argument><expr><name>denoise</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>DENOISE_DEFAULT</name></expr> }</block></expr>, <expr><name>DENOISE_MIN</name></expr>, <expr><name>DENOISE_MAX</name></expr>, <expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>FLAGS</name></expr> }</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>,

}</block></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SOFFSET</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>offsetof(SharpnessVAAPIContext, x)</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVOption</name></type> <name><name>sharpness_vaapi_options</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><literal type="string">"sharpness"</literal></expr>, <expr><literal type="string">"sharpness level"</literal></expr>,

<expr><call><name>SOFFSET</name><argument_list>(<argument><expr><name>sharpness</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>SHARPNESS_DEFAULT</name></expr> }</block></expr>, <expr><name>SHARPNESS_MIN</name></expr>, <expr><name>SHARPNESS_MAX</name></expr>, <expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>FLAGS</name></expr> }</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>,

}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>AVFILTER_DEFINE_CLASS</name><argument_list>(<argument><expr><name>denoise_vaapi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AVFILTER_DEFINE_CLASS</name><argument_list>(<argument><expr><name>sharpness_vaapi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVFilterPad</name></type> <name><name>misc_vaapi_inputs</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"default"</literal></expr>,

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,

<expr><operator>.</operator><name>filter_frame</name> <operator>=</operator> <operator>&amp;</operator><name>misc_vaapi_filter_frame</name></expr>,

<expr><operator>.</operator><name>config_props</name> <operator>=</operator> <operator>&amp;</operator><name>ff_vaapi_vpp_config_input</name></expr>,

}</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVFilterPad</name></type> <name><name>misc_vaapi_outputs</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"default"</literal></expr>,

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,

<expr><operator>.</operator><name>config_props</name> <operator>=</operator> <operator>&amp;</operator><name>ff_vaapi_vpp_config_output</name></expr>,

}</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFilter</name></type> <name>ff_vf_denoise_vaapi</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"denoise_vaapi"</literal></expr>,

<expr><operator>.</operator><name>description</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"VAAPI VPP for de-noise"</literal></expr></argument>)</argument_list></call></expr>,

<expr><operator>.</operator><name>priv_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>DenoiseVAAPIContext</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><operator>.</operator><name>init</name> <operator>=</operator> <operator>&amp;</operator><name>denoise_vaapi_init</name></expr>,

<expr><operator>.</operator><name>uninit</name> <operator>=</operator> <operator>&amp;</operator><name>ff_vaapi_vpp_ctx_uninit</name></expr>,

<expr><operator>.</operator><name>query_formats</name> <operator>=</operator> <operator>&amp;</operator><name>ff_vaapi_vpp_query_formats</name></expr>,

<expr><operator>.</operator><name>inputs</name> <operator>=</operator> <name>misc_vaapi_inputs</name></expr>,

<expr><operator>.</operator><name>outputs</name> <operator>=</operator> <name>misc_vaapi_outputs</name></expr>,

<expr><operator>.</operator><name>priv_class</name> <operator>=</operator> <operator>&amp;</operator><name>denoise_vaapi_class</name></expr>,

<expr><operator>.</operator><name>flags_internal</name> <operator>=</operator> <name>FF_FILTER_FLAG_HWFRAME_AWARE</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFilter</name></type> <name>ff_vf_sharpness_vaapi</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"sharpness_vaapi"</literal></expr>,

<expr><operator>.</operator><name>description</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"VAAPI VPP for sharpness"</literal></expr></argument>)</argument_list></call></expr>,

<expr><operator>.</operator><name>priv_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SharpnessVAAPIContext</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><operator>.</operator><name>init</name> <operator>=</operator> <operator>&amp;</operator><name>sharpness_vaapi_init</name></expr>,

<expr><operator>.</operator><name>uninit</name> <operator>=</operator> <operator>&amp;</operator><name>ff_vaapi_vpp_ctx_uninit</name></expr>,

<expr><operator>.</operator><name>query_formats</name> <operator>=</operator> <operator>&amp;</operator><name>ff_vaapi_vpp_query_formats</name></expr>,

<expr><operator>.</operator><name>inputs</name> <operator>=</operator> <name>misc_vaapi_inputs</name></expr>,

<expr><operator>.</operator><name>outputs</name> <operator>=</operator> <name>misc_vaapi_outputs</name></expr>,

<expr><operator>.</operator><name>priv_class</name> <operator>=</operator> <operator>&amp;</operator><name>sharpness_vaapi_class</name></expr>,

<expr><operator>.</operator><name>flags_internal</name> <operator>=</operator> <name>FF_FILTER_FLAG_HWFRAME_AWARE</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

</unit>
