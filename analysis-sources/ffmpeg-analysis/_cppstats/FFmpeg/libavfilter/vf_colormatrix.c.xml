<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavfilter\vf_colormatrix.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;float.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avfilter.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"formats.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"video.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/opt.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/pixdesc.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avstring.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NS</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((n) &lt; 0 ? (int)((n)*65536.0-0.5+DBL_EPSILON) : (int)((n)*65536.0+0.5))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CB</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>av_clip_uint8(n)</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>double</name></type> <name><name>yuv_coeff_luma</name><index>[<expr><literal type="number">5</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><operator>+</operator><literal type="number">0.7152</literal></expr>, <expr><operator>+</operator><literal type="number">0.0722</literal></expr>, <expr><operator>+</operator><literal type="number">0.2126</literal></expr> }</block></expr>, 

<expr><block>{ <expr><operator>+</operator><literal type="number">0.5900</literal></expr>, <expr><operator>+</operator><literal type="number">0.1100</literal></expr>, <expr><operator>+</operator><literal type="number">0.3000</literal></expr> }</block></expr>, 

<expr><block>{ <expr><operator>+</operator><literal type="number">0.5870</literal></expr>, <expr><operator>+</operator><literal type="number">0.1140</literal></expr>, <expr><operator>+</operator><literal type="number">0.2990</literal></expr> }</block></expr>, 

<expr><block>{ <expr><operator>+</operator><literal type="number">0.7010</literal></expr>, <expr><operator>+</operator><literal type="number">0.0870</literal></expr>, <expr><operator>+</operator><literal type="number">0.2120</literal></expr> }</block></expr>, 

<expr><block>{ <expr><operator>+</operator><literal type="number">0.6780</literal></expr>, <expr><operator>+</operator><literal type="number">0.0593</literal></expr>, <expr><operator>+</operator><literal type="number">0.2627</literal></expr> }</block></expr>, 

}</block></expr></init></decl>;</decl_stmt>

<enum>enum <name>ColorMode</name> <block>{

<decl><name>COLOR_MODE_NONE</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>,

<decl><name>COLOR_MODE_BT709</name></decl>,

<decl><name>COLOR_MODE_FCC</name></decl>,

<decl><name>COLOR_MODE_BT601</name></decl>,

<decl><name>COLOR_MODE_SMPTE240M</name></decl>,

<decl><name>COLOR_MODE_BT2020</name></decl>,

<decl><name>COLOR_MODE_COUNT</name></decl>

}</block>;</enum>

<typedef>typedef <type><struct>struct <name>ColorMatrixContext</name> <block>{

<decl_stmt><decl><type><specifier>const</specifier> <name>AVClass</name> <modifier>*</modifier></type><name>class</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>yuv_convert</name><index>[<expr><literal type="number">25</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>interlaced</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>source</name></decl>, <name>dest</name>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>mode</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>hsub</name></decl>, <name>vsub</name>;</decl_stmt>

}</block></struct></type> <name>ColorMatrixContext</name>;</typedef>

<typedef>typedef <type><struct>struct <name>ThreadData</name> <block>{

<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>dst</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>AVFrame</name> <modifier>*</modifier></type><name>src</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>c2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>c3</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>c4</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>c5</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>c6</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>c7</name></decl>;</decl_stmt>

}</block></struct></type> <name>ThreadData</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OFFSET</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>offsetof(ColorMatrixContext, x)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLAGS</name></cpp:macro> <cpp:value>AV_OPT_FLAG_VIDEO_PARAM|AV_OPT_FLAG_FILTERING_PARAM</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVOption</name></type> <name><name>colormatrix_options</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><literal type="string">"src"</literal></expr>, <expr><literal type="string">"set source color matrix"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>source</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>COLOR_MODE_NONE</name></expr>}</block></expr>, <expr><name>COLOR_MODE_NONE</name></expr>, <expr><name>COLOR_MODE_COUNT</name><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>.</operator><name>flags</name><operator>=</operator><name>FLAGS</name></expr>, <expr><operator>.</operator><name>unit</name><operator>=</operator><literal type="string">"color_mode"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"dst"</literal></expr>, <expr><literal type="string">"set destination color matrix"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>dest</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>COLOR_MODE_NONE</name></expr>}</block></expr>, <expr><name>COLOR_MODE_NONE</name></expr>, <expr><name>COLOR_MODE_COUNT</name><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>.</operator><name>flags</name><operator>=</operator><name>FLAGS</name></expr>, <expr><operator>.</operator><name>unit</name><operator>=</operator><literal type="string">"color_mode"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"bt709"</literal></expr>, <expr><literal type="string">"set BT.709 colorspace"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>COLOR_MODE_BT709</name></expr>}</block></expr>, <expr><operator>.</operator><name>flags</name><operator>=</operator><name>FLAGS</name></expr>, <expr><operator>.</operator><name>unit</name><operator>=</operator><literal type="string">"color_mode"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"fcc"</literal></expr>, <expr><literal type="string">"set FCC colorspace "</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>COLOR_MODE_FCC</name></expr>}</block></expr>, <expr><operator>.</operator><name>flags</name><operator>=</operator><name>FLAGS</name></expr>, <expr><operator>.</operator><name>unit</name><operator>=</operator><literal type="string">"color_mode"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"bt601"</literal></expr>, <expr><literal type="string">"set BT.601 colorspace"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>COLOR_MODE_BT601</name></expr>}</block></expr>, <expr><operator>.</operator><name>flags</name><operator>=</operator><name>FLAGS</name></expr>, <expr><operator>.</operator><name>unit</name><operator>=</operator><literal type="string">"color_mode"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"bt470"</literal></expr>, <expr><literal type="string">"set BT.470 colorspace"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>COLOR_MODE_BT601</name></expr>}</block></expr>, <expr><operator>.</operator><name>flags</name><operator>=</operator><name>FLAGS</name></expr>, <expr><operator>.</operator><name>unit</name><operator>=</operator><literal type="string">"color_mode"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"bt470bg"</literal></expr>, <expr><literal type="string">"set BT.470 colorspace"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>COLOR_MODE_BT601</name></expr>}</block></expr>, <expr><operator>.</operator><name>flags</name><operator>=</operator><name>FLAGS</name></expr>, <expr><operator>.</operator><name>unit</name><operator>=</operator><literal type="string">"color_mode"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"smpte170m"</literal></expr>, <expr><literal type="string">"set SMTPE-170M colorspace"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>COLOR_MODE_BT601</name></expr>}</block></expr>, <expr><operator>.</operator><name>flags</name><operator>=</operator><name>FLAGS</name></expr>, <expr><operator>.</operator><name>unit</name><operator>=</operator><literal type="string">"color_mode"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"smpte240m"</literal></expr>, <expr><literal type="string">"set SMPTE-240M colorspace"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>COLOR_MODE_SMPTE240M</name></expr>}</block></expr>, <expr><operator>.</operator><name>flags</name><operator>=</operator><name>FLAGS</name></expr>, <expr><operator>.</operator><name>unit</name><operator>=</operator><literal type="string">"color_mode"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"bt2020"</literal></expr>, <expr><literal type="string">"set BT.2020 colorspace"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>COLOR_MODE_BT2020</name></expr>}</block></expr>, <expr><operator>.</operator><name>flags</name><operator>=</operator><name>FLAGS</name></expr>, <expr><operator>.</operator><name>unit</name><operator>=</operator><literal type="string">"color_mode"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>AVFILTER_DEFINE_CLASS</name><argument_list>(<argument><expr><name>colormatrix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ma</name></cpp:macro> <cpp:value>m[0][0]</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mb</name></cpp:macro> <cpp:value>m[0][1]</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mc</name></cpp:macro> <cpp:value>m[0][2]</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>md</name></cpp:macro> <cpp:value>m[1][0]</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>me</name></cpp:macro> <cpp:value>m[1][1]</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mf</name></cpp:macro> <cpp:value>m[1][2]</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mg</name></cpp:macro> <cpp:value>m[2][0]</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mh</name></cpp:macro> <cpp:value>m[2][1]</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mi</name></cpp:macro> <cpp:value>m[2][2]</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ima</name></cpp:macro> <cpp:value>im[0][0]</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>imb</name></cpp:macro> <cpp:value>im[0][1]</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>imc</name></cpp:macro> <cpp:value>im[0][2]</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>imd</name></cpp:macro> <cpp:value>im[1][0]</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ime</name></cpp:macro> <cpp:value>im[1][1]</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>imf</name></cpp:macro> <cpp:value>im[1][2]</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>img</name></cpp:macro> <cpp:value>im[2][0]</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>imh</name></cpp:macro> <cpp:value>im[2][1]</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>imi</name></cpp:macro> <cpp:value>im[2][2]</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type> <name>inverse3x3</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name><name>im</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name><name>m</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>double</name></type> <name>det</name> <init>= <expr><name>ma</name> <operator>*</operator> <operator>(</operator><name>me</name> <operator>*</operator> <name>mi</name> <operator>-</operator> <name>mf</name> <operator>*</operator> <name>mh</name><operator>)</operator> <operator>-</operator> <name>mb</name> <operator>*</operator> <operator>(</operator><name>md</name> <operator>*</operator> <name>mi</name> <operator>-</operator> <name>mf</name> <operator>*</operator> <name>mg</name><operator>)</operator> <operator>+</operator> <name>mc</name> <operator>*</operator> <operator>(</operator><name>md</name> <operator>*</operator> <name>mh</name> <operator>-</operator> <name>me</name> <operator>*</operator> <name>mg</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>det</name> <operator>=</operator> <literal type="number">1.0</literal> <operator>/</operator> <name>det</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ima</name> <operator>=</operator> <name>det</name> <operator>*</operator> <operator>(</operator><name>me</name> <operator>*</operator> <name>mi</name> <operator>-</operator> <name>mf</name> <operator>*</operator> <name>mh</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>imb</name> <operator>=</operator> <name>det</name> <operator>*</operator> <operator>(</operator><name>mc</name> <operator>*</operator> <name>mh</name> <operator>-</operator> <name>mb</name> <operator>*</operator> <name>mi</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>imc</name> <operator>=</operator> <name>det</name> <operator>*</operator> <operator>(</operator><name>mb</name> <operator>*</operator> <name>mf</name> <operator>-</operator> <name>mc</name> <operator>*</operator> <name>me</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>imd</name> <operator>=</operator> <name>det</name> <operator>*</operator> <operator>(</operator><name>mf</name> <operator>*</operator> <name>mg</name> <operator>-</operator> <name>md</name> <operator>*</operator> <name>mi</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>ime</name> <operator>=</operator> <name>det</name> <operator>*</operator> <operator>(</operator><name>ma</name> <operator>*</operator> <name>mi</name> <operator>-</operator> <name>mc</name> <operator>*</operator> <name>mg</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>imf</name> <operator>=</operator> <name>det</name> <operator>*</operator> <operator>(</operator><name>mc</name> <operator>*</operator> <name>md</name> <operator>-</operator> <name>ma</name> <operator>*</operator> <name>mf</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>img</name> <operator>=</operator> <name>det</name> <operator>*</operator> <operator>(</operator><name>md</name> <operator>*</operator> <name>mh</name> <operator>-</operator> <name>me</name> <operator>*</operator> <name>mg</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>imh</name> <operator>=</operator> <name>det</name> <operator>*</operator> <operator>(</operator><name>mb</name> <operator>*</operator> <name>mg</name> <operator>-</operator> <name>ma</name> <operator>*</operator> <name>mh</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>imi</name> <operator>=</operator> <name>det</name> <operator>*</operator> <operator>(</operator><name>ma</name> <operator>*</operator> <name>me</name> <operator>-</operator> <name>mb</name> <operator>*</operator> <name>md</name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>solve_coefficients</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name><name>cm</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name><name>rgb</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name><name>yuv</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>cm</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>yuv</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name><name>rgb</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>+</operator> <name><name>yuv</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name><name>rgb</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>+</operator> <name><name>yuv</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>*</operator> <name><name>rgb</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for></block_content></block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>calc_coefficients</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ColorMatrixContext</name> <modifier>*</modifier></type><name>color</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name><name>yuv_coeff</name><index>[<expr><literal type="number">5</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name><name>rgb_coeffd</name><index>[<expr><literal type="number">5</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name><name>yuv_convertd</name><index>[<expr><literal type="number">25</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>bscale</name></decl>, <decl><type ref="prev"/><name>rscale</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>v</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">5</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>yuv_coeff</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>yuv_coeff_luma</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>yuv_coeff</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>yuv_coeff_luma</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>yuv_coeff</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>yuv_coeff_luma</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>bscale</name> <operator>=</operator> <literal type="number">0.5</literal> <operator>/</operator> <operator>(</operator><name><name>yuv_coeff</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <literal type="number">1.0</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>rscale</name> <operator>=</operator> <literal type="number">0.5</literal> <operator>/</operator> <operator>(</operator><name><name>yuv_coeff</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>-</operator> <literal type="number">1.0</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>yuv_coeff</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>bscale</name> <operator>*</operator> <name><name>yuv_coeff</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>yuv_coeff</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0.5</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>yuv_coeff</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>bscale</name> <operator>*</operator> <name><name>yuv_coeff</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>yuv_coeff</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>rscale</name> <operator>*</operator> <name><name>yuv_coeff</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>yuv_coeff</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>rscale</name> <operator>*</operator> <name><name>yuv_coeff</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>yuv_coeff</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0.5</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">5</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>inverse3x3</name><argument_list>(<argument><expr><name><name>rgb_coeffd</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>yuv_coeff</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">5</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">5</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>solve_coefficients</name><argument_list>(<argument><expr><name><name>yuv_convertd</name><index>[<expr><name>v</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>rgb_coeffd</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>yuv_coeff</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>color</name><operator>-&gt;</operator><name>yuv_convert</name><index>[<expr><name>v</name></expr>]</index><index>[<expr><name>k</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>NS</name><argument_list>(<argument><expr><name><name>yuv_convertd</name><index>[<expr><name>v</name></expr>]</index><index>[<expr><name>k</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>color</name><operator>-&gt;</operator><name>yuv_convert</name><index>[<expr><name>v</name></expr>]</index><index>[<expr><name>k</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>NS</name><argument_list>(<argument><expr><name><name>yuv_convertd</name><index>[<expr><name>v</name></expr>]</index><index>[<expr><name>k</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>color</name><operator>-&gt;</operator><name>yuv_convert</name><index>[<expr><name>v</name></expr>]</index><index>[<expr><name>k</name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>NS</name><argument_list>(<argument><expr><name><name>yuv_convertd</name><index>[<expr><name>v</name></expr>]</index><index>[<expr><name>k</name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>color</name><operator>-&gt;</operator><name>yuv_convert</name><index>[<expr><name>v</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">65536</literal> <operator>||</operator> <name><name>color</name><operator>-&gt;</operator><name>yuv_convert</name><index>[<expr><name>v</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator>

<name><name>color</name><operator>-&gt;</operator><name>yuv_convert</name><index>[<expr><name>v</name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"error calculating conversion coefficients\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>v</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier> <specifier>const</specifier></type> <name><name>color_modes</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="string">"bt709"</literal></expr>, <expr><literal type="string">"fcc"</literal></expr>, <expr><literal type="string">"bt601"</literal></expr>, <expr><literal type="string">"smpte240m"</literal></expr>, <expr><literal type="string">"bt2020"</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>init</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ColorMatrixContext</name> <modifier>*</modifier></type><name>color</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>color</name><operator>-&gt;</operator><name>dest</name></name> <operator>==</operator> <name>COLOR_MODE_NONE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Unspecified destination color space\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>color</name><operator>-&gt;</operator><name>source</name></name> <operator>==</operator> <name><name>color</name><operator>-&gt;</operator><name>dest</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Source and destination color space must not be identical\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>calc_coefficients</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>process_slice_uyvy422</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>jobnr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nb_jobs</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>ThreadData</name> <modifier>*</modifier></type><name>td</name> <init>= <expr><name>arg</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>AVFrame</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><name><name>td</name><operator>-&gt;</operator><name>src</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><name><name>td</name><operator>-&gt;</operator><name>dst</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>height</name> <init>= <expr><name><name>src</name><operator>-&gt;</operator><name>height</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>width</name> <init>= <expr><name><name>src</name><operator>-&gt;</operator><name>width</name></name><operator>*</operator><literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>src_pitch</name> <init>= <expr><name><name>src</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>dst_pitch</name> <init>= <expr><name><name>dst</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>slice_start</name> <init>= <expr><operator>(</operator><name>height</name> <operator>*</operator> <name>jobnr</name> <operator>)</operator> <operator>/</operator> <name>nb_jobs</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>slice_end</name> <init>= <expr><operator>(</operator><name>height</name> <operator>*</operator> <operator>(</operator><name>jobnr</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>/</operator> <name>nb_jobs</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>srcp</name> <init>= <expr><name><name>src</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>slice_start</name> <operator>*</operator> <name>src_pitch</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>dstp</name> <init>= <expr><name><name>dst</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>slice_start</name> <operator>*</operator> <name>dst_pitch</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>c2</name> <init>= <expr><name><name>td</name><operator>-&gt;</operator><name>c2</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>c3</name> <init>= <expr><name><name>td</name><operator>-&gt;</operator><name>c3</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>c4</name> <init>= <expr><name><name>td</name><operator>-&gt;</operator><name>c4</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>c5</name> <init>= <expr><name><name>td</name><operator>-&gt;</operator><name>c5</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>c6</name> <init>= <expr><name><name>td</name><operator>-&gt;</operator><name>c6</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>c7</name> <init>= <expr><name><name>td</name><operator>-&gt;</operator><name>c7</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <name>slice_start</name></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>slice_end</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>x</name> <operator>+=</operator> <literal type="number">4</literal></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>u</name> <init>= <expr><name><name>srcp</name><index>[<expr><name>x</name> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <literal type="number">128</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>v</name> <init>= <expr><name><name>srcp</name><index>[<expr><name>x</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>-</operator> <literal type="number">128</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>uvval</name> <init>= <expr><name>c2</name> <operator>*</operator> <name>u</name> <operator>+</operator> <name>c3</name> <operator>*</operator> <name>v</name> <operator>+</operator> <literal type="number">1081344</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>dstp</name><index>[<expr><name>x</name> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>CB</name><argument_list>(<argument><expr><operator>(</operator><name>c4</name> <operator>*</operator> <name>u</name> <operator>+</operator> <name>c5</name> <operator>*</operator> <name>v</name> <operator>+</operator> <literal type="number">8421376</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dstp</name><index>[<expr><name>x</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>CB</name><argument_list>(<argument><expr><operator>(</operator><literal type="number">65536</literal> <operator>*</operator> <operator>(</operator><name><name>srcp</name><index>[<expr><name>x</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <literal type="number">16</literal><operator>)</operator> <operator>+</operator> <name>uvval</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dstp</name><index>[<expr><name>x</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>CB</name><argument_list>(<argument><expr><operator>(</operator><name>c6</name> <operator>*</operator> <name>u</name> <operator>+</operator> <name>c7</name> <operator>*</operator> <name>v</name> <operator>+</operator> <literal type="number">8421376</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dstp</name><index>[<expr><name>x</name> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <call><name>CB</name><argument_list>(<argument><expr><operator>(</operator><literal type="number">65536</literal> <operator>*</operator> <operator>(</operator><name><name>srcp</name><index>[<expr><name>x</name> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name> <operator>-</operator> <literal type="number">16</literal><operator>)</operator> <operator>+</operator> <name>uvval</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>srcp</name> <operator>+=</operator> <name>src_pitch</name></expr>;</expr_stmt>

<expr_stmt><expr><name>dstp</name> <operator>+=</operator> <name>dst_pitch</name></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>process_slice_yuv444p</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>jobnr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nb_jobs</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>ThreadData</name> <modifier>*</modifier></type><name>td</name> <init>= <expr><name>arg</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>AVFrame</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><name><name>td</name><operator>-&gt;</operator><name>src</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><name><name>td</name><operator>-&gt;</operator><name>dst</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>height</name> <init>= <expr><name><name>src</name><operator>-&gt;</operator><name>height</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>width</name> <init>= <expr><name><name>src</name><operator>-&gt;</operator><name>width</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>slice_start</name> <init>= <expr><operator>(</operator><name>height</name> <operator>*</operator> <name>jobnr</name> <operator>)</operator> <operator>/</operator> <name>nb_jobs</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>slice_end</name> <init>= <expr><operator>(</operator><name>height</name> <operator>*</operator> <operator>(</operator><name>jobnr</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>/</operator> <name>nb_jobs</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>src_pitchY</name> <init>= <expr><name><name>src</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>src_pitchUV</name> <init>= <expr><name><name>src</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>srcpU</name> <init>= <expr><name><name>src</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name>slice_start</name> <operator>*</operator> <name>src_pitchUV</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>srcpV</name> <init>= <expr><name><name>src</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <name>slice_start</name> <operator>*</operator> <name>src_pitchUV</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>srcpY</name> <init>= <expr><name><name>src</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>slice_start</name> <operator>*</operator> <name>src_pitchY</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>dst_pitchY</name> <init>= <expr><name><name>dst</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>dst_pitchUV</name> <init>= <expr><name><name>dst</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>dstpU</name> <init>= <expr><name><name>dst</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name>slice_start</name> <operator>*</operator> <name>dst_pitchUV</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>dstpV</name> <init>= <expr><name><name>dst</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <name>slice_start</name> <operator>*</operator> <name>dst_pitchUV</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>dstpY</name> <init>= <expr><name><name>dst</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>slice_start</name> <operator>*</operator> <name>dst_pitchY</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>c2</name> <init>= <expr><name><name>td</name><operator>-&gt;</operator><name>c2</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>c3</name> <init>= <expr><name><name>td</name><operator>-&gt;</operator><name>c3</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>c4</name> <init>= <expr><name><name>td</name><operator>-&gt;</operator><name>c4</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>c5</name> <init>= <expr><name><name>td</name><operator>-&gt;</operator><name>c5</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>c6</name> <init>= <expr><name><name>td</name><operator>-&gt;</operator><name>c6</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>c7</name> <init>= <expr><name><name>td</name><operator>-&gt;</operator><name>c7</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <name>slice_start</name></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>slice_end</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>u</name> <init>= <expr><name><name>srcpU</name><index>[<expr><name>x</name></expr>]</index></name> <operator>-</operator> <literal type="number">128</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>v</name> <init>= <expr><name><name>srcpV</name><index>[<expr><name>x</name></expr>]</index></name> <operator>-</operator> <literal type="number">128</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>uvval</name> <init>= <expr><name>c2</name> <operator>*</operator> <name>u</name> <operator>+</operator> <name>c3</name> <operator>*</operator> <name>v</name> <operator>+</operator> <literal type="number">1081344</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>dstpY</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <call><name>CB</name><argument_list>(<argument><expr><operator>(</operator><literal type="number">65536</literal> <operator>*</operator> <operator>(</operator><name><name>srcpY</name><index>[<expr><name>x</name></expr>]</index></name> <operator>-</operator> <literal type="number">16</literal><operator>)</operator> <operator>+</operator> <name>uvval</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dstpU</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <call><name>CB</name><argument_list>(<argument><expr><operator>(</operator><name>c4</name> <operator>*</operator> <name>u</name> <operator>+</operator> <name>c5</name> <operator>*</operator> <name>v</name> <operator>+</operator> <literal type="number">8421376</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dstpV</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <call><name>CB</name><argument_list>(<argument><expr><operator>(</operator><name>c6</name> <operator>*</operator> <name>u</name> <operator>+</operator> <name>c7</name> <operator>*</operator> <name>v</name> <operator>+</operator> <literal type="number">8421376</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>srcpY</name> <operator>+=</operator> <name>src_pitchY</name></expr>;</expr_stmt>

<expr_stmt><expr><name>dstpY</name> <operator>+=</operator> <name>dst_pitchY</name></expr>;</expr_stmt>

<expr_stmt><expr><name>srcpU</name> <operator>+=</operator> <name>src_pitchUV</name></expr>;</expr_stmt>

<expr_stmt><expr><name>srcpV</name> <operator>+=</operator> <name>src_pitchUV</name></expr>;</expr_stmt>

<expr_stmt><expr><name>dstpU</name> <operator>+=</operator> <name>dst_pitchUV</name></expr>;</expr_stmt>

<expr_stmt><expr><name>dstpV</name> <operator>+=</operator> <name>dst_pitchUV</name></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>process_slice_yuv422p</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>jobnr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nb_jobs</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>ThreadData</name> <modifier>*</modifier></type><name>td</name> <init>= <expr><name>arg</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>AVFrame</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><name><name>td</name><operator>-&gt;</operator><name>src</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><name><name>td</name><operator>-&gt;</operator><name>dst</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>height</name> <init>= <expr><name><name>src</name><operator>-&gt;</operator><name>height</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>width</name> <init>= <expr><name><name>src</name><operator>-&gt;</operator><name>width</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>slice_start</name> <init>= <expr><operator>(</operator><name>height</name> <operator>*</operator> <name>jobnr</name> <operator>)</operator> <operator>/</operator> <name>nb_jobs</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>slice_end</name> <init>= <expr><operator>(</operator><name>height</name> <operator>*</operator> <operator>(</operator><name>jobnr</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>/</operator> <name>nb_jobs</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>src_pitchY</name> <init>= <expr><name><name>src</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>src_pitchUV</name> <init>= <expr><name><name>src</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>srcpU</name> <init>= <expr><name><name>src</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name>slice_start</name> <operator>*</operator> <name>src_pitchUV</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>srcpV</name> <init>= <expr><name><name>src</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <name>slice_start</name> <operator>*</operator> <name>src_pitchUV</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>srcpY</name> <init>= <expr><name><name>src</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>slice_start</name> <operator>*</operator> <name>src_pitchY</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>dst_pitchY</name> <init>= <expr><name><name>dst</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>dst_pitchUV</name> <init>= <expr><name><name>dst</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>dstpU</name> <init>= <expr><name><name>dst</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name>slice_start</name> <operator>*</operator> <name>dst_pitchUV</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>dstpV</name> <init>= <expr><name><name>dst</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <name>slice_start</name> <operator>*</operator> <name>dst_pitchUV</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>dstpY</name> <init>= <expr><name><name>dst</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>slice_start</name> <operator>*</operator> <name>dst_pitchY</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>c2</name> <init>= <expr><name><name>td</name><operator>-&gt;</operator><name>c2</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>c3</name> <init>= <expr><name><name>td</name><operator>-&gt;</operator><name>c3</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>c4</name> <init>= <expr><name><name>td</name><operator>-&gt;</operator><name>c4</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>c5</name> <init>= <expr><name><name>td</name><operator>-&gt;</operator><name>c5</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>c6</name> <init>= <expr><name><name>td</name><operator>-&gt;</operator><name>c6</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>c7</name> <init>= <expr><name><name>td</name><operator>-&gt;</operator><name>c7</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <name>slice_start</name></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>slice_end</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>x</name> <operator>+=</operator> <literal type="number">2</literal></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>u</name> <init>= <expr><name><name>srcpU</name><index>[<expr><name>x</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <literal type="number">128</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>v</name> <init>= <expr><name><name>srcpV</name><index>[<expr><name>x</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <literal type="number">128</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>uvval</name> <init>= <expr><name>c2</name> <operator>*</operator> <name>u</name> <operator>+</operator> <name>c3</name> <operator>*</operator> <name>v</name> <operator>+</operator> <literal type="number">1081344</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>dstpY</name><index>[<expr><name>x</name> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>CB</name><argument_list>(<argument><expr><operator>(</operator><literal type="number">65536</literal> <operator>*</operator> <operator>(</operator><name><name>srcpY</name><index>[<expr><name>x</name> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <literal type="number">16</literal><operator>)</operator> <operator>+</operator> <name>uvval</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dstpY</name><index>[<expr><name>x</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>CB</name><argument_list>(<argument><expr><operator>(</operator><literal type="number">65536</literal> <operator>*</operator> <operator>(</operator><name><name>srcpY</name><index>[<expr><name>x</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <literal type="number">16</literal><operator>)</operator> <operator>+</operator> <name>uvval</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dstpU</name><index>[<expr><name>x</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>CB</name><argument_list>(<argument><expr><operator>(</operator><name>c4</name> <operator>*</operator> <name>u</name> <operator>+</operator> <name>c5</name> <operator>*</operator> <name>v</name> <operator>+</operator> <literal type="number">8421376</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dstpV</name><index>[<expr><name>x</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>CB</name><argument_list>(<argument><expr><operator>(</operator><name>c6</name> <operator>*</operator> <name>u</name> <operator>+</operator> <name>c7</name> <operator>*</operator> <name>v</name> <operator>+</operator> <literal type="number">8421376</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>srcpY</name> <operator>+=</operator> <name>src_pitchY</name></expr>;</expr_stmt>

<expr_stmt><expr><name>dstpY</name> <operator>+=</operator> <name>dst_pitchY</name></expr>;</expr_stmt>

<expr_stmt><expr><name>srcpU</name> <operator>+=</operator> <name>src_pitchUV</name></expr>;</expr_stmt>

<expr_stmt><expr><name>srcpV</name> <operator>+=</operator> <name>src_pitchUV</name></expr>;</expr_stmt>

<expr_stmt><expr><name>dstpU</name> <operator>+=</operator> <name>dst_pitchUV</name></expr>;</expr_stmt>

<expr_stmt><expr><name>dstpV</name> <operator>+=</operator> <name>dst_pitchUV</name></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>process_slice_yuv420p</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>jobnr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nb_jobs</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>ThreadData</name> <modifier>*</modifier></type><name>td</name> <init>= <expr><name>arg</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>AVFrame</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><name><name>td</name><operator>-&gt;</operator><name>src</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><name><name>td</name><operator>-&gt;</operator><name>dst</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>height</name> <init>= <expr><call><name>FFALIGN</name><argument_list>(<argument><expr><name><name>src</name><operator>-&gt;</operator><name>height</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>width</name> <init>= <expr><name><name>src</name><operator>-&gt;</operator><name>width</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>slice_start</name> <init>= <expr><operator>(</operator><operator>(</operator><name>height</name> <operator>*</operator> <name>jobnr</name> <operator>)</operator> <operator>/</operator> <name>nb_jobs</name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>slice_end</name> <init>= <expr><operator>(</operator><operator>(</operator><name>height</name> <operator>*</operator> <operator>(</operator><name>jobnr</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>/</operator> <name>nb_jobs</name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>src_pitchY</name> <init>= <expr><name><name>src</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>src_pitchUV</name> <init>= <expr><name><name>src</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>dst_pitchY</name> <init>= <expr><name><name>dst</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>dst_pitchUV</name> <init>= <expr><name><name>dst</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>srcpY</name> <init>= <expr><name><name>src</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>src_pitchY</name> <operator>*</operator> <name>slice_start</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>srcpU</name> <init>= <expr><name><name>src</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name>src_pitchUV</name> <operator>*</operator> <operator>(</operator><name>slice_start</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>srcpV</name> <init>= <expr><name><name>src</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <name>src_pitchUV</name> <operator>*</operator> <operator>(</operator><name>slice_start</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>srcpN</name> <init>= <expr><name><name>src</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>src_pitchY</name> <operator>*</operator> <operator>(</operator><name>slice_start</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>dstpU</name> <init>= <expr><name><name>dst</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name>dst_pitchUV</name> <operator>*</operator> <operator>(</operator><name>slice_start</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>dstpV</name> <init>= <expr><name><name>dst</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <name>dst_pitchUV</name> <operator>*</operator> <operator>(</operator><name>slice_start</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>dstpY</name> <init>= <expr><name><name>dst</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>dst_pitchY</name> <operator>*</operator> <name>slice_start</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>dstpN</name> <init>= <expr><name><name>dst</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>dst_pitchY</name> <operator>*</operator> <operator>(</operator><name>slice_start</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>c2</name> <init>= <expr><name><name>td</name><operator>-&gt;</operator><name>c2</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>c3</name> <init>= <expr><name><name>td</name><operator>-&gt;</operator><name>c3</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>c4</name> <init>= <expr><name><name>td</name><operator>-&gt;</operator><name>c4</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>c5</name> <init>= <expr><name><name>td</name><operator>-&gt;</operator><name>c5</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>c6</name> <init>= <expr><name><name>td</name><operator>-&gt;</operator><name>c6</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>c7</name> <init>= <expr><name><name>td</name><operator>-&gt;</operator><name>c7</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <name>slice_start</name></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>slice_end</name></expr>;</condition> <incr><expr><name>y</name> <operator>+=</operator> <literal type="number">2</literal></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>x</name> <operator>+=</operator> <literal type="number">2</literal></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>u</name> <init>= <expr><name><name>srcpU</name><index>[<expr><name>x</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <literal type="number">128</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>v</name> <init>= <expr><name><name>srcpV</name><index>[<expr><name>x</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <literal type="number">128</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>uvval</name> <init>= <expr><name>c2</name> <operator>*</operator> <name>u</name> <operator>+</operator> <name>c3</name> <operator>*</operator> <name>v</name> <operator>+</operator> <literal type="number">1081344</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>dstpY</name><index>[<expr><name>x</name> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>CB</name><argument_list>(<argument><expr><operator>(</operator><literal type="number">65536</literal> <operator>*</operator> <operator>(</operator><name><name>srcpY</name><index>[<expr><name>x</name> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <literal type="number">16</literal><operator>)</operator> <operator>+</operator> <name>uvval</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dstpY</name><index>[<expr><name>x</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>CB</name><argument_list>(<argument><expr><operator>(</operator><literal type="number">65536</literal> <operator>*</operator> <operator>(</operator><name><name>srcpY</name><index>[<expr><name>x</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <literal type="number">16</literal><operator>)</operator> <operator>+</operator> <name>uvval</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dstpN</name><index>[<expr><name>x</name> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>CB</name><argument_list>(<argument><expr><operator>(</operator><literal type="number">65536</literal> <operator>*</operator> <operator>(</operator><name><name>srcpN</name><index>[<expr><name>x</name> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <literal type="number">16</literal><operator>)</operator> <operator>+</operator> <name>uvval</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dstpN</name><index>[<expr><name>x</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>CB</name><argument_list>(<argument><expr><operator>(</operator><literal type="number">65536</literal> <operator>*</operator> <operator>(</operator><name><name>srcpN</name><index>[<expr><name>x</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <literal type="number">16</literal><operator>)</operator> <operator>+</operator> <name>uvval</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dstpU</name><index>[<expr><name>x</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>CB</name><argument_list>(<argument><expr><operator>(</operator><name>c4</name> <operator>*</operator> <name>u</name> <operator>+</operator> <name>c5</name> <operator>*</operator> <name>v</name> <operator>+</operator> <literal type="number">8421376</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dstpV</name><index>[<expr><name>x</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>CB</name><argument_list>(<argument><expr><operator>(</operator><name>c6</name> <operator>*</operator> <name>u</name> <operator>+</operator> <name>c7</name> <operator>*</operator> <name>v</name> <operator>+</operator> <literal type="number">8421376</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>srcpY</name> <operator>+=</operator> <name>src_pitchY</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>dstpY</name> <operator>+=</operator> <name>dst_pitchY</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>srcpN</name> <operator>+=</operator> <name>src_pitchY</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>dstpN</name> <operator>+=</operator> <name>dst_pitchY</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>srcpU</name> <operator>+=</operator> <name>src_pitchUV</name></expr>;</expr_stmt>

<expr_stmt><expr><name>srcpV</name> <operator>+=</operator> <name>src_pitchUV</name></expr>;</expr_stmt>

<expr_stmt><expr><name>dstpU</name> <operator>+=</operator> <name>dst_pitchUV</name></expr>;</expr_stmt>

<expr_stmt><expr><name>dstpV</name> <operator>+=</operator> <name>dst_pitchUV</name></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>config_input</name><parameter_list>(<parameter><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>inlink</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>inlink</name><operator>-&gt;</operator><name>dst</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ColorMatrixContext</name> <modifier>*</modifier></type><name>color</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>AVPixFmtDescriptor</name> <modifier>*</modifier></type><name>pix_desc</name> <init>= <expr><call><name>av_pix_fmt_desc_get</name><argument_list>(<argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>format</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>color</name><operator>-&gt;</operator><name>hsub</name></name> <operator>=</operator> <name><name>pix_desc</name><operator>-&gt;</operator><name>log2_chroma_w</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>color</name><operator>-&gt;</operator><name>vsub</name></name> <operator>=</operator> <name><name>pix_desc</name><operator>-&gt;</operator><name>log2_chroma_h</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_VERBOSE</name></expr></argument>, <argument><expr><literal type="string">"%s -&gt; %s\n"</literal></expr></argument>,

<argument><expr><name><name>color_modes</name><index>[<expr><name><name>color</name><operator>-&gt;</operator><name>source</name></name></expr>]</index></name></expr></argument>, <argument><expr><name><name>color_modes</name><index>[<expr><name><name>color</name><operator>-&gt;</operator><name>dest</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>query_formats</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>enum</name> <name>AVPixelFormat</name></name></type> <name><name>pix_fmts</name><index>[]</index></name> <init>= <expr><block>{

<expr><name>AV_PIX_FMT_YUV444P</name></expr>,

<expr><name>AV_PIX_FMT_YUV422P</name></expr>,

<expr><name>AV_PIX_FMT_YUV420P</name></expr>,

<expr><name>AV_PIX_FMT_UYVY422</name></expr>,

<expr><name>AV_PIX_FMT_NONE</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFilterFormats</name> <modifier>*</modifier></type><name>fmts_list</name> <init>= <expr><call><name>ff_make_format_list</name><argument_list>(<argument><expr><name>pix_fmts</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>fmts_list</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>ff_set_common_formats</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>fmts_list</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>filter_frame</name><parameter_list>(<parameter><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>link</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>in</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>link</name><operator>-&gt;</operator><name>dst</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ColorMatrixContext</name> <modifier>*</modifier></type><name>color</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>outlink</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>outputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>out</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ThreadData</name></type> <name>td</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>out</name> <operator>=</operator> <call><name>ff_get_video_buffer</name><argument_list>(<argument><expr><name>outlink</name></expr></argument>, <argument><expr><name><name>outlink</name><operator>-&gt;</operator><name>w</name></name></expr></argument>, <argument><expr><name><name>outlink</name><operator>-&gt;</operator><name>h</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>out</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_frame_copy_props</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>color</name><operator>-&gt;</operator><name>source</name></name> <operator>==</operator> <name>COLOR_MODE_NONE</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name><name>enum</name> <name>AVColorSpace</name></name></type> <name>cs</name> <init>= <expr><name><name>in</name><operator>-&gt;</operator><name>colorspace</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>ColorMode</name></name></type> <name>source</name></decl>;</decl_stmt>

<switch>switch<condition>(<expr><name>cs</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>AVCOL_SPC_BT709</name></expr> :</case> <expr_stmt><expr><name>source</name> <operator>=</operator> <name>COLOR_MODE_BT709</name></expr> ;</expr_stmt> <break>break;</break>

<case>case <expr><name>AVCOL_SPC_FCC</name></expr> :</case> <expr_stmt><expr><name>source</name> <operator>=</operator> <name>COLOR_MODE_FCC</name></expr> ;</expr_stmt> <break>break;</break>

<case>case <expr><name>AVCOL_SPC_SMPTE240M</name></expr> :</case> <expr_stmt><expr><name>source</name> <operator>=</operator> <name>COLOR_MODE_SMPTE240M</name></expr> ;</expr_stmt> <break>break;</break>

<case>case <expr><name>AVCOL_SPC_BT470BG</name></expr> :</case> <expr_stmt><expr><name>source</name> <operator>=</operator> <name>COLOR_MODE_BT601</name></expr> ;</expr_stmt> <break>break;</break>

<case>case <expr><name>AVCOL_SPC_SMPTE170M</name></expr> :</case> <expr_stmt><expr><name>source</name> <operator>=</operator> <name>COLOR_MODE_BT601</name></expr> ;</expr_stmt> <break>break;</break>

<case>case <expr><name>AVCOL_SPC_BT2020_NCL</name></expr>:</case> <expr_stmt><expr><name>source</name> <operator>=</operator> <name>COLOR_MODE_BT2020</name></expr> ;</expr_stmt> <break>break;</break>

<case>case <expr><name>AVCOL_SPC_BT2020_CL</name></expr> :</case> <expr_stmt><expr><name>source</name> <operator>=</operator> <name>COLOR_MODE_BT2020</name></expr> ;</expr_stmt> <break>break;</break>

<default>default :</default>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Input frame does not specify a supported colorspace, and none has been specified as source either\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></switch>

<expr_stmt><expr><name><name>color</name><operator>-&gt;</operator><name>mode</name></name> <operator>=</operator> <name>source</name> <operator>*</operator> <literal type="number">5</literal> <operator>+</operator> <name><name>color</name><operator>-&gt;</operator><name>dest</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>color</name><operator>-&gt;</operator><name>mode</name></name> <operator>=</operator> <name><name>color</name><operator>-&gt;</operator><name>source</name></name> <operator>*</operator> <literal type="number">5</literal> <operator>+</operator> <name><name>color</name><operator>-&gt;</operator><name>dest</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<switch>switch<condition>(<expr><name><name>color</name><operator>-&gt;</operator><name>dest</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>COLOR_MODE_BT709</name></expr> :</case> <expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>colorspace</name></name> <operator>=</operator> <name>AVCOL_SPC_BT709</name></expr> ;</expr_stmt> <break>break;</break>

<case>case <expr><name>COLOR_MODE_FCC</name></expr> :</case> <expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>colorspace</name></name> <operator>=</operator> <name>AVCOL_SPC_FCC</name></expr> ;</expr_stmt> <break>break;</break>

<case>case <expr><name>COLOR_MODE_SMPTE240M</name></expr>:</case> <expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>colorspace</name></name> <operator>=</operator> <name>AVCOL_SPC_SMPTE240M</name></expr> ;</expr_stmt> <break>break;</break>

<case>case <expr><name>COLOR_MODE_BT601</name></expr> :</case> <expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>colorspace</name></name> <operator>=</operator> <name>AVCOL_SPC_BT470BG</name></expr> ;</expr_stmt> <break>break;</break>

<case>case <expr><name>COLOR_MODE_BT2020</name></expr> :</case> <expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>colorspace</name></name> <operator>=</operator> <name>AVCOL_SPC_BT2020_NCL</name></expr>;</expr_stmt> <break>break;</break>

</block_content>}</block></switch>

<expr_stmt><expr><name><name>td</name><operator>.</operator><name>src</name></name> <operator>=</operator> <name>in</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>td</name><operator>.</operator><name>dst</name></name> <operator>=</operator> <name>out</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>td</name><operator>.</operator><name>c2</name></name> <operator>=</operator> <name><name>color</name><operator>-&gt;</operator><name>yuv_convert</name><index>[<expr><name><name>color</name><operator>-&gt;</operator><name>mode</name></name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>td</name><operator>.</operator><name>c3</name></name> <operator>=</operator> <name><name>color</name><operator>-&gt;</operator><name>yuv_convert</name><index>[<expr><name><name>color</name><operator>-&gt;</operator><name>mode</name></name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>td</name><operator>.</operator><name>c4</name></name> <operator>=</operator> <name><name>color</name><operator>-&gt;</operator><name>yuv_convert</name><index>[<expr><name><name>color</name><operator>-&gt;</operator><name>mode</name></name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>td</name><operator>.</operator><name>c5</name></name> <operator>=</operator> <name><name>color</name><operator>-&gt;</operator><name>yuv_convert</name><index>[<expr><name><name>color</name><operator>-&gt;</operator><name>mode</name></name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>td</name><operator>.</operator><name>c6</name></name> <operator>=</operator> <name><name>color</name><operator>-&gt;</operator><name>yuv_convert</name><index>[<expr><name><name>color</name><operator>-&gt;</operator><name>mode</name></name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>td</name><operator>.</operator><name>c7</name></name> <operator>=</operator> <name><name>color</name><operator>-&gt;</operator><name>yuv_convert</name><index>[<expr><name><name>color</name><operator>-&gt;</operator><name>mode</name></name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>in</name><operator>-&gt;</operator><name>format</name></name> <operator>==</operator> <name>AV_PIX_FMT_YUV444P</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name><name>ctx</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>process_slice_yuv444p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>td</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,

<argument><expr><call><name>FFMIN</name><argument_list>(<argument><expr><name><name>in</name><operator>-&gt;</operator><name>height</name></name></expr></argument>, <argument><expr><call><name>ff_filter_get_nb_threads</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>in</name><operator>-&gt;</operator><name>format</name></name> <operator>==</operator> <name>AV_PIX_FMT_YUV422P</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name><name>ctx</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>process_slice_yuv422p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>td</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,

<argument><expr><call><name>FFMIN</name><argument_list>(<argument><expr><name><name>in</name><operator>-&gt;</operator><name>height</name></name></expr></argument>, <argument><expr><call><name>ff_filter_get_nb_threads</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>in</name><operator>-&gt;</operator><name>format</name></name> <operator>==</operator> <name>AV_PIX_FMT_YUV420P</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name><name>ctx</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>process_slice_yuv420p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>td</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,

<argument><expr><call><name>FFMIN</name><argument_list>(<argument><expr><name><name>in</name><operator>-&gt;</operator><name>height</name></name> <operator>/</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><call><name>ff_filter_get_nb_threads</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name><name>ctx</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>process_slice_uyvy422</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>td</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,

<argument><expr><call><name>FFMIN</name><argument_list>(<argument><expr><name><name>in</name><operator>-&gt;</operator><name>height</name></name></expr></argument>, <argument><expr><call><name>ff_filter_get_nb_threads</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>ff_filter_frame</name><argument_list>(<argument><expr><name>outlink</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVFilterPad</name></type> <name><name>colormatrix_inputs</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"default"</literal></expr>,

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,

<expr><operator>.</operator><name>config_props</name> <operator>=</operator> <name>config_input</name></expr>,

<expr><operator>.</operator><name>filter_frame</name> <operator>=</operator> <name>filter_frame</name></expr>,

}</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVFilterPad</name></type> <name><name>colormatrix_outputs</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"default"</literal></expr>,

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,

}</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFilter</name></type> <name>ff_vf_colormatrix</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"colormatrix"</literal></expr>,

<expr><operator>.</operator><name>description</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"Convert color matrix."</literal></expr></argument>)</argument_list></call></expr>,

<expr><operator>.</operator><name>priv_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>ColorMatrixContext</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>init</name></expr>,

<expr><operator>.</operator><name>query_formats</name> <operator>=</operator> <name>query_formats</name></expr>,

<expr><operator>.</operator><name>inputs</name> <operator>=</operator> <name>colormatrix_inputs</name></expr>,

<expr><operator>.</operator><name>outputs</name> <operator>=</operator> <name>colormatrix_outputs</name></expr>,

<expr><operator>.</operator><name>priv_class</name> <operator>=</operator> <operator>&amp;</operator><name>colormatrix_class</name></expr>,

<expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>AVFILTER_FLAG_SUPPORT_TIMELINE_GENERIC</name> <operator>|</operator> <name>AVFILTER_FLAG_SLICE_THREADS</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

</unit>
