<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavfilter\vf_transpose_vaapi.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avassert.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/mem.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/opt.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/pixdesc.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avfilter.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"formats.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"transpose.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vaapi_vpp.h"</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct <name>TransposeVAAPIContext</name> <block>{

<decl_stmt><decl><type><name>VAAPIVPPContext</name></type> <name>vpp_ctx</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>passthrough</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>dir</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>rotation_state</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>mirror_state</name></decl>;</decl_stmt>

}</block></struct></type> <name>TransposeVAAPIContext</name>;</typedef>

<function><type><specifier>static</specifier> <name>int</name></type> <name>transpose_vaapi_build_filter_params</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VAAPIVPPContext</name> <modifier>*</modifier></type><name>vpp_ctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>TransposeVAAPIContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VAStatus</name></type> <name>vas</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>support_flag</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VAProcPipelineCaps</name></type> <name>pipeline_caps</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pipeline_caps</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>pipeline_caps</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vas</name> <operator>=</operator> <call><name>vaQueryVideoProcPipelineCaps</name><argument_list>(<argument><expr><name><name>vpp_ctx</name><operator>-&gt;</operator><name>hwctx</name><operator>-&gt;</operator><name>display</name></name></expr></argument>,

<argument><expr><name><name>vpp_ctx</name><operator>-&gt;</operator><name>va_context</name></name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><operator>&amp;</operator><name>pipeline_caps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>vas</name> <operator>!=</operator> <name>VA_STATUS_SUCCESS</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to query pipeline "</literal>

<literal type="string">"caps: %d (%s).\n"</literal></expr></argument>, <argument><expr><name>vas</name></expr></argument>, <argument><expr><call><name>vaErrorStr</name><argument_list>(<argument><expr><name>vas</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EIO</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pipeline_caps</name><operator>.</operator><name>rotation_flags</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"VAAPI driver doesn't support transpose\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>dir</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>TRANSPOSE_CCLOCK_FLIP</name></expr>:</case>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>rotation_state</name></name> <operator>=</operator> <name>VA_ROTATION_270</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>mirror_state</name></name> <operator>=</operator> <name>VA_MIRROR_VERTICAL</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>TRANSPOSE_CLOCK</name></expr>:</case>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>rotation_state</name></name> <operator>=</operator> <name>VA_ROTATION_90</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>mirror_state</name></name> <operator>=</operator> <name>VA_MIRROR_NONE</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>TRANSPOSE_CCLOCK</name></expr>:</case>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>rotation_state</name></name> <operator>=</operator> <name>VA_ROTATION_270</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>mirror_state</name></name> <operator>=</operator> <name>VA_MIRROR_NONE</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>TRANSPOSE_CLOCK_FLIP</name></expr>:</case>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>rotation_state</name></name> <operator>=</operator> <name>VA_ROTATION_90</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>mirror_state</name></name> <operator>=</operator> <name>VA_MIRROR_VERTICAL</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>TRANSPOSE_REVERSAL</name></expr>:</case>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>rotation_state</name></name> <operator>=</operator> <name>VA_ROTATION_180</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>mirror_state</name></name> <operator>=</operator> <name>VA_MIRROR_NONE</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>TRANSPOSE_HFLIP</name></expr>:</case>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>rotation_state</name></name> <operator>=</operator> <name>VA_ROTATION_NONE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>mirror_state</name></name> <operator>=</operator> <name>VA_MIRROR_HORIZONTAL</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>TRANSPOSE_VFLIP</name></expr>:</case>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>rotation_state</name></name> <operator>=</operator> <name>VA_ROTATION_NONE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>mirror_state</name></name> <operator>=</operator> <name>VA_MIRROR_VERTICAL</name></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to set direction to %d\n"</literal></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>dir</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name>VA_ROTATION_NONE</name> <operator>!=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>rotation_state</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>support_flag</name> <operator>=</operator> <name><name>pipeline_caps</name><operator>.</operator><name>rotation_flags</name></name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>rotation_state</name></name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>support_flag</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"VAAPI driver doesn't support rotation %d\n"</literal></expr></argument>,

<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>rotation_state</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>VA_MIRROR_NONE</name> <operator>!=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>mirror_state</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>support_flag</name> <operator>=</operator> <name><name>pipeline_caps</name><operator>.</operator><name>mirror_flags</name></name> <operator>&amp;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>mirror_state</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>support_flag</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"VAAPI driver doesn't support mirror %d\n"</literal></expr></argument>,

<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>mirror_state</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>transpose_vaapi_filter_frame</name><parameter_list>(<parameter><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>inlink</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>input_frame</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>avctx</name> <init>= <expr><name><name>inlink</name><operator>-&gt;</operator><name>dst</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>outlink</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>outputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VAAPIVPPContext</name> <modifier>*</modifier></type><name>vpp_ctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>TransposeVAAPIContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>output_frame</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VAProcPipelineParameterBuffer</name></type> <name>params</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>passthrough</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>ff_filter_frame</name><argument_list>(<argument><expr><name>outlink</name></expr></argument>, <argument><expr><name>input_frame</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Filter input: %s, %ux%u (%"</literal><name>PRId64</name><literal type="string">").\n"</literal></expr></argument>,

<argument><expr><call><name>av_get_pix_fmt_name</name><argument_list>(<argument><expr><name><name>input_frame</name><operator>-&gt;</operator><name>format</name></name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name><name>input_frame</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>input_frame</name><operator>-&gt;</operator><name>height</name></name></expr></argument>, <argument><expr><name><name>input_frame</name><operator>-&gt;</operator><name>pts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>vpp_ctx</name><operator>-&gt;</operator><name>va_context</name></name> <operator>==</operator> <name>VA_INVALID_ID</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>output_frame</name> <operator>=</operator> <call><name>ff_get_video_buffer</name><argument_list>(<argument><expr><name>outlink</name></expr></argument>, <argument><expr><name><name>vpp_ctx</name><operator>-&gt;</operator><name>output_width</name></name></expr></argument>,

<argument><expr><name><name>vpp_ctx</name><operator>-&gt;</operator><name>output_height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>output_frame</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>av_frame_copy_props</name><argument_list>(<argument><expr><name>output_frame</name></expr></argument>, <argument><expr><name>input_frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>ff_vaapi_vpp_init_params</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>params</name></expr></argument>,

<argument><expr><name>input_frame</name></expr></argument>, <argument><expr><name>output_frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>params</name><operator>.</operator><name>rotation_state</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>rotation_state</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>params</name><operator>.</operator><name>mirror_state</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>mirror_state</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>ff_vaapi_vpp_render_picture</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>params</name></expr></argument>, <argument><expr><name>output_frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>input_frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Filter output: %s, %ux%u (%"</literal><name>PRId64</name><literal type="string">").\n"</literal></expr></argument>,

<argument><expr><call><name>av_get_pix_fmt_name</name><argument_list>(<argument><expr><name><name>output_frame</name><operator>-&gt;</operator><name>format</name></name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name><name>output_frame</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>output_frame</name><operator>-&gt;</operator><name>height</name></name></expr></argument>, <argument><expr><name><name>output_frame</name><operator>-&gt;</operator><name>pts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>ff_filter_frame</name><argument_list>(<argument><expr><name>outlink</name></expr></argument>, <argument><expr><name>output_frame</name></expr></argument>)</argument_list></call></expr>;</return>

<label><name>fail</name>:</label>

<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>input_frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>output_frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>err</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>transpose_vaapi_init</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VAAPIVPPContext</name> <modifier>*</modifier></type><name>vpp_ctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ff_vaapi_vpp_ctx_init</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vpp_ctx</name><operator>-&gt;</operator><name>pipeline_uninit</name></name> <operator>=</operator> <name>ff_vaapi_vpp_pipeline_uninit</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vpp_ctx</name><operator>-&gt;</operator><name>build_filter_params</name></name> <operator>=</operator> <name>transpose_vaapi_build_filter_params</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vpp_ctx</name><operator>-&gt;</operator><name>output_format</name></name> <operator>=</operator> <name>AV_PIX_FMT_NONE</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>transpose_vaapi_vpp_config_output</name><parameter_list>(<parameter><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>outlink</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>avctx</name> <init>= <expr><name><name>outlink</name><operator>-&gt;</operator><name>src</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VAAPIVPPContext</name> <modifier>*</modifier></type><name>vpp_ctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>TransposeVAAPIContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>inlink</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>inputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>inlink</name><operator>-&gt;</operator><name>w</name></name> <operator>&gt;=</operator> <name><name>inlink</name><operator>-&gt;</operator><name>h</name></name> <operator>&amp;&amp;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>passthrough</name></name> <operator>==</operator> <name>TRANSPOSE_PT_TYPE_LANDSCAPE</name><operator>)</operator> <operator>||</operator>

<operator>(</operator><name><name>inlink</name><operator>-&gt;</operator><name>w</name></name> <operator>&lt;=</operator> <name><name>inlink</name><operator>-&gt;</operator><name>h</name></name> <operator>&amp;&amp;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>passthrough</name></name> <operator>==</operator> <name>TRANSPOSE_PT_TYPE_PORTRAIT</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>outlink</name><operator>-&gt;</operator><name>hw_frames_ctx</name></name> <operator>=</operator> <call><name>av_buffer_ref</name><argument_list>(<argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>hw_frames_ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>outlink</name><operator>-&gt;</operator><name>hw_frames_ctx</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_VERBOSE</name></expr></argument>,

<argument><expr><literal type="string">"w:%d h:%d -&gt; w:%d h:%d (passthrough mode)\n"</literal></expr></argument>,

<argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>w</name></name></expr></argument>, <argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>h</name></name></expr></argument>, <argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>w</name></name></expr></argument>, <argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>h</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>passthrough</name></name> <operator>=</operator> <name>TRANSPOSE_PT_TYPE_NONE</name></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>dir</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>TRANSPOSE_CCLOCK_FLIP</name></expr>:</case>

<case>case <expr><name>TRANSPOSE_CCLOCK</name></expr>:</case>

<case>case <expr><name>TRANSPOSE_CLOCK</name></expr>:</case>

<case>case <expr><name>TRANSPOSE_CLOCK_FLIP</name></expr>:</case>

<expr_stmt><expr><name><name>vpp_ctx</name><operator>-&gt;</operator><name>output_width</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>inputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>h</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vpp_ctx</name><operator>-&gt;</operator><name>output_height</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>inputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>w</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"swap width and height for clock/cclock rotation\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<break>break;</break>

</block_content>}</block></switch>

<return>return <expr><call><name>ff_vaapi_vpp_config_output</name><argument_list>(<argument><expr><name>outlink</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>AVFrame</name> <modifier>*</modifier></type><name>get_video_buffer</name><parameter_list>(<parameter><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>inlink</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>TransposeVAAPIContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>inlink</name><operator>-&gt;</operator><name>dst</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<return>return <expr><ternary><condition><expr><name><name>ctx</name><operator>-&gt;</operator><name>passthrough</name></name></expr> ?</condition><then>

<expr><call><name>ff_null_get_video_buffer</name><argument_list>(<argument><expr><name>inlink</name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr> </then><else>:

<expr><call><name>ff_default_get_video_buffer</name><argument_list>(<argument><expr><name>inlink</name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OFFSET</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>offsetof(TransposeVAAPIContext, x)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLAGS</name></cpp:macro> <cpp:value>(AV_OPT_FLAG_VIDEO_PARAM | AV_OPT_FLAG_FILTERING_PARAM)</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVOption</name></type> <name><name>transpose_vaapi_options</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><literal type="string">"dir"</literal></expr>, <expr><literal type="string">"set transpose direction"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>dir</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>TRANSPOSE_CCLOCK_FLIP</name></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"dir"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"cclock_flip"</literal></expr>, <expr><literal type="string">"rotate counter-clockwise with vertical flip"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>TRANSPOSE_CCLOCK_FLIP</name></expr> }</block></expr>, <expr><operator>.</operator><name>flags</name><operator>=</operator><name>FLAGS</name></expr>, <expr><operator>.</operator><name>unit</name> <operator>=</operator> <literal type="string">"dir"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"clock"</literal></expr>, <expr><literal type="string">"rotate clockwise"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>TRANSPOSE_CLOCK</name></expr> }</block></expr>, <expr><operator>.</operator><name>flags</name><operator>=</operator><name>FLAGS</name></expr>, <expr><operator>.</operator><name>unit</name> <operator>=</operator> <literal type="string">"dir"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"cclock"</literal></expr>, <expr><literal type="string">"rotate counter-clockwise"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>TRANSPOSE_CCLOCK</name></expr> }</block></expr>, <expr><operator>.</operator><name>flags</name><operator>=</operator><name>FLAGS</name></expr>, <expr><operator>.</operator><name>unit</name> <operator>=</operator> <literal type="string">"dir"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"clock_flip"</literal></expr>, <expr><literal type="string">"rotate clockwise with vertical flip"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>TRANSPOSE_CLOCK_FLIP</name></expr> }</block></expr>, <expr><operator>.</operator><name>flags</name><operator>=</operator><name>FLAGS</name></expr>, <expr><operator>.</operator><name>unit</name> <operator>=</operator> <literal type="string">"dir"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"reversal"</literal></expr>, <expr><literal type="string">"rotate by half-turn"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>TRANSPOSE_REVERSAL</name></expr> }</block></expr>, <expr><operator>.</operator><name>flags</name><operator>=</operator><name>FLAGS</name></expr>, <expr><operator>.</operator><name>unit</name> <operator>=</operator> <literal type="string">"dir"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"hflip"</literal></expr>, <expr><literal type="string">"flip horizontally"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>TRANSPOSE_HFLIP</name></expr> }</block></expr>, <expr><operator>.</operator><name>flags</name><operator>=</operator><name>FLAGS</name></expr>, <expr><operator>.</operator><name>unit</name> <operator>=</operator> <literal type="string">"dir"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"vflip"</literal></expr>, <expr><literal type="string">"flip vertically"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>TRANSPOSE_VFLIP</name></expr> }</block></expr>, <expr><operator>.</operator><name>flags</name><operator>=</operator><name>FLAGS</name></expr>, <expr><operator>.</operator><name>unit</name> <operator>=</operator> <literal type="string">"dir"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"passthrough"</literal></expr>, <expr><literal type="string">"do not apply transposition if the input matches the specified geometry"</literal></expr>,

<expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>passthrough</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>TRANSPOSE_PT_TYPE_NONE</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"passthrough"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"none"</literal></expr>, <expr><literal type="string">"always apply transposition"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>TRANSPOSE_PT_TYPE_NONE</name></expr>}</block></expr>, <expr><name>INT_MIN</name></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"passthrough"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"portrait"</literal></expr>, <expr><literal type="string">"preserve portrait geometry"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>TRANSPOSE_PT_TYPE_PORTRAIT</name></expr>}</block></expr>, <expr><name>INT_MIN</name></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"passthrough"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"landscape"</literal></expr>, <expr><literal type="string">"preserve landscape geometry"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>TRANSPOSE_PT_TYPE_LANDSCAPE</name></expr>}</block></expr>, <expr><name>INT_MIN</name></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"passthrough"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>AVFILTER_DEFINE_CLASS</name><argument_list>(<argument><expr><name>transpose_vaapi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVFilterPad</name></type> <name><name>transpose_vaapi_inputs</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"default"</literal></expr>,

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,

<expr><operator>.</operator><name>filter_frame</name> <operator>=</operator> <operator>&amp;</operator><name>transpose_vaapi_filter_frame</name></expr>,

<expr><operator>.</operator><name>get_video_buffer</name> <operator>=</operator> <name>get_video_buffer</name></expr>,

<expr><operator>.</operator><name>config_props</name> <operator>=</operator> <operator>&amp;</operator><name>ff_vaapi_vpp_config_input</name></expr>,

}</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVFilterPad</name></type> <name><name>transpose_vaapi_outputs</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"default"</literal></expr>,

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,

<expr><operator>.</operator><name>config_props</name> <operator>=</operator> <operator>&amp;</operator><name>transpose_vaapi_vpp_config_output</name></expr>,

}</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFilter</name></type> <name>ff_vf_transpose_vaapi</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"transpose_vaapi"</literal></expr>,

<expr><operator>.</operator><name>description</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"VAAPI VPP for transpose"</literal></expr></argument>)</argument_list></call></expr>,

<expr><operator>.</operator><name>priv_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>TransposeVAAPIContext</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><operator>.</operator><name>init</name> <operator>=</operator> <operator>&amp;</operator><name>transpose_vaapi_init</name></expr>,

<expr><operator>.</operator><name>uninit</name> <operator>=</operator> <operator>&amp;</operator><name>ff_vaapi_vpp_ctx_uninit</name></expr>,

<expr><operator>.</operator><name>query_formats</name> <operator>=</operator> <operator>&amp;</operator><name>ff_vaapi_vpp_query_formats</name></expr>,

<expr><operator>.</operator><name>inputs</name> <operator>=</operator> <name>transpose_vaapi_inputs</name></expr>,

<expr><operator>.</operator><name>outputs</name> <operator>=</operator> <name>transpose_vaapi_outputs</name></expr>,

<expr><operator>.</operator><name>priv_class</name> <operator>=</operator> <operator>&amp;</operator><name>transpose_vaapi_class</name></expr>,

<expr><operator>.</operator><name>flags_internal</name> <operator>=</operator> <name>FF_FILTER_FLAG_HWFRAME_AWARE</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

</unit>
