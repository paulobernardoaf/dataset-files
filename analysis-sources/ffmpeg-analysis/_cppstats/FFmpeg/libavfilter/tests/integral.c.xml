<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavfilter\tests\integral.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavfilter/vf_nlmeans.c"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>void</name></type> <name>display_integral</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type><name>ii</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>lz_32</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>h</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>w</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" %7x"</literal></expr></argument>, <argument><expr><name><name>ii</name><index>[<expr><name>y</name><operator>*</operator><name>lz_32</name> <operator>+</operator> <name>x</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"---------------\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>xoff</name></decl>, <decl><type ref="prev"/><name>yoff</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>ii_start</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>ii_start2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>NLMeansDSPContext</name></type> <name>dsp</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>w</name> <init>= <expr><literal type="number">6</literal></expr></init></decl>, <decl><type ref="prev"/><name>h</name> <init>= <expr><literal type="number">5</literal></expr></init></decl>, <decl><type ref="prev"/><name>lz</name> <init>= <expr><literal type="number">8</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>src</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="number">0xb0</literal></expr>, <expr><literal type="number">0x71</literal></expr>, <expr><literal type="number">0xfb</literal></expr>, <expr><literal type="number">0xd8</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0xd9</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x02</literal></expr>,

<expr><literal type="number">0x51</literal></expr>, <expr><literal type="number">0x8e</literal></expr>, <expr><literal type="number">0x41</literal></expr>, <expr><literal type="number">0x0f</literal></expr>, <expr><literal type="number">0x84</literal></expr>, <expr><literal type="number">0x58</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x04</literal></expr>,

<expr><literal type="number">0xc7</literal></expr>, <expr><literal type="number">0x8d</literal></expr>, <expr><literal type="number">0x07</literal></expr>, <expr><literal type="number">0x70</literal></expr>, <expr><literal type="number">0x5c</literal></expr>, <expr><literal type="number">0x47</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x06</literal></expr>,

<expr><literal type="number">0x09</literal></expr>, <expr><literal type="number">0x4e</literal></expr>, <expr><literal type="number">0xfc</literal></expr>, <expr><literal type="number">0x74</literal></expr>, <expr><literal type="number">0x8f</literal></expr>, <expr><literal type="number">0x9a</literal></expr>, <expr><literal type="number">0x07</literal></expr>, <expr><literal type="number">0x08</literal></expr>,

<expr><literal type="number">0x60</literal></expr>, <expr><literal type="number">0x8e</literal></expr>, <expr><literal type="number">0x20</literal></expr>, <expr><literal type="number">0xaa</literal></expr>, <expr><literal type="number">0x95</literal></expr>, <expr><literal type="number">0x7d</literal></expr>, <expr><literal type="number">0x09</literal></expr>, <expr><literal type="number">0x0a</literal></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>e</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>ii_w</name> <init>= <expr><name>w</name><operator>+</operator><name>e</name><operator>*</operator><literal type="number">2</literal></expr></init></decl>, <decl><type ref="prev"/><name>ii_h</name> <init>= <expr><name>h</name><operator>+</operator><name>e</name><operator>*</operator><literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>ii_lz_32</name> <init>= <expr><operator>(</operator><operator>(</operator><name>ii_w</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <literal type="number">3</literal><operator>)</operator> <operator>&amp;</operator> <operator>~</operator><literal type="number">3</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>ii</name> <init>= <expr><call><name>av_mallocz_array</name><argument_list>(<argument><expr><name>ii_h</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>ii_lz_32</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>ii</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>ii2</name> <init>= <expr><call><name>av_mallocz_array</name><argument_list>(<argument><expr><name>ii_h</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>ii_lz_32</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>ii2</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ii</name> <operator>||</operator> <operator>!</operator><name>ii2</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ii_start</name> <operator>=</operator> <name>ii</name> <operator>+</operator> <name>ii_lz_32</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name>ii_start2</name> <operator>=</operator> <name>ii2</name> <operator>+</operator> <name>ii_lz_32</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>ff_nlmeans_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>yoff</name> <operator>=</operator> <operator>-</operator><name>e</name></expr>;</init> <condition><expr><name>yoff</name> <operator>&lt;=</operator> <name>e</name></expr>;</condition> <incr><expr><name>yoff</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>xoff</name> <operator>=</operator> <operator>-</operator><name>e</name></expr>;</init> <condition><expr><name>xoff</name> <operator>&lt;=</operator> <name>e</name></expr>;</condition> <incr><expr><name>xoff</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"xoff=%d yoff=%d\n"</literal></expr></argument>, <argument><expr><name>xoff</name></expr></argument>, <argument><expr><name>yoff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>compute_ssd_integral_image</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dsp</name></expr></argument>, <argument><expr><name>ii_start</name></expr></argument>, <argument><expr><name>ii_lz_32</name></expr></argument>,

<argument><expr><name>src</name></expr></argument>, <argument><expr><name>lz</name></expr></argument>, <argument><expr><name>xoff</name></expr></argument>, <argument><expr><name>yoff</name></expr></argument>, <argument><expr><name>e</name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>display_integral</name><argument_list>(<argument><expr><name>ii_start</name></expr></argument>, <argument><expr><name>ii_w</name></expr></argument>, <argument><expr><name>ii_h</name></expr></argument>, <argument><expr><name>ii_lz_32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>compute_unsafe_ssd_integral_image</name><argument_list>(<argument><expr><name>ii_start2</name></expr></argument>, <argument><expr><name>ii_lz_32</name></expr></argument>,

<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><name>src</name></expr></argument>, <argument><expr><name>lz</name></expr></argument>,

<argument><expr><name>xoff</name></expr></argument>, <argument><expr><name>yoff</name></expr></argument>, <argument><expr><name>e</name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>,

<argument><expr><name>ii_w</name></expr></argument>, <argument><expr><name>ii_h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>display_integral</name><argument_list>(<argument><expr><name>ii_start2</name></expr></argument>, <argument><expr><name>ii_w</name></expr></argument>, <argument><expr><name>ii_h</name></expr></argument>, <argument><expr><name>ii_lz_32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>memcmp</name><argument_list>(<argument><expr><name>ii</name></expr></argument>, <argument><expr><name>ii2</name></expr></argument>, <argument><expr><operator>(</operator><name>ii_h</name><operator>+</operator><literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>ii_lz_32</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>ii</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Integral mismatch\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<goto>goto <name>end</name>;</goto>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<label><name>end</name>:</label>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ii</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ii2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

</unit>
