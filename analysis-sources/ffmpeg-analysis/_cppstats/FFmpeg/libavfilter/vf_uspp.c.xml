<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavfilter\vf_uspp.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avassert.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/imgutils.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/opt.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/pixdesc.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avfilter.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_LEVEL</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BLOCK</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <name>USPPContext</name> <block>{

<decl_stmt><decl><type><specifier>const</specifier> <name>AVClass</name> <modifier>*</modifier></type><name>av_class</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>log2_count</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>hsub</name></decl>, <name>vsub</name>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>qp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>qscale_type</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>temp_stride</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name><name>src</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name><name>temp</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>outbuf_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>outbuf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name><name>avctx_enc</name><index>[<expr><name>BLOCK</name><operator>*</operator><name>BLOCK</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>frame</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>frame_dec</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>non_b_qp_table</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>non_b_qp_alloc_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>use_bframe_qp</name></decl>;</decl_stmt>

}</block></struct></type> <name>USPPContext</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OFFSET</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>offsetof(USPPContext, x)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLAGS</name></cpp:macro> <cpp:value>AV_OPT_FLAG_FILTERING_PARAM|AV_OPT_FLAG_VIDEO_PARAM</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVOption</name></type> <name><name>uspp_options</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><literal type="string">"quality"</literal></expr>, <expr><literal type="string">"set quality"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>log2_count</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">3</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>MAX_LEVEL</name></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"qp"</literal></expr>, <expr><literal type="string">"force a constant quantizer parameter"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>qp</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">63</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"use_bframe_qp"</literal></expr>, <expr><literal type="string">"use B-frames' QP"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>use_bframe_qp</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_BOOL</name></expr>,<expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>AVFILTER_DEFINE_CLASS</name><argument_list>(<argument><expr><name>uspp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></expr></argument>, <argument><expr><name>dither</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">8</literal></expr>]</index><index>[<expr><literal type="number">8</literal></expr>]</index> <operator>=</operator> <block>{

<expr><block>{ <expr><literal type="number">0</literal><operator>*</operator><literal type="number">4</literal></expr>, <expr><literal type="number">48</literal><operator>*</operator><literal type="number">4</literal></expr>, <expr><literal type="number">12</literal><operator>*</operator><literal type="number">4</literal></expr>, <expr><literal type="number">60</literal><operator>*</operator><literal type="number">4</literal></expr>, <expr><literal type="number">3</literal><operator>*</operator><literal type="number">4</literal></expr>, <expr><literal type="number">51</literal><operator>*</operator><literal type="number">4</literal></expr>, <expr><literal type="number">15</literal><operator>*</operator><literal type="number">4</literal></expr>, <expr><literal type="number">63</literal><operator>*</operator><literal type="number">4</literal></expr>, }</block></expr>,

<expr><block>{ <expr><literal type="number">32</literal><operator>*</operator><literal type="number">4</literal></expr>, <expr><literal type="number">16</literal><operator>*</operator><literal type="number">4</literal></expr>, <expr><literal type="number">44</literal><operator>*</operator><literal type="number">4</literal></expr>, <expr><literal type="number">28</literal><operator>*</operator><literal type="number">4</literal></expr>, <expr><literal type="number">35</literal><operator>*</operator><literal type="number">4</literal></expr>, <expr><literal type="number">19</literal><operator>*</operator><literal type="number">4</literal></expr>, <expr><literal type="number">47</literal><operator>*</operator><literal type="number">4</literal></expr>, <expr><literal type="number">31</literal><operator>*</operator><literal type="number">4</literal></expr>, }</block></expr>,

<expr><block>{ <expr><literal type="number">8</literal><operator>*</operator><literal type="number">4</literal></expr>, <expr><literal type="number">56</literal><operator>*</operator><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal><operator>*</operator><literal type="number">4</literal></expr>, <expr><literal type="number">52</literal><operator>*</operator><literal type="number">4</literal></expr>, <expr><literal type="number">11</literal><operator>*</operator><literal type="number">4</literal></expr>, <expr><literal type="number">59</literal><operator>*</operator><literal type="number">4</literal></expr>, <expr><literal type="number">7</literal><operator>*</operator><literal type="number">4</literal></expr>, <expr><literal type="number">55</literal><operator>*</operator><literal type="number">4</literal></expr>, }</block></expr>,

<expr><block>{ <expr><literal type="number">40</literal><operator>*</operator><literal type="number">4</literal></expr>, <expr><literal type="number">24</literal><operator>*</operator><literal type="number">4</literal></expr>, <expr><literal type="number">36</literal><operator>*</operator><literal type="number">4</literal></expr>, <expr><literal type="number">20</literal><operator>*</operator><literal type="number">4</literal></expr>, <expr><literal type="number">43</literal><operator>*</operator><literal type="number">4</literal></expr>, <expr><literal type="number">27</literal><operator>*</operator><literal type="number">4</literal></expr>, <expr><literal type="number">39</literal><operator>*</operator><literal type="number">4</literal></expr>, <expr><literal type="number">23</literal><operator>*</operator><literal type="number">4</literal></expr>, }</block></expr>,

<expr><block>{ <expr><literal type="number">2</literal><operator>*</operator><literal type="number">4</literal></expr>, <expr><literal type="number">50</literal><operator>*</operator><literal type="number">4</literal></expr>, <expr><literal type="number">14</literal><operator>*</operator><literal type="number">4</literal></expr>, <expr><literal type="number">62</literal><operator>*</operator><literal type="number">4</literal></expr>, <expr><literal type="number">1</literal><operator>*</operator><literal type="number">4</literal></expr>, <expr><literal type="number">49</literal><operator>*</operator><literal type="number">4</literal></expr>, <expr><literal type="number">13</literal><operator>*</operator><literal type="number">4</literal></expr>, <expr><literal type="number">61</literal><operator>*</operator><literal type="number">4</literal></expr>, }</block></expr>,

<expr><block>{ <expr><literal type="number">34</literal><operator>*</operator><literal type="number">4</literal></expr>, <expr><literal type="number">18</literal><operator>*</operator><literal type="number">4</literal></expr>, <expr><literal type="number">46</literal><operator>*</operator><literal type="number">4</literal></expr>, <expr><literal type="number">30</literal><operator>*</operator><literal type="number">4</literal></expr>, <expr><literal type="number">33</literal><operator>*</operator><literal type="number">4</literal></expr>, <expr><literal type="number">17</literal><operator>*</operator><literal type="number">4</literal></expr>, <expr><literal type="number">45</literal><operator>*</operator><literal type="number">4</literal></expr>, <expr><literal type="number">29</literal><operator>*</operator><literal type="number">4</literal></expr>, }</block></expr>,

<expr><block>{ <expr><literal type="number">10</literal><operator>*</operator><literal type="number">4</literal></expr>, <expr><literal type="number">58</literal><operator>*</operator><literal type="number">4</literal></expr>, <expr><literal type="number">6</literal><operator>*</operator><literal type="number">4</literal></expr>, <expr><literal type="number">54</literal><operator>*</operator><literal type="number">4</literal></expr>, <expr><literal type="number">9</literal><operator>*</operator><literal type="number">4</literal></expr>, <expr><literal type="number">57</literal><operator>*</operator><literal type="number">4</literal></expr>, <expr><literal type="number">5</literal><operator>*</operator><literal type="number">4</literal></expr>, <expr><literal type="number">53</literal><operator>*</operator><literal type="number">4</literal></expr>, }</block></expr>,

<expr><block>{ <expr><literal type="number">42</literal><operator>*</operator><literal type="number">4</literal></expr>, <expr><literal type="number">26</literal><operator>*</operator><literal type="number">4</literal></expr>, <expr><literal type="number">38</literal><operator>*</operator><literal type="number">4</literal></expr>, <expr><literal type="number">22</literal><operator>*</operator><literal type="number">4</literal></expr>, <expr><literal type="number">41</literal><operator>*</operator><literal type="number">4</literal></expr>, <expr><literal type="number">25</literal><operator>*</operator><literal type="number">4</literal></expr>, <expr><literal type="number">37</literal><operator>*</operator><literal type="number">4</literal></expr>, <expr><literal type="number">21</literal><operator>*</operator><literal type="number">4</literal></expr>, }</block></expr>,

}</block></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>offset</name><index>[<expr><literal type="number">511</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">8</literal></expr>, <expr><literal type="number">8</literal></expr>}</block></expr>, 

<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">12</literal></expr>, <expr><literal type="number">8</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">8</literal></expr>,<expr><literal type="number">12</literal></expr>}</block></expr>, 

<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">10</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">14</literal></expr>, <expr><literal type="number">6</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">8</literal></expr>, <expr><literal type="number">8</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">2</literal></expr>,<expr><literal type="number">10</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">12</literal></expr>,<expr><literal type="number">12</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">6</literal></expr>,<expr><literal type="number">14</literal></expr>}</block></expr>, 

<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">10</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">14</literal></expr>, <expr><literal type="number">6</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">8</literal></expr>, <expr><literal type="number">8</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">2</literal></expr>,<expr><literal type="number">10</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">12</literal></expr>,<expr><literal type="number">12</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">6</literal></expr>,<expr><literal type="number">14</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="number">5</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">15</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">9</literal></expr>, <expr><literal type="number">5</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><literal type="number">7</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">13</literal></expr>, <expr><literal type="number">9</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">7</literal></expr>,<expr><literal type="number">11</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">1</literal></expr>,<expr><literal type="number">13</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">11</literal></expr>,<expr><literal type="number">15</literal></expr>}</block></expr>, 

<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">8</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">8</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">8</literal></expr>, <expr><literal type="number">8</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">5</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">13</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">5</literal></expr>, <expr><literal type="number">9</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">13</literal></expr>, <expr><literal type="number">9</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">10</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">2</literal></expr>,<expr><literal type="number">10</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">10</literal></expr>,<expr><literal type="number">10</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">7</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">15</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">7</literal></expr>,<expr><literal type="number">11</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">15</literal></expr>,<expr><literal type="number">11</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">12</literal></expr>, <expr><literal type="number">4</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">4</literal></expr>,<expr><literal type="number">12</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">12</literal></expr>,<expr><literal type="number">12</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">5</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">9</literal></expr>, <expr><literal type="number">5</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">1</literal></expr>,<expr><literal type="number">13</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">9</literal></expr>,<expr><literal type="number">13</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="number">6</literal></expr>, <expr><literal type="number">6</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">14</literal></expr>, <expr><literal type="number">6</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">6</literal></expr>,<expr><literal type="number">14</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">14</literal></expr>,<expr><literal type="number">14</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><literal type="number">7</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">11</literal></expr>, <expr><literal type="number">7</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">3</literal></expr>,<expr><literal type="number">15</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">11</literal></expr>,<expr><literal type="number">15</literal></expr>}</block></expr>, 

<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">8</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">8</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">8</literal></expr>, <expr><literal type="number">8</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">4</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">12</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">4</literal></expr>, <expr><literal type="number">8</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">12</literal></expr>, <expr><literal type="number">8</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">9</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">9</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">9</literal></expr>, <expr><literal type="number">9</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">5</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">13</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">5</literal></expr>, <expr><literal type="number">9</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">13</literal></expr>, <expr><literal type="number">9</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">11</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">3</literal></expr>,<expr><literal type="number">10</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">11</literal></expr>,<expr><literal type="number">10</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">7</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">15</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">7</literal></expr>,<expr><literal type="number">10</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">15</literal></expr>,<expr><literal type="number">10</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">10</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">2</literal></expr>,<expr><literal type="number">11</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">10</literal></expr>,<expr><literal type="number">11</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">6</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">14</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">6</literal></expr>,<expr><literal type="number">11</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">14</literal></expr>,<expr><literal type="number">11</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">4</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">8</literal></expr>, <expr><literal type="number">4</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0</literal></expr>,<expr><literal type="number">12</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">8</literal></expr>,<expr><literal type="number">12</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">12</literal></expr>, <expr><literal type="number">4</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">4</literal></expr>,<expr><literal type="number">12</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">12</literal></expr>,<expr><literal type="number">12</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">5</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">9</literal></expr>, <expr><literal type="number">5</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">1</literal></expr>,<expr><literal type="number">13</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">9</literal></expr>,<expr><literal type="number">13</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">5</literal></expr>, <expr><literal type="number">5</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">13</literal></expr>, <expr><literal type="number">5</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">5</literal></expr>,<expr><literal type="number">13</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">13</literal></expr>,<expr><literal type="number">13</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><literal type="number">6</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">11</literal></expr>, <expr><literal type="number">6</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">3</literal></expr>,<expr><literal type="number">14</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">11</literal></expr>,<expr><literal type="number">14</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">7</literal></expr>, <expr><literal type="number">6</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">15</literal></expr>, <expr><literal type="number">6</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">7</literal></expr>,<expr><literal type="number">14</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">15</literal></expr>,<expr><literal type="number">14</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="number">2</literal></expr>, <expr><literal type="number">7</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">10</literal></expr>, <expr><literal type="number">7</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">2</literal></expr>,<expr><literal type="number">15</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">10</literal></expr>,<expr><literal type="number">15</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">6</literal></expr>, <expr><literal type="number">7</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">14</literal></expr>, <expr><literal type="number">7</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">6</literal></expr>,<expr><literal type="number">15</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">14</literal></expr>,<expr><literal type="number">15</literal></expr>}</block></expr>, 

<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">8</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">8</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">8</literal></expr>, <expr><literal type="number">8</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">8</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0</literal></expr>,<expr><literal type="number">10</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">8</literal></expr>,<expr><literal type="number">10</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">4</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">8</literal></expr>, <expr><literal type="number">4</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0</literal></expr>,<expr><literal type="number">12</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">8</literal></expr>,<expr><literal type="number">12</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">6</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">8</literal></expr>, <expr><literal type="number">6</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0</literal></expr>,<expr><literal type="number">14</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">8</literal></expr>,<expr><literal type="number">14</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">9</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">9</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">9</literal></expr>, <expr><literal type="number">9</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">9</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">1</literal></expr>,<expr><literal type="number">11</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">9</literal></expr>,<expr><literal type="number">11</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">5</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">9</literal></expr>, <expr><literal type="number">5</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">1</literal></expr>,<expr><literal type="number">13</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">9</literal></expr>,<expr><literal type="number">13</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">7</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">9</literal></expr>, <expr><literal type="number">7</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">1</literal></expr>,<expr><literal type="number">15</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">9</literal></expr>,<expr><literal type="number">15</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">10</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">2</literal></expr>, <expr><literal type="number">8</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">10</literal></expr>, <expr><literal type="number">8</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">10</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">2</literal></expr>,<expr><literal type="number">10</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">10</literal></expr>,<expr><literal type="number">10</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="number">2</literal></expr>, <expr><literal type="number">4</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">10</literal></expr>, <expr><literal type="number">4</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">2</literal></expr>,<expr><literal type="number">12</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">10</literal></expr>,<expr><literal type="number">12</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">2</literal></expr>, <expr><literal type="number">6</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">10</literal></expr>, <expr><literal type="number">6</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">2</literal></expr>,<expr><literal type="number">14</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">10</literal></expr>,<expr><literal type="number">14</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">11</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><literal type="number">9</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">11</literal></expr>, <expr><literal type="number">9</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">11</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">3</literal></expr>,<expr><literal type="number">11</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">11</literal></expr>,<expr><literal type="number">11</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><literal type="number">5</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">11</literal></expr>, <expr><literal type="number">5</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">3</literal></expr>,<expr><literal type="number">13</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">11</literal></expr>,<expr><literal type="number">13</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><literal type="number">7</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">11</literal></expr>, <expr><literal type="number">7</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">3</literal></expr>,<expr><literal type="number">15</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">11</literal></expr>,<expr><literal type="number">15</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="number">4</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">12</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">4</literal></expr>, <expr><literal type="number">8</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">12</literal></expr>, <expr><literal type="number">8</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">4</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">12</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">4</literal></expr>,<expr><literal type="number">10</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">12</literal></expr>,<expr><literal type="number">10</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">12</literal></expr>, <expr><literal type="number">4</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">4</literal></expr>,<expr><literal type="number">12</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">12</literal></expr>,<expr><literal type="number">12</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">4</literal></expr>, <expr><literal type="number">6</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">12</literal></expr>, <expr><literal type="number">6</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">4</literal></expr>,<expr><literal type="number">14</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">12</literal></expr>,<expr><literal type="number">14</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="number">5</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">13</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">5</literal></expr>, <expr><literal type="number">9</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">13</literal></expr>, <expr><literal type="number">9</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">5</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">13</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">5</literal></expr>,<expr><literal type="number">11</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">13</literal></expr>,<expr><literal type="number">11</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="number">5</literal></expr>, <expr><literal type="number">5</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">13</literal></expr>, <expr><literal type="number">5</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">5</literal></expr>,<expr><literal type="number">13</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">13</literal></expr>,<expr><literal type="number">13</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">5</literal></expr>, <expr><literal type="number">7</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">13</literal></expr>, <expr><literal type="number">7</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">5</literal></expr>,<expr><literal type="number">15</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">13</literal></expr>,<expr><literal type="number">15</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="number">6</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">14</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">6</literal></expr>, <expr><literal type="number">8</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">14</literal></expr>, <expr><literal type="number">8</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">6</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">14</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">6</literal></expr>,<expr><literal type="number">10</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">14</literal></expr>,<expr><literal type="number">10</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="number">6</literal></expr>, <expr><literal type="number">4</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">14</literal></expr>, <expr><literal type="number">4</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">6</literal></expr>,<expr><literal type="number">12</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">14</literal></expr>,<expr><literal type="number">12</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">6</literal></expr>, <expr><literal type="number">6</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">14</literal></expr>, <expr><literal type="number">6</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">6</literal></expr>,<expr><literal type="number">14</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">14</literal></expr>,<expr><literal type="number">14</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="number">7</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">15</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">7</literal></expr>, <expr><literal type="number">9</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">15</literal></expr>, <expr><literal type="number">9</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">7</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">15</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">7</literal></expr>,<expr><literal type="number">11</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">15</literal></expr>,<expr><literal type="number">11</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="number">7</literal></expr>, <expr><literal type="number">5</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">15</literal></expr>, <expr><literal type="number">5</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">7</literal></expr>,<expr><literal type="number">13</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">15</literal></expr>,<expr><literal type="number">13</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">7</literal></expr>, <expr><literal type="number">7</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">15</literal></expr>, <expr><literal type="number">7</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">7</literal></expr>,<expr><literal type="number">15</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">15</literal></expr>,<expr><literal type="number">15</literal></expr>}</block></expr>, 

<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">8</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">8</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">8</literal></expr>, <expr><literal type="number">8</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">12</literal></expr>, <expr><literal type="number">4</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">4</literal></expr>,<expr><literal type="number">12</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">12</literal></expr>,<expr><literal type="number">12</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">4</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">8</literal></expr>, <expr><literal type="number">4</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0</literal></expr>,<expr><literal type="number">12</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">8</literal></expr>,<expr><literal type="number">12</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">4</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">12</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">4</literal></expr>, <expr><literal type="number">8</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">12</literal></expr>, <expr><literal type="number">8</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">10</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">2</literal></expr>,<expr><literal type="number">10</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">10</literal></expr>,<expr><literal type="number">10</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">6</literal></expr>, <expr><literal type="number">6</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">14</literal></expr>, <expr><literal type="number">6</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">6</literal></expr>,<expr><literal type="number">14</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">14</literal></expr>,<expr><literal type="number">14</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="number">2</literal></expr>, <expr><literal type="number">6</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">10</literal></expr>, <expr><literal type="number">6</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">2</literal></expr>,<expr><literal type="number">14</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">10</literal></expr>,<expr><literal type="number">14</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">6</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">14</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">6</literal></expr>,<expr><literal type="number">10</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">14</literal></expr>,<expr><literal type="number">10</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">8</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0</literal></expr>,<expr><literal type="number">10</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">8</literal></expr>,<expr><literal type="number">10</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">4</literal></expr>, <expr><literal type="number">6</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">12</literal></expr>, <expr><literal type="number">6</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">4</literal></expr>,<expr><literal type="number">14</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">12</literal></expr>,<expr><literal type="number">14</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">6</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">8</literal></expr>, <expr><literal type="number">6</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0</literal></expr>,<expr><literal type="number">14</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">8</literal></expr>,<expr><literal type="number">14</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">4</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">12</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">4</literal></expr>,<expr><literal type="number">10</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">12</literal></expr>,<expr><literal type="number">10</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">10</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">2</literal></expr>, <expr><literal type="number">8</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">10</literal></expr>, <expr><literal type="number">8</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">6</literal></expr>, <expr><literal type="number">4</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">14</literal></expr>, <expr><literal type="number">4</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">6</literal></expr>,<expr><literal type="number">12</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">14</literal></expr>,<expr><literal type="number">12</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="number">2</literal></expr>, <expr><literal type="number">4</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">10</literal></expr>, <expr><literal type="number">4</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">2</literal></expr>,<expr><literal type="number">12</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">10</literal></expr>,<expr><literal type="number">12</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">6</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">14</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">6</literal></expr>, <expr><literal type="number">8</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">14</literal></expr>, <expr><literal type="number">8</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">9</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">9</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">9</literal></expr>, <expr><literal type="number">9</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">5</literal></expr>, <expr><literal type="number">5</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">13</literal></expr>, <expr><literal type="number">5</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">5</literal></expr>,<expr><literal type="number">13</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">13</literal></expr>,<expr><literal type="number">13</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">5</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">9</literal></expr>, <expr><literal type="number">5</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">1</literal></expr>,<expr><literal type="number">13</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">9</literal></expr>,<expr><literal type="number">13</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">5</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">13</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">5</literal></expr>, <expr><literal type="number">9</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">13</literal></expr>, <expr><literal type="number">9</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">11</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">3</literal></expr>,<expr><literal type="number">11</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">11</literal></expr>,<expr><literal type="number">11</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">7</literal></expr>, <expr><literal type="number">7</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">15</literal></expr>, <expr><literal type="number">7</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">7</literal></expr>,<expr><literal type="number">15</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">15</literal></expr>,<expr><literal type="number">15</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><literal type="number">7</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">11</literal></expr>, <expr><literal type="number">7</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">3</literal></expr>,<expr><literal type="number">15</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">11</literal></expr>,<expr><literal type="number">15</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">7</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">15</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">7</literal></expr>,<expr><literal type="number">11</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">15</literal></expr>,<expr><literal type="number">11</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">9</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">1</literal></expr>,<expr><literal type="number">11</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">9</literal></expr>,<expr><literal type="number">11</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">5</literal></expr>, <expr><literal type="number">7</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">13</literal></expr>, <expr><literal type="number">7</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">5</literal></expr>,<expr><literal type="number">15</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">13</literal></expr>,<expr><literal type="number">15</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">7</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">9</literal></expr>, <expr><literal type="number">7</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">1</literal></expr>,<expr><literal type="number">15</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">9</literal></expr>,<expr><literal type="number">15</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">5</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">13</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">5</literal></expr>,<expr><literal type="number">11</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">13</literal></expr>,<expr><literal type="number">11</literal></expr>}</block></expr>, 

<expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">11</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><literal type="number">9</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">11</literal></expr>, <expr><literal type="number">9</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">7</literal></expr>, <expr><literal type="number">5</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">15</literal></expr>, <expr><literal type="number">5</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">7</literal></expr>,<expr><literal type="number">13</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">15</literal></expr>,<expr><literal type="number">13</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><literal type="number">5</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">11</literal></expr>, <expr><literal type="number">5</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">3</literal></expr>,<expr><literal type="number">13</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">11</literal></expr>,<expr><literal type="number">13</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">7</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">15</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">7</literal></expr>, <expr><literal type="number">9</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">15</literal></expr>, <expr><literal type="number">9</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">8</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">9</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">8</literal></expr>, <expr><literal type="number">9</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">4</literal></expr>, <expr><literal type="number">5</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">12</literal></expr>, <expr><literal type="number">5</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">4</literal></expr>,<expr><literal type="number">13</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">12</literal></expr>,<expr><literal type="number">13</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">5</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">8</literal></expr>, <expr><literal type="number">5</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0</literal></expr>,<expr><literal type="number">13</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">8</literal></expr>,<expr><literal type="number">13</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">4</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">12</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">4</literal></expr>, <expr><literal type="number">9</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">12</literal></expr>, <expr><literal type="number">9</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">10</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">2</literal></expr>,<expr><literal type="number">11</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">10</literal></expr>,<expr><literal type="number">11</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">6</literal></expr>, <expr><literal type="number">7</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">14</literal></expr>, <expr><literal type="number">7</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">6</literal></expr>,<expr><literal type="number">15</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">14</literal></expr>,<expr><literal type="number">15</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="number">2</literal></expr>, <expr><literal type="number">7</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">10</literal></expr>, <expr><literal type="number">7</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">2</literal></expr>,<expr><literal type="number">15</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">10</literal></expr>,<expr><literal type="number">15</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">6</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">14</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">6</literal></expr>,<expr><literal type="number">11</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">14</literal></expr>,<expr><literal type="number">11</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">8</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0</literal></expr>,<expr><literal type="number">11</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">8</literal></expr>,<expr><literal type="number">11</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">4</literal></expr>, <expr><literal type="number">7</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">12</literal></expr>, <expr><literal type="number">7</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">4</literal></expr>,<expr><literal type="number">15</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">12</literal></expr>,<expr><literal type="number">15</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">7</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">8</literal></expr>, <expr><literal type="number">7</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0</literal></expr>,<expr><literal type="number">15</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">8</literal></expr>,<expr><literal type="number">15</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">4</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">12</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">4</literal></expr>,<expr><literal type="number">11</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">12</literal></expr>,<expr><literal type="number">11</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="number">2</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">10</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">2</literal></expr>, <expr><literal type="number">9</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">10</literal></expr>, <expr><literal type="number">9</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">6</literal></expr>, <expr><literal type="number">5</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">14</literal></expr>, <expr><literal type="number">5</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">6</literal></expr>,<expr><literal type="number">13</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">14</literal></expr>,<expr><literal type="number">13</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="number">2</literal></expr>, <expr><literal type="number">5</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">10</literal></expr>, <expr><literal type="number">5</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">2</literal></expr>,<expr><literal type="number">13</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">10</literal></expr>,<expr><literal type="number">13</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">6</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">14</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">6</literal></expr>, <expr><literal type="number">9</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">14</literal></expr>, <expr><literal type="number">9</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">9</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">8</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">9</literal></expr>, <expr><literal type="number">8</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">5</literal></expr>, <expr><literal type="number">4</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">13</literal></expr>, <expr><literal type="number">4</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">5</literal></expr>,<expr><literal type="number">12</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">13</literal></expr>,<expr><literal type="number">12</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">4</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">9</literal></expr>, <expr><literal type="number">4</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">1</literal></expr>,<expr><literal type="number">12</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">9</literal></expr>,<expr><literal type="number">12</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">5</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">13</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">5</literal></expr>, <expr><literal type="number">8</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">13</literal></expr>, <expr><literal type="number">8</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">11</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">3</literal></expr>,<expr><literal type="number">10</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">11</literal></expr>,<expr><literal type="number">10</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">7</literal></expr>, <expr><literal type="number">6</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">15</literal></expr>, <expr><literal type="number">6</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">7</literal></expr>,<expr><literal type="number">14</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">15</literal></expr>,<expr><literal type="number">14</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><literal type="number">6</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">11</literal></expr>, <expr><literal type="number">6</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">3</literal></expr>,<expr><literal type="number">14</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">11</literal></expr>,<expr><literal type="number">14</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">7</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">15</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">7</literal></expr>,<expr><literal type="number">10</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">15</literal></expr>,<expr><literal type="number">10</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">9</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">1</literal></expr>,<expr><literal type="number">10</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">9</literal></expr>,<expr><literal type="number">10</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">5</literal></expr>, <expr><literal type="number">6</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">13</literal></expr>, <expr><literal type="number">6</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">5</literal></expr>,<expr><literal type="number">14</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">13</literal></expr>,<expr><literal type="number">14</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">6</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">9</literal></expr>, <expr><literal type="number">6</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">1</literal></expr>,<expr><literal type="number">14</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">9</literal></expr>,<expr><literal type="number">14</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">5</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">13</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">5</literal></expr>,<expr><literal type="number">10</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">13</literal></expr>,<expr><literal type="number">10</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">11</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><literal type="number">8</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">11</literal></expr>, <expr><literal type="number">8</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">7</literal></expr>, <expr><literal type="number">4</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">15</literal></expr>, <expr><literal type="number">4</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">7</literal></expr>,<expr><literal type="number">12</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">15</literal></expr>,<expr><literal type="number">12</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><literal type="number">4</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">11</literal></expr>, <expr><literal type="number">4</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">3</literal></expr>,<expr><literal type="number">12</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">11</literal></expr>,<expr><literal type="number">12</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">7</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">15</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">7</literal></expr>, <expr><literal type="number">8</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">15</literal></expr>, <expr><literal type="number">8</literal></expr>}</block></expr>,

}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>store_slice_c</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>dst_stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_stride</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>log2_scale</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>, <decl><type ref="prev"/><name>x</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STORE</name><parameter_list>(<parameter><type><name>pos</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { temp = ((src[x + y * src_stride + pos] &lt;&lt; log2_scale) + d[pos]) &gt;&gt; 8; if (temp &amp; 0x100) temp = ~(temp &gt;&gt; 31); dst[x + y * dst_stride + pos] = temp; } while (0)</cpp:value></cpp:define>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>d</name> <init>= <expr><name><name>dither</name><index>[<expr><name>y</name><operator>&amp;</operator><literal type="number">7</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>x</name> <operator>+=</operator> <literal type="number">8</literal></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>temp</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>STORE</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>STORE</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>STORE</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>STORE</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>STORE</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>STORE</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>STORE</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>STORE</name><argument_list>(<argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>filter</name><parameter_list>(<parameter><decl><type><name>USPPContext</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name><name>dst</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name><name>src</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name><name>dst_stride</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name><name>src_stride</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>qp_store</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>qp_stride</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>count</name> <init>= <expr><literal type="number">1</literal><operator>&lt;&lt;</operator><name><name>p</name><operator>-&gt;</operator><name>log2_count</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>is_chroma</name> <init>= <expr><operator>!</operator><operator>!</operator><name>i</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>w</name> <init>= <expr><call><name>AV_CEIL_RSHIFT</name><argument_list>(<argument><expr><name>width</name></expr></argument>, <argument><expr><ternary><condition><expr><name>is_chroma</name></expr> ?</condition><then> <expr><name><name>p</name><operator>-&gt;</operator><name>hsub</name></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>h</name> <init>= <expr><call><name>AV_CEIL_RSHIFT</name><argument_list>(<argument><expr><name>height</name></expr></argument>, <argument><expr><ternary><condition><expr><name>is_chroma</name></expr> ?</condition><then> <expr><name><name>p</name><operator>-&gt;</operator><name>vsub</name></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>stride</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>temp_stride</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>block</name> <init>= <expr><name>BLOCK</name> <operator>&gt;&gt;</operator> <operator>(</operator><ternary><condition><expr><name>is_chroma</name></expr> ?</condition><then> <expr><name><name>p</name><operator>-&gt;</operator><name>hsub</name></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>src</name><index>[<expr><name>i</name></expr>]</index></name> <operator>||</operator> <operator>!</operator><name><name>dst</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>h</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>index</name> <init>= <expr><name>block</name> <operator>+</operator> <name>block</name> <operator>*</operator> <name>stride</name> <operator>+</operator> <name>y</name> <operator>*</operator> <name>stride</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>src</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name>index</name></expr></argument>, <argument><expr><name><name>src</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name>y</name> <operator>*</operator> <name><name>src_stride</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>w</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>block</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>src</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>index</name> <operator>-</operator> <name>x</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>src</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>index</name> <operator>+</operator> <name>x</name></expr> ]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>src</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>index</name> <operator>+</operator> <name>w</name> <operator>+</operator> <name>x</name></expr> ]</index></name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>src</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>index</name> <operator>+</operator> <name>w</name> <operator>-</operator> <name>x</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>block</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>src</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <operator>(</operator> <name>block</name><operator>-</operator><literal type="number">1</literal><operator>-</operator><name>y</name><operator>)</operator> <operator>*</operator> <name>stride</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>src</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <operator>(</operator> <name>y</name><operator>+</operator><name>block</name> <operator>)</operator> <operator>*</operator> <name>stride</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>src</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <operator>(</operator><name>h</name><operator>+</operator><name>block</name> <operator>+</operator><name>y</name><operator>)</operator> <operator>*</operator> <name>stride</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>src</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <operator>(</operator><name>h</name><operator>-</operator><name>y</name><operator>+</operator><name>block</name><operator>-</operator><literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>stride</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>stride</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>temp</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name>h</name> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <name>block</name><operator>)</operator> <operator>*</operator> <name>stride</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int16_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>qp</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>quality</name></name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>qp</name></name> <operator>*</operator> <name>FF_QP2LAMBDA</name></expr>;</expr_stmt></block_content></block></if>

<else>else <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>qpsum</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>qpcount</name> <init>= <expr><operator>(</operator><name>height</name><operator>&gt;&gt;</operator><literal type="number">4</literal><operator>)</operator> <operator>*</operator> <operator>(</operator><name>height</name><operator>&gt;&gt;</operator><literal type="number">4</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <operator>(</operator><name>height</name><operator>&gt;&gt;</operator><literal type="number">4</literal><operator>)</operator></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <operator>(</operator><name>width</name><operator>&gt;&gt;</operator><literal type="number">4</literal><operator>)</operator></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name>qpsum</name> <operator>+=</operator> <name><name>qp_store</name><index>[<expr><name>x</name> <operator>+</operator> <name>y</name> <operator>*</operator> <name>qp_stride</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></for>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>quality</name></name> <operator>=</operator> <call><name>ff_norm_qscale</name><argument_list>(<argument><expr><operator>(</operator><name>qpsum</name> <operator>+</operator> <name>qpcount</name><operator>/</operator><literal type="number">2</literal><operator>)</operator> <operator>/</operator> <name>qpcount</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>qscale_type</name></name></expr></argument>)</argument_list></call> <operator>*</operator> <name>FF_QP2LAMBDA</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <name>height</name> <operator>+</operator> <name>BLOCK</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator> <name>width</name> <operator>+</operator> <name>BLOCK</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>x1</name> <init>= <expr><name><name>offset</name><index>[<expr><name>i</name><operator>+</operator><name>count</name><operator>-</operator><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>y1</name> <init>= <expr><name><name>offset</name><index>[<expr><name>i</name><operator>+</operator><name>count</name><operator>-</operator><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>x1c</name> <init>= <expr><name>x1</name> <operator>&gt;&gt;</operator> <name><name>p</name><operator>-&gt;</operator><name>hsub</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>y1c</name> <init>= <expr><name>y1</name> <operator>&gt;&gt;</operator> <name><name>p</name><operator>-&gt;</operator><name>vsub</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>BLOCKc</name> <init>= <expr><name>BLOCK</name> <operator>&gt;&gt;</operator> <name><name>p</name><operator>-&gt;</operator><name>hsub</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>offset</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVPacket</name></type> <name>pkt</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>got_pkt_ptr</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_init_packet</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pkt</name><operator>.</operator><name>data</name></name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>outbuf</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pkt</name><operator>.</operator><name>size</name></name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>outbuf_size</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>x1</name> <operator>+</operator> <name>y1</name> <operator>*</operator> <name><name>p</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>src</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name>x1c</name> <operator>+</operator> <name>y1c</name> <operator>*</operator> <name><name>p</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>src</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <name>x1c</name> <operator>+</operator> <name>y1c</name> <operator>*</operator> <name><name>p</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>format</name></name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>avctx_enc</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>pix_fmt</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>avcodec_encode_video2</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>avctx_enc</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pkt</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>frame</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>got_pkt_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>avctx_enc</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Encoding failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>frame_dec</name></name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>avctx_enc</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>coded_frame</name></expr>;</expr_stmt>

<expr_stmt><expr><name>offset</name> <operator>=</operator> <operator>(</operator><name>BLOCK</name><operator>-</operator><name>x1</name><operator>)</operator> <operator>+</operator> <operator>(</operator><name>BLOCK</name><operator>-</operator><name>y1</name><operator>)</operator> <operator>*</operator> <name><name>p</name><operator>-&gt;</operator><name>frame_dec</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>temp</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>x</name> <operator>+</operator> <name>y</name> <operator>*</operator> <name><name>p</name><operator>-&gt;</operator><name>temp_stride</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name> <operator>+=</operator> <name><name>p</name><operator>-&gt;</operator><name>frame_dec</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>x</name> <operator>+</operator> <name>y</name> <operator>*</operator> <name><name>p</name><operator>-&gt;</operator><name>frame_dec</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>offset</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for></block_content></block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>src</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>||</operator> <operator>!</operator><name><name>dst</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name>offset</name> <operator>=</operator> <operator>(</operator><name>BLOCKc</name><operator>-</operator><name>x1c</name><operator>)</operator> <operator>+</operator> <operator>(</operator><name>BLOCKc</name><operator>-</operator><name>y1c</name><operator>)</operator> <operator>*</operator> <name><name>p</name><operator>-&gt;</operator><name>frame_dec</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <call><name>AV_CEIL_RSHIFT</name><argument_list>(<argument><expr><name>height</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>vsub</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <call><name>AV_CEIL_RSHIFT</name><argument_list>(<argument><expr><name>width</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>hsub</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>temp</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>x</name> <operator>+</operator> <name>y</name> <operator>*</operator> <name><name>p</name><operator>-&gt;</operator><name>temp_stride</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>]</index></name> <operator>+=</operator> <name><name>p</name><operator>-&gt;</operator><name>frame_dec</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>x</name> <operator>+</operator> <name>y</name> <operator>*</operator> <name><name>p</name><operator>-&gt;</operator><name>frame_dec</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name>offset</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>temp</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>x</name> <operator>+</operator> <name>y</name> <operator>*</operator> <name><name>p</name><operator>-&gt;</operator><name>temp_stride</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>]</index></name> <operator>+=</operator> <name><name>p</name><operator>-&gt;</operator><name>frame_dec</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>x</name> <operator>+</operator> <name>y</name> <operator>*</operator> <name><name>p</name><operator>-&gt;</operator><name>frame_dec</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <name>offset</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>is_chroma</name> <init>= <expr><operator>!</operator><operator>!</operator><name>j</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>dst</name><index>[<expr><name>j</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>store_slice_c</name><argument_list>(<argument><expr><name><name>dst</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>temp</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>dst_stride</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>temp_stride</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>,

<argument><expr><call><name>AV_CEIL_RSHIFT</name><argument_list>(<argument><expr><name>width</name></expr></argument>, <argument><expr><ternary><condition><expr><name>is_chroma</name></expr> ?</condition><then> <expr><name><name>p</name><operator>-&gt;</operator><name>hsub</name></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>AV_CEIL_RSHIFT</name><argument_list>(<argument><expr><name>height</name></expr></argument>, <argument><expr><ternary><condition><expr><name>is_chroma</name></expr> ?</condition><then> <expr><name><name>p</name><operator>-&gt;</operator><name>vsub</name></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><literal type="number">8</literal><operator>-</operator><name><name>p</name><operator>-&gt;</operator><name>log2_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>query_formats</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>enum</name> <name>AVPixelFormat</name></name></type> <name><name>pix_fmts</name><index>[]</index></name> <init>= <expr><block>{

<expr><name>AV_PIX_FMT_YUV444P</name></expr>,

<expr><name>AV_PIX_FMT_YUV420P</name></expr>,

<expr><name>AV_PIX_FMT_YUV410P</name></expr>,

<expr><name>AV_PIX_FMT_YUVJ444P</name></expr>,

<expr><name>AV_PIX_FMT_YUVJ420P</name></expr>,

<expr><name>AV_PIX_FMT_GRAY8</name></expr>,

<expr><name>AV_PIX_FMT_NONE</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFilterFormats</name> <modifier>*</modifier></type><name>fmts_list</name> <init>= <expr><call><name>ff_make_format_list</name><argument_list>(<argument><expr><name>pix_fmts</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>fmts_list</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>ff_set_common_formats</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>fmts_list</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>config_input</name><parameter_list>(<parameter><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>inlink</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>inlink</name><operator>-&gt;</operator><name>dst</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>USPPContext</name> <modifier>*</modifier></type><name>uspp</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>height</name> <init>= <expr><name><name>inlink</name><operator>-&gt;</operator><name>h</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>width</name> <init>= <expr><name><name>inlink</name><operator>-&gt;</operator><name>w</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>AVPixFmtDescriptor</name> <modifier>*</modifier></type><name>desc</name> <init>= <expr><call><name>av_pix_fmt_desc_get</name><argument_list>(<argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>format</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVCodec</name> <modifier>*</modifier></type><name>enc</name> <init>= <expr><call><name>avcodec_find_encoder</name><argument_list>(<argument><expr><name>AV_CODEC_ID_SNOW</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>enc</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"SNOW encoder not found.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>uspp</name><operator>-&gt;</operator><name>hsub</name></name> <operator>=</operator> <name><name>desc</name><operator>-&gt;</operator><name>log2_chroma_w</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>uspp</name><operator>-&gt;</operator><name>vsub</name></name> <operator>=</operator> <name><name>desc</name><operator>-&gt;</operator><name>log2_chroma_h</name></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>is_chroma</name> <init>= <expr><operator>!</operator><operator>!</operator><name>i</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>w</name> <init>= <expr><operator>(</operator><name>width</name> <operator>+</operator> <literal type="number">4</literal> <operator>*</operator> <name>BLOCK</name><operator>-</operator><literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <operator>(</operator><operator>~</operator><operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>BLOCK</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>h</name> <init>= <expr><operator>(</operator><name>height</name> <operator>+</operator> <literal type="number">4</literal> <operator>*</operator> <name>BLOCK</name><operator>-</operator><literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <operator>(</operator><operator>~</operator><operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>BLOCK</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>is_chroma</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>w</name> <operator>=</operator> <call><name>AV_CEIL_RSHIFT</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><name><name>uspp</name><operator>-&gt;</operator><name>hsub</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>h</name> <operator>=</operator> <call><name>AV_CEIL_RSHIFT</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name><name>uspp</name><operator>-&gt;</operator><name>vsub</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>uspp</name><operator>-&gt;</operator><name>temp_stride</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>w</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>uspp</name><operator>-&gt;</operator><name>temp</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>av_malloc_array</name><argument_list>(<argument><expr><name><name>uspp</name><operator>-&gt;</operator><name>temp_stride</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>h</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int16_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>uspp</name><operator>-&gt;</operator><name>src</name> <index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>av_malloc_array</name><argument_list>(<argument><expr><name><name>uspp</name><operator>-&gt;</operator><name>temp_stride</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>h</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint8_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><name><name>uspp</name><operator>-&gt;</operator><name>log2_count</name></name><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx_enc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVDictionary</name> <modifier>*</modifier></type><name>opts</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>uspp</name><operator>-&gt;</operator><name>avctx_enc</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>avcodec_alloc_context3</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>avctx_enc</name> <operator>=</operator> <name><name>uspp</name><operator>-&gt;</operator><name>avctx_enc</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avctx_enc</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator> <name>width</name> <operator>+</operator> <name>BLOCK</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avctx_enc</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <name>height</name> <operator>+</operator> <name>BLOCK</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avctx_enc</name><operator>-&gt;</operator><name>time_base</name></name> <operator>=</operator> <operator>(</operator><name>AVRational</name><operator>)</operator><block>{<expr><literal type="number">1</literal></expr>,<expr><literal type="number">25</literal></expr>}</block></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>avctx_enc</name><operator>-&gt;</operator><name>gop_size</name></name> <operator>=</operator> <name>INT_MAX</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avctx_enc</name><operator>-&gt;</operator><name>max_b_frames</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avctx_enc</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <name><name>inlink</name><operator>-&gt;</operator><name>format</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avctx_enc</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <name>AV_CODEC_FLAG_QSCALE</name> <operator>|</operator> <name>AV_CODEC_FLAG_LOW_DELAY</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avctx_enc</name><operator>-&gt;</operator><name>strict_std_compliance</name></name> <operator>=</operator> <name>FF_COMPLIANCE_EXPERIMENTAL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avctx_enc</name><operator>-&gt;</operator><name>global_quality</name></name> <operator>=</operator> <literal type="number">123</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_dict_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name>opts</name></expr></argument>, <argument><expr><literal type="string">"no_bitstream"</literal></expr></argument>, <argument><expr><literal type="string">"1"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>avcodec_open2</name><argument_list>(<argument><expr><name>avctx_enc</name></expr></argument>, <argument><expr><name>enc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_dict_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name><name>avctx_enc</name><operator>-&gt;</operator><name>codec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>uspp</name><operator>-&gt;</operator><name>outbuf_size</name></name> <operator>=</operator> <operator>(</operator><name>width</name> <operator>+</operator> <name>BLOCK</name><operator>)</operator> <operator>*</operator> <operator>(</operator><name>height</name> <operator>+</operator> <name>BLOCK</name><operator>)</operator> <operator>*</operator> <literal type="number">10</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>uspp</name><operator>-&gt;</operator><name>frame</name></name> <operator>=</operator> <call><name>av_frame_alloc</name><argument_list>()</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>uspp</name><operator>-&gt;</operator><name>outbuf</name></name> <operator>=</operator> <call><name>av_malloc</name><argument_list>(<argument><expr><name><name>uspp</name><operator>-&gt;</operator><name>outbuf_size</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>filter_frame</name><parameter_list>(<parameter><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>inlink</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>in</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>inlink</name><operator>-&gt;</operator><name>dst</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>USPPContext</name> <modifier>*</modifier></type><name>uspp</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>outlink</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>outputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>out</name> <init>= <expr><name>in</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>qp_stride</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>qp_table</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>uspp</name><operator>-&gt;</operator><name>qp</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>qp_table</name> <operator>=</operator> <call><name>av_frame_get_qp_table</name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>qp_stride</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>uspp</name><operator>-&gt;</operator><name>qscale_type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>qp_table</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>uspp</name><operator>-&gt;</operator><name>use_bframe_qp</name></name> <operator>&amp;&amp;</operator> <name><name>in</name><operator>-&gt;</operator><name>pict_type</name></name> <operator>!=</operator> <name>AV_PICTURE_TYPE_B</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>w</name></decl>, <decl><type ref="prev"/><name>h</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>qp_stride</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>w</name> <operator>=</operator> <call><name>AV_CEIL_RSHIFT</name><argument_list>(<argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>w</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>h</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>w</name> <operator>=</operator> <name>qp_stride</name></expr>;</expr_stmt>

<expr_stmt><expr><name>h</name> <operator>=</operator> <call><name>AV_CEIL_RSHIFT</name><argument_list>(<argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>h</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>w</name> <operator>*</operator> <name>h</name> <operator>&gt;</operator> <name><name>uspp</name><operator>-&gt;</operator><name>non_b_qp_alloc_size</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>av_reallocp_array</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>uspp</name><operator>-&gt;</operator><name>non_b_qp_table</name></name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>uspp</name><operator>-&gt;</operator><name>non_b_qp_alloc_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>uspp</name><operator>-&gt;</operator><name>non_b_qp_alloc_size</name></name> <operator>=</operator> <name>w</name> <operator>*</operator> <name>h</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name>w</name> <operator>*</operator> <name>h</name> <operator>&lt;=</operator> <name><name>uspp</name><operator>-&gt;</operator><name>non_b_qp_alloc_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>uspp</name><operator>-&gt;</operator><name>non_b_qp_table</name></name></expr></argument>, <argument><expr><name>qp_table</name></expr></argument>, <argument><expr><name>w</name> <operator>*</operator> <name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>uspp</name><operator>-&gt;</operator><name>log2_count</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>is_disabled</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>uspp</name><operator>-&gt;</operator><name>use_bframe_qp</name></name> <operator>&amp;&amp;</operator> <name><name>uspp</name><operator>-&gt;</operator><name>non_b_qp_table</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>qp_table</name> <operator>=</operator> <name><name>uspp</name><operator>-&gt;</operator><name>non_b_qp_table</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>qp_table</name> <operator>||</operator> <name><name>uspp</name><operator>-&gt;</operator><name>qp</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>av_frame_is_writable</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>(</operator><name><name>inlink</name><operator>-&gt;</operator><name>w</name></name> <operator>&amp;</operator> <literal type="number">7</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>inlink</name><operator>-&gt;</operator><name>h</name></name> <operator>&amp;</operator> <literal type="number">7</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>aligned_w</name> <init>= <expr><call><name>FFALIGN</name><argument_list>(<argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>w</name></name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>aligned_h</name> <init>= <expr><call><name>FFALIGN</name><argument_list>(<argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>h</name></name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>out</name> <operator>=</operator> <call><name>ff_get_video_buffer</name><argument_list>(<argument><expr><name>outlink</name></expr></argument>, <argument><expr><name>aligned_w</name></expr></argument>, <argument><expr><name>aligned_h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>out</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_frame_copy_props</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator> <name><name>in</name><operator>-&gt;</operator><name>width</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <name><name>in</name><operator>-&gt;</operator><name>height</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>filter</name><argument_list>(<argument><expr><name>uspp</name></expr></argument>, <argument><expr><name><name>out</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>in</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>out</name><operator>-&gt;</operator><name>linesize</name></name></expr></argument>, <argument><expr><name><name>in</name><operator>-&gt;</operator><name>linesize</name></name></expr></argument>,

<argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>w</name></name></expr></argument>, <argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>h</name></name></expr></argument>, <argument><expr><name>qp_table</name></expr></argument>, <argument><expr><name>qp_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>in</name> <operator>!=</operator> <name>out</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>in</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_image_copy_plane</name><argument_list>(<argument><expr><name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>,

<argument><expr><name><name>in</name> <operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>in</name> <operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>,

<argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>w</name></name></expr></argument>, <argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>h</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>ff_filter_frame</name><argument_list>(<argument><expr><name>outlink</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>void</name></type> <name>uninit</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>USPPContext</name> <modifier>*</modifier></type><name>uspp</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>uspp</name><operator>-&gt;</operator><name>temp</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>uspp</name><operator>-&gt;</operator><name>src</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name><name>uspp</name><operator>-&gt;</operator><name>log2_count</name></name><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>avcodec_close</name><argument_list>(<argument><expr><name><name>uspp</name><operator>-&gt;</operator><name>avctx_enc</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>uspp</name><operator>-&gt;</operator><name>avctx_enc</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>uspp</name><operator>-&gt;</operator><name>non_b_qp_table</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>uspp</name><operator>-&gt;</operator><name>outbuf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>uspp</name><operator>-&gt;</operator><name>frame</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVFilterPad</name></type> <name><name>uspp_inputs</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"default"</literal></expr>,

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,

<expr><operator>.</operator><name>config_props</name> <operator>=</operator> <name>config_input</name></expr>,

<expr><operator>.</operator><name>filter_frame</name> <operator>=</operator> <name>filter_frame</name></expr>,

}</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVFilterPad</name></type> <name><name>uspp_outputs</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"default"</literal></expr>,

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,

}</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFilter</name></type> <name>ff_vf_uspp</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"uspp"</literal></expr>,

<expr><operator>.</operator><name>description</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"Apply Ultra Simple / Slow Post-processing filter."</literal></expr></argument>)</argument_list></call></expr>,

<expr><operator>.</operator><name>priv_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>USPPContext</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><operator>.</operator><name>uninit</name> <operator>=</operator> <name>uninit</name></expr>,

<expr><operator>.</operator><name>query_formats</name> <operator>=</operator> <name>query_formats</name></expr>,

<expr><operator>.</operator><name>inputs</name> <operator>=</operator> <name>uspp_inputs</name></expr>,

<expr><operator>.</operator><name>outputs</name> <operator>=</operator> <name>uspp_outputs</name></expr>,

<expr><operator>.</operator><name>priv_class</name> <operator>=</operator> <operator>&amp;</operator><name>uspp_class</name></expr>,

<expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>AVFILTER_FLAG_SUPPORT_TIMELINE_INTERNAL</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

</unit>
