<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavfilter\af_replaygain.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avassert.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/channel_layout.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"audio.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avfilter.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HISTOGRAM_SLOTS</name></cpp:macro> <cpp:value>12000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BUTTER_ORDER</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YULE_ORDER</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <name>ReplayGainFreqInfo</name> <block>{

<decl_stmt><decl><type><name>int</name></type> <name>sample_rate</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name><name>BYule</name><index>[<expr><name>YULE_ORDER</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name><name>AYule</name><index>[<expr><name>YULE_ORDER</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name><name>BButter</name><index>[<expr><name>BUTTER_ORDER</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name><name>AButter</name><index>[<expr><name>BUTTER_ORDER</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

}</block></struct></type> <name>ReplayGainFreqInfo</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>ReplayGainFreqInfo</name></type> <name><name>freqinfos</name><index>[]</index></name> <init>=

<expr><block>{

<expr><block>{

<expr><literal type="number">192000</literal></expr>,

<expr><block>{ <expr><literal type="number">0.01184742123123</literal></expr>, <expr><operator>-</operator><literal type="number">0.04631092400086</literal></expr>, <expr><literal type="number">0.06584226961238</literal></expr>,

<expr><operator>-</operator><literal type="number">0.02165588522478</literal></expr>, <expr><operator>-</operator><literal type="number">0.05656260778952</literal></expr>, <expr><literal type="number">0.08607493592760</literal></expr>,

<expr><operator>-</operator><literal type="number">0.03375544339786</literal></expr>, <expr><operator>-</operator><literal type="number">0.04216579932754</literal></expr>, <expr><literal type="number">0.06416711490648</literal></expr>,

<expr><operator>-</operator><literal type="number">0.03444708260844</literal></expr>, <expr><literal type="number">0.00697275872241</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">1.00000000000000</literal></expr>, <expr><operator>-</operator><literal type="number">5.24727318348167</literal></expr>, <expr><literal type="number">10.60821585192244</literal></expr>,

<expr><operator>-</operator><literal type="number">8.74127665810413</literal></expr>, <expr><operator>-</operator><literal type="number">1.33906071371683</literal></expr>, <expr><literal type="number">8.07972882096606</literal></expr>,

<expr><operator>-</operator><literal type="number">5.46179918950847</literal></expr>, <expr><literal type="number">0.54318070652536</literal></expr>, <expr><literal type="number">0.87450969224280</literal></expr>,

<expr><operator>-</operator><literal type="number">0.34656083539754</literal></expr>, <expr><literal type="number">0.03034796843589</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0.99653501465135</literal></expr>, <expr><operator>-</operator><literal type="number">1.99307002930271</literal></expr>, <expr><literal type="number">0.99653501465135</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">1.00000000000000</literal></expr>, <expr><operator>-</operator><literal type="number">1.99305802314321</literal></expr>, <expr><literal type="number">0.99308203546221</literal></expr> }</block></expr>,

}</block></expr>,

<expr><block>{

<expr><literal type="number">176400</literal></expr>,

<expr><block>{ <expr><literal type="number">0.00268568524529</literal></expr>, <expr><operator>-</operator><literal type="number">0.00852379426080</literal></expr>, <expr><literal type="number">0.00852704191347</literal></expr>,

<expr><literal type="number">0.00146116310295</literal></expr>, <expr><operator>-</operator><literal type="number">0.00950855828762</literal></expr>, <expr><literal type="number">0.00625449515499</literal></expr>,

<expr><literal type="number">0.00116183868722</literal></expr>, <expr><operator>-</operator><literal type="number">0.00362461417136</literal></expr>, <expr><literal type="number">0.00203961000134</literal></expr>,

<expr><operator>-</operator><literal type="number">0.00050664587933</literal></expr>, <expr><literal type="number">0.00004327455427</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">1.00000000000000</literal></expr>, <expr><operator>-</operator><literal type="number">5.57512782763045</literal></expr>, <expr><literal type="number">12.44291056065794</literal></expr>,

<expr><operator>-</operator><literal type="number">12.87462799681221</literal></expr>, <expr><literal type="number">3.08554846961576</literal></expr>, <expr><literal type="number">6.62493459880692</literal></expr>,

<expr><operator>-</operator><literal type="number">7.07662766313248</literal></expr>, <expr><literal type="number">2.51175542736441</literal></expr>, <expr><literal type="number">0.06731510802735</literal></expr>,

<expr><operator>-</operator><literal type="number">0.24567753819213</literal></expr>, <expr><literal type="number">0.03961404162376</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0.99622916581118</literal></expr>, <expr><operator>-</operator><literal type="number">1.99245833162236</literal></expr>, <expr><literal type="number">0.99622916581118</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">1.00000000000000</literal></expr>, <expr><operator>-</operator><literal type="number">1.99244411238133</literal></expr>, <expr><literal type="number">0.99247255086339</literal></expr> }</block></expr>,

}</block></expr>,

<expr><block>{

<expr><literal type="number">144000</literal></expr>,

<expr><block>{ <expr><literal type="number">0.00639682359450</literal></expr>, <expr><operator>-</operator><literal type="number">0.02556437970955</literal></expr>, <expr><literal type="number">0.04230854400938</literal></expr>,

<expr><operator>-</operator><literal type="number">0.03722462201267</literal></expr>, <expr><literal type="number">0.01718514827295</literal></expr>, <expr><literal type="number">0.00610592243009</literal></expr>,

<expr><operator>-</operator><literal type="number">0.03065965747365</literal></expr>, <expr><literal type="number">0.04345745003539</literal></expr>, <expr><operator>-</operator><literal type="number">0.03298592681309</literal></expr>,

<expr><literal type="number">0.01320937236809</literal></expr>, <expr><operator>-</operator><literal type="number">0.00220304127757</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">1.00000000000000</literal></expr>, <expr><operator>-</operator><literal type="number">6.14814623523425</literal></expr>, <expr><literal type="number">15.80002457141566</literal></expr>,

<expr><operator>-</operator><literal type="number">20.78487587686937</literal></expr>, <expr><literal type="number">11.98848552310315</literal></expr>, <expr><literal type="number">3.36462015062606</literal></expr>,

<expr><operator>-</operator><literal type="number">10.22419868359470</literal></expr>, <expr><literal type="number">6.65599702146473</literal></expr>, <expr><operator>-</operator><literal type="number">1.67141861110485</literal></expr>,

<expr><operator>-</operator><literal type="number">0.05417956536718</literal></expr>, <expr><literal type="number">0.07374767867406</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0.99538268958706</literal></expr>, <expr><operator>-</operator><literal type="number">1.99076537917413</literal></expr>, <expr><literal type="number">0.99538268958706</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">1.00000000000000</literal></expr>, <expr><operator>-</operator><literal type="number">1.99074405950505</literal></expr>, <expr><literal type="number">0.99078669884321</literal></expr> }</block></expr>,

}</block></expr>,

<expr><block>{

<expr><literal type="number">128000</literal></expr>,

<expr><block>{ <expr><literal type="number">0.00553120584305</literal></expr>, <expr><operator>-</operator><literal type="number">0.02112620545016</literal></expr>, <expr><literal type="number">0.03549076243117</literal></expr>,

<expr><operator>-</operator><literal type="number">0.03362498312306</literal></expr>, <expr><literal type="number">0.01425867248183</literal></expr>, <expr><literal type="number">0.01344686928787</literal></expr>,

<expr><operator>-</operator><literal type="number">0.03392770787836</literal></expr>, <expr><literal type="number">0.03464136459530</literal></expr>, <expr><operator>-</operator><literal type="number">0.02039116051549</literal></expr>,

<expr><literal type="number">0.00667420794705</literal></expr>, <expr><operator>-</operator><literal type="number">0.00093763762995</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">1.00000000000000</literal></expr>, <expr><operator>-</operator><literal type="number">6.14581710839925</literal></expr>, <expr><literal type="number">16.04785903675838</literal></expr>,

<expr><operator>-</operator><literal type="number">22.19089131407749</literal></expr>, <expr><literal type="number">15.24756471580286</literal></expr>, <expr><operator>-</operator><literal type="number">0.52001440400238</literal></expr>,

<expr><operator>-</operator><literal type="number">8.00488641699940</literal></expr>, <expr><literal type="number">6.60916094768855</literal></expr>, <expr><operator>-</operator><literal type="number">2.37856022810923</literal></expr>,

<expr><literal type="number">0.33106947986101</literal></expr>, <expr><literal type="number">0.00459820832036</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0.99480702681278</literal></expr>, <expr><operator>-</operator><literal type="number">1.98961405362557</literal></expr>, <expr><literal type="number">0.99480702681278</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">1.00000000000000</literal></expr>, <expr><operator>-</operator><literal type="number">1.98958708647324</literal></expr>, <expr><literal type="number">0.98964102077790</literal></expr> }</block></expr>,

}</block></expr>,

<expr><block>{

<expr><literal type="number">112000</literal></expr>,

<expr><block>{ <expr><literal type="number">0.00528778718259</literal></expr>, <expr><operator>-</operator><literal type="number">0.01893240907245</literal></expr>, <expr><literal type="number">0.03185982561867</literal></expr>,

<expr><operator>-</operator><literal type="number">0.02926260297838</literal></expr>, <expr><literal type="number">0.00715743034072</literal></expr>, <expr><literal type="number">0.01985743355827</literal></expr>,

<expr><operator>-</operator><literal type="number">0.03222614850941</literal></expr>, <expr><literal type="number">0.02565681978192</literal></expr>, <expr><operator>-</operator><literal type="number">0.01210662313473</literal></expr>,

<expr><literal type="number">0.00325436284541</literal></expr>, <expr><operator>-</operator><literal type="number">0.00044173593001</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">1.00000000000000</literal></expr>, <expr><operator>-</operator><literal type="number">6.24932108456288</literal></expr>, <expr><literal type="number">17.42344320538476</literal></expr>,

<expr><operator>-</operator><literal type="number">27.86819709054896</literal></expr>, <expr><literal type="number">26.79087344681326</literal></expr>,<expr><operator>-</operator><literal type="number">13.43711081485123</literal></expr>,

<expr><operator>-</operator><literal type="number">0.66023612948173</literal></expr>, <expr><literal type="number">6.03658091814935</literal></expr>, <expr><operator>-</operator><literal type="number">4.24926577030310</literal></expr>,

<expr><literal type="number">1.40829268709186</literal></expr>, <expr><operator>-</operator><literal type="number">0.19480852628112</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0.99406737810867</literal></expr>, <expr><operator>-</operator><literal type="number">1.98813475621734</literal></expr>, <expr><literal type="number">0.99406737810867</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">1.00000000000000</literal></expr>, <expr><operator>-</operator><literal type="number">1.98809955990514</literal></expr>, <expr><literal type="number">0.98816995252954</literal></expr> }</block></expr>,

}</block></expr>,

<expr><block>{

<expr><literal type="number">96000</literal></expr>,

<expr><block>{ <expr><literal type="number">0.00588138296683</literal></expr>, <expr><operator>-</operator><literal type="number">0.01613559730421</literal></expr>, <expr><literal type="number">0.02184798954216</literal></expr>,

<expr><operator>-</operator><literal type="number">0.01742490405317</literal></expr>, <expr><literal type="number">0.00464635643780</literal></expr>, <expr><literal type="number">0.01117772513205</literal></expr>,

<expr><operator>-</operator><literal type="number">0.02123865824368</literal></expr>, <expr><literal type="number">0.01959354413350</literal></expr>, <expr><operator>-</operator><literal type="number">0.01079720643523</literal></expr>,

<expr><literal type="number">0.00352183686289</literal></expr>, <expr><operator>-</operator><literal type="number">0.00063124341421</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">1.00000000000000</literal></expr>, <expr><operator>-</operator><literal type="number">5.97808823642008</literal></expr>, <expr><literal type="number">16.21362507964068</literal></expr>,

<expr><operator>-</operator><literal type="number">25.72923730652599</literal></expr>, <expr><literal type="number">25.40470663139513</literal></expr>,<expr><operator>-</operator><literal type="number">14.66166287771134</literal></expr>,

<expr><literal type="number">2.81597484359752</literal></expr>, <expr><literal type="number">2.51447125969733</literal></expr>, <expr><operator>-</operator><literal type="number">2.23575306985286</literal></expr>,

<expr><literal type="number">0.75788151036791</literal></expr>, <expr><operator>-</operator><literal type="number">0.10078025199029</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0.99308203517541</literal></expr>, <expr><operator>-</operator><literal type="number">1.98616407035082</literal></expr>, <expr><literal type="number">0.99308203517541</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">1.00000000000000</literal></expr>, <expr><operator>-</operator><literal type="number">1.98611621154089</literal></expr>, <expr><literal type="number">0.98621192916075</literal></expr> }</block></expr>,

}</block></expr>,

<expr><block>{

<expr><literal type="number">88200</literal></expr>,

<expr><block>{ <expr><literal type="number">0.02667482047416</literal></expr>, <expr><operator>-</operator><literal type="number">0.11377479336097</literal></expr>, <expr><literal type="number">0.23063167910965</literal></expr>,

<expr><operator>-</operator><literal type="number">0.30726477945593</literal></expr>, <expr><literal type="number">0.33188520686529</literal></expr>, <expr><operator>-</operator><literal type="number">0.33862680249063</literal></expr>,

<expr><literal type="number">0.31807161531340</literal></expr>, <expr><operator>-</operator><literal type="number">0.23730796929880</literal></expr>, <expr><literal type="number">0.12273894790371</literal></expr>,

<expr><operator>-</operator><literal type="number">0.03840017967282</literal></expr>, <expr><literal type="number">0.00549673387936</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">1.00000000000000</literal></expr>, <expr><operator>-</operator><literal type="number">6.31836451657302</literal></expr>, <expr><literal type="number">18.31351310801799</literal></expr>,

<expr><operator>-</operator><literal type="number">31.88210014815921</literal></expr>, <expr><literal type="number">36.53792146976740</literal></expr>,<expr><operator>-</operator><literal type="number">28.23393036467559</literal></expr>,

<expr><literal type="number">14.24725258227189</literal></expr>, <expr><operator>-</operator><literal type="number">4.04670980012854</literal></expr>, <expr><literal type="number">0.18865757280515</literal></expr>,

<expr><literal type="number">0.25420333563908</literal></expr>, <expr><operator>-</operator><literal type="number">0.06012333531065</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0.99247255046129</literal></expr>, <expr><operator>-</operator><literal type="number">1.98494510092259</literal></expr>, <expr><literal type="number">0.99247255046129</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">1.00000000000000</literal></expr>, <expr><operator>-</operator><literal type="number">1.98488843762335</literal></expr>, <expr><literal type="number">0.98500176422183</literal></expr> }</block></expr>,

}</block></expr>,

<expr><block>{

<expr><literal type="number">64000</literal></expr>,

<expr><block>{ <expr><literal type="number">0.02613056568174</literal></expr>, <expr><operator>-</operator><literal type="number">0.08128786488109</literal></expr>, <expr><literal type="number">0.14937282347325</literal></expr>,

<expr><operator>-</operator><literal type="number">0.21695711675126</literal></expr>, <expr><literal type="number">0.25010286673402</literal></expr>, <expr><operator>-</operator><literal type="number">0.23162283619278</literal></expr>,

<expr><literal type="number">0.17424041833052</literal></expr>, <expr><operator>-</operator><literal type="number">0.10299599216680</literal></expr>, <expr><literal type="number">0.04258696481981</literal></expr>,

<expr><operator>-</operator><literal type="number">0.00977952936493</literal></expr>, <expr><literal type="number">0.00105325558889</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">1.00000000000000</literal></expr>, <expr><operator>-</operator><literal type="number">5.73625477092119</literal></expr>, <expr><literal type="number">16.15249794355035</literal></expr>,

<expr><operator>-</operator><literal type="number">29.68654912464508</literal></expr>, <expr><literal type="number">39.55706155674083</literal></expr>,<expr><operator>-</operator><literal type="number">39.82524556246253</literal></expr>,

<expr><literal type="number">30.50605345013009</literal></expr>,<expr><operator>-</operator><literal type="number">17.43051772821245</literal></expr>, <expr><literal type="number">7.05154573908017</literal></expr>,

<expr><operator>-</operator><literal type="number">1.80783839720514</literal></expr>, <expr><literal type="number">0.22127840210813</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0.98964101933472</literal></expr>, <expr><operator>-</operator><literal type="number">1.97928203866944</literal></expr>, <expr><literal type="number">0.98964101933472</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">1.00000000000000</literal></expr>, <expr><operator>-</operator><literal type="number">1.97917472731009</literal></expr>, <expr><literal type="number">0.97938935002880</literal></expr> }</block></expr>,

}</block></expr>,

<expr><block>{

<expr><literal type="number">56000</literal></expr>,

<expr><block>{ <expr><literal type="number">0.03144914734085</literal></expr>, <expr><operator>-</operator><literal type="number">0.06151729206963</literal></expr>, <expr><literal type="number">0.08066788708145</literal></expr>,

<expr><operator>-</operator><literal type="number">0.09737939921516</literal></expr>, <expr><literal type="number">0.08943210803999</literal></expr>, <expr><operator>-</operator><literal type="number">0.06989984672010</literal></expr>,

<expr><literal type="number">0.04926972841044</literal></expr>, <expr><operator>-</operator><literal type="number">0.03161257848451</literal></expr>, <expr><literal type="number">0.01456837493506</literal></expr>,

<expr><operator>-</operator><literal type="number">0.00316015108496</literal></expr>, <expr><literal type="number">0.00132807215875</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">1.00000000000000</literal></expr>, <expr><operator>-</operator><literal type="number">4.87377313090032</literal></expr>, <expr><literal type="number">12.03922160140209</literal></expr>,

<expr><operator>-</operator><literal type="number">20.10151118381395</literal></expr>, <expr><literal type="number">25.10388534415171</literal></expr>,<expr><operator>-</operator><literal type="number">24.29065560815903</literal></expr>,

<expr><literal type="number">18.27158469090663</literal></expr>,<expr><operator>-</operator><literal type="number">10.45249552560593</literal></expr>, <expr><literal type="number">4.30319491872003</literal></expr>,

<expr><operator>-</operator><literal type="number">1.13716992070185</literal></expr>, <expr><literal type="number">0.14510733527035</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0.98816995007392</literal></expr>, <expr><operator>-</operator><literal type="number">1.97633990014784</literal></expr>, <expr><literal type="number">0.98816995007392</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">1.00000000000000</literal></expr>, <expr><operator>-</operator><literal type="number">1.97619994516973</literal></expr>, <expr><literal type="number">0.97647985512594</literal></expr> }</block></expr>,

}</block></expr>,

<expr><block>{

<expr><literal type="number">48000</literal></expr>,

<expr><block>{ <expr><literal type="number">0.03857599435200</literal></expr>, <expr><operator>-</operator><literal type="number">0.02160367184185</literal></expr>, <expr><operator>-</operator><literal type="number">0.00123395316851</literal></expr>,

<expr><operator>-</operator><literal type="number">0.00009291677959</literal></expr>, <expr><operator>-</operator><literal type="number">0.01655260341619</literal></expr>, <expr><literal type="number">0.02161526843274</literal></expr>,

<expr><operator>-</operator><literal type="number">0.02074045215285</literal></expr>, <expr><literal type="number">0.00594298065125</literal></expr>, <expr><literal type="number">0.00306428023191</literal></expr>,

<expr><literal type="number">0.00012025322027</literal></expr>, <expr><literal type="number">0.00288463683916</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">1.00000000000000</literal></expr>, <expr><operator>-</operator><literal type="number">3.84664617118067</literal></expr>, <expr><literal type="number">7.81501653005538</literal></expr>,

<expr><operator>-</operator><literal type="number">11.34170355132042</literal></expr>, <expr><literal type="number">13.05504219327545</literal></expr>,<expr><operator>-</operator><literal type="number">12.28759895145294</literal></expr>,

<expr><literal type="number">9.48293806319790</literal></expr>, <expr><operator>-</operator><literal type="number">5.87257861775999</literal></expr>, <expr><literal type="number">2.75465861874613</literal></expr>,

<expr><operator>-</operator><literal type="number">0.86984376593551</literal></expr>, <expr><literal type="number">0.13919314567432</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0.98621192462708</literal></expr>, <expr><operator>-</operator><literal type="number">1.97242384925416</literal></expr>, <expr><literal type="number">0.98621192462708</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">1.00000000000000</literal></expr>, <expr><operator>-</operator><literal type="number">1.97223372919527</literal></expr>, <expr><literal type="number">0.97261396931306</literal></expr> }</block></expr>,

}</block></expr>,

<expr><block>{

<expr><literal type="number">44100</literal></expr>,

<expr><block>{ <expr><literal type="number">0.05418656406430</literal></expr>, <expr><operator>-</operator><literal type="number">0.02911007808948</literal></expr>, <expr><operator>-</operator><literal type="number">0.00848709379851</literal></expr>,

<expr><operator>-</operator><literal type="number">0.00851165645469</literal></expr>, <expr><operator>-</operator><literal type="number">0.00834990904936</literal></expr>, <expr><literal type="number">0.02245293253339</literal></expr>,

<expr><operator>-</operator><literal type="number">0.02596338512915</literal></expr>, <expr><literal type="number">0.01624864962975</literal></expr>, <expr><operator>-</operator><literal type="number">0.00240879051584</literal></expr>,

<expr><literal type="number">0.00674613682247</literal></expr>, <expr><operator>-</operator><literal type="number">0.00187763777362</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">1.00000000000000</literal></expr>, <expr><operator>-</operator><literal type="number">3.47845948550071</literal></expr>, <expr><literal type="number">6.36317777566148</literal></expr>,

<expr><operator>-</operator><literal type="number">8.54751527471874</literal></expr>, <expr><literal type="number">9.47693607801280</literal></expr>, <expr><operator>-</operator><literal type="number">8.81498681370155</literal></expr>,

<expr><literal type="number">6.85401540936998</literal></expr>, <expr><operator>-</operator><literal type="number">4.39470996079559</literal></expr>, <expr><literal type="number">2.19611684890774</literal></expr>,

<expr><operator>-</operator><literal type="number">0.75104302451432</literal></expr>, <expr><literal type="number">0.13149317958808</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0.98500175787242</literal></expr>, <expr><operator>-</operator><literal type="number">1.97000351574484</literal></expr>, <expr><literal type="number">0.98500175787242</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">1.00000000000000</literal></expr>, <expr><operator>-</operator><literal type="number">1.96977855582618</literal></expr>, <expr><literal type="number">0.97022847566350</literal></expr> }</block></expr>,

}</block></expr>,

<expr><block>{

<expr><literal type="number">37800</literal></expr>,

<expr><block>{ <expr><literal type="number">0.08717879977844</literal></expr>, <expr><operator>-</operator><literal type="number">0.01000374016172</literal></expr>, <expr><operator>-</operator><literal type="number">0.06265852122368</literal></expr>,

<expr><operator>-</operator><literal type="number">0.01119328800950</literal></expr>, <expr><operator>-</operator><literal type="number">0.00114279372960</literal></expr>, <expr><literal type="number">0.02081333954769</literal></expr>,

<expr><operator>-</operator><literal type="number">0.01603261863207</literal></expr>, <expr><literal type="number">0.01936763028546</literal></expr>, <expr><literal type="number">0.00760044736442</literal></expr>,

<expr><operator>-</operator><literal type="number">0.00303979112271</literal></expr>, <expr><operator>-</operator><literal type="number">0.00075088605788</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">1.00000000000000</literal></expr>, <expr><operator>-</operator><literal type="number">2.62816311472146</literal></expr>, <expr><literal type="number">3.53734535817992</literal></expr>,

<expr><operator>-</operator><literal type="number">3.81003448678921</literal></expr>, <expr><literal type="number">3.91291636730132</literal></expr>, <expr><operator>-</operator><literal type="number">3.53518605896288</literal></expr>,

<expr><literal type="number">2.71356866157873</literal></expr>, <expr><operator>-</operator><literal type="number">1.86723311846592</literal></expr>, <expr><literal type="number">1.12075382367659</literal></expr>,

<expr><operator>-</operator><literal type="number">0.48574086886890</literal></expr>, <expr><literal type="number">0.11330544663849</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0.98252400815195</literal></expr>, <expr><operator>-</operator><literal type="number">1.96504801630391</literal></expr>, <expr><literal type="number">0.98252400815195</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">1.00000000000000</literal></expr>, <expr><operator>-</operator><literal type="number">1.96474258269041</literal></expr>, <expr><literal type="number">0.96535344991740</literal></expr> }</block></expr>,

}</block></expr>,

<expr><block>{

<expr><literal type="number">32000</literal></expr>,

<expr><block>{ <expr><literal type="number">0.15457299681924</literal></expr>, <expr><operator>-</operator><literal type="number">0.09331049056315</literal></expr>, <expr><operator>-</operator><literal type="number">0.06247880153653</literal></expr>,

<expr><literal type="number">0.02163541888798</literal></expr>, <expr><operator>-</operator><literal type="number">0.05588393329856</literal></expr>, <expr><literal type="number">0.04781476674921</literal></expr>,

<expr><literal type="number">0.00222312597743</literal></expr>, <expr><literal type="number">0.03174092540049</literal></expr>, <expr><operator>-</operator><literal type="number">0.01390589421898</literal></expr>,

<expr><literal type="number">0.00651420667831</literal></expr>, <expr><operator>-</operator><literal type="number">0.00881362733839</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">1.00000000000000</literal></expr>, <expr><operator>-</operator><literal type="number">2.37898834973084</literal></expr>, <expr><literal type="number">2.84868151156327</literal></expr>,

<expr><operator>-</operator><literal type="number">2.64577170229825</literal></expr>, <expr><literal type="number">2.23697657451713</literal></expr>, <expr><operator>-</operator><literal type="number">1.67148153367602</literal></expr>,

<expr><literal type="number">1.00595954808547</literal></expr>, <expr><operator>-</operator><literal type="number">0.45953458054983</literal></expr>, <expr><literal type="number">0.16378164858596</literal></expr>,

<expr><operator>-</operator><literal type="number">0.05032077717131</literal></expr>, <expr><literal type="number">0.02347897407020</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0.97938932735214</literal></expr>, <expr><operator>-</operator><literal type="number">1.95877865470428</literal></expr>, <expr><literal type="number">0.97938932735214</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">1.00000000000000</literal></expr>, <expr><operator>-</operator><literal type="number">1.95835380975398</literal></expr>, <expr><literal type="number">0.95920349965459</literal></expr> }</block></expr>,

}</block></expr>,

<expr><block>{

<expr><literal type="number">24000</literal></expr>,

<expr><block>{ <expr><literal type="number">0.30296907319327</literal></expr>, <expr><operator>-</operator><literal type="number">0.22613988682123</literal></expr>, <expr><operator>-</operator><literal type="number">0.08587323730772</literal></expr>,

<expr><literal type="number">0.03282930172664</literal></expr>, <expr><operator>-</operator><literal type="number">0.00915702933434</literal></expr>, <expr><operator>-</operator><literal type="number">0.02364141202522</literal></expr>,

<expr><operator>-</operator><literal type="number">0.00584456039913</literal></expr>, <expr><literal type="number">0.06276101321749</literal></expr>, <expr><operator>-</operator><literal type="number">0.00000828086748</literal></expr>,

<expr><literal type="number">0.00205861885564</literal></expr>, <expr><operator>-</operator><literal type="number">0.02950134983287</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">1.00000000000000</literal></expr>, <expr><operator>-</operator><literal type="number">1.61273165137247</literal></expr>, <expr><literal type="number">1.07977492259970</literal></expr>,

<expr><operator>-</operator><literal type="number">0.25656257754070</literal></expr>, <expr><operator>-</operator><literal type="number">0.16276719120440</literal></expr>, <expr><operator>-</operator><literal type="number">0.22638893773906</literal></expr>,

<expr><literal type="number">0.39120800788284</literal></expr>, <expr><operator>-</operator><literal type="number">0.22138138954925</literal></expr>, <expr><literal type="number">0.04500235387352</literal></expr>,

<expr><literal type="number">0.02005851806501</literal></expr>, <expr><literal type="number">0.00302439095741</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0.97531843204928</literal></expr>, <expr><operator>-</operator><literal type="number">1.95063686409857</literal></expr>, <expr><literal type="number">0.97531843204928</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">1.00000000000000</literal></expr>, <expr><operator>-</operator><literal type="number">1.95002759149878</literal></expr>, <expr><literal type="number">0.95124613669835</literal></expr> }</block></expr>,

}</block></expr>,

<expr><block>{

<expr><literal type="number">22050</literal></expr>,

<expr><block>{ <expr><literal type="number">0.33642304856132</literal></expr>, <expr><operator>-</operator><literal type="number">0.25572241425570</literal></expr>, <expr><operator>-</operator><literal type="number">0.11828570177555</literal></expr>,

<expr><literal type="number">0.11921148675203</literal></expr>, <expr><operator>-</operator><literal type="number">0.07834489609479</literal></expr>, <expr><operator>-</operator><literal type="number">0.00469977914380</literal></expr>,

<expr><operator>-</operator><literal type="number">0.00589500224440</literal></expr>, <expr><literal type="number">0.05724228140351</literal></expr>, <expr><literal type="number">0.00832043980773</literal></expr>,

<expr><operator>-</operator><literal type="number">0.01635381384540</literal></expr>, <expr><operator>-</operator><literal type="number">0.01760176568150</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">1.00000000000000</literal></expr>, <expr><operator>-</operator><literal type="number">1.49858979367799</literal></expr>, <expr><literal type="number">0.87350271418188</literal></expr>,

<expr><literal type="number">0.12205022308084</literal></expr>, <expr><operator>-</operator><literal type="number">0.80774944671438</literal></expr>, <expr><literal type="number">0.47854794562326</literal></expr>,

<expr><operator>-</operator><literal type="number">0.12453458140019</literal></expr>, <expr><operator>-</operator><literal type="number">0.04067510197014</literal></expr>, <expr><literal type="number">0.08333755284107</literal></expr>,

<expr><operator>-</operator><literal type="number">0.04237348025746</literal></expr>, <expr><literal type="number">0.02977207319925</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0.97316523498161</literal></expr>, <expr><operator>-</operator><literal type="number">1.94633046996323</literal></expr>, <expr><literal type="number">0.97316523498161</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">1.00000000000000</literal></expr>, <expr><operator>-</operator><literal type="number">1.94561023566527</literal></expr>, <expr><literal type="number">0.94705070426118</literal></expr> }</block></expr>,

}</block></expr>,

<expr><block>{

<expr><literal type="number">18900</literal></expr>,

<expr><block>{ <expr><literal type="number">0.38524531015142</literal></expr>, <expr><operator>-</operator><literal type="number">0.27682212062067</literal></expr>, <expr><operator>-</operator><literal type="number">0.09980181488805</literal></expr>,

<expr><literal type="number">0.09951486755646</literal></expr>, <expr><operator>-</operator><literal type="number">0.08934020156622</literal></expr>, <expr><operator>-</operator><literal type="number">0.00322369330199</literal></expr>,

<expr><operator>-</operator><literal type="number">0.00110329090689</literal></expr>, <expr><literal type="number">0.03784509844682</literal></expr>, <expr><literal type="number">0.01683906213303</literal></expr>,

<expr><operator>-</operator><literal type="number">0.01147039862572</literal></expr>, <expr><operator>-</operator><literal type="number">0.01941767987192</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">1.00000000000000</literal></expr>, <expr><operator>-</operator><literal type="number">1.29708918404534</literal></expr>, <expr><literal type="number">0.90399339674203</literal></expr>,

<expr><operator>-</operator><literal type="number">0.29613799017877</literal></expr>, <expr><operator>-</operator><literal type="number">0.42326645916207</literal></expr>, <expr><literal type="number">0.37934887402200</literal></expr>,

<expr><operator>-</operator><literal type="number">0.37919795944938</literal></expr>, <expr><literal type="number">0.23410283284785</literal></expr>, <expr><operator>-</operator><literal type="number">0.03892971758879</literal></expr>,

<expr><literal type="number">0.00403009552351</literal></expr>, <expr><literal type="number">0.03640166626278</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0.96535326815829</literal></expr>, <expr><operator>-</operator><literal type="number">1.93070653631658</literal></expr>, <expr><literal type="number">0.96535326815829</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">1.00000000000000</literal></expr>, <expr><operator>-</operator><literal type="number">1.92950577983524</literal></expr>, <expr><literal type="number">0.93190729279793</literal></expr> }</block></expr>,

}</block></expr>,

<expr><block>{

<expr><literal type="number">16000</literal></expr>,

<expr><block>{ <expr><literal type="number">0.44915256608450</literal></expr>, <expr><operator>-</operator><literal type="number">0.14351757464547</literal></expr>, <expr><operator>-</operator><literal type="number">0.22784394429749</literal></expr>,

<expr><operator>-</operator><literal type="number">0.01419140100551</literal></expr>, <expr><literal type="number">0.04078262797139</literal></expr>, <expr><operator>-</operator><literal type="number">0.12398163381748</literal></expr>,

<expr><literal type="number">0.04097565135648</literal></expr>, <expr><literal type="number">0.10478503600251</literal></expr>, <expr><operator>-</operator><literal type="number">0.01863887810927</literal></expr>,

<expr><operator>-</operator><literal type="number">0.03193428438915</literal></expr>, <expr><literal type="number">0.00541907748707</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">1.00000000000000</literal></expr>, <expr><operator>-</operator><literal type="number">0.62820619233671</literal></expr>, <expr><literal type="number">0.29661783706366</literal></expr>,

<expr><operator>-</operator><literal type="number">0.37256372942400</literal></expr>, <expr><literal type="number">0.00213767857124</literal></expr>, <expr><operator>-</operator><literal type="number">0.42029820170918</literal></expr>,

<expr><literal type="number">0.22199650564824</literal></expr>, <expr><literal type="number">0.00613424350682</literal></expr>, <expr><literal type="number">0.06747620744683</literal></expr>,

<expr><literal type="number">0.05784820375801</literal></expr>, <expr><literal type="number">0.03222754072173</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0.96454515552826</literal></expr>, <expr><operator>-</operator><literal type="number">1.92909031105652</literal></expr>, <expr><literal type="number">0.96454515552826</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">1.00000000000000</literal></expr>, <expr><operator>-</operator><literal type="number">1.92783286977036</literal></expr>, <expr><literal type="number">0.93034775234268</literal></expr> }</block></expr>,

}</block></expr>,

<expr><block>{

<expr><literal type="number">12000</literal></expr>,

<expr><block>{ <expr><literal type="number">0.56619470757641</literal></expr>, <expr><operator>-</operator><literal type="number">0.75464456939302</literal></expr>, <expr><literal type="number">0.16242137742230</literal></expr>,

<expr><literal type="number">0.16744243493672</literal></expr>, <expr><operator>-</operator><literal type="number">0.18901604199609</literal></expr>, <expr><literal type="number">0.30931782841830</literal></expr>,

<expr><operator>-</operator><literal type="number">0.27562961986224</literal></expr>, <expr><literal type="number">0.00647310677246</literal></expr>, <expr><literal type="number">0.08647503780351</literal></expr>,

<expr><operator>-</operator><literal type="number">0.03788984554840</literal></expr>, <expr><operator>-</operator><literal type="number">0.00588215443421</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">1.00000000000000</literal></expr>, <expr><operator>-</operator><literal type="number">1.04800335126349</literal></expr>, <expr><literal type="number">0.29156311971249</literal></expr>,

<expr><operator>-</operator><literal type="number">0.26806001042947</literal></expr>, <expr><literal type="number">0.00819999645858</literal></expr>, <expr><literal type="number">0.45054734505008</literal></expr>,

<expr><operator>-</operator><literal type="number">0.33032403314006</literal></expr>, <expr><literal type="number">0.06739368333110</literal></expr>, <expr><operator>-</operator><literal type="number">0.04784254229033</literal></expr>,

<expr><literal type="number">0.01639907836189</literal></expr>, <expr><literal type="number">0.01807364323573</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0.96009142950541</literal></expr>, <expr><operator>-</operator><literal type="number">1.92018285901082</literal></expr>, <expr><literal type="number">0.96009142950541</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">1.00000000000000</literal></expr>, <expr><operator>-</operator><literal type="number">1.91858953033784</literal></expr>, <expr><literal type="number">0.92177618768381</literal></expr> }</block></expr>,

}</block></expr>,

<expr><block>{

<expr><literal type="number">11025</literal></expr>,

<expr><block>{ <expr><literal type="number">0.58100494960553</literal></expr>, <expr><operator>-</operator><literal type="number">0.53174909058578</literal></expr>, <expr><operator>-</operator><literal type="number">0.14289799034253</literal></expr>,

<expr><literal type="number">0.17520704835522</literal></expr>, <expr><literal type="number">0.02377945217615</literal></expr>, <expr><literal type="number">0.15558449135573</literal></expr>,

<expr><operator>-</operator><literal type="number">0.25344790059353</literal></expr>, <expr><literal type="number">0.01628462406333</literal></expr>, <expr><literal type="number">0.06920467763959</literal></expr>,

<expr><operator>-</operator><literal type="number">0.03721611395801</literal></expr>, <expr><operator>-</operator><literal type="number">0.00749618797172</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">1.00000000000000</literal></expr>, <expr><operator>-</operator><literal type="number">0.51035327095184</literal></expr>, <expr><operator>-</operator><literal type="number">0.31863563325245</literal></expr>,

<expr><operator>-</operator><literal type="number">0.20256413484477</literal></expr>, <expr><literal type="number">0.14728154134330</literal></expr>, <expr><literal type="number">0.38952639978999</literal></expr>,

<expr><operator>-</operator><literal type="number">0.23313271880868</literal></expr>, <expr><operator>-</operator><literal type="number">0.05246019024463</literal></expr>, <expr><operator>-</operator><literal type="number">0.02505961724053</literal></expr>,

<expr><literal type="number">0.02442357316099</literal></expr>, <expr><literal type="number">0.01818801111503</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0.95856916599601</literal></expr>, <expr><operator>-</operator><literal type="number">1.91713833199203</literal></expr>, <expr><literal type="number">0.95856916599601</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">1.00000000000000</literal></expr>, <expr><operator>-</operator><literal type="number">1.91542108074780</literal></expr>, <expr><literal type="number">0.91885558323625</literal></expr> }</block></expr>,

}</block></expr>,

<expr><block>{

<expr><literal type="number">8000</literal></expr>,

<expr><block>{ <expr><literal type="number">0.53648789255105</literal></expr>, <expr><operator>-</operator><literal type="number">0.42163034350696</literal></expr>, <expr><operator>-</operator><literal type="number">0.00275953611929</literal></expr>,

<expr><literal type="number">0.04267842219415</literal></expr>, <expr><operator>-</operator><literal type="number">0.10214864179676</literal></expr>, <expr><literal type="number">0.14590772289388</literal></expr>,

<expr><operator>-</operator><literal type="number">0.02459864859345</literal></expr>, <expr><operator>-</operator><literal type="number">0.11202315195388</literal></expr>, <expr><operator>-</operator><literal type="number">0.04060034127000</literal></expr>,

<expr><literal type="number">0.04788665548180</literal></expr>, <expr><operator>-</operator><literal type="number">0.02217936801134</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">1.00000000000000</literal></expr>, <expr><operator>-</operator><literal type="number">0.25049871956020</literal></expr>, <expr><operator>-</operator><literal type="number">0.43193942311114</literal></expr>,

<expr><operator>-</operator><literal type="number">0.03424681017675</literal></expr>, <expr><operator>-</operator><literal type="number">0.04678328784242</literal></expr>, <expr><literal type="number">0.26408300200955</literal></expr>,

<expr><literal type="number">0.15113130533216</literal></expr>, <expr><operator>-</operator><literal type="number">0.17556493366449</literal></expr>, <expr><operator>-</operator><literal type="number">0.18823009262115</literal></expr>,

<expr><literal type="number">0.05477720428674</literal></expr>, <expr><literal type="number">0.04704409688120</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0.94597685600279</literal></expr>, <expr><operator>-</operator><literal type="number">1.89195371200558</literal></expr>, <expr><literal type="number">0.94597685600279</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">1.00000000000000</literal></expr>, <expr><operator>-</operator><literal type="number">1.88903307939452</literal></expr>, <expr><literal type="number">0.89487434461664</literal></expr> }</block></expr>,

}</block></expr>,

}</block></expr></init></decl>;</decl_stmt>

<typedef>typedef <type><struct>struct <name>ReplayGainContext</name> <block>{

<decl_stmt><decl><type><name>uint32_t</name></type> <name><name>histogram</name><index>[<expr><name>HISTOGRAM_SLOTS</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>peak</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>yule_hist_i</name></decl>, <name>butter_hist_i</name>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>double</name> <modifier>*</modifier></type><name>yule_coeff_a</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>double</name> <modifier>*</modifier></type><name>yule_coeff_b</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>double</name> <modifier>*</modifier></type><name>butter_coeff_a</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>double</name> <modifier>*</modifier></type><name>butter_coeff_b</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name><name>yule_hist_a</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name><name>yule_hist_b</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name><name>butter_hist_a</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name><name>butter_hist_b</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>

}</block></struct></type> <name>ReplayGainContext</name>;</typedef>

<function><type><specifier>static</specifier> <name>int</name></type> <name>query_formats</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVFilterFormats</name> <modifier>*</modifier></type><name>formats</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFilterChannelLayouts</name> <modifier>*</modifier></type><name>layout</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_add_format</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>formats</name></expr></argument>, <argument><expr><name>AV_SAMPLE_FMT_FLT</name></expr></argument> )</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator>

<operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_set_common_formats</name> <argument_list>(<argument><expr><name>ctx</name></expr></argument> , <argument><expr><name>formats</name></expr></argument> )</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator>

<operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_add_channel_layout</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>layout</name></expr></argument> , <argument><expr><name>AV_CH_LAYOUT_STEREO</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator>

<operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_set_common_channel_layouts</name> <argument_list>(<argument><expr><name>ctx</name></expr></argument> , <argument><expr><name>layout</name></expr></argument> )</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>formats</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>freqinfos</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_add_format</name><argument_list>(<argument><expr><operator>&amp;</operator><name>formats</name></expr></argument>, <argument><expr><name><name>freqinfos</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>sample_rate</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><call><name>ff_set_common_samplerates</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>formats</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>config_input</name><parameter_list>(<parameter><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>inlink</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>inlink</name><operator>-&gt;</operator><name>dst</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ReplayGainContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>freqinfos</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>freqinfos</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>sample_rate</name> <operator>==</operator> <name><name>inlink</name><operator>-&gt;</operator><name>sample_rate</name></name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name>i</name> <operator>&lt;</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>freqinfos</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>yule_coeff_a</name></name> <operator>=</operator> <name><name>freqinfos</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>AYule</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>yule_coeff_b</name></name> <operator>=</operator> <name><name>freqinfos</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>BYule</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>butter_coeff_a</name></name> <operator>=</operator> <name><name>freqinfos</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>AButter</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>butter_coeff_b</name></name> <operator>=</operator> <name><name>freqinfos</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>BButter</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>yule_hist_i</name></name> <operator>=</operator> <literal type="number">20</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>butter_hist_i</name></name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>inlink</name><operator>-&gt;</operator><name>partial_buf_size</name></name> <operator>=</operator>

<name><name>inlink</name><operator>-&gt;</operator><name>min_samples</name></name> <operator>=</operator>

<name><name>inlink</name><operator>-&gt;</operator><name>max_samples</name></name> <operator>=</operator> <name><name>inlink</name><operator>-&gt;</operator><name>sample_rate</name></name> <operator>/</operator> <literal type="number">20</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>calc_stereo_peak</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>samples</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nb_samples</name></decl></parameter>,

<parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>peak_p</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>peak</name> <init>= <expr><literal type="number">0.0</literal></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>nb_samples</name><operator>--</operator></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>samples</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;</operator> <name>peak</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>peak</name> <operator>=</operator> <name><name>samples</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><operator>-</operator><name><name>samples</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;</operator> <name>peak</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>peak</name> <operator>=</operator> <operator>-</operator><name><name>samples</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>samples</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&gt;</operator> <name>peak</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>peak</name> <operator>=</operator> <name><name>samples</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><operator>-</operator><name><name>samples</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&gt;</operator> <name>peak</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>peak</name> <operator>=</operator> <operator>-</operator><name><name>samples</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>samples</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><operator>*</operator><name>peak_p</name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name>peak</name></expr></argument>, <argument><expr><operator>*</operator><name>peak_p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>double</name></type> <name>calc_stereo_rms</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>samples</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nb_samples</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><name>nb_samples</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>sum</name> <init>= <expr><literal type="number">1e-16</literal></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>count</name><operator>--</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>sum</name> <operator>+=</operator> <name><name>samples</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name><name>samples</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>samples</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name><name>samples</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>samples</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></while>

<return>return <expr><literal type="number">10</literal> <operator>*</operator> <call><name>log10</name> <argument_list>(<argument><expr><name>sum</name> <operator>/</operator> <name>nb_samples</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">90.0</literal> <operator>-</operator> <literal type="number">3.0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>butter_filter_stereo_samples</name><parameter_list>(<parameter><decl><type><name>ReplayGainContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>,

<parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>samples</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nb_samples</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>double</name> <modifier>*</modifier></type><name>coeff_a</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>butter_coeff_a</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>double</name> <modifier>*</modifier></type><name>coeff_b</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>butter_coeff_b</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>hist_a</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>butter_hist_a</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>hist_b</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>butter_hist_b</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>left</name></decl>, <decl><type ref="prev"/><name>right</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>butter_hist_i</name></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <operator>-</operator><literal type="number">4</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><call><name>fabs</name><argument_list>(<argument><expr><name><name>hist_a</name><index>[<expr><name>i</name> <operator>+</operator> <name>j</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">1e-10</literal> <operator>||</operator> <call><name>fabs</name><argument_list>(<argument><expr><name><name>hist_b</name><index>[<expr><name>i</name> <operator>+</operator> <name>j</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">1e-10</literal></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>j</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>butter_hist_a</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>butter_hist_a</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>butter_hist_b</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>butter_hist_b</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><name>nb_samples</name><operator>--</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>left</name> <operator>=</operator> <operator>(</operator><name><name>hist_b</name><index>[<expr><name>i</name></expr> ]</index></name> <operator>=</operator> <name><name>samples</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator> <operator>*</operator> <name><name>coeff_b</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>right</name> <operator>=</operator> <operator>(</operator><name><name>hist_b</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>samples</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator> <operator>*</operator> <name><name>coeff_b</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>left</name> <operator>+=</operator> <name><name>hist_b</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name> <operator>*</operator> <name><name>coeff_b</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>hist_a</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name> <operator>*</operator> <name><name>coeff_a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>right</name> <operator>+=</operator> <name><name>hist_b</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name><name>coeff_b</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>hist_a</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name><name>coeff_a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>left</name> <operator>+=</operator> <name><name>hist_b</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">4</literal></expr>]</index></name> <operator>*</operator> <name><name>coeff_b</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>-</operator> <name><name>hist_a</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">4</literal></expr>]</index></name> <operator>*</operator> <name><name>coeff_a</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>right</name> <operator>+=</operator> <name><name>hist_b</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">3</literal></expr>]</index></name> <operator>*</operator> <name><name>coeff_b</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>-</operator> <name><name>hist_a</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">3</literal></expr>]</index></name> <operator>*</operator> <name><name>coeff_a</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>samples</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>hist_a</name><index>[<expr><name>i</name></expr> ]</index></name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator> <name>left</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>samples</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>hist_a</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator> <name>right</name></expr>;</expr_stmt>

<expr_stmt><expr><name>samples</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>i</name> <operator>+=</operator> <literal type="number">2</literal><operator>)</operator> <operator>==</operator> <literal type="number">256</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>hist_a</name></expr></argument>, <argument><expr><name>hist_a</name> <operator>+</operator> <literal type="number">252</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>hist_a</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>hist_b</name></expr></argument>, <argument><expr><name>hist_b</name> <operator>+</operator> <literal type="number">252</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>hist_b</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></while>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>butter_hist_i</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>yule_filter_stereo_samples</name><parameter_list>(<parameter><decl><type><name>ReplayGainContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,

<parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nb_samples</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>double</name> <modifier>*</modifier></type><name>coeff_a</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>yule_coeff_a</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>double</name> <modifier>*</modifier></type><name>coeff_b</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>yule_coeff_b</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>hist_a</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>yule_hist_a</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>hist_b</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>yule_hist_b</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>left</name></decl>, <decl><type ref="prev"/><name>right</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>yule_hist_i</name></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <operator>-</operator><literal type="number">20</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><call><name>fabs</name><argument_list>(<argument><expr><name><name>hist_a</name><index>[<expr><name>i</name> <operator>+</operator> <name>j</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">1e-10</literal> <operator>||</operator> <call><name>fabs</name><argument_list>(<argument><expr><name><name>hist_b</name><index>[<expr><name>i</name> <operator>+</operator> <name>j</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">1e-10</literal></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>j</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>yule_hist_a</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>yule_hist_a</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>yule_hist_b</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>yule_hist_b</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><name>nb_samples</name><operator>--</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>left</name> <operator>=</operator> <operator>(</operator><name><name>hist_b</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator> <operator>*</operator> <name><name>coeff_b</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>right</name> <operator>=</operator> <operator>(</operator><name><name>hist_b</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>src</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator> <operator>*</operator> <name><name>coeff_b</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>left</name> <operator>+=</operator> <name><name>hist_b</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name> <operator>*</operator> <name><name>coeff_b</name><index>[ <expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>hist_a</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name> <operator>*</operator> <name><name>coeff_a</name><index>[<expr><literal type="number">1</literal></expr> ]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>right</name> <operator>+=</operator> <name><name>hist_b</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name><name>coeff_b</name><index>[ <expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>hist_a</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name><name>coeff_a</name><index>[<expr><literal type="number">1</literal></expr> ]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>left</name> <operator>+=</operator> <name><name>hist_b</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">4</literal></expr>]</index></name> <operator>*</operator> <name><name>coeff_b</name><index>[ <expr><literal type="number">2</literal></expr>]</index></name> <operator>-</operator> <name><name>hist_a</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">4</literal></expr>]</index></name> <operator>*</operator> <name><name>coeff_a</name><index>[<expr><literal type="number">2</literal></expr> ]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>right</name> <operator>+=</operator> <name><name>hist_b</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">3</literal></expr>]</index></name> <operator>*</operator> <name><name>coeff_b</name><index>[ <expr><literal type="number">2</literal></expr>]</index></name> <operator>-</operator> <name><name>hist_a</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">3</literal></expr>]</index></name> <operator>*</operator> <name><name>coeff_a</name><index>[<expr><literal type="number">2</literal></expr> ]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>left</name> <operator>+=</operator> <name><name>hist_b</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">6</literal></expr>]</index></name> <operator>*</operator> <name><name>coeff_b</name><index>[ <expr><literal type="number">3</literal></expr>]</index></name> <operator>-</operator> <name><name>hist_a</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">6</literal></expr>]</index></name> <operator>*</operator> <name><name>coeff_a</name><index>[<expr><literal type="number">3</literal></expr> ]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>right</name> <operator>+=</operator> <name><name>hist_b</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">5</literal></expr>]</index></name> <operator>*</operator> <name><name>coeff_b</name><index>[ <expr><literal type="number">3</literal></expr>]</index></name> <operator>-</operator> <name><name>hist_a</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">5</literal></expr>]</index></name> <operator>*</operator> <name><name>coeff_a</name><index>[<expr><literal type="number">3</literal></expr> ]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>left</name> <operator>+=</operator> <name><name>hist_b</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">8</literal></expr>]</index></name> <operator>*</operator> <name><name>coeff_b</name><index>[ <expr><literal type="number">4</literal></expr>]</index></name> <operator>-</operator> <name><name>hist_a</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">8</literal></expr>]</index></name> <operator>*</operator> <name><name>coeff_a</name><index>[<expr><literal type="number">4</literal></expr> ]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>right</name> <operator>+=</operator> <name><name>hist_b</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">7</literal></expr>]</index></name> <operator>*</operator> <name><name>coeff_b</name><index>[ <expr><literal type="number">4</literal></expr>]</index></name> <operator>-</operator> <name><name>hist_a</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">7</literal></expr>]</index></name> <operator>*</operator> <name><name>coeff_a</name><index>[<expr><literal type="number">4</literal></expr> ]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>left</name> <operator>+=</operator> <name><name>hist_b</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">10</literal></expr>]</index></name> <operator>*</operator> <name><name>coeff_b</name><index>[ <expr><literal type="number">5</literal></expr>]</index></name> <operator>-</operator> <name><name>hist_a</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">10</literal></expr>]</index></name> <operator>*</operator> <name><name>coeff_a</name><index>[<expr><literal type="number">5</literal></expr> ]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>right</name> <operator>+=</operator> <name><name>hist_b</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">9</literal></expr>]</index></name> <operator>*</operator> <name><name>coeff_b</name><index>[ <expr><literal type="number">5</literal></expr>]</index></name> <operator>-</operator> <name><name>hist_a</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">9</literal></expr>]</index></name> <operator>*</operator> <name><name>coeff_a</name><index>[<expr><literal type="number">5</literal></expr> ]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>left</name> <operator>+=</operator> <name><name>hist_b</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">12</literal></expr>]</index></name> <operator>*</operator> <name><name>coeff_b</name><index>[ <expr><literal type="number">6</literal></expr>]</index></name> <operator>-</operator> <name><name>hist_a</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">12</literal></expr>]</index></name> <operator>*</operator> <name><name>coeff_a</name><index>[<expr><literal type="number">6</literal></expr> ]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>right</name> <operator>+=</operator> <name><name>hist_b</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">11</literal></expr>]</index></name> <operator>*</operator> <name><name>coeff_b</name><index>[ <expr><literal type="number">6</literal></expr>]</index></name> <operator>-</operator> <name><name>hist_a</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">11</literal></expr>]</index></name> <operator>*</operator> <name><name>coeff_a</name><index>[<expr><literal type="number">6</literal></expr> ]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>left</name> <operator>+=</operator> <name><name>hist_b</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">14</literal></expr>]</index></name> <operator>*</operator> <name><name>coeff_b</name><index>[ <expr><literal type="number">7</literal></expr>]</index></name> <operator>-</operator> <name><name>hist_a</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">14</literal></expr>]</index></name> <operator>*</operator> <name><name>coeff_a</name><index>[<expr><literal type="number">7</literal></expr> ]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>right</name> <operator>+=</operator> <name><name>hist_b</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">13</literal></expr>]</index></name> <operator>*</operator> <name><name>coeff_b</name><index>[ <expr><literal type="number">7</literal></expr>]</index></name> <operator>-</operator> <name><name>hist_a</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">13</literal></expr>]</index></name> <operator>*</operator> <name><name>coeff_a</name><index>[<expr><literal type="number">7</literal></expr> ]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>left</name> <operator>+=</operator> <name><name>hist_b</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">16</literal></expr>]</index></name> <operator>*</operator> <name><name>coeff_b</name><index>[ <expr><literal type="number">8</literal></expr>]</index></name> <operator>-</operator> <name><name>hist_a</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">16</literal></expr>]</index></name> <operator>*</operator> <name><name>coeff_a</name><index>[<expr><literal type="number">8</literal></expr> ]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>right</name> <operator>+=</operator> <name><name>hist_b</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">15</literal></expr>]</index></name> <operator>*</operator> <name><name>coeff_b</name><index>[ <expr><literal type="number">8</literal></expr>]</index></name> <operator>-</operator> <name><name>hist_a</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">15</literal></expr>]</index></name> <operator>*</operator> <name><name>coeff_a</name><index>[<expr><literal type="number">8</literal></expr> ]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>left</name> <operator>+=</operator> <name><name>hist_b</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">18</literal></expr>]</index></name> <operator>*</operator> <name><name>coeff_b</name><index>[ <expr><literal type="number">9</literal></expr>]</index></name> <operator>-</operator> <name><name>hist_a</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">18</literal></expr>]</index></name> <operator>*</operator> <name><name>coeff_a</name><index>[<expr><literal type="number">9</literal></expr> ]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>right</name> <operator>+=</operator> <name><name>hist_b</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">17</literal></expr>]</index></name> <operator>*</operator> <name><name>coeff_b</name><index>[ <expr><literal type="number">9</literal></expr>]</index></name> <operator>-</operator> <name><name>hist_a</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">17</literal></expr>]</index></name> <operator>*</operator> <name><name>coeff_a</name><index>[<expr><literal type="number">9</literal></expr> ]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>left</name> <operator>+=</operator> <name><name>hist_b</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">20</literal></expr>]</index></name> <operator>*</operator> <name><name>coeff_b</name><index>[<expr><literal type="number">10</literal></expr>]</index></name> <operator>-</operator> <name><name>hist_a</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">20</literal></expr>]</index></name> <operator>*</operator> <name><name>coeff_a</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>right</name> <operator>+=</operator> <name><name>hist_b</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">19</literal></expr>]</index></name> <operator>*</operator> <name><name>coeff_b</name><index>[<expr><literal type="number">10</literal></expr>]</index></name> <operator>-</operator> <name><name>hist_a</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">19</literal></expr>]</index></name> <operator>*</operator> <name><name>coeff_a</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>hist_a</name><index>[<expr><name>i</name></expr> ]</index></name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><name>left</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>hist_a</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><name>right</name></expr>;</expr_stmt>

<expr_stmt><expr><name>src</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>dst</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>i</name> <operator>+=</operator> <literal type="number">2</literal><operator>)</operator> <operator>==</operator> <literal type="number">256</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>hist_a</name></expr></argument>, <argument><expr><name>hist_a</name> <operator>+</operator> <literal type="number">236</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>hist_a</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <literal type="number">20</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>hist_b</name></expr></argument>, <argument><expr><name>hist_b</name> <operator>+</operator> <literal type="number">236</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>hist_b</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <literal type="number">20</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">20</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></while>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>yule_hist_i</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>float</name></type> <name>calc_replaygain</name><parameter_list>(<parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>histogram</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>loud_count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>total_windows</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>gain</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>HISTOGRAM_SLOTS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name>total_windows</name> <operator>+=</operator> <name><name>histogram</name> <index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<while>while <condition>(<expr><name>i</name><operator>--</operator></expr>)</condition><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>loud_count</name> <operator>+=</operator> <name><name>histogram</name> <index>[<expr><name>i</name></expr>]</index></name><operator>)</operator> <operator>*</operator> <literal type="number">20</literal> <operator>&gt;=</operator> <name>total_windows</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt></block_content></block></while>

<expr_stmt><expr><name>gain</name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><literal type="number">64.54</literal> <operator>-</operator> <name>i</name> <operator>/</operator> <literal type="number">100.0</literal><operator>)</operator></expr>;</expr_stmt>

<return>return <expr><call><name>av_clipf</name><argument_list>(<argument><expr><name>gain</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">24.0</literal></expr></argument>, <argument><expr><literal type="number">64.0</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>filter_frame</name><parameter_list>(<parameter><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>inlink</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>in</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>inlink</name><operator>-&gt;</operator><name>dst</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>outlink</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>outputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ReplayGainContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>level</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>out</name></decl>;</decl_stmt>

<expr_stmt><expr><name>out</name> <operator>=</operator> <call><name>ff_get_audio_buffer</name><argument_list>(<argument><expr><name>outlink</name></expr></argument>, <argument><expr><name><name>in</name><operator>-&gt;</operator><name>nb_samples</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>out</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>calc_stereo_peak</name><argument_list>(<argument><expr><operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><name><name>in</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,

<argument><expr><name><name>in</name><operator>-&gt;</operator><name>nb_samples</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>peak</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>yule_filter_stereo_samples</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>float</name> <operator>*</operator><operator>)</operator><name><name>in</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,

<argument><expr><operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,

<argument><expr><name><name>out</name><operator>-&gt;</operator><name>nb_samples</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>butter_filter_stereo_samples</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,

<argument><expr><name><name>out</name><operator>-&gt;</operator><name>nb_samples</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>level</name> <operator>=</operator> <call><name>lrint</name><argument_list>(<argument><expr><call><name>floor</name><argument_list>(<argument><expr><literal type="number">100</literal> <operator>*</operator> <call><name>calc_stereo_rms</name><argument_list>(<argument><expr><operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,

<argument><expr><name><name>out</name><operator>-&gt;</operator><name>nb_samples</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>level</name> <operator>=</operator> <call><name>av_clip64</name><argument_list>(<argument><expr><name>level</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>HISTOGRAM_SLOTS</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>histogram</name><index>[<expr><name>level</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>ff_filter_frame</name><argument_list>(<argument><expr><name>outlink</name></expr></argument>, <argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>void</name></type> <name>uninit</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ReplayGainContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>gain</name> <init>= <expr><call><name>calc_replaygain</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>histogram</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"track_gain = %+.2f dB\n"</literal></expr></argument>, <argument><expr><name>gain</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"track_peak = %.6f\n"</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>peak</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVFilterPad</name></type> <name><name>replaygain_inputs</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"default"</literal></expr>,

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_AUDIO</name></expr>,

<expr><operator>.</operator><name>filter_frame</name> <operator>=</operator> <name>filter_frame</name></expr>,

<expr><operator>.</operator><name>config_props</name> <operator>=</operator> <name>config_input</name></expr>,

}</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVFilterPad</name></type> <name><name>replaygain_outputs</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"default"</literal></expr>,

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_AUDIO</name></expr>,

}</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFilter</name></type> <name>ff_af_replaygain</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"replaygain"</literal></expr>,

<expr><operator>.</operator><name>description</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"ReplayGain scanner."</literal></expr></argument>)</argument_list></call></expr>,

<expr><operator>.</operator><name>query_formats</name> <operator>=</operator> <name>query_formats</name></expr>,

<expr><operator>.</operator><name>uninit</name> <operator>=</operator> <name>uninit</name></expr>,

<expr><operator>.</operator><name>priv_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>ReplayGainContext</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><operator>.</operator><name>inputs</name> <operator>=</operator> <name>replaygain_inputs</name></expr>,

<expr><operator>.</operator><name>outputs</name> <operator>=</operator> <name>replaygain_outputs</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

</unit>
