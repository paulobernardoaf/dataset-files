<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavfilter\vf_convolution.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avstring.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/imgutils.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/intreadwrite.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/opt.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/pixdesc.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avfilter.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"convolution.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"formats.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"video.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OFFSET</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>offsetof(ConvolutionContext, x)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLAGS</name></cpp:macro> <cpp:value>AV_OPT_FLAG_VIDEO_PARAM|AV_OPT_FLAG_FILTERING_PARAM</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVOption</name></type> <name><name>convolution_options</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><literal type="string">"0m"</literal></expr>, <expr><literal type="string">"set matrix for 1st plane"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name><name>matrix_str</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_STRING</name></expr>, <expr><block>{<expr><operator>.</operator><name>str</name><operator>=</operator><literal type="string">"0 0 0 0 1 0 0 0 0"</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"1m"</literal></expr>, <expr><literal type="string">"set matrix for 2nd plane"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name><name>matrix_str</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_STRING</name></expr>, <expr><block>{<expr><operator>.</operator><name>str</name><operator>=</operator><literal type="string">"0 0 0 0 1 0 0 0 0"</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"2m"</literal></expr>, <expr><literal type="string">"set matrix for 3rd plane"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name><name>matrix_str</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_STRING</name></expr>, <expr><block>{<expr><operator>.</operator><name>str</name><operator>=</operator><literal type="string">"0 0 0 0 1 0 0 0 0"</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"3m"</literal></expr>, <expr><literal type="string">"set matrix for 4th plane"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name><name>matrix_str</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_STRING</name></expr>, <expr><block>{<expr><operator>.</operator><name>str</name><operator>=</operator><literal type="string">"0 0 0 0 1 0 0 0 0"</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"0rdiv"</literal></expr>, <expr><literal type="string">"set rdiv for 1st plane"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name><name>rdiv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_FLOAT</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name><operator>=</operator><literal type="number">0.0</literal></expr>}</block></expr>, <expr><literal type="number">0.0</literal></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>FLAGS</name></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"1rdiv"</literal></expr>, <expr><literal type="string">"set rdiv for 2nd plane"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name><name>rdiv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_FLOAT</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name><operator>=</operator><literal type="number">0.0</literal></expr>}</block></expr>, <expr><literal type="number">0.0</literal></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>FLAGS</name></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"2rdiv"</literal></expr>, <expr><literal type="string">"set rdiv for 3rd plane"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name><name>rdiv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_FLOAT</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name><operator>=</operator><literal type="number">0.0</literal></expr>}</block></expr>, <expr><literal type="number">0.0</literal></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>FLAGS</name></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"3rdiv"</literal></expr>, <expr><literal type="string">"set rdiv for 4th plane"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name><name>rdiv</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_FLOAT</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name><operator>=</operator><literal type="number">0.0</literal></expr>}</block></expr>, <expr><literal type="number">0.0</literal></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>FLAGS</name></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"0bias"</literal></expr>, <expr><literal type="string">"set bias for 1st plane"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name><name>bias</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_FLOAT</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name><operator>=</operator><literal type="number">0.0</literal></expr>}</block></expr>, <expr><literal type="number">0.0</literal></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>FLAGS</name></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"1bias"</literal></expr>, <expr><literal type="string">"set bias for 2nd plane"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name><name>bias</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_FLOAT</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name><operator>=</operator><literal type="number">0.0</literal></expr>}</block></expr>, <expr><literal type="number">0.0</literal></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>FLAGS</name></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"2bias"</literal></expr>, <expr><literal type="string">"set bias for 3rd plane"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name><name>bias</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_FLOAT</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name><operator>=</operator><literal type="number">0.0</literal></expr>}</block></expr>, <expr><literal type="number">0.0</literal></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>FLAGS</name></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"3bias"</literal></expr>, <expr><literal type="string">"set bias for 4th plane"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name><name>bias</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_FLOAT</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name><operator>=</operator><literal type="number">0.0</literal></expr>}</block></expr>, <expr><literal type="number">0.0</literal></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>FLAGS</name></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"0mode"</literal></expr>, <expr><literal type="string">"set matrix mode for 1st plane"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name><name>mode</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>MATRIX_SQUARE</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>MATRIX_NBMODES</name><operator>-</operator><literal type="number">1</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"mode"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"1mode"</literal></expr>, <expr><literal type="string">"set matrix mode for 2nd plane"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name><name>mode</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>MATRIX_SQUARE</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>MATRIX_NBMODES</name><operator>-</operator><literal type="number">1</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"mode"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"2mode"</literal></expr>, <expr><literal type="string">"set matrix mode for 3rd plane"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name><name>mode</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>MATRIX_SQUARE</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>MATRIX_NBMODES</name><operator>-</operator><literal type="number">1</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"mode"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"3mode"</literal></expr>, <expr><literal type="string">"set matrix mode for 4th plane"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name><name>mode</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>MATRIX_SQUARE</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>MATRIX_NBMODES</name><operator>-</operator><literal type="number">1</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"mode"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"square"</literal></expr>, <expr><literal type="string">"square matrix"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>MATRIX_SQUARE</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"mode"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"row"</literal></expr>, <expr><literal type="string">"single row matrix"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>MATRIX_ROW</name></expr>}</block></expr> , <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"mode"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"column"</literal></expr>, <expr><literal type="string">"single column matrix"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>MATRIX_COLUMN</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"mode"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>AVFILTER_DEFINE_CLASS</name><argument_list>(<argument><expr><name>convolution</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name><name>same3x3</name><index>[<expr><literal type="number">9</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,

<expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>,

<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name><name>same5x5</name><index>[<expr><literal type="number">25</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,

<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,

<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,

<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,

<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name><name>same7x7</name><index>[<expr><literal type="number">49</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,

<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,

<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,

<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,

<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,

<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,

<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int</name></type> <name>query_formats</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>enum</name> <name>AVPixelFormat</name></name></type> <name><name>pix_fmts</name><index>[]</index></name> <init>= <expr><block>{

<expr><name>AV_PIX_FMT_YUVA444P</name></expr>, <expr><name>AV_PIX_FMT_YUV444P</name></expr>, <expr><name>AV_PIX_FMT_YUV440P</name></expr>,

<expr><name>AV_PIX_FMT_YUVJ444P</name></expr>, <expr><name>AV_PIX_FMT_YUVJ440P</name></expr>,

<expr><name>AV_PIX_FMT_YUVA422P</name></expr>, <expr><name>AV_PIX_FMT_YUV422P</name></expr>, <expr><name>AV_PIX_FMT_YUVA420P</name></expr>, <expr><name>AV_PIX_FMT_YUV420P</name></expr>,

<expr><name>AV_PIX_FMT_YUVJ422P</name></expr>, <expr><name>AV_PIX_FMT_YUVJ420P</name></expr>,

<expr><name>AV_PIX_FMT_YUVJ411P</name></expr>, <expr><name>AV_PIX_FMT_YUV411P</name></expr>, <expr><name>AV_PIX_FMT_YUV410P</name></expr>,

<expr><name>AV_PIX_FMT_YUV420P9</name></expr>, <expr><name>AV_PIX_FMT_YUV422P9</name></expr>, <expr><name>AV_PIX_FMT_YUV444P9</name></expr>,

<expr><name>AV_PIX_FMT_YUV420P10</name></expr>, <expr><name>AV_PIX_FMT_YUV422P10</name></expr>, <expr><name>AV_PIX_FMT_YUV444P10</name></expr>,

<expr><name>AV_PIX_FMT_YUV420P12</name></expr>, <expr><name>AV_PIX_FMT_YUV422P12</name></expr>, <expr><name>AV_PIX_FMT_YUV444P12</name></expr>, <expr><name>AV_PIX_FMT_YUV440P12</name></expr>,

<expr><name>AV_PIX_FMT_YUV420P14</name></expr>, <expr><name>AV_PIX_FMT_YUV422P14</name></expr>, <expr><name>AV_PIX_FMT_YUV444P14</name></expr>,

<expr><name>AV_PIX_FMT_YUV420P16</name></expr>, <expr><name>AV_PIX_FMT_YUV422P16</name></expr>, <expr><name>AV_PIX_FMT_YUV444P16</name></expr>,

<expr><name>AV_PIX_FMT_YUVA420P9</name></expr>, <expr><name>AV_PIX_FMT_YUVA422P9</name></expr>, <expr><name>AV_PIX_FMT_YUVA444P9</name></expr>,

<expr><name>AV_PIX_FMT_YUVA420P10</name></expr>, <expr><name>AV_PIX_FMT_YUVA422P10</name></expr>, <expr><name>AV_PIX_FMT_YUVA444P10</name></expr>,

<expr><name>AV_PIX_FMT_YUVA422P12</name></expr>, <expr><name>AV_PIX_FMT_YUVA444P12</name></expr>,

<expr><name>AV_PIX_FMT_YUVA420P16</name></expr>, <expr><name>AV_PIX_FMT_YUVA422P16</name></expr>, <expr><name>AV_PIX_FMT_YUVA444P16</name></expr>,

<expr><name>AV_PIX_FMT_GBRP</name></expr>, <expr><name>AV_PIX_FMT_GBRP9</name></expr>, <expr><name>AV_PIX_FMT_GBRP10</name></expr>,

<expr><name>AV_PIX_FMT_GBRP12</name></expr>, <expr><name>AV_PIX_FMT_GBRP14</name></expr>, <expr><name>AV_PIX_FMT_GBRP16</name></expr>,

<expr><name>AV_PIX_FMT_GBRAP</name></expr>, <expr><name>AV_PIX_FMT_GBRAP10</name></expr>, <expr><name>AV_PIX_FMT_GBRAP12</name></expr>, <expr><name>AV_PIX_FMT_GBRAP16</name></expr>,

<expr><name>AV_PIX_FMT_GRAY8</name></expr>, <expr><name>AV_PIX_FMT_GRAY9</name></expr>, <expr><name>AV_PIX_FMT_GRAY10</name></expr>, <expr><name>AV_PIX_FMT_GRAY12</name></expr>, <expr><name>AV_PIX_FMT_GRAY14</name></expr>, <expr><name>AV_PIX_FMT_GRAY16</name></expr>,

<expr><name>AV_PIX_FMT_NONE</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>ff_set_common_formats</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><call><name>ff_make_format_list</name><argument_list>(<argument><expr><name>pix_fmts</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<typedef>typedef <type><struct>struct <name>ThreadData</name> <block>{

<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>in</name></decl>, <modifier>*</modifier><name>out</name>;</decl_stmt>

}</block></struct></type> <name>ThreadData</name>;</typedef>

<function><type><specifier>static</specifier> <name>void</name></type> <name>filter16_prewitt</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dstp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>,

<parameter><decl><type><name>float</name></type> <name>scale</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>delta</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name> <modifier>*</modifier><specifier>const</specifier></type> <name>matrix</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name><name>c</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>peak</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>radius</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>dstride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stride</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><name>dstp</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>suma</name> <init>= <expr><call><name>AV_RN16A</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>x</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>*</operator> <operator>-</operator><literal type="number">1</literal> <operator>+</operator> <call><name>AV_RN16A</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>x</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>*</operator> <operator>-</operator><literal type="number">1</literal> <operator>+</operator> <call><name>AV_RN16A</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>x</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>*</operator> <operator>-</operator><literal type="number">1</literal> <operator>+</operator>

<call><name>AV_RN16A</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><index>[<expr><literal type="number">6</literal></expr>]</index><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>x</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">1</literal> <operator>+</operator> <call><name>AV_RN16A</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><index>[<expr><literal type="number">7</literal></expr>]</index><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>x</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">1</literal> <operator>+</operator> <call><name>AV_RN16A</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><index>[<expr><literal type="number">8</literal></expr>]</index><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>x</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>sumb</name> <init>= <expr><call><name>AV_RN16A</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>x</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>*</operator> <operator>-</operator><literal type="number">1</literal> <operator>+</operator> <call><name>AV_RN16A</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>x</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">1</literal> <operator>+</operator> <call><name>AV_RN16A</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>x</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>*</operator> <operator>-</operator><literal type="number">1</literal> <operator>+</operator>

<call><name>AV_RN16A</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><index>[<expr><literal type="number">5</literal></expr>]</index><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>x</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">1</literal> <operator>+</operator> <call><name>AV_RN16A</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><index>[<expr><literal type="number">6</literal></expr>]</index><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>x</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>*</operator> <operator>-</operator><literal type="number">1</literal> <operator>+</operator> <call><name>AV_RN16A</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><index>[<expr><literal type="number">8</literal></expr>]</index><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>x</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>dst</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <call><name>av_clip</name><argument_list>(<argument><expr><call><name>sqrtf</name><argument_list>(<argument><expr><name>suma</name><operator>*</operator><name>suma</name> <operator>+</operator> <name>sumb</name><operator>*</operator><name>sumb</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>scale</name> <operator>+</operator> <name>delta</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>peak</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>filter16_roberts</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dstp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>,

<parameter><decl><type><name>float</name></type> <name>scale</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>delta</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name> <modifier>*</modifier><specifier>const</specifier></type> <name>matrix</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name><name>c</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>peak</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>radius</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>dstride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stride</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><name>dstp</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>suma</name> <init>= <expr><call><name>AV_RN16A</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>x</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">1</literal> <operator>+</operator> <call><name>AV_RN16A</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>x</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>*</operator> <operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>sumb</name> <init>= <expr><call><name>AV_RN16A</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><index>[<expr><literal type="number">4</literal></expr>]</index><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>x</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">1</literal> <operator>+</operator> <call><name>AV_RN16A</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>x</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>*</operator> <operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>dst</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <call><name>av_clip</name><argument_list>(<argument><expr><call><name>sqrtf</name><argument_list>(<argument><expr><name>suma</name><operator>*</operator><name>suma</name> <operator>+</operator> <name>sumb</name><operator>*</operator><name>sumb</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>scale</name> <operator>+</operator> <name>delta</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>peak</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>filter16_sobel</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dstp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>,

<parameter><decl><type><name>float</name></type> <name>scale</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>delta</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name> <modifier>*</modifier><specifier>const</specifier></type> <name>matrix</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name><name>c</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>peak</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>radius</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>dstride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stride</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><name>dstp</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>suma</name> <init>= <expr><call><name>AV_RN16A</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>x</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>*</operator> <operator>-</operator><literal type="number">1</literal> <operator>+</operator> <call><name>AV_RN16A</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>x</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>*</operator> <operator>-</operator><literal type="number">2</literal> <operator>+</operator> <call><name>AV_RN16A</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>x</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>*</operator> <operator>-</operator><literal type="number">1</literal> <operator>+</operator>

<call><name>AV_RN16A</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><index>[<expr><literal type="number">6</literal></expr>]</index><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>x</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">1</literal> <operator>+</operator> <call><name>AV_RN16A</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><index>[<expr><literal type="number">7</literal></expr>]</index><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>x</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <call><name>AV_RN16A</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><index>[<expr><literal type="number">8</literal></expr>]</index><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>x</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>sumb</name> <init>= <expr><call><name>AV_RN16A</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>x</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>*</operator> <operator>-</operator><literal type="number">1</literal> <operator>+</operator> <call><name>AV_RN16A</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>x</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">1</literal> <operator>+</operator> <call><name>AV_RN16A</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>x</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>*</operator> <operator>-</operator><literal type="number">2</literal> <operator>+</operator>

<call><name>AV_RN16A</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><index>[<expr><literal type="number">5</literal></expr>]</index><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>x</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <call><name>AV_RN16A</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><index>[<expr><literal type="number">6</literal></expr>]</index><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>x</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>*</operator> <operator>-</operator><literal type="number">1</literal> <operator>+</operator> <call><name>AV_RN16A</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><index>[<expr><literal type="number">8</literal></expr>]</index><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>x</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>dst</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <call><name>av_clip</name><argument_list>(<argument><expr><call><name>sqrtf</name><argument_list>(<argument><expr><name>suma</name><operator>*</operator><name>suma</name> <operator>+</operator> <name>sumb</name><operator>*</operator><name>sumb</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>scale</name> <operator>+</operator> <name>delta</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>peak</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>filter_prewitt</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>,

<parameter><decl><type><name>float</name></type> <name>scale</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>delta</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name> <modifier>*</modifier><specifier>const</specifier></type> <name>matrix</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name><name>c</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>peak</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>radius</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>dstride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stride</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>c0</name> <init>= <expr><name><name>c</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>c1</name> <init>= <expr><name><name>c</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>c2</name> <init>= <expr><name><name>c</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>c3</name> <init>= <expr><name><name>c</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>c5</name> <init>= <expr><name><name>c</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>c6</name> <init>= <expr><name><name>c</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>c7</name> <init>= <expr><name><name>c</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>c8</name> <init>= <expr><name><name>c</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>suma</name> <init>= <expr><name><name>c0</name><index>[<expr><name>x</name></expr>]</index></name> <operator>*</operator> <operator>-</operator><literal type="number">1</literal> <operator>+</operator> <name><name>c1</name><index>[<expr><name>x</name></expr>]</index></name> <operator>*</operator> <operator>-</operator><literal type="number">1</literal> <operator>+</operator> <name><name>c2</name><index>[<expr><name>x</name></expr>]</index></name> <operator>*</operator> <operator>-</operator><literal type="number">1</literal> <operator>+</operator>

<name><name>c6</name><index>[<expr><name>x</name></expr>]</index></name> <operator>*</operator> <literal type="number">1</literal> <operator>+</operator> <name><name>c7</name><index>[<expr><name>x</name></expr>]</index></name> <operator>*</operator> <literal type="number">1</literal> <operator>+</operator> <name><name>c8</name><index>[<expr><name>x</name></expr>]</index></name> <operator>*</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>sumb</name> <init>= <expr><name><name>c0</name><index>[<expr><name>x</name></expr>]</index></name> <operator>*</operator> <operator>-</operator><literal type="number">1</literal> <operator>+</operator> <name><name>c2</name><index>[<expr><name>x</name></expr>]</index></name> <operator>*</operator> <literal type="number">1</literal> <operator>+</operator> <name><name>c3</name><index>[<expr><name>x</name></expr>]</index></name> <operator>*</operator> <operator>-</operator><literal type="number">1</literal> <operator>+</operator>

<name><name>c5</name><index>[<expr><name>x</name></expr>]</index></name> <operator>*</operator> <literal type="number">1</literal> <operator>+</operator> <name><name>c6</name><index>[<expr><name>x</name></expr>]</index></name> <operator>*</operator> <operator>-</operator><literal type="number">1</literal> <operator>+</operator> <name><name>c8</name><index>[<expr><name>x</name></expr>]</index></name> <operator>*</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>dst</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <call><name>av_clip_uint8</name><argument_list>(<argument><expr><call><name>sqrtf</name><argument_list>(<argument><expr><name>suma</name><operator>*</operator><name>suma</name> <operator>+</operator> <name>sumb</name><operator>*</operator><name>sumb</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>scale</name> <operator>+</operator> <name>delta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>filter_roberts</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>,

<parameter><decl><type><name>float</name></type> <name>scale</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>delta</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name> <modifier>*</modifier><specifier>const</specifier></type> <name>matrix</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name><name>c</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>peak</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>radius</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>dstride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stride</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>suma</name> <init>= <expr><name><name>c</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>x</name></expr>]</index></name> <operator>*</operator> <literal type="number">1</literal> <operator>+</operator> <name><name>c</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>x</name></expr>]</index></name> <operator>*</operator> <operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>sumb</name> <init>= <expr><name><name>c</name><index>[<expr><literal type="number">4</literal></expr>]</index><index>[<expr><name>x</name></expr>]</index></name> <operator>*</operator> <literal type="number">1</literal> <operator>+</operator> <name><name>c</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><name>x</name></expr>]</index></name> <operator>*</operator> <operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>dst</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <call><name>av_clip_uint8</name><argument_list>(<argument><expr><call><name>sqrtf</name><argument_list>(<argument><expr><name>suma</name><operator>*</operator><name>suma</name> <operator>+</operator> <name>sumb</name><operator>*</operator><name>sumb</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>scale</name> <operator>+</operator> <name>delta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>filter_sobel</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>,

<parameter><decl><type><name>float</name></type> <name>scale</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>delta</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name> <modifier>*</modifier><specifier>const</specifier></type> <name>matrix</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name><name>c</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>peak</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>radius</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>dstride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stride</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>c0</name> <init>= <expr><name><name>c</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>c1</name> <init>= <expr><name><name>c</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>c2</name> <init>= <expr><name><name>c</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>c3</name> <init>= <expr><name><name>c</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>c5</name> <init>= <expr><name><name>c</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>c6</name> <init>= <expr><name><name>c</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>c7</name> <init>= <expr><name><name>c</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>c8</name> <init>= <expr><name><name>c</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>suma</name> <init>= <expr><name><name>c0</name><index>[<expr><name>x</name></expr>]</index></name> <operator>*</operator> <operator>-</operator><literal type="number">1</literal> <operator>+</operator> <name><name>c1</name><index>[<expr><name>x</name></expr>]</index></name> <operator>*</operator> <operator>-</operator><literal type="number">2</literal> <operator>+</operator> <name><name>c2</name><index>[<expr><name>x</name></expr>]</index></name> <operator>*</operator> <operator>-</operator><literal type="number">1</literal> <operator>+</operator>

<name><name>c6</name><index>[<expr><name>x</name></expr>]</index></name> <operator>*</operator> <literal type="number">1</literal> <operator>+</operator> <name><name>c7</name><index>[<expr><name>x</name></expr>]</index></name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <name><name>c8</name><index>[<expr><name>x</name></expr>]</index></name> <operator>*</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>sumb</name> <init>= <expr><name><name>c0</name><index>[<expr><name>x</name></expr>]</index></name> <operator>*</operator> <operator>-</operator><literal type="number">1</literal> <operator>+</operator> <name><name>c2</name><index>[<expr><name>x</name></expr>]</index></name> <operator>*</operator> <literal type="number">1</literal> <operator>+</operator> <name><name>c3</name><index>[<expr><name>x</name></expr>]</index></name> <operator>*</operator> <operator>-</operator><literal type="number">2</literal> <operator>+</operator>

<name><name>c5</name><index>[<expr><name>x</name></expr>]</index></name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <name><name>c6</name><index>[<expr><name>x</name></expr>]</index></name> <operator>*</operator> <operator>-</operator><literal type="number">1</literal> <operator>+</operator> <name><name>c8</name><index>[<expr><name>x</name></expr>]</index></name> <operator>*</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>dst</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <call><name>av_clip_uint8</name><argument_list>(<argument><expr><call><name>sqrtf</name><argument_list>(<argument><expr><name>suma</name><operator>*</operator><name>suma</name> <operator>+</operator> <name>sumb</name><operator>*</operator><name>sumb</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>scale</name> <operator>+</operator> <name>delta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>filter16_3x3</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dstp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>,

<parameter><decl><type><name>float</name></type> <name>rdiv</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>bias</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name> <modifier>*</modifier><specifier>const</specifier></type> <name>matrix</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name><name>c</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>peak</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>radius</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>dstride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stride</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><name>dstp</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>sum</name> <init>= <expr><call><name>AV_RN16A</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>x</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>*</operator> <name><name>matrix</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator>

<call><name>AV_RN16A</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>x</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>*</operator> <name><name>matrix</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator>

<call><name>AV_RN16A</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>x</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>*</operator> <name><name>matrix</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator>

<call><name>AV_RN16A</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>x</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>*</operator> <name><name>matrix</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>+</operator>

<call><name>AV_RN16A</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><index>[<expr><literal type="number">4</literal></expr>]</index><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>x</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>*</operator> <name><name>matrix</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>+</operator>

<call><name>AV_RN16A</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><index>[<expr><literal type="number">5</literal></expr>]</index><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>x</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>*</operator> <name><name>matrix</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>+</operator>

<call><name>AV_RN16A</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><index>[<expr><literal type="number">6</literal></expr>]</index><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>x</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>*</operator> <name><name>matrix</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>+</operator>

<call><name>AV_RN16A</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><index>[<expr><literal type="number">7</literal></expr>]</index><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>x</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>*</operator> <name><name>matrix</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>+</operator>

<call><name>AV_RN16A</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><index>[<expr><literal type="number">8</literal></expr>]</index><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>x</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>*</operator> <name><name>matrix</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>sum</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>sum</name> <operator>*</operator> <name>rdiv</name> <operator>+</operator> <name>bias</name> <operator>+</operator> <literal type="number">0.5f</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <call><name>av_clip</name><argument_list>(<argument><expr><name>sum</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>peak</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>filter16_5x5</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dstp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>,

<parameter><decl><type><name>float</name></type> <name>rdiv</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>bias</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name> <modifier>*</modifier><specifier>const</specifier></type> <name>matrix</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name><name>c</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>peak</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>radius</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>dstride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stride</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><name>dstp</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>sum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">25</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name>sum</name> <operator>+=</operator> <call><name>AV_RN16A</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>x</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>*</operator> <name><name>matrix</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>sum</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>sum</name> <operator>*</operator> <name>rdiv</name> <operator>+</operator> <name>bias</name> <operator>+</operator> <literal type="number">0.5f</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <call><name>av_clip</name><argument_list>(<argument><expr><name>sum</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>peak</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>filter16_7x7</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dstp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>,

<parameter><decl><type><name>float</name></type> <name>rdiv</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>bias</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name> <modifier>*</modifier><specifier>const</specifier></type> <name>matrix</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name><name>c</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>peak</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>radius</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>dstride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stride</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><name>dstp</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>sum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">49</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name>sum</name> <operator>+=</operator> <call><name>AV_RN16A</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>x</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>*</operator> <name><name>matrix</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>sum</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>sum</name> <operator>*</operator> <name>rdiv</name> <operator>+</operator> <name>bias</name> <operator>+</operator> <literal type="number">0.5f</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <call><name>av_clip</name><argument_list>(<argument><expr><name>sum</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>peak</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>filter16_row</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dstp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>,

<parameter><decl><type><name>float</name></type> <name>rdiv</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>bias</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name> <modifier>*</modifier><specifier>const</specifier></type> <name>matrix</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name><name>c</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>peak</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>radius</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>dstride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stride</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><name>dstp</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>sum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">2</literal> <operator>*</operator> <name>radius</name> <operator>+</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name>sum</name> <operator>+=</operator> <call><name>AV_RN16A</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>x</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>*</operator> <name><name>matrix</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>sum</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>sum</name> <operator>*</operator> <name>rdiv</name> <operator>+</operator> <name>bias</name> <operator>+</operator> <literal type="number">0.5f</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <call><name>av_clip</name><argument_list>(<argument><expr><name>sum</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>peak</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>filter16_column</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dstp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>,

<parameter><decl><type><name>float</name></type> <name>rdiv</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>bias</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name> <modifier>*</modifier><specifier>const</specifier></type> <name>matrix</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name><name>c</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>peak</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>radius</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>dstride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stride</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><name>dstp</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>sum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">2</literal> <operator>*</operator> <name>radius</name> <operator>+</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name>sum</name> <operator>+=</operator> <call><name>AV_RN16A</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal> <operator>+</operator> <name>y</name> <operator>*</operator> <name>stride</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>*</operator> <name><name>matrix</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>sum</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>sum</name> <operator>*</operator> <name>rdiv</name> <operator>+</operator> <name>bias</name> <operator>+</operator> <literal type="number">0.5f</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>av_clip</name><argument_list>(<argument><expr><name>sum</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>peak</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dstride</name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>filter_7x7</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>,

<parameter><decl><type><name>float</name></type> <name>rdiv</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>bias</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name> <modifier>*</modifier><specifier>const</specifier></type> <name>matrix</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name><name>c</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>peak</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>radius</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>dstride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stride</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>sum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">49</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name>sum</name> <operator>+=</operator> <name><name>c</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>x</name></expr>]</index></name> <operator>*</operator> <name><name>matrix</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>sum</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>sum</name> <operator>*</operator> <name>rdiv</name> <operator>+</operator> <name>bias</name> <operator>+</operator> <literal type="number">0.5f</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <call><name>av_clip_uint8</name><argument_list>(<argument><expr><name>sum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>filter_5x5</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>,

<parameter><decl><type><name>float</name></type> <name>rdiv</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>bias</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name> <modifier>*</modifier><specifier>const</specifier></type> <name>matrix</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name><name>c</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>peak</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>radius</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>dstride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stride</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>sum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">25</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name>sum</name> <operator>+=</operator> <name><name>c</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>x</name></expr>]</index></name> <operator>*</operator> <name><name>matrix</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>sum</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>sum</name> <operator>*</operator> <name>rdiv</name> <operator>+</operator> <name>bias</name> <operator>+</operator> <literal type="number">0.5f</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <call><name>av_clip_uint8</name><argument_list>(<argument><expr><name>sum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>filter_3x3</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>,

<parameter><decl><type><name>float</name></type> <name>rdiv</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>bias</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name> <modifier>*</modifier><specifier>const</specifier></type> <name>matrix</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name><name>c</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>peak</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>radius</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>dstride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stride</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>c0</name> <init>= <expr><name><name>c</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>c1</name> <init>= <expr><name><name>c</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>c2</name> <init>= <expr><name><name>c</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>c3</name> <init>= <expr><name><name>c</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>c4</name> <init>= <expr><name><name>c</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>c5</name> <init>= <expr><name><name>c</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>c6</name> <init>= <expr><name><name>c</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>c7</name> <init>= <expr><name><name>c</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>c8</name> <init>= <expr><name><name>c</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>sum</name> <init>= <expr><name><name>c0</name><index>[<expr><name>x</name></expr>]</index></name> <operator>*</operator> <name><name>matrix</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>c1</name><index>[<expr><name>x</name></expr>]</index></name> <operator>*</operator> <name><name>matrix</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>c2</name><index>[<expr><name>x</name></expr>]</index></name> <operator>*</operator> <name><name>matrix</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator>

<name><name>c3</name><index>[<expr><name>x</name></expr>]</index></name> <operator>*</operator> <name><name>matrix</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>+</operator> <name><name>c4</name><index>[<expr><name>x</name></expr>]</index></name> <operator>*</operator> <name><name>matrix</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>+</operator> <name><name>c5</name><index>[<expr><name>x</name></expr>]</index></name> <operator>*</operator> <name><name>matrix</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>+</operator>

<name><name>c6</name><index>[<expr><name>x</name></expr>]</index></name> <operator>*</operator> <name><name>matrix</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>+</operator> <name><name>c7</name><index>[<expr><name>x</name></expr>]</index></name> <operator>*</operator> <name><name>matrix</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>+</operator> <name><name>c8</name><index>[<expr><name>x</name></expr>]</index></name> <operator>*</operator> <name><name>matrix</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>sum</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>sum</name> <operator>*</operator> <name>rdiv</name> <operator>+</operator> <name>bias</name> <operator>+</operator> <literal type="number">0.5f</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <call><name>av_clip_uint8</name><argument_list>(<argument><expr><name>sum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>filter_row</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>,

<parameter><decl><type><name>float</name></type> <name>rdiv</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>bias</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name> <modifier>*</modifier><specifier>const</specifier></type> <name>matrix</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name><name>c</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>peak</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>radius</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>dstride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stride</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>sum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">2</literal> <operator>*</operator> <name>radius</name> <operator>+</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name>sum</name> <operator>+=</operator> <name><name>c</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>x</name></expr>]</index></name> <operator>*</operator> <name><name>matrix</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>sum</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>sum</name> <operator>*</operator> <name>rdiv</name> <operator>+</operator> <name>bias</name> <operator>+</operator> <literal type="number">0.5f</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <call><name>av_clip_uint8</name><argument_list>(<argument><expr><name>sum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>filter_column</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>,

<parameter><decl><type><name>float</name></type> <name>rdiv</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>bias</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name> <modifier>*</modifier><specifier>const</specifier></type> <name>matrix</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name><name>c</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>peak</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>radius</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>dstride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stride</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>sum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">2</literal> <operator>*</operator> <name>radius</name> <operator>+</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name>sum</name> <operator>+=</operator> <name><name>c</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal> <operator>+</operator> <name>y</name> <operator>*</operator> <name>stride</name></expr>]</index></name> <operator>*</operator> <name><name>matrix</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>sum</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>sum</name> <operator>*</operator> <name>rdiv</name> <operator>+</operator> <name>bias</name> <operator>+</operator> <literal type="number">0.5f</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>av_clip_uint8</name><argument_list>(<argument><expr><name>sum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dstride</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>setup_3x3</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>radius</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name><name>c</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stride</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bpc</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">9</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>xoff</name> <init>= <expr><call><name>FFABS</name><argument_list>(<argument><expr><name>x</name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>i</name> <operator>%</operator> <literal type="number">3</literal><operator>)</operator> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>yoff</name> <init>= <expr><call><name>FFABS</name><argument_list>(<argument><expr><name>y</name> <operator>+</operator> <operator>(</operator><name>i</name> <operator>/</operator> <literal type="number">3</literal><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>xoff</name> <operator>=</operator> <ternary><condition><expr><name>xoff</name> <operator>&gt;=</operator> <name>w</name></expr> ?</condition><then> <expr><literal type="number">2</literal> <operator>*</operator> <name>w</name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <name>xoff</name></expr> </then><else>: <expr><name>xoff</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>yoff</name> <operator>=</operator> <ternary><condition><expr><name>yoff</name> <operator>&gt;=</operator> <name>h</name></expr> ?</condition><then> <expr><literal type="number">2</literal> <operator>*</operator> <name>h</name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <name>yoff</name></expr> </then><else>: <expr><name>yoff</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>src</name> <operator>+</operator> <name>xoff</name> <operator>*</operator> <name>bpc</name> <operator>+</operator> <name>yoff</name> <operator>*</operator> <name>stride</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>setup_5x5</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>radius</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name><name>c</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stride</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bpc</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">25</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>xoff</name> <init>= <expr><call><name>FFABS</name><argument_list>(<argument><expr><name>x</name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>i</name> <operator>%</operator> <literal type="number">5</literal><operator>)</operator> <operator>-</operator> <literal type="number">2</literal><operator>)</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>yoff</name> <init>= <expr><call><name>FFABS</name><argument_list>(<argument><expr><name>y</name> <operator>+</operator> <operator>(</operator><name>i</name> <operator>/</operator> <literal type="number">5</literal><operator>)</operator> <operator>-</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>xoff</name> <operator>=</operator> <ternary><condition><expr><name>xoff</name> <operator>&gt;=</operator> <name>w</name></expr> ?</condition><then> <expr><literal type="number">2</literal> <operator>*</operator> <name>w</name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <name>xoff</name></expr> </then><else>: <expr><name>xoff</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>yoff</name> <operator>=</operator> <ternary><condition><expr><name>yoff</name> <operator>&gt;=</operator> <name>h</name></expr> ?</condition><then> <expr><literal type="number">2</literal> <operator>*</operator> <name>h</name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <name>yoff</name></expr> </then><else>: <expr><name>yoff</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>src</name> <operator>+</operator> <name>xoff</name> <operator>*</operator> <name>bpc</name> <operator>+</operator> <name>yoff</name> <operator>*</operator> <name>stride</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>setup_7x7</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>radius</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name><name>c</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stride</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bpc</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">49</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>xoff</name> <init>= <expr><call><name>FFABS</name><argument_list>(<argument><expr><name>x</name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>i</name> <operator>%</operator> <literal type="number">7</literal><operator>)</operator> <operator>-</operator> <literal type="number">3</literal><operator>)</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>yoff</name> <init>= <expr><call><name>FFABS</name><argument_list>(<argument><expr><name>y</name> <operator>+</operator> <operator>(</operator><name>i</name> <operator>/</operator> <literal type="number">7</literal><operator>)</operator> <operator>-</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>xoff</name> <operator>=</operator> <ternary><condition><expr><name>xoff</name> <operator>&gt;=</operator> <name>w</name></expr> ?</condition><then> <expr><literal type="number">2</literal> <operator>*</operator> <name>w</name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <name>xoff</name></expr> </then><else>: <expr><name>xoff</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>yoff</name> <operator>=</operator> <ternary><condition><expr><name>yoff</name> <operator>&gt;=</operator> <name>h</name></expr> ?</condition><then> <expr><literal type="number">2</literal> <operator>*</operator> <name>h</name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <name>yoff</name></expr> </then><else>: <expr><name>yoff</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>src</name> <operator>+</operator> <name>xoff</name> <operator>*</operator> <name>bpc</name> <operator>+</operator> <name>yoff</name> <operator>*</operator> <name>stride</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>setup_row</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>radius</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name><name>c</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stride</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bpc</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>radius</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>xoff</name> <init>= <expr><call><name>FFABS</name><argument_list>(<argument><expr><name>x</name> <operator>+</operator> <name>i</name> <operator>-</operator> <name>radius</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>xoff</name> <operator>=</operator> <ternary><condition><expr><name>xoff</name> <operator>&gt;=</operator> <name>w</name></expr> ?</condition><then> <expr><literal type="number">2</literal> <operator>*</operator> <name>w</name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <name>xoff</name></expr> </then><else>: <expr><name>xoff</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>src</name> <operator>+</operator> <name>xoff</name> <operator>*</operator> <name>bpc</name> <operator>+</operator> <name>y</name> <operator>*</operator> <name>stride</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>setup_column</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>radius</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name><name>c</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stride</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bpc</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>radius</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>xoff</name> <init>= <expr><call><name>FFABS</name><argument_list>(<argument><expr><name>x</name> <operator>+</operator> <name>i</name> <operator>-</operator> <name>radius</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>xoff</name> <operator>=</operator> <ternary><condition><expr><name>xoff</name> <operator>&gt;=</operator> <name>h</name></expr> ?</condition><then> <expr><literal type="number">2</literal> <operator>*</operator> <name>h</name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <name>xoff</name></expr> </then><else>: <expr><name>xoff</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>src</name> <operator>+</operator> <name>y</name> <operator>*</operator> <name>bpc</name> <operator>+</operator> <name>xoff</name> <operator>*</operator> <name>stride</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>filter_slice</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>jobnr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nb_jobs</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ConvolutionContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ThreadData</name> <modifier>*</modifier></type><name>td</name> <init>= <expr><name>arg</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>in</name> <init>= <expr><name><name>td</name><operator>-&gt;</operator><name>in</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>out</name> <init>= <expr><name><name>td</name><operator>-&gt;</operator><name>out</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>plane</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>plane</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>plane</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>nb_planes</name></name></expr>;</condition> <incr><expr><name>plane</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>mode</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>mode</name><index>[<expr><name>plane</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>bpc</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>bpc</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>radius</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>size</name><index>[<expr><name>plane</name></expr>]</index></name> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>height</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>planeheight</name><index>[<expr><name>plane</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>width</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>planewidth</name><index>[<expr><name>plane</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>stride</name> <init>= <expr><name><name>in</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>plane</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>dstride</name> <init>= <expr><name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>plane</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>sizeh</name> <init>= <expr><ternary><condition><expr><name>mode</name> <operator>==</operator> <name>MATRIX_COLUMN</name></expr> ?</condition><then> <expr><name>width</name></expr> </then><else>: <expr><name>height</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>sizew</name> <init>= <expr><ternary><condition><expr><name>mode</name> <operator>==</operator> <name>MATRIX_COLUMN</name></expr> ?</condition><then> <expr><name>height</name></expr> </then><else>: <expr><name>width</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>slice_start</name> <init>= <expr><operator>(</operator><name>sizeh</name> <operator>*</operator> <name>jobnr</name><operator>)</operator> <operator>/</operator> <name>nb_jobs</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>slice_end</name> <init>= <expr><operator>(</operator><name>sizeh</name> <operator>*</operator> <operator>(</operator><name>jobnr</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>/</operator> <name>nb_jobs</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>rdiv</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>rdiv</name><index>[<expr><name>plane</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>bias</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>bias</name><index>[<expr><name>plane</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><name><name>in</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>plane</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>dst_pos</name> <init>= <expr><name>slice_start</name> <operator>*</operator> <operator>(</operator><ternary><condition><expr><name>mode</name> <operator>==</operator> <name>MATRIX_COLUMN</name></expr> ?</condition><then> <expr><name>bpc</name></expr> </then><else>: <expr><name>dstride</name></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>plane</name></expr>]</index></name> <operator>+</operator> <name>dst_pos</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name> <modifier>*</modifier></type><name>matrix</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>matrix</name><index>[<expr><name>plane</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name><name>c</name><index>[<expr><literal type="number">49</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>, <decl><type ref="prev"/><name>x</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>copy</name><index>[<expr><name>plane</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>mode</name> <operator>==</operator> <name>MATRIX_COLUMN</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_image_copy_plane</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstride</name></expr></argument>, <argument><expr><name>src</name> <operator>+</operator> <name>slice_start</name> <operator>*</operator> <name>bpc</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>,

<argument><expr><operator>(</operator><name>slice_end</name> <operator>-</operator> <name>slice_start</name><operator>)</operator> <operator>*</operator> <name>bpc</name></expr></argument>, <argument><expr><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_image_copy_plane</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstride</name></expr></argument>, <argument><expr><name>src</name> <operator>+</operator> <name>slice_start</name> <operator>*</operator> <name>stride</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>,

<argument><expr><name>width</name> <operator>*</operator> <name>bpc</name></expr></argument>, <argument><expr><name>slice_end</name> <operator>-</operator> <name>slice_start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <name>slice_start</name></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>slice_end</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>xoff</name> <init>= <expr><ternary><condition><expr><name>mode</name> <operator>==</operator> <name>MATRIX_COLUMN</name></expr> ?</condition><then> <expr><operator>(</operator><name>y</name> <operator>-</operator> <name>slice_start</name><operator>)</operator> <operator>*</operator> <name>bpc</name></expr> </then><else>: <expr><name>radius</name> <operator>*</operator> <name>bpc</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>yoff</name> <init>= <expr><ternary><condition><expr><name>mode</name> <operator>==</operator> <name>MATRIX_COLUMN</name></expr> ?</condition><then> <expr><name>radius</name> <operator>*</operator> <name>stride</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>radius</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>xoff</name> <init>= <expr><ternary><condition><expr><name>mode</name> <operator>==</operator> <name>MATRIX_COLUMN</name></expr> ?</condition><then> <expr><operator>(</operator><name>y</name> <operator>-</operator> <name>slice_start</name><operator>)</operator> <operator>*</operator> <name>bpc</name></expr> </then><else>: <expr><name>x</name> <operator>*</operator> <name>bpc</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>yoff</name> <init>= <expr><ternary><condition><expr><name>mode</name> <operator>==</operator> <name>MATRIX_COLUMN</name></expr> ?</condition><then> <expr><name>x</name> <operator>*</operator> <name>stride</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>setup</name><index>[<expr><name>plane</name></expr>]</index></name><operator>(</operator><name>radius</name><operator>,</operator> <name>c</name><operator>,</operator> <name>src</name><operator>,</operator> <name>stride</name><operator>,</operator> <name>x</name><operator>,</operator> <name>width</name><operator>,</operator> <name>y</name><operator>,</operator> <name>height</name><operator>,</operator> <name>bpc</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>filter</name><index>[<expr><name>plane</name></expr>]</index></name><operator>(</operator><name>dst</name> <operator>+</operator> <name>yoff</name> <operator>+</operator> <name>xoff</name><operator>,</operator> <literal type="number">1</literal><operator>,</operator> <name>rdiv</name><operator>,</operator>

<name>bias</name><operator>,</operator> <name>matrix</name><operator>,</operator> <name>c</name><operator>,</operator> <name><name>s</name><operator>-&gt;</operator><name>max</name></name><operator>,</operator> <name>radius</name><operator>,</operator>

<name>dstride</name><operator>,</operator> <name>stride</name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>setup</name><index>[<expr><name>plane</name></expr>]</index></name><operator>(</operator><name>radius</name><operator>,</operator> <name>c</name><operator>,</operator> <name>src</name><operator>,</operator> <name>stride</name><operator>,</operator> <name>radius</name><operator>,</operator> <name>width</name><operator>,</operator> <name>y</name><operator>,</operator> <name>height</name><operator>,</operator> <name>bpc</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>filter</name><index>[<expr><name>plane</name></expr>]</index></name><operator>(</operator><name>dst</name> <operator>+</operator> <name>yoff</name> <operator>+</operator> <name>xoff</name><operator>,</operator> <name>sizew</name> <operator>-</operator> <literal type="number">2</literal> <operator>*</operator> <name>radius</name><operator>,</operator>

<name>rdiv</name><operator>,</operator> <name>bias</name><operator>,</operator> <name>matrix</name><operator>,</operator> <name>c</name><operator>,</operator> <name><name>s</name><operator>-&gt;</operator><name>max</name></name><operator>,</operator> <name>radius</name><operator>,</operator>

<name>dstride</name><operator>,</operator> <name>stride</name><operator>)</operator></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <name>sizew</name> <operator>-</operator> <name>radius</name></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>sizew</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>xoff</name> <init>= <expr><ternary><condition><expr><name>mode</name> <operator>==</operator> <name>MATRIX_COLUMN</name></expr> ?</condition><then> <expr><operator>(</operator><name>y</name> <operator>-</operator> <name>slice_start</name><operator>)</operator> <operator>*</operator> <name>bpc</name></expr> </then><else>: <expr><name>x</name> <operator>*</operator> <name>bpc</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>yoff</name> <init>= <expr><ternary><condition><expr><name>mode</name> <operator>==</operator> <name>MATRIX_COLUMN</name></expr> ?</condition><then> <expr><name>x</name> <operator>*</operator> <name>stride</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>setup</name><index>[<expr><name>plane</name></expr>]</index></name><operator>(</operator><name>radius</name><operator>,</operator> <name>c</name><operator>,</operator> <name>src</name><operator>,</operator> <name>stride</name><operator>,</operator> <name>x</name><operator>,</operator> <name>width</name><operator>,</operator> <name>y</name><operator>,</operator> <name>height</name><operator>,</operator> <name>bpc</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>filter</name><index>[<expr><name>plane</name></expr>]</index></name><operator>(</operator><name>dst</name> <operator>+</operator> <name>yoff</name> <operator>+</operator> <name>xoff</name><operator>,</operator> <literal type="number">1</literal><operator>,</operator> <name>rdiv</name><operator>,</operator>

<name>bias</name><operator>,</operator> <name>matrix</name><operator>,</operator> <name>c</name><operator>,</operator> <name><name>s</name><operator>-&gt;</operator><name>max</name></name><operator>,</operator> <name>radius</name><operator>,</operator>

<name>dstride</name><operator>,</operator> <name>stride</name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>mode</name> <operator>!=</operator> <name>MATRIX_COLUMN</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dstride</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>config_input</name><parameter_list>(<parameter><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>inlink</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>inlink</name><operator>-&gt;</operator><name>dst</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ConvolutionContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>AVPixFmtDescriptor</name> <modifier>*</modifier></type><name>desc</name> <init>= <expr><call><name>av_pix_fmt_desc_get</name><argument_list>(<argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>format</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>p</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>depth</name></name> <operator>=</operator> <name><name>desc</name><operator>-&gt;</operator><name>comp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>depth</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>max</name></name> <operator>=</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>depth</name></name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>planewidth</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>planewidth</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>AV_CEIL_RSHIFT</name><argument_list>(<argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>w</name></name></expr></argument>, <argument><expr><name><name>desc</name><operator>-&gt;</operator><name>log2_chroma_w</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>planewidth</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>planewidth</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>inlink</name><operator>-&gt;</operator><name>w</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>planeheight</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>planeheight</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>AV_CEIL_RSHIFT</name><argument_list>(<argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>h</name></name></expr></argument>, <argument><expr><name><name>desc</name><operator>-&gt;</operator><name>log2_chroma_h</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>planeheight</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>planeheight</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>inlink</name><operator>-&gt;</operator><name>h</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>nb_planes</name></name> <operator>=</operator> <call><name>av_pix_fmt_count_planes</name><argument_list>(<argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>format</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>nb_threads</name></name> <operator>=</operator> <call><name>ff_filter_get_nb_threads</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>bpc</name></name> <operator>=</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>depth</name></name> <operator>+</operator> <literal type="number">7</literal><operator>)</operator> <operator>/</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>filter</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="string">"convolution"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>depth</name></name> <operator>&gt;</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>p</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>nb_planes</name></name></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>mode</name><index>[<expr><name>p</name></expr>]</index></name> <operator>==</operator> <name>MATRIX_ROW</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>filter</name><index>[<expr><name>p</name></expr>]</index></name> <operator>=</operator> <name>filter16_row</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>mode</name><index>[<expr><name>p</name></expr>]</index></name> <operator>==</operator> <name>MATRIX_COLUMN</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>filter</name><index>[<expr><name>p</name></expr>]</index></name> <operator>=</operator> <name>filter16_column</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>size</name><index>[<expr><name>p</name></expr>]</index></name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>filter</name><index>[<expr><name>p</name></expr>]</index></name> <operator>=</operator> <name>filter16_3x3</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>size</name><index>[<expr><name>p</name></expr>]</index></name> <operator>==</operator> <literal type="number">5</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>filter</name><index>[<expr><name>p</name></expr>]</index></name> <operator>=</operator> <name>filter16_5x5</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>size</name><index>[<expr><name>p</name></expr>]</index></name> <operator>==</operator> <literal type="number">7</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>filter</name><index>[<expr><name>p</name></expr>]</index></name> <operator>=</operator> <name>filter16_7x7</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_CONVOLUTION_FILTER</name> <operator>&amp;&amp;</operator> <name>ARCH_X86_64</name></expr></cpp:if>

<expr_stmt><expr><call><name>ff_convolution_init_x86</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>filter</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="string">"prewitt"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>depth</name></name> <operator>&gt;</operator> <literal type="number">8</literal></expr>)</condition><block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>p</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>nb_planes</name></name></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>filter</name><index>[<expr><name>p</name></expr>]</index></name> <operator>=</operator> <name>filter16_prewitt</name></expr>;</expr_stmt></block_content></block></for></block_content></block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>filter</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="string">"roberts"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>depth</name></name> <operator>&gt;</operator> <literal type="number">8</literal></expr>)</condition><block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>p</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>nb_planes</name></name></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>filter</name><index>[<expr><name>p</name></expr>]</index></name> <operator>=</operator> <name>filter16_roberts</name></expr>;</expr_stmt></block_content></block></for></block_content></block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>filter</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="string">"sobel"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>depth</name></name> <operator>&gt;</operator> <literal type="number">8</literal></expr>)</condition><block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>p</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>nb_planes</name></name></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>filter</name><index>[<expr><name>p</name></expr>]</index></name> <operator>=</operator> <name>filter16_sobel</name></expr>;</expr_stmt></block_content></block></for></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>filter_frame</name><parameter_list>(<parameter><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>inlink</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>in</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>inlink</name><operator>-&gt;</operator><name>dst</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ConvolutionContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>outlink</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>outputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>out</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ThreadData</name></type> <name>td</name></decl>;</decl_stmt>

<expr_stmt><expr><name>out</name> <operator>=</operator> <call><name>ff_get_video_buffer</name><argument_list>(<argument><expr><name>outlink</name></expr></argument>, <argument><expr><name><name>outlink</name><operator>-&gt;</operator><name>w</name></name></expr></argument>, <argument><expr><name><name>outlink</name><operator>-&gt;</operator><name>h</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>out</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_frame_copy_props</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>td</name><operator>.</operator><name>in</name></name> <operator>=</operator> <name>in</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>td</name><operator>.</operator><name>out</name></name> <operator>=</operator> <name>out</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>ctx</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>filter_slice</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>td</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><call><name>FFMIN3</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>planeheight</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>planewidth</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>nb_threads</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>ff_filter_frame</name><argument_list>(<argument><expr><name>outlink</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>init</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ConvolutionContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>filter</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="string">"convolution"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>matrix</name> <init>= <expr><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><name><name>s</name><operator>-&gt;</operator><name>matrix</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>arg</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>saveptr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>sum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>matrix_str</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<while>while <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>matrix_length</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;</operator> <literal type="number">49</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>arg</name> <operator>=</operator> <call><name>av_strtok</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>saveptr</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sscanf</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>matrix</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>matrix_length</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sum</name> <operator>+=</operator> <name><name>matrix</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>matrix_length</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>matrix_length</name><index>[<expr><name>i</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>matrix_length</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"number of matrix elements must be odd\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>mode</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>MATRIX_ROW</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>filter</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>filter_row</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>setup</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>setup_row</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>size</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>matrix_length</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>mode</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>MATRIX_COLUMN</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>filter</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>filter_column</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>setup</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>setup_column</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>size</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>matrix_length</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>matrix_length</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="number">9</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>size</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>memcmp</name><argument_list>(<argument><expr><name>matrix</name></expr></argument>, <argument><expr><name>same3x3</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>same3x3</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>copy</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>filter</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>filter_3x3</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>setup</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>setup_3x3</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>matrix_length</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="number">25</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>size</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>memcmp</name><argument_list>(<argument><expr><name>matrix</name></expr></argument>, <argument><expr><name>same5x5</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>same5x5</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>copy</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>filter</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>filter_5x5</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>setup</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>setup_5x5</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>matrix_length</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="number">49</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>size</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">7</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>memcmp</name><argument_list>(<argument><expr><name>matrix</name></expr></argument>, <argument><expr><name>same7x7</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>same7x7</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>copy</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>filter</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>filter_7x7</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>setup</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>setup_7x7</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>sum</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>sum</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>rdiv</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>rdiv</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">1.</literal> <operator>/</operator> <name>sum</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>copy</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>rdiv</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <literal type="number">1.</literal> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>bias</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <literal type="number">0.</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>copy</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>filter</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="string">"prewitt"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>i</name><operator>)</operator> <operator>&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>planes</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>filter</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>filter_prewitt</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>copy</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>size</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>setup</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>setup_3x3</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>rdiv</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>scale</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>bias</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>delta</name></name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>filter</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="string">"roberts"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>i</name><operator>)</operator> <operator>&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>planes</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>filter</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>filter_roberts</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>copy</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>size</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>setup</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>setup_3x3</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>rdiv</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>scale</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>bias</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>delta</name></name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>filter</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="string">"sobel"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>i</name><operator>)</operator> <operator>&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>planes</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>filter</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>filter_sobel</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>copy</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>size</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>setup</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>setup_3x3</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>rdiv</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>scale</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>bias</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>delta</name></name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVFilterPad</name></type> <name><name>convolution_inputs</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"default"</literal></expr>,

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,

<expr><operator>.</operator><name>config_props</name> <operator>=</operator> <name>config_input</name></expr>,

<expr><operator>.</operator><name>filter_frame</name> <operator>=</operator> <name>filter_frame</name></expr>,

}</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVFilterPad</name></type> <name><name>convolution_outputs</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"default"</literal></expr>,

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,

}</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_CONVOLUTION_FILTER</name></expr></cpp:if>

<decl_stmt><decl><type><name>AVFilter</name></type> <name>ff_vf_convolution</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"convolution"</literal></expr>,

<expr><operator>.</operator><name>description</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"Apply convolution filter."</literal></expr></argument>)</argument_list></call></expr>,

<expr><operator>.</operator><name>priv_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>ConvolutionContext</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><operator>.</operator><name>priv_class</name> <operator>=</operator> <operator>&amp;</operator><name>convolution_class</name></expr>,

<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>init</name></expr>,

<expr><operator>.</operator><name>query_formats</name> <operator>=</operator> <name>query_formats</name></expr>,

<expr><operator>.</operator><name>inputs</name> <operator>=</operator> <name>convolution_inputs</name></expr>,

<expr><operator>.</operator><name>outputs</name> <operator>=</operator> <name>convolution_outputs</name></expr>,

<expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>AVFILTER_FLAG_SUPPORT_TIMELINE_GENERIC</name> <operator>|</operator> <name>AVFILTER_FLAG_SLICE_THREADS</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_PREWITT_FILTER</name></expr></cpp:if>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVOption</name></type> <name><name>prewitt_options</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><literal type="string">"planes"</literal></expr>, <expr><literal type="string">"set planes to filter"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>planes</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">15</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><name>FLAGS</name></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"scale"</literal></expr>, <expr><literal type="string">"set scale"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>scale</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_FLOAT</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name><operator>=</operator><literal type="number">1.0</literal></expr>}</block></expr>, <expr><literal type="number">0.0</literal></expr>, <expr><literal type="number">65535</literal></expr>, <expr><name>FLAGS</name></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"delta"</literal></expr>, <expr><literal type="string">"set delta"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>delta</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_FLOAT</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name><operator>=</operator><literal type="number">0</literal></expr>}</block></expr>, <expr><operator>-</operator><literal type="number">65535</literal></expr>, <expr><literal type="number">65535</literal></expr>, <expr><name>FLAGS</name></expr>}</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>AVFILTER_DEFINE_CLASS</name><argument_list>(<argument><expr><name>prewitt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>AVFilter</name></type> <name>ff_vf_prewitt</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"prewitt"</literal></expr>,

<expr><operator>.</operator><name>description</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"Apply prewitt operator."</literal></expr></argument>)</argument_list></call></expr>,

<expr><operator>.</operator><name>priv_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>ConvolutionContext</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><operator>.</operator><name>priv_class</name> <operator>=</operator> <operator>&amp;</operator><name>prewitt_class</name></expr>,

<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>init</name></expr>,

<expr><operator>.</operator><name>query_formats</name> <operator>=</operator> <name>query_formats</name></expr>,

<expr><operator>.</operator><name>inputs</name> <operator>=</operator> <name>convolution_inputs</name></expr>,

<expr><operator>.</operator><name>outputs</name> <operator>=</operator> <name>convolution_outputs</name></expr>,

<expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>AVFILTER_FLAG_SUPPORT_TIMELINE_GENERIC</name> <operator>|</operator> <name>AVFILTER_FLAG_SLICE_THREADS</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_SOBEL_FILTER</name></expr></cpp:if>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVOption</name></type> <name><name>sobel_options</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><literal type="string">"planes"</literal></expr>, <expr><literal type="string">"set planes to filter"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>planes</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">15</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><name>FLAGS</name></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"scale"</literal></expr>, <expr><literal type="string">"set scale"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>scale</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_FLOAT</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name><operator>=</operator><literal type="number">1.0</literal></expr>}</block></expr>, <expr><literal type="number">0.0</literal></expr>, <expr><literal type="number">65535</literal></expr>, <expr><name>FLAGS</name></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"delta"</literal></expr>, <expr><literal type="string">"set delta"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>delta</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_FLOAT</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name><operator>=</operator><literal type="number">0</literal></expr>}</block></expr>, <expr><operator>-</operator><literal type="number">65535</literal></expr>, <expr><literal type="number">65535</literal></expr>, <expr><name>FLAGS</name></expr>}</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>AVFILTER_DEFINE_CLASS</name><argument_list>(<argument><expr><name>sobel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>AVFilter</name></type> <name>ff_vf_sobel</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"sobel"</literal></expr>,

<expr><operator>.</operator><name>description</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"Apply sobel operator."</literal></expr></argument>)</argument_list></call></expr>,

<expr><operator>.</operator><name>priv_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>ConvolutionContext</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><operator>.</operator><name>priv_class</name> <operator>=</operator> <operator>&amp;</operator><name>sobel_class</name></expr>,

<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>init</name></expr>,

<expr><operator>.</operator><name>query_formats</name> <operator>=</operator> <name>query_formats</name></expr>,

<expr><operator>.</operator><name>inputs</name> <operator>=</operator> <name>convolution_inputs</name></expr>,

<expr><operator>.</operator><name>outputs</name> <operator>=</operator> <name>convolution_outputs</name></expr>,

<expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>AVFILTER_FLAG_SUPPORT_TIMELINE_GENERIC</name> <operator>|</operator> <name>AVFILTER_FLAG_SLICE_THREADS</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_ROBERTS_FILTER</name></expr></cpp:if>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVOption</name></type> <name><name>roberts_options</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><literal type="string">"planes"</literal></expr>, <expr><literal type="string">"set planes to filter"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>planes</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">15</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><name>FLAGS</name></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"scale"</literal></expr>, <expr><literal type="string">"set scale"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>scale</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_FLOAT</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name><operator>=</operator><literal type="number">1.0</literal></expr>}</block></expr>, <expr><literal type="number">0.0</literal></expr>, <expr><literal type="number">65535</literal></expr>, <expr><name>FLAGS</name></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"delta"</literal></expr>, <expr><literal type="string">"set delta"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>delta</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_FLOAT</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name><operator>=</operator><literal type="number">0</literal></expr>}</block></expr>, <expr><operator>-</operator><literal type="number">65535</literal></expr>, <expr><literal type="number">65535</literal></expr>, <expr><name>FLAGS</name></expr>}</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>AVFILTER_DEFINE_CLASS</name><argument_list>(<argument><expr><name>roberts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>AVFilter</name></type> <name>ff_vf_roberts</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"roberts"</literal></expr>,

<expr><operator>.</operator><name>description</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"Apply roberts cross operator."</literal></expr></argument>)</argument_list></call></expr>,

<expr><operator>.</operator><name>priv_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>ConvolutionContext</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><operator>.</operator><name>priv_class</name> <operator>=</operator> <operator>&amp;</operator><name>roberts_class</name></expr>,

<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>init</name></expr>,

<expr><operator>.</operator><name>query_formats</name> <operator>=</operator> <name>query_formats</name></expr>,

<expr><operator>.</operator><name>inputs</name> <operator>=</operator> <name>convolution_inputs</name></expr>,

<expr><operator>.</operator><name>outputs</name> <operator>=</operator> <name>convolution_outputs</name></expr>,

<expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>AVFILTER_FLAG_SUPPORT_TIMELINE_GENERIC</name> <operator>|</operator> <name>AVFILTER_FLAG_SLICE_THREADS</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

</unit>
