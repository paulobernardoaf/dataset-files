<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavfilter\vf_bwdif.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avassert.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/common.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/opt.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/pixdesc.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/imgutils.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avfilter.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"formats.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"video.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bwdif.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint16_t</name></type> <name><name>coef_lf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">4309</literal></expr>, <expr><literal type="number">213</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint16_t</name></type> <name><name>coef_hf</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">5570</literal></expr>, <expr><literal type="number">3801</literal></expr>, <expr><literal type="number">1016</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint16_t</name></type> <name><name>coef_sp</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">5077</literal></expr>, <expr><literal type="number">981</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<typedef>typedef <type><struct>struct <name>ThreadData</name> <block>{

<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>frame</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>plane</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>w</name></decl>, <name>h</name>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>parity</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>tff</name></decl>;</decl_stmt>

}</block></struct></type> <name>ThreadData</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FILTER_INTRA</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>for (x = 0; x &lt; w; x++) { interpol = (coef_sp[0] * (cur[mrefs] + cur[prefs]) - coef_sp[1] * (cur[mrefs3] + cur[prefs3])) &gt;&gt; 13; dst[0] = av_clip(interpol, 0, clip_max); dst++; cur++; }</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FILTER1</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>for (x = 0; x &lt; w; x++) { int c = cur[mrefs]; int d = (prev2[0] + next2[0]) &gt;&gt; 1; int e = cur[prefs]; int temporal_diff0 = FFABS(prev2[0] - next2[0]); int temporal_diff1 =(FFABS(prev[mrefs] - c) + FFABS(prev[prefs] - e)) &gt;&gt; 1; int temporal_diff2 =(FFABS(next[mrefs] - c) + FFABS(next[prefs] - e)) &gt;&gt; 1; int diff = FFMAX3(temporal_diff0 &gt;&gt; 1, temporal_diff1, temporal_diff2); if (!diff) { dst[0] = d; } else {</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SPAT_CHECK</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>int b = ((prev2[mrefs2] + next2[mrefs2]) &gt;&gt; 1) - c; int f = ((prev2[prefs2] + next2[prefs2]) &gt;&gt; 1) - e; int dc = d - c; int de = d - e; int max = FFMAX3(de, dc, FFMIN(b, f)); int min = FFMIN3(de, dc, FFMAX(b, f)); diff = FFMAX3(diff, min, -max);</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FILTER_LINE</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>SPAT_CHECK() if (FFABS(c - e) &gt; temporal_diff0) { interpol = (((coef_hf[0] * (prev2[0] + next2[0]) - coef_hf[1] * (prev2[mrefs2] + next2[mrefs2] + prev2[prefs2] + next2[prefs2]) + coef_hf[2] * (prev2[mrefs4] + next2[mrefs4] + prev2[prefs4] + next2[prefs4])) &gt;&gt; 2) + coef_lf[0] * (c + e) - coef_lf[1] * (cur[mrefs3] + cur[prefs3])) &gt;&gt; 13; } else { interpol = (coef_sp[0] * (c + e) - coef_sp[1] * (cur[mrefs3] + cur[prefs3])) &gt;&gt; 13; }</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FILTER_EDGE</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>if (spat) { SPAT_CHECK() } interpol = (c + e) &gt;&gt; 1;</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FILTER2</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>if (interpol &gt; d + diff) interpol = d + diff; else if (interpol &lt; d - diff) interpol = d - diff; dst[0] = av_clip(interpol, 0, clip_max); } dst++; cur++; prev++; next++; prev2++; next2++; }</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type> <name>filter_intra</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst1</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>cur1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>prefs</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mrefs</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>prefs3</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mrefs3</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>parity</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>clip_max</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><name>dst1</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>cur</name> <init>= <expr><name>cur1</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>interpol</name></decl>, <decl><type ref="prev"/><name>x</name></decl>;</decl_stmt>

<macro><name>FILTER_INTRA</name><argument_list>()</argument_list></macro>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>filter_line_c</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst1</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>prev1</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>cur1</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>next1</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>prefs</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mrefs</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>prefs2</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mrefs2</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>prefs3</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mrefs3</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>prefs4</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mrefs4</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>parity</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>clip_max</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><name>dst1</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>prev</name> <init>= <expr><name>prev1</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>cur</name> <init>= <expr><name>cur1</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>next</name> <init>= <expr><name>next1</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>prev2</name> <init>= <expr><ternary><condition><expr><name>parity</name></expr> ?</condition><then> <expr><name>prev</name></expr> </then><else>: <expr><name>cur</name></expr></else></ternary></expr></init></decl> ;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>next2</name> <init>= <expr><ternary><condition><expr><name>parity</name></expr> ?</condition><then> <expr><name>cur</name></expr> </then><else>: <expr><name>next</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>interpol</name></decl>, <decl><type ref="prev"/><name>x</name></decl>;</decl_stmt>

<macro><name>FILTER1</name><argument_list>()</argument_list></macro>

<macro><name>FILTER_LINE</name><argument_list>()</argument_list></macro>

<macro><name>FILTER2</name><argument_list>()</argument_list></macro>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>filter_edge</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst1</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>prev1</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>cur1</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>next1</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>prefs</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mrefs</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>prefs2</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mrefs2</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>parity</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>clip_max</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>spat</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><name>dst1</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>prev</name> <init>= <expr><name>prev1</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>cur</name> <init>= <expr><name>cur1</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>next</name> <init>= <expr><name>next1</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>prev2</name> <init>= <expr><ternary><condition><expr><name>parity</name></expr> ?</condition><then> <expr><name>prev</name></expr> </then><else>: <expr><name>cur</name></expr></else></ternary></expr></init></decl> ;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>next2</name> <init>= <expr><ternary><condition><expr><name>parity</name></expr> ?</condition><then> <expr><name>cur</name></expr> </then><else>: <expr><name>next</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>interpol</name></decl>, <decl><type ref="prev"/><name>x</name></decl>;</decl_stmt>

<macro><name>FILTER1</name><argument_list>()</argument_list></macro>

<macro><name>FILTER_EDGE</name><argument_list>()</argument_list></macro>

<macro><name>FILTER2</name><argument_list>()</argument_list></macro>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>filter_intra_16bit</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst1</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>cur1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>prefs</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mrefs</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>prefs3</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mrefs3</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>parity</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>clip_max</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><name>dst1</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>cur</name> <init>= <expr><name>cur1</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>interpol</name></decl>, <decl><type ref="prev"/><name>x</name></decl>;</decl_stmt>

<macro><name>FILTER_INTRA</name><argument_list>()</argument_list></macro>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>filter_line_c_16bit</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst1</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>prev1</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>cur1</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>next1</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>prefs</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mrefs</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>prefs2</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mrefs2</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>prefs3</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mrefs3</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>prefs4</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mrefs4</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>parity</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>clip_max</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><name>dst1</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>prev</name> <init>= <expr><name>prev1</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>cur</name> <init>= <expr><name>cur1</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>next</name> <init>= <expr><name>next1</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>prev2</name> <init>= <expr><ternary><condition><expr><name>parity</name></expr> ?</condition><then> <expr><name>prev</name></expr> </then><else>: <expr><name>cur</name></expr></else></ternary></expr></init></decl> ;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>next2</name> <init>= <expr><ternary><condition><expr><name>parity</name></expr> ?</condition><then> <expr><name>cur</name></expr> </then><else>: <expr><name>next</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>interpol</name></decl>, <decl><type ref="prev"/><name>x</name></decl>;</decl_stmt>

<macro><name>FILTER1</name><argument_list>()</argument_list></macro>

<macro><name>FILTER_LINE</name><argument_list>()</argument_list></macro>

<macro><name>FILTER2</name><argument_list>()</argument_list></macro>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>filter_edge_16bit</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst1</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>prev1</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>cur1</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>next1</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>prefs</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mrefs</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>prefs2</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mrefs2</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>parity</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>clip_max</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>spat</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><name>dst1</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>prev</name> <init>= <expr><name>prev1</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>cur</name> <init>= <expr><name>cur1</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>next</name> <init>= <expr><name>next1</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>prev2</name> <init>= <expr><ternary><condition><expr><name>parity</name></expr> ?</condition><then> <expr><name>prev</name></expr> </then><else>: <expr><name>cur</name></expr></else></ternary></expr></init></decl> ;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>next2</name> <init>= <expr><ternary><condition><expr><name>parity</name></expr> ?</condition><then> <expr><name>cur</name></expr> </then><else>: <expr><name>next</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>interpol</name></decl>, <decl><type ref="prev"/><name>x</name></decl>;</decl_stmt>

<macro><name>FILTER1</name><argument_list>()</argument_list></macro>

<macro><name>FILTER_EDGE</name><argument_list>()</argument_list></macro>

<macro><name>FILTER2</name><argument_list>()</argument_list></macro>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>filter_slice</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>jobnr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nb_jobs</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>BWDIFContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>YADIFContext</name> <modifier>*</modifier></type><name>yadif</name> <init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>yadif</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ThreadData</name> <modifier>*</modifier></type><name>td</name> <init>= <expr><name>arg</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>linesize</name> <init>= <expr><name><name>yadif</name><operator>-&gt;</operator><name>cur</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name><name>td</name><operator>-&gt;</operator><name>plane</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>clip_max</name> <init>= <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name><name>yadif</name><operator>-&gt;</operator><name>csp</name><operator>-&gt;</operator><name>comp</name><index>[<expr><name><name>td</name><operator>-&gt;</operator><name>plane</name></name></expr>]</index></name><operator>.</operator><name>depth</name><operator>)</operator><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>df</name> <init>= <expr><operator>(</operator><name><name>yadif</name><operator>-&gt;</operator><name>csp</name><operator>-&gt;</operator><name>comp</name><index>[<expr><name><name>td</name><operator>-&gt;</operator><name>plane</name></name></expr>]</index></name><operator>.</operator><name>depth</name> <operator>+</operator> <literal type="number">7</literal><operator>)</operator> <operator>/</operator> <literal type="number">8</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>refs</name> <init>= <expr><name>linesize</name> <operator>/</operator> <name>df</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>slice_start</name> <init>= <expr><operator>(</operator><name><name>td</name><operator>-&gt;</operator><name>h</name></name> <operator>*</operator> <name>jobnr</name> <operator>)</operator> <operator>/</operator> <name>nb_jobs</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>slice_end</name> <init>= <expr><operator>(</operator><name><name>td</name><operator>-&gt;</operator><name>h</name></name> <operator>*</operator> <operator>(</operator><name>jobnr</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>/</operator> <name>nb_jobs</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <name>slice_start</name></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>slice_end</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>y</name> <operator>^</operator> <name><name>td</name><operator>-&gt;</operator><name>parity</name></name><operator>)</operator> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>prev</name> <init>= <expr><operator>&amp;</operator><name><name>yadif</name><operator>-&gt;</operator><name>prev</name><operator>-&gt;</operator><name>data</name><index>[<expr><name><name>td</name><operator>-&gt;</operator><name>plane</name></name></expr>]</index><index>[<expr><name>y</name> <operator>*</operator> <name>linesize</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>cur</name> <init>= <expr><operator>&amp;</operator><name><name>yadif</name><operator>-&gt;</operator><name>cur</name> <operator>-&gt;</operator><name>data</name><index>[<expr><name><name>td</name><operator>-&gt;</operator><name>plane</name></name></expr>]</index><index>[<expr><name>y</name> <operator>*</operator> <name>linesize</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>next</name> <init>= <expr><operator>&amp;</operator><name><name>yadif</name><operator>-&gt;</operator><name>next</name><operator>-&gt;</operator><name>data</name><index>[<expr><name><name>td</name><operator>-&gt;</operator><name>plane</name></name></expr>]</index><index>[<expr><name>y</name> <operator>*</operator> <name>linesize</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><operator>&amp;</operator><name><name>td</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><name><name>td</name><operator>-&gt;</operator><name>plane</name></name></expr>]</index><index>[<expr><name>y</name> <operator>*</operator> <name><name>td</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name><name>td</name><operator>-&gt;</operator><name>plane</name></name></expr>]</index></name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>yadif</name><operator>-&gt;</operator><name>current_field</name></name> <operator>==</operator> <name>YADIF_FIELD_END</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>filter_intra</name></name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>cur</name></expr></argument>, <argument><expr><name><name>td</name><operator>-&gt;</operator><name>w</name></name></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name>y</name> <operator>+</operator> <name>df</name><operator>)</operator> <operator>&lt;</operator> <name><name>td</name><operator>-&gt;</operator><name>h</name></name></expr> ?</condition><then> <expr><name>refs</name></expr> </then><else>: <expr><operator>-</operator><name>refs</name></expr></else></ternary></expr></argument>,

<argument><expr><ternary><condition><expr><name>y</name> <operator>&gt;</operator> <operator>(</operator><name>df</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr> ?</condition><then> <expr><operator>-</operator><name>refs</name></expr> </then><else>: <expr><name>refs</name></expr></else></ternary></expr></argument>,

<argument><expr><ternary><condition><expr><operator>(</operator><name>y</name> <operator>+</operator> <literal type="number">3</literal><operator>*</operator><name>df</name><operator>)</operator> <operator>&lt;</operator> <name><name>td</name><operator>-&gt;</operator><name>h</name></name></expr> ?</condition><then> <expr><literal type="number">3</literal> <operator>*</operator> <name>refs</name></expr> </then><else>: <expr><operator>-</operator><name>refs</name></expr></else></ternary></expr></argument>,

<argument><expr><ternary><condition><expr><name>y</name> <operator>&gt;</operator> <operator>(</operator><literal type="number">3</literal><operator>*</operator><name>df</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">3</literal> <operator>*</operator> <name>refs</name></expr> </then><else>: <expr><name>refs</name></expr></else></ternary></expr></argument>,

<argument><expr><name><name>td</name><operator>-&gt;</operator><name>parity</name></name> <operator>^</operator> <name><name>td</name><operator>-&gt;</operator><name>tff</name></name></expr></argument>, <argument><expr><name>clip_max</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name>y</name> <operator>&lt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>(</operator><name>y</name> <operator>+</operator> <literal type="number">5</literal><operator>)</operator> <operator>&gt;</operator> <name><name>td</name><operator>-&gt;</operator><name>h</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>filter_edge</name></name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>prev</name></expr></argument>, <argument><expr><name>cur</name></expr></argument>, <argument><expr><name>next</name></expr></argument>, <argument><expr><name><name>td</name><operator>-&gt;</operator><name>w</name></name></expr></argument>,

<argument><expr><ternary><condition><expr><operator>(</operator><name>y</name> <operator>+</operator> <name>df</name><operator>)</operator> <operator>&lt;</operator> <name><name>td</name><operator>-&gt;</operator><name>h</name></name></expr> ?</condition><then> <expr><name>refs</name></expr> </then><else>: <expr><operator>-</operator><name>refs</name></expr></else></ternary></expr></argument>,

<argument><expr><ternary><condition><expr><name>y</name> <operator>&gt;</operator> <operator>(</operator><name>df</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr> ?</condition><then> <expr><operator>-</operator><name>refs</name></expr> </then><else>: <expr><name>refs</name></expr></else></ternary></expr></argument>,

<argument><expr><name>refs</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>-</operator><operator>(</operator><name>refs</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>,

<argument><expr><name><name>td</name><operator>-&gt;</operator><name>parity</name></name> <operator>^</operator> <name><name>td</name><operator>-&gt;</operator><name>tff</name></name></expr></argument>, <argument><expr><name>clip_max</name></expr></argument>,

<argument><expr><ternary><condition><expr><operator>(</operator><name>y</name> <operator>&lt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>(</operator><name>y</name> <operator>+</operator> <literal type="number">3</literal><operator>)</operator> <operator>&gt;</operator> <name><name>td</name><operator>-&gt;</operator><name>h</name></name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>filter_line</name></name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>prev</name></expr></argument>, <argument><expr><name>cur</name></expr></argument>, <argument><expr><name>next</name></expr></argument>, <argument><expr><name><name>td</name><operator>-&gt;</operator><name>w</name></name></expr></argument>,

<argument><expr><name>refs</name></expr></argument>, <argument><expr><operator>-</operator><name>refs</name></expr></argument>, <argument><expr><name>refs</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>-</operator><operator>(</operator><name>refs</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>,

<argument><expr><literal type="number">3</literal> <operator>*</operator> <name>refs</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">3</literal> <operator>*</operator> <name>refs</name></expr></argument>, <argument><expr><name>refs</name> <operator>&lt;&lt;</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><operator>-</operator><operator>(</operator><name>refs</name> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator></expr></argument>,

<argument><expr><name><name>td</name><operator>-&gt;</operator><name>parity</name></name> <operator>^</operator> <name><name>td</name><operator>-&gt;</operator><name>tff</name></name></expr></argument>, <argument><expr><name>clip_max</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>td</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><name><name>td</name><operator>-&gt;</operator><name>plane</name></name></expr>]</index><index>[<expr><name>y</name> <operator>*</operator> <name><name>td</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name><name>td</name><operator>-&gt;</operator><name>plane</name></name></expr>]</index></name></expr>]</index></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>yadif</name><operator>-&gt;</operator><name>cur</name><operator>-&gt;</operator><name>data</name><index>[<expr><name><name>td</name><operator>-&gt;</operator><name>plane</name></name></expr>]</index><index>[<expr><name>y</name> <operator>*</operator> <name>linesize</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>td</name><operator>-&gt;</operator><name>w</name></name> <operator>*</operator> <name>df</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>filter</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>dstpic</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>parity</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>tff</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>BWDIFContext</name> <modifier>*</modifier></type><name>bwdif</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>YADIFContext</name> <modifier>*</modifier></type><name>yadif</name> <init>= <expr><operator>&amp;</operator><name><name>bwdif</name><operator>-&gt;</operator><name>yadif</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ThreadData</name></type> <name>td</name> <init>= <expr><block>{ <expr><operator>.</operator><name>frame</name> <operator>=</operator> <name>dstpic</name></expr>, <expr><operator>.</operator><name>parity</name> <operator>=</operator> <name>parity</name></expr>, <expr><operator>.</operator><name>tff</name> <operator>=</operator> <name>tff</name></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>yadif</name><operator>-&gt;</operator><name>csp</name><operator>-&gt;</operator><name>nb_components</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>w</name> <init>= <expr><name><name>dstpic</name><operator>-&gt;</operator><name>width</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>h</name> <init>= <expr><name><name>dstpic</name><operator>-&gt;</operator><name>height</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">1</literal> <operator>||</operator> <name>i</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>w</name> <operator>=</operator> <call><name>AV_CEIL_RSHIFT</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><name><name>yadif</name><operator>-&gt;</operator><name>csp</name><operator>-&gt;</operator><name>log2_chroma_w</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>h</name> <operator>=</operator> <call><name>AV_CEIL_RSHIFT</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name><name>yadif</name><operator>-&gt;</operator><name>csp</name><operator>-&gt;</operator><name>log2_chroma_h</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>td</name><operator>.</operator><name>w</name></name> <operator>=</operator> <name>w</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>td</name><operator>.</operator><name>h</name></name> <operator>=</operator> <name>h</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>td</name><operator>.</operator><name>plane</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>ctx</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>filter_slice</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>td</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><call><name>FFMIN</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><call><name>ff_filter_get_nb_threads</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>yadif</name><operator>-&gt;</operator><name>current_field</name></name> <operator>==</operator> <name>YADIF_FIELD_END</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>yadif</name><operator>-&gt;</operator><name>current_field</name></name> <operator>=</operator> <name>YADIF_FIELD_NORMAL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>emms_c</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>void</name></type> <name>uninit</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>BWDIFContext</name> <modifier>*</modifier></type><name>bwdif</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>YADIFContext</name> <modifier>*</modifier></type><name>yadif</name> <init>= <expr><operator>&amp;</operator><name><name>bwdif</name><operator>-&gt;</operator><name>yadif</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>yadif</name><operator>-&gt;</operator><name>prev</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>yadif</name><operator>-&gt;</operator><name>cur</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>yadif</name><operator>-&gt;</operator><name>next</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>query_formats</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>enum</name> <name>AVPixelFormat</name></name></type> <name><name>pix_fmts</name><index>[]</index></name> <init>= <expr><block>{

<expr><name>AV_PIX_FMT_YUV410P</name></expr>, <expr><name>AV_PIX_FMT_YUV411P</name></expr>, <expr><name>AV_PIX_FMT_YUV420P</name></expr>,

<expr><name>AV_PIX_FMT_YUV422P</name></expr>, <expr><name>AV_PIX_FMT_YUV440P</name></expr>, <expr><name>AV_PIX_FMT_YUV444P</name></expr>,

<expr><name>AV_PIX_FMT_YUVJ411P</name></expr>, <expr><name>AV_PIX_FMT_YUVJ420P</name></expr>,

<expr><name>AV_PIX_FMT_YUVJ422P</name></expr>, <expr><name>AV_PIX_FMT_YUVJ440P</name></expr>, <expr><name>AV_PIX_FMT_YUVJ444P</name></expr>,

<expr><name>AV_PIX_FMT_YUV420P9</name></expr>, <expr><name>AV_PIX_FMT_YUV422P9</name></expr>, <expr><name>AV_PIX_FMT_YUV444P9</name></expr>,

<expr><name>AV_PIX_FMT_YUV420P10</name></expr>, <expr><name>AV_PIX_FMT_YUV422P10</name></expr>, <expr><name>AV_PIX_FMT_YUV444P10</name></expr>,

<expr><name>AV_PIX_FMT_YUV420P12</name></expr>, <expr><name>AV_PIX_FMT_YUV422P12</name></expr>, <expr><name>AV_PIX_FMT_YUV444P12</name></expr>,

<expr><name>AV_PIX_FMT_YUV420P14</name></expr>, <expr><name>AV_PIX_FMT_YUV422P14</name></expr>, <expr><name>AV_PIX_FMT_YUV444P14</name></expr>,

<expr><name>AV_PIX_FMT_YUV420P16</name></expr>, <expr><name>AV_PIX_FMT_YUV422P16</name></expr>, <expr><name>AV_PIX_FMT_YUV444P16</name></expr>,

<expr><name>AV_PIX_FMT_YUVA420P</name></expr>, <expr><name>AV_PIX_FMT_YUVA422P</name></expr>, <expr><name>AV_PIX_FMT_YUVA444P</name></expr>,

<expr><name>AV_PIX_FMT_YUVA420P9</name></expr>, <expr><name>AV_PIX_FMT_YUVA422P9</name></expr>, <expr><name>AV_PIX_FMT_YUVA444P9</name></expr>,

<expr><name>AV_PIX_FMT_YUVA420P10</name></expr>, <expr><name>AV_PIX_FMT_YUVA422P10</name></expr>, <expr><name>AV_PIX_FMT_YUVA444P10</name></expr>,

<expr><name>AV_PIX_FMT_YUVA420P16</name></expr>, <expr><name>AV_PIX_FMT_YUVA422P16</name></expr>, <expr><name>AV_PIX_FMT_YUVA444P16</name></expr>,

<expr><name>AV_PIX_FMT_GBRP</name></expr>, <expr><name>AV_PIX_FMT_GBRP9</name></expr>, <expr><name>AV_PIX_FMT_GBRP10</name></expr>,

<expr><name>AV_PIX_FMT_GBRP12</name></expr>, <expr><name>AV_PIX_FMT_GBRP14</name></expr>, <expr><name>AV_PIX_FMT_GBRP16</name></expr>,

<expr><name>AV_PIX_FMT_GBRAP</name></expr>, <expr><name>AV_PIX_FMT_GBRAP16</name></expr>,

<expr><name>AV_PIX_FMT_GRAY8</name></expr>, <expr><name>AV_PIX_FMT_GRAY16</name></expr>,

<expr><name>AV_PIX_FMT_NONE</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFilterFormats</name> <modifier>*</modifier></type><name>fmts_list</name> <init>= <expr><call><name>ff_make_format_list</name><argument_list>(<argument><expr><name>pix_fmts</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>fmts_list</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>ff_set_common_formats</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>fmts_list</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>config_props</name><parameter_list>(<parameter><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>link</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>link</name><operator>-&gt;</operator><name>src</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>BWDIFContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>link</name><operator>-&gt;</operator><name>src</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>YADIFContext</name> <modifier>*</modifier></type><name>yadif</name> <init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>yadif</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>link</name><operator>-&gt;</operator><name>time_base</name><operator>.</operator><name>num</name></name> <operator>=</operator> <name><name>link</name><operator>-&gt;</operator><name>src</name><operator>-&gt;</operator><name>inputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name><name>time_base</name><operator>.</operator><name>num</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>link</name><operator>-&gt;</operator><name>time_base</name><operator>.</operator><name>den</name></name> <operator>=</operator> <name><name>link</name><operator>-&gt;</operator><name>src</name><operator>-&gt;</operator><name>inputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name><name>time_base</name><operator>.</operator><name>den</name></name> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>link</name><operator>-&gt;</operator><name>w</name></name> <operator>=</operator> <name><name>link</name><operator>-&gt;</operator><name>src</name><operator>-&gt;</operator><name>inputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>w</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>link</name><operator>-&gt;</operator><name>h</name></name> <operator>=</operator> <name><name>link</name><operator>-&gt;</operator><name>src</name><operator>-&gt;</operator><name>inputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>h</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>yadif</name><operator>-&gt;</operator><name>mode</name></name><operator>&amp;</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>link</name><operator>-&gt;</operator><name>frame_rate</name></name> <operator>=</operator> <macro><name>av_mul_q</name><argument_list>(<argument>link-&gt;src-&gt;inputs[<literal type="number">0</literal>]-&gt;frame_rate</argument>, <argument>(AVRational){<literal type="number">2</literal></argument>,<argument><literal type="number">1</literal>}</argument>)</argument_list></macro></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>link</name><operator>-&gt;</operator><name>w</name></name> <operator>&lt;</operator> <literal type="number">3</literal> <operator>||</operator> <name><name>link</name><operator>-&gt;</operator><name>h</name></name> <operator>&lt;</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Video of less than 3 columns or 4 lines is not supported\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>yadif</name><operator>-&gt;</operator><name>csp</name></name> <operator>=</operator> <call><name>av_pix_fmt_desc_get</name><argument_list>(<argument><expr><name><name>link</name><operator>-&gt;</operator><name>format</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>yadif</name><operator>-&gt;</operator><name>filter</name></name> <operator>=</operator> <name>filter</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>yadif</name><operator>-&gt;</operator><name>csp</name><operator>-&gt;</operator><name>comp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>depth</name> <operator>&gt;</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>filter_intra</name></name> <operator>=</operator> <name>filter_intra_16bit</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>filter_line</name></name> <operator>=</operator> <name>filter_line_c_16bit</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>filter_edge</name></name> <operator>=</operator> <name>filter_edge_16bit</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>filter_intra</name></name> <operator>=</operator> <name>filter_intra</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>filter_line</name></name> <operator>=</operator> <name>filter_line_c</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>filter_edge</name></name> <operator>=</operator> <name>filter_edge</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ARCH_X86</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ff_bwdif_init_x86</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OFFSET</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>offsetof(YADIFContext, x)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLAGS</name></cpp:macro> <cpp:value>AV_OPT_FLAG_VIDEO_PARAM|AV_OPT_FLAG_FILTERING_PARAM</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CONST</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>help</name></type></parameter>, <parameter><type><name>val</name></type></parameter>, <parameter><type><name>unit</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ name, help, 0, AV_OPT_TYPE_CONST, {.i64=val}, INT_MIN, INT_MAX, FLAGS, unit }</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVOption</name></type> <name><name>bwdif_options</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><literal type="string">"mode"</literal></expr>, <expr><literal type="string">"specify the interlacing mode"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>YADIF_MODE_SEND_FIELD</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"mode"</literal></expr>}</block></expr>,

<expr><call><name>CONST</name><argument_list>(<argument><expr><literal type="string">"send_frame"</literal></expr></argument>, <argument><expr><literal type="string">"send one frame for each frame"</literal></expr></argument>, <argument><expr><name>YADIF_MODE_SEND_FRAME</name></expr></argument>, <argument><expr><literal type="string">"mode"</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>CONST</name><argument_list>(<argument><expr><literal type="string">"send_field"</literal></expr></argument>, <argument><expr><literal type="string">"send one frame for each field"</literal></expr></argument>, <argument><expr><name>YADIF_MODE_SEND_FIELD</name></expr></argument>, <argument><expr><literal type="string">"mode"</literal></expr></argument>)</argument_list></call></expr>,

<expr><block>{ <expr><literal type="string">"parity"</literal></expr>, <expr><literal type="string">"specify the assumed picture field parity"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>parity</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>YADIF_PARITY_AUTO</name></expr>}</block></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"parity"</literal></expr> }</block></expr>,

<expr><call><name>CONST</name><argument_list>(<argument><expr><literal type="string">"tff"</literal></expr></argument>, <argument><expr><literal type="string">"assume top field first"</literal></expr></argument>, <argument><expr><name>YADIF_PARITY_TFF</name></expr></argument>, <argument><expr><literal type="string">"parity"</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>CONST</name><argument_list>(<argument><expr><literal type="string">"bff"</literal></expr></argument>, <argument><expr><literal type="string">"assume bottom field first"</literal></expr></argument>, <argument><expr><name>YADIF_PARITY_BFF</name></expr></argument>, <argument><expr><literal type="string">"parity"</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>CONST</name><argument_list>(<argument><expr><literal type="string">"auto"</literal></expr></argument>, <argument><expr><literal type="string">"auto detect parity"</literal></expr></argument>, <argument><expr><name>YADIF_PARITY_AUTO</name></expr></argument>, <argument><expr><literal type="string">"parity"</literal></expr></argument>)</argument_list></call></expr>,

<expr><block>{ <expr><literal type="string">"deint"</literal></expr>, <expr><literal type="string">"specify which frames to deinterlace"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>deint</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>YADIF_DEINT_ALL</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"deint"</literal></expr> }</block></expr>,

<expr><call><name>CONST</name><argument_list>(<argument><expr><literal type="string">"all"</literal></expr></argument>, <argument><expr><literal type="string">"deinterlace all frames"</literal></expr></argument>, <argument><expr><name>YADIF_DEINT_ALL</name></expr></argument>, <argument><expr><literal type="string">"deint"</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>CONST</name><argument_list>(<argument><expr><literal type="string">"interlaced"</literal></expr></argument>, <argument><expr><literal type="string">"only deinterlace frames marked as interlaced"</literal></expr></argument>, <argument><expr><name>YADIF_DEINT_INTERLACED</name></expr></argument>, <argument><expr><literal type="string">"deint"</literal></expr></argument>)</argument_list></call></expr>,

<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>AVFILTER_DEFINE_CLASS</name><argument_list>(<argument><expr><name>bwdif</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVFilterPad</name></type> <name><name>avfilter_vf_bwdif_inputs</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"default"</literal></expr>,

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,

<expr><operator>.</operator><name>filter_frame</name> <operator>=</operator> <name>ff_yadif_filter_frame</name></expr>,

}</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVFilterPad</name></type> <name><name>avfilter_vf_bwdif_outputs</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"default"</literal></expr>,

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,

<expr><operator>.</operator><name>request_frame</name> <operator>=</operator> <name>ff_yadif_request_frame</name></expr>,

<expr><operator>.</operator><name>config_props</name> <operator>=</operator> <name>config_props</name></expr>,

}</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFilter</name></type> <name>ff_vf_bwdif</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"bwdif"</literal></expr>,

<expr><operator>.</operator><name>description</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"Deinterlace the input image."</literal></expr></argument>)</argument_list></call></expr>,

<expr><operator>.</operator><name>priv_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>BWDIFContext</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><operator>.</operator><name>priv_class</name> <operator>=</operator> <operator>&amp;</operator><name>bwdif_class</name></expr>,

<expr><operator>.</operator><name>uninit</name> <operator>=</operator> <name>uninit</name></expr>,

<expr><operator>.</operator><name>query_formats</name> <operator>=</operator> <name>query_formats</name></expr>,

<expr><operator>.</operator><name>inputs</name> <operator>=</operator> <name>avfilter_vf_bwdif_inputs</name></expr>,

<expr><operator>.</operator><name>outputs</name> <operator>=</operator> <name>avfilter_vf_bwdif_outputs</name></expr>,

<expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>AVFILTER_FLAG_SUPPORT_TIMELINE_INTERNAL</name> <operator>|</operator> <name>AVFILTER_FLAG_SLICE_THREADS</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

</unit>
