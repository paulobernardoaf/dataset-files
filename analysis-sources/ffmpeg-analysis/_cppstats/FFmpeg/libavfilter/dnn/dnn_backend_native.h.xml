<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavfilter\dnn\dnn_backend_native.h"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../dnn_interface.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavformat/avio.h"</cpp:file></cpp:include>

<typedef>typedef <type><enum>enum <block>{

<decl><name>DLT_INPUT</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,

<decl><name>DLT_CONV2D</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,

<decl><name>DLT_DEPTH_TO_SPACE</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>,

<decl><name>DLT_MIRROR_PAD</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>,

<decl><name>DLT_MAXIMUM</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>,

<decl><name>DLT_COUNT</name></decl>

}</block></enum></type> <name>DNNLayerType</name>;</typedef>

<typedef>typedef <type><enum>enum <block>{<decl><name>DOT_INPUT</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, <decl><name>DOT_OUTPUT</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>, <decl><name>DOT_INTERMEDIATE</name> <init>= <expr><name>DOT_INPUT</name> <operator>|</operator> <name>DOT_INPUT</name></expr></init></decl>}</block></enum></type> <name>DNNOperandType</name>;</typedef>

<typedef>typedef <type><struct>struct <name>Layer</name><block>{

<decl_stmt><decl><type><name>DNNLayerType</name></type> <name>type</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name></type> <name><name>input_operand_indexes</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name></type> <name>output_operand_index</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>params</name></decl>;</decl_stmt>

}</block></struct></type> <name>Layer</name>;</typedef>

<typedef>typedef <type><struct>struct <name>DnnOperand</name><block>{

<decl_stmt><decl><type><name>int32_t</name></type> <name><name>dims</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DNNOperandType</name></type> <name>type</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DNNDataType</name></type> <name>data_type</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int8_t</name></type> <name>isNHWC</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>name</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name></type> <name>length</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name></type> <name>usedNumbersLeft</name></decl>;</decl_stmt>

}</block></struct></type><name>DnnOperand</name>;</typedef>

<typedef>typedef <type><struct>struct <name>InputParams</name><block>{

<decl_stmt><decl><type><name>int</name></type> <name>height</name></decl>, <name>width</name>, <name>channels</name>;</decl_stmt>

}</block></struct></type> <name>InputParams</name>;</typedef>

<typedef>typedef <type><struct>struct <name>ConvolutionalNetwork</name><block>{

<decl_stmt><decl><type><name>Layer</name> <modifier>*</modifier></type><name>layers</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name></type> <name>layers_num</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DnnOperand</name> <modifier>*</modifier></type><name>operands</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name></type> <name>operands_num</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>output_indexes</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>nb_output</name></decl>;</decl_stmt>

}</block></struct></type> <name>ConvolutionalNetwork</name>;</typedef>

<function_decl><type><name>DNNModel</name> <modifier>*</modifier></type><name>ff_dnn_load_model_native</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>model_filename</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>DNNReturnType</name></type> <name>ff_dnn_execute_model_native</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>DNNModel</name> <modifier>*</modifier></type><name>model</name></decl></parameter>, <parameter><decl><type><name>DNNData</name> <modifier>*</modifier></type><name>outputs</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>nb_output</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>ff_dnn_free_model_native</name><parameter_list>(<parameter><decl><type><name>DNNModel</name> <modifier>*</modifier><modifier>*</modifier></type><name>model</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int32_t</name></type> <name>calculate_operand_data_length</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>DnnOperand</name> <modifier>*</modifier></type><name>oprd</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int32_t</name></type> <name>calculate_operand_dims_count</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>DnnOperand</name> <modifier>*</modifier></type><name>oprd</name></decl></parameter>)</parameter_list>;</function_decl>

</unit>
