<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavfilter\dnn\dnn_backend_native.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dnn_backend_native.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avassert.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dnn_backend_native_layer_conv2d.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dnn_backend_native_layers.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>DNNReturnType</name></type> <name>get_input_native</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>model</name></decl></parameter>, <parameter><decl><type><name>DNNData</name> <modifier>*</modifier></type><name>input</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>input_name</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ConvolutionalNetwork</name> <modifier>*</modifier></type><name>network</name> <init>= <expr><operator>(</operator><name>ConvolutionalNetwork</name> <operator>*</operator><operator>)</operator><name>model</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>network</name><operator>-&gt;</operator><name>operands_num</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>DnnOperand</name> <modifier>*</modifier></type><name>oprd</name> <init>= <expr><operator>&amp;</operator><name><name>network</name><operator>-&gt;</operator><name>operands</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>oprd</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>input_name</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>oprd</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>DOT_INPUT</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>DNN_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>input</name><operator>-&gt;</operator><name>dt</name></name> <operator>=</operator> <name><name>oprd</name><operator>-&gt;</operator><name>data_type</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name><name>oprd</name><operator>-&gt;</operator><name>dims</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>input</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <name><name>oprd</name><operator>-&gt;</operator><name>dims</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>input</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator> <name><name>oprd</name><operator>-&gt;</operator><name>dims</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>input</name><operator>-&gt;</operator><name>channels</name></name> <operator>=</operator> <name><name>oprd</name><operator>-&gt;</operator><name>dims</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>

<return>return <expr><name>DNN_SUCCESS</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>DNN_ERROR</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>DNNReturnType</name></type> <name>set_input_output_native</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>model</name></decl></parameter>, <parameter><decl><type><name>DNNData</name> <modifier>*</modifier></type><name>input</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>input_name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>output_names</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>nb_output</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ConvolutionalNetwork</name> <modifier>*</modifier></type><name>network</name> <init>= <expr><operator>(</operator><name>ConvolutionalNetwork</name> <operator>*</operator><operator>)</operator><name>model</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DnnOperand</name> <modifier>*</modifier></type><name>oprd</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>network</name><operator>-&gt;</operator><name>layers_num</name></name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>network</name><operator>-&gt;</operator><name>operands_num</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>DNN_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>network</name><operator>-&gt;</operator><name>operands_num</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>oprd</name> <operator>=</operator> <operator>&amp;</operator><name><name>network</name><operator>-&gt;</operator><name>operands</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>oprd</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>input_name</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>oprd</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>DOT_INPUT</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>DNN_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>oprd</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>oprd</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>DNN_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>oprd</name><operator>-&gt;</operator><name>dims</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>oprd</name><operator>-&gt;</operator><name>dims</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>input</name><operator>-&gt;</operator><name>height</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>oprd</name><operator>-&gt;</operator><name>dims</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>input</name><operator>-&gt;</operator><name>width</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>oprd</name><operator>-&gt;</operator><name>dims</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>input</name><operator>-&gt;</operator><name>channels</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>oprd</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>oprd</name><operator>-&gt;</operator><name>length</name></name> <operator>=</operator> <call><name>calculate_operand_data_length</name><argument_list>(<argument><expr><name>oprd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>oprd</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <call><name>av_malloc</name><argument_list>(<argument><expr><name><name>oprd</name><operator>-&gt;</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>oprd</name><operator>-&gt;</operator><name>data</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>DNN_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>input</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name><name>oprd</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>network</name><operator>-&gt;</operator><name>nb_output</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>network</name><operator>-&gt;</operator><name>output_indexes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>network</name><operator>-&gt;</operator><name>output_indexes</name></name> <operator>=</operator> <call><name>av_mallocz_array</name><argument_list>(<argument><expr><name>nb_output</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>network</name><operator>-&gt;</operator><name>output_indexes</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>network</name><operator>-&gt;</operator><name>output_indexes</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>DNN_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><decl><type><name>uint32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nb_output</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>output_name</name> <init>= <expr><name><name>output_names</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>network</name><operator>-&gt;</operator><name>operands_num</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>oprd</name> <operator>=</operator> <operator>&amp;</operator><name><name>network</name><operator>-&gt;</operator><name>operands</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>oprd</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>output_name</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>network</name><operator>-&gt;</operator><name>output_indexes</name><index>[<expr><name><name>network</name><operator>-&gt;</operator><name>nb_output</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>j</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>network</name><operator>-&gt;</operator><name>nb_output</name></name> <operator>!=</operator> <name>nb_output</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>DNN_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>DNN_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>DNNModel</name> <modifier>*</modifier></type><name>ff_dnn_load_model_native</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>model_filename</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>DNNModel</name> <modifier>*</modifier></type><name>model</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>header_expected</name><index>[]</index></name> <init>= <expr><literal type="string">"FFMPEGDNNNATIVE"</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>version</name></decl>, <decl><type ref="prev"/><name>header_size</name></decl>, <decl><type ref="prev"/><name>major_version_expected</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ConvolutionalNetwork</name> <modifier>*</modifier></type><name>network</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>model_file_context</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>file_size</name></decl>, <decl><type ref="prev"/><name>dnn_size</name></decl>, <decl><type ref="prev"/><name>parsed_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name></type> <name>layer</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DNNLayerType</name></type> <name>layer_type</name></decl>;</decl_stmt>

<expr_stmt><expr><name>model</name> <operator>=</operator> <call><name>av_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>DNNModel</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>model</name></expr>)</condition><block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>avio_open</name><argument_list>(<argument><expr><operator>&amp;</operator><name>model_file_context</name></expr></argument>, <argument><expr><name>model_filename</name></expr></argument>, <argument><expr><name>AVIO_FLAG_READ</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>model</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>file_size</name> <operator>=</operator> <call><name>avio_size</name><argument_list>(<argument><expr><name>model_file_context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>header_expected</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>av_malloc</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>buf</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>avio_closep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>model_file_context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>model</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>avio_get_str</name><argument_list>(<argument><expr><name>model_file_context</name></expr></argument>, <argument><expr><name>size</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dnn_size</name> <operator>=</operator> <name>size</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>header_expected</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_closep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>model_file_context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>model</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>version</name> <operator>=</operator> <operator>(</operator><name>int32_t</name><operator>)</operator><call><name>avio_rl32</name><argument_list>(<argument><expr><name>model_file_context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dnn_size</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>version</name> <operator>!=</operator> <name>major_version_expected</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>avio_closep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>model_file_context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>model</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>version</name> <operator>=</operator> <operator>(</operator><name>int32_t</name><operator>)</operator><call><name>avio_rl32</name><argument_list>(<argument><expr><name>model_file_context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dnn_size</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>header_size</name> <operator>=</operator> <name>dnn_size</name></expr>;</expr_stmt>

<expr_stmt><expr><name>network</name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ConvolutionalNetwork</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>network</name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><call><name>avio_closep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>model_file_context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>model</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>model</name><operator>-&gt;</operator><name>model</name></name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>network</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_seek</name><argument_list>(<argument><expr><name>model_file_context</name></expr></argument>, <argument><expr><name>file_size</name> <operator>-</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>network</name><operator>-&gt;</operator><name>layers_num</name></name> <operator>=</operator> <operator>(</operator><name>int32_t</name><operator>)</operator><call><name>avio_rl32</name><argument_list>(<argument><expr><name>model_file_context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>network</name><operator>-&gt;</operator><name>operands_num</name></name> <operator>=</operator> <operator>(</operator><name>int32_t</name><operator>)</operator><call><name>avio_rl32</name><argument_list>(<argument><expr><name>model_file_context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dnn_size</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_seek</name><argument_list>(<argument><expr><name>model_file_context</name></expr></argument>, <argument><expr><name>header_size</name></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>network</name><operator>-&gt;</operator><name>layers</name></name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><name><name>network</name><operator>-&gt;</operator><name>layers_num</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>Layer</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>network</name><operator>-&gt;</operator><name>layers</name></name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><call><name>avio_closep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>model_file_context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_dnn_free_model_native</name><argument_list>(<argument><expr><operator>&amp;</operator><name>model</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>network</name><operator>-&gt;</operator><name>operands</name></name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><name><name>network</name><operator>-&gt;</operator><name>operands_num</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>DnnOperand</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>network</name><operator>-&gt;</operator><name>operands</name></name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><call><name>avio_closep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>model_file_context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_dnn_free_model_native</name><argument_list>(<argument><expr><operator>&amp;</operator><name>model</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>layer</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>layer</name> <operator>&lt;</operator> <name><name>network</name><operator>-&gt;</operator><name>layers_num</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>layer</name></expr></incr>)</control><block>{<block_content>

<expr_stmt><expr><name>layer_type</name> <operator>=</operator> <operator>(</operator><name>int32_t</name><operator>)</operator><call><name>avio_rl32</name><argument_list>(<argument><expr><name>model_file_context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dnn_size</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>layer_type</name> <operator>&gt;=</operator> <name>DLT_COUNT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>avio_closep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>model_file_context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_dnn_free_model_native</name><argument_list>(<argument><expr><operator>&amp;</operator><name>model</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>network</name><operator>-&gt;</operator><name>layers</name><index>[<expr><name>layer</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>=</operator> <name>layer_type</name></expr>;</expr_stmt>

<expr_stmt><expr><name>parsed_size</name> <operator>=</operator> <name><name>layer_funcs</name><index>[<expr><name>layer_type</name></expr>]</index></name><operator>.</operator><call><name>pf_load</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>network</name><operator>-&gt;</operator><name>layers</name><index>[<expr><name>layer</name></expr>]</index></name></expr></argument>, <argument><expr><name>model_file_context</name></expr></argument>, <argument><expr><name>file_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>parsed_size</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>avio_closep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>model_file_context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_dnn_free_model_native</name><argument_list>(<argument><expr><operator>&amp;</operator><name>model</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>dnn_size</name> <operator>+=</operator> <name>parsed_size</name></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>network</name><operator>-&gt;</operator><name>operands_num</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block>{<block_content>

<decl_stmt><decl><type><name>DnnOperand</name> <modifier>*</modifier></type><name>oprd</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name></type> <name>name_len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name></type> <name>operand_index</name> <init>= <expr><operator>(</operator><name>int32_t</name><operator>)</operator><call><name>avio_rl32</name><argument_list>(<argument><expr><name>model_file_context</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>dnn_size</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>oprd</name> <operator>=</operator> <operator>&amp;</operator><name><name>network</name><operator>-&gt;</operator><name>operands</name><index>[<expr><name>operand_index</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>name_len</name> <operator>=</operator> <operator>(</operator><name>int32_t</name><operator>)</operator><call><name>avio_rl32</name><argument_list>(<argument><expr><name>model_file_context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dnn_size</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_get_str</name><argument_list>(<argument><expr><name>model_file_context</name></expr></argument>, <argument><expr><name>name_len</name></expr></argument>, <argument><expr><name><name>oprd</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>oprd</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dnn_size</name> <operator>+=</operator> <name>name_len</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>oprd</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <operator>(</operator><name>int32_t</name><operator>)</operator><call><name>avio_rl32</name><argument_list>(<argument><expr><name>model_file_context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dnn_size</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>oprd</name><operator>-&gt;</operator><name>data_type</name></name> <operator>=</operator> <operator>(</operator><name>int32_t</name><operator>)</operator><call><name>avio_rl32</name><argument_list>(<argument><expr><name>model_file_context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dnn_size</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int32_t</name></type> <name>dim</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>dim</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><operator>++</operator><name>dim</name></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>oprd</name><operator>-&gt;</operator><name>dims</name><index>[<expr><name>dim</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int32_t</name><operator>)</operator><call><name>avio_rl32</name><argument_list>(<argument><expr><name>model_file_context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dnn_size</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>oprd</name><operator>-&gt;</operator><name>isNHWC</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>avio_closep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>model_file_context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>dnn_size</name> <operator>!=</operator> <name>file_size</name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><call><name>ff_dnn_free_model_native</name><argument_list>(<argument><expr><operator>&amp;</operator><name>model</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>model</name><operator>-&gt;</operator><name>set_input_output</name></name> <operator>=</operator> <operator>&amp;</operator><name>set_input_output_native</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>model</name><operator>-&gt;</operator><name>get_input</name></name> <operator>=</operator> <operator>&amp;</operator><name>get_input_native</name></expr>;</expr_stmt>

<return>return <expr><name>model</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>DNNReturnType</name></type> <name>ff_dnn_execute_model_native</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>DNNModel</name> <modifier>*</modifier></type><name>model</name></decl></parameter>, <parameter><decl><type><name>DNNData</name> <modifier>*</modifier></type><name>outputs</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>nb_output</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ConvolutionalNetwork</name> <modifier>*</modifier></type><name>network</name> <init>= <expr><operator>(</operator><name>ConvolutionalNetwork</name> <operator>*</operator><operator>)</operator><name><name>model</name><operator>-&gt;</operator><name>model</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name></type> <name>layer</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>nb</name> <init>= <expr><call><name>FFMIN</name><argument_list>(<argument><expr><name>nb_output</name></expr></argument>, <argument><expr><name><name>network</name><operator>-&gt;</operator><name>nb_output</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>network</name><operator>-&gt;</operator><name>layers_num</name></name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>network</name><operator>-&gt;</operator><name>operands_num</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>DNN_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>network</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>data</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>DNN_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>layer</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>layer</name> <operator>&lt;</operator> <name><name>network</name><operator>-&gt;</operator><name>layers_num</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>layer</name></expr></incr>)</control><block>{<block_content>

<decl_stmt><decl><type><name>DNNLayerType</name></type> <name>layer_type</name> <init>= <expr><name><name>network</name><operator>-&gt;</operator><name>layers</name><index>[<expr><name>layer</name></expr>]</index></name><operator>.</operator><name>type</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>layer_funcs</name><index>[<expr><name>layer_type</name></expr>]</index></name><operator>.</operator><call><name>pf_exec</name><argument_list>(<argument><expr><name><name>network</name><operator>-&gt;</operator><name>operands</name></name></expr></argument>,

<argument><expr><name><name>network</name><operator>-&gt;</operator><name>layers</name><index>[<expr><name>layer</name></expr>]</index></name><operator>.</operator><name>input_operand_indexes</name></expr></argument>,

<argument><expr><name><name>network</name><operator>-&gt;</operator><name>layers</name><index>[<expr><name>layer</name></expr>]</index></name><operator>.</operator><name>output_operand_index</name></expr></argument>,

<argument><expr><name><name>network</name><operator>-&gt;</operator><name>layers</name><index>[<expr><name>layer</name></expr>]</index></name><operator>.</operator><name>params</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for <control>(<init><decl><type><name>uint32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nb</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>DnnOperand</name> <modifier>*</modifier></type><name>oprd</name> <init>= <expr><operator>&amp;</operator><name><name>network</name><operator>-&gt;</operator><name>operands</name><index>[<expr><name><name>network</name><operator>-&gt;</operator><name>output_indexes</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>outputs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>data</name> <operator>=</operator> <name><name>oprd</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>outputs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>height</name> <operator>=</operator> <name><name>oprd</name><operator>-&gt;</operator><name>dims</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>outputs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>width</name> <operator>=</operator> <name><name>oprd</name><operator>-&gt;</operator><name>dims</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>outputs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>channels</name> <operator>=</operator> <name><name>oprd</name><operator>-&gt;</operator><name>dims</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>outputs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>dt</name> <operator>=</operator> <name><name>oprd</name><operator>-&gt;</operator><name>data_type</name></name></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><name>DNN_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>calculate_operand_dims_count</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>DnnOperand</name> <modifier>*</modifier></type><name>oprd</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int32_t</name></type> <name>result</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name>result</name> <operator>*=</operator> <name><name>oprd</name><operator>-&gt;</operator><name>dims</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>calculate_operand_data_length</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>DnnOperand</name><modifier>*</modifier></type> <name>oprd</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name><name>oprd</name><operator>-&gt;</operator><name>dims</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name><name>oprd</name><operator>-&gt;</operator><name>dims</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name><name>oprd</name><operator>-&gt;</operator><name>dims</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>*</operator> <name><name>oprd</name><operator>-&gt;</operator><name>dims</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_dnn_free_model_native</name><parameter_list>(<parameter><decl><type><name>DNNModel</name> <modifier>*</modifier><modifier>*</modifier></type><name>model</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ConvolutionalNetwork</name> <modifier>*</modifier></type><name>network</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ConvolutionalParams</name> <modifier>*</modifier></type><name>conv_params</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name></type> <name>layer</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>model</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>network</name> <operator>=</operator> <operator>(</operator><name>ConvolutionalNetwork</name> <operator>*</operator><operator>)</operator><name><operator>(</operator><operator>*</operator><name>model</name><operator>)</operator><operator>-&gt;</operator><name>model</name></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>layer</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>layer</name> <operator>&lt;</operator> <name><name>network</name><operator>-&gt;</operator><name>layers_num</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>layer</name></expr></incr>)</control><block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>network</name><operator>-&gt;</operator><name>layers</name><index>[<expr><name>layer</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>==</operator> <name>DLT_CONV2D</name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name>conv_params</name> <operator>=</operator> <operator>(</operator><name>ConvolutionalParams</name> <operator>*</operator><operator>)</operator><name><name>network</name><operator>-&gt;</operator><name>layers</name><index>[<expr><name>layer</name></expr>]</index></name><operator>.</operator><name>params</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>conv_params</name><operator>-&gt;</operator><name>kernel</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>conv_params</name><operator>-&gt;</operator><name>biases</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>network</name><operator>-&gt;</operator><name>layers</name><index>[<expr><name>layer</name></expr>]</index></name><operator>.</operator><name>params</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>network</name><operator>-&gt;</operator><name>layers</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>uint32_t</name></type> <name>operand</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>operand</name> <operator>&lt;</operator> <name><name>network</name><operator>-&gt;</operator><name>operands_num</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>operand</name></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>network</name><operator>-&gt;</operator><name>operands</name><index>[<expr><name>operand</name></expr>]</index></name><operator>.</operator><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>network</name><operator>-&gt;</operator><name>operands</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>network</name><operator>-&gt;</operator><name>output_indexes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>network</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><name>model</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

</unit>
