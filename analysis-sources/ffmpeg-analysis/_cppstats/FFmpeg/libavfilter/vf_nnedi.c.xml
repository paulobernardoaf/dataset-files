<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavfilter\vf_nnedi.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;float.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/common.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/float_dsp.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/imgutils.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/opt.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/pixdesc.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avfilter.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"formats.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"video.h"</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct <name>FrameData</name> <block>{

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name><name>paddedp</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>padded_stride</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>padded_width</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>padded_height</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name><name>dstp</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>dst_stride</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>field</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name> <modifier>*</modifier></type><name><name>lcount</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>input</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>temp</name></decl>;</decl_stmt>

}</block></struct></type> <name>FrameData</name>;</typedef>

<typedef>typedef <type><struct>struct <name>NNEDIContext</name> <block>{

<decl_stmt><decl><type><specifier>const</specifier> <name>AVClass</name> <modifier>*</modifier></type><name>class</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>weights_file</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>src</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>second</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>dst</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>eof</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>cur_pts</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFloatDSPContext</name> <modifier>*</modifier></type><name>fdsp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>nb_planes</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>linesize</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>planeheight</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>weights0</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name><name>weights1</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>asize</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>nns</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>xdia</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ydia</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>deint</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>field</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>process_plane</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>nsize</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>nnsparam</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>qual</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>etype</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>pscrn</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>fapprox</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>max_value</name></decl>;</decl_stmt>

<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>copy_pad</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>AVFrame</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>FrameData</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>NNEDIContext</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>evalfunc_0</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>NNEDIContext</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>FrameData</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>evalfunc_1</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>NNEDIContext</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>FrameData</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>readpixels</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>compute_network0</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>NNEDIContext</name></name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int32_t</name></type> (<modifier>*</modifier><name>process_line0</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>extract</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>dot_prod</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>NNEDIContext</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>expfunc</name>)<parameter_list>(<parameter><decl><type><name>float</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>wae5</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>FrameData</name></type> <name>frame_data</name></decl>;</decl_stmt>

}</block></struct></type> <name>NNEDIContext</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OFFSET</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>offsetof(NNEDIContext, x)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLAGS</name></cpp:macro> <cpp:value>AV_OPT_FLAG_VIDEO_PARAM|AV_OPT_FLAG_FILTERING_PARAM</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVOption</name></type> <name><name>nnedi_options</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{<expr><literal type="string">"weights"</literal></expr>, <expr><literal type="string">"set weights file"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>weights_file</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_STRING</name></expr>, <expr><block>{<expr><operator>.</operator><name>str</name><operator>=</operator><literal type="string">"nnedi3_weights.bin"</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,

<expr><block>{<expr><literal type="string">"deint"</literal></expr>, <expr><literal type="string">"set which frames to deinterlace"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>deint</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">0</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"deint"</literal></expr> }</block></expr>,

<expr><block>{<expr><literal type="string">"all"</literal></expr>, <expr><literal type="string">"deinterlace all frames"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">0</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"deint"</literal></expr> }</block></expr>,

<expr><block>{<expr><literal type="string">"interlaced"</literal></expr>, <expr><literal type="string">"only deinterlace frames marked as interlaced"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"deint"</literal></expr> }</block></expr>,

<expr><block>{<expr><literal type="string">"field"</literal></expr>, <expr><literal type="string">"set mode of operation"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>field</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><operator>-</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><operator>-</operator><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"field"</literal></expr> }</block></expr>,

<expr><block>{<expr><literal type="string">"af"</literal></expr>, <expr><literal type="string">"use frame flags, both fields"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><operator>-</operator><literal type="number">2</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"field"</literal></expr> }</block></expr>,

<expr><block>{<expr><literal type="string">"a"</literal></expr>, <expr><literal type="string">"use frame flags, single field"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><operator>-</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"field"</literal></expr> }</block></expr>,

<expr><block>{<expr><literal type="string">"t"</literal></expr>, <expr><literal type="string">"use top field only"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">0</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"field"</literal></expr> }</block></expr>,

<expr><block>{<expr><literal type="string">"b"</literal></expr>, <expr><literal type="string">"use bottom field only"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"field"</literal></expr> }</block></expr>,

<expr><block>{<expr><literal type="string">"tf"</literal></expr>, <expr><literal type="string">"use both fields, top first"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">2</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"field"</literal></expr> }</block></expr>,

<expr><block>{<expr><literal type="string">"bf"</literal></expr>, <expr><literal type="string">"use both fields, bottom first"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">3</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"field"</literal></expr> }</block></expr>,

<expr><block>{<expr><literal type="string">"planes"</literal></expr>, <expr><literal type="string">"set which planes to process"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>process_plane</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">7</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,

<expr><block>{<expr><literal type="string">"nsize"</literal></expr>, <expr><literal type="string">"set size of local neighborhood around each pixel, used by the predictor neural network"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>nsize</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">6</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"nsize"</literal></expr> }</block></expr>,

<expr><block>{<expr><literal type="string">"s8x6"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">0</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"nsize"</literal></expr> }</block></expr>,

<expr><block>{<expr><literal type="string">"s16x6"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"nsize"</literal></expr> }</block></expr>,

<expr><block>{<expr><literal type="string">"s32x6"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">2</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"nsize"</literal></expr> }</block></expr>,

<expr><block>{<expr><literal type="string">"s48x6"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">3</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"nsize"</literal></expr> }</block></expr>,

<expr><block>{<expr><literal type="string">"s8x4"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">4</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"nsize"</literal></expr> }</block></expr>,

<expr><block>{<expr><literal type="string">"s16x4"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">5</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"nsize"</literal></expr> }</block></expr>,

<expr><block>{<expr><literal type="string">"s32x4"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">6</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"nsize"</literal></expr> }</block></expr>,

<expr><block>{<expr><literal type="string">"nns"</literal></expr>, <expr><literal type="string">"set number of neurons in predictor neural network"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>nnsparam</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"nns"</literal></expr> }</block></expr>,

<expr><block>{<expr><literal type="string">"n16"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">0</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"nns"</literal></expr> }</block></expr>,

<expr><block>{<expr><literal type="string">"n32"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"nns"</literal></expr> }</block></expr>,

<expr><block>{<expr><literal type="string">"n64"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">2</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"nns"</literal></expr> }</block></expr>,

<expr><block>{<expr><literal type="string">"n128"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">3</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"nns"</literal></expr> }</block></expr>,

<expr><block>{<expr><literal type="string">"n256"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">4</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"nns"</literal></expr> }</block></expr>,

<expr><block>{<expr><literal type="string">"qual"</literal></expr>, <expr><literal type="string">"set quality"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>qual</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"qual"</literal></expr> }</block></expr>,

<expr><block>{<expr><literal type="string">"fast"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"qual"</literal></expr> }</block></expr>,

<expr><block>{<expr><literal type="string">"slow"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">2</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"qual"</literal></expr> }</block></expr>,

<expr><block>{<expr><literal type="string">"etype"</literal></expr>, <expr><literal type="string">"set which set of weights to use in the predictor"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>etype</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">0</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"etype"</literal></expr> }</block></expr>,

<expr><block>{<expr><literal type="string">"a"</literal></expr>, <expr><literal type="string">"weights trained to minimize absolute error"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">0</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"etype"</literal></expr> }</block></expr>,

<expr><block>{<expr><literal type="string">"s"</literal></expr>, <expr><literal type="string">"weights trained to minimize squared error"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"etype"</literal></expr> }</block></expr>,

<expr><block>{<expr><literal type="string">"pscrn"</literal></expr>, <expr><literal type="string">"set prescreening"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>pscrn</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">2</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"pscrn"</literal></expr> }</block></expr>,

<expr><block>{<expr><literal type="string">"none"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">0</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"pscrn"</literal></expr> }</block></expr>,

<expr><block>{<expr><literal type="string">"original"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"pscrn"</literal></expr> }</block></expr>,

<expr><block>{<expr><literal type="string">"new"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">2</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"pscrn"</literal></expr> }</block></expr>,

<expr><block>{<expr><literal type="string">"fapprox"</literal></expr>, <expr><name>NULL</name></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>fapprox</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">0</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>AVFILTER_DEFINE_CLASS</name><argument_list>(<argument><expr><name>nnedi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function><type><specifier>static</specifier> <name>int</name></type> <name>config_input</name><parameter_list>(<parameter><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>inlink</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>inlink</name><operator>-&gt;</operator><name>dst</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>NNEDIContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>AVPixFmtDescriptor</name> <modifier>*</modifier></type><name>desc</name> <init>= <expr><call><name>av_pix_fmt_desc_get</name><argument_list>(<argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>format</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>nb_planes</name></name> <operator>=</operator> <call><name>av_pix_fmt_count_planes</name><argument_list>(<argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>format</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>av_image_fill_linesizes</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>linesize</name></name></expr></argument>, <argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>format</name></name></expr></argument>, <argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>w</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>planeheight</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>planeheight</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>AV_CEIL_RSHIFT</name><argument_list>(<argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>h</name></name></expr></argument>, <argument><expr><name><name>desc</name><operator>-&gt;</operator><name>log2_chroma_h</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>planeheight</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>planeheight</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>inlink</name><operator>-&gt;</operator><name>h</name></name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>config_output</name><parameter_list>(<parameter><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>outlink</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>outlink</name><operator>-&gt;</operator><name>src</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>NNEDIContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>outlink</name><operator>-&gt;</operator><name>time_base</name><operator>.</operator><name>num</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>inputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name><name>time_base</name><operator>.</operator><name>num</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>outlink</name><operator>-&gt;</operator><name>time_base</name><operator>.</operator><name>den</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>inputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name><name>time_base</name><operator>.</operator><name>den</name></name> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>outlink</name><operator>-&gt;</operator><name>w</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>inputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>w</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>outlink</name><operator>-&gt;</operator><name>h</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>inputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>h</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>field</name></name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>field</name></name> <operator>==</operator> <operator>-</operator><literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>outlink</name><operator>-&gt;</operator><name>frame_rate</name></name> <operator>=</operator> <macro><name>av_mul_q</name><argument_list>(<argument>ctx-&gt;inputs[<literal type="number">0</literal>]-&gt;frame_rate</argument>,

<argument>(AVRational){<literal type="number">2</literal></argument>, <argument><literal type="number">1</literal>}</argument>)</argument_list></macro></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>query_formats</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>enum</name> <name>AVPixelFormat</name></name></type> <name><name>pix_fmts</name><index>[]</index></name> <init>= <expr><block>{

<expr><name>AV_PIX_FMT_YUV410P</name></expr>, <expr><name>AV_PIX_FMT_YUV411P</name></expr>,

<expr><name>AV_PIX_FMT_YUV420P</name></expr>, <expr><name>AV_PIX_FMT_YUV422P</name></expr>,

<expr><name>AV_PIX_FMT_YUV440P</name></expr>, <expr><name>AV_PIX_FMT_YUV444P</name></expr>,

<expr><name>AV_PIX_FMT_YUVJ444P</name></expr>, <expr><name>AV_PIX_FMT_YUVJ440P</name></expr>,

<expr><name>AV_PIX_FMT_YUVJ422P</name></expr>, <expr><name>AV_PIX_FMT_YUVJ420P</name></expr>,

<expr><name>AV_PIX_FMT_YUVJ411P</name></expr>,

<expr><name>AV_PIX_FMT_GBRP</name></expr>,

<expr><name>AV_PIX_FMT_GRAY8</name></expr>,

<expr><name>AV_PIX_FMT_NONE</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFilterFormats</name> <modifier>*</modifier></type><name>fmts_list</name> <init>= <expr><call><name>ff_make_format_list</name><argument_list>(<argument><expr><name>pix_fmts</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>fmts_list</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>ff_set_common_formats</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>fmts_list</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>copy_pad</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>AVFrame</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>FrameData</name> <modifier>*</modifier></type><name>frame_data</name></decl></parameter>, <parameter><decl><type><name>NNEDIContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fn</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>off</name> <init>= <expr><literal type="number">1</literal> <operator>-</operator> <name>fn</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>plane</name></decl>, <decl><type ref="prev"/><name>y</name></decl>, <decl><type ref="prev"/><name>x</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>plane</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>plane</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>nb_planes</name></name></expr>;</condition> <incr><expr><name>plane</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>srcp</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint8_t</name> <operator>*</operator><operator>)</operator><name><name>src</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>plane</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dstp</name> <init>= <expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><name><name>frame_data</name><operator>-&gt;</operator><name>paddedp</name><index>[<expr><name>plane</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>src_stride</name> <init>= <expr><name><name>src</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>plane</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>dst_stride</name> <init>= <expr><name><name>frame_data</name><operator>-&gt;</operator><name>padded_stride</name><index>[<expr><name>plane</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>src_height</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>planeheight</name><index>[<expr><name>plane</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>dst_height</name> <init>= <expr><name><name>frame_data</name><operator>-&gt;</operator><name>padded_height</name><index>[<expr><name>plane</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>src_width</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>plane</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>dst_width</name> <init>= <expr><name><name>frame_data</name><operator>-&gt;</operator><name>padded_width</name><index>[<expr><name>plane</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>c</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>process_plane</name></name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>plane</name><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <name>off</name></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>src_height</name></expr>;</condition> <incr><expr><name>y</name> <operator>+=</operator> <literal type="number">2</literal></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>dstp</name> <operator>+</operator> <literal type="number">32</literal> <operator>+</operator> <operator>(</operator><literal type="number">6</literal> <operator>+</operator> <name>y</name><operator>)</operator> <operator>*</operator> <name>dst_stride</name></expr></argument>,

<argument><expr><name>srcp</name> <operator>+</operator> <name>y</name> <operator>*</operator> <name>src_stride</name></expr></argument>,

<argument><expr><name>src_width</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint8_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>dstp</name> <operator>+=</operator> <operator>(</operator><literal type="number">6</literal> <operator>+</operator> <name>off</name><operator>)</operator> <operator>*</operator> <name>dst_stride</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">6</literal> <operator>+</operator> <name>off</name></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>dst_height</name> <operator>-</operator> <literal type="number">6</literal></expr>;</condition> <incr><expr><name>y</name> <operator>+=</operator> <literal type="number">2</literal></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>c</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <literal type="number">32</literal></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>dstp</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <name><name>dstp</name><index>[<expr><literal type="number">64</literal> <operator>-</operator> <name>x</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <name>dst_width</name> <operator>-</operator> <literal type="number">32</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>dst_width</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr><operator>,</operator> <expr><name>c</name> <operator>+=</operator> <literal type="number">2</literal></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>dstp</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <name><name>dstp</name><index>[<expr><name>x</name> <operator>-</operator> <name>c</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>dstp</name> <operator>+=</operator> <name>dst_stride</name> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>dstp</name> <operator>=</operator> <operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><name><name>frame_data</name><operator>-&gt;</operator><name>paddedp</name><index>[<expr><name>plane</name></expr>]</index></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <name>off</name></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <literal type="number">6</literal></expr>;</condition> <incr><expr><name>y</name> <operator>+=</operator> <literal type="number">2</literal></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>dstp</name> <operator>+</operator> <name>y</name> <operator>*</operator> <name>dst_stride</name></expr></argument>,

<argument><expr><name>dstp</name> <operator>+</operator> <operator>(</operator><literal type="number">12</literal> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <name>off</name> <operator>-</operator> <name>y</name><operator>)</operator> <operator>*</operator> <name>dst_stride</name></expr></argument>,

<argument><expr><name>dst_width</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint8_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <name>dst_height</name> <operator>-</operator> <literal type="number">6</literal> <operator>+</operator> <name>off</name></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>dst_height</name></expr>;</condition> <incr><expr><name>y</name> <operator>+=</operator> <literal type="number">2</literal></expr><operator>,</operator> <expr><name>c</name> <operator>+=</operator> <literal type="number">4</literal></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>dstp</name> <operator>+</operator> <name>y</name> <operator>*</operator> <name>dst_stride</name></expr></argument>,

<argument><expr><name>dstp</name> <operator>+</operator> <operator>(</operator><name>y</name> <operator>-</operator> <name>c</name><operator>)</operator> <operator>*</operator> <name>dst_stride</name></expr></argument>,

<argument><expr><name>dst_width</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint8_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>elliott</name><parameter_list>(<parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>n</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>data</name><index>[<expr><name>i</name></expr>]</index></name> <operator>/</operator> <operator>(</operator><literal type="number">1.0f</literal> <operator>+</operator> <call><name>FFABS</name><argument_list>(<argument><expr><name><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>dot_prod</name><parameter_list>(<parameter><decl><type><name>NNEDIContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>weights</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>vals</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>scale</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>sum</name></decl>;</decl_stmt>

<expr_stmt><expr><name>sum</name> <operator>=</operator> <call><name><name>s</name><operator>-&gt;</operator><name>fdsp</name><operator>-&gt;</operator><name>scalarproduct_float</name></name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>weights</name><index>[<expr><name>i</name> <operator>*</operator> <name>len</name></expr>]</index></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vals</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>sum</name> <operator>*</operator> <name><name>scale</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>weights</name><index>[<expr><name>n</name> <operator>*</operator> <name>len</name> <operator>+</operator> <name>i</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>dot_prods</name><parameter_list>(<parameter><decl><type><name>NNEDIContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>dataf</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>weightsf</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>vals</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>scale</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><operator>(</operator><name>int16_t</name> <operator>*</operator><operator>)</operator><name>dataf</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name>weights</name> <init>= <expr><operator>(</operator><name>int16_t</name> <operator>*</operator><operator>)</operator><name>weightsf</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>wf</name> <init>= <expr><operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>weights</name><index>[<expr><name>n</name> <operator>*</operator> <name>len</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>sum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>off</name> <init>= <expr><operator>(</operator><operator>(</operator><name>i</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>i</name> <operator>&amp;</operator> <literal type="number">3</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name>sum</name> <operator>+=</operator> <name><name>data</name><index>[<expr><name>j</name></expr>]</index></name> <operator>*</operator> <name><name>weights</name><index>[<expr><name>i</name> <operator>*</operator> <name>len</name> <operator>+</operator> <name>j</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name><name>vals</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>sum</name> <operator>*</operator> <name><name>wf</name><index>[<expr><name>off</name></expr>]</index></name> <operator>*</operator> <name><name>scale</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>wf</name><index>[<expr><name>off</name> <operator>+</operator> <literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>compute_network0</name><parameter_list>(<parameter><decl><type><name>NNEDIContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>input</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>weights</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>d</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>t</name></decl>, <decl><type ref="prev"/><name><name>temp</name><index>[<expr><literal type="number">12</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name>scale</name> <init>= <expr><literal type="number">1.0f</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>dot_prod</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>input</name></expr></argument>, <argument><expr><name>weights</name></expr></argument>, <argument><expr><name>temp</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">48</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>scale</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>t</name> <operator>=</operator> <name><name>temp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>elliott</name><argument_list>(<argument><expr><name>temp</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>temp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dot_prod</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>temp</name></expr></argument>, <argument><expr><name>weights</name> <operator>+</operator> <literal type="number">4</literal> <operator>*</operator> <literal type="number">49</literal></expr></argument>, <argument><expr><name>temp</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>scale</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>elliott</name><argument_list>(<argument><expr><name>temp</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dot_prod</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>temp</name></expr></argument>, <argument><expr><name>weights</name> <operator>+</operator> <literal type="number">4</literal> <operator>*</operator> <literal type="number">49</literal> <operator>+</operator> <literal type="number">4</literal> <operator>*</operator> <literal type="number">5</literal></expr></argument>, <argument><expr><name>temp</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>scale</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FFMAX</name><argument_list>(<argument><expr><name><name>temp</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>temp</name><index>[<expr><literal type="number">11</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name><name>temp</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>temp</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>d</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>d</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>compute_network0_i16</name><parameter_list>(<parameter><decl><type><name>NNEDIContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>inputf</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>weightsf</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>d</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>wf</name> <init>= <expr><name>weightsf</name> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <literal type="number">48</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>t</name></decl>, <decl><type ref="prev"/><name><name>temp</name><index>[<expr><literal type="number">12</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name>scale</name> <init>= <expr><literal type="number">1.0f</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>dot_prods</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>inputf</name></expr></argument>, <argument><expr><name>weightsf</name></expr></argument>, <argument><expr><name>temp</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">48</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>scale</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>t</name> <operator>=</operator> <name><name>temp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>elliott</name><argument_list>(<argument><expr><name>temp</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>temp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dot_prod</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>temp</name></expr></argument>, <argument><expr><name>wf</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><name>temp</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>scale</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>elliott</name><argument_list>(<argument><expr><name>temp</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dot_prod</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>temp</name></expr></argument>, <argument><expr><name>wf</name> <operator>+</operator> <literal type="number">8</literal> <operator>+</operator> <literal type="number">4</literal> <operator>*</operator> <literal type="number">5</literal></expr></argument>, <argument><expr><name>temp</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>scale</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FFMAX</name><argument_list>(<argument><expr><name><name>temp</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>temp</name><index>[<expr><literal type="number">11</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name><name>temp</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>temp</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>d</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>d</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>pixel2float48</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>t8</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>pitch</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>t</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint8_t</name> <operator>*</operator><operator>)</operator><name>t8</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>, <decl><type ref="prev"/><name>x</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <literal type="number">12</literal></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p</name><index>[<expr><name>y</name> <operator>*</operator> <literal type="number">12</literal> <operator>+</operator> <name>x</name></expr>]</index></name> <operator>=</operator> <name><name>t</name><index>[<expr><name>y</name> <operator>*</operator> <name>pitch</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <name>x</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for></block_content></block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>byte2word48</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>t</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>pitch</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>pf</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>int16_t</name> <operator>*</operator><operator>)</operator><name>pf</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>, <decl><type ref="prev"/><name>x</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <literal type="number">12</literal></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p</name><index>[<expr><name>y</name> <operator>*</operator> <literal type="number">12</literal> <operator>+</operator> <name>x</name></expr>]</index></name> <operator>=</operator> <name><name>t</name><index>[<expr><name>y</name> <operator>*</operator> <name>pitch</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <name>x</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for></block_content></block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>process_line0</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>tempu</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dstp8</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src3p8</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>src_pitch</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>max_value</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>chroma</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dstp</name> <init>= <expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><name>dstp8</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src3p</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint8_t</name> <operator>*</operator><operator>)</operator><name>src3p8</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>minimum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>maximum</name> <init>= <expr><name>max_value</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>x</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>tempu</name><index>[<expr><name>x</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>tmp</name> <init>= <expr><literal type="number">19</literal> <operator>*</operator> <operator>(</operator><name><name>src3p</name><index>[<expr><name>x</name> <operator>+</operator> <name>src_pitch</name> <operator>*</operator> <literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <name><name>src3p</name><index>[<expr><name>x</name> <operator>+</operator> <name>src_pitch</name> <operator>*</operator> <literal type="number">4</literal></expr>]</index></name><operator>)</operator> <operator>-</operator> <literal type="number">3</literal> <operator>*</operator> <operator>(</operator><name><name>src3p</name><index>[<expr><name>x</name></expr>]</index></name> <operator>+</operator> <name><name>src3p</name><index>[<expr><name>x</name> <operator>+</operator> <name>src_pitch</name> <operator>*</operator> <literal type="number">6</literal></expr>]</index></name><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>tmp</name> <operator>/=</operator> <literal type="number">32</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dstp</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><call><name>FFMIN</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>maximum</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>minimum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>dstp</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <literal type="number">255</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>count</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>count</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>byte2word64</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>t</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>pitch</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>ps</name> <init>= <expr><operator>(</operator><name>int16_t</name> <operator>*</operator><operator>)</operator><name>p</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>, <decl><type ref="prev"/><name>x</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ps</name><index>[<expr><name>y</name> <operator>*</operator> <literal type="number">16</literal> <operator>+</operator> <name>x</name></expr>]</index></name> <operator>=</operator> <name><name>t</name><index>[<expr><name>y</name> <operator>*</operator> <name>pitch</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <name>x</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for></block_content></block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>compute_network0new</name><parameter_list>(<parameter><decl><type><name>NNEDIContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>datai</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>weights</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>d</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><operator>(</operator><name>int16_t</name> <operator>*</operator><operator>)</operator><name>datai</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>ws</name> <init>= <expr><operator>(</operator><name>int16_t</name> <operator>*</operator><operator>)</operator><name>weights</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>wf</name> <init>= <expr><operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>ws</name><index>[<expr><literal type="number">4</literal> <operator>*</operator> <literal type="number">64</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name><name>vals</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>mask</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>sum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>t</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">64</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name>sum</name> <operator>+=</operator> <name><name>data</name><index>[<expr><name>j</name></expr>]</index></name> <operator>*</operator> <name><name>ws</name><index>[<expr><operator>(</operator><name>i</name> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><name>j</name> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">5</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>j</name> <operator>&amp;</operator> <literal type="number">7</literal><operator>)</operator></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>t</name> <operator>=</operator> <name>sum</name> <operator>*</operator> <name><name>wf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name><name>wf</name><index>[<expr><literal type="number">4</literal> <operator>+</operator> <name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vals</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>t</name> <operator>/</operator> <operator>(</operator><literal type="number">1.0f</literal> <operator>+</operator> <call><name>FFABS</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>sum</name> <init>= <expr><literal type="number">0.0f</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name>sum</name> <operator>+=</operator> <name><name>vals</name><index>[<expr><name>j</name></expr>]</index></name> <operator>*</operator> <name><name>wf</name><index>[<expr><literal type="number">8</literal> <operator>+</operator> <name>i</name> <operator>+</operator> <operator>(</operator><name>j</name> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name><name>vals</name><index>[<expr><literal type="number">4</literal> <operator>+</operator> <name>i</name></expr>]</index></name> <operator>=</operator> <name>sum</name> <operator>+</operator> <name><name>wf</name><index>[<expr><literal type="number">8</literal> <operator>+</operator> <literal type="number">16</literal> <operator>+</operator> <name>i</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>mask</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>vals</name><index>[<expr><literal type="number">4</literal> <operator>+</operator> <name>i</name></expr>]</index></name> <operator>&gt;</operator> <literal type="number">0.0f</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>mask</name> <operator>|=</operator> <operator>(</operator><literal type="number">0x1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>i</name> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><operator>(</operator><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><name>d</name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index> <operator>=</operator> <name>mask</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>evalfunc_0</name><parameter_list>(<parameter><decl><type><name>NNEDIContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>FrameData</name> <modifier>*</modifier></type><name>frame_data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>input</name> <init>= <expr><name><name>frame_data</name><operator>-&gt;</operator><name>input</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>weights0</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>weights0</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>temp</name> <init>= <expr><name><name>frame_data</name><operator>-&gt;</operator><name>temp</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>tempu</name> <init>= <expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><name>temp</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>plane</name></decl>, <decl><type ref="prev"/><name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>plane</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>plane</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>nb_planes</name></name></expr>;</condition> <incr><expr><name>plane</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>srcp</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint8_t</name> <operator>*</operator><operator>)</operator><name><name>frame_data</name><operator>-&gt;</operator><name>paddedp</name><index>[<expr><name>plane</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>src_stride</name> <init>= <expr><name><name>frame_data</name><operator>-&gt;</operator><name>padded_stride</name><index>[<expr><name>plane</name></expr>]</index></name> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint8_t</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>width</name> <init>= <expr><name><name>frame_data</name><operator>-&gt;</operator><name>padded_width</name><index>[<expr><name>plane</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>height</name> <init>= <expr><name><name>frame_data</name><operator>-&gt;</operator><name>padded_height</name><index>[<expr><name>plane</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dstp</name> <init>= <expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><name><name>frame_data</name><operator>-&gt;</operator><name>dstp</name><index>[<expr><name>plane</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>dst_stride</name> <init>= <expr><name><name>frame_data</name><operator>-&gt;</operator><name>dst_stride</name><index>[<expr><name>plane</name></expr>]</index></name> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint8_t</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src3p</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ystart</name></decl>, <decl><type ref="prev"/><name>ystop</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>lcount</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>process_plane</name></name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>plane</name><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">1</literal> <operator>-</operator> <name><name>frame_data</name><operator>-&gt;</operator><name>field</name><index>[<expr><name>plane</name></expr>]</index></name></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name> <operator>-</operator> <literal type="number">12</literal></expr>;</condition> <incr><expr><name>y</name> <operator>+=</operator> <literal type="number">2</literal></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>dstp</name> <operator>+</operator> <name>y</name> <operator>*</operator> <name>dst_stride</name></expr></argument>,

<argument><expr><name>srcp</name> <operator>+</operator> <literal type="number">32</literal> <operator>+</operator> <operator>(</operator><literal type="number">6</literal> <operator>+</operator> <name>y</name><operator>)</operator> <operator>*</operator> <name>src_stride</name></expr></argument>,

<argument><expr><operator>(</operator><name>width</name> <operator>-</operator> <literal type="number">64</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint8_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>ystart</name> <operator>=</operator> <literal type="number">6</literal> <operator>+</operator> <name><name>frame_data</name><operator>-&gt;</operator><name>field</name><index>[<expr><name>plane</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>ystop</name> <operator>=</operator> <name>height</name> <operator>-</operator> <literal type="number">6</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>srcp</name> <operator>+=</operator> <name>ystart</name> <operator>*</operator> <name>src_stride</name></expr>;</expr_stmt>

<expr_stmt><expr><name>dstp</name> <operator>+=</operator> <operator>(</operator><name>ystart</name> <operator>-</operator> <literal type="number">6</literal><operator>)</operator> <operator>*</operator> <name>dst_stride</name> <operator>-</operator> <literal type="number">32</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>src3p</name> <operator>=</operator> <name>srcp</name> <operator>-</operator> <name>src_stride</name> <operator>*</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>lcount</name> <operator>=</operator> <name><name>frame_data</name><operator>-&gt;</operator><name>lcount</name><index>[<expr><name>plane</name></expr>]</index></name> <operator>-</operator> <literal type="number">6</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>pscrn</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content> 

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <name>ystart</name></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>ystop</name></expr>;</condition> <incr><expr><name>y</name> <operator>+=</operator> <literal type="number">2</literal></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">32</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>width</name> <operator>-</operator> <literal type="number">32</literal></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>readpixels</name></name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>uint8_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>src3p</name> <operator>+</operator> <name>x</name> <operator>-</operator> <literal type="number">5</literal><operator>)</operator></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>input</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>compute_network0</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>input</name></expr></argument>, <argument><expr><name>weights0</name></expr></argument>, <argument><expr><name>tempu</name><operator>+</operator><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>lcount</name><index>[<expr><name>y</name></expr>]</index></name> <operator>+=</operator> <call><name><name>s</name><operator>-&gt;</operator><name>process_line0</name></name><argument_list>(<argument><expr><name>tempu</name> <operator>+</operator> <literal type="number">32</literal></expr></argument>, <argument><expr><name>width</name> <operator>-</operator> <literal type="number">64</literal></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>dstp</name> <operator>+</operator> <literal type="number">32</literal><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>uint8_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>src3p</name> <operator>+</operator> <literal type="number">32</literal><operator>)</operator></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>max_value</name></name></expr></argument>, <argument><expr><name>plane</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>src3p</name> <operator>+=</operator> <name>src_stride</name> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>dstp</name> <operator>+=</operator> <name>dst_stride</name> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>pscrn</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content> 

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <name>ystart</name></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>ystop</name></expr>;</condition> <incr><expr><name>y</name> <operator>+=</operator> <literal type="number">2</literal></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">32</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>width</name> <operator>-</operator> <literal type="number">32</literal></expr>;</condition> <incr><expr><name>x</name> <operator>+=</operator> <literal type="number">4</literal></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>readpixels</name></name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>uint8_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>src3p</name> <operator>+</operator> <name>x</name> <operator>-</operator> <literal type="number">6</literal><operator>)</operator></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>input</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>compute_network0</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>input</name></expr></argument>, <argument><expr><name>weights0</name></expr></argument>, <argument><expr><name>tempu</name> <operator>+</operator> <name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>lcount</name><index>[<expr><name>y</name></expr>]</index></name> <operator>+=</operator> <call><name><name>s</name><operator>-&gt;</operator><name>process_line0</name></name><argument_list>(<argument><expr><name>tempu</name> <operator>+</operator> <literal type="number">32</literal></expr></argument>, <argument><expr><name>width</name> <operator>-</operator> <literal type="number">64</literal></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>dstp</name> <operator>+</operator> <literal type="number">32</literal><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>uint8_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>src3p</name> <operator>+</operator> <literal type="number">32</literal><operator>)</operator></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>max_value</name></name></expr></argument>, <argument><expr><name>plane</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>src3p</name> <operator>+=</operator> <name>src_stride</name> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>dstp</name> <operator>+=</operator> <name>dst_stride</name> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if> <else>else <block>{<block_content> 

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <name>ystart</name></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>ystop</name></expr>;</condition> <incr><expr><name>y</name> <operator>+=</operator> <literal type="number">2</literal></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>dstp</name> <operator>+</operator> <literal type="number">32</literal></expr></argument>, <argument><expr><literal type="number">255</literal></expr></argument>, <argument><expr><operator>(</operator><name>width</name> <operator>-</operator> <literal type="number">64</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint8_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>lcount</name><index>[<expr><name>y</name></expr>]</index></name> <operator>+=</operator> <name>width</name> <operator>-</operator> <literal type="number">64</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>dstp</name> <operator>+=</operator> <name>dst_stride</name> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>extract_m8</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>srcp8</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>xdia</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>ydia</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>mstd</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>input</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>srcp</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint8_t</name> <operator>*</operator><operator>)</operator><name>srcp8</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>scale</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>tmp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>sum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>sumsq</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>, <decl><type ref="prev"/><name>x</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>ydia</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>srcpT</name> <init>= <expr><name>srcp</name> <operator>+</operator> <name>y</name> <operator>*</operator> <name>stride</name> <operator>*</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>xdia</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>sum</name> <operator>+=</operator> <name><name>srcpT</name><index>[<expr><name>x</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>sumsq</name> <operator>+=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>srcpT</name><index>[<expr><name>x</name></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>srcpT</name><index>[<expr><name>x</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>input</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <name><name>srcpT</name><index>[<expr><name>x</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>input</name> <operator>+=</operator> <name>xdia</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>scale</name> <operator>=</operator> <literal type="number">1.0f</literal> <operator>/</operator> <operator>(</operator><name>xdia</name> <operator>*</operator> <name>ydia</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mstd</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>sum</name> <operator>*</operator> <name>scale</name></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp</name> <operator>=</operator> <operator>(</operator><name>double</name><operator>)</operator><name>sumsq</name> <operator>*</operator> <name>scale</name> <operator>-</operator> <operator>(</operator><name>double</name><operator>)</operator><name><name>mstd</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name><name>mstd</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mstd</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0.0f</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>tmp</name> <operator>&lt;=</operator> <name>FLT_EPSILON</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>mstd</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>mstd</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0.0f</literal></expr>;</expr_stmt></block_content></block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name><name>mstd</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>sqrt</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mstd</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1.0f</literal> <operator>/</operator> <name><name>mstd</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>extract_m8_i16</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>srcp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>xdia</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>ydia</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>mstd</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>inputf</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>input</name> <init>= <expr><operator>(</operator><name>int16_t</name> <operator>*</operator><operator>)</operator><name>inputf</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>scale</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>sum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>sumsq</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>, <decl><type ref="prev"/><name>x</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>ydia</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>srcpT</name> <init>= <expr><name>srcp</name> <operator>+</operator> <name>y</name> <operator>*</operator> <name>stride</name> <operator>*</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>xdia</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>sum</name> <operator>+=</operator> <name><name>srcpT</name><index>[<expr><name>x</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>sumsq</name> <operator>+=</operator> <name><name>srcpT</name><index>[<expr><name>x</name></expr>]</index></name> <operator>*</operator> <name><name>srcpT</name><index>[<expr><name>x</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>input</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <name><name>srcpT</name><index>[<expr><name>x</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>input</name> <operator>+=</operator> <name>xdia</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>scale</name> <operator>=</operator> <literal type="number">1.0f</literal> <operator>/</operator> <operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><name>xdia</name> <operator>*</operator> <name>ydia</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mstd</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>sum</name> <operator>*</operator> <name>scale</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mstd</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>sumsq</name> <operator>*</operator> <name>scale</name> <operator>-</operator> <name><name>mstd</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name><name>mstd</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mstd</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0.0f</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>mstd</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;=</operator> <name>FLT_EPSILON</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>mstd</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>mstd</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0.0f</literal></expr>;</expr_stmt></block_content></block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name><name>mstd</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>sqrt</name><argument_list>(<argument><expr><name><name>mstd</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mstd</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1.0f</literal> <operator>/</operator> <name><name>mstd</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>float</name></type> <name>exp_lo</name> <init>= <expr><operator>-</operator><literal type="number">80.0f</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>float</name></type> <name>exp_hi</name> <init>= <expr><operator>+</operator><literal type="number">80.0f</literal></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>e2_m16</name><parameter_list>(<parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>n</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>exp</name><argument_list>(<argument><expr><call><name>av_clipf</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>exp_lo</name></expr></argument>, <argument><expr><name>exp_hi</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>min_weight_sum</name> <init>= <expr><literal type="number">1e-10f</literal></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>weighted_avg_elliott_mul5_m16</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>w</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>mstd</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>vsum</name> <init>= <expr><literal type="number">0.0f</literal></expr></init></decl>, <decl><type ref="prev"/><name>wsum</name> <init>= <expr><literal type="number">0.0f</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>vsum</name> <operator>+=</operator> <name><name>w</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <operator>(</operator><name><name>w</name><index>[<expr><name>n</name> <operator>+</operator> <name>i</name></expr>]</index></name> <operator>/</operator> <operator>(</operator><literal type="number">1.0f</literal> <operator>+</operator> <call><name>FFABS</name><argument_list>(<argument><expr><name><name>w</name><index>[<expr><name>n</name> <operator>+</operator> <name>i</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>wsum</name> <operator>+=</operator> <name><name>w</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>wsum</name> <operator>&gt;</operator> <name>min_weight_sum</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>mstd</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>+=</operator> <operator>(</operator><operator>(</operator><literal type="number">5.0f</literal> <operator>*</operator> <name>vsum</name><operator>)</operator> <operator>/</operator> <name>wsum</name><operator>)</operator> <operator>*</operator> <name><name>mstd</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>mstd</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>mstd</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>+=</operator> <name><name>mstd</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>evalfunc_1</name><parameter_list>(<parameter><decl><type><name>NNEDIContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>FrameData</name> <modifier>*</modifier></type><name>frame_data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>input</name> <init>= <expr><name><name>frame_data</name><operator>-&gt;</operator><name>input</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>temp</name> <init>= <expr><name><name>frame_data</name><operator>-&gt;</operator><name>temp</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier><modifier>*</modifier></type><name>weights1</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>weights1</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>qual</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>qual</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>asize</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>asize</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>nns</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>nns</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>xdia</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>xdia</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>xdiad2m1</name> <init>= <expr><operator>(</operator><name>xdia</name> <operator>/</operator> <literal type="number">2</literal><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>ydia</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>ydia</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>scale</name> <init>= <expr><literal type="number">1.0f</literal> <operator>/</operator> <operator>(</operator><name>float</name><operator>)</operator><name>qual</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>plane</name></decl>, <decl><type ref="prev"/><name>y</name></decl>, <decl><type ref="prev"/><name>x</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>plane</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>plane</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>nb_planes</name></name></expr>;</condition> <incr><expr><name>plane</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>srcp</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint8_t</name> <operator>*</operator><operator>)</operator><name><name>frame_data</name><operator>-&gt;</operator><name>paddedp</name><index>[<expr><name>plane</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>src_stride</name> <init>= <expr><name><name>frame_data</name><operator>-&gt;</operator><name>padded_stride</name><index>[<expr><name>plane</name></expr>]</index></name> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint8_t</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>width</name> <init>= <expr><name><name>frame_data</name><operator>-&gt;</operator><name>padded_width</name><index>[<expr><name>plane</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>height</name> <init>= <expr><name><name>frame_data</name><operator>-&gt;</operator><name>padded_height</name><index>[<expr><name>plane</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dstp</name> <init>= <expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><name><name>frame_data</name><operator>-&gt;</operator><name>dstp</name><index>[<expr><name>plane</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>dst_stride</name> <init>= <expr><name><name>frame_data</name><operator>-&gt;</operator><name>dst_stride</name><index>[<expr><name>plane</name></expr>]</index></name> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint8_t</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>ystart</name> <init>= <expr><name><name>frame_data</name><operator>-&gt;</operator><name>field</name><index>[<expr><name>plane</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>ystop</name> <init>= <expr><name>height</name> <operator>-</operator> <literal type="number">12</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>srcpp</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>process_plane</name></name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>plane</name><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name>srcp</name> <operator>+=</operator> <operator>(</operator><name>ystart</name> <operator>+</operator> <literal type="number">6</literal><operator>)</operator> <operator>*</operator> <name>src_stride</name></expr>;</expr_stmt>

<expr_stmt><expr><name>dstp</name> <operator>+=</operator> <name>ystart</name> <operator>*</operator> <name>dst_stride</name> <operator>-</operator> <literal type="number">32</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>srcpp</name> <operator>=</operator> <name>srcp</name> <operator>-</operator> <operator>(</operator><name>ydia</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>src_stride</name> <operator>-</operator> <name>xdiad2m1</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <name>ystart</name></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>ystop</name></expr>;</condition> <incr><expr><name>y</name> <operator>+=</operator> <literal type="number">2</literal></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">32</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>width</name> <operator>-</operator> <literal type="number">32</literal></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name><name>mstd</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>dstp</name><index>[<expr><name>x</name></expr>]</index></name> <operator>!=</operator> <literal type="number">255</literal></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>extract</name></name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>uint8_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>srcpp</name> <operator>+</operator> <name>x</name><operator>)</operator></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>xdia</name></expr></argument>, <argument><expr><name>ydia</name></expr></argument>, <argument><expr><name>mstd</name></expr></argument>, <argument><expr><name>input</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>qual</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>dot_prod</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>input</name></expr></argument>, <argument><expr><name><name>weights1</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>temp</name></expr></argument>, <argument><expr><name>nns</name> <operator>*</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>asize</name></expr></argument>, <argument><expr><name>mstd</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>expfunc</name></name><argument_list>(<argument><expr><name>temp</name></expr></argument>, <argument><expr><name>nns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>wae5</name></name><argument_list>(<argument><expr><name>temp</name></expr></argument>, <argument><expr><name>nns</name></expr></argument>, <argument><expr><name>mstd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>dstp</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><call><name>FFMAX</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name><name>mstd</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>*</operator> <name>scale</name> <operator>+</operator> <literal type="number">0.5f</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>max_value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>srcpp</name> <operator>+=</operator> <name>src_stride</name> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>dstp</name> <operator>+=</operator> <name>dst_stride</name> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NUM_NSIZE</name></cpp:macro> <cpp:value>7</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NUM_NNS</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>int</name></type> <name>roundds</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>double</name></type> <name>f</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>f</name> <operator>-</operator> <call><name>floor</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">0.5</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>FFMIN</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><call><name>ceil</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">32767</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>FFMAX</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><call><name>floor</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>-</operator><literal type="number">32768</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>select_functions</name><parameter_list>(<parameter><decl><type><name>NNEDIContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>copy_pad</name></name> <operator>=</operator> <name>copy_pad</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>evalfunc_0</name></name> <operator>=</operator> <name>evalfunc_0</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>evalfunc_1</name></name> <operator>=</operator> <name>evalfunc_1</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>process_line0</name></name> <operator>=</operator> <name>process_line0</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>pscrn</name></name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content> 

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>fapprox</name></name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>readpixels</name></name> <operator>=</operator> <name>byte2word48</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>compute_network0</name></name> <operator>=</operator> <name>compute_network0_i16</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>readpixels</name></name> <operator>=</operator> <name>pixel2float48</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>compute_network0</name></name> <operator>=</operator> <name>compute_network0</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content> 

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>readpixels</name></name> <operator>=</operator> <name>byte2word64</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>compute_network0</name></name> <operator>=</operator> <name>compute_network0new</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>wae5</name></name> <operator>=</operator> <name>weighted_avg_elliott_mul5_m16</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>fapprox</name></name> <operator>&amp;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>extract</name></name> <operator>=</operator> <name>extract_m8_i16</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>dot_prod</name></name> <operator>=</operator> <name>dot_prods</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content> 

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>extract</name></name> <operator>=</operator> <name>extract_m8</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>dot_prod</name></name> <operator>=</operator> <name>dot_prod</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>expfunc</name></name> <operator>=</operator> <name>e2_m16</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>modnpf</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>m</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>n</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>m</name> <operator>%</operator> <name>n</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>m</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>m</name> <operator>+</operator> <name>n</name> <operator>-</operator> <operator>(</operator><name>m</name> <operator>%</operator> <name>n</name><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>get_frame</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>is_second</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>NNEDIContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>outlink</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>outputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>src</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>FrameData</name> <modifier>*</modifier></type><name>frame_data</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>effective_field</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>field</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>temp_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>field_n</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>plane</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>effective_field</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>effective_field</name> <operator>-=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>effective_field</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>effective_field</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>field</name></name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>src</name><operator>-&gt;</operator><name>interlaced_frame</name></name> <operator>&amp;&amp;</operator> <name><name>src</name><operator>-&gt;</operator><name>top_field_first</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>effective_field</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>field</name></name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>src</name><operator>-&gt;</operator><name>interlaced_frame</name></name> <operator>&amp;&amp;</operator> <name><name>src</name><operator>-&gt;</operator><name>top_field_first</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>effective_field</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>effective_field</name> <operator>=</operator> <operator>!</operator><name>effective_field</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>field</name></name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>field</name></name> <operator>==</operator> <operator>-</operator><literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>is_second</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>field_n</name> <operator>=</operator> <operator>(</operator><name>effective_field</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>field_n</name> <operator>=</operator> <operator>(</operator><name>effective_field</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>field_n</name> <operator>=</operator> <name>effective_field</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>dst</name></name> <operator>=</operator> <call><name>ff_get_video_buffer</name><argument_list>(<argument><expr><name>outlink</name></expr></argument>, <argument><expr><name><name>outlink</name><operator>-&gt;</operator><name>w</name></name></expr></argument>, <argument><expr><name><name>outlink</name><operator>-&gt;</operator><name>h</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>dst</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_frame_copy_props</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>dst</name></name></expr></argument>, <argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>dst</name><operator>-&gt;</operator><name>interlaced_frame</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>frame_data</name> <operator>=</operator> <operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>frame_data</name></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>plane</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>plane</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>nb_planes</name></name></expr>;</condition> <incr><expr><name>plane</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>dst_height</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>planeheight</name><index>[<expr><name>plane</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>dst_width</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>plane</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>min_alignment</name> <init>= <expr><literal type="number">16</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>min_pad</name> <init>= <expr><literal type="number">10</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>process_plane</name></name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>plane</name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_image_copy_plane</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>dst</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>plane</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>dst</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>plane</name></expr>]</index></name></expr></argument>,

<argument><expr><name><name>src</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>plane</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>src</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>plane</name></expr>]</index></name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>plane</name></expr>]</index></name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>planeheight</name><index>[<expr><name>plane</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>frame_data</name><operator>-&gt;</operator><name>padded_width</name><index>[<expr><name>plane</name></expr>]</index></name> <operator>=</operator> <name>dst_width</name> <operator>+</operator> <literal type="number">64</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>frame_data</name><operator>-&gt;</operator><name>padded_height</name><index>[<expr><name>plane</name></expr>]</index></name> <operator>=</operator> <name>dst_height</name> <operator>+</operator> <literal type="number">12</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>frame_data</name><operator>-&gt;</operator><name>padded_stride</name><index>[<expr><name>plane</name></expr>]</index></name> <operator>=</operator> <call><name>modnpf</name><argument_list>(<argument><expr><name><name>frame_data</name><operator>-&gt;</operator><name>padded_width</name><index>[<expr><name>plane</name></expr>]</index></name> <operator>+</operator> <name>min_pad</name></expr></argument>, <argument><expr><name>min_alignment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>frame_data</name><operator>-&gt;</operator><name>paddedp</name><index>[<expr><name>plane</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>frame_data</name><operator>-&gt;</operator><name>paddedp</name><index>[<expr><name>plane</name></expr>]</index></name> <operator>=</operator> <call><name>av_malloc_array</name><argument_list>(<argument><expr><name><name>frame_data</name><operator>-&gt;</operator><name>padded_stride</name><index>[<expr><name>plane</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>frame_data</name><operator>-&gt;</operator><name>padded_height</name><index>[<expr><name>plane</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>frame_data</name><operator>-&gt;</operator><name>paddedp</name><index>[<expr><name>plane</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>frame_data</name><operator>-&gt;</operator><name>dstp</name><index>[<expr><name>plane</name></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>dst</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>plane</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>frame_data</name><operator>-&gt;</operator><name>dst_stride</name><index>[<expr><name>plane</name></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>dst</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>plane</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>frame_data</name><operator>-&gt;</operator><name>lcount</name><index>[<expr><name>plane</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>frame_data</name><operator>-&gt;</operator><name>lcount</name><index>[<expr><name>plane</name></expr>]</index></name> <operator>=</operator> <call><name>av_calloc</name><argument_list>(<argument><expr><name>dst_height</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int32_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>frame_data</name><operator>-&gt;</operator><name>lcount</name><index>[<expr><name>plane</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>frame_data</name><operator>-&gt;</operator><name>lcount</name><index>[<expr><name>plane</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>dst_height</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int32_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>frame_data</name><operator>-&gt;</operator><name>field</name><index>[<expr><name>plane</name></expr>]</index></name> <operator>=</operator> <name>field_n</name></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>frame_data</name><operator>-&gt;</operator><name>input</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>frame_data</name><operator>-&gt;</operator><name>input</name></name> <operator>=</operator> <call><name>av_malloc</name><argument_list>(<argument><expr><literal type="number">512</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>frame_data</name><operator>-&gt;</operator><name>input</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>frame_data</name><operator>-&gt;</operator><name>temp</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>temp_size</name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name><name>frame_data</name><operator>-&gt;</operator><name>padded_width</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">512</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>frame_data</name><operator>-&gt;</operator><name>temp</name></name> <operator>=</operator> <call><name>av_malloc</name><argument_list>(<argument><expr><name>temp_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>frame_data</name><operator>-&gt;</operator><name>temp</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>copy_pad</name></name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>frame_data</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>field_n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>evalfunc_0</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>frame_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>evalfunc_1</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>frame_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>filter_frame</name><parameter_list>(<parameter><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>inlink</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>src</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>inlink</name><operator>-&gt;</operator><name>dst</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>outlink</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>outputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>NNEDIContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>field</name></name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>||</operator>

<name><name>s</name><operator>-&gt;</operator><name>field</name></name> <operator>==</operator> <operator>-</operator><literal type="number">2</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>second</name></name></expr>)</condition> <block>{<block_content>

<goto>goto <name>second</name>;</goto>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>field</name></name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>||</operator>

<name><name>s</name><operator>-&gt;</operator><name>field</name></name> <operator>==</operator> <operator>-</operator><literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>dst</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>src</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>second</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>get_frame</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>dst</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>second</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>src</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>dst</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>dst</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>src</name><operator>-&gt;</operator><name>pts</name></name> <operator>!=</operator> <name>AV_NOPTS_VALUE</name> <operator>&amp;&amp;</operator>

<name><name>dst</name><operator>-&gt;</operator><name>pts</name></name> <operator>!=</operator> <name>AV_NOPTS_VALUE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>pts</name></name> <operator>+=</operator> <name><name>src</name><operator>-&gt;</operator><name>pts</name></name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>pts</name></name> <operator>=</operator> <name>AV_NOPTS_VALUE</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_filter_frame</name><argument_list>(<argument><expr><name>outlink</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>eof</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>cur_pts</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>second</name><operator>-&gt;</operator><name>pts</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>second</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>second</name>:</label>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>deint</name></name> <operator>&amp;&amp;</operator> <name><name>src</name><operator>-&gt;</operator><name>interlaced_frame</name></name> <operator>&amp;&amp;</operator>

<operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>is_disabled</name></name><operator>)</operator> <operator>||</operator>

<operator>(</operator><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>deint</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>is_disabled</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>second</name></name> <operator>=</operator> <name>src</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>deint</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>src</name><operator>-&gt;</operator><name>interlaced_frame</name></name><operator>)</operator> <operator>||</operator> <name><name>ctx</name><operator>-&gt;</operator><name>is_disabled</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><call><name>av_frame_clone</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>dst</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>second</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>field</name></name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>field</name></name> <operator>==</operator> <operator>-</operator><literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>second</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>deint</name></name> <operator>&amp;&amp;</operator> <name><name>src</name><operator>-&gt;</operator><name>interlaced_frame</name></name><operator>)</operator> <operator>||</operator>

<operator>(</operator><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>deint</name></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>second</name></name> <operator>=</operator> <name>src</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>dst</name><operator>-&gt;</operator><name>pts</name></name> <operator>!=</operator> <name>AV_NOPTS_VALUE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>pts</name></name> <operator>*=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><call><name>ff_filter_frame</name><argument_list>(<argument><expr><name>outlink</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>src</name></name> <operator>=</operator> <name>src</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>get_frame</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>dst</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>src</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>second</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>src</name><operator>-&gt;</operator><name>pts</name></name> <operator>!=</operator> <name>AV_NOPTS_VALUE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>dst</name><operator>-&gt;</operator><name>pts</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>pts</name></name> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>field</name></name> <operator>&lt;=</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>field</name></name> <operator>&gt;</operator> <operator>-</operator><literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>src</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>ff_filter_frame</name><argument_list>(<argument><expr><name>outlink</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>dst</name></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>request_frame</name><parameter_list>(<parameter><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>link</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>link</name><operator>-&gt;</operator><name>src</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>NNEDIContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>eof</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_EOF</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_request_frame</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>inputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>AVERROR_EOF</name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>second</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>next</name> <init>= <expr><call><name>av_frame_clone</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>second</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>next</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>next</name><operator>-&gt;</operator><name>pts</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>second</name><operator>-&gt;</operator><name>pts</name></name> <operator>*</operator> <literal type="number">2</literal> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>cur_pts</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>eof</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>filter_frame</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>inputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>init</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>NNEDIContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>weights_file</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>expected_size</name> <init>= <expr><literal type="number">13574928</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>weights_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>bdata</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>bytes_read</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name><name>xdia_table</name><index>[<expr><name>NUM_NSIZE</name></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">8</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">32</literal></expr>, <expr><literal type="number">48</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">32</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name><name>ydia_table</name><index>[<expr><name>NUM_NSIZE</name></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">6</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name><name>nns_table</name><index>[<expr><name>NUM_NNS</name></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">16</literal></expr>, <expr><literal type="number">32</literal></expr>, <expr><literal type="number">64</literal></expr>, <expr><literal type="number">128</literal></expr>, <expr><literal type="number">256</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>dims0</name> <init>= <expr><literal type="number">49</literal> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">5</literal> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">9</literal> <operator>*</operator> <literal type="number">4</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>dims0new</name> <init>= <expr><literal type="number">4</literal> <operator>*</operator> <literal type="number">65</literal> <operator>+</operator> <literal type="number">4</literal> <operator>*</operator> <literal type="number">5</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>dims1</name> <init>= <expr><name><name>nns_table</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>nnsparam</name></name></expr>]</index></name> <operator>*</operator> <literal type="number">2</literal> <operator>*</operator> <operator>(</operator><name><name>xdia_table</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>nsize</name></name></expr>]</index></name> <operator>*</operator> <name><name>ydia_table</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>nsize</name></name></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>dims1tsize</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>dims1offset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>

<expr_stmt><expr><name>weights_file</name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>weights_file</name></name></expr></argument>, <argument><expr><literal type="string">"rb"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>weights_file</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"No weights file provided, aborting!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>fseek</name><argument_list>(<argument><expr><name>weights_file</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>SEEK_END</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Couldn't seek to the end of weights file.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>weights_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>weights_size</name> <operator>=</operator> <call><name>ftell</name><argument_list>(<argument><expr><name>weights_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>weights_size</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>weights_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Couldn't get size of weights file.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>weights_size</name> <operator>!=</operator> <name>expected_size</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>weights_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Unexpected weights file size.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>fseek</name><argument_list>(<argument><expr><name>weights_file</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>weights_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Couldn't seek to the start of weights file.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>bdata</name> <operator>=</operator> <operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><call><name>av_malloc</name><argument_list>(<argument><expr><name>expected_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>bdata</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>weights_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>bytes_read</name> <operator>=</operator> <call><name>fread</name><argument_list>(<argument><expr><name>bdata</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>expected_size</name></expr></argument>, <argument><expr><name>weights_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>bytes_read</name> <operator>!=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name>expected_size</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>weights_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>AVERROR_INVALIDDATA</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Couldn't read weights file.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>weights_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>NUM_NNS</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>NUM_NSIZE</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <name><name>s</name><operator>-&gt;</operator><name>nsize</name></name> <operator>&amp;&amp;</operator> <name>j</name> <operator>==</operator> <name><name>s</name><operator>-&gt;</operator><name>nnsparam</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>dims1offset</name> <operator>=</operator> <name>dims1tsize</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>dims1tsize</name> <operator>+=</operator> <name><name>nns_table</name><index>[<expr><name>j</name></expr>]</index></name> <operator>*</operator> <literal type="number">2</literal> <operator>*</operator> <operator>(</operator><name><name>xdia_table</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name><name>ydia_table</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>weights0</name></name> <operator>=</operator> <call><name>av_malloc_array</name><argument_list>(<argument><expr><call><name>FFMAX</name><argument_list>(<argument><expr><name>dims0</name></expr></argument>, <argument><expr><name>dims0new</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>weights0</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>weights1</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>av_malloc_array</name><argument_list>(<argument><expr><name>dims1</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>weights1</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>pscrn</name></name> <operator>&gt;=</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>bdw</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>ws</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>wf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name><name>mean</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0.0</literal></expr>, <expr><literal type="number">0.0</literal></expr>, <expr><literal type="number">0.0</literal></expr>, <expr><literal type="number">0.0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>offt</name> <init>= <expr><call><name>av_calloc</name><argument_list>(<argument><expr><literal type="number">4</literal> <operator>*</operator> <literal type="number">64</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>offt</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <literal type="number">64</literal></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>offt</name><index>[<expr><name>j</name> <operator>*</operator> <literal type="number">64</literal> <operator>+</operator> <name>k</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>k</name> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">5</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><name>j</name> <operator>&amp;</operator> <literal type="number">3</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>k</name> <operator>&amp;</operator> <literal type="number">7</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></for></block_content></block></for>

<expr_stmt><expr><name>bdw</name> <operator>=</operator> <name>bdata</name> <operator>+</operator> <name>dims0</name> <operator>+</operator> <name>dims0new</name> <operator>*</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>pscrn</name></name> <operator>-</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>ws</name> <operator>=</operator> <operator>(</operator><name>int16_t</name> <operator>*</operator><operator>)</operator><name><name>s</name><operator>-&gt;</operator><name>weights0</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>wf</name> <operator>=</operator> <operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>ws</name><index>[<expr><literal type="number">4</literal> <operator>*</operator> <literal type="number">64</literal></expr>]</index></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>double</name></type> <name>cmean</name> <init>= <expr><literal type="number">0.0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <literal type="number">64</literal></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name>cmean</name> <operator>+=</operator> <name><name>bdw</name><index>[<expr><name><name>offt</name><index>[<expr><name>j</name> <operator>*</operator> <literal type="number">64</literal> <operator>+</operator> <name>k</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name><name>mean</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name>cmean</name> <operator>/</operator> <literal type="number">64.0</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>double</name></type> <name>scale</name></decl>, <decl><type ref="prev"/><name>mval</name> <init>= <expr><literal type="number">0.0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <literal type="number">64</literal></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name>mval</name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name>mval</name></expr></argument>, <argument><expr><call><name>FFABS</name><argument_list>(<argument><expr><operator>(</operator><name><name>bdw</name><index>[<expr><name><name>offt</name><index>[<expr><name>j</name> <operator>*</operator> <literal type="number">64</literal> <operator>+</operator> <name>k</name></expr>]</index></name></expr>]</index></name> <operator>-</operator> <name><name>mean</name><index>[<expr><name>j</name></expr>]</index></name><operator>)</operator> <operator>/</operator> <literal type="number">127.5</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>scale</name> <operator>=</operator> <literal type="number">32767.0</literal> <operator>/</operator> <name>mval</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <literal type="number">64</literal></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ws</name><index>[<expr><name><name>offt</name><index>[<expr><name>j</name> <operator>*</operator> <literal type="number">64</literal> <operator>+</operator> <name>k</name></expr>]</index></name></expr>]</index></name> <operator>=</operator> <call><name>roundds</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name><name>bdw</name><index>[<expr><name><name>offt</name><index>[<expr><name>j</name> <operator>*</operator> <literal type="number">64</literal> <operator>+</operator> <name>k</name></expr>]</index></name></expr>]</index></name> <operator>-</operator> <name><name>mean</name><index>[<expr><name>j</name></expr>]</index></name><operator>)</operator> <operator>/</operator> <literal type="number">127.5</literal><operator>)</operator> <operator>*</operator> <name>scale</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name><name>wf</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><name>mval</name> <operator>/</operator> <literal type="number">32767.0</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>wf</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name>bdw</name> <operator>+</operator> <literal type="number">4</literal> <operator>*</operator> <literal type="number">64</literal></expr></argument>, <argument><expr><operator>(</operator><name>dims0new</name> <operator>-</operator> <literal type="number">4</literal> <operator>*</operator> <literal type="number">64</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>offt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content> 

<decl_stmt><decl><type><name>double</name></type> <name><name>mean</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0.0</literal></expr>, <expr><literal type="number">0.0</literal></expr>, <expr><literal type="number">0.0</literal></expr>, <expr><literal type="number">0.0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>double</name></type> <name>cmean</name> <init>= <expr><literal type="number">0.0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <literal type="number">48</literal></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name>cmean</name> <operator>+=</operator> <name><name>bdata</name><index>[<expr><name>j</name> <operator>*</operator> <literal type="number">48</literal> <operator>+</operator> <name>k</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name><name>mean</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name>cmean</name> <operator>/</operator> <literal type="number">48.0</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>fapprox</name></name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>ws</name> <init>= <expr><operator>(</operator><name>int16_t</name> <operator>*</operator><operator>)</operator><name><name>s</name><operator>-&gt;</operator><name>weights0</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>wf</name> <init>= <expr><operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>ws</name><index>[<expr><literal type="number">4</literal> <operator>*</operator> <literal type="number">48</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>double</name></type> <name>scale</name></decl>, <decl><type ref="prev"/><name>mval</name> <init>= <expr><literal type="number">0.0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <literal type="number">48</literal></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name>mval</name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name>mval</name></expr></argument>, <argument><expr><call><name>FFABS</name><argument_list>(<argument><expr><operator>(</operator><name><name>bdata</name><index>[<expr><name>j</name> <operator>*</operator> <literal type="number">48</literal> <operator>+</operator> <name>k</name></expr>]</index></name> <operator>-</operator> <name><name>mean</name><index>[<expr><name>j</name></expr>]</index></name><operator>)</operator> <operator>/</operator> <literal type="number">127.5</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>scale</name> <operator>=</operator> <literal type="number">32767.0</literal> <operator>/</operator> <name>mval</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <literal type="number">48</literal></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ws</name><index>[<expr><name>j</name> <operator>*</operator> <literal type="number">48</literal> <operator>+</operator> <name>k</name></expr>]</index></name> <operator>=</operator> <call><name>roundds</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name><name>bdata</name><index>[<expr><name>j</name> <operator>*</operator> <literal type="number">48</literal> <operator>+</operator> <name>k</name></expr>]</index></name> <operator>-</operator> <name><name>mean</name><index>[<expr><name>j</name></expr>]</index></name><operator>)</operator> <operator>/</operator> <literal type="number">127.5</literal><operator>)</operator> <operator>*</operator> <name>scale</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name><name>wf</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><name>mval</name> <operator>/</operator> <literal type="number">32767.0</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>wf</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name>bdata</name> <operator>+</operator> <literal type="number">4</literal> <operator>*</operator> <literal type="number">48</literal></expr></argument>, <argument><expr><operator>(</operator><name>dims0</name> <operator>-</operator> <literal type="number">4</literal> <operator>*</operator> <literal type="number">48</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>double</name></type> <name>half</name> <init>= <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>half</name> <operator>/=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <literal type="number">48</literal></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>weights0</name><index>[<expr><name>j</name> <operator>*</operator> <literal type="number">48</literal> <operator>+</operator> <name>k</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><operator>(</operator><name><name>bdata</name><index>[<expr><name>j</name> <operator>*</operator> <literal type="number">48</literal> <operator>+</operator> <name>k</name></expr>]</index></name> <operator>-</operator> <name><name>mean</name><index>[<expr><name>j</name></expr>]</index></name><operator>)</operator> <operator>/</operator> <name>half</name><operator>)</operator></expr>;</expr_stmt></block_content></block></for></block_content></block></for>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>weights0</name></name> <operator>+</operator> <literal type="number">4</literal> <operator>*</operator> <literal type="number">48</literal></expr></argument>, <argument><expr><name>bdata</name> <operator>+</operator> <literal type="number">4</literal> <operator>*</operator> <literal type="number">48</literal></expr></argument>, <argument><expr><operator>(</operator><name>dims0</name> <operator>-</operator> <literal type="number">4</literal> <operator>*</operator> <literal type="number">48</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>bdataT</name> <init>= <expr><name>bdata</name> <operator>+</operator> <name>dims0</name> <operator>+</operator> <name>dims0new</name> <operator>*</operator> <literal type="number">3</literal> <operator>+</operator> <name>dims1tsize</name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>etype</name></name> <operator>+</operator> <name>dims1offset</name> <operator>+</operator> <name>i</name> <operator>*</operator> <name>dims1</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>nnst</name> <init>= <expr><name><name>nns_table</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>nnsparam</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>asize</name> <init>= <expr><name><name>xdia_table</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>nsize</name></name></expr>]</index></name> <operator>*</operator> <name><name>ydia_table</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>nsize</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>boff</name> <init>= <expr><name>nnst</name> <operator>*</operator> <literal type="number">2</literal> <operator>*</operator> <name>asize</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name> <modifier>*</modifier></type><name>mean</name> <init>= <expr><operator>(</operator><name>double</name> <operator>*</operator><operator>)</operator><call><name>av_calloc</name><argument_list>(<argument><expr><name>asize</name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <name>nnst</name> <operator>*</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>double</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>mean</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>nnst</name> <operator>*</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>double</name></type> <name>cmean</name> <init>= <expr><literal type="number">0.0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>asize</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name>cmean</name> <operator>+=</operator> <name><name>bdataT</name><index>[<expr><name>j</name> <operator>*</operator> <name>asize</name> <operator>+</operator> <name>k</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name><name>mean</name><index>[<expr><name>asize</name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <name>j</name></expr>]</index></name> <operator>=</operator> <name>cmean</name> <operator>/</operator> <operator>(</operator><name>double</name><operator>)</operator><name>asize</name></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>nnst</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>asize</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>mean</name><index>[<expr><name>k</name></expr>]</index></name> <operator>+=</operator> <name><name>bdataT</name><index>[<expr><name>j</name> <operator>*</operator> <name>asize</name> <operator>+</operator> <name>k</name></expr>]</index></name> <operator>-</operator> <name><name>mean</name><index>[<expr><name>asize</name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <name>j</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name><name>mean</name><index>[<expr><name>asize</name></expr>]</index></name> <operator>+=</operator> <name><name>bdataT</name><index>[<expr><name>boff</name> <operator>+</operator> <name>j</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>asize</name> <operator>+</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>mean</name><index>[<expr><name>j</name></expr>]</index></name> <operator>/=</operator> <operator>(</operator><name>double</name><operator>)</operator><operator>(</operator><name>nnst</name><operator>)</operator></expr>;</expr_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>fapprox</name></name> <operator>&amp;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content> 

<decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>ws</name> <init>= <expr><operator>(</operator><name>int16_t</name> <operator>*</operator><operator>)</operator><name><name>s</name><operator>-&gt;</operator><name>weights1</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>wf</name> <init>= <expr><operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>ws</name><index>[<expr><name>nnst</name> <operator>*</operator> <literal type="number">2</literal> <operator>*</operator> <name>asize</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>nnst</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content> 

<decl_stmt><decl><type><name>double</name></type> <name>scale</name></decl>, <decl><type ref="prev"/><name>mval</name> <init>= <expr><literal type="number">0.0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>asize</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name>mval</name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name>mval</name></expr></argument>, <argument><expr><call><name>FFABS</name><argument_list>(<argument><expr><name><name>bdataT</name><index>[<expr><name>j</name> <operator>*</operator> <name>asize</name> <operator>+</operator> <name>k</name></expr>]</index></name> <operator>-</operator> <name><name>mean</name><index>[<expr><name>asize</name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <name>j</name></expr>]</index></name> <operator>-</operator> <name><name>mean</name><index>[<expr><name>k</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>scale</name> <operator>=</operator> <literal type="number">32767.0</literal> <operator>/</operator> <name>mval</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>asize</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ws</name><index>[<expr><name>j</name> <operator>*</operator> <name>asize</name> <operator>+</operator> <name>k</name></expr>]</index></name> <operator>=</operator> <call><name>roundds</name><argument_list>(<argument><expr><operator>(</operator><name><name>bdataT</name><index>[<expr><name>j</name> <operator>*</operator> <name>asize</name> <operator>+</operator> <name>k</name></expr>]</index></name> <operator>-</operator> <name><name>mean</name><index>[<expr><name>asize</name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <name>j</name></expr>]</index></name> <operator>-</operator> <name><name>mean</name><index>[<expr><name>k</name></expr>]</index></name><operator>)</operator> <operator>*</operator> <name>scale</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name><name>wf</name><index>[<expr><operator>(</operator><name>j</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>*</operator> <literal type="number">8</literal> <operator>+</operator> <operator>(</operator><name>j</name> <operator>&amp;</operator> <literal type="number">3</literal><operator>)</operator></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><name>mval</name> <operator>/</operator> <literal type="number">32767.0</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>wf</name><index>[<expr><operator>(</operator><name>j</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>*</operator> <literal type="number">8</literal> <operator>+</operator> <operator>(</operator><name>j</name> <operator>&amp;</operator> <literal type="number">3</literal><operator>)</operator> <operator>+</operator> <literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><name><name>bdataT</name><index>[<expr><name>boff</name> <operator>+</operator> <name>j</name></expr>]</index></name> <operator>-</operator> <name><name>mean</name><index>[<expr><name>asize</name></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <name>nnst</name></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>nnst</name> <operator>*</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content> 

<decl_stmt><decl><type><name>double</name></type> <name>scale</name></decl>, <decl><type ref="prev"/><name>mval</name> <init>= <expr><literal type="number">0.0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>asize</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name>mval</name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name>mval</name></expr></argument>, <argument><expr><call><name>FFABS</name><argument_list>(<argument><expr><name><name>bdataT</name><index>[<expr><name>j</name> <operator>*</operator> <name>asize</name> <operator>+</operator> <name>k</name></expr>]</index></name> <operator>-</operator> <name><name>mean</name><index>[<expr><name>asize</name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>scale</name> <operator>=</operator> <literal type="number">32767.0</literal> <operator>/</operator> <name>mval</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>asize</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ws</name><index>[<expr><name>j</name> <operator>*</operator> <name>asize</name> <operator>+</operator> <name>k</name></expr>]</index></name> <operator>=</operator> <call><name>roundds</name><argument_list>(<argument><expr><operator>(</operator><name><name>bdataT</name><index>[<expr><name>j</name> <operator>*</operator> <name>asize</name> <operator>+</operator> <name>k</name></expr>]</index></name> <operator>-</operator> <name><name>mean</name><index>[<expr><name>asize</name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <name>j</name></expr>]</index></name><operator>)</operator> <operator>*</operator> <name>scale</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name><name>wf</name><index>[<expr><operator>(</operator><name>j</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>*</operator> <literal type="number">8</literal> <operator>+</operator> <operator>(</operator><name>j</name> <operator>&amp;</operator> <literal type="number">3</literal><operator>)</operator></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><name>mval</name> <operator>/</operator> <literal type="number">32767.0</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>wf</name><index>[<expr><operator>(</operator><name>j</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>*</operator> <literal type="number">8</literal> <operator>+</operator> <operator>(</operator><name>j</name> <operator>&amp;</operator> <literal type="number">3</literal><operator>)</operator> <operator>+</operator> <literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name><name>bdataT</name><index>[<expr><name>boff</name> <operator>+</operator> <name>j</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if> <else>else <block>{<block_content> 

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>nnst</name> <operator>*</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>asize</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>double</name></type> <name>q</name> <init>= <expr><ternary><condition><expr><name>j</name> <operator>&lt;</operator> <name>nnst</name></expr> ?</condition><then> <expr><name><name>mean</name><index>[<expr><name>k</name></expr>]</index></name></expr> </then><else>: <expr><literal type="number">0.0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>weights1</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name> <operator>*</operator> <name>asize</name> <operator>+</operator> <name>k</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><name><name>bdataT</name><index>[<expr><name>j</name> <operator>*</operator> <name>asize</name> <operator>+</operator> <name>k</name></expr>]</index></name> <operator>-</operator> <name><name>mean</name><index>[<expr><name>asize</name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <name>j</name></expr>]</index></name> <operator>-</operator> <name>q</name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>weights1</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>boff</name> <operator>+</operator> <name>j</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><name><name>bdataT</name><index>[<expr><name>boff</name> <operator>+</operator> <name>j</name></expr>]</index></name> <operator>-</operator> <operator>(</operator><ternary><condition><expr><name>j</name> <operator>&lt;</operator> <name>nnst</name></expr> ?</condition><then> <expr><name><name>mean</name><index>[<expr><name>asize</name></expr>]</index></name></expr> </then><else>: <expr><literal type="number">0.0</literal></expr></else></ternary><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>mean</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>nns</name></name> <operator>=</operator> <name><name>nns_table</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>nnsparam</name></name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>xdia</name></name> <operator>=</operator> <name><name>xdia_table</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>nsize</name></name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>ydia</name></name> <operator>=</operator> <name><name>ydia_table</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>nsize</name></name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>asize</name></name> <operator>=</operator> <name><name>xdia_table</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>nsize</name></name></expr>]</index></name> <operator>*</operator> <name><name>ydia_table</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>nsize</name></name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>max_value</name></name> <operator>=</operator> <literal type="number">65535</literal> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>select_functions</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>fdsp</name></name> <operator>=</operator> <call><name>avpriv_float_dsp_alloc</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>fdsp</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<label><name>fail</name>:</label>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>bdata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>void</name></type> <name>uninit</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>NNEDIContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>weights0</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>weights1</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>nb_planes</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>frame_data</name><operator>.</operator><name>paddedp</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>frame_data</name><operator>.</operator><name>lcount</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>frame_data</name><operator>.</operator><name>input</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>frame_data</name><operator>.</operator><name>temp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>fdsp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>second</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVFilterPad</name></type> <name><name>inputs</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"default"</literal></expr>,

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,

<expr><operator>.</operator><name>filter_frame</name> <operator>=</operator> <name>filter_frame</name></expr>,

<expr><operator>.</operator><name>config_props</name> <operator>=</operator> <name>config_input</name></expr>,

}</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVFilterPad</name></type> <name><name>outputs</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"default"</literal></expr>,

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,

<expr><operator>.</operator><name>config_props</name> <operator>=</operator> <name>config_output</name></expr>,

<expr><operator>.</operator><name>request_frame</name> <operator>=</operator> <name>request_frame</name></expr>,

}</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFilter</name></type> <name>ff_vf_nnedi</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"nnedi"</literal></expr>,

<expr><operator>.</operator><name>description</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"Apply neural network edge directed interpolation intra-only deinterlacer."</literal></expr></argument>)</argument_list></call></expr>,

<expr><operator>.</operator><name>priv_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>NNEDIContext</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><operator>.</operator><name>priv_class</name> <operator>=</operator> <operator>&amp;</operator><name>nnedi_class</name></expr>,

<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>init</name></expr>,

<expr><operator>.</operator><name>uninit</name> <operator>=</operator> <name>uninit</name></expr>,

<expr><operator>.</operator><name>query_formats</name> <operator>=</operator> <name>query_formats</name></expr>,

<expr><operator>.</operator><name>inputs</name> <operator>=</operator> <name>inputs</name></expr>,

<expr><operator>.</operator><name>outputs</name> <operator>=</operator> <name>outputs</name></expr>,

<expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>AVFILTER_FLAG_SUPPORT_TIMELINE_INTERNAL</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

</unit>
