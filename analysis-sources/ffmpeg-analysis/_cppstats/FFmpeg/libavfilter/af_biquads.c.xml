<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavfilter\af_biquads.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avassert.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/ffmath.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/opt.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"audio.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avfilter.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>

<enum>enum <name>FilterType</name> <block>{

<decl><name>biquad</name></decl>,

<decl><name>equalizer</name></decl>,

<decl><name>bass</name></decl>,

<decl><name>treble</name></decl>,

<decl><name>bandpass</name></decl>,

<decl><name>bandreject</name></decl>,

<decl><name>allpass</name></decl>,

<decl><name>highpass</name></decl>,

<decl><name>lowpass</name></decl>,

<decl><name>lowshelf</name></decl>,

<decl><name>highshelf</name></decl>,

}</block>;</enum>

<enum>enum <name>WidthType</name> <block>{

<decl><name>NONE</name></decl>,

<decl><name>HERTZ</name></decl>,

<decl><name>OCTAVE</name></decl>,

<decl><name>QFACTOR</name></decl>,

<decl><name>SLOPE</name></decl>,

<decl><name>KHERTZ</name></decl>,

<decl><name>NB_WTYPE</name></decl>,

}</block>;</enum>

<typedef>typedef <type><struct>struct <name>ChanCache</name> <block>{

<decl_stmt><decl><type><name>double</name></type> <name>i1</name></decl>, <name>i2</name>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>o1</name></decl>, <name>o2</name>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>clippings</name></decl>;</decl_stmt>

}</block></struct></type> <name>ChanCache</name>;</typedef>

<typedef>typedef <type><struct>struct <name>BiquadsContext</name> <block>{

<decl_stmt><decl><type><specifier>const</specifier> <name>AVClass</name> <modifier>*</modifier></type><name>class</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>FilterType</name></name></type> <name>filter_type</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>width_type</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>poles</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>csg</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>gain</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>frequency</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>width</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>mix</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>channels</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>normalize</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>a0</name></decl>, <name>a1</name>, <name>a2</name>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>b0</name></decl>, <name>b1</name>, <name>b2</name>;</decl_stmt>

<decl_stmt><decl><type><name>ChanCache</name> <modifier>*</modifier></type><name>cache</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>block_align</name></decl>;</decl_stmt>

<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>filter</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>BiquadsContext</name></name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>ibuf</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>obuf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>,

<parameter><decl><type><name>double</name> <modifier>*</modifier></type><name>i1</name></decl></parameter>, <parameter><decl><type><name>double</name> <modifier>*</modifier></type><name>i2</name></decl></parameter>, <parameter><decl><type><name>double</name> <modifier>*</modifier></type><name>o1</name></decl></parameter>, <parameter><decl><type><name>double</name> <modifier>*</modifier></type><name>o2</name></decl></parameter>,

<parameter><decl><type><name>double</name></type> <name>b0</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>b1</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>b2</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>a1</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>a2</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>clippings</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>disabled</name></decl></parameter>)</parameter_list>;</function_decl>

}</block></struct></type> <name>BiquadsContext</name>;</typedef>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>init</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>BiquadsContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>filter_type</name></name> <operator>!=</operator> <name>biquad</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>frequency</name></name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>width</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid frequency %f and/or width %f &lt;= 0\n"</literal></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>frequency</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>width</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>query_formats</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVFilterFormats</name> <modifier>*</modifier></type><name>formats</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFilterChannelLayouts</name> <modifier>*</modifier></type><name>layouts</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>enum</name> <name>AVSampleFormat</name></name></type> <name><name>sample_fmts</name><index>[]</index></name> <init>= <expr><block>{

<expr><name>AV_SAMPLE_FMT_S16P</name></expr>,

<expr><name>AV_SAMPLE_FMT_S32P</name></expr>,

<expr><name>AV_SAMPLE_FMT_FLTP</name></expr>,

<expr><name>AV_SAMPLE_FMT_DBLP</name></expr>,

<expr><name>AV_SAMPLE_FMT_NONE</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name>layouts</name> <operator>=</operator> <call><name>ff_all_channel_counts</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>layouts</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_set_common_channel_layouts</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>layouts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>formats</name> <operator>=</operator> <call><name>ff_make_format_list</name><argument_list>(<argument><expr><name>sample_fmts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>formats</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_set_common_formats</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>formats</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>formats</name> <operator>=</operator> <call><name>ff_all_samplerates</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>formats</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>ff_set_common_samplerates</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>formats</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BIQUAD_FILTER</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>type</name></type></parameter>, <parameter><type><name>min</name></type></parameter>, <parameter><type><name>max</name></type></parameter>, <parameter><type><name>need_clipping</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static void biquad_##name (BiquadsContext *s, const void *input, void *output, int len, double *in1, double *in2, double *out1, double *out2, double b0, double b1, double b2, double a1, double a2, int *clippings, int disabled) { const type *ibuf = input; type *obuf = output; double i1 = *in1; double i2 = *in2; double o1 = *out1; double o2 = *out2; double wet = s-&gt;mix; double dry = 1. - wet; double out; int i; a1 = -a1; a2 = -a2; for (i = 0; i+1 &lt; len; i++) { o2 = i2 * b2 + i1 * b1 + ibuf[i] * b0 + o2 * a2 + o1 * a1; i2 = ibuf[i]; out = o2 * wet + i2 * dry; if (disabled) { obuf[i] = i2; } else if (need_clipping &amp;&amp; out &lt; min) { (*clippings)++; obuf[i] = min; } else if (need_clipping &amp;&amp; out &gt; max) { (*clippings)++; obuf[i] = max; } else { obuf[i] = out; } i++; o1 = i1 * b2 + i2 * b1 + ibuf[i] * b0 + o1 * a2 + o2 * a1; i1 = ibuf[i]; out = o1 * wet + i1 * dry; if (disabled) { obuf[i] = i1; } else if (need_clipping &amp;&amp; out &lt; min) { (*clippings)++; obuf[i] = min; } else if (need_clipping &amp;&amp; out &gt; max) { (*clippings)++; obuf[i] = max; } else { obuf[i] = out; } } if (i &lt; len) { double o0 = ibuf[i] * b0 + i1 * b1 + i2 * b2 + o1 * a1 + o2 * a2; i2 = i1; i1 = ibuf[i]; o2 = o1; o1 = o0; out = o0 * wet + i1 * dry; if (disabled) { obuf[i] = i1; } else if (need_clipping &amp;&amp; out &lt; min) { (*clippings)++; obuf[i] = min; } else if (need_clipping &amp;&amp; out &gt; max) { (*clippings)++; obuf[i] = max; } else { obuf[i] = out; } } *in1 = i1; *in2 = i2; *out1 = o1; *out2 = o2; }</cpp:value></cpp:define>

<macro><name>BIQUAD_FILTER</name><argument_list>(<argument>s16</argument>, <argument>int16_t</argument>, <argument>INT16_MIN</argument>, <argument>INT16_MAX</argument>, <argument><literal type="number">1</literal></argument>)</argument_list></macro>

<macro><name>BIQUAD_FILTER</name><argument_list>(<argument>s32</argument>, <argument>int32_t</argument>, <argument>INT32_MIN</argument>, <argument>INT32_MAX</argument>, <argument><literal type="number">1</literal></argument>)</argument_list></macro>

<macro><name>BIQUAD_FILTER</name><argument_list>(<argument>flt</argument>, <argument>float</argument>, <argument>-<literal type="number">1.</literal></argument>, <argument><literal type="number">1.</literal></argument>, <argument><literal type="number">0</literal></argument>)</argument_list></macro>

<macro><name>BIQUAD_FILTER</name><argument_list>(<argument>dbl</argument>, <argument>double</argument>, <argument>-<literal type="number">1.</literal></argument>, <argument><literal type="number">1.</literal></argument>, <argument><literal type="number">0</literal></argument>)</argument_list></macro>

<function><type><specifier>static</specifier> <name>int</name></type> <name>config_filter</name><parameter_list>(<parameter><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>outlink</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>reset</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>outlink</name><operator>-&gt;</operator><name>src</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>BiquadsContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>inlink</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>inputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>A</name> <init>= <expr><call><name>ff_exp10</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>gain</name></name> <operator>/</operator> <literal type="number">40</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>w0</name> <init>= <expr><literal type="number">2</literal> <operator>*</operator> <name>M_PI</name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>frequency</name></name> <operator>/</operator> <name><name>inlink</name><operator>-&gt;</operator><name>sample_rate</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>alpha</name></decl>, <decl><type ref="prev"/><name>beta</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>w0</name> <operator>&gt;</operator> <name>M_PI</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"Invalid frequency %f. Frequency must be less than half the sample-rate %d.\n"</literal></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>frequency</name></name></expr></argument>, <argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>sample_rate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>width_type</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>NONE</name></expr>:</case>

<expr_stmt><expr><name>alpha</name> <operator>=</operator> <literal type="number">0.0</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>HERTZ</name></expr>:</case>

<expr_stmt><expr><name>alpha</name> <operator>=</operator> <call><name>sin</name><argument_list>(<argument><expr><name>w0</name></expr></argument>)</argument_list></call> <operator>/</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>frequency</name></name> <operator>/</operator> <name><name>s</name><operator>-&gt;</operator><name>width</name></name><operator>)</operator></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>KHERTZ</name></expr>:</case>

<expr_stmt><expr><name>alpha</name> <operator>=</operator> <call><name>sin</name><argument_list>(<argument><expr><name>w0</name></expr></argument>)</argument_list></call> <operator>/</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>frequency</name></name> <operator>/</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>width</name></name> <operator>*</operator> <literal type="number">1000</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>OCTAVE</name></expr>:</case>

<expr_stmt><expr><name>alpha</name> <operator>=</operator> <call><name>sin</name><argument_list>(<argument><expr><name>w0</name></expr></argument>)</argument_list></call> <operator>*</operator> <call><name>sinh</name><argument_list>(<argument><expr><call><name>log</name><argument_list>(<argument><expr><literal type="number">2.</literal></expr></argument>)</argument_list></call> <operator>/</operator> <literal type="number">2</literal> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>width</name></name> <operator>*</operator> <name>w0</name> <operator>/</operator> <call><name>sin</name><argument_list>(<argument><expr><name>w0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>QFACTOR</name></expr>:</case>

<expr_stmt><expr><name>alpha</name> <operator>=</operator> <call><name>sin</name><argument_list>(<argument><expr><name>w0</name></expr></argument>)</argument_list></call> <operator>/</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>width</name></name><operator>)</operator></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>SLOPE</name></expr>:</case>

<expr_stmt><expr><name>alpha</name> <operator>=</operator> <call><name>sin</name><argument_list>(<argument><expr><name>w0</name></expr></argument>)</argument_list></call> <operator>/</operator> <literal type="number">2</literal> <operator>*</operator> <call><name>sqrt</name><argument_list>(<argument><expr><operator>(</operator><name>A</name> <operator>+</operator> <literal type="number">1</literal> <operator>/</operator> <name>A</name><operator>)</operator> <operator>*</operator> <operator>(</operator><literal type="number">1</literal> <operator>/</operator> <name><name>s</name><operator>-&gt;</operator><name>width</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></switch>

<expr_stmt><expr><name>beta</name> <operator>=</operator> <literal type="number">2</literal> <operator>*</operator> <call><name>sqrt</name><argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>filter_type</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>biquad</name></expr>:</case>

<break>break;</break>

<case>case <expr><name>equalizer</name></expr>:</case>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>a0</name></name> <operator>=</operator> <literal type="number">1</literal> <operator>+</operator> <name>alpha</name> <operator>/</operator> <name>A</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>a1</name></name> <operator>=</operator> <operator>-</operator><literal type="number">2</literal> <operator>*</operator> <call><name>cos</name><argument_list>(<argument><expr><name>w0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>a2</name></name> <operator>=</operator> <literal type="number">1</literal> <operator>-</operator> <name>alpha</name> <operator>/</operator> <name>A</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>b0</name></name> <operator>=</operator> <literal type="number">1</literal> <operator>+</operator> <name>alpha</name> <operator>*</operator> <name>A</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>b1</name></name> <operator>=</operator> <operator>-</operator><literal type="number">2</literal> <operator>*</operator> <call><name>cos</name><argument_list>(<argument><expr><name>w0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>b2</name></name> <operator>=</operator> <literal type="number">1</literal> <operator>-</operator> <name>alpha</name> <operator>*</operator> <name>A</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>bass</name></expr>:</case>

<expr_stmt><expr><name>beta</name> <operator>=</operator> <call><name>sqrt</name><argument_list>(<argument><expr><operator>(</operator><name>A</name> <operator>*</operator> <name>A</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>-</operator> <operator>(</operator><name>A</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <operator>(</operator><name>A</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<case>case <expr><name>lowshelf</name></expr>:</case>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>a0</name></name> <operator>=</operator> <operator>(</operator><name>A</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>A</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <call><name>cos</name><argument_list>(<argument><expr><name>w0</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>beta</name> <operator>*</operator> <name>alpha</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>a1</name></name> <operator>=</operator> <operator>-</operator><literal type="number">2</literal> <operator>*</operator> <operator>(</operator><operator>(</operator><name>A</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>A</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <call><name>cos</name><argument_list>(<argument><expr><name>w0</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>a2</name></name> <operator>=</operator> <operator>(</operator><name>A</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>A</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <call><name>cos</name><argument_list>(<argument><expr><name>w0</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>beta</name> <operator>*</operator> <name>alpha</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>b0</name></name> <operator>=</operator> <name>A</name> <operator>*</operator> <operator>(</operator><operator>(</operator><name>A</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>-</operator> <operator>(</operator><name>A</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <call><name>cos</name><argument_list>(<argument><expr><name>w0</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>beta</name> <operator>*</operator> <name>alpha</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>b1</name></name> <operator>=</operator> <literal type="number">2</literal> <operator>*</operator> <name>A</name> <operator>*</operator> <operator>(</operator><operator>(</operator><name>A</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>-</operator> <operator>(</operator><name>A</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <call><name>cos</name><argument_list>(<argument><expr><name>w0</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>b2</name></name> <operator>=</operator> <name>A</name> <operator>*</operator> <operator>(</operator><operator>(</operator><name>A</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>-</operator> <operator>(</operator><name>A</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <call><name>cos</name><argument_list>(<argument><expr><name>w0</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>beta</name> <operator>*</operator> <name>alpha</name><operator>)</operator></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>treble</name></expr>:</case>

<expr_stmt><expr><name>beta</name> <operator>=</operator> <call><name>sqrt</name><argument_list>(<argument><expr><operator>(</operator><name>A</name> <operator>*</operator> <name>A</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>-</operator> <operator>(</operator><name>A</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <operator>(</operator><name>A</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<case>case <expr><name>highshelf</name></expr>:</case>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>a0</name></name> <operator>=</operator> <operator>(</operator><name>A</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>-</operator> <operator>(</operator><name>A</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <call><name>cos</name><argument_list>(<argument><expr><name>w0</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>beta</name> <operator>*</operator> <name>alpha</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>a1</name></name> <operator>=</operator> <literal type="number">2</literal> <operator>*</operator> <operator>(</operator><operator>(</operator><name>A</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>-</operator> <operator>(</operator><name>A</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <call><name>cos</name><argument_list>(<argument><expr><name>w0</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>a2</name></name> <operator>=</operator> <operator>(</operator><name>A</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>-</operator> <operator>(</operator><name>A</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <call><name>cos</name><argument_list>(<argument><expr><name>w0</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>beta</name> <operator>*</operator> <name>alpha</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>b0</name></name> <operator>=</operator> <name>A</name> <operator>*</operator> <operator>(</operator><operator>(</operator><name>A</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>A</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <call><name>cos</name><argument_list>(<argument><expr><name>w0</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>beta</name> <operator>*</operator> <name>alpha</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>b1</name></name> <operator>=</operator><operator>-</operator><literal type="number">2</literal> <operator>*</operator> <name>A</name> <operator>*</operator> <operator>(</operator><operator>(</operator><name>A</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>A</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <call><name>cos</name><argument_list>(<argument><expr><name>w0</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>b2</name></name> <operator>=</operator> <name>A</name> <operator>*</operator> <operator>(</operator><operator>(</operator><name>A</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>A</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <call><name>cos</name><argument_list>(<argument><expr><name>w0</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>beta</name> <operator>*</operator> <name>alpha</name><operator>)</operator></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>bandpass</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>csg</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>a0</name></name> <operator>=</operator> <literal type="number">1</literal> <operator>+</operator> <name>alpha</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>a1</name></name> <operator>=</operator> <operator>-</operator><literal type="number">2</literal> <operator>*</operator> <call><name>cos</name><argument_list>(<argument><expr><name>w0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>a2</name></name> <operator>=</operator> <literal type="number">1</literal> <operator>-</operator> <name>alpha</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>b0</name></name> <operator>=</operator> <call><name>sin</name><argument_list>(<argument><expr><name>w0</name></expr></argument>)</argument_list></call> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>b1</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>b2</name></name> <operator>=</operator> <operator>-</operator><call><name>sin</name><argument_list>(<argument><expr><name>w0</name></expr></argument>)</argument_list></call> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>a0</name></name> <operator>=</operator> <literal type="number">1</literal> <operator>+</operator> <name>alpha</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>a1</name></name> <operator>=</operator> <operator>-</operator><literal type="number">2</literal> <operator>*</operator> <call><name>cos</name><argument_list>(<argument><expr><name>w0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>a2</name></name> <operator>=</operator> <literal type="number">1</literal> <operator>-</operator> <name>alpha</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>b0</name></name> <operator>=</operator> <name>alpha</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>b1</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>b2</name></name> <operator>=</operator> <operator>-</operator><name>alpha</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<case>case <expr><name>bandreject</name></expr>:</case>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>a0</name></name> <operator>=</operator> <literal type="number">1</literal> <operator>+</operator> <name>alpha</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>a1</name></name> <operator>=</operator> <operator>-</operator><literal type="number">2</literal> <operator>*</operator> <call><name>cos</name><argument_list>(<argument><expr><name>w0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>a2</name></name> <operator>=</operator> <literal type="number">1</literal> <operator>-</operator> <name>alpha</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>b0</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>b1</name></name> <operator>=</operator> <operator>-</operator><literal type="number">2</literal> <operator>*</operator> <call><name>cos</name><argument_list>(<argument><expr><name>w0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>b2</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>lowpass</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>poles</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>a0</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>a1</name></name> <operator>=</operator> <operator>-</operator><call><name>exp</name><argument_list>(<argument><expr><operator>-</operator><name>w0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>a2</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>b0</name></name> <operator>=</operator> <literal type="number">1</literal> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>a1</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>b1</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>b2</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>a0</name></name> <operator>=</operator> <literal type="number">1</literal> <operator>+</operator> <name>alpha</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>a1</name></name> <operator>=</operator> <operator>-</operator><literal type="number">2</literal> <operator>*</operator> <call><name>cos</name><argument_list>(<argument><expr><name>w0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>a2</name></name> <operator>=</operator> <literal type="number">1</literal> <operator>-</operator> <name>alpha</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>b0</name></name> <operator>=</operator> <operator>(</operator><literal type="number">1</literal> <operator>-</operator> <call><name>cos</name><argument_list>(<argument><expr><name>w0</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>b1</name></name> <operator>=</operator> <literal type="number">1</literal> <operator>-</operator> <call><name>cos</name><argument_list>(<argument><expr><name>w0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>b2</name></name> <operator>=</operator> <operator>(</operator><literal type="number">1</literal> <operator>-</operator> <call><name>cos</name><argument_list>(<argument><expr><name>w0</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<case>case <expr><name>highpass</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>poles</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>a0</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>a1</name></name> <operator>=</operator> <operator>-</operator><call><name>exp</name><argument_list>(<argument><expr><operator>-</operator><name>w0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>a2</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>b0</name></name> <operator>=</operator> <operator>(</operator><literal type="number">1</literal> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>a1</name></name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>b1</name></name> <operator>=</operator> <operator>-</operator><name><name>s</name><operator>-&gt;</operator><name>b0</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>b2</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>a0</name></name> <operator>=</operator> <literal type="number">1</literal> <operator>+</operator> <name>alpha</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>a1</name></name> <operator>=</operator> <operator>-</operator><literal type="number">2</literal> <operator>*</operator> <call><name>cos</name><argument_list>(<argument><expr><name>w0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>a2</name></name> <operator>=</operator> <literal type="number">1</literal> <operator>-</operator> <name>alpha</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>b0</name></name> <operator>=</operator> <operator>(</operator><literal type="number">1</literal> <operator>+</operator> <call><name>cos</name><argument_list>(<argument><expr><name>w0</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>b1</name></name> <operator>=</operator> <operator>-</operator><operator>(</operator><literal type="number">1</literal> <operator>+</operator> <call><name>cos</name><argument_list>(<argument><expr><name>w0</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>b2</name></name> <operator>=</operator> <operator>(</operator><literal type="number">1</literal> <operator>+</operator> <call><name>cos</name><argument_list>(<argument><expr><name>w0</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<case>case <expr><name>allpass</name></expr>:</case>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>a0</name></name> <operator>=</operator> <literal type="number">1</literal> <operator>+</operator> <name>alpha</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>a1</name></name> <operator>=</operator> <operator>-</operator><literal type="number">2</literal> <operator>*</operator> <call><name>cos</name><argument_list>(<argument><expr><name>w0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>a2</name></name> <operator>=</operator> <literal type="number">1</literal> <operator>-</operator> <name>alpha</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>b0</name></name> <operator>=</operator> <literal type="number">1</literal> <operator>-</operator> <name>alpha</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>b1</name></name> <operator>=</operator> <operator>-</operator><literal type="number">2</literal> <operator>*</operator> <call><name>cos</name><argument_list>(<argument><expr><name>w0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>b2</name></name> <operator>=</operator> <literal type="number">1</literal> <operator>+</operator> <name>alpha</name></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></switch>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_VERBOSE</name></expr></argument>, <argument><expr><literal type="string">"a=%f %f %f:b=%f %f %f\n"</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>a0</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>a1</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>a2</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>b0</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>b1</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>b2</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>a1</name></name> <operator>/=</operator> <name><name>s</name><operator>-&gt;</operator><name>a0</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>a2</name></name> <operator>/=</operator> <name><name>s</name><operator>-&gt;</operator><name>a0</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>b0</name></name> <operator>/=</operator> <name><name>s</name><operator>-&gt;</operator><name>a0</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>b1</name></name> <operator>/=</operator> <name><name>s</name><operator>-&gt;</operator><name>a0</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>b2</name></name> <operator>/=</operator> <name><name>s</name><operator>-&gt;</operator><name>a0</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>a0</name></name> <operator>/=</operator> <name><name>s</name><operator>-&gt;</operator><name>a0</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>normalize</name></name> <operator>&amp;&amp;</operator> <call><name>fabs</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>b0</name></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>b1</name></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>b2</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">1e-6</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>double</name></type> <name>factor</name> <init>= <expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>a0</name></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>a1</name></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>a2</name></name><operator>)</operator> <operator>/</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>b0</name></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>b1</name></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>b2</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>b0</name></name> <operator>*=</operator> <name>factor</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>b1</name></name> <operator>*=</operator> <name>factor</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>b2</name></name> <operator>*=</operator> <name>factor</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>cache</name></name> <operator>=</operator> <call><name>av_realloc_f</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>cache</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ChanCache</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>channels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>cache</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>reset</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>cache</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ChanCache</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>inlink</name><operator>-&gt;</operator><name>channels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<switch>switch <condition>(<expr><name><name>inlink</name><operator>-&gt;</operator><name>format</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>AV_SAMPLE_FMT_S16P</name></expr>:</case> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>filter</name></name> <operator>=</operator> <name>biquad_s16</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>AV_SAMPLE_FMT_S32P</name></expr>:</case> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>filter</name></name> <operator>=</operator> <name>biquad_s32</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>AV_SAMPLE_FMT_FLTP</name></expr>:</case> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>filter</name></name> <operator>=</operator> <name>biquad_flt</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>AV_SAMPLE_FMT_DBLP</name></expr>:</case> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>filter</name></name> <operator>=</operator> <name>biquad_dbl</name></expr>;</expr_stmt> <break>break;</break>

<default>default:</default> <expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></switch>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>block_align</name></name> <operator>=</operator> <call><name>av_get_bytes_per_sample</name><argument_list>(<argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>format</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>config_output</name><parameter_list>(<parameter><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>outlink</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>config_filter</name><argument_list>(<argument><expr><name>outlink</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<typedef>typedef <type><struct>struct <name>ThreadData</name> <block>{

<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>in</name></decl>, <modifier>*</modifier><name>out</name>;</decl_stmt>

}</block></struct></type> <name>ThreadData</name>;</typedef>

<function><type><specifier>static</specifier> <name>int</name></type> <name>filter_channel</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>jobnr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nb_jobs</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>inlink</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>inputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ThreadData</name> <modifier>*</modifier></type><name>td</name> <init>= <expr><name>arg</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><name><name>td</name><operator>-&gt;</operator><name>in</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>out_buf</name> <init>= <expr><name><name>td</name><operator>-&gt;</operator><name>out</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>BiquadsContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>start</name> <init>= <expr><operator>(</operator><name><name>buf</name><operator>-&gt;</operator><name>channels</name></name> <operator>*</operator> <name>jobnr</name><operator>)</operator> <operator>/</operator> <name>nb_jobs</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>end</name> <init>= <expr><operator>(</operator><name><name>buf</name><operator>-&gt;</operator><name>channels</name></name> <operator>*</operator> <operator>(</operator><name>jobnr</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>/</operator> <name>nb_jobs</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ch</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>ch</name> <operator>=</operator> <name>start</name></expr>;</init> <condition><expr><name>ch</name> <operator>&lt;</operator> <name>end</name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><operator>(</operator><call><name>av_channel_layout_extract_channel</name><argument_list>(<argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>channel_layout</name></name></expr></argument>, <argument><expr><name>ch</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>channels</name></name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>buf</name> <operator>!=</operator> <name>out_buf</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>out_buf</name><operator>-&gt;</operator><name>extended_data</name><index>[<expr><name>ch</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>buf</name><operator>-&gt;</operator><name>extended_data</name><index>[<expr><name>ch</name></expr>]</index></name></expr></argument>,

<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>nb_samples</name></name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>block_align</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>filter</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>buf</name><operator>-&gt;</operator><name>extended_data</name><index>[<expr><name>ch</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>out_buf</name><operator>-&gt;</operator><name>extended_data</name><index>[<expr><name>ch</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>buf</name><operator>-&gt;</operator><name>nb_samples</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>cache</name><index>[<expr><name>ch</name></expr>]</index></name><operator>.</operator><name>i1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>cache</name><index>[<expr><name>ch</name></expr>]</index></name><operator>.</operator><name>i2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>cache</name><index>[<expr><name>ch</name></expr>]</index></name><operator>.</operator><name>o1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>cache</name><index>[<expr><name>ch</name></expr>]</index></name><operator>.</operator><name>o2</name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>b0</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>b1</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>b2</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>a1</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>a2</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>cache</name><index>[<expr><name>ch</name></expr>]</index></name><operator>.</operator><name>clippings</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>is_disabled</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>filter_frame</name><parameter_list>(<parameter><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>inlink</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>inlink</name><operator>-&gt;</operator><name>dst</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>BiquadsContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>outlink</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>outputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>out_buf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ThreadData</name></type> <name>td</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ch</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>av_frame_is_writable</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>out_buf</name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>out_buf</name> <operator>=</operator> <call><name>ff_get_audio_buffer</name><argument_list>(<argument><expr><name>outlink</name></expr></argument>, <argument><expr><name><name>buf</name><operator>-&gt;</operator><name>nb_samples</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>out_buf</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_frame_copy_props</name><argument_list>(<argument><expr><name>out_buf</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>td</name><operator>.</operator><name>in</name></name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>td</name><operator>.</operator><name>out</name></name> <operator>=</operator> <name>out_buf</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>ctx</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>filter_channel</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>td</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><call><name>FFMIN</name><argument_list>(<argument><expr><name><name>outlink</name><operator>-&gt;</operator><name>channels</name></name></expr></argument>, <argument><expr><call><name>ff_filter_get_nb_threads</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>ch</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ch</name> <operator>&lt;</operator> <name><name>outlink</name><operator>-&gt;</operator><name>channels</name></name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>cache</name><index>[<expr><name>ch</name></expr>]</index></name><operator>.</operator><name>clippings</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Channel %d clipping %d times. Please reduce gain.\n"</literal></expr></argument>,

<argument><expr><name>ch</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>cache</name><index>[<expr><name>ch</name></expr>]</index></name><operator>.</operator><name>clippings</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>cache</name><index>[<expr><name>ch</name></expr>]</index></name><operator>.</operator><name>clippings</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>buf</name> <operator>!=</operator> <name>out_buf</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><call><name>ff_filter_frame</name><argument_list>(<argument><expr><name>outlink</name></expr></argument>, <argument><expr><name>out_buf</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>process_command</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>args</name></decl></parameter>,

<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>res</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>res_len</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>outlink</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>outputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_filter_process_command</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>args</name></expr></argument>, <argument><expr><name>res</name></expr></argument>, <argument><expr><name>res_len</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>config_filter</name><argument_list>(<argument><expr><name>outlink</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>void</name></type> <name>uninit</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>BiquadsContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>cache</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVFilterPad</name></type> <name><name>inputs</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"default"</literal></expr>,

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_AUDIO</name></expr>,

<expr><operator>.</operator><name>filter_frame</name> <operator>=</operator> <name>filter_frame</name></expr>,

}</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVFilterPad</name></type> <name><name>outputs</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"default"</literal></expr>,

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_AUDIO</name></expr>,

<expr><operator>.</operator><name>config_props</name> <operator>=</operator> <name>config_output</name></expr>,

}</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OFFSET</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>offsetof(BiquadsContext, x)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLAGS</name></cpp:macro> <cpp:value>AV_OPT_FLAG_AUDIO_PARAM|AV_OPT_FLAG_FILTERING_PARAM|AV_OPT_FLAG_RUNTIME_PARAM</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AF</name></cpp:macro> <cpp:value>AV_OPT_FLAG_AUDIO_PARAM|AV_OPT_FLAG_FILTERING_PARAM</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFINE_BIQUAD_FILTER</name><parameter_list>(<parameter><type><name>name_</name></type></parameter>, <parameter><type><name>description_</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>AVFILTER_DEFINE_CLASS(name_); static av_cold int name_##_init(AVFilterContext *ctx) { BiquadsContext *s = ctx-&gt;priv; s-&gt;class = &amp;name_##_class; s-&gt;filter_type = name_; return init(ctx); } AVFilter ff_af_##name_ = { .name = #name_, .description = NULL_IF_CONFIG_SMALL(description_), .priv_size = sizeof(BiquadsContext), .init = name_##_init, .uninit = uninit, .query_formats = query_formats, .inputs = inputs, .outputs = outputs, .priv_class = &amp;name_##_class, .process_command = process_command, .flags = AVFILTER_FLAG_SLICE_THREADS | AVFILTER_FLAG_SUPPORT_TIMELINE_INTERNAL, }</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_EQUALIZER_FILTER</name></expr></cpp:if>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVOption</name></type> <name><name>equalizer_options</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{<expr><literal type="string">"frequency"</literal></expr>, <expr><literal type="string">"set central frequency"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>frequency</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_DOUBLE</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name><operator>=</operator><literal type="number">0</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">999999</literal></expr>, <expr><name>FLAGS</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"f"</literal></expr>, <expr><literal type="string">"set central frequency"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>frequency</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_DOUBLE</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name><operator>=</operator><literal type="number">0</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">999999</literal></expr>, <expr><name>FLAGS</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"width_type"</literal></expr>, <expr><literal type="string">"set filter-width type"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>width_type</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>QFACTOR</name></expr>}</block></expr>, <expr><name>HERTZ</name></expr>, <expr><name>NB_WTYPE</name><operator>-</operator><literal type="number">1</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"width_type"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"t"</literal></expr>, <expr><literal type="string">"set filter-width type"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>width_type</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>QFACTOR</name></expr>}</block></expr>, <expr><name>HERTZ</name></expr>, <expr><name>NB_WTYPE</name><operator>-</operator><literal type="number">1</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"width_type"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"h"</literal></expr>, <expr><literal type="string">"Hz"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>HERTZ</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"width_type"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"q"</literal></expr>, <expr><literal type="string">"Q-Factor"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>QFACTOR</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"width_type"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"o"</literal></expr>, <expr><literal type="string">"octave"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>OCTAVE</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"width_type"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"s"</literal></expr>, <expr><literal type="string">"slope"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>SLOPE</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"width_type"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"k"</literal></expr>, <expr><literal type="string">"kHz"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>KHERTZ</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"width_type"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"width"</literal></expr>, <expr><literal type="string">"set band-width"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>width</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_DOUBLE</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name><operator>=</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">99999</literal></expr>, <expr><name>FLAGS</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"w"</literal></expr>, <expr><literal type="string">"set band-width"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>width</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_DOUBLE</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name><operator>=</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">99999</literal></expr>, <expr><name>FLAGS</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"gain"</literal></expr>, <expr><literal type="string">"set gain"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>gain</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_DOUBLE</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name><operator>=</operator><literal type="number">0</literal></expr>}</block></expr>, <expr><operator>-</operator><literal type="number">900</literal></expr>, <expr><literal type="number">900</literal></expr>, <expr><name>FLAGS</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"g"</literal></expr>, <expr><literal type="string">"set gain"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>gain</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_DOUBLE</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name><operator>=</operator><literal type="number">0</literal></expr>}</block></expr>, <expr><operator>-</operator><literal type="number">900</literal></expr>, <expr><literal type="number">900</literal></expr>, <expr><name>FLAGS</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"mix"</literal></expr>, <expr><literal type="string">"set mix"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>mix</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_DOUBLE</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name><operator>=</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FLAGS</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"m"</literal></expr>, <expr><literal type="string">"set mix"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>mix</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_DOUBLE</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name><operator>=</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FLAGS</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"channels"</literal></expr>, <expr><literal type="string">"set channels to filter"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>channels</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_CHANNEL_LAYOUT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><operator>-</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><name>INT64_MIN</name></expr>, <expr><name>INT64_MAX</name></expr>, <expr><name>FLAGS</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"c"</literal></expr>, <expr><literal type="string">"set channels to filter"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>channels</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_CHANNEL_LAYOUT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><operator>-</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><name>INT64_MIN</name></expr>, <expr><name>INT64_MAX</name></expr>, <expr><name>FLAGS</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"normalize"</literal></expr>, <expr><literal type="string">"normalize coefficients"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>normalize</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_BOOL</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">0</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FLAGS</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"n"</literal></expr>, <expr><literal type="string">"normalize coefficients"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>normalize</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_BOOL</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">0</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FLAGS</name></expr>}</block></expr>,

<expr><block>{<expr><name>NULL</name></expr>}</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>DEFINE_BIQUAD_FILTER</name><argument_list>(<argument><expr><name>equalizer</name></expr></argument>, <argument><expr><literal type="string">"Apply two-pole peaking equalization (EQ) filter."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_BASS_FILTER</name></expr></cpp:if>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVOption</name></type> <name><name>bass_options</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{<expr><literal type="string">"frequency"</literal></expr>, <expr><literal type="string">"set central frequency"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>frequency</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_DOUBLE</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name><operator>=</operator><literal type="number">100</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">999999</literal></expr>, <expr><name>FLAGS</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"f"</literal></expr>, <expr><literal type="string">"set central frequency"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>frequency</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_DOUBLE</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name><operator>=</operator><literal type="number">100</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">999999</literal></expr>, <expr><name>FLAGS</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"width_type"</literal></expr>, <expr><literal type="string">"set filter-width type"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>width_type</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>QFACTOR</name></expr>}</block></expr>, <expr><name>HERTZ</name></expr>, <expr><name>NB_WTYPE</name><operator>-</operator><literal type="number">1</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"width_type"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"t"</literal></expr>, <expr><literal type="string">"set filter-width type"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>width_type</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>QFACTOR</name></expr>}</block></expr>, <expr><name>HERTZ</name></expr>, <expr><name>NB_WTYPE</name><operator>-</operator><literal type="number">1</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"width_type"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"h"</literal></expr>, <expr><literal type="string">"Hz"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>HERTZ</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"width_type"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"q"</literal></expr>, <expr><literal type="string">"Q-Factor"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>QFACTOR</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"width_type"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"o"</literal></expr>, <expr><literal type="string">"octave"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>OCTAVE</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"width_type"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"s"</literal></expr>, <expr><literal type="string">"slope"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>SLOPE</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"width_type"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"k"</literal></expr>, <expr><literal type="string">"kHz"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>KHERTZ</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"width_type"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"width"</literal></expr>, <expr><literal type="string">"set shelf transition steep"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>width</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_DOUBLE</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name><operator>=</operator><literal type="number">0.5</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">99999</literal></expr>, <expr><name>FLAGS</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"w"</literal></expr>, <expr><literal type="string">"set shelf transition steep"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>width</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_DOUBLE</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name><operator>=</operator><literal type="number">0.5</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">99999</literal></expr>, <expr><name>FLAGS</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"gain"</literal></expr>, <expr><literal type="string">"set gain"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>gain</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_DOUBLE</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name><operator>=</operator><literal type="number">0</literal></expr>}</block></expr>, <expr><operator>-</operator><literal type="number">900</literal></expr>, <expr><literal type="number">900</literal></expr>, <expr><name>FLAGS</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"g"</literal></expr>, <expr><literal type="string">"set gain"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>gain</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_DOUBLE</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name><operator>=</operator><literal type="number">0</literal></expr>}</block></expr>, <expr><operator>-</operator><literal type="number">900</literal></expr>, <expr><literal type="number">900</literal></expr>, <expr><name>FLAGS</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"mix"</literal></expr>, <expr><literal type="string">"set mix"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>mix</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_DOUBLE</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name><operator>=</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FLAGS</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"m"</literal></expr>, <expr><literal type="string">"set mix"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>mix</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_DOUBLE</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name><operator>=</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FLAGS</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"channels"</literal></expr>, <expr><literal type="string">"set channels to filter"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>channels</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_CHANNEL_LAYOUT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><operator>-</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><name>INT64_MIN</name></expr>, <expr><name>INT64_MAX</name></expr>, <expr><name>FLAGS</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"c"</literal></expr>, <expr><literal type="string">"set channels to filter"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>channels</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_CHANNEL_LAYOUT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><operator>-</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><name>INT64_MIN</name></expr>, <expr><name>INT64_MAX</name></expr>, <expr><name>FLAGS</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"normalize"</literal></expr>, <expr><literal type="string">"normalize coefficients"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>normalize</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_BOOL</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">0</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FLAGS</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"n"</literal></expr>, <expr><literal type="string">"normalize coefficients"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>normalize</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_BOOL</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">0</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FLAGS</name></expr>}</block></expr>,

<expr><block>{<expr><name>NULL</name></expr>}</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>DEFINE_BIQUAD_FILTER</name><argument_list>(<argument><expr><name>bass</name></expr></argument>, <argument><expr><literal type="string">"Boost or cut lower frequencies."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_TREBLE_FILTER</name></expr></cpp:if>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVOption</name></type> <name><name>treble_options</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{<expr><literal type="string">"frequency"</literal></expr>, <expr><literal type="string">"set central frequency"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>frequency</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_DOUBLE</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name><operator>=</operator><literal type="number">3000</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">999999</literal></expr>, <expr><name>FLAGS</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"f"</literal></expr>, <expr><literal type="string">"set central frequency"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>frequency</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_DOUBLE</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name><operator>=</operator><literal type="number">3000</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">999999</literal></expr>, <expr><name>FLAGS</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"width_type"</literal></expr>, <expr><literal type="string">"set filter-width type"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>width_type</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>QFACTOR</name></expr>}</block></expr>, <expr><name>HERTZ</name></expr>, <expr><name>NB_WTYPE</name><operator>-</operator><literal type="number">1</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"width_type"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"t"</literal></expr>, <expr><literal type="string">"set filter-width type"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>width_type</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>QFACTOR</name></expr>}</block></expr>, <expr><name>HERTZ</name></expr>, <expr><name>NB_WTYPE</name><operator>-</operator><literal type="number">1</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"width_type"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"h"</literal></expr>, <expr><literal type="string">"Hz"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>HERTZ</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"width_type"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"q"</literal></expr>, <expr><literal type="string">"Q-Factor"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>QFACTOR</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"width_type"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"o"</literal></expr>, <expr><literal type="string">"octave"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>OCTAVE</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"width_type"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"s"</literal></expr>, <expr><literal type="string">"slope"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>SLOPE</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"width_type"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"k"</literal></expr>, <expr><literal type="string">"kHz"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>KHERTZ</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"width_type"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"width"</literal></expr>, <expr><literal type="string">"set shelf transition steep"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>width</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_DOUBLE</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name><operator>=</operator><literal type="number">0.5</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">99999</literal></expr>, <expr><name>FLAGS</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"w"</literal></expr>, <expr><literal type="string">"set shelf transition steep"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>width</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_DOUBLE</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name><operator>=</operator><literal type="number">0.5</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">99999</literal></expr>, <expr><name>FLAGS</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"gain"</literal></expr>, <expr><literal type="string">"set gain"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>gain</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_DOUBLE</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name><operator>=</operator><literal type="number">0</literal></expr>}</block></expr>, <expr><operator>-</operator><literal type="number">900</literal></expr>, <expr><literal type="number">900</literal></expr>, <expr><name>FLAGS</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"g"</literal></expr>, <expr><literal type="string">"set gain"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>gain</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_DOUBLE</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name><operator>=</operator><literal type="number">0</literal></expr>}</block></expr>, <expr><operator>-</operator><literal type="number">900</literal></expr>, <expr><literal type="number">900</literal></expr>, <expr><name>FLAGS</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"mix"</literal></expr>, <expr><literal type="string">"set mix"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>mix</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_DOUBLE</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name><operator>=</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FLAGS</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"m"</literal></expr>, <expr><literal type="string">"set mix"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>mix</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_DOUBLE</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name><operator>=</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FLAGS</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"channels"</literal></expr>, <expr><literal type="string">"set channels to filter"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>channels</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_CHANNEL_LAYOUT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><operator>-</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><name>INT64_MIN</name></expr>, <expr><name>INT64_MAX</name></expr>, <expr><name>FLAGS</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"c"</literal></expr>, <expr><literal type="string">"set channels to filter"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>channels</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_CHANNEL_LAYOUT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><operator>-</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><name>INT64_MIN</name></expr>, <expr><name>INT64_MAX</name></expr>, <expr><name>FLAGS</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"normalize"</literal></expr>, <expr><literal type="string">"normalize coefficients"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>normalize</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_BOOL</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">0</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FLAGS</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"n"</literal></expr>, <expr><literal type="string">"normalize coefficients"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>normalize</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_BOOL</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">0</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FLAGS</name></expr>}</block></expr>,

<expr><block>{<expr><name>NULL</name></expr>}</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>DEFINE_BIQUAD_FILTER</name><argument_list>(<argument><expr><name>treble</name></expr></argument>, <argument><expr><literal type="string">"Boost or cut upper frequencies."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_BANDPASS_FILTER</name></expr></cpp:if>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVOption</name></type> <name><name>bandpass_options</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{<expr><literal type="string">"frequency"</literal></expr>, <expr><literal type="string">"set central frequency"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>frequency</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_DOUBLE</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name><operator>=</operator><literal type="number">3000</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">999999</literal></expr>, <expr><name>FLAGS</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"f"</literal></expr>, <expr><literal type="string">"set central frequency"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>frequency</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_DOUBLE</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name><operator>=</operator><literal type="number">3000</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">999999</literal></expr>, <expr><name>FLAGS</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"width_type"</literal></expr>, <expr><literal type="string">"set filter-width type"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>width_type</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>QFACTOR</name></expr>}</block></expr>, <expr><name>HERTZ</name></expr>, <expr><name>NB_WTYPE</name><operator>-</operator><literal type="number">1</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"width_type"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"t"</literal></expr>, <expr><literal type="string">"set filter-width type"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>width_type</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>QFACTOR</name></expr>}</block></expr>, <expr><name>HERTZ</name></expr>, <expr><name>NB_WTYPE</name><operator>-</operator><literal type="number">1</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"width_type"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"h"</literal></expr>, <expr><literal type="string">"Hz"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>HERTZ</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"width_type"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"q"</literal></expr>, <expr><literal type="string">"Q-Factor"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>QFACTOR</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"width_type"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"o"</literal></expr>, <expr><literal type="string">"octave"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>OCTAVE</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"width_type"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"s"</literal></expr>, <expr><literal type="string">"slope"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>SLOPE</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"width_type"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"k"</literal></expr>, <expr><literal type="string">"kHz"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>KHERTZ</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"width_type"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"width"</literal></expr>, <expr><literal type="string">"set band-width"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>width</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_DOUBLE</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name><operator>=</operator><literal type="number">0.5</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">99999</literal></expr>, <expr><name>FLAGS</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"w"</literal></expr>, <expr><literal type="string">"set band-width"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>width</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_DOUBLE</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name><operator>=</operator><literal type="number">0.5</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">99999</literal></expr>, <expr><name>FLAGS</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"csg"</literal></expr>, <expr><literal type="string">"use constant skirt gain"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>csg</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_BOOL</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">0</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FLAGS</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"mix"</literal></expr>, <expr><literal type="string">"set mix"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>mix</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_DOUBLE</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name><operator>=</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FLAGS</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"m"</literal></expr>, <expr><literal type="string">"set mix"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>mix</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_DOUBLE</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name><operator>=</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FLAGS</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"channels"</literal></expr>, <expr><literal type="string">"set channels to filter"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>channels</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_CHANNEL_LAYOUT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><operator>-</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><name>INT64_MIN</name></expr>, <expr><name>INT64_MAX</name></expr>, <expr><name>FLAGS</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"c"</literal></expr>, <expr><literal type="string">"set channels to filter"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>channels</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_CHANNEL_LAYOUT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><operator>-</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><name>INT64_MIN</name></expr>, <expr><name>INT64_MAX</name></expr>, <expr><name>FLAGS</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"normalize"</literal></expr>, <expr><literal type="string">"normalize coefficients"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>normalize</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_BOOL</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">0</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FLAGS</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"n"</literal></expr>, <expr><literal type="string">"normalize coefficients"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>normalize</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_BOOL</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">0</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FLAGS</name></expr>}</block></expr>,

<expr><block>{<expr><name>NULL</name></expr>}</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>DEFINE_BIQUAD_FILTER</name><argument_list>(<argument><expr><name>bandpass</name></expr></argument>, <argument><expr><literal type="string">"Apply a two-pole Butterworth band-pass filter."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_BANDREJECT_FILTER</name></expr></cpp:if>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVOption</name></type> <name><name>bandreject_options</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{<expr><literal type="string">"frequency"</literal></expr>, <expr><literal type="string">"set central frequency"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>frequency</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_DOUBLE</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name><operator>=</operator><literal type="number">3000</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">999999</literal></expr>, <expr><name>FLAGS</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"f"</literal></expr>, <expr><literal type="string">"set central frequency"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>frequency</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_DOUBLE</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name><operator>=</operator><literal type="number">3000</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">999999</literal></expr>, <expr><name>FLAGS</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"width_type"</literal></expr>, <expr><literal type="string">"set filter-width type"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>width_type</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>QFACTOR</name></expr>}</block></expr>, <expr><name>HERTZ</name></expr>, <expr><name>NB_WTYPE</name><operator>-</operator><literal type="number">1</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"width_type"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"t"</literal></expr>, <expr><literal type="string">"set filter-width type"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>width_type</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>QFACTOR</name></expr>}</block></expr>, <expr><name>HERTZ</name></expr>, <expr><name>NB_WTYPE</name><operator>-</operator><literal type="number">1</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"width_type"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"h"</literal></expr>, <expr><literal type="string">"Hz"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>HERTZ</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"width_type"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"q"</literal></expr>, <expr><literal type="string">"Q-Factor"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>QFACTOR</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"width_type"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"o"</literal></expr>, <expr><literal type="string">"octave"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>OCTAVE</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"width_type"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"s"</literal></expr>, <expr><literal type="string">"slope"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>SLOPE</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"width_type"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"k"</literal></expr>, <expr><literal type="string">"kHz"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>KHERTZ</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"width_type"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"width"</literal></expr>, <expr><literal type="string">"set band-width"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>width</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_DOUBLE</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name><operator>=</operator><literal type="number">0.5</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">99999</literal></expr>, <expr><name>FLAGS</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"w"</literal></expr>, <expr><literal type="string">"set band-width"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>width</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_DOUBLE</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name><operator>=</operator><literal type="number">0.5</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">99999</literal></expr>, <expr><name>FLAGS</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"mix"</literal></expr>, <expr><literal type="string">"set mix"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>mix</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_DOUBLE</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name><operator>=</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FLAGS</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"m"</literal></expr>, <expr><literal type="string">"set mix"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>mix</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_DOUBLE</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name><operator>=</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FLAGS</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"channels"</literal></expr>, <expr><literal type="string">"set channels to filter"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>channels</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_CHANNEL_LAYOUT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><operator>-</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><name>INT64_MIN</name></expr>, <expr><name>INT64_MAX</name></expr>, <expr><name>FLAGS</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"c"</literal></expr>, <expr><literal type="string">"set channels to filter"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>channels</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_CHANNEL_LAYOUT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><operator>-</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><name>INT64_MIN</name></expr>, <expr><name>INT64_MAX</name></expr>, <expr><name>FLAGS</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"normalize"</literal></expr>, <expr><literal type="string">"normalize coefficients"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>normalize</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_BOOL</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">0</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FLAGS</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"n"</literal></expr>, <expr><literal type="string">"normalize coefficients"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>normalize</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_BOOL</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">0</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FLAGS</name></expr>}</block></expr>,

<expr><block>{<expr><name>NULL</name></expr>}</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>DEFINE_BIQUAD_FILTER</name><argument_list>(<argument><expr><name>bandreject</name></expr></argument>, <argument><expr><literal type="string">"Apply a two-pole Butterworth band-reject filter."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_LOWPASS_FILTER</name></expr></cpp:if>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVOption</name></type> <name><name>lowpass_options</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{<expr><literal type="string">"frequency"</literal></expr>, <expr><literal type="string">"set frequency"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>frequency</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_DOUBLE</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name><operator>=</operator><literal type="number">500</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">999999</literal></expr>, <expr><name>FLAGS</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"f"</literal></expr>, <expr><literal type="string">"set frequency"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>frequency</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_DOUBLE</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name><operator>=</operator><literal type="number">500</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">999999</literal></expr>, <expr><name>FLAGS</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"width_type"</literal></expr>, <expr><literal type="string">"set filter-width type"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>width_type</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>QFACTOR</name></expr>}</block></expr>, <expr><name>HERTZ</name></expr>, <expr><name>NB_WTYPE</name><operator>-</operator><literal type="number">1</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"width_type"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"t"</literal></expr>, <expr><literal type="string">"set filter-width type"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>width_type</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>QFACTOR</name></expr>}</block></expr>, <expr><name>HERTZ</name></expr>, <expr><name>NB_WTYPE</name><operator>-</operator><literal type="number">1</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"width_type"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"h"</literal></expr>, <expr><literal type="string">"Hz"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>HERTZ</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"width_type"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"q"</literal></expr>, <expr><literal type="string">"Q-Factor"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>QFACTOR</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"width_type"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"o"</literal></expr>, <expr><literal type="string">"octave"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>OCTAVE</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"width_type"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"s"</literal></expr>, <expr><literal type="string">"slope"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>SLOPE</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"width_type"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"k"</literal></expr>, <expr><literal type="string">"kHz"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>KHERTZ</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"width_type"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"width"</literal></expr>, <expr><literal type="string">"set width"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>width</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_DOUBLE</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name><operator>=</operator><literal type="number">0.707</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">99999</literal></expr>, <expr><name>FLAGS</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"w"</literal></expr>, <expr><literal type="string">"set width"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>width</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_DOUBLE</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name><operator>=</operator><literal type="number">0.707</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">99999</literal></expr>, <expr><name>FLAGS</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"poles"</literal></expr>, <expr><literal type="string">"set number of poles"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>poles</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">2</literal></expr>}</block></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>AF</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"p"</literal></expr>, <expr><literal type="string">"set number of poles"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>poles</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">2</literal></expr>}</block></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>AF</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"mix"</literal></expr>, <expr><literal type="string">"set mix"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>mix</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_DOUBLE</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name><operator>=</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FLAGS</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"m"</literal></expr>, <expr><literal type="string">"set mix"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>mix</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_DOUBLE</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name><operator>=</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FLAGS</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"channels"</literal></expr>, <expr><literal type="string">"set channels to filter"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>channels</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_CHANNEL_LAYOUT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><operator>-</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><name>INT64_MIN</name></expr>, <expr><name>INT64_MAX</name></expr>, <expr><name>FLAGS</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"c"</literal></expr>, <expr><literal type="string">"set channels to filter"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>channels</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_CHANNEL_LAYOUT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><operator>-</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><name>INT64_MIN</name></expr>, <expr><name>INT64_MAX</name></expr>, <expr><name>FLAGS</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"normalize"</literal></expr>, <expr><literal type="string">"normalize coefficients"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>normalize</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_BOOL</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">0</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FLAGS</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"n"</literal></expr>, <expr><literal type="string">"normalize coefficients"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>normalize</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_BOOL</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">0</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FLAGS</name></expr>}</block></expr>,

<expr><block>{<expr><name>NULL</name></expr>}</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>DEFINE_BIQUAD_FILTER</name><argument_list>(<argument><expr><name>lowpass</name></expr></argument>, <argument><expr><literal type="string">"Apply a low-pass filter with 3dB point frequency."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_HIGHPASS_FILTER</name></expr></cpp:if>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVOption</name></type> <name><name>highpass_options</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{<expr><literal type="string">"frequency"</literal></expr>, <expr><literal type="string">"set frequency"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>frequency</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_DOUBLE</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name><operator>=</operator><literal type="number">3000</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">999999</literal></expr>, <expr><name>FLAGS</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"f"</literal></expr>, <expr><literal type="string">"set frequency"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>frequency</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_DOUBLE</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name><operator>=</operator><literal type="number">3000</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">999999</literal></expr>, <expr><name>FLAGS</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"width_type"</literal></expr>, <expr><literal type="string">"set filter-width type"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>width_type</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>QFACTOR</name></expr>}</block></expr>, <expr><name>HERTZ</name></expr>, <expr><name>NB_WTYPE</name><operator>-</operator><literal type="number">1</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"width_type"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"t"</literal></expr>, <expr><literal type="string">"set filter-width type"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>width_type</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>QFACTOR</name></expr>}</block></expr>, <expr><name>HERTZ</name></expr>, <expr><name>NB_WTYPE</name><operator>-</operator><literal type="number">1</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"width_type"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"h"</literal></expr>, <expr><literal type="string">"Hz"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>HERTZ</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"width_type"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"q"</literal></expr>, <expr><literal type="string">"Q-Factor"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>QFACTOR</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"width_type"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"o"</literal></expr>, <expr><literal type="string">"octave"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>OCTAVE</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"width_type"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"s"</literal></expr>, <expr><literal type="string">"slope"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>SLOPE</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"width_type"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"k"</literal></expr>, <expr><literal type="string">"kHz"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>KHERTZ</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"width_type"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"width"</literal></expr>, <expr><literal type="string">"set width"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>width</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_DOUBLE</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name><operator>=</operator><literal type="number">0.707</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">99999</literal></expr>, <expr><name>FLAGS</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"w"</literal></expr>, <expr><literal type="string">"set width"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>width</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_DOUBLE</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name><operator>=</operator><literal type="number">0.707</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">99999</literal></expr>, <expr><name>FLAGS</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"poles"</literal></expr>, <expr><literal type="string">"set number of poles"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>poles</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">2</literal></expr>}</block></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>AF</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"p"</literal></expr>, <expr><literal type="string">"set number of poles"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>poles</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">2</literal></expr>}</block></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>AF</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"mix"</literal></expr>, <expr><literal type="string">"set mix"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>mix</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_DOUBLE</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name><operator>=</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FLAGS</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"m"</literal></expr>, <expr><literal type="string">"set mix"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>mix</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_DOUBLE</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name><operator>=</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FLAGS</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"channels"</literal></expr>, <expr><literal type="string">"set channels to filter"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>channels</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_CHANNEL_LAYOUT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><operator>-</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><name>INT64_MIN</name></expr>, <expr><name>INT64_MAX</name></expr>, <expr><name>FLAGS</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"c"</literal></expr>, <expr><literal type="string">"set channels to filter"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>channels</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_CHANNEL_LAYOUT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><operator>-</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><name>INT64_MIN</name></expr>, <expr><name>INT64_MAX</name></expr>, <expr><name>FLAGS</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"normalize"</literal></expr>, <expr><literal type="string">"normalize coefficients"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>normalize</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_BOOL</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">0</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FLAGS</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"n"</literal></expr>, <expr><literal type="string">"normalize coefficients"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>normalize</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_BOOL</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">0</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FLAGS</name></expr>}</block></expr>,

<expr><block>{<expr><name>NULL</name></expr>}</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>DEFINE_BIQUAD_FILTER</name><argument_list>(<argument><expr><name>highpass</name></expr></argument>, <argument><expr><literal type="string">"Apply a high-pass filter with 3dB point frequency."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_ALLPASS_FILTER</name></expr></cpp:if>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVOption</name></type> <name><name>allpass_options</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{<expr><literal type="string">"frequency"</literal></expr>, <expr><literal type="string">"set central frequency"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>frequency</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_DOUBLE</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name><operator>=</operator><literal type="number">3000</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">999999</literal></expr>, <expr><name>FLAGS</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"f"</literal></expr>, <expr><literal type="string">"set central frequency"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>frequency</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_DOUBLE</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name><operator>=</operator><literal type="number">3000</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">999999</literal></expr>, <expr><name>FLAGS</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"width_type"</literal></expr>, <expr><literal type="string">"set filter-width type"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>width_type</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>HERTZ</name></expr>}</block></expr>, <expr><name>HERTZ</name></expr>, <expr><name>NB_WTYPE</name><operator>-</operator><literal type="number">1</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"width_type"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"t"</literal></expr>, <expr><literal type="string">"set filter-width type"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>width_type</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>HERTZ</name></expr>}</block></expr>, <expr><name>HERTZ</name></expr>, <expr><name>NB_WTYPE</name><operator>-</operator><literal type="number">1</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"width_type"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"h"</literal></expr>, <expr><literal type="string">"Hz"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>HERTZ</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"width_type"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"q"</literal></expr>, <expr><literal type="string">"Q-Factor"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>QFACTOR</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"width_type"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"o"</literal></expr>, <expr><literal type="string">"octave"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>OCTAVE</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"width_type"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"s"</literal></expr>, <expr><literal type="string">"slope"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>SLOPE</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"width_type"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"k"</literal></expr>, <expr><literal type="string">"kHz"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>KHERTZ</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"width_type"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"width"</literal></expr>, <expr><literal type="string">"set filter-width"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>width</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_DOUBLE</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name><operator>=</operator><literal type="number">707.1</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">99999</literal></expr>, <expr><name>FLAGS</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"w"</literal></expr>, <expr><literal type="string">"set filter-width"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>width</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_DOUBLE</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name><operator>=</operator><literal type="number">707.1</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">99999</literal></expr>, <expr><name>FLAGS</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"mix"</literal></expr>, <expr><literal type="string">"set mix"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>mix</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_DOUBLE</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name><operator>=</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FLAGS</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"m"</literal></expr>, <expr><literal type="string">"set mix"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>mix</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_DOUBLE</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name><operator>=</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FLAGS</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"channels"</literal></expr>, <expr><literal type="string">"set channels to filter"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>channels</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_CHANNEL_LAYOUT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><operator>-</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><name>INT64_MIN</name></expr>, <expr><name>INT64_MAX</name></expr>, <expr><name>FLAGS</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"c"</literal></expr>, <expr><literal type="string">"set channels to filter"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>channels</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_CHANNEL_LAYOUT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><operator>-</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><name>INT64_MIN</name></expr>, <expr><name>INT64_MAX</name></expr>, <expr><name>FLAGS</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"normalize"</literal></expr>, <expr><literal type="string">"normalize coefficients"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>normalize</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_BOOL</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">0</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FLAGS</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"n"</literal></expr>, <expr><literal type="string">"normalize coefficients"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>normalize</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_BOOL</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">0</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FLAGS</name></expr>}</block></expr>,

<expr><block>{<expr><name>NULL</name></expr>}</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>DEFINE_BIQUAD_FILTER</name><argument_list>(<argument><expr><name>allpass</name></expr></argument>, <argument><expr><literal type="string">"Apply a two-pole all-pass filter."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_LOWSHELF_FILTER</name></expr></cpp:if>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVOption</name></type> <name><name>lowshelf_options</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{<expr><literal type="string">"frequency"</literal></expr>, <expr><literal type="string">"set central frequency"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>frequency</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_DOUBLE</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name><operator>=</operator><literal type="number">100</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">999999</literal></expr>, <expr><name>FLAGS</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"f"</literal></expr>, <expr><literal type="string">"set central frequency"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>frequency</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_DOUBLE</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name><operator>=</operator><literal type="number">100</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">999999</literal></expr>, <expr><name>FLAGS</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"width_type"</literal></expr>, <expr><literal type="string">"set filter-width type"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>width_type</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>QFACTOR</name></expr>}</block></expr>, <expr><name>HERTZ</name></expr>, <expr><name>NB_WTYPE</name><operator>-</operator><literal type="number">1</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"width_type"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"t"</literal></expr>, <expr><literal type="string">"set filter-width type"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>width_type</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>QFACTOR</name></expr>}</block></expr>, <expr><name>HERTZ</name></expr>, <expr><name>NB_WTYPE</name><operator>-</operator><literal type="number">1</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"width_type"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"h"</literal></expr>, <expr><literal type="string">"Hz"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>HERTZ</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"width_type"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"q"</literal></expr>, <expr><literal type="string">"Q-Factor"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>QFACTOR</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"width_type"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"o"</literal></expr>, <expr><literal type="string">"octave"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>OCTAVE</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"width_type"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"s"</literal></expr>, <expr><literal type="string">"slope"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>SLOPE</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"width_type"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"k"</literal></expr>, <expr><literal type="string">"kHz"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>KHERTZ</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"width_type"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"width"</literal></expr>, <expr><literal type="string">"set shelf transition steep"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>width</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_DOUBLE</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name><operator>=</operator><literal type="number">0.5</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">99999</literal></expr>, <expr><name>FLAGS</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"w"</literal></expr>, <expr><literal type="string">"set shelf transition steep"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>width</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_DOUBLE</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name><operator>=</operator><literal type="number">0.5</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">99999</literal></expr>, <expr><name>FLAGS</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"gain"</literal></expr>, <expr><literal type="string">"set gain"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>gain</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_DOUBLE</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name><operator>=</operator><literal type="number">0</literal></expr>}</block></expr>, <expr><operator>-</operator><literal type="number">900</literal></expr>, <expr><literal type="number">900</literal></expr>, <expr><name>FLAGS</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"g"</literal></expr>, <expr><literal type="string">"set gain"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>gain</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_DOUBLE</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name><operator>=</operator><literal type="number">0</literal></expr>}</block></expr>, <expr><operator>-</operator><literal type="number">900</literal></expr>, <expr><literal type="number">900</literal></expr>, <expr><name>FLAGS</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"mix"</literal></expr>, <expr><literal type="string">"set mix"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>mix</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_DOUBLE</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name><operator>=</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FLAGS</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"m"</literal></expr>, <expr><literal type="string">"set mix"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>mix</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_DOUBLE</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name><operator>=</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FLAGS</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"channels"</literal></expr>, <expr><literal type="string">"set channels to filter"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>channels</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_CHANNEL_LAYOUT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><operator>-</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><name>INT64_MIN</name></expr>, <expr><name>INT64_MAX</name></expr>, <expr><name>FLAGS</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"c"</literal></expr>, <expr><literal type="string">"set channels to filter"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>channels</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_CHANNEL_LAYOUT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><operator>-</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><name>INT64_MIN</name></expr>, <expr><name>INT64_MAX</name></expr>, <expr><name>FLAGS</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"normalize"</literal></expr>, <expr><literal type="string">"normalize coefficients"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>normalize</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_BOOL</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">0</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FLAGS</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"n"</literal></expr>, <expr><literal type="string">"normalize coefficients"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>normalize</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_BOOL</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">0</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FLAGS</name></expr>}</block></expr>,

<expr><block>{<expr><name>NULL</name></expr>}</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>DEFINE_BIQUAD_FILTER</name><argument_list>(<argument><expr><name>lowshelf</name></expr></argument>, <argument><expr><literal type="string">"Apply a low shelf filter."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_HIGHSHELF_FILTER</name></expr></cpp:if>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVOption</name></type> <name><name>highshelf_options</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{<expr><literal type="string">"frequency"</literal></expr>, <expr><literal type="string">"set central frequency"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>frequency</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_DOUBLE</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name><operator>=</operator><literal type="number">3000</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">999999</literal></expr>, <expr><name>FLAGS</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"f"</literal></expr>, <expr><literal type="string">"set central frequency"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>frequency</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_DOUBLE</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name><operator>=</operator><literal type="number">3000</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">999999</literal></expr>, <expr><name>FLAGS</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"width_type"</literal></expr>, <expr><literal type="string">"set filter-width type"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>width_type</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>QFACTOR</name></expr>}</block></expr>, <expr><name>HERTZ</name></expr>, <expr><name>NB_WTYPE</name><operator>-</operator><literal type="number">1</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"width_type"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"t"</literal></expr>, <expr><literal type="string">"set filter-width type"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>width_type</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>QFACTOR</name></expr>}</block></expr>, <expr><name>HERTZ</name></expr>, <expr><name>NB_WTYPE</name><operator>-</operator><literal type="number">1</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"width_type"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"h"</literal></expr>, <expr><literal type="string">"Hz"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>HERTZ</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"width_type"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"q"</literal></expr>, <expr><literal type="string">"Q-Factor"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>QFACTOR</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"width_type"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"o"</literal></expr>, <expr><literal type="string">"octave"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>OCTAVE</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"width_type"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"s"</literal></expr>, <expr><literal type="string">"slope"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>SLOPE</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"width_type"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"k"</literal></expr>, <expr><literal type="string">"kHz"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>KHERTZ</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"width_type"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"width"</literal></expr>, <expr><literal type="string">"set shelf transition steep"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>width</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_DOUBLE</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name><operator>=</operator><literal type="number">0.5</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">99999</literal></expr>, <expr><name>FLAGS</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"w"</literal></expr>, <expr><literal type="string">"set shelf transition steep"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>width</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_DOUBLE</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name><operator>=</operator><literal type="number">0.5</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">99999</literal></expr>, <expr><name>FLAGS</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"gain"</literal></expr>, <expr><literal type="string">"set gain"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>gain</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_DOUBLE</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name><operator>=</operator><literal type="number">0</literal></expr>}</block></expr>, <expr><operator>-</operator><literal type="number">900</literal></expr>, <expr><literal type="number">900</literal></expr>, <expr><name>FLAGS</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"g"</literal></expr>, <expr><literal type="string">"set gain"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>gain</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_DOUBLE</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name><operator>=</operator><literal type="number">0</literal></expr>}</block></expr>, <expr><operator>-</operator><literal type="number">900</literal></expr>, <expr><literal type="number">900</literal></expr>, <expr><name>FLAGS</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"mix"</literal></expr>, <expr><literal type="string">"set mix"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>mix</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_DOUBLE</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name><operator>=</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FLAGS</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"m"</literal></expr>, <expr><literal type="string">"set mix"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>mix</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_DOUBLE</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name><operator>=</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FLAGS</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"channels"</literal></expr>, <expr><literal type="string">"set channels to filter"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>channels</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_CHANNEL_LAYOUT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><operator>-</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><name>INT64_MIN</name></expr>, <expr><name>INT64_MAX</name></expr>, <expr><name>FLAGS</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"c"</literal></expr>, <expr><literal type="string">"set channels to filter"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>channels</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_CHANNEL_LAYOUT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><operator>-</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><name>INT64_MIN</name></expr>, <expr><name>INT64_MAX</name></expr>, <expr><name>FLAGS</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"normalize"</literal></expr>, <expr><literal type="string">"normalize coefficients"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>normalize</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_BOOL</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">0</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FLAGS</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"n"</literal></expr>, <expr><literal type="string">"normalize coefficients"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>normalize</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_BOOL</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">0</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FLAGS</name></expr>}</block></expr>,

<expr><block>{<expr><name>NULL</name></expr>}</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>DEFINE_BIQUAD_FILTER</name><argument_list>(<argument><expr><name>highshelf</name></expr></argument>, <argument><expr><literal type="string">"Apply a high shelf filter."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_BIQUAD_FILTER</name></expr></cpp:if>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVOption</name></type> <name><name>biquad_options</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{<expr><literal type="string">"a0"</literal></expr>, <expr><name>NULL</name></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>a0</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_DOUBLE</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name><operator>=</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><name>INT32_MIN</name></expr>, <expr><name>INT32_MAX</name></expr>, <expr><name>FLAGS</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"a1"</literal></expr>, <expr><name>NULL</name></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>a1</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_DOUBLE</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name><operator>=</operator><literal type="number">0</literal></expr>}</block></expr>, <expr><name>INT32_MIN</name></expr>, <expr><name>INT32_MAX</name></expr>, <expr><name>FLAGS</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"a2"</literal></expr>, <expr><name>NULL</name></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>a2</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_DOUBLE</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name><operator>=</operator><literal type="number">0</literal></expr>}</block></expr>, <expr><name>INT32_MIN</name></expr>, <expr><name>INT32_MAX</name></expr>, <expr><name>FLAGS</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"b0"</literal></expr>, <expr><name>NULL</name></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>b0</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_DOUBLE</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name><operator>=</operator><literal type="number">0</literal></expr>}</block></expr>, <expr><name>INT32_MIN</name></expr>, <expr><name>INT32_MAX</name></expr>, <expr><name>FLAGS</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"b1"</literal></expr>, <expr><name>NULL</name></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>b1</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_DOUBLE</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name><operator>=</operator><literal type="number">0</literal></expr>}</block></expr>, <expr><name>INT32_MIN</name></expr>, <expr><name>INT32_MAX</name></expr>, <expr><name>FLAGS</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"b2"</literal></expr>, <expr><name>NULL</name></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>b2</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_DOUBLE</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name><operator>=</operator><literal type="number">0</literal></expr>}</block></expr>, <expr><name>INT32_MIN</name></expr>, <expr><name>INT32_MAX</name></expr>, <expr><name>FLAGS</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"mix"</literal></expr>, <expr><literal type="string">"set mix"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>mix</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_DOUBLE</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name><operator>=</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FLAGS</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"m"</literal></expr>, <expr><literal type="string">"set mix"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>mix</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_DOUBLE</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name><operator>=</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FLAGS</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"channels"</literal></expr>, <expr><literal type="string">"set channels to filter"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>channels</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_CHANNEL_LAYOUT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><operator>-</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><name>INT64_MIN</name></expr>, <expr><name>INT64_MAX</name></expr>, <expr><name>FLAGS</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"c"</literal></expr>, <expr><literal type="string">"set channels to filter"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>channels</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_CHANNEL_LAYOUT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><operator>-</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><name>INT64_MIN</name></expr>, <expr><name>INT64_MAX</name></expr>, <expr><name>FLAGS</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"normalize"</literal></expr>, <expr><literal type="string">"normalize coefficients"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>normalize</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_BOOL</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">0</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FLAGS</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"n"</literal></expr>, <expr><literal type="string">"normalize coefficients"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>normalize</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_BOOL</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">0</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FLAGS</name></expr>}</block></expr>,

<expr><block>{<expr><name>NULL</name></expr>}</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>DEFINE_BIQUAD_FILTER</name><argument_list>(<argument><expr><name>biquad</name></expr></argument>, <argument><expr><literal type="string">"Apply a biquad IIR filter with the given coefficients."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

</unit>
