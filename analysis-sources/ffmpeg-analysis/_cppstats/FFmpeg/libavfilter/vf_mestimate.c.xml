<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavfilter\vf_mestimate.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"motion_estimation.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavcodec/mathops.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avassert.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/common.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/imgutils.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/opt.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/pixdesc.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/motion_vector.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avfilter.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"formats.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"video.h"</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct <name>MEContext</name> <block>{

<decl_stmt><decl><type><specifier>const</specifier> <name>AVClass</name> <modifier>*</modifier></type><name>class</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVMotionEstContext</name></type> <name>me_ctx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>method</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>mb_size</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>search_param</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>b_width</name></decl>, <name>b_height</name>, <name>b_count</name>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>log2_mb_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>prev</name></decl>, <modifier>*</modifier><name>cur</name>, <modifier>*</modifier><name>next</name>;</decl_stmt>

<expr_stmt><expr><call><name>int</name> <argument_list>(<argument><expr><operator>*</operator><name><name>mv_table</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></expr>;</expr_stmt> 

}</block></struct></type> <name>MEContext</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OFFSET</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>offsetof(MEContext, x)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLAGS</name></cpp:macro> <cpp:value>AV_OPT_FLAG_VIDEO_PARAM|AV_OPT_FLAG_FILTERING_PARAM</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CONST</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>help</name></type></parameter>, <parameter><type><name>val</name></type></parameter>, <parameter><type><name>unit</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ name, help, 0, AV_OPT_TYPE_CONST, {.i64=val}, 0, 0, FLAGS, unit }</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVOption</name></type> <name><name>mestimate_options</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><literal type="string">"method"</literal></expr>, <expr><literal type="string">"motion estimation method"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>method</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>AV_ME_METHOD_ESA</name></expr>}</block></expr>, <expr><name>AV_ME_METHOD_ESA</name></expr>, <expr><name>AV_ME_METHOD_UMH</name></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"method"</literal></expr> }</block></expr>,

<expr><call><name>CONST</name><argument_list>(<argument><expr><literal type="string">"esa"</literal></expr></argument>, <argument><expr><literal type="string">"exhaustive search"</literal></expr></argument>, <argument><expr><name>AV_ME_METHOD_ESA</name></expr></argument>, <argument><expr><literal type="string">"method"</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>CONST</name><argument_list>(<argument><expr><literal type="string">"tss"</literal></expr></argument>, <argument><expr><literal type="string">"three step search"</literal></expr></argument>, <argument><expr><name>AV_ME_METHOD_TSS</name></expr></argument>, <argument><expr><literal type="string">"method"</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>CONST</name><argument_list>(<argument><expr><literal type="string">"tdls"</literal></expr></argument>, <argument><expr><literal type="string">"two dimensional logarithmic search"</literal></expr></argument>, <argument><expr><name>AV_ME_METHOD_TDLS</name></expr></argument>, <argument><expr><literal type="string">"method"</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>CONST</name><argument_list>(<argument><expr><literal type="string">"ntss"</literal></expr></argument>, <argument><expr><literal type="string">"new three step search"</literal></expr></argument>, <argument><expr><name>AV_ME_METHOD_NTSS</name></expr></argument>, <argument><expr><literal type="string">"method"</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>CONST</name><argument_list>(<argument><expr><literal type="string">"fss"</literal></expr></argument>, <argument><expr><literal type="string">"four step search"</literal></expr></argument>, <argument><expr><name>AV_ME_METHOD_FSS</name></expr></argument>, <argument><expr><literal type="string">"method"</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>CONST</name><argument_list>(<argument><expr><literal type="string">"ds"</literal></expr></argument>, <argument><expr><literal type="string">"diamond search"</literal></expr></argument>, <argument><expr><name>AV_ME_METHOD_DS</name></expr></argument>, <argument><expr><literal type="string">"method"</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>CONST</name><argument_list>(<argument><expr><literal type="string">"hexbs"</literal></expr></argument>, <argument><expr><literal type="string">"hexagon-based search"</literal></expr></argument>, <argument><expr><name>AV_ME_METHOD_HEXBS</name></expr></argument>, <argument><expr><literal type="string">"method"</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>CONST</name><argument_list>(<argument><expr><literal type="string">"epzs"</literal></expr></argument>, <argument><expr><literal type="string">"enhanced predictive zonal search"</literal></expr></argument>, <argument><expr><name>AV_ME_METHOD_EPZS</name></expr></argument>, <argument><expr><literal type="string">"method"</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>CONST</name><argument_list>(<argument><expr><literal type="string">"umh"</literal></expr></argument>, <argument><expr><literal type="string">"uneven multi-hexagon search"</literal></expr></argument>, <argument><expr><name>AV_ME_METHOD_UMH</name></expr></argument>, <argument><expr><literal type="string">"method"</literal></expr></argument>)</argument_list></call></expr>,

<expr><block>{ <expr><literal type="string">"mb_size"</literal></expr>, <expr><literal type="string">"macroblock size"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>mb_size</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">16</literal></expr>}</block></expr>, <expr><literal type="number">8</literal></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"search_param"</literal></expr>, <expr><literal type="string">"search parameter"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>search_param</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">7</literal></expr>}</block></expr>, <expr><literal type="number">4</literal></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>AVFILTER_DEFINE_CLASS</name><argument_list>(<argument><expr><name>mestimate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function><type><specifier>static</specifier> <name>int</name></type> <name>query_formats</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>enum</name> <name>AVPixelFormat</name></name></type> <name><name>pix_fmts</name><index>[]</index></name> <init>= <expr><block>{

<expr><name>AV_PIX_FMT_YUV410P</name></expr>, <expr><name>AV_PIX_FMT_YUV411P</name></expr>,

<expr><name>AV_PIX_FMT_YUV420P</name></expr>, <expr><name>AV_PIX_FMT_YUV422P</name></expr>,

<expr><name>AV_PIX_FMT_YUV440P</name></expr>, <expr><name>AV_PIX_FMT_YUV444P</name></expr>,

<expr><name>AV_PIX_FMT_YUVJ444P</name></expr>, <expr><name>AV_PIX_FMT_YUVJ440P</name></expr>,

<expr><name>AV_PIX_FMT_YUVJ422P</name></expr>, <expr><name>AV_PIX_FMT_YUVJ420P</name></expr>,

<expr><name>AV_PIX_FMT_YUVJ411P</name></expr>,

<expr><name>AV_PIX_FMT_YUVA420P</name></expr>, <expr><name>AV_PIX_FMT_YUVA422P</name></expr>, <expr><name>AV_PIX_FMT_YUVA444P</name></expr>,

<expr><name>AV_PIX_FMT_GRAY8</name></expr>,

<expr><name>AV_PIX_FMT_NONE</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFilterFormats</name> <modifier>*</modifier></type><name>fmts_list</name> <init>= <expr><call><name>ff_make_format_list</name><argument_list>(<argument><expr><name>pix_fmts</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>fmts_list</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>ff_set_common_formats</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>fmts_list</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>config_input</name><parameter_list>(<parameter><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>inlink</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>MEContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>inlink</name><operator>-&gt;</operator><name>dst</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>log2_mb_size</name></name> <operator>=</operator> <call><name>av_ceil_log2_c</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>mb_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mb_size</name></name> <operator>=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>log2_mb_size</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>b_width</name></name> <operator>=</operator> <name><name>inlink</name><operator>-&gt;</operator><name>w</name></name> <operator>&gt;&gt;</operator> <name><name>s</name><operator>-&gt;</operator><name>log2_mb_size</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>b_height</name></name> <operator>=</operator> <name><name>inlink</name><operator>-&gt;</operator><name>h</name></name> <operator>&gt;&gt;</operator> <name><name>s</name><operator>-&gt;</operator><name>log2_mb_size</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>b_count</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>b_width</name></name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>b_height</name></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mv_table</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>av_mallocz_array</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>b_count</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>mv_table</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>mv_table</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>ff_me_init_context</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>me_ctx</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>mb_size</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>search_param</name></name></expr></argument>, <argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>w</name></name></expr></argument>, <argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>h</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>b_width</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>&lt;&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>log2_mb_size</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>b_height</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>&lt;&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>log2_mb_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>add_mv_data</name><parameter_list>(<parameter><decl><type><name>AVMotionVector</name> <modifier>*</modifier></type><name>mv</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mb_size</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x_mv</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y_mv</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dir</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>mv</name><operator>-&gt;</operator><name>w</name></name> <operator>=</operator> <name>mb_size</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mv</name><operator>-&gt;</operator><name>h</name></name> <operator>=</operator> <name>mb_size</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mv</name><operator>-&gt;</operator><name>dst_x</name></name> <operator>=</operator> <name>x</name> <operator>+</operator> <operator>(</operator><name>mb_size</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mv</name><operator>-&gt;</operator><name>dst_y</name></name> <operator>=</operator> <name>y</name> <operator>+</operator> <operator>(</operator><name>mb_size</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mv</name><operator>-&gt;</operator><name>src_x</name></name> <operator>=</operator> <name>x_mv</name> <operator>+</operator> <operator>(</operator><name>mb_size</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mv</name><operator>-&gt;</operator><name>src_y</name></name> <operator>=</operator> <name>y_mv</name> <operator>+</operator> <operator>(</operator><name>mb_size</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mv</name><operator>-&gt;</operator><name>source</name></name> <operator>=</operator> <ternary><condition><expr><name>dir</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mv</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SEARCH_MV</name><parameter_list>(<parameter><type><name>method</name></type></parameter>)</parameter_list></cpp:macro><cpp:value>do {for (mb_y = 0; mb_y &lt; s-&gt;b_height; mb_y++)for (mb_x = 0; mb_x &lt; s-&gt;b_width; mb_x++) {const int x_mb = mb_x &lt;&lt; s-&gt;log2_mb_size;const int y_mb = mb_y &lt;&lt; s-&gt;log2_mb_size;int mv[2] = {x_mb, y_mb};ff_me_search_##method(me_ctx, x_mb, y_mb, mv);add_mv_data(((AVMotionVector *) sd-&gt;data) + mv_count++, me_ctx-&gt;mb_size, x_mb, y_mb, mv[0], mv[1], dir);}} while (0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ADD_PRED</name><parameter_list>(<parameter><type><name>preds</name></type></parameter>, <parameter><type><name>px</name></type></parameter>, <parameter><type><name>py</name></type></parameter>)</parameter_list></cpp:macro><cpp:value>do {preds.mvs[preds.nb][0] = px;preds.mvs[preds.nb][1] = py;preds.nb++;} while(0)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>int</name></type> <name>filter_frame</name><parameter_list>(<parameter><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>inlink</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>frame</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>inlink</name><operator>-&gt;</operator><name>dst</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>MEContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVMotionEstContext</name> <modifier>*</modifier></type><name>me_ctx</name> <init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>me_ctx</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFrameSideData</name> <modifier>*</modifier></type><name>sd</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>out</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>mb_x</name></decl>, <decl><type ref="prev"/><name>mb_y</name></decl>, <decl><type ref="prev"/><name>dir</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name></type> <name>mv_count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>frame</name><operator>-&gt;</operator><name>pts</name></name> <operator>==</operator> <name>AV_NOPTS_VALUE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_filter_frame</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>outputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>prev</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>cur</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>cur</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>frame</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mv_table</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>memcpy</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>mv_table</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>mv_table</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>mv_table</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>b_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mv_table</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>memcpy</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>mv_table</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>mv_table</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>mv_table</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>b_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>cur</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>cur</name></name> <operator>=</operator> <call><name>av_frame_clone</name><argument_list>(<argument><expr><name>frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>cur</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>prev</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>out</name> <operator>=</operator> <call><name>av_frame_clone</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>cur</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>out</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>sd</name> <operator>=</operator> <call><name>av_frame_new_side_data</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>AV_FRAME_DATA_MOTION_VECTORS</name></expr></argument>, <argument><expr><literal type="number">2</literal> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>b_count</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>AVMotionVector</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>sd</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>me_ctx</name><operator>-&gt;</operator><name>data_cur</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>cur</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>me_ctx</name><operator>-&gt;</operator><name>linesize</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>cur</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>dir</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>dir</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>dir</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>me_ctx</name><operator>-&gt;</operator><name>data_ref</name></name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name>dir</name></expr> ?</condition><then> <expr><name><name>s</name><operator>-&gt;</operator><name>next</name></name></expr> </then><else>: <expr><name><name>s</name><operator>-&gt;</operator><name>prev</name></name></expr></else></ternary><operator>)</operator><operator>-&gt;</operator><name><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>method</name></name> <operator>==</operator> <name>AV_ME_METHOD_DS</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>SEARCH_MV</name><argument_list>(<argument><expr><name>ds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>method</name></name> <operator>==</operator> <name>AV_ME_METHOD_ESA</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>SEARCH_MV</name><argument_list>(<argument><expr><name>esa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>method</name></name> <operator>==</operator> <name>AV_ME_METHOD_FSS</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>SEARCH_MV</name><argument_list>(<argument><expr><name>fss</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>method</name></name> <operator>==</operator> <name>AV_ME_METHOD_NTSS</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>SEARCH_MV</name><argument_list>(<argument><expr><name>ntss</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>method</name></name> <operator>==</operator> <name>AV_ME_METHOD_TDLS</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>SEARCH_MV</name><argument_list>(<argument><expr><name>tdls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>method</name></name> <operator>==</operator> <name>AV_ME_METHOD_TSS</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>SEARCH_MV</name><argument_list>(<argument><expr><name>tss</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>method</name></name> <operator>==</operator> <name>AV_ME_METHOD_HEXBS</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>SEARCH_MV</name><argument_list>(<argument><expr><name>hexbs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>method</name></name> <operator>==</operator> <name>AV_ME_METHOD_UMH</name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>mb_y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>mb_y</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>b_height</name></name></expr>;</condition> <incr><expr><name>mb_y</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>mb_x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>mb_x</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>b_width</name></name></expr>;</condition> <incr><expr><name>mb_x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>mb_i</name> <init>= <expr><name>mb_x</name> <operator>+</operator> <name>mb_y</name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>b_width</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>x_mb</name> <init>= <expr><name>mb_x</name> <operator>&lt;&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>log2_mb_size</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>y_mb</name> <init>= <expr><name>mb_y</name> <operator>&lt;&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>log2_mb_size</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>mv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{<expr><name>x_mb</name></expr>, <expr><name>y_mb</name></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVMotionEstPredictor</name> <modifier>*</modifier></type><name>preds</name> <init>= <expr><name><name>me_ctx</name><operator>-&gt;</operator><name>preds</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>preds</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>nb</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ADD_PRED</name><argument_list>(<argument><expr><name><name>preds</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>mb_x</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ADD_PRED</name><argument_list>(<argument><expr><name><name>preds</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>mv_table</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>mb_i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><name>dir</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>mv_table</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>mb_i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><name>dir</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>mb_y</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ADD_PRED</name><argument_list>(<argument><expr><name><name>preds</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>mv_table</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>mb_i</name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>b_width</name></name></expr>]</index><index>[<expr><name>dir</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>mv_table</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>mb_i</name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>b_width</name></name></expr>]</index><index>[<expr><name>dir</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>mb_x</name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>b_width</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ADD_PRED</name><argument_list>(<argument><expr><name><name>preds</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>mv_table</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>mb_i</name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>b_width</name></name> <operator>+</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><name>dir</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>mv_table</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>mb_i</name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>b_width</name></name> <operator>+</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><name>dir</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>mb_x</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ADD_PRED</name><argument_list>(<argument><expr><name><name>preds</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>mv_table</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>mb_i</name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>b_width</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><name>dir</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>mv_table</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>mb_i</name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>b_width</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><name>dir</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>preds</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>nb</name> <operator>==</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>me_ctx</name><operator>-&gt;</operator><name>pred_x</name></name> <operator>=</operator> <call><name>mid_pred</name><argument_list>(<argument><expr><name><name>preds</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>mvs</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>preds</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>mvs</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>preds</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>mvs</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>me_ctx</name><operator>-&gt;</operator><name>pred_y</name></name> <operator>=</operator> <call><name>mid_pred</name><argument_list>(<argument><expr><name><name>preds</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>mvs</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>preds</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>mvs</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>preds</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>mvs</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>preds</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>nb</name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>me_ctx</name><operator>-&gt;</operator><name>pred_x</name></name> <operator>=</operator> <call><name>mid_pred</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>preds</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>mvs</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>preds</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>mvs</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>me_ctx</name><operator>-&gt;</operator><name>pred_y</name></name> <operator>=</operator> <call><name>mid_pred</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>preds</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>mvs</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>preds</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>mvs</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>preds</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>nb</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>me_ctx</name><operator>-&gt;</operator><name>pred_x</name></name> <operator>=</operator> <name><name>preds</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>mvs</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>me_ctx</name><operator>-&gt;</operator><name>pred_y</name></name> <operator>=</operator> <name><name>preds</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>mvs</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>me_ctx</name><operator>-&gt;</operator><name>pred_x</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>me_ctx</name><operator>-&gt;</operator><name>pred_y</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>ff_me_search_umh</name><argument_list>(<argument><expr><name>me_ctx</name></expr></argument>, <argument><expr><name>x_mb</name></expr></argument>, <argument><expr><name>y_mb</name></expr></argument>, <argument><expr><name>mv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mv_table</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>mb_i</name></expr>]</index><index>[<expr><name>dir</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>mv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <name>x_mb</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mv_table</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>mb_i</name></expr>]</index><index>[<expr><name>dir</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>mv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name>y_mb</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add_mv_data</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>AVMotionVector</name> <operator>*</operator><operator>)</operator> <name><name>sd</name><operator>-&gt;</operator><name>data</name></name><operator>)</operator> <operator>+</operator> <name>mv_count</name><operator>++</operator></expr></argument>, <argument><expr><name><name>me_ctx</name><operator>-&gt;</operator><name>mb_size</name></name></expr></argument>, <argument><expr><name>x_mb</name></expr></argument>, <argument><expr><name>y_mb</name></expr></argument>, <argument><expr><name><name>mv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>mv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for></block_content></block></for>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>method</name></name> <operator>==</operator> <name>AV_ME_METHOD_EPZS</name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>mb_y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>mb_y</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>b_height</name></name></expr>;</condition> <incr><expr><name>mb_y</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>mb_x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>mb_x</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>b_width</name></name></expr>;</condition> <incr><expr><name>mb_x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>mb_i</name> <init>= <expr><name>mb_x</name> <operator>+</operator> <name>mb_y</name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>b_width</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>x_mb</name> <init>= <expr><name>mb_x</name> <operator>&lt;&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>log2_mb_size</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>y_mb</name> <init>= <expr><name>mb_y</name> <operator>&lt;&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>log2_mb_size</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>mv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{<expr><name>x_mb</name></expr>, <expr><name>y_mb</name></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVMotionEstPredictor</name> <modifier>*</modifier></type><name>preds</name> <init>= <expr><name><name>me_ctx</name><operator>-&gt;</operator><name>preds</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>preds</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>nb</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>preds</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>nb</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ADD_PRED</name><argument_list>(<argument><expr><name><name>preds</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>mb_x</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ADD_PRED</name><argument_list>(<argument><expr><name><name>preds</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>mv_table</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>mb_i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><name>dir</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>mv_table</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>mb_i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><name>dir</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>mb_y</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ADD_PRED</name><argument_list>(<argument><expr><name><name>preds</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>mv_table</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>mb_i</name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>b_width</name></name></expr>]</index><index>[<expr><name>dir</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>mv_table</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>mb_i</name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>b_width</name></name></expr>]</index><index>[<expr><name>dir</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>mb_y</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>mb_x</name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>b_width</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ADD_PRED</name><argument_list>(<argument><expr><name><name>preds</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>mv_table</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>mb_i</name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>b_width</name></name> <operator>+</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><name>dir</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>mv_table</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>mb_i</name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>b_width</name></name> <operator>+</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><name>dir</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>preds</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>nb</name> <operator>==</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>me_ctx</name><operator>-&gt;</operator><name>pred_x</name></name> <operator>=</operator> <call><name>mid_pred</name><argument_list>(<argument><expr><name><name>preds</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>mvs</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>preds</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>mvs</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>preds</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>mvs</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>me_ctx</name><operator>-&gt;</operator><name>pred_y</name></name> <operator>=</operator> <call><name>mid_pred</name><argument_list>(<argument><expr><name><name>preds</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>mvs</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>preds</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>mvs</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>preds</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>mvs</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>preds</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>nb</name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>me_ctx</name><operator>-&gt;</operator><name>pred_x</name></name> <operator>=</operator> <call><name>mid_pred</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>preds</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>mvs</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>preds</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>mvs</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>me_ctx</name><operator>-&gt;</operator><name>pred_y</name></name> <operator>=</operator> <call><name>mid_pred</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>preds</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>mvs</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>preds</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>mvs</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>preds</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>nb</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>me_ctx</name><operator>-&gt;</operator><name>pred_x</name></name> <operator>=</operator> <name><name>preds</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>mvs</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>me_ctx</name><operator>-&gt;</operator><name>pred_y</name></name> <operator>=</operator> <name><name>preds</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>mvs</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>me_ctx</name><operator>-&gt;</operator><name>pred_x</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>me_ctx</name><operator>-&gt;</operator><name>pred_y</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>ADD_PRED</name><argument_list>(<argument><expr><name><name>preds</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>mv_table</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>mb_i</name></expr>]</index><index>[<expr><name>dir</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>mv_table</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>mb_i</name></expr>]</index><index>[<expr><name>dir</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ADD_PRED</name><argument_list>(<argument><expr><name><name>preds</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>mv_table</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>mb_i</name></expr>]</index><index>[<expr><name>dir</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>mv_table</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>mb_i</name></expr>]</index><index>[<expr><name>dir</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>mv_table</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>mb_i</name></expr>]</index><index>[<expr><name>dir</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>mv_table</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>mb_i</name></expr>]</index><index>[<expr><name>dir</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>mv_table</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>mb_i</name></expr>]</index><index>[<expr><name>dir</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>mv_table</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>mb_i</name></expr>]</index><index>[<expr><name>dir</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>mb_x</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ADD_PRED</name><argument_list>(<argument><expr><name><name>preds</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>mv_table</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>mb_i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><name>dir</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>mv_table</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>mb_i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><name>dir</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>mb_y</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ADD_PRED</name><argument_list>(<argument><expr><name><name>preds</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>mv_table</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>mb_i</name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>b_width</name></name></expr>]</index><index>[<expr><name>dir</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>mv_table</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>mb_i</name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>b_width</name></name></expr>]</index><index>[<expr><name>dir</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>mb_x</name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>b_width</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ADD_PRED</name><argument_list>(<argument><expr><name><name>preds</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>mv_table</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>mb_i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><name>dir</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>mv_table</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>mb_i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><name>dir</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>mb_y</name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>b_height</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ADD_PRED</name><argument_list>(<argument><expr><name><name>preds</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>mv_table</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>mb_i</name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>b_width</name></name></expr>]</index><index>[<expr><name>dir</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>mv_table</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>mb_i</name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>b_width</name></name></expr>]</index><index>[<expr><name>dir</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>ff_me_search_epzs</name><argument_list>(<argument><expr><name>me_ctx</name></expr></argument>, <argument><expr><name>x_mb</name></expr></argument>, <argument><expr><name>y_mb</name></expr></argument>, <argument><expr><name>mv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mv_table</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>mb_i</name></expr>]</index><index>[<expr><name>dir</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>mv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <name>x_mb</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mv_table</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>mb_i</name></expr>]</index><index>[<expr><name>dir</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>mv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name>y_mb</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add_mv_data</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>AVMotionVector</name> <operator>*</operator><operator>)</operator> <name><name>sd</name><operator>-&gt;</operator><name>data</name></name><operator>)</operator> <operator>+</operator> <name>mv_count</name><operator>++</operator></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>mb_size</name></name></expr></argument>, <argument><expr><name>x_mb</name></expr></argument>, <argument><expr><name>y_mb</name></expr></argument>, <argument><expr><name><name>mv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>mv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for></block_content></block></for>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><call><name>ff_filter_frame</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>outputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>void</name></type> <name>uninit</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>MEContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>prev</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>cur</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>next</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>mv_table</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVFilterPad</name></type> <name><name>mestimate_inputs</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"default"</literal></expr>,

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,

<expr><operator>.</operator><name>filter_frame</name> <operator>=</operator> <name>filter_frame</name></expr>,

<expr><operator>.</operator><name>config_props</name> <operator>=</operator> <name>config_input</name></expr>,

}</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVFilterPad</name></type> <name><name>mestimate_outputs</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"default"</literal></expr>,

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,

}</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFilter</name></type> <name>ff_vf_mestimate</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"mestimate"</literal></expr>,

<expr><operator>.</operator><name>description</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"Generate motion vectors."</literal></expr></argument>)</argument_list></call></expr>,

<expr><operator>.</operator><name>priv_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>MEContext</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><operator>.</operator><name>priv_class</name> <operator>=</operator> <operator>&amp;</operator><name>mestimate_class</name></expr>,

<expr><operator>.</operator><name>uninit</name> <operator>=</operator> <name>uninit</name></expr>,

<expr><operator>.</operator><name>query_formats</name> <operator>=</operator> <name>query_formats</name></expr>,

<expr><operator>.</operator><name>inputs</name> <operator>=</operator> <name>mestimate_inputs</name></expr>,

<expr><operator>.</operator><name>outputs</name> <operator>=</operator> <name>mestimate_outputs</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

</unit>
