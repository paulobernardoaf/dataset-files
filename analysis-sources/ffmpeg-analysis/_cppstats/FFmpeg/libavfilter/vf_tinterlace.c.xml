<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavfilter\vf_tinterlace.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/opt.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/imgutils.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avassert.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avfilter.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tinterlace.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OFFSET</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>offsetof(TInterlaceContext, x)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLAGS</name></cpp:macro> <cpp:value>AV_OPT_FLAG_FILTERING_PARAM|AV_OPT_FLAG_VIDEO_PARAM</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVOption</name></type> <name><name>tinterlace_options</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{<expr><literal type="string">"mode"</literal></expr>, <expr><literal type="string">"select interlace mode"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>MODE_MERGE</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>MODE_NB</name><operator>-</operator><literal type="number">1</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"mode"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"merge"</literal></expr>, <expr><literal type="string">"merge fields"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>MODE_MERGE</name></expr>}</block></expr>, <expr><name>INT_MIN</name></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"mode"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"drop_even"</literal></expr>, <expr><literal type="string">"drop even fields"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>MODE_DROP_EVEN</name></expr>}</block></expr>, <expr><name>INT_MIN</name></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"mode"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"drop_odd"</literal></expr>, <expr><literal type="string">"drop odd fields"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>MODE_DROP_ODD</name></expr>}</block></expr>, <expr><name>INT_MIN</name></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"mode"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"pad"</literal></expr>, <expr><literal type="string">"pad alternate lines with black"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>MODE_PAD</name></expr>}</block></expr>, <expr><name>INT_MIN</name></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"mode"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"interleave_top"</literal></expr>, <expr><literal type="string">"interleave top and bottom fields"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>MODE_INTERLEAVE_TOP</name></expr>}</block></expr>, <expr><name>INT_MIN</name></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"mode"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"interleave_bottom"</literal></expr>, <expr><literal type="string">"interleave bottom and top fields"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>MODE_INTERLEAVE_BOTTOM</name></expr>}</block></expr>, <expr><name>INT_MIN</name></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"mode"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"interlacex2"</literal></expr>, <expr><literal type="string">"interlace fields from two consecutive frames"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>MODE_INTERLACEX2</name></expr>}</block></expr>, <expr><name>INT_MIN</name></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"mode"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"mergex2"</literal></expr>, <expr><literal type="string">"merge fields keeping same frame rate"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>MODE_MERGEX2</name></expr>}</block></expr>, <expr><name>INT_MIN</name></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"mode"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"flags"</literal></expr>, <expr><literal type="string">"set flags"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_FLAGS</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>INT_MAX</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"flags"</literal></expr> }</block></expr>,

<expr><block>{<expr><literal type="string">"low_pass_filter"</literal></expr>, <expr><literal type="string">"enable vertical low-pass filter"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>TINTERLACE_FLAG_VLPF</name></expr>}</block></expr>, <expr><name>INT_MIN</name></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"flags"</literal></expr> }</block></expr>,

<expr><block>{<expr><literal type="string">"vlpf"</literal></expr>, <expr><literal type="string">"enable vertical low-pass filter"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>TINTERLACE_FLAG_VLPF</name></expr>}</block></expr>, <expr><name>INT_MIN</name></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"flags"</literal></expr> }</block></expr>,

<expr><block>{<expr><literal type="string">"complex_filter"</literal></expr>, <expr><literal type="string">"enable complex vertical low-pass filter"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>TINTERLACE_FLAG_CVLPF</name></expr>}</block></expr>,<expr><name>INT_MIN</name></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"flags"</literal></expr> }</block></expr>,

<expr><block>{<expr><literal type="string">"cvlpf"</literal></expr>, <expr><literal type="string">"enable complex vertical low-pass filter"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>TINTERLACE_FLAG_CVLPF</name></expr>}</block></expr>,<expr><name>INT_MIN</name></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"flags"</literal></expr> }</block></expr>,

<expr><block>{<expr><literal type="string">"exact_tb"</literal></expr>, <expr><literal type="string">"force a timebase which can represent timestamps exactly"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>TINTERLACE_FLAG_EXACT_TB</name></expr>}</block></expr>, <expr><name>INT_MIN</name></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"flags"</literal></expr> }</block></expr>,

<expr><block>{<expr><literal type="string">"bypass_il"</literal></expr>, <expr><literal type="string">"bypass already interlaced frames"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>TINTERLACE_FLAG_BYPASS_IL</name></expr>}</block></expr>, <expr><name>INT_MIN</name></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"flags"</literal></expr> }</block></expr>,

<expr><block>{<expr><name>NULL</name></expr>}</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>AVFILTER_DEFINE_CLASS</name><argument_list>(<argument><expr><name>tinterlace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVOption</name></type> <name><name>interlace_options</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><literal type="string">"scan"</literal></expr>, <expr><literal type="string">"scanning mode"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>MODE_TFF</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"mode"</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"tff"</literal></expr>, <expr><literal type="string">"top field first"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>MODE_TFF</name></expr>}</block></expr>, <expr><name>INT_MIN</name></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>FLAGS</name></expr>, <expr><operator>.</operator><name>unit</name> <operator>=</operator> <literal type="string">"mode"</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"bff"</literal></expr>, <expr><literal type="string">"bottom field first"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>MODE_BFF</name></expr>}</block></expr>, <expr><name>INT_MIN</name></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>FLAGS</name></expr>, <expr><operator>.</operator><name>unit</name> <operator>=</operator> <literal type="string">"mode"</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"lowpass"</literal></expr>, <expr><literal type="string">"set vertical low-pass filter"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>lowpass</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>VLPF_LIN</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"lowpass"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"off"</literal></expr>, <expr><literal type="string">"disable vertical low-pass filter"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>VLPF_OFF</name></expr>}</block></expr>, <expr><name>INT_MIN</name></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"lowpass"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"linear"</literal></expr>, <expr><literal type="string">"linear vertical low-pass filter"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>VLPF_LIN</name></expr>}</block></expr>, <expr><name>INT_MIN</name></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"lowpass"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"complex"</literal></expr>, <expr><literal type="string">"complex vertical low-pass filter"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>VLPF_CMP</name></expr>}</block></expr>, <expr><name>INT_MIN</name></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"lowpass"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>AVFILTER_DEFINE_CLASS</name><argument_list>(<argument><expr><name>interlace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FULL_SCALE_YUVJ_FORMATS</name></cpp:macro> <cpp:value>AV_PIX_FMT_YUVJ420P, AV_PIX_FMT_YUVJ422P, AV_PIX_FMT_YUVJ444P, AV_PIX_FMT_YUVJ440P</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>enum</name> <name>AVPixelFormat</name></name></type> <name><name>full_scale_yuvj_pix_fmts</name><index>[]</index></name> <init>= <expr><block>{

<expr><name>FULL_SCALE_YUVJ_FORMATS</name></expr>, <expr><name>AV_PIX_FMT_NONE</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVRational</name></type> <name><name>standard_tbs</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{<expr><literal type="number">1</literal></expr>, <expr><literal type="number">25</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">1</literal></expr>, <expr><literal type="number">30</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">1001</literal></expr>, <expr><literal type="number">30000</literal></expr>}</block></expr>,

}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int</name></type> <name>query_formats</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>enum</name> <name>AVPixelFormat</name></name></type> <name><name>pix_fmts</name><index>[]</index></name> <init>= <expr><block>{

<expr><name>AV_PIX_FMT_YUV410P</name></expr>, <expr><name>AV_PIX_FMT_YUV411P</name></expr>,

<expr><name>AV_PIX_FMT_YUV420P</name></expr>, <expr><name>AV_PIX_FMT_YUV422P</name></expr>,

<expr><name>AV_PIX_FMT_YUV440P</name></expr>, <expr><name>AV_PIX_FMT_YUV444P</name></expr>,

<expr><name>AV_PIX_FMT_YUV420P10LE</name></expr>, <expr><name>AV_PIX_FMT_YUV422P10LE</name></expr>,

<expr><name>AV_PIX_FMT_YUV440P10LE</name></expr>, <expr><name>AV_PIX_FMT_YUV444P10LE</name></expr>,

<expr><name>AV_PIX_FMT_YUV420P12LE</name></expr>, <expr><name>AV_PIX_FMT_YUV422P12LE</name></expr>,

<expr><name>AV_PIX_FMT_YUV440P12LE</name></expr>, <expr><name>AV_PIX_FMT_YUV444P12LE</name></expr>,

<expr><name>AV_PIX_FMT_YUVA420P</name></expr>, <expr><name>AV_PIX_FMT_YUVA422P</name></expr>, <expr><name>AV_PIX_FMT_YUVA444P</name></expr>,

<expr><name>AV_PIX_FMT_YUVA420P10LE</name></expr>, <expr><name>AV_PIX_FMT_YUVA422P10LE</name></expr>, <expr><name>AV_PIX_FMT_YUVA444P10LE</name></expr>,

<expr><name>AV_PIX_FMT_GRAY8</name></expr>, <expr><name>FULL_SCALE_YUVJ_FORMATS</name></expr>,

<expr><name>AV_PIX_FMT_NONE</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFilterFormats</name> <modifier>*</modifier></type><name>fmts_list</name> <init>= <expr><call><name>ff_make_format_list</name><argument_list>(<argument><expr><name>pix_fmts</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>fmts_list</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>ff_set_common_formats</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>fmts_list</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>lowpass_line_c</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dstp</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>srcp</name></decl></parameter>,

<parameter><decl><type><name>ptrdiff_t</name></type> <name>mref</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>pref</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>clip_max</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>srcp_above</name> <init>= <expr><name>srcp</name> <operator>+</operator> <name>mref</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>srcp_below</name> <init>= <expr><name>srcp</name> <operator>+</operator> <name>pref</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>dstp</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><literal type="number">1</literal> <operator>+</operator> <name><name>srcp</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name><name>srcp</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name><name>srcp_above</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name><name>srcp_below</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>lowpass_line_c_16</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst8</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src8</name></decl></parameter>,

<parameter><decl><type><name>ptrdiff_t</name></type> <name>mref</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>pref</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>clip_max</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dstp</name> <init>= <expr><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><name>dst8</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>srcp</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint16_t</name> <operator>*</operator><operator>)</operator><name>src8</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>srcp_above</name> <init>= <expr><name>srcp</name> <operator>+</operator> <name>mref</name> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>srcp_below</name> <init>= <expr><name>srcp</name> <operator>+</operator> <name>pref</name> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>src_x</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>src_x</name> <operator>=</operator> <call><name>av_le2ne16</name><argument_list>(<argument><expr><name><name>srcp</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dstp</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>av_le2ne16</name><argument_list>(<argument><expr><operator>(</operator><literal type="number">1</literal> <operator>+</operator> <name>src_x</name> <operator>+</operator> <call><name>av_le2ne16</name><argument_list>(<argument><expr><name><name>srcp_above</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call>

<operator>+</operator> <call><name>av_le2ne16</name><argument_list>(<argument><expr><name><name>srcp_below</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>lowpass_line_complex_c</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dstp</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>srcp</name></decl></parameter>,

<parameter><decl><type><name>ptrdiff_t</name></type> <name>mref</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>pref</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>clip_max</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>srcp_above</name> <init>= <expr><name>srcp</name> <operator>+</operator> <name>mref</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>srcp_below</name> <init>= <expr><name>srcp</name> <operator>+</operator> <name>pref</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>srcp_above2</name> <init>= <expr><name>srcp</name> <operator>+</operator> <name>mref</name> <operator>*</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>srcp_below2</name> <init>= <expr><name>srcp</name> <operator>+</operator> <name>pref</name> <operator>*</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>src_x</name></decl>, <decl><type ref="prev"/><name>src_ab</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>src_x</name> <operator>=</operator> <name><name>srcp</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>src_ab</name> <operator>=</operator> <name><name>srcp_above</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name><name>srcp_below</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dstp</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>av_clip_uint8</name><argument_list>(<argument><expr><operator>(</operator><literal type="number">4</literal> <operator>+</operator> <operator>(</operator><operator>(</operator><name><name>srcp</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name>src_x</name> <operator>+</operator> <name>src_ab</name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator>

<operator>-</operator> <name><name>srcp_above2</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <name><name>srcp_below2</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>src_ab</name> <operator>&gt;</operator> <name>src_x</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>dstp</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;</operator> <name><name>srcp</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>dstp</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>srcp</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>dstp</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;</operator> <name><name>srcp</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>dstp</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>srcp</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>lowpass_line_complex_c_16</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst8</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src8</name></decl></parameter>,

<parameter><decl><type><name>ptrdiff_t</name></type> <name>mref</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>pref</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>clip_max</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dstp</name> <init>= <expr><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><name>dst8</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>srcp</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint16_t</name> <operator>*</operator><operator>)</operator><name>src8</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>srcp_above</name> <init>= <expr><name>srcp</name> <operator>+</operator> <name>mref</name> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>srcp_below</name> <init>= <expr><name>srcp</name> <operator>+</operator> <name>pref</name> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>srcp_above2</name> <init>= <expr><name>srcp</name> <operator>+</operator> <name>mref</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>srcp_below2</name> <init>= <expr><name>srcp</name> <operator>+</operator> <name>pref</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>dst_le</name></decl>, <decl><type ref="prev"/><name>src_le</name></decl>, <decl><type ref="prev"/><name>src_x</name></decl>, <decl><type ref="prev"/><name>src_ab</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>src_le</name> <operator>=</operator> <call><name>av_le2ne16</name><argument_list>(<argument><expr><name><name>srcp</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>src_x</name> <operator>=</operator> <name>src_le</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>src_ab</name> <operator>=</operator> <call><name>av_le2ne16</name><argument_list>(<argument><expr><name><name>srcp_above</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>av_le2ne16</name><argument_list>(<argument><expr><name><name>srcp_below</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst_le</name> <operator>=</operator> <call><name>av_clip</name><argument_list>(<argument><expr><operator>(</operator><literal type="number">4</literal> <operator>+</operator> <operator>(</operator><operator>(</operator><name>src_le</name> <operator>+</operator> <name>src_x</name> <operator>+</operator> <name>src_ab</name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator>

<operator>-</operator> <call><name>av_le2ne16</name><argument_list>(<argument><expr><name><name>srcp_above2</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call>

<operator>-</operator> <call><name>av_le2ne16</name><argument_list>(<argument><expr><name><name>srcp_below2</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>clip_max</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>src_ab</name> <operator>&gt;</operator> <name>src_x</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>dst_le</name> <operator>&lt;</operator> <name>src_le</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>dstp</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>av_le2ne16</name><argument_list>(<argument><expr><name>src_le</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>dstp</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>av_le2ne16</name><argument_list>(<argument><expr><name>dst_le</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>dst_le</name> <operator>&gt;</operator> <name>src_le</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>dstp</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>av_le2ne16</name><argument_list>(<argument><expr><name>src_le</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>dstp</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>av_le2ne16</name><argument_list>(<argument><expr><name>dst_le</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>void</name></type> <name>uninit</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>TInterlaceContext</name> <modifier>*</modifier></type><name>tinterlace</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tinterlace</name><operator>-&gt;</operator><name>cur</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tinterlace</name><operator>-&gt;</operator><name>next</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tinterlace</name><operator>-&gt;</operator><name>black_data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>config_out_props</name><parameter_list>(<parameter><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>outlink</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>outlink</name><operator>-&gt;</operator><name>src</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>inlink</name> <init>= <expr><name><name>outlink</name><operator>-&gt;</operator><name>src</name><operator>-&gt;</operator><name>inputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>AVPixFmtDescriptor</name> <modifier>*</modifier></type><name>desc</name> <init>= <expr><call><name>av_pix_fmt_desc_get</name><argument_list>(<argument><expr><name><name>outlink</name><operator>-&gt;</operator><name>format</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>TInterlaceContext</name> <modifier>*</modifier></type><name>tinterlace</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>tinterlace</name><operator>-&gt;</operator><name>vsub</name></name> <operator>=</operator> <name><name>desc</name><operator>-&gt;</operator><name>log2_chroma_h</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>outlink</name><operator>-&gt;</operator><name>w</name></name> <operator>=</operator> <name><name>inlink</name><operator>-&gt;</operator><name>w</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>outlink</name><operator>-&gt;</operator><name>h</name></name> <operator>=</operator> <ternary><condition><expr><name><name>tinterlace</name><operator>-&gt;</operator><name>mode</name></name> <operator>==</operator> <name>MODE_MERGE</name> <operator>||</operator> <name><name>tinterlace</name><operator>-&gt;</operator><name>mode</name></name> <operator>==</operator> <name>MODE_PAD</name> <operator>||</operator> <name><name>tinterlace</name><operator>-&gt;</operator><name>mode</name></name> <operator>==</operator> <name>MODE_MERGEX2</name></expr>?</condition><then>

<expr><name><name>inlink</name><operator>-&gt;</operator><name>h</name></name><operator>*</operator><literal type="number">2</literal></expr> </then><else>: <expr><name><name>inlink</name><operator>-&gt;</operator><name>h</name></name></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>tinterlace</name><operator>-&gt;</operator><name>mode</name></name> <operator>==</operator> <name>MODE_MERGE</name> <operator>||</operator> <name><name>tinterlace</name><operator>-&gt;</operator><name>mode</name></name> <operator>==</operator> <name>MODE_PAD</name> <operator>||</operator> <name><name>tinterlace</name><operator>-&gt;</operator><name>mode</name></name> <operator>==</operator> <name>MODE_MERGEX2</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>outlink</name><operator>-&gt;</operator><name>sample_aspect_ratio</name></name> <operator>=</operator> <call><name>av_mul_q</name><argument_list>(<argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>sample_aspect_ratio</name></name></expr></argument>,

<argument><expr><call><name>av_make_q</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>tinterlace</name><operator>-&gt;</operator><name>mode</name></name> <operator>==</operator> <name>MODE_PAD</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>black</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">16</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ff_draw_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tinterlace</name><operator>-&gt;</operator><name>draw</name></name></expr></argument>, <argument><expr><name><name>outlink</name><operator>-&gt;</operator><name>format</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_draw_color</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tinterlace</name><operator>-&gt;</operator><name>draw</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tinterlace</name><operator>-&gt;</operator><name>color</name></name></expr></argument>, <argument><expr><name>black</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ff_fmt_is_in</name><argument_list>(<argument><expr><name><name>outlink</name><operator>-&gt;</operator><name>format</name></name></expr></argument>, <argument><expr><name>full_scale_yuvj_pix_fmts</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>tinterlace</name><operator>-&gt;</operator><name>color</name><operator>.</operator><name>comp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>u8</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>av_image_alloc</name><argument_list>(<argument><expr><name><name>tinterlace</name><operator>-&gt;</operator><name>black_data</name></name></expr></argument>, <argument><expr><name><name>tinterlace</name><operator>-&gt;</operator><name>black_linesize</name></name></expr></argument>,

<argument><expr><name><name>outlink</name><operator>-&gt;</operator><name>w</name></name></expr></argument>, <argument><expr><name><name>outlink</name><operator>-&gt;</operator><name>h</name></name></expr></argument>, <argument><expr><name><name>outlink</name><operator>-&gt;</operator><name>format</name></name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>ff_fill_rectangle</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tinterlace</name><operator>-&gt;</operator><name>draw</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tinterlace</name><operator>-&gt;</operator><name>color</name></name></expr></argument>, <argument><expr><name><name>tinterlace</name><operator>-&gt;</operator><name>black_data</name></name></expr></argument>,

<argument><expr><name><name>tinterlace</name><operator>-&gt;</operator><name>black_linesize</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>outlink</name><operator>-&gt;</operator><name>w</name></name></expr></argument>, <argument><expr><name><name>outlink</name><operator>-&gt;</operator><name>h</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>tinterlace</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <operator>(</operator><name>TINTERLACE_FLAG_VLPF</name> <operator>|</operator> <name>TINTERLACE_FLAG_CVLPF</name><operator>)</operator>

<operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>tinterlace</name><operator>-&gt;</operator><name>mode</name></name> <operator>==</operator> <name>MODE_INTERLEAVE_TOP</name>

<operator>||</operator> <name><name>tinterlace</name><operator>-&gt;</operator><name>mode</name></name> <operator>==</operator> <name>MODE_INTERLEAVE_BOTTOM</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"low_pass_filter flags ignored with mode %d\n"</literal></expr></argument>,

<argument><expr><name><name>tinterlace</name><operator>-&gt;</operator><name>mode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tinterlace</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>TINTERLACE_FLAG_VLPF</name> <operator>|</operator> <name>TINTERLACE_FLAG_CVLPF</name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>tinterlace</name><operator>-&gt;</operator><name>preout_time_base</name></name> <operator>=</operator> <name><name>inlink</name><operator>-&gt;</operator><name>time_base</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>tinterlace</name><operator>-&gt;</operator><name>mode</name></name> <operator>==</operator> <name>MODE_INTERLACEX2</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>tinterlace</name><operator>-&gt;</operator><name>preout_time_base</name><operator>.</operator><name>den</name></name> <operator>*=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>outlink</name><operator>-&gt;</operator><name>frame_rate</name></name> <operator>=</operator> <macro><name>av_mul_q</name><argument_list>(<argument>inlink-&gt;frame_rate</argument>, <argument>(AVRational){<literal type="number">2</literal></argument>,<argument><literal type="number">1</literal>}</argument>)</argument_list></macro></expr>;</expr_stmt>

<expr_stmt><expr><name><name>outlink</name><operator>-&gt;</operator><name>time_base</name></name> <operator>=</operator> <macro><name>av_mul_q</name><argument_list>(<argument>inlink-&gt;time_base</argument> , <argument>(AVRational){<literal type="number">1</literal></argument>,<argument><literal type="number">2</literal>}</argument>)</argument_list></macro></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>tinterlace</name><operator>-&gt;</operator><name>mode</name></name> <operator>==</operator> <name>MODE_MERGEX2</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>outlink</name><operator>-&gt;</operator><name>frame_rate</name></name> <operator>=</operator> <name><name>inlink</name><operator>-&gt;</operator><name>frame_rate</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>outlink</name><operator>-&gt;</operator><name>time_base</name></name> <operator>=</operator> <name><name>inlink</name><operator>-&gt;</operator><name>time_base</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>tinterlace</name><operator>-&gt;</operator><name>mode</name></name> <operator>!=</operator> <name>MODE_PAD</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>outlink</name><operator>-&gt;</operator><name>frame_rate</name></name> <operator>=</operator> <macro><name>av_mul_q</name><argument_list>(<argument>inlink-&gt;frame_rate</argument>, <argument>(AVRational){<literal type="number">1</literal></argument>,<argument><literal type="number">2</literal>}</argument>)</argument_list></macro></expr>;</expr_stmt>

<expr_stmt><expr><name><name>outlink</name><operator>-&gt;</operator><name>time_base</name></name> <operator>=</operator> <macro><name>av_mul_q</name><argument_list>(<argument>inlink-&gt;time_base</argument> , <argument>(AVRational){<literal type="number">2</literal></argument>,<argument><literal type="number">1</literal>}</argument>)</argument_list></macro></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>standard_tbs</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>av_cmp_q</name><argument_list>(<argument><expr><name><name>standard_tbs</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>outlink</name><operator>-&gt;</operator><name>time_base</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>standard_tbs</name></expr></argument>)</argument_list></call> <operator>||</operator>

<operator>(</operator><name><name>tinterlace</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>TINTERLACE_FLAG_EXACT_TB</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>outlink</name><operator>-&gt;</operator><name>time_base</name></name> <operator>=</operator> <name><name>tinterlace</name><operator>-&gt;</operator><name>preout_time_base</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>tinterlace</name><operator>-&gt;</operator><name>csp</name></name> <operator>=</operator> <call><name>av_pix_fmt_desc_get</name><argument_list>(<argument><expr><name><name>outlink</name><operator>-&gt;</operator><name>format</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>tinterlace</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>TINTERLACE_FLAG_CVLPF</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>tinterlace</name><operator>-&gt;</operator><name>csp</name><operator>-&gt;</operator><name>comp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>depth</name> <operator>&gt;</operator> <literal type="number">8</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>tinterlace</name><operator>-&gt;</operator><name>lowpass_line</name></name> <operator>=</operator> <name>lowpass_line_complex_c_16</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>tinterlace</name><operator>-&gt;</operator><name>lowpass_line</name></name> <operator>=</operator> <name>lowpass_line_complex_c</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ARCH_X86</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ff_tinterlace_init_x86</name><argument_list>(<argument><expr><name>tinterlace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>tinterlace</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>TINTERLACE_FLAG_VLPF</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>tinterlace</name><operator>-&gt;</operator><name>csp</name><operator>-&gt;</operator><name>comp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>depth</name> <operator>&gt;</operator> <literal type="number">8</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>tinterlace</name><operator>-&gt;</operator><name>lowpass_line</name></name> <operator>=</operator> <name>lowpass_line_c_16</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>tinterlace</name><operator>-&gt;</operator><name>lowpass_line</name></name> <operator>=</operator> <name>lowpass_line_c</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ARCH_X86</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ff_tinterlace_init_x86</name><argument_list>(<argument><expr><name>tinterlace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_VERBOSE</name></expr></argument>, <argument><expr><literal type="string">"mode:%d filter:%s h:%d -&gt; h:%d\n"</literal></expr></argument>, <argument><expr><name><name>tinterlace</name><operator>-&gt;</operator><name>mode</name></name></expr></argument>,

<argument><expr><ternary><condition><expr><operator>(</operator><name><name>tinterlace</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>TINTERLACE_FLAG_CVLPF</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">"complex"</literal></expr> </then><else>:

<expr><ternary><condition><expr><operator>(</operator><name><name>tinterlace</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>TINTERLACE_FLAG_VLPF</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">"linear"</literal></expr> </then><else>: <expr><literal type="string">"off"</literal></expr></else></ternary></expr></else></ternary></expr></argument>,

<argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>h</name></name></expr></argument>, <argument><expr><name><name>outlink</name><operator>-&gt;</operator><name>h</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FIELD_UPPER</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FIELD_LOWER</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FIELD_UPPER_AND_LOWER</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <specifier>inline</specifier>

<name>void</name></type> <name>copy_picture_field</name><parameter_list>(<parameter><decl><type><name>TInterlaceContext</name> <modifier>*</modifier></type><name>tinterlace</name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name><name>dst</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name><name>dst_linesize</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name><name>src</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name><name>src_linesize</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl></parameter>,

<parameter><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>format</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_h</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>src_field</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>interleave</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_field</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>AVPixFmtDescriptor</name> <modifier>*</modifier></type><name>desc</name> <init>= <expr><call><name>av_pix_fmt_desc_get</name><argument_list>(<argument><expr><name>format</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>hsub</name> <init>= <expr><name><name>desc</name><operator>-&gt;</operator><name>log2_chroma_w</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>plane</name></decl>, <decl><type ref="prev"/><name>vsub</name> <init>= <expr><name><name>desc</name><operator>-&gt;</operator><name>log2_chroma_h</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>k</name> <init>= <expr><ternary><condition><expr><name>src_field</name> <operator>==</operator> <name>FIELD_UPPER_AND_LOWER</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">2</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>h</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>plane</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>plane</name> <operator>&lt;</operator> <name><name>desc</name><operator>-&gt;</operator><name>nb_components</name></name></expr>;</condition> <incr><expr><name>plane</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>lines</name> <init>= <expr><ternary><condition><expr><name>plane</name> <operator>==</operator> <literal type="number">1</literal> <operator>||</operator> <name>plane</name> <operator>==</operator> <literal type="number">2</literal></expr> ?</condition><then> <expr><call><name>AV_CEIL_RSHIFT</name><argument_list>(<argument><expr><name>src_h</name></expr></argument>, <argument><expr><name>vsub</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>src_h</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>cols</name> <init>= <expr><ternary><condition><expr><name>plane</name> <operator>==</operator> <literal type="number">1</literal> <operator>||</operator> <name>plane</name> <operator>==</operator> <literal type="number">2</literal></expr> ?</condition><then> <expr><call><name>AV_CEIL_RSHIFT</name><argument_list>( <argument><expr><name>w</name></expr></argument>, <argument><expr><name>hsub</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>w</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dstp</name> <init>= <expr><name><name>dst</name><index>[<expr><name>plane</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>srcp</name> <init>= <expr><name><name>src</name><index>[<expr><name>plane</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>srcp_linesize</name> <init>= <expr><name><name>src_linesize</name><index>[<expr><name>plane</name></expr>]</index></name> <operator>*</operator> <name>k</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>dstp_linesize</name> <init>= <expr><name><name>dst_linesize</name><index>[<expr><name>plane</name></expr>]</index></name> <operator>*</operator> <operator>(</operator><ternary><condition><expr><name>interleave</name></expr> ?</condition><then> <expr><literal type="number">2</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>clip_max</name> <init>= <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name><name>tinterlace</name><operator>-&gt;</operator><name>csp</name><operator>-&gt;</operator><name>comp</name><index>[<expr><name>plane</name></expr>]</index></name><operator>.</operator><name>depth</name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>lines</name> <operator>=</operator> <operator>(</operator><name>lines</name> <operator>+</operator> <operator>(</operator><name>src_field</name> <operator>==</operator> <name>FIELD_UPPER</name><operator>)</operator><operator>)</operator> <operator>/</operator> <name>k</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>src_field</name> <operator>==</operator> <name>FIELD_LOWER</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>srcp</name> <operator>+=</operator> <name><name>src_linesize</name><index>[<expr><name>plane</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>interleave</name> <operator>&amp;&amp;</operator> <name>dst_field</name> <operator>==</operator> <name>FIELD_LOWER</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>dstp</name> <operator>+=</operator> <name><name>dst_linesize</name><index>[<expr><name>plane</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <operator>(</operator><name>TINTERLACE_FLAG_VLPF</name> <operator>|</operator> <name>TINTERLACE_FLAG_CVLPF</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>x</name> <init>= <expr><operator>!</operator><operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>TINTERLACE_FLAG_CVLPF</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>h</name> <operator>=</operator> <name>lines</name></expr>;</init> <condition><expr><name>h</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>h</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>ptrdiff_t</name></type> <name>pref</name> <init>= <expr><name><name>src_linesize</name><index>[<expr><name>plane</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ptrdiff_t</name></type> <name>mref</name> <init>= <expr><operator>-</operator><name>pref</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>h</name> <operator>&gt;=</operator> <operator>(</operator><name>lines</name> <operator>-</operator> <name>x</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>mref</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if> 

<if type="elseif">else if <condition>(<expr><name>h</name> <operator>&lt;=</operator> <operator>(</operator><literal type="number">1</literal> <operator>+</operator> <name>x</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>pref</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<expr_stmt><expr><call><name><name>tinterlace</name><operator>-&gt;</operator><name>lowpass_line</name></name><argument_list>(<argument><expr><name>dstp</name></expr></argument>, <argument><expr><name>cols</name></expr></argument>, <argument><expr><name>srcp</name></expr></argument>, <argument><expr><name>mref</name></expr></argument>, <argument><expr><name>pref</name></expr></argument>, <argument><expr><name>clip_max</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dstp</name> <operator>+=</operator> <name>dstp_linesize</name></expr>;</expr_stmt>

<expr_stmt><expr><name>srcp</name> <operator>+=</operator> <name>srcp_linesize</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>tinterlace</name><operator>-&gt;</operator><name>csp</name><operator>-&gt;</operator><name>comp</name><index>[<expr><name>plane</name></expr>]</index></name><operator>.</operator><name>depth</name> <operator>&gt;</operator> <literal type="number">8</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>cols</name> <operator>*=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_image_copy_plane</name><argument_list>(<argument><expr><name>dstp</name></expr></argument>, <argument><expr><name>dstp_linesize</name></expr></argument>, <argument><expr><name>srcp</name></expr></argument>, <argument><expr><name>srcp_linesize</name></expr></argument>, <argument><expr><name>cols</name></expr></argument>, <argument><expr><name>lines</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>filter_frame</name><parameter_list>(<parameter><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>inlink</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>picref</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>inlink</name><operator>-&gt;</operator><name>dst</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>outlink</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>outputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>TInterlaceContext</name> <modifier>*</modifier></type><name>tinterlace</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>cur</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>next</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>out</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>field</name></decl>, <decl><type ref="prev"/><name>tff</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tinterlace</name><operator>-&gt;</operator><name>cur</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tinterlace</name><operator>-&gt;</operator><name>cur</name></name> <operator>=</operator> <name><name>tinterlace</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tinterlace</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>picref</name></expr>;</expr_stmt>

<expr_stmt><expr><name>cur</name> <operator>=</operator> <name><name>tinterlace</name><operator>-&gt;</operator><name>cur</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>next</name> <operator>=</operator> <name><name>tinterlace</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>tinterlace</name><operator>-&gt;</operator><name>cur</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<switch>switch <condition>(<expr><name><name>tinterlace</name><operator>-&gt;</operator><name>mode</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>MODE_MERGEX2</name></expr>:</case> 

<case>case <expr><name>MODE_MERGE</name></expr>:</case> 

<expr_stmt><expr><name>out</name> <operator>=</operator> <call><name>ff_get_video_buffer</name><argument_list>(<argument><expr><name>outlink</name></expr></argument>, <argument><expr><name><name>outlink</name><operator>-&gt;</operator><name>w</name></name></expr></argument>, <argument><expr><name><name>outlink</name><operator>-&gt;</operator><name>h</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>out</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_frame_copy_props</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>cur</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <name><name>outlink</name><operator>-&gt;</operator><name>h</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>interlaced_frame</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>top_field_first</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>sample_aspect_ratio</name></name> <operator>=</operator> <call><name>av_mul_q</name><argument_list>(<argument><expr><name><name>cur</name><operator>-&gt;</operator><name>sample_aspect_ratio</name></name></expr></argument>, <argument><expr><call><name>av_make_q</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>copy_picture_field</name><argument_list>(<argument><expr><name>tinterlace</name></expr></argument>, <argument><expr><name><name>out</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>out</name><operator>-&gt;</operator><name>linesize</name></name></expr></argument>,

<argument><expr><operator>(</operator><specifier>const</specifier> <name>uint8_t</name> <operator>*</operator><operator>*</operator><operator>)</operator><name><name>cur</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>cur</name><operator>-&gt;</operator><name>linesize</name></name></expr></argument>,

<argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>format</name></name></expr></argument>, <argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>w</name></name></expr></argument>, <argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>h</name></name></expr></argument>,

<argument><expr><name>FIELD_UPPER_AND_LOWER</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><ternary><condition><expr><name><name>tinterlace</name><operator>-&gt;</operator><name>mode</name></name> <operator>==</operator> <name>MODE_MERGEX2</name></expr> ?</condition><then> <expr><ternary><condition><expr><name><name>inlink</name><operator>-&gt;</operator><name>frame_count_out</name></name> <operator>&amp;</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><name>FIELD_LOWER</name></expr> </then><else>: <expr><name>FIELD_UPPER</name></expr></else></ternary></expr> </then><else>: <expr><name>FIELD_UPPER</name></expr></else></ternary></expr></argument>, <argument><expr><name><name>tinterlace</name><operator>-&gt;</operator><name>flags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>copy_picture_field</name><argument_list>(<argument><expr><name>tinterlace</name></expr></argument>, <argument><expr><name><name>out</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>out</name><operator>-&gt;</operator><name>linesize</name></name></expr></argument>,

<argument><expr><operator>(</operator><specifier>const</specifier> <name>uint8_t</name> <operator>*</operator><operator>*</operator><operator>)</operator><name><name>next</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>next</name><operator>-&gt;</operator><name>linesize</name></name></expr></argument>,

<argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>format</name></name></expr></argument>, <argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>w</name></name></expr></argument>, <argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>h</name></name></expr></argument>,

<argument><expr><name>FIELD_UPPER_AND_LOWER</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><ternary><condition><expr><name><name>tinterlace</name><operator>-&gt;</operator><name>mode</name></name> <operator>==</operator> <name>MODE_MERGEX2</name></expr> ?</condition><then> <expr><ternary><condition><expr><name><name>inlink</name><operator>-&gt;</operator><name>frame_count_out</name></name> <operator>&amp;</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><name>FIELD_UPPER</name></expr> </then><else>: <expr><name>FIELD_LOWER</name></expr></else></ternary></expr> </then><else>: <expr><name>FIELD_LOWER</name></expr></else></ternary></expr></argument>, <argument><expr><name><name>tinterlace</name><operator>-&gt;</operator><name>flags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>tinterlace</name><operator>-&gt;</operator><name>mode</name></name> <operator>!=</operator> <name>MODE_MERGEX2</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tinterlace</name><operator>-&gt;</operator><name>next</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<break>break;</break>

<case>case <expr><name>MODE_DROP_ODD</name></expr>:</case> 

<case>case <expr><name>MODE_DROP_EVEN</name></expr>:</case> 

<expr_stmt><expr><name>out</name> <operator>=</operator> <call><name>av_frame_clone</name><argument_list>(<argument><expr><ternary><condition><expr><name><name>tinterlace</name><operator>-&gt;</operator><name>mode</name></name> <operator>==</operator> <name>MODE_DROP_EVEN</name></expr> ?</condition><then> <expr><name>cur</name></expr> </then><else>: <expr><name>next</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>out</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tinterlace</name><operator>-&gt;</operator><name>next</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>MODE_PAD</name></expr>:</case> 

<expr_stmt><expr><name>out</name> <operator>=</operator> <call><name>ff_get_video_buffer</name><argument_list>(<argument><expr><name>outlink</name></expr></argument>, <argument><expr><name><name>outlink</name><operator>-&gt;</operator><name>w</name></name></expr></argument>, <argument><expr><name><name>outlink</name><operator>-&gt;</operator><name>h</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>out</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_frame_copy_props</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>cur</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <name><name>outlink</name><operator>-&gt;</operator><name>h</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>sample_aspect_ratio</name></name> <operator>=</operator> <call><name>av_mul_q</name><argument_list>(<argument><expr><name><name>cur</name><operator>-&gt;</operator><name>sample_aspect_ratio</name></name></expr></argument>, <argument><expr><call><name>av_make_q</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>field</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><literal type="number">1</literal> <operator>+</operator> <name><name>tinterlace</name><operator>-&gt;</operator><name>frame</name></name><operator>)</operator> <operator>&amp;</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><name>FIELD_UPPER</name></expr> </then><else>: <expr><name>FIELD_LOWER</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><call><name>copy_picture_field</name><argument_list>(<argument><expr><name>tinterlace</name></expr></argument>, <argument><expr><name><name>out</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>out</name><operator>-&gt;</operator><name>linesize</name></name></expr></argument>,

<argument><expr><operator>(</operator><specifier>const</specifier> <name>uint8_t</name> <operator>*</operator><operator>*</operator><operator>)</operator><name><name>cur</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>cur</name><operator>-&gt;</operator><name>linesize</name></name></expr></argument>,

<argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>format</name></name></expr></argument>, <argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>w</name></name></expr></argument>, <argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>h</name></name></expr></argument>,

<argument><expr><name>FIELD_UPPER_AND_LOWER</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>field</name></expr></argument>, <argument><expr><name><name>tinterlace</name><operator>-&gt;</operator><name>flags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>copy_picture_field</name><argument_list>(<argument><expr><name>tinterlace</name></expr></argument>, <argument><expr><name><name>out</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>out</name><operator>-&gt;</operator><name>linesize</name></name></expr></argument>,

<argument><expr><operator>(</operator><specifier>const</specifier> <name>uint8_t</name> <operator>*</operator><operator>*</operator><operator>)</operator><name><name>tinterlace</name><operator>-&gt;</operator><name>black_data</name></name></expr></argument>, <argument><expr><name><name>tinterlace</name><operator>-&gt;</operator><name>black_linesize</name></name></expr></argument>,

<argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>format</name></name></expr></argument>, <argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>w</name></name></expr></argument>, <argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>h</name></name></expr></argument>,

<argument><expr><name>FIELD_UPPER_AND_LOWER</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>!</operator><name>field</name></expr></argument>, <argument><expr><name><name>tinterlace</name><operator>-&gt;</operator><name>flags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>MODE_INTERLEAVE_TOP</name></expr>:</case> 

<case>case <expr><name>MODE_INTERLEAVE_BOTTOM</name></expr>:</case> 

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>tinterlace</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>TINTERLACE_FLAG_BYPASS_IL</name><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>cur</name><operator>-&gt;</operator><name>interlaced_frame</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>,

<argument><expr><literal type="string">"video is already interlaced, adjusting framerate only\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>out</name> <operator>=</operator> <call><name>av_frame_clone</name><argument_list>(<argument><expr><name>cur</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>out</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>pts</name></name> <operator>/=</operator> <literal type="number">2</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_filter_frame</name><argument_list>(<argument><expr><name>outlink</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>tff</name> <operator>=</operator> <name><name>tinterlace</name><operator>-&gt;</operator><name>mode</name></name> <operator>==</operator> <name>MODE_INTERLEAVE_TOP</name></expr>;</expr_stmt>

<expr_stmt><expr><name>out</name> <operator>=</operator> <call><name>ff_get_video_buffer</name><argument_list>(<argument><expr><name>outlink</name></expr></argument>, <argument><expr><name><name>outlink</name><operator>-&gt;</operator><name>w</name></name></expr></argument>, <argument><expr><name><name>outlink</name><operator>-&gt;</operator><name>h</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>out</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_frame_copy_props</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>cur</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>interlaced_frame</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>top_field_first</name></name> <operator>=</operator> <name>tff</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>copy_picture_field</name><argument_list>(<argument><expr><name>tinterlace</name></expr></argument>, <argument><expr><name><name>out</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>out</name><operator>-&gt;</operator><name>linesize</name></name></expr></argument>,

<argument><expr><operator>(</operator><specifier>const</specifier> <name>uint8_t</name> <operator>*</operator><operator>*</operator><operator>)</operator><name><name>cur</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>cur</name><operator>-&gt;</operator><name>linesize</name></name></expr></argument>,

<argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>format</name></name></expr></argument>, <argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>w</name></name></expr></argument>, <argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>h</name></name></expr></argument>,

<argument><expr><ternary><condition><expr><name>tff</name></expr> ?</condition><then> <expr><name>FIELD_UPPER</name></expr> </then><else>: <expr><name>FIELD_LOWER</name></expr></else></ternary></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>tff</name></expr> ?</condition><then> <expr><name>FIELD_UPPER</name></expr> </then><else>: <expr><name>FIELD_LOWER</name></expr></else></ternary></expr></argument>,

<argument><expr><name><name>tinterlace</name><operator>-&gt;</operator><name>flags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>copy_picture_field</name><argument_list>(<argument><expr><name>tinterlace</name></expr></argument>, <argument><expr><name><name>out</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>out</name><operator>-&gt;</operator><name>linesize</name></name></expr></argument>,

<argument><expr><operator>(</operator><specifier>const</specifier> <name>uint8_t</name> <operator>*</operator><operator>*</operator><operator>)</operator><name><name>next</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>next</name><operator>-&gt;</operator><name>linesize</name></name></expr></argument>,

<argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>format</name></name></expr></argument>, <argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>w</name></name></expr></argument>, <argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>h</name></name></expr></argument>,

<argument><expr><ternary><condition><expr><name>tff</name></expr> ?</condition><then> <expr><name>FIELD_LOWER</name></expr> </then><else>: <expr><name>FIELD_UPPER</name></expr></else></ternary></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>tff</name></expr> ?</condition><then> <expr><name>FIELD_LOWER</name></expr> </then><else>: <expr><name>FIELD_UPPER</name></expr></else></ternary></expr></argument>,

<argument><expr><name><name>tinterlace</name><operator>-&gt;</operator><name>flags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tinterlace</name><operator>-&gt;</operator><name>next</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>MODE_INTERLACEX2</name></expr>:</case> 

<expr_stmt><expr><name>out</name> <operator>=</operator> <call><name>av_frame_clone</name><argument_list>(<argument><expr><name>cur</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>out</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>interlaced_frame</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cur</name><operator>-&gt;</operator><name>pts</name></name> <operator>!=</operator> <name>AV_NOPTS_VALUE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>pts</name></name> <operator>=</operator> <name><name>cur</name><operator>-&gt;</operator><name>pts</name></name><operator>*</operator><literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>pts</name></name> <operator>=</operator> <call><name>av_rescale_q</name><argument_list>(<argument><expr><name><name>out</name><operator>-&gt;</operator><name>pts</name></name></expr></argument>, <argument><expr><name><name>tinterlace</name><operator>-&gt;</operator><name>preout_time_base</name></name></expr></argument>, <argument><expr><name><name>outlink</name><operator>-&gt;</operator><name>time_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_filter_frame</name><argument_list>(<argument><expr><name>outlink</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>tff</name> <operator>=</operator> <name><name>next</name><operator>-&gt;</operator><name>top_field_first</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>out</name> <operator>=</operator> <call><name>ff_get_video_buffer</name><argument_list>(<argument><expr><name>outlink</name></expr></argument>, <argument><expr><name><name>outlink</name><operator>-&gt;</operator><name>w</name></name></expr></argument>, <argument><expr><name><name>outlink</name><operator>-&gt;</operator><name>h</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>out</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_frame_copy_props</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>interlaced_frame</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>top_field_first</name></name> <operator>=</operator> <operator>!</operator><name>tff</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>next</name><operator>-&gt;</operator><name>pts</name></name> <operator>!=</operator> <name>AV_NOPTS_VALUE</name> <operator>&amp;&amp;</operator> <name><name>cur</name><operator>-&gt;</operator><name>pts</name></name> <operator>!=</operator> <name>AV_NOPTS_VALUE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>pts</name></name> <operator>=</operator> <name><name>cur</name><operator>-&gt;</operator><name>pts</name></name> <operator>+</operator> <name><name>next</name><operator>-&gt;</operator><name>pts</name></name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>pts</name></name> <operator>=</operator> <name>AV_NOPTS_VALUE</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>copy_picture_field</name><argument_list>(<argument><expr><name>tinterlace</name></expr></argument>, <argument><expr><name><name>out</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>out</name><operator>-&gt;</operator><name>linesize</name></name></expr></argument>,

<argument><expr><operator>(</operator><specifier>const</specifier> <name>uint8_t</name> <operator>*</operator><operator>*</operator><operator>)</operator><name><name>cur</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>cur</name><operator>-&gt;</operator><name>linesize</name></name></expr></argument>,

<argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>format</name></name></expr></argument>, <argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>w</name></name></expr></argument>, <argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>h</name></name></expr></argument>,

<argument><expr><ternary><condition><expr><name>tff</name></expr> ?</condition><then> <expr><name>FIELD_LOWER</name></expr> </then><else>: <expr><name>FIELD_UPPER</name></expr></else></ternary></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>tff</name></expr> ?</condition><then> <expr><name>FIELD_LOWER</name></expr> </then><else>: <expr><name>FIELD_UPPER</name></expr></else></ternary></expr></argument>,

<argument><expr><name><name>tinterlace</name><operator>-&gt;</operator><name>flags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>copy_picture_field</name><argument_list>(<argument><expr><name>tinterlace</name></expr></argument>, <argument><expr><name><name>out</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>out</name><operator>-&gt;</operator><name>linesize</name></name></expr></argument>,

<argument><expr><operator>(</operator><specifier>const</specifier> <name>uint8_t</name> <operator>*</operator><operator>*</operator><operator>)</operator><name><name>next</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>next</name><operator>-&gt;</operator><name>linesize</name></name></expr></argument>,

<argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>format</name></name></expr></argument>, <argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>w</name></name></expr></argument>, <argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>h</name></name></expr></argument>,

<argument><expr><ternary><condition><expr><name>tff</name></expr> ?</condition><then> <expr><name>FIELD_UPPER</name></expr> </then><else>: <expr><name>FIELD_LOWER</name></expr></else></ternary></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>tff</name></expr> ?</condition><then> <expr><name>FIELD_UPPER</name></expr> </then><else>: <expr><name>FIELD_LOWER</name></expr></else></ternary></expr></argument>,

<argument><expr><name><name>tinterlace</name><operator>-&gt;</operator><name>flags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></switch>

<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>pts</name></name> <operator>=</operator> <call><name>av_rescale_q</name><argument_list>(<argument><expr><name><name>out</name><operator>-&gt;</operator><name>pts</name></name></expr></argument>, <argument><expr><name><name>tinterlace</name><operator>-&gt;</operator><name>preout_time_base</name></name></expr></argument>, <argument><expr><name><name>outlink</name><operator>-&gt;</operator><name>time_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_filter_frame</name><argument_list>(<argument><expr><name>outlink</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tinterlace</name><operator>-&gt;</operator><name>frame</name></name><operator>++</operator></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>init_interlace</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>TInterlaceContext</name> <modifier>*</modifier></type><name>tinterlace</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>tinterlace</name><operator>-&gt;</operator><name>mode</name></name> <operator>&lt;=</operator> <name>MODE_BFF</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>tinterlace</name><operator>-&gt;</operator><name>mode</name></name> <operator>+=</operator> <name>MODE_INTERLEAVE_TOP</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>tinterlace</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>TINTERLACE_FLAG_BYPASS_IL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>tinterlace</name><operator>-&gt;</operator><name>lowpass</name></name> <operator>==</operator> <name>VLPF_LIN</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>tinterlace</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>TINTERLACE_FLAG_VLPF</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>tinterlace</name><operator>-&gt;</operator><name>lowpass</name></name> <operator>==</operator> <name>VLPF_CMP</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>tinterlace</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>TINTERLACE_FLAG_CVLPF</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVFilterPad</name></type> <name><name>tinterlace_inputs</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"default"</literal></expr>,

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,

<expr><operator>.</operator><name>filter_frame</name> <operator>=</operator> <name>filter_frame</name></expr>,

}</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVFilterPad</name></type> <name><name>tinterlace_outputs</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"default"</literal></expr>,

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,

<expr><operator>.</operator><name>config_props</name> <operator>=</operator> <name>config_out_props</name></expr>,

}</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFilter</name></type> <name>ff_vf_tinterlace</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"tinterlace"</literal></expr>,

<expr><operator>.</operator><name>description</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"Perform temporal field interlacing."</literal></expr></argument>)</argument_list></call></expr>,

<expr><operator>.</operator><name>priv_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>TInterlaceContext</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><operator>.</operator><name>uninit</name> <operator>=</operator> <name>uninit</name></expr>,

<expr><operator>.</operator><name>query_formats</name> <operator>=</operator> <name>query_formats</name></expr>,

<expr><operator>.</operator><name>inputs</name> <operator>=</operator> <name>tinterlace_inputs</name></expr>,

<expr><operator>.</operator><name>outputs</name> <operator>=</operator> <name>tinterlace_outputs</name></expr>,

<expr><operator>.</operator><name>priv_class</name> <operator>=</operator> <operator>&amp;</operator><name>tinterlace_class</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFilter</name></type> <name>ff_vf_interlace</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"interlace"</literal></expr>,

<expr><operator>.</operator><name>description</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"Convert progressive video into interlaced."</literal></expr></argument>)</argument_list></call></expr>,

<expr><operator>.</operator><name>priv_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>TInterlaceContext</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>init_interlace</name></expr>,

<expr><operator>.</operator><name>uninit</name> <operator>=</operator> <name>uninit</name></expr>,

<expr><operator>.</operator><name>query_formats</name> <operator>=</operator> <name>query_formats</name></expr>,

<expr><operator>.</operator><name>inputs</name> <operator>=</operator> <name>tinterlace_inputs</name></expr>,

<expr><operator>.</operator><name>outputs</name> <operator>=</operator> <name>tinterlace_outputs</name></expr>,

<expr><operator>.</operator><name>priv_class</name> <operator>=</operator> <operator>&amp;</operator><name>interlace_class</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

</unit>
