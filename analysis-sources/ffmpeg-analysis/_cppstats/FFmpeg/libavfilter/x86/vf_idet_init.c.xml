<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavfilter\x86\vf_idet_init.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/attributes.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/cpu.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/mem.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/x86/asm.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/x86/cpu.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavfilter/vf_idet.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_X86ASM</name></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FUNC_MAIN_DECL</name><parameter_list>(<parameter><type><name>KIND</name></type></parameter>, <parameter><type><name>SPAN</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>int ff_idet_filter_line_##KIND(const uint8_t *a, const uint8_t *b, const uint8_t *c, int w); static int idet_filter_line_##KIND(const uint8_t *a, const uint8_t *b, const uint8_t *c, int w) { int sum = 0; const int left_over = w &amp; (SPAN - 1); w -= left_over; if (w &gt; 0) sum += ff_idet_filter_line_##KIND(a, b, c, w); if (left_over &gt; 0) sum += ff_idet_filter_line_c(a + w, b + w, c + w, left_over); return sum; }</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FUNC_MAIN_DECL_16bit</name><parameter_list>(<parameter><type><name>KIND</name></type></parameter>, <parameter><type><name>SPAN</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>int ff_idet_filter_line_16bit_##KIND(const uint16_t *a, const uint16_t *b, const uint16_t *c, int w); static int idet_filter_line_16bit_##KIND(const uint16_t *a, const uint16_t *b, const uint16_t *c, int w) { int sum = 0; const int left_over = w &amp; (SPAN - 1); w -= left_over; if (w &gt; 0) sum += ff_idet_filter_line_16bit_##KIND(a, b, c, w); if (left_over &gt; 0) sum += ff_idet_filter_line_c_16bit(a + w, b + w, c + w, left_over); return sum; }</cpp:value></cpp:define>

<macro><name>FUNC_MAIN_DECL</name><argument_list>(<argument>sse2</argument>, <argument><literal type="number">16</literal></argument>)</argument_list></macro>

<macro><name>FUNC_MAIN_DECL_16bit</name><argument_list>(<argument>sse2</argument>, <argument><literal type="number">8</literal></argument>)</argument_list></macro>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>ARCH_X86_32</name></expr></cpp:if>

<macro><name>FUNC_MAIN_DECL</name><argument_list>(<argument>mmx</argument>, <argument><literal type="number">8</literal></argument>)</argument_list></macro>

<macro><name>FUNC_MAIN_DECL</name><argument_list>(<argument>mmxext</argument>, <argument><literal type="number">8</literal></argument>)</argument_list></macro>

<macro><name>FUNC_MAIN_DECL_16bit</name><argument_list>(<argument>mmx</argument>, <argument><literal type="number">4</literal></argument>)</argument_list></macro>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>av_cold</name> <name>void</name></type> <name>ff_idet_init_x86</name><parameter_list>(<parameter><decl><type><name>IDETContext</name> <modifier>*</modifier></type><name>idet</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>for_16b</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_X86ASM</name></expr></cpp:if>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>cpu_flags</name> <init>= <expr><call><name>av_get_cpu_flags</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>ARCH_X86_32</name></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><call><name>EXTERNAL_MMX</name><argument_list>(<argument><expr><name>cpu_flags</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>idet</name><operator>-&gt;</operator><name>filter_line</name></name> <operator>=</operator> <ternary><condition><expr><name>for_16b</name></expr> ?</condition><then> <expr><operator>(</operator><name>ff_idet_filter_func</name><operator>)</operator><name>idet_filter_line_16bit_mmx</name></expr> </then><else>: <expr><name>idet_filter_line_mmx</name></expr></else></ternary></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>EXTERNAL_MMXEXT</name><argument_list>(<argument><expr><name>cpu_flags</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>idet</name><operator>-&gt;</operator><name>filter_line</name></name> <operator>=</operator> <ternary><condition><expr><name>for_16b</name></expr> ?</condition><then> <expr><operator>(</operator><name>ff_idet_filter_func</name><operator>)</operator><name>idet_filter_line_16bit_mmx</name></expr> </then><else>: <expr><name>idet_filter_line_mmxext</name></expr></else></ternary></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<if_stmt><if>if <condition>(<expr><call><name>EXTERNAL_SSE2</name><argument_list>(<argument><expr><name>cpu_flags</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>idet</name><operator>-&gt;</operator><name>filter_line</name></name> <operator>=</operator> <ternary><condition><expr><name>for_16b</name></expr> ?</condition><then> <expr><operator>(</operator><name>ff_idet_filter_func</name><operator>)</operator><name>idet_filter_line_16bit_sse2</name></expr> </then><else>: <expr><name>idet_filter_line_sse2</name></expr></else></ternary></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

</block_content>}</block></function>

</unit>
