<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavfilter\x86\scene_sad_init.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/cpu.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/x86/cpu.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavfilter/scene_sad.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SCENE_SAD_FUNC</name><parameter_list>(<parameter><type><name>FUNC_NAME</name></type></parameter>, <parameter><type><name>ASM_FUNC_NAME</name></type></parameter>, <parameter><type><name>MMSIZE</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>void ASM_FUNC_NAME(SCENE_SAD_PARAMS); static void FUNC_NAME(SCENE_SAD_PARAMS) { uint64_t sad[MMSIZE / 8] = {0}; ptrdiff_t awidth = width &amp; ~(MMSIZE - 1); *sum = 0; ASM_FUNC_NAME(src1, stride1, src2, stride2, awidth, height, sad); for (int i = 0; i &lt; MMSIZE / 8; i++) *sum += sad[i]; ff_scene_sad_c(src1 + awidth, stride1, src2 + awidth, stride2, width - awidth, height, sad); *sum += sad[0]; }</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_X86ASM</name></expr></cpp:if>

<macro><name>SCENE_SAD_FUNC</name><argument_list>(<argument>scene_sad_sse2</argument>, <argument>ff_scene_sad_sse2</argument>, <argument><literal type="number">16</literal></argument>)</argument_list></macro>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_AVX2_EXTERNAL</name></expr></cpp:if>

<macro><name>SCENE_SAD_FUNC</name><argument_list>(<argument>scene_sad_avx2</argument>, <argument>ff_scene_sad_avx2</argument>, <argument><literal type="number">32</literal></argument>)</argument_list></macro>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>ff_scene_sad_fn</name></type> <name>ff_scene_sad_get_fn_x86</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>depth</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_X86ASM</name></expr></cpp:if>

<decl_stmt><decl><type><name>int</name></type> <name>cpu_flags</name> <init>= <expr><call><name>av_get_cpu_flags</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>depth</name> <operator>==</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_AVX2_EXTERNAL</name></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><call><name>EXTERNAL_AVX2_FAST</name><argument_list>(<argument><expr><name>cpu_flags</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>scene_sad_avx2</name></expr>;</return></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><call><name>EXTERNAL_SSE2</name><argument_list>(<argument><expr><name>cpu_flags</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>scene_sad_sse2</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

</unit>
