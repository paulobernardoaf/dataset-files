<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavfilter\x86\vf_convolution_init.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/attributes.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/cpu.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/x86/cpu.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavfilter/convolution.h"</cpp:file></cpp:include>

<function_decl><type><name>void</name></type> <name>ff_filter_3x3_sse4</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>,

<parameter><decl><type><name>float</name></type> <name>rdiv</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>bias</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name> <modifier>*</modifier><specifier>const</specifier></type> <name>matrix</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name><name>c</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>peak</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>radius</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>dstride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stride</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>av_cold</name> <name>void</name></type> <name>ff_convolution_init_x86</name><parameter_list>(<parameter><decl><type><name>ConvolutionContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>ARCH_X86_64</name></expr></cpp:if>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>cpu_flags</name> <init>= <expr><call><name>av_get_cpu_flags</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>mode</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>MATRIX_SQUARE</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>matrix_length</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="number">9</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>EXTERNAL_SSE4</name><argument_list>(<argument><expr><name>cpu_flags</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>filter</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>ff_filter_3x3_sse4</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

</unit>
