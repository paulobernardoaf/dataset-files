<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavfilter\boxblur.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"boxblur.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>var_names</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="string">"w"</literal></expr>,

<expr><literal type="string">"h"</literal></expr>,

<expr><literal type="string">"cw"</literal></expr>,

<expr><literal type="string">"ch"</literal></expr>,

<expr><literal type="string">"hsub"</literal></expr>,

<expr><literal type="string">"vsub"</literal></expr>,

<expr><name>NULL</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<enum>enum <name>var_name</name> <block>{

<decl><name>VAR_W</name></decl>,

<decl><name>VAR_H</name></decl>,

<decl><name>VAR_CW</name></decl>,

<decl><name>VAR_CH</name></decl>,

<decl><name>VAR_HSUB</name></decl>,

<decl><name>VAR_VSUB</name></decl>,

<decl><name>VARS_NB</name></decl>

}</block>;</enum>

<function><type><name>int</name></type> <name>ff_boxblur_eval_filter_params</name><parameter_list>(<parameter><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>inlink</name></decl></parameter>,

<parameter><decl><type><name>FilterParam</name> <modifier>*</modifier></type><name>luma_param</name></decl></parameter>,

<parameter><decl><type><name>FilterParam</name> <modifier>*</modifier></type><name>chroma_param</name></decl></parameter>,

<parameter><decl><type><name>FilterParam</name> <modifier>*</modifier></type><name>alpha_param</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>AVPixFmtDescriptor</name> <modifier>*</modifier></type><name>desc</name> <init>= <expr><call><name>av_pix_fmt_desc_get</name><argument_list>(<argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>format</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>inlink</name><operator>-&gt;</operator><name>dst</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>w</name> <init>= <expr><name><name>inlink</name><operator>-&gt;</operator><name>w</name></name></expr></init></decl>, <decl><type ref="prev"/><name>h</name> <init>= <expr><name><name>inlink</name><operator>-&gt;</operator><name>h</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>cw</name></decl>, <decl><type ref="prev"/><name>ch</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name><name>var_values</name><index>[<expr><name>VARS_NB</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name>res</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>expr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>luma_param</name><operator>-&gt;</operator><name>radius_expr</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Luma radius expression is not set.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>chroma_param</name><operator>-&gt;</operator><name>radius_expr</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>chroma_param</name><operator>-&gt;</operator><name>radius_expr</name></name> <operator>=</operator> <call><name>av_strdup</name><argument_list>(<argument><expr><name><name>luma_param</name><operator>-&gt;</operator><name>radius_expr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>chroma_param</name><operator>-&gt;</operator><name>radius_expr</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>chroma_param</name><operator>-&gt;</operator><name>power</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>chroma_param</name><operator>-&gt;</operator><name>power</name></name> <operator>=</operator> <name><name>luma_param</name><operator>-&gt;</operator><name>power</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>alpha_param</name><operator>-&gt;</operator><name>radius_expr</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>alpha_param</name><operator>-&gt;</operator><name>radius_expr</name></name> <operator>=</operator> <call><name>av_strdup</name><argument_list>(<argument><expr><name><name>luma_param</name><operator>-&gt;</operator><name>radius_expr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>alpha_param</name><operator>-&gt;</operator><name>radius_expr</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>alpha_param</name><operator>-&gt;</operator><name>power</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>alpha_param</name><operator>-&gt;</operator><name>power</name></name> <operator>=</operator> <name><name>luma_param</name><operator>-&gt;</operator><name>power</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>var_values</name><index>[<expr><name>VAR_W</name></expr>]</index></name> <operator>=</operator> <name><name>inlink</name><operator>-&gt;</operator><name>w</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>var_values</name><index>[<expr><name>VAR_H</name></expr>]</index></name> <operator>=</operator> <name><name>inlink</name><operator>-&gt;</operator><name>h</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>var_values</name><index>[<expr><name>VAR_CW</name></expr>]</index></name> <operator>=</operator> <name>cw</name> <operator>=</operator> <name>w</name><operator>&gt;&gt;</operator><operator>(</operator><name><name>desc</name><operator>-&gt;</operator><name>log2_chroma_w</name></name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>var_values</name><index>[<expr><name>VAR_CH</name></expr>]</index></name> <operator>=</operator> <name>ch</name> <operator>=</operator> <name>h</name><operator>&gt;&gt;</operator><operator>(</operator><name><name>desc</name><operator>-&gt;</operator><name>log2_chroma_h</name></name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>var_values</name><index>[<expr><name>VAR_HSUB</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal><operator>&lt;&lt;</operator><operator>(</operator><name><name>desc</name><operator>-&gt;</operator><name>log2_chroma_w</name></name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>var_values</name><index>[<expr><name>VAR_VSUB</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal><operator>&lt;&lt;</operator><operator>(</operator><name><name>desc</name><operator>-&gt;</operator><name>log2_chroma_h</name></name><operator>)</operator></expr>;</expr_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EVAL_RADIUS_EXPR</name><parameter_list>(<parameter><type><name>comp</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>expr = comp-&gt;radius_expr; ret = av_expr_parse_and_eval(&amp;res, expr, var_names, var_values, NULL, NULL, NULL, NULL, NULL, 0, ctx); comp-&gt;radius = res; if (ret &lt; 0) { av_log(ctx, AV_LOG_ERROR, "Error when evaluating " #comp " radius expression '%s'\n", expr); return ret; }</cpp:value></cpp:define>

<expr_stmt><expr><call><name>EVAL_RADIUS_EXPR</name><argument_list>(<argument><expr><name>luma_param</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EVAL_RADIUS_EXPR</name><argument_list>(<argument><expr><name>chroma_param</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EVAL_RADIUS_EXPR</name><argument_list>(<argument><expr><name>alpha_param</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_VERBOSE</name></expr></argument>,

<argument><expr><literal type="string">"luma_radius:%d luma_power:%d "</literal>

<literal type="string">"chroma_radius:%d chroma_power:%d "</literal>

<literal type="string">"alpha_radius:%d alpha_power:%d "</literal>

<literal type="string">"w:%d chroma_w:%d h:%d chroma_h:%d\n"</literal></expr></argument>,

<argument><expr><name><name>luma_param</name> <operator>-&gt;</operator><name>radius</name></name></expr></argument>, <argument><expr><name><name>luma_param</name> <operator>-&gt;</operator><name>power</name></name></expr></argument>,

<argument><expr><name><name>chroma_param</name><operator>-&gt;</operator><name>radius</name></name></expr></argument>, <argument><expr><name><name>chroma_param</name><operator>-&gt;</operator><name>power</name></name></expr></argument>,

<argument><expr><name><name>alpha_param</name> <operator>-&gt;</operator><name>radius</name></name></expr></argument>, <argument><expr><name><name>alpha_param</name> <operator>-&gt;</operator><name>power</name></name></expr></argument>,

<argument><expr><name>w</name></expr></argument>, <argument><expr><name>cw</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHECK_RADIUS_VAL</name><parameter_list>(<parameter><type><name>w_</name></type></parameter>, <parameter><type><name>h_</name></type></parameter>, <parameter><type><name>comp</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>if (comp-&gt;radius &lt; 0 || 2*comp-&gt;radius &gt; FFMIN(w_, h_)) { av_log(ctx, AV_LOG_ERROR, "Invalid " #comp " radius value %d, must be &gt;= 0 and &lt;= %d\n", comp-&gt;radius, FFMIN(w_, h_)/2); return AVERROR(EINVAL); }</cpp:value></cpp:define>

<expr_stmt><expr><call><name>CHECK_RADIUS_VAL</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>luma_param</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CHECK_RADIUS_VAL</name><argument_list>(<argument><expr><name>cw</name></expr></argument>, <argument><expr><name>ch</name></expr></argument>, <argument><expr><name>chroma_param</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CHECK_RADIUS_VAL</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>alpha_param</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

</unit>
