<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavfilter\avf_showspectrum.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavcodec/avfft.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/audio_fifo.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avassert.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avstring.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/channel_layout.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/opt.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/parseutils.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/xga_font_data.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"audio.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"video.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avfilter.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"filters.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"window_func.h"</cpp:file></cpp:include>

<enum>enum <name>DisplayMode</name> <block>{ <decl><name>COMBINED</name></decl>, <decl><name>SEPARATE</name></decl>, <decl><name>NB_MODES</name></decl> }</block>;</enum>

<enum>enum <name>DataMode</name> <block>{ <decl><name>D_MAGNITUDE</name></decl>, <decl><name>D_PHASE</name></decl>, <decl><name>NB_DMODES</name></decl> }</block>;</enum>

<enum>enum <name>FrequencyScale</name> <block>{ <decl><name>F_LINEAR</name></decl>, <decl><name>F_LOG</name></decl>, <decl><name>NB_FSCALES</name></decl> }</block>;</enum>

<enum>enum <name>DisplayScale</name> <block>{ <decl><name>LINEAR</name></decl>, <decl><name>SQRT</name></decl>, <decl><name>CBRT</name></decl>, <decl><name>LOG</name></decl>, <decl><name>FOURTHRT</name></decl>, <decl><name>FIFTHRT</name></decl>, <decl><name>NB_SCALES</name></decl> }</block>;</enum>

<enum>enum <name>ColorMode</name> <block>{ <decl><name>CHANNEL</name></decl>, <decl><name>INTENSITY</name></decl>, <decl><name>RAINBOW</name></decl>, <decl><name>MORELAND</name></decl>, <decl><name>NEBULAE</name></decl>, <decl><name>FIRE</name></decl>, <decl><name>FIERY</name></decl>, <decl><name>FRUIT</name></decl>, <decl><name>COOL</name></decl>, <decl><name>MAGMA</name></decl>, <decl><name>GREEN</name></decl>, <decl><name>VIRIDIS</name></decl>, <decl><name>PLASMA</name></decl>, <decl><name>CIVIDIS</name></decl>, <decl><name>TERRAIN</name></decl>, <decl><name>NB_CLMODES</name></decl> }</block>;</enum>

<enum>enum <name>SlideMode</name> <block>{ <decl><name>REPLACE</name></decl>, <decl><name>SCROLL</name></decl>, <decl><name>FULLFRAME</name></decl>, <decl><name>RSCROLL</name></decl>, <decl><name>NB_SLIDES</name></decl> }</block>;</enum>

<enum>enum <name>Orientation</name> <block>{ <decl><name>VERTICAL</name></decl>, <decl><name>HORIZONTAL</name></decl>, <decl><name>NB_ORIENTATIONS</name></decl> }</block>;</enum>

<typedef>typedef <type><struct>struct <name>ShowSpectrumContext</name> <block>{

<decl_stmt><decl><type><specifier>const</specifier> <name>AVClass</name> <modifier>*</modifier></type><name>class</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>w</name></decl>, <name>h</name>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>rate_str</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVRational</name></type> <name>auto_frame_rate</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVRational</name></type> <name>frame_rate</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>outpicref</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>nb_display_channels</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>orientation</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>channel_width</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>channel_height</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>sliding</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>mode</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>color_mode</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>scale</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>fscale</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>saturation</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>float</name></type> <name>rotation</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>start</name></decl>, <name>stop</name>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>data</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>xpos</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>FFTContext</name> <modifier>*</modifier><modifier>*</modifier></type><name>fft</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>FFTContext</name> <modifier>*</modifier><modifier>*</modifier></type><name>ifft</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>fft_bits</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>FFTComplex</name> <modifier>*</modifier><modifier>*</modifier></type><name>fft_data</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>FFTComplex</name> <modifier>*</modifier><modifier>*</modifier></type><name>fft_scratch</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>window_func_lut</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier><modifier>*</modifier></type><name>magnitudes</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier><modifier>*</modifier></type><name>phases</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>win_func</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>win_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>buf_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>win_scale</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>overlap</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>gain</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>consumed</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>hop_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>combine_buffer</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier><modifier>*</modifier></type><name>color_buffer</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>AVAudioFifo</name> <modifier>*</modifier></type><name>fifo</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>pts</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>old_pts</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>old_len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>single_pic</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>legend</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>start_x</name></decl>, <name>start_y</name>;</decl_stmt>

<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>plot_channel</name>)<parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>jobnr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nb_jobs</name></decl></parameter>)</parameter_list>;</function_decl>

}</block></struct></type> <name>ShowSpectrumContext</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OFFSET</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>offsetof(ShowSpectrumContext, x)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLAGS</name></cpp:macro> <cpp:value>AV_OPT_FLAG_FILTERING_PARAM|AV_OPT_FLAG_VIDEO_PARAM</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVOption</name></type> <name><name>showspectrum_options</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><literal type="string">"size"</literal></expr>, <expr><literal type="string">"set video size"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_IMAGE_SIZE</name></expr>, <expr><block>{<expr><operator>.</operator><name>str</name> <operator>=</operator> <literal type="string">"640x512"</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"s"</literal></expr>, <expr><literal type="string">"set video size"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_IMAGE_SIZE</name></expr>, <expr><block>{<expr><operator>.</operator><name>str</name> <operator>=</operator> <literal type="string">"640x512"</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"slide"</literal></expr>, <expr><literal type="string">"set sliding mode"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>sliding</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NB_SLIDES</name><operator>-</operator><literal type="number">1</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"slide"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"replace"</literal></expr>, <expr><literal type="string">"replace old columns with new"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>REPLACE</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"slide"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"scroll"</literal></expr>, <expr><literal type="string">"scroll from right to left"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>SCROLL</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"slide"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"fullframe"</literal></expr>, <expr><literal type="string">"return full frames"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>FULLFRAME</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"slide"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"rscroll"</literal></expr>, <expr><literal type="string">"scroll from left to right"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>RSCROLL</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"slide"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"mode"</literal></expr>, <expr><literal type="string">"set channel display mode"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>COMBINED</name></expr>}</block></expr>, <expr><name>COMBINED</name></expr>, <expr><name>NB_MODES</name><operator>-</operator><literal type="number">1</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"mode"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"combined"</literal></expr>, <expr><literal type="string">"combined mode"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>COMBINED</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"mode"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"separate"</literal></expr>, <expr><literal type="string">"separate mode"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>SEPARATE</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"mode"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"color"</literal></expr>, <expr><literal type="string">"set channel coloring"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>color_mode</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>CHANNEL</name></expr>}</block></expr>, <expr><name>CHANNEL</name></expr>, <expr><name>NB_CLMODES</name><operator>-</operator><literal type="number">1</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"color"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"channel"</literal></expr>, <expr><literal type="string">"separate color for each channel"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>CHANNEL</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"color"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"intensity"</literal></expr>, <expr><literal type="string">"intensity based coloring"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>INTENSITY</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"color"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"rainbow"</literal></expr>, <expr><literal type="string">"rainbow based coloring"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>RAINBOW</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"color"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"moreland"</literal></expr>, <expr><literal type="string">"moreland based coloring"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>MORELAND</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"color"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"nebulae"</literal></expr>, <expr><literal type="string">"nebulae based coloring"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>NEBULAE</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"color"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"fire"</literal></expr>, <expr><literal type="string">"fire based coloring"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>FIRE</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"color"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"fiery"</literal></expr>, <expr><literal type="string">"fiery based coloring"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>FIERY</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"color"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"fruit"</literal></expr>, <expr><literal type="string">"fruit based coloring"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>FRUIT</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"color"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"cool"</literal></expr>, <expr><literal type="string">"cool based coloring"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>COOL</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"color"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"magma"</literal></expr>, <expr><literal type="string">"magma based coloring"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>MAGMA</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"color"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"green"</literal></expr>, <expr><literal type="string">"green based coloring"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>GREEN</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"color"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"viridis"</literal></expr>, <expr><literal type="string">"viridis based coloring"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>VIRIDIS</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"color"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"plasma"</literal></expr>, <expr><literal type="string">"plasma based coloring"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>PLASMA</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"color"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"cividis"</literal></expr>, <expr><literal type="string">"cividis based coloring"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>CIVIDIS</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"color"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"terrain"</literal></expr>, <expr><literal type="string">"terrain based coloring"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>TERRAIN</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"color"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"scale"</literal></expr>, <expr><literal type="string">"set display scale"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>scale</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>SQRT</name></expr>}</block></expr>, <expr><name>LINEAR</name></expr>, <expr><name>NB_SCALES</name><operator>-</operator><literal type="number">1</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"scale"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"lin"</literal></expr>, <expr><literal type="string">"linear"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>LINEAR</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"scale"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"sqrt"</literal></expr>, <expr><literal type="string">"square root"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>SQRT</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"scale"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"cbrt"</literal></expr>, <expr><literal type="string">"cubic root"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>CBRT</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"scale"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"log"</literal></expr>, <expr><literal type="string">"logarithmic"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>LOG</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"scale"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"4thrt"</literal></expr>,<expr><literal type="string">"4th root"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>FOURTHRT</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"scale"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"5thrt"</literal></expr>,<expr><literal type="string">"5th root"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>FIFTHRT</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"scale"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"fscale"</literal></expr>, <expr><literal type="string">"set frequency scale"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>fscale</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>F_LINEAR</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NB_FSCALES</name><operator>-</operator><literal type="number">1</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"fscale"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"lin"</literal></expr>, <expr><literal type="string">"linear"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>F_LINEAR</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"fscale"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"log"</literal></expr>, <expr><literal type="string">"logarithmic"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>F_LOG</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"fscale"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"saturation"</literal></expr>, <expr><literal type="string">"color saturation multiplier"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>saturation</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_FLOAT</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name> <operator>=</operator> <literal type="number">1</literal></expr>}</block></expr>, <expr><operator>-</operator><literal type="number">10</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"win_func"</literal></expr>, <expr><literal type="string">"set window function"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>win_func</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>WFUNC_HANNING</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NB_WFUNC</name><operator>-</operator><literal type="number">1</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"win_func"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"rect"</literal></expr>, <expr><literal type="string">"Rectangular"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>WFUNC_RECT</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"win_func"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"bartlett"</literal></expr>, <expr><literal type="string">"Bartlett"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>WFUNC_BARTLETT</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"win_func"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"hann"</literal></expr>, <expr><literal type="string">"Hann"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>WFUNC_HANNING</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"win_func"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"hanning"</literal></expr>, <expr><literal type="string">"Hanning"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>WFUNC_HANNING</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"win_func"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"hamming"</literal></expr>, <expr><literal type="string">"Hamming"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>WFUNC_HAMMING</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"win_func"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"blackman"</literal></expr>, <expr><literal type="string">"Blackman"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>WFUNC_BLACKMAN</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"win_func"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"welch"</literal></expr>, <expr><literal type="string">"Welch"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>WFUNC_WELCH</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"win_func"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"flattop"</literal></expr>, <expr><literal type="string">"Flat-top"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>WFUNC_FLATTOP</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"win_func"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"bharris"</literal></expr>, <expr><literal type="string">"Blackman-Harris"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>WFUNC_BHARRIS</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"win_func"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"bnuttall"</literal></expr>, <expr><literal type="string">"Blackman-Nuttall"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>WFUNC_BNUTTALL</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"win_func"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"bhann"</literal></expr>, <expr><literal type="string">"Bartlett-Hann"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>WFUNC_BHANN</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"win_func"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"sine"</literal></expr>, <expr><literal type="string">"Sine"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>WFUNC_SINE</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"win_func"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"nuttall"</literal></expr>, <expr><literal type="string">"Nuttall"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>WFUNC_NUTTALL</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"win_func"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"lanczos"</literal></expr>, <expr><literal type="string">"Lanczos"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>WFUNC_LANCZOS</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"win_func"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"gauss"</literal></expr>, <expr><literal type="string">"Gauss"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>WFUNC_GAUSS</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"win_func"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"tukey"</literal></expr>, <expr><literal type="string">"Tukey"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>WFUNC_TUKEY</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"win_func"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"dolph"</literal></expr>, <expr><literal type="string">"Dolph-Chebyshev"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>WFUNC_DOLPH</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"win_func"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"cauchy"</literal></expr>, <expr><literal type="string">"Cauchy"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>WFUNC_CAUCHY</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"win_func"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"parzen"</literal></expr>, <expr><literal type="string">"Parzen"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>WFUNC_PARZEN</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"win_func"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"poisson"</literal></expr>, <expr><literal type="string">"Poisson"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>WFUNC_POISSON</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"win_func"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"bohman"</literal></expr>, <expr><literal type="string">"Bohman"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>WFUNC_BOHMAN</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"win_func"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"orientation"</literal></expr>, <expr><literal type="string">"set orientation"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>orientation</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>VERTICAL</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NB_ORIENTATIONS</name><operator>-</operator><literal type="number">1</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"orientation"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"vertical"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>VERTICAL</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"orientation"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"horizontal"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>HORIZONTAL</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"orientation"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"overlap"</literal></expr>, <expr><literal type="string">"set window overlap"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>overlap</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_FLOAT</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name> <operator>=</operator> <literal type="number">0</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"gain"</literal></expr>, <expr><literal type="string">"set scale gain"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>gain</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_FLOAT</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name> <operator>=</operator> <literal type="number">1</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">128</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"data"</literal></expr>, <expr><literal type="string">"set data mode"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NB_DMODES</name><operator>-</operator><literal type="number">1</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"data"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"magnitude"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>D_MAGNITUDE</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"data"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"phase"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>D_PHASE</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"data"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"rotation"</literal></expr>, <expr><literal type="string">"color rotation"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>rotation</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_FLOAT</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name> <operator>=</operator> <literal type="number">0</literal></expr>}</block></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"start"</literal></expr>, <expr><literal type="string">"start frequency"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>start</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>INT32_MAX</name></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"stop"</literal></expr>, <expr><literal type="string">"stop frequency"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>stop</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>INT32_MAX</name></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"fps"</literal></expr>, <expr><literal type="string">"set video rate"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>rate_str</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_STRING</name></expr>, <expr><block>{<expr><operator>.</operator><name>str</name> <operator>=</operator> <literal type="string">"auto"</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"legend"</literal></expr>, <expr><literal type="string">"draw legend"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>legend</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_BOOL</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>AVFILTER_DEFINE_CLASS</name><argument_list>(<argument><expr><name>showspectrum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<struct><specifier>static</specifier> <specifier>const</specifier> struct <name>ColorTable</name> <block>{

<decl_stmt><decl><type><name>float</name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>y</name></decl>, <decl><type ref="prev"/><name>u</name></decl>, <decl><type ref="prev"/><name>v</name></decl>;</decl_stmt>

}</block> <decl><name><name>color_table</name><index>[]</index><index>[<expr><literal type="number">8</literal></expr>]</index></name> <init>= <expr><block>{

<expr><index>[<expr><name>INTENSITY</name></expr>]</index> <operator>=</operator> <block>{

<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0.13</literal></expr>, <expr><literal type="number">.03587126228984074</literal></expr>, <expr><literal type="number">.1573300977624594</literal></expr>, <expr><operator>-</operator><literal type="number">.02548747583751842</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0.30</literal></expr>, <expr><literal type="number">.18572281794568020</literal></expr>, <expr><literal type="number">.1772436246393981</literal></expr>, <expr><literal type="number">.17475554840414750</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0.60</literal></expr>, <expr><literal type="number">.28184980583656130</literal></expr>, <expr><operator>-</operator><literal type="number">.1593064119945782</literal></expr>, <expr><literal type="number">.47132074554608920</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0.73</literal></expr>, <expr><literal type="number">.65830621175547810</literal></expr>, <expr><operator>-</operator><literal type="number">.3716070802232764</literal></expr>, <expr><literal type="number">.24352759331252930</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0.78</literal></expr>, <expr><literal type="number">.76318535758242900</literal></expr>, <expr><operator>-</operator><literal type="number">.4307467689263783</literal></expr>, <expr><literal type="number">.16866496622310430</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0.91</literal></expr>, <expr><literal type="number">.95336363636363640</literal></expr>, <expr><operator>-</operator><literal type="number">.2045454545454546</literal></expr>, <expr><literal type="number">.03313636363636363</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>}</block></expr>,

<expr><index>[<expr><name>RAINBOW</name></expr>]</index> <operator>=</operator> <block>{

<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0.13</literal></expr>, <expr><literal type="number">44</literal><operator>/</operator><literal type="number">256.</literal></expr>, <expr><operator>(</operator><literal type="number">189</literal><operator>-</operator><literal type="number">128</literal><operator>)</operator><operator>/</operator><literal type="number">256.</literal></expr>, <expr><operator>(</operator><literal type="number">138</literal><operator>-</operator><literal type="number">128</literal><operator>)</operator><operator>/</operator><literal type="number">256.</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0.25</literal></expr>, <expr><literal type="number">29</literal><operator>/</operator><literal type="number">256.</literal></expr>, <expr><operator>(</operator><literal type="number">186</literal><operator>-</operator><literal type="number">128</literal><operator>)</operator><operator>/</operator><literal type="number">256.</literal></expr>, <expr><operator>(</operator><literal type="number">119</literal><operator>-</operator><literal type="number">128</literal><operator>)</operator><operator>/</operator><literal type="number">256.</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0.38</literal></expr>, <expr><literal type="number">119</literal><operator>/</operator><literal type="number">256.</literal></expr>, <expr><operator>(</operator><literal type="number">194</literal><operator>-</operator><literal type="number">128</literal><operator>)</operator><operator>/</operator><literal type="number">256.</literal></expr>, <expr><operator>(</operator><literal type="number">53</literal><operator>-</operator><literal type="number">128</literal><operator>)</operator><operator>/</operator><literal type="number">256.</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0.60</literal></expr>, <expr><literal type="number">111</literal><operator>/</operator><literal type="number">256.</literal></expr>, <expr><operator>(</operator><literal type="number">73</literal><operator>-</operator><literal type="number">128</literal><operator>)</operator><operator>/</operator><literal type="number">256.</literal></expr>, <expr><operator>(</operator><literal type="number">59</literal><operator>-</operator><literal type="number">128</literal><operator>)</operator><operator>/</operator><literal type="number">256.</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0.73</literal></expr>, <expr><literal type="number">205</literal><operator>/</operator><literal type="number">256.</literal></expr>, <expr><operator>(</operator><literal type="number">19</literal><operator>-</operator><literal type="number">128</literal><operator>)</operator><operator>/</operator><literal type="number">256.</literal></expr>, <expr><operator>(</operator><literal type="number">149</literal><operator>-</operator><literal type="number">128</literal><operator>)</operator><operator>/</operator><literal type="number">256.</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0.86</literal></expr>, <expr><literal type="number">135</literal><operator>/</operator><literal type="number">256.</literal></expr>, <expr><operator>(</operator><literal type="number">83</literal><operator>-</operator><literal type="number">128</literal><operator>)</operator><operator>/</operator><literal type="number">256.</literal></expr>, <expr><operator>(</operator><literal type="number">200</literal><operator>-</operator><literal type="number">128</literal><operator>)</operator><operator>/</operator><literal type="number">256.</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">73</literal><operator>/</operator><literal type="number">256.</literal></expr>, <expr><operator>(</operator><literal type="number">95</literal><operator>-</operator><literal type="number">128</literal><operator>)</operator><operator>/</operator><literal type="number">256.</literal></expr>, <expr><operator>(</operator><literal type="number">225</literal><operator>-</operator><literal type="number">128</literal><operator>)</operator><operator>/</operator><literal type="number">256.</literal></expr> }</block></expr>}</block></expr>,

<expr><index>[<expr><name>MORELAND</name></expr>]</index> <operator>=</operator> <block>{

<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">44</literal><operator>/</operator><literal type="number">256.</literal></expr>, <expr><operator>(</operator><literal type="number">181</literal><operator>-</operator><literal type="number">128</literal><operator>)</operator><operator>/</operator><literal type="number">256.</literal></expr>, <expr><operator>(</operator><literal type="number">112</literal><operator>-</operator><literal type="number">128</literal><operator>)</operator><operator>/</operator><literal type="number">256.</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0.13</literal></expr>, <expr><literal type="number">126</literal><operator>/</operator><literal type="number">256.</literal></expr>, <expr><operator>(</operator><literal type="number">177</literal><operator>-</operator><literal type="number">128</literal><operator>)</operator><operator>/</operator><literal type="number">256.</literal></expr>, <expr><operator>(</operator><literal type="number">106</literal><operator>-</operator><literal type="number">128</literal><operator>)</operator><operator>/</operator><literal type="number">256.</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0.25</literal></expr>, <expr><literal type="number">164</literal><operator>/</operator><literal type="number">256.</literal></expr>, <expr><operator>(</operator><literal type="number">163</literal><operator>-</operator><literal type="number">128</literal><operator>)</operator><operator>/</operator><literal type="number">256.</literal></expr>, <expr><operator>(</operator><literal type="number">109</literal><operator>-</operator><literal type="number">128</literal><operator>)</operator><operator>/</operator><literal type="number">256.</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0.38</literal></expr>, <expr><literal type="number">200</literal><operator>/</operator><literal type="number">256.</literal></expr>, <expr><operator>(</operator><literal type="number">140</literal><operator>-</operator><literal type="number">128</literal><operator>)</operator><operator>/</operator><literal type="number">256.</literal></expr>, <expr><operator>(</operator><literal type="number">120</literal><operator>-</operator><literal type="number">128</literal><operator>)</operator><operator>/</operator><literal type="number">256.</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0.60</literal></expr>, <expr><literal type="number">201</literal><operator>/</operator><literal type="number">256.</literal></expr>, <expr><operator>(</operator><literal type="number">117</literal><operator>-</operator><literal type="number">128</literal><operator>)</operator><operator>/</operator><literal type="number">256.</literal></expr>, <expr><operator>(</operator><literal type="number">141</literal><operator>-</operator><literal type="number">128</literal><operator>)</operator><operator>/</operator><literal type="number">256.</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0.73</literal></expr>, <expr><literal type="number">177</literal><operator>/</operator><literal type="number">256.</literal></expr>, <expr><operator>(</operator><literal type="number">103</literal><operator>-</operator><literal type="number">128</literal><operator>)</operator><operator>/</operator><literal type="number">256.</literal></expr>, <expr><operator>(</operator><literal type="number">165</literal><operator>-</operator><literal type="number">128</literal><operator>)</operator><operator>/</operator><literal type="number">256.</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0.86</literal></expr>, <expr><literal type="number">136</literal><operator>/</operator><literal type="number">256.</literal></expr>, <expr><operator>(</operator><literal type="number">100</literal><operator>-</operator><literal type="number">128</literal><operator>)</operator><operator>/</operator><literal type="number">256.</literal></expr>, <expr><operator>(</operator><literal type="number">183</literal><operator>-</operator><literal type="number">128</literal><operator>)</operator><operator>/</operator><literal type="number">256.</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">68</literal><operator>/</operator><literal type="number">256.</literal></expr>, <expr><operator>(</operator><literal type="number">117</literal><operator>-</operator><literal type="number">128</literal><operator>)</operator><operator>/</operator><literal type="number">256.</literal></expr>, <expr><operator>(</operator><literal type="number">203</literal><operator>-</operator><literal type="number">128</literal><operator>)</operator><operator>/</operator><literal type="number">256.</literal></expr> }</block></expr>}</block></expr>,

<expr><index>[<expr><name>NEBULAE</name></expr>]</index> <operator>=</operator> <block>{

<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">10</literal><operator>/</operator><literal type="number">256.</literal></expr>, <expr><operator>(</operator><literal type="number">134</literal><operator>-</operator><literal type="number">128</literal><operator>)</operator><operator>/</operator><literal type="number">256.</literal></expr>, <expr><operator>(</operator><literal type="number">132</literal><operator>-</operator><literal type="number">128</literal><operator>)</operator><operator>/</operator><literal type="number">256.</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0.23</literal></expr>, <expr><literal type="number">21</literal><operator>/</operator><literal type="number">256.</literal></expr>, <expr><operator>(</operator><literal type="number">137</literal><operator>-</operator><literal type="number">128</literal><operator>)</operator><operator>/</operator><literal type="number">256.</literal></expr>, <expr><operator>(</operator><literal type="number">130</literal><operator>-</operator><literal type="number">128</literal><operator>)</operator><operator>/</operator><literal type="number">256.</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0.45</literal></expr>, <expr><literal type="number">35</literal><operator>/</operator><literal type="number">256.</literal></expr>, <expr><operator>(</operator><literal type="number">134</literal><operator>-</operator><literal type="number">128</literal><operator>)</operator><operator>/</operator><literal type="number">256.</literal></expr>, <expr><operator>(</operator><literal type="number">134</literal><operator>-</operator><literal type="number">128</literal><operator>)</operator><operator>/</operator><literal type="number">256.</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0.57</literal></expr>, <expr><literal type="number">51</literal><operator>/</operator><literal type="number">256.</literal></expr>, <expr><operator>(</operator><literal type="number">130</literal><operator>-</operator><literal type="number">128</literal><operator>)</operator><operator>/</operator><literal type="number">256.</literal></expr>, <expr><operator>(</operator><literal type="number">139</literal><operator>-</operator><literal type="number">128</literal><operator>)</operator><operator>/</operator><literal type="number">256.</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0.67</literal></expr>, <expr><literal type="number">104</literal><operator>/</operator><literal type="number">256.</literal></expr>, <expr><operator>(</operator><literal type="number">116</literal><operator>-</operator><literal type="number">128</literal><operator>)</operator><operator>/</operator><literal type="number">256.</literal></expr>, <expr><operator>(</operator><literal type="number">162</literal><operator>-</operator><literal type="number">128</literal><operator>)</operator><operator>/</operator><literal type="number">256.</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0.77</literal></expr>, <expr><literal type="number">120</literal><operator>/</operator><literal type="number">256.</literal></expr>, <expr><operator>(</operator><literal type="number">105</literal><operator>-</operator><literal type="number">128</literal><operator>)</operator><operator>/</operator><literal type="number">256.</literal></expr>, <expr><operator>(</operator><literal type="number">188</literal><operator>-</operator><literal type="number">128</literal><operator>)</operator><operator>/</operator><literal type="number">256.</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0.87</literal></expr>, <expr><literal type="number">140</literal><operator>/</operator><literal type="number">256.</literal></expr>, <expr><operator>(</operator><literal type="number">105</literal><operator>-</operator><literal type="number">128</literal><operator>)</operator><operator>/</operator><literal type="number">256.</literal></expr>, <expr><operator>(</operator><literal type="number">188</literal><operator>-</operator><literal type="number">128</literal><operator>)</operator><operator>/</operator><literal type="number">256.</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>}</block></expr>,

<expr><index>[<expr><name>FIRE</name></expr>]</index> <operator>=</operator> <block>{

<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0.23</literal></expr>, <expr><literal type="number">44</literal><operator>/</operator><literal type="number">256.</literal></expr>, <expr><operator>(</operator><literal type="number">132</literal><operator>-</operator><literal type="number">128</literal><operator>)</operator><operator>/</operator><literal type="number">256.</literal></expr>, <expr><operator>(</operator><literal type="number">127</literal><operator>-</operator><literal type="number">128</literal><operator>)</operator><operator>/</operator><literal type="number">256.</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0.45</literal></expr>, <expr><literal type="number">62</literal><operator>/</operator><literal type="number">256.</literal></expr>, <expr><operator>(</operator><literal type="number">116</literal><operator>-</operator><literal type="number">128</literal><operator>)</operator><operator>/</operator><literal type="number">256.</literal></expr>, <expr><operator>(</operator><literal type="number">140</literal><operator>-</operator><literal type="number">128</literal><operator>)</operator><operator>/</operator><literal type="number">256.</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0.57</literal></expr>, <expr><literal type="number">75</literal><operator>/</operator><literal type="number">256.</literal></expr>, <expr><operator>(</operator><literal type="number">105</literal><operator>-</operator><literal type="number">128</literal><operator>)</operator><operator>/</operator><literal type="number">256.</literal></expr>, <expr><operator>(</operator><literal type="number">152</literal><operator>-</operator><literal type="number">128</literal><operator>)</operator><operator>/</operator><literal type="number">256.</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0.67</literal></expr>, <expr><literal type="number">95</literal><operator>/</operator><literal type="number">256.</literal></expr>, <expr><operator>(</operator><literal type="number">91</literal><operator>-</operator><literal type="number">128</literal><operator>)</operator><operator>/</operator><literal type="number">256.</literal></expr>, <expr><operator>(</operator><literal type="number">166</literal><operator>-</operator><literal type="number">128</literal><operator>)</operator><operator>/</operator><literal type="number">256.</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0.77</literal></expr>, <expr><literal type="number">126</literal><operator>/</operator><literal type="number">256.</literal></expr>, <expr><operator>(</operator><literal type="number">74</literal><operator>-</operator><literal type="number">128</literal><operator>)</operator><operator>/</operator><literal type="number">256.</literal></expr>, <expr><operator>(</operator><literal type="number">172</literal><operator>-</operator><literal type="number">128</literal><operator>)</operator><operator>/</operator><literal type="number">256.</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0.87</literal></expr>, <expr><literal type="number">164</literal><operator>/</operator><literal type="number">256.</literal></expr>, <expr><operator>(</operator><literal type="number">73</literal><operator>-</operator><literal type="number">128</literal><operator>)</operator><operator>/</operator><literal type="number">256.</literal></expr>, <expr><operator>(</operator><literal type="number">162</literal><operator>-</operator><literal type="number">128</literal><operator>)</operator><operator>/</operator><literal type="number">256.</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>}</block></expr>,

<expr><index>[<expr><name>FIERY</name></expr>]</index> <operator>=</operator> <block>{

<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0.23</literal></expr>, <expr><literal type="number">36</literal><operator>/</operator><literal type="number">256.</literal></expr>, <expr><operator>(</operator><literal type="number">116</literal><operator>-</operator><literal type="number">128</literal><operator>)</operator><operator>/</operator><literal type="number">256.</literal></expr>, <expr><operator>(</operator><literal type="number">163</literal><operator>-</operator><literal type="number">128</literal><operator>)</operator><operator>/</operator><literal type="number">256.</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0.45</literal></expr>, <expr><literal type="number">52</literal><operator>/</operator><literal type="number">256.</literal></expr>, <expr><operator>(</operator><literal type="number">102</literal><operator>-</operator><literal type="number">128</literal><operator>)</operator><operator>/</operator><literal type="number">256.</literal></expr>, <expr><operator>(</operator><literal type="number">200</literal><operator>-</operator><literal type="number">128</literal><operator>)</operator><operator>/</operator><literal type="number">256.</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0.57</literal></expr>, <expr><literal type="number">116</literal><operator>/</operator><literal type="number">256.</literal></expr>, <expr><operator>(</operator><literal type="number">84</literal><operator>-</operator><literal type="number">128</literal><operator>)</operator><operator>/</operator><literal type="number">256.</literal></expr>, <expr><operator>(</operator><literal type="number">196</literal><operator>-</operator><literal type="number">128</literal><operator>)</operator><operator>/</operator><literal type="number">256.</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0.67</literal></expr>, <expr><literal type="number">157</literal><operator>/</operator><literal type="number">256.</literal></expr>, <expr><operator>(</operator><literal type="number">67</literal><operator>-</operator><literal type="number">128</literal><operator>)</operator><operator>/</operator><literal type="number">256.</literal></expr>, <expr><operator>(</operator><literal type="number">181</literal><operator>-</operator><literal type="number">128</literal><operator>)</operator><operator>/</operator><literal type="number">256.</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0.77</literal></expr>, <expr><literal type="number">193</literal><operator>/</operator><literal type="number">256.</literal></expr>, <expr><operator>(</operator><literal type="number">40</literal><operator>-</operator><literal type="number">128</literal><operator>)</operator><operator>/</operator><literal type="number">256.</literal></expr>, <expr><operator>(</operator><literal type="number">155</literal><operator>-</operator><literal type="number">128</literal><operator>)</operator><operator>/</operator><literal type="number">256.</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0.87</literal></expr>, <expr><literal type="number">221</literal><operator>/</operator><literal type="number">256.</literal></expr>, <expr><operator>(</operator><literal type="number">101</literal><operator>-</operator><literal type="number">128</literal><operator>)</operator><operator>/</operator><literal type="number">256.</literal></expr>, <expr><operator>(</operator><literal type="number">134</literal><operator>-</operator><literal type="number">128</literal><operator>)</operator><operator>/</operator><literal type="number">256.</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>}</block></expr>,

<expr><index>[<expr><name>FRUIT</name></expr>]</index> <operator>=</operator> <block>{

<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0.20</literal></expr>, <expr><literal type="number">29</literal><operator>/</operator><literal type="number">256.</literal></expr>, <expr><operator>(</operator><literal type="number">136</literal><operator>-</operator><literal type="number">128</literal><operator>)</operator><operator>/</operator><literal type="number">256.</literal></expr>, <expr><operator>(</operator><literal type="number">119</literal><operator>-</operator><literal type="number">128</literal><operator>)</operator><operator>/</operator><literal type="number">256.</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0.30</literal></expr>, <expr><literal type="number">60</literal><operator>/</operator><literal type="number">256.</literal></expr>, <expr><operator>(</operator><literal type="number">119</literal><operator>-</operator><literal type="number">128</literal><operator>)</operator><operator>/</operator><literal type="number">256.</literal></expr>, <expr><operator>(</operator><literal type="number">90</literal><operator>-</operator><literal type="number">128</literal><operator>)</operator><operator>/</operator><literal type="number">256.</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0.40</literal></expr>, <expr><literal type="number">85</literal><operator>/</operator><literal type="number">256.</literal></expr>, <expr><operator>(</operator><literal type="number">91</literal><operator>-</operator><literal type="number">128</literal><operator>)</operator><operator>/</operator><literal type="number">256.</literal></expr>, <expr><operator>(</operator><literal type="number">85</literal><operator>-</operator><literal type="number">128</literal><operator>)</operator><operator>/</operator><literal type="number">256.</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0.50</literal></expr>, <expr><literal type="number">116</literal><operator>/</operator><literal type="number">256.</literal></expr>, <expr><operator>(</operator><literal type="number">70</literal><operator>-</operator><literal type="number">128</literal><operator>)</operator><operator>/</operator><literal type="number">256.</literal></expr>, <expr><operator>(</operator><literal type="number">105</literal><operator>-</operator><literal type="number">128</literal><operator>)</operator><operator>/</operator><literal type="number">256.</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0.60</literal></expr>, <expr><literal type="number">151</literal><operator>/</operator><literal type="number">256.</literal></expr>, <expr><operator>(</operator><literal type="number">50</literal><operator>-</operator><literal type="number">128</literal><operator>)</operator><operator>/</operator><literal type="number">256.</literal></expr>, <expr><operator>(</operator><literal type="number">146</literal><operator>-</operator><literal type="number">128</literal><operator>)</operator><operator>/</operator><literal type="number">256.</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0.70</literal></expr>, <expr><literal type="number">191</literal><operator>/</operator><literal type="number">256.</literal></expr>, <expr><operator>(</operator><literal type="number">63</literal><operator>-</operator><literal type="number">128</literal><operator>)</operator><operator>/</operator><literal type="number">256.</literal></expr>, <expr><operator>(</operator><literal type="number">178</literal><operator>-</operator><literal type="number">128</literal><operator>)</operator><operator>/</operator><literal type="number">256.</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">98</literal><operator>/</operator><literal type="number">256.</literal></expr>, <expr><operator>(</operator><literal type="number">80</literal><operator>-</operator><literal type="number">128</literal><operator>)</operator><operator>/</operator><literal type="number">256.</literal></expr>, <expr><operator>(</operator><literal type="number">221</literal><operator>-</operator><literal type="number">128</literal><operator>)</operator><operator>/</operator><literal type="number">256.</literal></expr> }</block></expr>}</block></expr>,

<expr><index>[<expr><name>COOL</name></expr>]</index> <operator>=</operator> <block>{

<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">.15</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">.5</literal></expr>, <expr><operator>-</operator><literal type="number">.5</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">.5</literal></expr>, <expr><literal type="number">.5</literal></expr> }</block></expr>}</block></expr>,

<expr><index>[<expr><name>MAGMA</name></expr>]</index> <operator>=</operator> <block>{

<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0.10</literal></expr>, <expr><literal type="number">23</literal><operator>/</operator><literal type="number">256.</literal></expr>, <expr><operator>(</operator><literal type="number">175</literal><operator>-</operator><literal type="number">128</literal><operator>)</operator><operator>/</operator><literal type="number">256.</literal></expr>, <expr><operator>(</operator><literal type="number">120</literal><operator>-</operator><literal type="number">128</literal><operator>)</operator><operator>/</operator><literal type="number">256.</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0.23</literal></expr>, <expr><literal type="number">43</literal><operator>/</operator><literal type="number">256.</literal></expr>, <expr><operator>(</operator><literal type="number">158</literal><operator>-</operator><literal type="number">128</literal><operator>)</operator><operator>/</operator><literal type="number">256.</literal></expr>, <expr><operator>(</operator><literal type="number">144</literal><operator>-</operator><literal type="number">128</literal><operator>)</operator><operator>/</operator><literal type="number">256.</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0.35</literal></expr>, <expr><literal type="number">85</literal><operator>/</operator><literal type="number">256.</literal></expr>, <expr><operator>(</operator><literal type="number">138</literal><operator>-</operator><literal type="number">128</literal><operator>)</operator><operator>/</operator><literal type="number">256.</literal></expr>, <expr><operator>(</operator><literal type="number">179</literal><operator>-</operator><literal type="number">128</literal><operator>)</operator><operator>/</operator><literal type="number">256.</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0.48</literal></expr>, <expr><literal type="number">96</literal><operator>/</operator><literal type="number">256.</literal></expr>, <expr><operator>(</operator><literal type="number">128</literal><operator>-</operator><literal type="number">128</literal><operator>)</operator><operator>/</operator><literal type="number">256.</literal></expr>, <expr><operator>(</operator><literal type="number">189</literal><operator>-</operator><literal type="number">128</literal><operator>)</operator><operator>/</operator><literal type="number">256.</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0.64</literal></expr>, <expr><literal type="number">128</literal><operator>/</operator><literal type="number">256.</literal></expr>, <expr><operator>(</operator><literal type="number">103</literal><operator>-</operator><literal type="number">128</literal><operator>)</operator><operator>/</operator><literal type="number">256.</literal></expr>, <expr><operator>(</operator><literal type="number">214</literal><operator>-</operator><literal type="number">128</literal><operator>)</operator><operator>/</operator><literal type="number">256.</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0.92</literal></expr>, <expr><literal type="number">205</literal><operator>/</operator><literal type="number">256.</literal></expr>, <expr><operator>(</operator><literal type="number">80</literal><operator>-</operator><literal type="number">128</literal><operator>)</operator><operator>/</operator><literal type="number">256.</literal></expr>, <expr><operator>(</operator><literal type="number">152</literal><operator>-</operator><literal type="number">128</literal><operator>)</operator><operator>/</operator><literal type="number">256.</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>}</block></expr>,

<expr><index>[<expr><name>GREEN</name></expr>]</index> <operator>=</operator> <block>{

<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">.75</literal></expr>, <expr><literal type="number">.5</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>-</operator><literal type="number">.5</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>}</block></expr>,

<expr><index>[<expr><name>VIRIDIS</name></expr>]</index> <operator>=</operator> <block>{

<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0.10</literal></expr>, <expr><literal type="number">0x39</literal><operator>/</operator><literal type="number">255.</literal></expr>, <expr><operator>(</operator><literal type="number">0x9D</literal> <operator>-</operator><literal type="number">128</literal><operator>)</operator><operator>/</operator><literal type="number">255.</literal></expr>, <expr><operator>(</operator><literal type="number">0x8F</literal> <operator>-</operator><literal type="number">128</literal><operator>)</operator><operator>/</operator><literal type="number">255.</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0.23</literal></expr>, <expr><literal type="number">0x5C</literal><operator>/</operator><literal type="number">255.</literal></expr>, <expr><operator>(</operator><literal type="number">0x9A</literal> <operator>-</operator><literal type="number">128</literal><operator>)</operator><operator>/</operator><literal type="number">255.</literal></expr>, <expr><operator>(</operator><literal type="number">0x68</literal> <operator>-</operator><literal type="number">128</literal><operator>)</operator><operator>/</operator><literal type="number">255.</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0.35</literal></expr>, <expr><literal type="number">0x69</literal><operator>/</operator><literal type="number">255.</literal></expr>, <expr><operator>(</operator><literal type="number">0x93</literal> <operator>-</operator><literal type="number">128</literal><operator>)</operator><operator>/</operator><literal type="number">255.</literal></expr>, <expr><operator>(</operator><literal type="number">0x57</literal> <operator>-</operator><literal type="number">128</literal><operator>)</operator><operator>/</operator><literal type="number">255.</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0.48</literal></expr>, <expr><literal type="number">0x76</literal><operator>/</operator><literal type="number">255.</literal></expr>, <expr><operator>(</operator><literal type="number">0x88</literal> <operator>-</operator><literal type="number">128</literal><operator>)</operator><operator>/</operator><literal type="number">255.</literal></expr>, <expr><operator>(</operator><literal type="number">0x4B</literal> <operator>-</operator><literal type="number">128</literal><operator>)</operator><operator>/</operator><literal type="number">255.</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0.64</literal></expr>, <expr><literal type="number">0x8A</literal><operator>/</operator><literal type="number">255.</literal></expr>, <expr><operator>(</operator><literal type="number">0x72</literal> <operator>-</operator><literal type="number">128</literal><operator>)</operator><operator>/</operator><literal type="number">255.</literal></expr>, <expr><operator>(</operator><literal type="number">0x4F</literal> <operator>-</operator><literal type="number">128</literal><operator>)</operator><operator>/</operator><literal type="number">255.</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0.80</literal></expr>, <expr><literal type="number">0xA3</literal><operator>/</operator><literal type="number">255.</literal></expr>, <expr><operator>(</operator><literal type="number">0x50</literal> <operator>-</operator><literal type="number">128</literal><operator>)</operator><operator>/</operator><literal type="number">255.</literal></expr>, <expr><operator>(</operator><literal type="number">0x66</literal> <operator>-</operator><literal type="number">128</literal><operator>)</operator><operator>/</operator><literal type="number">255.</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0xCC</literal><operator>/</operator><literal type="number">255.</literal></expr>, <expr><operator>(</operator><literal type="number">0x2F</literal> <operator>-</operator><literal type="number">128</literal><operator>)</operator><operator>/</operator><literal type="number">255.</literal></expr>, <expr><operator>(</operator><literal type="number">0x87</literal> <operator>-</operator><literal type="number">128</literal><operator>)</operator><operator>/</operator><literal type="number">255.</literal></expr> }</block></expr>}</block></expr>,

<expr><index>[<expr><name>PLASMA</name></expr>]</index> <operator>=</operator> <block>{

<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0.10</literal></expr>, <expr><literal type="number">0x27</literal><operator>/</operator><literal type="number">255.</literal></expr>, <expr><operator>(</operator><literal type="number">0xC2</literal> <operator>-</operator><literal type="number">128</literal><operator>)</operator><operator>/</operator><literal type="number">255.</literal></expr>, <expr><operator>(</operator><literal type="number">0x82</literal> <operator>-</operator><literal type="number">128</literal><operator>)</operator><operator>/</operator><literal type="number">255.</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0.58</literal></expr>, <expr><literal type="number">0x5B</literal><operator>/</operator><literal type="number">255.</literal></expr>, <expr><operator>(</operator><literal type="number">0x9A</literal> <operator>-</operator><literal type="number">128</literal><operator>)</operator><operator>/</operator><literal type="number">255.</literal></expr>, <expr><operator>(</operator><literal type="number">0xAE</literal> <operator>-</operator><literal type="number">128</literal><operator>)</operator><operator>/</operator><literal type="number">255.</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0.70</literal></expr>, <expr><literal type="number">0x89</literal><operator>/</operator><literal type="number">255.</literal></expr>, <expr><operator>(</operator><literal type="number">0x44</literal> <operator>-</operator><literal type="number">128</literal><operator>)</operator><operator>/</operator><literal type="number">255.</literal></expr>, <expr><operator>(</operator><literal type="number">0xAB</literal> <operator>-</operator><literal type="number">128</literal><operator>)</operator><operator>/</operator><literal type="number">255.</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0.80</literal></expr>, <expr><literal type="number">0xB4</literal><operator>/</operator><literal type="number">255.</literal></expr>, <expr><operator>(</operator><literal type="number">0x2B</literal> <operator>-</operator><literal type="number">128</literal><operator>)</operator><operator>/</operator><literal type="number">255.</literal></expr>, <expr><operator>(</operator><literal type="number">0x9E</literal> <operator>-</operator><literal type="number">128</literal><operator>)</operator><operator>/</operator><literal type="number">255.</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0.91</literal></expr>, <expr><literal type="number">0xD2</literal><operator>/</operator><literal type="number">255.</literal></expr>, <expr><operator>(</operator><literal type="number">0x38</literal> <operator>-</operator><literal type="number">128</literal><operator>)</operator><operator>/</operator><literal type="number">255.</literal></expr>, <expr><operator>(</operator><literal type="number">0x92</literal> <operator>-</operator><literal type="number">128</literal><operator>)</operator><operator>/</operator><literal type="number">255.</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0.</literal></expr> }</block></expr>}</block></expr>,

<expr><index>[<expr><name>CIVIDIS</name></expr>]</index> <operator>=</operator> <block>{

<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0.20</literal></expr>, <expr><literal type="number">0x28</literal><operator>/</operator><literal type="number">255.</literal></expr>, <expr><operator>(</operator><literal type="number">0x98</literal> <operator>-</operator><literal type="number">128</literal><operator>)</operator><operator>/</operator><literal type="number">255.</literal></expr>, <expr><operator>(</operator><literal type="number">0x6F</literal> <operator>-</operator><literal type="number">128</literal><operator>)</operator><operator>/</operator><literal type="number">255.</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0.50</literal></expr>, <expr><literal type="number">0x48</literal><operator>/</operator><literal type="number">255.</literal></expr>, <expr><operator>(</operator><literal type="number">0x95</literal> <operator>-</operator><literal type="number">128</literal><operator>)</operator><operator>/</operator><literal type="number">255.</literal></expr>, <expr><operator>(</operator><literal type="number">0x74</literal> <operator>-</operator><literal type="number">128</literal><operator>)</operator><operator>/</operator><literal type="number">255.</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0.63</literal></expr>, <expr><literal type="number">0x69</literal><operator>/</operator><literal type="number">255.</literal></expr>, <expr><operator>(</operator><literal type="number">0x84</literal> <operator>-</operator><literal type="number">128</literal><operator>)</operator><operator>/</operator><literal type="number">255.</literal></expr>, <expr><operator>(</operator><literal type="number">0x7F</literal> <operator>-</operator><literal type="number">128</literal><operator>)</operator><operator>/</operator><literal type="number">255.</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0.76</literal></expr>, <expr><literal type="number">0x89</literal><operator>/</operator><literal type="number">255.</literal></expr>, <expr><operator>(</operator><literal type="number">0x75</literal> <operator>-</operator><literal type="number">128</literal><operator>)</operator><operator>/</operator><literal type="number">255.</literal></expr>, <expr><operator>(</operator><literal type="number">0x84</literal> <operator>-</operator><literal type="number">128</literal><operator>)</operator><operator>/</operator><literal type="number">255.</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0.90</literal></expr>, <expr><literal type="number">0xCE</literal><operator>/</operator><literal type="number">255.</literal></expr>, <expr><operator>(</operator><literal type="number">0x35</literal> <operator>-</operator><literal type="number">128</literal><operator>)</operator><operator>/</operator><literal type="number">255.</literal></expr>, <expr><operator>(</operator><literal type="number">0x95</literal> <operator>-</operator><literal type="number">128</literal><operator>)</operator><operator>/</operator><literal type="number">255.</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0.</literal></expr> }</block></expr>}</block></expr>,

<expr><index>[<expr><name>TERRAIN</name></expr>]</index> <operator>=</operator> <block>{

<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0.15</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">.5</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0.60</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">.5</literal></expr>, <expr><operator>-</operator><literal type="number">.5</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0.85</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">.5</literal></expr>, <expr><literal type="number">.5</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>}</block></expr>,

}</block></expr></init></decl>;</struct>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>void</name></type> <name>uninit</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ShowSpectrumContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>combine_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>fft</name></name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>nb_display_channels</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_fft_end</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>fft</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>fft</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>ifft</name></name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>nb_display_channels</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_fft_end</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>ifft</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>ifft</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>fft_data</name></name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>nb_display_channels</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>fft_data</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>fft_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>fft_scratch</name></name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>nb_display_channels</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>fft_scratch</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>fft_scratch</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>color_buffer</name></name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>nb_display_channels</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>color_buffer</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>color_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>window_func_lut</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>magnitudes</name></name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>nb_display_channels</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>magnitudes</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>magnitudes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>outpicref</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_audio_fifo_free</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>fifo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>phases</name></name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>nb_display_channels</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>phases</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>phases</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>query_formats</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVFilterFormats</name> <modifier>*</modifier></type><name>formats</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFilterChannelLayouts</name> <modifier>*</modifier></type><name>layouts</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>inlink</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>inputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>outlink</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>outputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>enum</name> <name>AVSampleFormat</name></name></type> <name><name>sample_fmts</name><index>[]</index></name> <init>= <expr><block>{ <expr><name>AV_SAMPLE_FMT_FLTP</name></expr>, <expr><name>AV_SAMPLE_FMT_NONE</name></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>enum</name> <name>AVPixelFormat</name></name></type> <name><name>pix_fmts</name><index>[]</index></name> <init>= <expr><block>{ <expr><name>AV_PIX_FMT_YUV444P</name></expr>, <expr><name>AV_PIX_FMT_YUVJ444P</name></expr>, <expr><name>AV_PIX_FMT_NONE</name></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name>formats</name> <operator>=</operator> <call><name>ff_make_format_list</name><argument_list>(<argument><expr><name>sample_fmts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_formats_ref</name><argument_list>(<argument><expr><name>formats</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>inlink</name><operator>-&gt;</operator><name>out_formats</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>layouts</name> <operator>=</operator> <call><name>ff_all_channel_layouts</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_channel_layouts_ref</name><argument_list>(<argument><expr><name>layouts</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>inlink</name><operator>-&gt;</operator><name>out_channel_layouts</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>formats</name> <operator>=</operator> <call><name>ff_all_samplerates</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_formats_ref</name><argument_list>(<argument><expr><name>formats</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>inlink</name><operator>-&gt;</operator><name>out_samplerates</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>formats</name> <operator>=</operator> <call><name>ff_make_format_list</name><argument_list>(<argument><expr><name>pix_fmts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_formats_ref</name><argument_list>(<argument><expr><name>formats</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>outlink</name><operator>-&gt;</operator><name>in_formats</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>run_channel_fft</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>jobnr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nb_jobs</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ShowSpectrumContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>inlink</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>inputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>window_func_lut</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>window_func_lut</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>fin</name> <init>= <expr><name>arg</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>ch</name> <init>= <expr><name>jobnr</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><name><name>fin</name><operator>-&gt;</operator><name>extended_data</name><index>[<expr><name>ch</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>win_size</name></name></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>fft_data</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>re</name> <operator>=</operator> <name><name>p</name><index>[<expr><name>n</name></expr>]</index></name> <operator>*</operator> <name><name>window_func_lut</name><index>[<expr><name>n</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>fft_data</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>im</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>stop</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>theta</name></decl>, <decl><type ref="prev"/><name>phi</name></decl>, <decl><type ref="prev"/><name>psi</name></decl>, <decl><type ref="prev"/><name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>, <decl><type ref="prev"/><name>S</name></decl>, <decl><type ref="prev"/><name>c</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>FFTComplex</name> <modifier>*</modifier></type><name>g</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>fft_data</name><index>[<expr><name>ch</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>FFTComplex</name> <modifier>*</modifier></type><name>h</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>fft_scratch</name><index>[<expr><name>ch</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>L</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>buf_size</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>N</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>win_size</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>M</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>win_size</name></name> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>phi</name> <operator>=</operator> <literal type="number">2.f</literal> <operator>*</operator> <name>M_PI</name> <operator>*</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>stop</name></name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>start</name></name><operator>)</operator> <operator>/</operator> <operator>(</operator><name>float</name><operator>)</operator><name><name>inlink</name><operator>-&gt;</operator><name>sample_rate</name></name> <operator>/</operator> <operator>(</operator><name>M</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>theta</name> <operator>=</operator> <literal type="number">2.f</literal> <operator>*</operator> <name>M_PI</name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>start</name></name> <operator>/</operator> <operator>(</operator><name>float</name><operator>)</operator><name><name>inlink</name><operator>-&gt;</operator><name>sample_rate</name></name></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name>M</name></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>h</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>re</name> <operator>=</operator> <call><name>cosf</name><argument_list>(<argument><expr><name>n</name> <operator>*</operator> <name>n</name> <operator>/</operator> <literal type="number">2.f</literal> <operator>*</operator> <name>phi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>im</name> <operator>=</operator> <call><name>sinf</name><argument_list>(<argument><expr><name>n</name> <operator>*</operator> <name>n</name> <operator>/</operator> <literal type="number">2.f</literal> <operator>*</operator> <name>phi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for <control>(<init><decl><type><name>int</name></type> <name>n</name> <init>= <expr><name>M</name></expr></init></decl>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name>L</name></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>h</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>re</name> <operator>=</operator> <literal type="number">0.f</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>im</name> <operator>=</operator> <literal type="number">0.f</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for <control>(<init><decl><type><name>int</name></type> <name>n</name> <init>= <expr><name>L</name> <operator>-</operator> <name>N</name></expr></init></decl>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name>L</name></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>h</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>re</name> <operator>=</operator> <call><name>cosf</name><argument_list>(<argument><expr><operator>(</operator><name>L</name> <operator>-</operator> <name>n</name><operator>)</operator> <operator>*</operator> <operator>(</operator><name>L</name> <operator>-</operator> <name>n</name><operator>)</operator> <operator>/</operator> <literal type="number">2.f</literal> <operator>*</operator> <name>phi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>im</name> <operator>=</operator> <call><name>sinf</name><argument_list>(<argument><expr><operator>(</operator><name>L</name> <operator>-</operator> <name>n</name><operator>)</operator> <operator>*</operator> <operator>(</operator><name>L</name> <operator>-</operator> <name>n</name><operator>)</operator> <operator>/</operator> <literal type="number">2.f</literal> <operator>*</operator> <name>phi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for <control>(<init><decl><type><name>int</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name>N</name></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>g</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>re</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>fft_data</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>re</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>g</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>im</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>fft_data</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>im</name></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for <control>(<init><decl><type><name>int</name></type> <name>n</name> <init>= <expr><name>N</name></expr></init></decl>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name>L</name></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>g</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>re</name> <operator>=</operator> <literal type="number">0.f</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>g</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>im</name> <operator>=</operator> <literal type="number">0.f</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for <control>(<init><decl><type><name>int</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name>N</name></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>psi</name> <operator>=</operator> <name>n</name> <operator>*</operator> <name>theta</name> <operator>+</operator> <name>n</name> <operator>*</operator> <name>n</name> <operator>/</operator> <literal type="number">2.f</literal> <operator>*</operator> <name>phi</name></expr>;</expr_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>cosf</name><argument_list>(<argument><expr><name>psi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>S</name> <operator>=</operator> <operator>-</operator><call><name>sinf</name><argument_list>(<argument><expr><name>psi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>a</name> <operator>=</operator> <name>c</name> <operator>*</operator> <name><name>g</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>re</name> <operator>-</operator> <name>S</name> <operator>*</operator> <name><name>g</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>im</name></expr>;</expr_stmt>

<expr_stmt><expr><name>b</name> <operator>=</operator> <name>S</name> <operator>*</operator> <name><name>g</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>re</name> <operator>+</operator> <name>c</name> <operator>*</operator> <name><name>g</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>im</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>g</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>re</name> <operator>=</operator> <name>a</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>g</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>im</name> <operator>=</operator> <name>b</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>av_fft_permute</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>fft</name><index>[<expr><name>ch</name></expr>]</index></name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_fft_calc</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>fft</name><index>[<expr><name>ch</name></expr>]</index></name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_fft_permute</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>fft</name><index>[<expr><name>ch</name></expr>]</index></name></expr></argument>, <argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_fft_calc</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>fft</name><index>[<expr><name>ch</name></expr>]</index></name></expr></argument>, <argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name>L</name></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>c</name> <operator>=</operator> <name><name>g</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>re</name></expr>;</expr_stmt>

<expr_stmt><expr><name>S</name> <operator>=</operator> <name><name>g</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>im</name></expr>;</expr_stmt>

<expr_stmt><expr><name>a</name> <operator>=</operator> <name>c</name> <operator>*</operator> <name><name>h</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>re</name> <operator>-</operator> <name>S</name> <operator>*</operator> <name><name>h</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>im</name></expr>;</expr_stmt>

<expr_stmt><expr><name>b</name> <operator>=</operator> <name>S</name> <operator>*</operator> <name><name>h</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>re</name> <operator>+</operator> <name>c</name> <operator>*</operator> <name><name>h</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>im</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>g</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>re</name> <operator>=</operator> <name>a</name> <operator>/</operator> <name>L</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>g</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>im</name> <operator>=</operator> <name>b</name> <operator>/</operator> <name>L</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>av_fft_permute</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>ifft</name><index>[<expr><name>ch</name></expr>]</index></name></expr></argument>, <argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_fft_calc</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>ifft</name><index>[<expr><name>ch</name></expr>]</index></name></expr></argument>, <argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>M</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>psi</name> <operator>=</operator> <name>k</name> <operator>*</operator> <name>k</name> <operator>/</operator> <literal type="number">2.f</literal> <operator>*</operator> <name>phi</name></expr>;</expr_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>cosf</name><argument_list>(<argument><expr><name>psi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>S</name> <operator>=</operator> <operator>-</operator><call><name>sinf</name><argument_list>(<argument><expr><name>psi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>a</name> <operator>=</operator> <name>c</name> <operator>*</operator> <name><name>g</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>re</name> <operator>-</operator> <name>S</name> <operator>*</operator> <name><name>g</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>im</name></expr>;</expr_stmt>

<expr_stmt><expr><name>b</name> <operator>=</operator> <name>S</name> <operator>*</operator> <name><name>g</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>re</name> <operator>+</operator> <name>c</name> <operator>*</operator> <name><name>g</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>im</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>fft_data</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>re</name> <operator>=</operator> <name>a</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>fft_data</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>im</name> <operator>=</operator> <name>b</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>av_fft_permute</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>fft</name><index>[<expr><name>ch</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>fft_data</name><index>[<expr><name>ch</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_fft_calc</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>fft</name><index>[<expr><name>ch</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>fft_data</name><index>[<expr><name>ch</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>drawtext</name><parameter_list>(<parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>pic</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>txt</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>o</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>font</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>font_height</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name>font</name> <operator>=</operator> <name>avpriv_cga_font</name></expr><operator>,</operator> <expr><name>font_height</name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>txt</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>char_y</name></decl>, <decl><type ref="prev"/><name>mask</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>o</name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>char_y</name> <operator>=</operator> <name>font_height</name> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>char_y</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>char_y</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name><name>pic</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><name>y</name> <operator>+</operator> <name>i</name> <operator>*</operator> <literal type="number">10</literal><operator>)</operator> <operator>*</operator> <name><name>pic</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>x</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>mask</name> <operator>=</operator> <literal type="number">0x80</literal></expr>;</init> <condition><expr><name>mask</name></expr>;</condition> <incr><expr><name>mask</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>font</name><index>[<expr><name><name>txt</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name>font_height</name> <operator>+</operator> <name>font_height</name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <name>char_y</name></expr>]</index></name> <operator>&amp;</operator> <name>mask</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p</name><index>[<expr><name>char_y</name></expr>]</index></name> <operator>=</operator> <operator>~</operator><name><name>p</name><index>[<expr><name>char_y</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>p</name> <operator>+=</operator> <name><name>pic</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name><name>pic</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>y</name><operator>*</operator><name><name>pic</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><name>x</name> <operator>+</operator> <name>i</name><operator>*</operator><literal type="number">8</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>char_y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>char_y</name> <operator>&lt;</operator> <name>font_height</name></expr>;</condition> <incr><expr><name>char_y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>mask</name> <operator>=</operator> <literal type="number">0x80</literal></expr>;</init> <condition><expr><name>mask</name></expr>;</condition> <incr><expr><name>mask</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>font</name><index>[<expr><name><name>txt</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name>font_height</name> <operator>+</operator> <name>char_y</name></expr>]</index></name> <operator>&amp;</operator> <name>mask</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <operator>~</operator><operator>(</operator><operator>*</operator><name>p</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>p</name> <operator>+=</operator> <name><name>pic</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <literal type="number">8</literal></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>color_range</name><parameter_list>(<parameter><decl><type><name>ShowSpectrumContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ch</name></decl></parameter>,

<parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>yf</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>uf</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>vf</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<switch>switch <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>mode</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>COMBINED</name></expr>:</case>

<expr_stmt><expr><operator>*</operator><name>yf</name> <operator>=</operator> <literal type="number">256.0f</literal> <operator>/</operator> <name><name>s</name><operator>-&gt;</operator><name>nb_display_channels</name></name></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>color_mode</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>RAINBOW</name></expr>:</case>

<case>case <expr><name>MORELAND</name></expr>:</case>

<case>case <expr><name>NEBULAE</name></expr>:</case>

<case>case <expr><name>FIRE</name></expr>:</case>

<case>case <expr><name>FIERY</name></expr>:</case>

<case>case <expr><name>FRUIT</name></expr>:</case>

<case>case <expr><name>COOL</name></expr>:</case>

<case>case <expr><name>GREEN</name></expr>:</case>

<case>case <expr><name>VIRIDIS</name></expr>:</case>

<case>case <expr><name>PLASMA</name></expr>:</case>

<case>case <expr><name>CIVIDIS</name></expr>:</case>

<case>case <expr><name>TERRAIN</name></expr>:</case>

<case>case <expr><name>MAGMA</name></expr>:</case>

<case>case <expr><name>INTENSITY</name></expr>:</case>

<expr_stmt><expr><operator>*</operator><name>uf</name> <operator>=</operator> <operator>*</operator><name>yf</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>vf</name> <operator>=</operator> <operator>*</operator><name>yf</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>CHANNEL</name></expr>:</case>

<expr_stmt><expr><operator>*</operator><name>uf</name> <operator>=</operator> <operator>*</operator><name>yf</name> <operator>*</operator> <name>M_PI</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>vf</name> <operator>=</operator> <operator>*</operator><name>yf</name> <operator>*</operator> <name>M_PI</name></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></switch>

<break>break;</break>

<case>case <expr><name>SEPARATE</name></expr>:</case>

<expr_stmt><expr><operator>*</operator><name>yf</name> <operator>=</operator> <literal type="number">256.0f</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>uf</name> <operator>=</operator> <literal type="number">256.0f</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>vf</name> <operator>=</operator> <literal type="number">256.0f</literal></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>color_mode</name></name> <operator>==</operator> <name>CHANNEL</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>nb_display_channels</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>uf</name> <operator>*=</operator> <literal type="number">0.5f</literal> <operator>*</operator> <call><name>sinf</name><argument_list>(<argument><expr><operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>M_PI</name> <operator>*</operator> <name>ch</name><operator>)</operator> <operator>/</operator> <name><name>s</name><operator>-&gt;</operator><name>nb_display_channels</name></name> <operator>+</operator> <name>M_PI</name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>rotation</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>vf</name> <operator>*=</operator> <literal type="number">0.5f</literal> <operator>*</operator> <call><name>cosf</name><argument_list>(<argument><expr><operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>M_PI</name> <operator>*</operator> <name>ch</name><operator>)</operator> <operator>/</operator> <name><name>s</name><operator>-&gt;</operator><name>nb_display_channels</name></name> <operator>+</operator> <name>M_PI</name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>rotation</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>uf</name> <operator>*=</operator> <literal type="number">0.5f</literal> <operator>*</operator> <call><name>sinf</name><argument_list>(<argument><expr><name>M_PI</name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>rotation</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>vf</name> <operator>*=</operator> <literal type="number">0.5f</literal> <operator>*</operator> <call><name>cosf</name><argument_list>(<argument><expr><name>M_PI</name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>rotation</name></name> <operator>+</operator> <name>M_PI_2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>uf</name> <operator>+=</operator> <operator>*</operator><name>uf</name> <operator>*</operator> <call><name>sinf</name><argument_list>(<argument><expr><name>M_PI</name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>rotation</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>vf</name> <operator>+=</operator> <operator>*</operator><name>vf</name> <operator>*</operator> <call><name>cosf</name><argument_list>(<argument><expr><name>M_PI</name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>rotation</name></name> <operator>+</operator> <name>M_PI_2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><operator>*</operator><name>uf</name> <operator>*=</operator> <name><name>s</name><operator>-&gt;</operator><name>saturation</name></name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>vf</name> <operator>*=</operator> <name><name>s</name><operator>-&gt;</operator><name>saturation</name></name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>pick_color</name><parameter_list>(<parameter><decl><type><name>ShowSpectrumContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>,

<parameter><decl><type><name>float</name></type> <name>yf</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>uf</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>vf</name></decl></parameter>,

<parameter><decl><type><name>float</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>out</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>color_mode</name></name> <operator>&gt;</operator> <name>CHANNEL</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>cm</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>color_mode</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>y</name></decl>, <decl><type ref="prev"/><name>u</name></decl>, <decl><type ref="prev"/><name>v</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name><name>color_table</name><index>[<expr><name>cm</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name><name>color_table</name><index>[<expr><name>cm</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>a</name> <operator>&gt;=</operator> <name>a</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name>a</name> <operator>&lt;=</operator> <name><name>color_table</name><index>[<expr><name>cm</name></expr>]</index><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>a</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>y</name> <operator>=</operator> <name><name>color_table</name><index>[<expr><name>cm</name></expr>]</index><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>y</name></expr>;</expr_stmt>

<expr_stmt><expr><name>u</name> <operator>=</operator> <name><name>color_table</name><index>[<expr><name>cm</name></expr>]</index><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>u</name></expr>;</expr_stmt>

<expr_stmt><expr><name>v</name> <operator>=</operator> <name><name>color_table</name><index>[<expr><name>cm</name></expr>]</index><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>v</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>a</name> <operator>&gt;=</operator> <name><name>color_table</name><index>[<expr><name>cm</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>a</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>y</name> <operator>=</operator> <name><name>color_table</name><index>[<expr><name>cm</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>y</name></expr>;</expr_stmt>

<expr_stmt><expr><name>u</name> <operator>=</operator> <name><name>color_table</name><index>[<expr><name>cm</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>u</name></expr>;</expr_stmt>

<expr_stmt><expr><name>v</name> <operator>=</operator> <name><name>color_table</name><index>[<expr><name>cm</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>v</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>start</name> <init>= <expr><name><name>color_table</name><index>[<expr><name>cm</name></expr>]</index><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>a</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>end</name> <init>= <expr><name><name>color_table</name><index>[<expr><name>cm</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>a</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>lerpfrac</name> <init>= <expr><operator>(</operator><name>a</name> <operator>-</operator> <name>start</name><operator>)</operator> <operator>/</operator> <operator>(</operator><name>end</name> <operator>-</operator> <name>start</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>y</name> <operator>=</operator> <name><name>color_table</name><index>[<expr><name>cm</name></expr>]</index><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>y</name> <operator>*</operator> <operator>(</operator><literal type="number">1.0f</literal> <operator>-</operator> <name>lerpfrac</name><operator>)</operator>

<operator>+</operator> <name><name>color_table</name><index>[<expr><name>cm</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>y</name> <operator>*</operator> <name>lerpfrac</name></expr>;</expr_stmt>

<expr_stmt><expr><name>u</name> <operator>=</operator> <name><name>color_table</name><index>[<expr><name>cm</name></expr>]</index><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>u</name> <operator>*</operator> <operator>(</operator><literal type="number">1.0f</literal> <operator>-</operator> <name>lerpfrac</name><operator>)</operator>

<operator>+</operator> <name><name>color_table</name><index>[<expr><name>cm</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>u</name> <operator>*</operator> <name>lerpfrac</name></expr>;</expr_stmt>

<expr_stmt><expr><name>v</name> <operator>=</operator> <name><name>color_table</name><index>[<expr><name>cm</name></expr>]</index><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>v</name> <operator>*</operator> <operator>(</operator><literal type="number">1.0f</literal> <operator>-</operator> <name>lerpfrac</name><operator>)</operator>

<operator>+</operator> <name><name>color_table</name><index>[<expr><name>cm</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>v</name> <operator>*</operator> <name>lerpfrac</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>y</name> <operator>*</operator> <name>yf</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>u</name> <operator>*</operator> <name>uf</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>v</name> <operator>*</operator> <name>vf</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>a</name> <operator>*</operator> <name>yf</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>a</name> <operator>*</operator> <name>uf</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>a</name> <operator>*</operator> <name>vf</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>get_time</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>seconds</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>units</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>x</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>units</name> <operator>=</operator> <call><name>av_asprintf</name><argument_list>(<argument><expr><literal type="string">"0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>log10</name><argument_list>(<argument><expr><name>seconds</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">6</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>units</name> <operator>=</operator> <call><name>av_asprintf</name><argument_list>(<argument><expr><literal type="string">"%.2fh"</literal></expr></argument>, <argument><expr><name>seconds</name> <operator>/</operator> <operator>(</operator><literal type="number">60</literal> <operator>*</operator> <literal type="number">60</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>log10</name><argument_list>(<argument><expr><name>seconds</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>units</name> <operator>=</operator> <call><name>av_asprintf</name><argument_list>(<argument><expr><literal type="string">"%.2fm"</literal></expr></argument>, <argument><expr><name>seconds</name> <operator>/</operator> <literal type="number">60</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>units</name> <operator>=</operator> <call><name>av_asprintf</name><argument_list>(<argument><expr><literal type="string">"%.2fs"</literal></expr></argument>, <argument><expr><name>seconds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<return>return <expr><name>units</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>float</name></type> <name>log_scale</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>float</name></type> <name>value</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name></type> <name>min</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name></type> <name>max</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>value</name> <operator>&lt;</operator> <name>min</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>min</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>value</name> <operator>&gt;</operator> <name>max</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>max</name></expr>;</return></block_content></block></if></if_stmt>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>b</name> <init>= <expr><call><name>logf</name><argument_list>(<argument><expr><name>max</name> <operator>/</operator> <name>min</name></expr></argument>)</argument_list></call> <operator>/</operator> <operator>(</operator><name>max</name> <operator>-</operator> <name>min</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>a</name> <init>= <expr><name>max</name> <operator>/</operator> <call><name>expf</name><argument_list>(<argument><expr><name>max</name> <operator>*</operator> <name>b</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>expf</name><argument_list>(<argument><expr><name>value</name> <operator>*</operator> <name>b</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>a</name></expr>;</return>

</block_content>}</block>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>float</name></type> <name>get_log_hz</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>bin</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>num_bins</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name></type> <name>sample_rate</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>max_freq</name> <init>= <expr><name>sample_rate</name> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>hz_per_bin</name> <init>= <expr><name>max_freq</name> <operator>/</operator> <name>num_bins</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>freq</name> <init>= <expr><name>hz_per_bin</name> <operator>*</operator> <name>bin</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>scaled_freq</name> <init>= <expr><call><name>log_scale</name><argument_list>(<argument><expr><name>freq</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">21</literal></expr></argument>, <argument><expr><name>max_freq</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<return>return <expr><name>num_bins</name> <operator>*</operator> <name>scaled_freq</name> <operator>/</operator> <name>max_freq</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>float</name></type> <name>inv_log_scale</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>float</name></type> <name>value</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name></type> <name>min</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name></type> <name>max</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>value</name> <operator>&lt;</operator> <name>min</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>min</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>value</name> <operator>&gt;</operator> <name>max</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>max</name></expr>;</return></block_content></block></if></if_stmt>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>b</name> <init>= <expr><call><name>logf</name><argument_list>(<argument><expr><name>max</name> <operator>/</operator> <name>min</name></expr></argument>)</argument_list></call> <operator>/</operator> <operator>(</operator><name>max</name> <operator>-</operator> <name>min</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>a</name> <init>= <expr><name>max</name> <operator>/</operator> <call><name>expf</name><argument_list>(<argument><expr><name>max</name> <operator>*</operator> <name>b</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>logf</name><argument_list>(<argument><expr><name>value</name> <operator>/</operator> <name>a</name></expr></argument>)</argument_list></call> <operator>/</operator> <name>b</name></expr>;</return>

</block_content>}</block>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>float</name></type> <name>bin_pos</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>bin</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>num_bins</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name></type> <name>sample_rate</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>max_freq</name> <init>= <expr><name>sample_rate</name> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>hz_per_bin</name> <init>= <expr><name>max_freq</name> <operator>/</operator> <name>num_bins</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>freq</name> <init>= <expr><name>hz_per_bin</name> <operator>*</operator> <name>bin</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>scaled_freq</name> <init>= <expr><call><name>inv_log_scale</name><argument_list>(<argument><expr><name>freq</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">21</literal></expr></argument>, <argument><expr><name>max_freq</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<return>return <expr><name>num_bins</name> <operator>*</operator> <name>scaled_freq</name> <operator>/</operator> <name>max_freq</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>draw_legend</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>samples</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ShowSpectrumContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>inlink</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>inputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>outlink</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>outputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ch</name></decl>, <decl><type ref="prev"/><name>y</name></decl>, <decl><type ref="prev"/><name>x</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>sz</name> <init>= <expr><ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>orientation</name></name> <operator>==</operator> <name>VERTICAL</name></expr> ?</condition><then> <expr><name><name>s</name><operator>-&gt;</operator><name>w</name></name></expr> </then><else>: <expr><name><name>s</name><operator>-&gt;</operator><name>h</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>multi</name> <init>= <expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>mode</name></name> <operator>==</operator> <name>SEPARATE</name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>color_mode</name></name> <operator>==</operator> <name>CHANNEL</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>spp</name> <init>= <expr><name>samples</name> <operator>/</operator> <operator>(</operator><name>float</name><operator>)</operator><name>sz</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>text</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>chlayout_str</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_get_channel_layout_string</name><argument_list>(<argument><expr><name>chlayout_str</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>chlayout_str</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>channels</name></name></expr></argument>,

<argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>channel_layout</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>text</name> <operator>=</operator> <call><name>av_asprintf</name><argument_list>(<argument><expr><literal type="string">"%d Hz | %s"</literal></expr></argument>, <argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>sample_rate</name></name></expr></argument>, <argument><expr><name>chlayout_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>text</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>drawtext</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>outpicref</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name><name>outlink</name><operator>-&gt;</operator><name>h</name></name> <operator>-</operator> <literal type="number">10</literal></expr></argument>, <argument><expr><literal type="string">"CREATED BY LIBAVFILTER"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>drawtext</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>outpicref</name></name></expr></argument>, <argument><expr><name><name>outlink</name><operator>-&gt;</operator><name>w</name></name> <operator>-</operator> <literal type="number">2</literal> <operator>-</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">10</literal></expr></argument>, <argument><expr><name><name>outlink</name><operator>-&gt;</operator><name>h</name></name> <operator>-</operator> <literal type="number">10</literal></expr></argument>, <argument><expr><name>text</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>stop</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>text</name> <operator>=</operator> <call><name>av_asprintf</name><argument_list>(<argument><expr><literal type="string">"Zoom: %d Hz - %d Hz"</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>start</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>stop</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>text</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>drawtext</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>outpicref</name></name></expr></argument>, <argument><expr><name><name>outlink</name><operator>-&gt;</operator><name>w</name></name> <operator>-</operator> <literal type="number">2</literal> <operator>-</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">10</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>text</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>dst</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>outpicref</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>start_y</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>outpicref</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>start_x</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>w</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>dst</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <literal type="number">200</literal></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>dst</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>outpicref</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>start_y</name></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>h</name></name><operator>)</operator> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>outpicref</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>start_x</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>w</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>dst</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <literal type="number">200</literal></expr>;</expr_stmt></block_content></block></for>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>h</name></name> <operator>+</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>dst</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>outpicref</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><name>y</name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>start_y</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>outpicref</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>start_x</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">200</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>start_x</name></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>w</name></name></expr>]</index></name> <operator>=</operator> <literal type="number">200</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>orientation</name></name> <operator>==</operator> <name>VERTICAL</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>h</name> <init>= <expr><ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>mode</name></name> <operator>==</operator> <name>SEPARATE</name></expr> ?</condition><then> <expr><name><name>s</name><operator>-&gt;</operator><name>h</name></name> <operator>/</operator> <name><name>s</name><operator>-&gt;</operator><name>nb_display_channels</name></name></expr> </then><else>: <expr><name><name>s</name><operator>-&gt;</operator><name>h</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>hh</name> <init>= <expr><ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>mode</name></name> <operator>==</operator> <name>SEPARATE</name></expr> ?</condition><then> <expr><operator>-</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>h</name></name> <operator>%</operator> <name><name>s</name><operator>-&gt;</operator><name>nb_display_channels</name></name><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>ch</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ch</name> <operator>&lt;</operator> <operator>(</operator><ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>mode</name></name> <operator>==</operator> <name>SEPARATE</name></expr> ?</condition><then> <expr><name><name>s</name><operator>-&gt;</operator><name>nb_display_channels</name></name></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary><operator>)</operator></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>h</name></expr>;</condition> <incr><expr><name>y</name> <operator>+=</operator> <literal type="number">20</literal></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>dst</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>outpicref</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>start_y</name></name> <operator>+</operator> <name>h</name> <operator>*</operator> <operator>(</operator><name>ch</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>-</operator> <name>y</name> <operator>-</operator> <name>hh</name><operator>)</operator> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>outpicref</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>start_x</name></name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">200</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>start_x</name></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>w</name></name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">200</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>h</name></expr>;</condition> <incr><expr><name>y</name> <operator>+=</operator> <literal type="number">40</literal></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>dst</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>outpicref</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>start_y</name></name> <operator>+</operator> <name>h</name> <operator>*</operator> <operator>(</operator><name>ch</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>-</operator> <name>y</name> <operator>-</operator> <name>hh</name><operator>)</operator> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>outpicref</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>start_x</name></name> <operator>-</operator> <literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="number">200</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>start_x</name></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>w</name></name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">200</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>dst</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>outpicref</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>start_y</name></name> <operator>-</operator> <literal type="number">2</literal><operator>)</operator> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>outpicref</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>start_x</name></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>w</name></name></expr>;</condition> <incr><expr><name>x</name><operator>+=</operator><literal type="number">40</literal></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>dst</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <literal type="number">200</literal></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>dst</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>outpicref</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>start_y</name></name> <operator>-</operator> <literal type="number">3</literal><operator>)</operator> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>outpicref</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>start_x</name></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>w</name></name></expr>;</condition> <incr><expr><name>x</name><operator>+=</operator><literal type="number">80</literal></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>dst</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <literal type="number">200</literal></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>dst</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>outpicref</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>h</name></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>start_y</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>outpicref</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>start_x</name></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>w</name></name></expr>;</condition> <incr><expr><name>x</name><operator>+=</operator><literal type="number">40</literal></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>dst</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <literal type="number">200</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>dst</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>outpicref</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>h</name></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>start_y</name></name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>outpicref</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>start_x</name></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>w</name></name></expr>;</condition> <incr><expr><name>x</name><operator>+=</operator><literal type="number">80</literal></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>dst</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <literal type="number">200</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>h</name></expr>;</condition> <incr><expr><name>y</name> <operator>+=</operator> <literal type="number">40</literal></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>range</name> <init>= <expr><ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>stop</name></name></expr> ?</condition><then> <expr><name><name>s</name><operator>-&gt;</operator><name>stop</name></name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>start</name></name></expr> </then><else>: <expr><name><name>inlink</name><operator>-&gt;</operator><name>sample_rate</name></name> <operator>/</operator> <literal type="number">2</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>bin</name> <init>= <expr><ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>fscale</name></name> <operator>==</operator> <name>F_LINEAR</name></expr> ?</condition><then> <expr><name>y</name></expr> </then><else>: <expr><call><name>get_log_hz</name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>sample_rate</name></name></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>hertz</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>start</name></name> <operator>+</operator> <name>bin</name> <operator>*</operator> <name>range</name> <operator>/</operator> <operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>ceil</name><argument_list>(<argument><expr><call><name>log2</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>units</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>hertz</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>units</name> <operator>=</operator> <call><name>av_asprintf</name><argument_list>(<argument><expr><literal type="string">"DC"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>units</name> <operator>=</operator> <call><name>av_asprintf</name><argument_list>(<argument><expr><literal type="string">"%.2f"</literal></expr></argument>, <argument><expr><name>hertz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>units</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>drawtext</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>outpicref</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>start_x</name></name> <operator>-</operator> <literal type="number">8</literal> <operator>*</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>units</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name>h</name> <operator>*</operator> <operator>(</operator><name>ch</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>start_y</name></name> <operator>-</operator> <name>y</name> <operator>-</operator> <literal type="number">4</literal> <operator>-</operator> <name>hh</name></expr></argument>, <argument><expr><name>units</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>units</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>w</name></name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>single_pic</name></name></expr>;</condition> <incr><expr><name>x</name><operator>+=</operator><literal type="number">80</literal></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>seconds</name> <init>= <expr><name>x</name> <operator>*</operator> <name>spp</name> <operator>/</operator> <name><name>inlink</name><operator>-&gt;</operator><name>sample_rate</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>units</name> <init>= <expr><call><name>get_time</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>seconds</name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>units</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>drawtext</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>outpicref</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>start_x</name></name> <operator>+</operator> <name>x</name> <operator>-</operator> <literal type="number">4</literal> <operator>*</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>units</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>h</name></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>start_y</name></name> <operator>+</operator> <literal type="number">6</literal></expr></argument>, <argument><expr><name>units</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>drawtext</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>outpicref</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>start_x</name></name> <operator>+</operator> <name>x</name> <operator>-</operator> <literal type="number">4</literal> <operator>*</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>units</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>start_y</name></name> <operator>-</operator> <literal type="number">12</literal></expr></argument>, <argument><expr><name>units</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>units</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>drawtext</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>outpicref</name></name></expr></argument>, <argument><expr><name><name>outlink</name><operator>-&gt;</operator><name>w</name></name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <literal type="number">4</literal> <operator>*</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name><name>outlink</name><operator>-&gt;</operator><name>h</name></name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>start_y</name></name> <operator>/</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"TIME"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>drawtext</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>outpicref</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>start_x</name></name> <operator>/</operator> <literal type="number">7</literal></expr></argument>, <argument><expr><name><name>outlink</name><operator>-&gt;</operator><name>h</name></name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <literal type="number">14</literal> <operator>*</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><literal type="string">"FREQUENCY (Hz)"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>w</name> <init>= <expr><ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>mode</name></name> <operator>==</operator> <name>SEPARATE</name></expr> ?</condition><then> <expr><name><name>s</name><operator>-&gt;</operator><name>w</name></name> <operator>/</operator> <name><name>s</name><operator>-&gt;</operator><name>nb_display_channels</name></name></expr> </then><else>: <expr><name><name>s</name><operator>-&gt;</operator><name>w</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>h</name></name></expr>;</condition> <incr><expr><name>y</name> <operator>+=</operator> <literal type="number">20</literal></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>dst</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>outpicref</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>start_y</name></name> <operator>+</operator> <name>y</name><operator>)</operator> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>outpicref</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>start_x</name></name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">200</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>start_x</name></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>w</name></name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">200</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>h</name></name></expr>;</condition> <incr><expr><name>y</name> <operator>+=</operator> <literal type="number">40</literal></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>dst</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>outpicref</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>start_y</name></name> <operator>+</operator> <name>y</name><operator>)</operator> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>outpicref</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>start_x</name></name> <operator>-</operator> <literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="number">200</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>start_x</name></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>w</name></name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">200</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>ch</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ch</name> <operator>&lt;</operator> <operator>(</operator><ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>mode</name></name> <operator>==</operator> <name>SEPARATE</name></expr> ?</condition><then> <expr><name><name>s</name><operator>-&gt;</operator><name>nb_display_channels</name></name></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary><operator>)</operator></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>dst</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>outpicref</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>start_y</name></name> <operator>-</operator> <literal type="number">2</literal><operator>)</operator> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>outpicref</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>start_x</name></name> <operator>+</operator> <name>w</name> <operator>*</operator> <name>ch</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>w</name></expr>;</condition> <incr><expr><name>x</name><operator>+=</operator><literal type="number">40</literal></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>dst</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <literal type="number">200</literal></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>dst</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>outpicref</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>start_y</name></name> <operator>-</operator> <literal type="number">3</literal><operator>)</operator> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>outpicref</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>start_x</name></name> <operator>+</operator> <name>w</name> <operator>*</operator> <name>ch</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>w</name></expr>;</condition> <incr><expr><name>x</name><operator>+=</operator><literal type="number">80</literal></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>dst</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <literal type="number">200</literal></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>dst</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>outpicref</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>h</name></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>start_y</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>outpicref</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>start_x</name></name> <operator>+</operator> <name>w</name> <operator>*</operator> <name>ch</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>w</name></expr>;</condition> <incr><expr><name>x</name><operator>+=</operator><literal type="number">40</literal></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>dst</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <literal type="number">200</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>dst</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>outpicref</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>h</name></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>start_y</name></name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>outpicref</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>start_x</name></name> <operator>+</operator> <name>w</name> <operator>*</operator> <name>ch</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>w</name></expr>;</condition> <incr><expr><name>x</name><operator>+=</operator><literal type="number">80</literal></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>dst</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <literal type="number">200</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>w</name> <operator>-</operator> <literal type="number">79</literal></expr>;</condition> <incr><expr><name>x</name> <operator>+=</operator> <literal type="number">80</literal></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>range</name> <init>= <expr><ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>stop</name></name></expr> ?</condition><then> <expr><name><name>s</name><operator>-&gt;</operator><name>stop</name></name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>start</name></name></expr> </then><else>: <expr><name><name>inlink</name><operator>-&gt;</operator><name>sample_rate</name></name> <operator>/</operator> <literal type="number">2</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>bin</name> <init>= <expr><ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>fscale</name></name> <operator>==</operator> <name>F_LINEAR</name></expr> ?</condition><then> <expr><name>x</name></expr> </then><else>: <expr><call><name>get_log_hz</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>sample_rate</name></name></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>hertz</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>start</name></name> <operator>+</operator> <name>bin</name> <operator>*</operator> <name>range</name> <operator>/</operator> <operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>ceil</name><argument_list>(<argument><expr><call><name>log2</name><argument_list>(<argument><expr><name>w</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>units</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>hertz</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>units</name> <operator>=</operator> <call><name>av_asprintf</name><argument_list>(<argument><expr><literal type="string">"DC"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>units</name> <operator>=</operator> <call><name>av_asprintf</name><argument_list>(<argument><expr><literal type="string">"%.2f"</literal></expr></argument>, <argument><expr><name>hertz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>units</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>drawtext</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>outpicref</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>start_x</name></name> <operator>-</operator> <literal type="number">4</literal> <operator>*</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>units</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>x</name> <operator>+</operator> <name>w</name> <operator>*</operator> <name>ch</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>start_y</name></name> <operator>-</operator> <literal type="number">12</literal></expr></argument>, <argument><expr><name>units</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>drawtext</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>outpicref</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>start_x</name></name> <operator>-</operator> <literal type="number">4</literal> <operator>*</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>units</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>x</name> <operator>+</operator> <name>w</name> <operator>*</operator> <name>ch</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>h</name></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>start_y</name></name> <operator>+</operator> <literal type="number">6</literal></expr></argument>, <argument><expr><name>units</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>units</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>h</name></name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>single_pic</name></name></expr>;</condition> <incr><expr><name>y</name><operator>+=</operator><literal type="number">40</literal></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>seconds</name> <init>= <expr><name>y</name> <operator>*</operator> <name>spp</name> <operator>/</operator> <name><name>inlink</name><operator>-&gt;</operator><name>sample_rate</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>units</name> <init>= <expr><call><name>get_time</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>seconds</name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>units</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>drawtext</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>outpicref</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>start_x</name></name> <operator>-</operator> <literal type="number">8</literal> <operator>*</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>units</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>start_y</name></name> <operator>+</operator> <name>y</name> <operator>-</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name>units</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>units</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>drawtext</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>outpicref</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>start_x</name></name> <operator>/</operator> <literal type="number">7</literal></expr></argument>, <argument><expr><name><name>outlink</name><operator>-&gt;</operator><name>h</name></name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <literal type="number">4</literal> <operator>*</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><literal type="string">"TIME"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>drawtext</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>outpicref</name></name></expr></argument>, <argument><expr><name><name>outlink</name><operator>-&gt;</operator><name>w</name></name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <literal type="number">14</literal> <operator>*</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name><name>outlink</name><operator>-&gt;</operator><name>h</name></name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>start_y</name></name> <operator>/</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"FREQUENCY (Hz)"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<for>for <control>(<init><expr><name>ch</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ch</name> <operator>&lt;</operator> <operator>(</operator><ternary><condition><expr><name>multi</name></expr> ?</condition><then> <expr><name><name>s</name><operator>-&gt;</operator><name>nb_display_channels</name></name></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary><operator>)</operator></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>h</name> <init>= <expr><ternary><condition><expr><name>multi</name></expr> ?</condition><then> <expr><name><name>s</name><operator>-&gt;</operator><name>h</name></name> <operator>/</operator> <name><name>s</name><operator>-&gt;</operator><name>nb_display_channels</name></name></expr> </then><else>: <expr><name><name>s</name><operator>-&gt;</operator><name>h</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>h</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name><name>out</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0.</literal></expr>, <expr><literal type="number">127.5</literal></expr>, <expr><literal type="number">127.5</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>chn</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>chn</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>chn</name> <operator>&lt;</operator> <operator>(</operator><ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>mode</name></name> <operator>==</operator> <name>SEPARATE</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><name><name>s</name><operator>-&gt;</operator><name>nb_display_channels</name></name></expr></else></ternary><operator>)</operator></expr>;</condition> <incr><expr><name>chn</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>yf</name></decl>, <decl><type ref="prev"/><name>uf</name></decl>, <decl><type ref="prev"/><name>vf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>channel</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>multi</name><operator>)</operator></expr> ?</condition><then> <expr><name><name>s</name><operator>-&gt;</operator><name>nb_display_channels</name></name> <operator>-</operator> <name>ch</name> <operator>-</operator> <literal type="number">1</literal></expr> </then><else>: <expr><name>chn</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name><name>lout</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>color_range</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>channel</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>yf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>uf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pick_color</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>yf</name></expr></argument>, <argument><expr><name>uf</name></expr></argument>, <argument><expr><name>vf</name></expr></argument>, <argument><expr><name>y</name> <operator>/</operator> <operator>(</operator><name>float</name><operator>)</operator><name>h</name></expr></argument>, <argument><expr><name>lout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+=</operator> <name><name>lout</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+=</operator> <name><name>lout</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+=</operator> <name><name>lout</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>outpicref</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>+</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>start_y</name></name> <operator>+</operator> <name>h</name> <operator>*</operator> <operator>(</operator><name>ch</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>-</operator> <name>y</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>outpicref</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>w</name></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>start_x</name></name> <operator>+</operator> <literal type="number">20</literal></expr></argument>, <argument><expr><call><name>av_clip_uint8</name><argument_list>(<argument><expr><name><name>out</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>outpicref</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>+</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>start_y</name></name> <operator>+</operator> <name>h</name> <operator>*</operator> <operator>(</operator><name>ch</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>-</operator> <name>y</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>outpicref</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>w</name></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>start_x</name></name> <operator>+</operator> <literal type="number">20</literal></expr></argument>, <argument><expr><call><name>av_clip_uint8</name><argument_list>(<argument><expr><name><name>out</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>outpicref</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>+</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>start_y</name></name> <operator>+</operator> <name>h</name> <operator>*</operator> <operator>(</operator><name>ch</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>-</operator> <name>y</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>outpicref</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>w</name></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>start_x</name></name> <operator>+</operator> <literal type="number">20</literal></expr></argument>, <argument><expr><call><name>av_clip_uint8</name><argument_list>(<argument><expr><name><name>out</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ch</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>y</name> <operator>&lt;</operator> <name>h</name></expr>;</condition> <incr><expr><name>y</name> <operator>+=</operator> <name>h</name> <operator>/</operator> <literal type="number">10</literal></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>value</name> <init>= <expr><literal type="number">120.f</literal> <operator>*</operator> <call><name>log10f</name><argument_list>(<argument><expr><literal type="number">1.f</literal> <operator>-</operator> <name>y</name> <operator>/</operator> <operator>(</operator><name>float</name><operator>)</operator><name>h</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>text</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>value</name> <operator>&lt;</operator> <operator>-</operator><literal type="number">120</literal></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>text</name> <operator>=</operator> <call><name>av_asprintf</name><argument_list>(<argument><expr><literal type="string">"%.0f dB"</literal></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>text</name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>drawtext</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>outpicref</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>w</name></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>start_x</name></name> <operator>+</operator> <literal type="number">35</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>start_y</name></name> <operator>+</operator> <name>y</name> <operator>-</operator> <literal type="number">5</literal></expr></argument>, <argument><expr><name>text</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>float</name></type> <name>get_value</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ch</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ShowSpectrumContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>magnitudes</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>magnitudes</name><index>[<expr><name>ch</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>phases</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>phases</name><index>[<expr><name>ch</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>a</name></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>data</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>D_MAGNITUDE</name></expr>:</case>

<expr_stmt><expr><name>a</name> <operator>=</operator> <name><name>magnitudes</name><index>[<expr><name>y</name></expr>]</index></name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>D_PHASE</name></expr>:</case>

<expr_stmt><expr><name>a</name> <operator>=</operator> <name><name>phases</name><index>[<expr><name>y</name></expr>]</index></name></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></switch>

<switch>switch <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>scale</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>LINEAR</name></expr>:</case>

<expr_stmt><expr><name>a</name> <operator>=</operator> <call><name>av_clipf</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>SQRT</name></expr>:</case>

<expr_stmt><expr><name>a</name> <operator>=</operator> <call><name>av_clipf</name><argument_list>(<argument><expr><call><name>sqrtf</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>CBRT</name></expr>:</case>

<expr_stmt><expr><name>a</name> <operator>=</operator> <call><name>av_clipf</name><argument_list>(<argument><expr><call><name>cbrtf</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>FOURTHRT</name></expr>:</case>

<expr_stmt><expr><name>a</name> <operator>=</operator> <call><name>av_clipf</name><argument_list>(<argument><expr><call><name>sqrtf</name><argument_list>(<argument><expr><call><name>sqrtf</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>FIFTHRT</name></expr>:</case>

<expr_stmt><expr><name>a</name> <operator>=</operator> <call><name>av_clipf</name><argument_list>(<argument><expr><call><name>powf</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="number">0.20</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>LOG</name></expr>:</case>

<expr_stmt><expr><name>a</name> <operator>=</operator> <literal type="number">1.f</literal> <operator>+</operator> <call><name>log10f</name><argument_list>(<argument><expr><call><name>av_clipf</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="number">1e-6</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>/</operator> <literal type="number">6.f</literal></expr>;</expr_stmt> 

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></switch>

<return>return <expr><name>a</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>plot_channel_lin</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>jobnr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nb_jobs</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ShowSpectrumContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>h</name> <init>= <expr><ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>orientation</name></name> <operator>==</operator> <name>VERTICAL</name></expr> ?</condition><then> <expr><name><name>s</name><operator>-&gt;</operator><name>channel_height</name></name></expr> </then><else>: <expr><name><name>s</name><operator>-&gt;</operator><name>channel_width</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>ch</name> <init>= <expr><name>jobnr</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>yf</name></decl>, <decl><type ref="prev"/><name>uf</name></decl>, <decl><type ref="prev"/><name>vf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>color_range</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>ch</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>yf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>uf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>h</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>row</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>mode</name></name> <operator>==</operator> <name>COMBINED</name><operator>)</operator></expr> ?</condition><then> <expr><name>y</name></expr> </then><else>: <expr><name>ch</name> <operator>*</operator> <name>h</name> <operator>+</operator> <name>y</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>out</name> <init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>color_buffer</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><literal type="number">3</literal> <operator>*</operator> <name>row</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>a</name> <init>= <expr><call><name>get_value</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>ch</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>pick_color</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>yf</name></expr></argument>, <argument><expr><name>uf</name></expr></argument>, <argument><expr><name>vf</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>plot_channel_log</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>jobnr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nb_jobs</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ShowSpectrumContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>inlink</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>inputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>h</name> <init>= <expr><ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>orientation</name></name> <operator>==</operator> <name>VERTICAL</name></expr> ?</condition><then> <expr><name><name>s</name><operator>-&gt;</operator><name>channel_height</name></name></expr> </then><else>: <expr><name><name>s</name><operator>-&gt;</operator><name>channel_width</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>ch</name> <init>= <expr><name>jobnr</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>y</name></decl>, <decl><type ref="prev"/><name>yf</name></decl>, <decl><type ref="prev"/><name>uf</name></decl>, <decl><type ref="prev"/><name>vf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>yy</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>color_range</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>ch</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>yf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>uf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>h</name> <operator>&amp;&amp;</operator> <name>yy</name> <operator>&lt;</operator> <name>h</name></expr>;</condition> <incr><expr><name>yy</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>pos0</name> <init>= <expr><call><name>bin_pos</name><argument_list>(<argument><expr><name>yy</name><operator>+</operator><literal type="number">0</literal></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>sample_rate</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>pos1</name> <init>= <expr><call><name>bin_pos</name><argument_list>(<argument><expr><name>yy</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>sample_rate</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>delta</name> <init>= <expr><name>pos1</name> <operator>-</operator> <name>pos0</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>a0</name></decl>, <decl><type ref="prev"/><name>a1</name></decl>;</decl_stmt>

<expr_stmt><expr><name>a0</name> <operator>=</operator> <call><name>get_value</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>ch</name></expr></argument>, <argument><expr><name>yy</name><operator>+</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>a1</name> <operator>=</operator> <call><name>get_value</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>ch</name></expr></argument>, <argument><expr><call><name>FFMIN</name><argument_list>(<argument><expr><name>yy</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>h</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>float</name></type> <name>j</name> <init>= <expr><name>pos0</name></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>pos1</name> <operator>&amp;&amp;</operator> <name>y</name> <operator>+</operator> <name>j</name> <operator>-</operator> <name>pos0</name> <operator>&lt;</operator> <name>h</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>row</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>mode</name></name> <operator>==</operator> <name>COMBINED</name><operator>)</operator></expr> ?</condition><then> <expr><name>y</name> <operator>+</operator> <name>j</name> <operator>-</operator> <name>pos0</name></expr> </then><else>: <expr><name>ch</name> <operator>*</operator> <name>h</name> <operator>+</operator> <name>y</name> <operator>+</operator> <name>j</name> <operator>-</operator> <name>pos0</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>out</name> <init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>color_buffer</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><literal type="number">3</literal> <operator>*</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><call><name>lrintf</name><argument_list>(<argument><expr><name>row</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>h</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>lerpfrac</name> <init>= <expr><operator>(</operator><name>j</name> <operator>-</operator> <name>pos0</name><operator>)</operator> <operator>/</operator> <name>delta</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>pick_color</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>yf</name></expr></argument>, <argument><expr><name>uf</name></expr></argument>, <argument><expr><name>vf</name></expr></argument>, <argument><expr><name>lerpfrac</name> <operator>*</operator> <name>a1</name> <operator>+</operator> <operator>(</operator><literal type="number">1.f</literal><operator>-</operator><name>lerpfrac</name><operator>)</operator> <operator>*</operator> <name>a0</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>y</name> <operator>+=</operator> <name>delta</name></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>config_output</name><parameter_list>(<parameter><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>outlink</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>outlink</name><operator>-&gt;</operator><name>src</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>inlink</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>inputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ShowSpectrumContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>fft_bits</name></decl>, <decl><type ref="prev"/><name>h</name></decl>, <decl><type ref="prev"/><name>w</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>overlap</name></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>fscale</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>F_LINEAR</name></expr>:</case> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>plot_channel</name></name> <operator>=</operator> <name>plot_channel_lin</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>F_LOG</name></expr>:</case> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>plot_channel</name></name> <operator>=</operator> <name>plot_channel_log</name></expr>;</expr_stmt> <break>break;</break>

<default>default:</default> <return>return <expr><name>AVERROR_BUG</name></expr>;</return>

</block_content>}</block></switch>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>stop</name></name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>stop</name></name></expr></argument>, <argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>sample_rate</name></name> <operator>/</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>stop</name></name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>stop</name></name> <operator>&lt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>start</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Stop frequency should be greater than start.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>filter</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="string">"showspectrumpic"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>single_pic</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>outlink</name><operator>-&gt;</operator><name>w</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>w</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>outlink</name><operator>-&gt;</operator><name>h</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>h</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>outlink</name><operator>-&gt;</operator><name>sample_aspect_ratio</name></name> <operator>=</operator> <operator>(</operator><name>AVRational</name><operator>)</operator><block>{<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>}</block></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>legend</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>start_x</name></name> <operator>=</operator> <operator>(</operator><call><name>log10</name><argument_list>(<argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>sample_rate</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <literal type="number">25</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>start_y</name></name> <operator>=</operator> <literal type="number">64</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>outlink</name><operator>-&gt;</operator><name>w</name></name> <operator>+=</operator> <name><name>s</name><operator>-&gt;</operator><name>start_x</name></name> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>outlink</name><operator>-&gt;</operator><name>h</name></name> <operator>+=</operator> <name><name>s</name><operator>-&gt;</operator><name>start_y</name></name> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>h</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>mode</name></name> <operator>==</operator> <name>COMBINED</name> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>orientation</name></name> <operator>==</operator> <name>HORIZONTAL</name><operator>)</operator></expr> ?</condition><then> <expr><name><name>s</name><operator>-&gt;</operator><name>h</name></name></expr> </then><else>: <expr><name><name>s</name><operator>-&gt;</operator><name>h</name></name> <operator>/</operator> <name><name>inlink</name><operator>-&gt;</operator><name>channels</name></name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>w</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>mode</name></name> <operator>==</operator> <name>COMBINED</name> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>orientation</name></name> <operator>==</operator> <name>VERTICAL</name><operator>)</operator></expr> ?</condition><then> <expr><name><name>s</name><operator>-&gt;</operator><name>w</name></name></expr> </then><else>: <expr><name><name>s</name><operator>-&gt;</operator><name>w</name></name> <operator>/</operator> <name><name>inlink</name><operator>-&gt;</operator><name>channels</name></name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>channel_height</name></name> <operator>=</operator> <name>h</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>channel_width</name></name> <operator>=</operator> <name>w</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>orientation</name></name> <operator>==</operator> <name>VERTICAL</name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>fft_bits</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>fft_bits</name> <operator>&lt;</operator> <literal type="number">2</literal> <operator>*</operator> <name>h</name></expr>;</condition> <incr><expr><name>fft_bits</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></for>

</block_content>}</block></if> <else>else <block>{<block_content>

<for>for <control>(<init><expr><name>fft_bits</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>fft_bits</name> <operator>&lt;</operator> <literal type="number">2</literal> <operator>*</operator> <name>w</name></expr>;</condition> <incr><expr><name>fft_bits</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></for>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>win_size</name></name> <operator>=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>fft_bits</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>buf_size</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>win_size</name></name> <operator>&lt;&lt;</operator> <operator>!</operator><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>stop</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>fft</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>fft</name></name> <operator>=</operator> <call><name>av_calloc</name><argument_list>(<argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>channels</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>fft</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>fft</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>stop</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>ifft</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>ifft</name></name> <operator>=</operator> <call><name>av_calloc</name><argument_list>(<argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>channels</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>ifft</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>ifft</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>fft_bits</name> <operator>!=</operator> <name><name>s</name><operator>-&gt;</operator><name>fft_bits</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>outpicref</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>fft_bits</name></name> <operator>=</operator> <name>fft_bits</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>nb_display_channels</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>stop</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_fft_end</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>ifft</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>fft_scratch</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_fft_end</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>fft</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>fft_data</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>fft_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>nb_display_channels</name></name> <operator>=</operator> <name><name>inlink</name><operator>-&gt;</operator><name>channels</name></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>nb_display_channels</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>fft</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>av_fft_init</name><argument_list>(<argument><expr><name>fft_bits</name> <operator>+</operator> <operator>!</operator><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>stop</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>stop</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>ifft</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>av_fft_init</name><argument_list>(<argument><expr><name>fft_bits</name> <operator>+</operator> <operator>!</operator><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>stop</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>ifft</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Unable to create Inverse FFT context. "</literal>

<literal type="string">"The window size might be too high.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>fft</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Unable to create FFT context. "</literal>

<literal type="string">"The window size might be too high.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>magnitudes</name></name> <operator>=</operator> <call><name>av_calloc</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>nb_display_channels</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>magnitudes</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>magnitudes</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>nb_display_channels</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>magnitudes</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>av_calloc</name><argument_list>(<argument><expr><ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>orientation</name></name> <operator>==</operator> <name>VERTICAL</name></expr> ?</condition><then> <expr><name><name>s</name><operator>-&gt;</operator><name>h</name></name></expr> </then><else>: <expr><name><name>s</name><operator>-&gt;</operator><name>w</name></name></expr></else></ternary></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>magnitudes</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>magnitudes</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>phases</name></name> <operator>=</operator> <call><name>av_calloc</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>nb_display_channels</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>phases</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>phases</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>nb_display_channels</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>phases</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>av_calloc</name><argument_list>(<argument><expr><ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>orientation</name></name> <operator>==</operator> <name>VERTICAL</name></expr> ?</condition><then> <expr><name><name>s</name><operator>-&gt;</operator><name>h</name></name></expr> </then><else>: <expr><name><name>s</name><operator>-&gt;</operator><name>w</name></name></expr></else></ternary></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>phases</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>phases</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>color_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>color_buffer</name></name> <operator>=</operator> <call><name>av_calloc</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>nb_display_channels</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>color_buffer</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>color_buffer</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>nb_display_channels</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>color_buffer</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>av_calloc</name><argument_list>(<argument><expr><ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>orientation</name></name> <operator>==</operator> <name>VERTICAL</name></expr> ?</condition><then> <expr><name><name>s</name><operator>-&gt;</operator><name>h</name></name> <operator>*</operator> <literal type="number">3</literal></expr> </then><else>: <expr><name><name>s</name><operator>-&gt;</operator><name>w</name></name> <operator>*</operator> <literal type="number">3</literal></expr></else></ternary></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>color_buffer</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>color_buffer</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>fft_data</name></name> <operator>=</operator> <call><name>av_calloc</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>nb_display_channels</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>fft_data</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>fft_data</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>fft_scratch</name></name> <operator>=</operator> <call><name>av_calloc</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>nb_display_channels</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>fft_scratch</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>fft_scratch</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>nb_display_channels</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>fft_data</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>av_calloc</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>buf_size</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>fft_data</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>fft_data</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>fft_scratch</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>av_calloc</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>buf_size</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>fft_scratch</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>fft_scratch</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>window_func_lut</name></name> <operator>=</operator>

<call><name>av_realloc_f</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>window_func_lut</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>win_size</name></name></expr></argument>,

<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>window_func_lut</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>window_func_lut</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>generate_window_func</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>window_func_lut</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>win_size</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>win_func</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>overlap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>overlap</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>overlap</name></name> <operator>=</operator> <name>overlap</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>hop_size</name></name> <operator>=</operator> <operator>(</operator><literal type="number">1.f</literal> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>overlap</name></name><operator>)</operator> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>win_size</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>hop_size</name></name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"overlap %f too big\n"</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>overlap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name><name>s</name><operator>-&gt;</operator><name>win_scale</name></name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>win_size</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>win_scale</name></name> <operator>+=</operator> <name><name>s</name><operator>-&gt;</operator><name>window_func_lut</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>window_func_lut</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>win_scale</name></name> <operator>=</operator> <literal type="number">1.f</literal> <operator>/</operator> <call><name>sqrtf</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>win_scale</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>outpicref</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>outpicref</name></name> <operator>=</operator> <name>outpicref</name> <operator>=</operator>

<call><name>ff_get_video_buffer</name><argument_list>(<argument><expr><name>outlink</name></expr></argument>, <argument><expr><name><name>outlink</name><operator>-&gt;</operator><name>w</name></name></expr></argument>, <argument><expr><name><name>outlink</name><operator>-&gt;</operator><name>h</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>outpicref</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>outpicref</name><operator>-&gt;</operator><name>sample_aspect_ratio</name></name> <operator>=</operator> <operator>(</operator><name>AVRational</name><operator>)</operator><block>{<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>}</block></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>outlink</name><operator>-&gt;</operator><name>h</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>outpicref</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>i</name> <operator>*</operator> <name><name>outpicref</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>outlink</name><operator>-&gt;</operator><name>w</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>outpicref</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name>i</name> <operator>*</operator> <name><name>outpicref</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>, <argument><expr><name><name>outlink</name><operator>-&gt;</operator><name>w</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>outpicref</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <name>i</name> <operator>*</operator> <name><name>outpicref</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>, <argument><expr><name><name>outlink</name><operator>-&gt;</operator><name>w</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>outpicref</name><operator>-&gt;</operator><name>color_range</name></name> <operator>=</operator> <name>AVCOL_RANGE_JPEG</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>single_pic</name></name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>legend</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>draw_legend</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>orientation</name></name> <operator>==</operator> <name>VERTICAL</name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>xpos</name></name> <operator>&gt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>w</name></name><operator>)</operator> <operator>||</operator>

<operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>orientation</name></name> <operator>==</operator> <name>HORIZONTAL</name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>xpos</name></name> <operator>&gt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>h</name></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>xpos</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>auto_frame_rate</name></name> <operator>=</operator> <call><name>av_make_q</name><argument_list>(<argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>sample_rate</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>hop_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>orientation</name></name> <operator>==</operator> <name>VERTICAL</name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>sliding</name></name> <operator>==</operator> <name>FULLFRAME</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>auto_frame_rate</name><operator>.</operator><name>den</name></name> <operator>*=</operator> <name><name>s</name><operator>-&gt;</operator><name>w</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>orientation</name></name> <operator>==</operator> <name>HORIZONTAL</name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>sliding</name></name> <operator>==</operator> <name>FULLFRAME</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>auto_frame_rate</name><operator>.</operator><name>den</name></name> <operator>*=</operator> <name><name>s</name><operator>-&gt;</operator><name>h</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>single_pic</name></name> <operator>&amp;&amp;</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>rate_str</name></name></expr></argument>, <argument><expr><literal type="string">"auto"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>av_parse_video_rate</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>frame_rate</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>rate_str</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>frame_rate</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>auto_frame_rate</name></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>outlink</name><operator>-&gt;</operator><name>frame_rate</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>frame_rate</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>outlink</name><operator>-&gt;</operator><name>time_base</name></name> <operator>=</operator> <call><name>av_inv_q</name><argument_list>(<argument><expr><name><name>outlink</name><operator>-&gt;</operator><name>frame_rate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>orientation</name></name> <operator>==</operator> <name>VERTICAL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>combine_buffer</name></name> <operator>=</operator>

<call><name>av_realloc_f</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>combine_buffer</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>h</name></name> <operator>*</operator> <literal type="number">3</literal></expr></argument>,

<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>combine_buffer</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>combine_buffer</name></name> <operator>=</operator>

<call><name>av_realloc_f</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>combine_buffer</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>w</name></name> <operator>*</operator> <literal type="number">3</literal></expr></argument>,

<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>combine_buffer</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_VERBOSE</name></expr></argument>, <argument><expr><literal type="string">"s:%dx%d FFT window size:%d\n"</literal></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>w</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>h</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>win_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_audio_fifo_free</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>fifo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>fifo</name></name> <operator>=</operator> <call><name>av_audio_fifo_alloc</name><argument_list>(<argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>format</name></name></expr></argument>, <argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>channels</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>win_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>fifo</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RE</name><parameter_list>(<parameter><type><name>y</name></type></parameter>, <parameter><type><name>ch</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>s-&gt;fft_data[ch][y].re</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IM</name><parameter_list>(<parameter><type><name>y</name></type></parameter>, <parameter><type><name>ch</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>s-&gt;fft_data[ch][y].im</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAGNITUDE</name><parameter_list>(<parameter><type><name>y</name></type></parameter>, <parameter><type><name>ch</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>hypotf(RE(y, ch), IM(y, ch))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PHASE</name><parameter_list>(<parameter><type><name>y</name></type></parameter>, <parameter><type><name>ch</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>atan2f(IM(y, ch), RE(y, ch))</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>int</name></type> <name>calc_channel_magnitudes</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>jobnr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nb_jobs</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ShowSpectrumContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>double</name></type> <name>w</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>win_scale</name></name> <operator>*</operator> <operator>(</operator><ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>scale</name></name> <operator>==</operator> <name>LOG</name></expr> ?</condition><then> <expr><name><name>s</name><operator>-&gt;</operator><name>win_scale</name></name></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>, <decl><type ref="prev"/><name>h</name> <init>= <expr><ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>orientation</name></name> <operator>==</operator> <name>VERTICAL</name></expr> ?</condition><then> <expr><name><name>s</name><operator>-&gt;</operator><name>h</name></name></expr> </then><else>: <expr><name><name>s</name><operator>-&gt;</operator><name>w</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>f</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>gain</name></name> <operator>*</operator> <name>w</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>ch</name> <init>= <expr><name>jobnr</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>magnitudes</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>magnitudes</name><index>[<expr><name>ch</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>h</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>magnitudes</name><index>[<expr><name>y</name></expr>]</index></name> <operator>=</operator> <call><name>MAGNITUDE</name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><name>ch</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>f</name></expr>;</expr_stmt></block_content></block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>calc_channel_phases</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>jobnr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nb_jobs</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ShowSpectrumContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>h</name> <init>= <expr><ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>orientation</name></name> <operator>==</operator> <name>VERTICAL</name></expr> ?</condition><then> <expr><name><name>s</name><operator>-&gt;</operator><name>h</name></name></expr> </then><else>: <expr><name><name>s</name><operator>-&gt;</operator><name>w</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>ch</name> <init>= <expr><name>jobnr</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>phases</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>phases</name><index>[<expr><name>ch</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>h</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>phases</name><index>[<expr><name>y</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><call><name>PHASE</name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><name>ch</name></expr></argument>)</argument_list></call> <operator>/</operator> <name>M_PI</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>acalc_magnitudes</name><parameter_list>(<parameter><decl><type><name>ShowSpectrumContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>double</name></type> <name>w</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>win_scale</name></name> <operator>*</operator> <operator>(</operator><ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>scale</name></name> <operator>==</operator> <name>LOG</name></expr> ?</condition><then> <expr><name><name>s</name><operator>-&gt;</operator><name>win_scale</name></name></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ch</name></decl>, <decl><type ref="prev"/><name>y</name></decl>, <decl><type ref="prev"/><name>h</name> <init>= <expr><ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>orientation</name></name> <operator>==</operator> <name>VERTICAL</name></expr> ?</condition><then> <expr><name><name>s</name><operator>-&gt;</operator><name>h</name></name></expr> </then><else>: <expr><name><name>s</name><operator>-&gt;</operator><name>w</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>f</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>gain</name></name> <operator>*</operator> <name>w</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>ch</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ch</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>nb_display_channels</name></name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>magnitudes</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>magnitudes</name><index>[<expr><name>ch</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>h</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>magnitudes</name><index>[<expr><name>y</name></expr>]</index></name> <operator>+=</operator> <call><name>MAGNITUDE</name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><name>ch</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>f</name></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>scale_magnitudes</name><parameter_list>(<parameter><decl><type><name>ShowSpectrumContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>scale</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ch</name></decl>, <decl><type ref="prev"/><name>y</name></decl>, <decl><type ref="prev"/><name>h</name> <init>= <expr><ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>orientation</name></name> <operator>==</operator> <name>VERTICAL</name></expr> ?</condition><then> <expr><name><name>s</name><operator>-&gt;</operator><name>h</name></name></expr> </then><else>: <expr><name><name>s</name><operator>-&gt;</operator><name>w</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>ch</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ch</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>nb_display_channels</name></name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>magnitudes</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>magnitudes</name><index>[<expr><name>ch</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>h</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>magnitudes</name><index>[<expr><name>y</name></expr>]</index></name> <operator>*=</operator> <name>scale</name></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>clear_combine_buffer</name><parameter_list>(<parameter><decl><type><name>ShowSpectrumContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>combine_buffer</name><index>[<expr><literal type="number">3</literal> <operator>*</operator> <name>y</name></expr> ]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>combine_buffer</name><index>[<expr><literal type="number">3</literal> <operator>*</operator> <name>y</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">127.5</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>combine_buffer</name><index>[<expr><literal type="number">3</literal> <operator>*</operator> <name>y</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">127.5</literal></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>plot_spectrum_column</name><parameter_list>(<parameter><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>inlink</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>insamples</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>inlink</name><operator>-&gt;</operator><name>dst</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>outlink</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>outputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ShowSpectrumContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>outpicref</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>outpicref</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>, <decl><type ref="prev"/><name>plane</name></decl>, <decl><type ref="prev"/><name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>, <decl><type ref="prev"/><name>z</name> <init>= <expr><ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>orientation</name></name> <operator>==</operator> <name>VERTICAL</name></expr> ?</condition><then> <expr><name><name>s</name><operator>-&gt;</operator><name>h</name></name></expr> </then><else>: <expr><name><name>s</name><operator>-&gt;</operator><name>w</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>clear_combine_buffer</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>ctx</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>plot_channel</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>nb_display_channels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>z</name> <operator>*</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>nb_display_channels</name></name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>combine_buffer</name><index>[<expr><name>y</name></expr>]</index></name> <operator>+=</operator> <name><name>s</name><operator>-&gt;</operator><name>color_buffer</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><name>y</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<expr_stmt><expr><call><name>av_frame_make_writable</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>outpicref</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>orientation</name></name> <operator>==</operator> <name>VERTICAL</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>sliding</name></name> <operator>==</operator> <name>SCROLL</name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>plane</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>plane</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>plane</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>h</name></name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name><name>outpicref</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>plane</name></expr>]</index></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>start_x</name></name> <operator>+</operator>

<operator>(</operator><name>y</name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>start_y</name></name><operator>)</operator> <operator>*</operator> <name><name>outpicref</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>plane</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>p</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>w</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>xpos</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>w</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>sliding</name></name> <operator>==</operator> <name>RSCROLL</name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>plane</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>plane</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>plane</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>h</name></name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name><name>outpicref</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>plane</name></expr>]</index></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>start_x</name></name> <operator>+</operator>

<operator>(</operator><name>y</name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>start_y</name></name><operator>)</operator> <operator>*</operator> <name><name>outpicref</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>plane</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>w</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>xpos</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>plane</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>plane</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>plane</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name><name>outpicref</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>plane</name></expr>]</index></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>start_x</name></name> <operator>+</operator>

<operator>(</operator><name><name>outlink</name><operator>-&gt;</operator><name>h</name></name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>start_y</name></name><operator>)</operator> <operator>*</operator> <name><name>outpicref</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>plane</name></expr>]</index></name> <operator>+</operator>

<name><name>s</name><operator>-&gt;</operator><name>xpos</name></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>h</name></name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <call><name>lrintf</name><argument_list>(<argument><expr><call><name>av_clipf</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>combine_buffer</name><index>[<expr><literal type="number">3</literal> <operator>*</operator> <name>y</name> <operator>+</operator> <name>plane</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">255</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>-=</operator> <name><name>outpicref</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>plane</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>sliding</name></name> <operator>==</operator> <name>SCROLL</name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>plane</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>plane</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>plane</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>h</name></name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name><name>outpicref</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>plane</name></expr>]</index></name> <operator>+</operator> <operator>(</operator><name>y</name><operator>-</operator><literal type="number">1</literal> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>start_y</name></name><operator>)</operator> <operator>*</operator> <name><name>outpicref</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>plane</name></expr>]</index></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>start_x</name></name></expr></argument>,

<argument><expr><name><name>outpicref</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>plane</name></expr>]</index></name> <operator>+</operator> <operator>(</operator><name>y</name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>start_y</name></name><operator>)</operator> <operator>*</operator> <name><name>outpicref</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>plane</name></expr>]</index></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>start_x</name></name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>w</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>xpos</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>h</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>sliding</name></name> <operator>==</operator> <name>RSCROLL</name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>plane</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>plane</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>plane</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>h</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>y</name> <operator>&gt;=</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>y</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name><name>outpicref</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>plane</name></expr>]</index></name> <operator>+</operator> <operator>(</operator><name>y</name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>start_y</name></name><operator>)</operator> <operator>*</operator> <name><name>outpicref</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>plane</name></expr>]</index></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>start_x</name></name></expr></argument>,

<argument><expr><name><name>outpicref</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>plane</name></expr>]</index></name> <operator>+</operator> <operator>(</operator><name>y</name><operator>-</operator><literal type="number">1</literal> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>start_y</name></name><operator>)</operator> <operator>*</operator> <name><name>outpicref</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>plane</name></expr>]</index></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>start_x</name></name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>w</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>xpos</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>plane</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>plane</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>plane</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name><name>outpicref</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>plane</name></expr>]</index></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>start_x</name></name> <operator>+</operator>

<operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>xpos</name></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>start_y</name></name><operator>)</operator> <operator>*</operator> <name><name>outpicref</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>plane</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>w</name></name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <call><name>lrintf</name><argument_list>(<argument><expr><call><name>av_clipf</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>combine_buffer</name><index>[<expr><literal type="number">3</literal> <operator>*</operator> <name>x</name> <operator>+</operator> <name>plane</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">255</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>sliding</name></name> <operator>!=</operator> <name>FULLFRAME</name> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>xpos</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>outpicref</name><operator>-&gt;</operator><name>pts</name></name> <operator>=</operator> <call><name>av_rescale_q</name><argument_list>(<argument><expr><name><name>insamples</name><operator>-&gt;</operator><name>pts</name></name></expr></argument>, <argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>time_base</name></name></expr></argument>, <argument><expr><name><name>outlink</name><operator>-&gt;</operator><name>time_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>xpos</name></name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>orientation</name></name> <operator>==</operator> <name>VERTICAL</name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>xpos</name></name> <operator>&gt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>w</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>xpos</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>orientation</name></name> <operator>==</operator> <name>HORIZONTAL</name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>xpos</name></name> <operator>&gt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>h</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>xpos</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>single_pic</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>sliding</name></name> <operator>!=</operator> <name>FULLFRAME</name> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>xpos</name></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>old_pts</name></name> <operator>&lt;</operator> <name><name>outpicref</name><operator>-&gt;</operator><name>pts</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>clone</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>legend</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>units</name> <init>= <expr><call><name>get_time</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name><name>insamples</name><operator>-&gt;</operator><name>pts</name></name> <operator>/</operator><operator>(</operator><name>float</name><operator>)</operator><name><name>inlink</name><operator>-&gt;</operator><name>sample_rate</name></name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>units</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>orientation</name></name> <operator>==</operator> <name>VERTICAL</name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <literal type="number">10</literal></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>outpicref</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>outlink</name><operator>-&gt;</operator><name>w</name></name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <literal type="number">4</literal> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>old_len</name></name> <operator>+</operator>

<operator>(</operator><name><name>outlink</name><operator>-&gt;</operator><name>h</name></name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>start_y</name></name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <literal type="number">20</literal> <operator>+</operator> <name>y</name><operator>)</operator> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>outpicref</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">10</literal> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>old_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>drawtext</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>outpicref</name></name></expr></argument>,

<argument><expr><name><name>outlink</name><operator>-&gt;</operator><name>w</name></name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <literal type="number">4</literal> <operator>*</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>units</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name><name>outlink</name><operator>-&gt;</operator><name>h</name></name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>start_y</name></name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <literal type="number">20</literal></expr></argument>,

<argument><expr><name>units</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <literal type="number">10</literal> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>old_len</name></name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>outpicref</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>start_x</name></name> <operator>/</operator> <literal type="number">7</literal> <operator>+</operator> <literal type="number">20</literal> <operator>+</operator>

<operator>(</operator><name><name>outlink</name><operator>-&gt;</operator><name>h</name></name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <literal type="number">4</literal> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>old_len</name></name> <operator>+</operator> <name>y</name><operator>)</operator> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>outpicref</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>drawtext</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>outpicref</name></name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>start_x</name></name> <operator>/</operator> <literal type="number">7</literal> <operator>+</operator> <literal type="number">20</literal></expr></argument>,

<argument><expr><name><name>outlink</name><operator>-&gt;</operator><name>h</name></name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <literal type="number">4</literal> <operator>*</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>units</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>units</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>old_len</name></name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>units</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>units</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>old_pts</name></name> <operator>=</operator> <name><name>outpicref</name><operator>-&gt;</operator><name>pts</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>clone</name> <operator>=</operator> <call><name>av_frame_clone</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>outpicref</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>clone</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_filter_frame</name><argument_list>(<argument><expr><name>outlink</name></expr></argument>, <argument><expr><name>clone</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_SHOWSPECTRUM_FILTER</name></expr></cpp:if>

<function><type><specifier>static</specifier> <name>int</name></type> <name>activate</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>inlink</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>inputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>outlink</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>outputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ShowSpectrumContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>FF_FILTER_FORWARD_STATUS_BACK</name><argument_list>(<argument><expr><name>outlink</name></expr></argument>, <argument><expr><name>inlink</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>av_audio_fifo_size</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>fifo</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>win_size</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>frame</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_inlink_consume_frame</name><argument_list>(<argument><expr><name>inlink</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>pts</name></name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>pts</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>consumed</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_audio_fifo_write</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>fifo</name></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><name><name>frame</name><operator>-&gt;</operator><name>extended_data</name></name></expr></argument>, <argument><expr><name><name>frame</name><operator>-&gt;</operator><name>nb_samples</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>outpicref</name></name> <operator>&amp;&amp;</operator> <call><name>av_audio_fifo_size</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>fifo</name></name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>win_size</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>fin</name> <init>= <expr><call><name>ff_get_audio_buffer</name><argument_list>(<argument><expr><name>inlink</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>win_size</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>fin</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>fin</name><operator>-&gt;</operator><name>pts</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>pts</name></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>consumed</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>consumed</name></name> <operator>+=</operator> <name><name>s</name><operator>-&gt;</operator><name>hop_size</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>av_audio_fifo_peek</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>fifo</name></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><name><name>fin</name><operator>-&gt;</operator><name>extended_data</name></name></expr></argument>,

<argument><expr><call><name>FFMIN</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>win_size</name></name></expr></argument>, <argument><expr><call><name>av_audio_fifo_size</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>fifo</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name><name>fin</name><operator>-&gt;</operator><name>nb_samples</name></name> <operator>==</operator> <name><name>s</name><operator>-&gt;</operator><name>win_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>ctx</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>run_channel_fft</name></expr></argument>, <argument><expr><name>fin</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>nb_display_channels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>data</name></name> <operator>==</operator> <name>D_MAGNITUDE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name><name>ctx</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>calc_channel_magnitudes</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>nb_display_channels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>data</name></name> <operator>==</operator> <name>D_PHASE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name><name>ctx</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>calc_channel_phases</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>nb_display_channels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>plot_spectrum_column</name><argument_list>(<argument><expr><name>inlink</name></expr></argument>, <argument><expr><name>fin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_audio_fifo_drain</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>fifo</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>hop_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ff_outlink_get_status</name><argument_list>(<argument><expr><name>inlink</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>AVERROR_EOF</name> <operator>&amp;&amp;</operator>

<name><name>s</name><operator>-&gt;</operator><name>sliding</name></name> <operator>==</operator> <name>FULLFRAME</name> <operator>&amp;&amp;</operator>

<name><name>s</name><operator>-&gt;</operator><name>xpos</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>outpicref</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int64_t</name></type> <name>pts</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>orientation</name></name> <operator>==</operator> <name>VERTICAL</name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>outlink</name><operator>-&gt;</operator><name>h</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>outpicref</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>i</name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>outpicref</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>xpos</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>outlink</name><operator>-&gt;</operator><name>w</name></name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>xpos</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>outpicref</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name>i</name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>outpicref</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>xpos</name></name></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>, <argument><expr><name><name>outlink</name><operator>-&gt;</operator><name>w</name></name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>xpos</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>outpicref</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <name>i</name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>outpicref</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>xpos</name></name></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>, <argument><expr><name><name>outlink</name><operator>-&gt;</operator><name>w</name></name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>xpos</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if> <else>else <block>{<block_content>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>xpos</name></name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>outlink</name><operator>-&gt;</operator><name>h</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>outpicref</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>i</name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>outpicref</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>outlink</name><operator>-&gt;</operator><name>w</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>outpicref</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name>i</name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>outpicref</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>, <argument><expr><name><name>outlink</name><operator>-&gt;</operator><name>w</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>outpicref</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <name>i</name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>outpicref</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>, <argument><expr><name><name>outlink</name><operator>-&gt;</operator><name>w</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>outpicref</name><operator>-&gt;</operator><name>pts</name></name> <operator>+=</operator> <name><name>s</name><operator>-&gt;</operator><name>consumed</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>pts</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>outpicref</name><operator>-&gt;</operator><name>pts</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_filter_frame</name><argument_list>(<argument><expr><name>outlink</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>outpicref</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>outpicref</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_outlink_set_status</name><argument_list>(<argument><expr><name>outlink</name></expr></argument>, <argument><expr><name>AVERROR_EOF</name></expr></argument>, <argument><expr><name>pts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>FF_FILTER_FORWARD_STATUS</name><argument_list>(<argument><expr><name>inlink</name></expr></argument>, <argument><expr><name>outlink</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ff_outlink_frame_wanted</name><argument_list>(<argument><expr><name>outlink</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>av_audio_fifo_size</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>fifo</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>win_size</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ff_inlink_request_frame</name><argument_list>(<argument><expr><name>inlink</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>av_audio_fifo_size</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>fifo</name></name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>win_size</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ff_filter_set_ready</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>FFERROR_NOT_READY</name></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVFilterPad</name></type> <name><name>showspectrum_inputs</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"default"</literal></expr>,

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_AUDIO</name></expr>,

}</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVFilterPad</name></type> <name><name>showspectrum_outputs</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"default"</literal></expr>,

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,

<expr><operator>.</operator><name>config_props</name> <operator>=</operator> <name>config_output</name></expr>,

}</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFilter</name></type> <name>ff_avf_showspectrum</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"showspectrum"</literal></expr>,

<expr><operator>.</operator><name>description</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"Convert input audio to a spectrum video output."</literal></expr></argument>)</argument_list></call></expr>,

<expr><operator>.</operator><name>uninit</name> <operator>=</operator> <name>uninit</name></expr>,

<expr><operator>.</operator><name>query_formats</name> <operator>=</operator> <name>query_formats</name></expr>,

<expr><operator>.</operator><name>priv_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>ShowSpectrumContext</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><operator>.</operator><name>inputs</name> <operator>=</operator> <name>showspectrum_inputs</name></expr>,

<expr><operator>.</operator><name>outputs</name> <operator>=</operator> <name>showspectrum_outputs</name></expr>,

<expr><operator>.</operator><name>activate</name> <operator>=</operator> <name>activate</name></expr>,

<expr><operator>.</operator><name>priv_class</name> <operator>=</operator> <operator>&amp;</operator><name>showspectrum_class</name></expr>,

<expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>AVFILTER_FLAG_SLICE_THREADS</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_SHOWSPECTRUMPIC_FILTER</name></expr></cpp:if>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVOption</name></type> <name><name>showspectrumpic_options</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><literal type="string">"size"</literal></expr>, <expr><literal type="string">"set video size"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_IMAGE_SIZE</name></expr>, <expr><block>{<expr><operator>.</operator><name>str</name> <operator>=</operator> <literal type="string">"4096x2048"</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"s"</literal></expr>, <expr><literal type="string">"set video size"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_IMAGE_SIZE</name></expr>, <expr><block>{<expr><operator>.</operator><name>str</name> <operator>=</operator> <literal type="string">"4096x2048"</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"mode"</literal></expr>, <expr><literal type="string">"set channel display mode"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>COMBINED</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NB_MODES</name><operator>-</operator><literal type="number">1</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"mode"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"combined"</literal></expr>, <expr><literal type="string">"combined mode"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>COMBINED</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"mode"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"separate"</literal></expr>, <expr><literal type="string">"separate mode"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>SEPARATE</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"mode"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"color"</literal></expr>, <expr><literal type="string">"set channel coloring"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>color_mode</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>INTENSITY</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NB_CLMODES</name><operator>-</operator><literal type="number">1</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"color"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"channel"</literal></expr>, <expr><literal type="string">"separate color for each channel"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>CHANNEL</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"color"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"intensity"</literal></expr>, <expr><literal type="string">"intensity based coloring"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>INTENSITY</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"color"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"rainbow"</literal></expr>, <expr><literal type="string">"rainbow based coloring"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>RAINBOW</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"color"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"moreland"</literal></expr>, <expr><literal type="string">"moreland based coloring"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>MORELAND</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"color"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"nebulae"</literal></expr>, <expr><literal type="string">"nebulae based coloring"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>NEBULAE</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"color"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"fire"</literal></expr>, <expr><literal type="string">"fire based coloring"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>FIRE</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"color"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"fiery"</literal></expr>, <expr><literal type="string">"fiery based coloring"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>FIERY</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"color"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"fruit"</literal></expr>, <expr><literal type="string">"fruit based coloring"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>FRUIT</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"color"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"cool"</literal></expr>, <expr><literal type="string">"cool based coloring"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>COOL</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"color"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"magma"</literal></expr>, <expr><literal type="string">"magma based coloring"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>MAGMA</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"color"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"green"</literal></expr>, <expr><literal type="string">"green based coloring"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>GREEN</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"color"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"viridis"</literal></expr>, <expr><literal type="string">"viridis based coloring"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>VIRIDIS</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"color"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"plasma"</literal></expr>, <expr><literal type="string">"plasma based coloring"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>PLASMA</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"color"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"cividis"</literal></expr>, <expr><literal type="string">"cividis based coloring"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>CIVIDIS</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"color"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"terrain"</literal></expr>, <expr><literal type="string">"terrain based coloring"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>TERRAIN</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"color"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"scale"</literal></expr>, <expr><literal type="string">"set display scale"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>scale</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>LOG</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NB_SCALES</name><operator>-</operator><literal type="number">1</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"scale"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"lin"</literal></expr>, <expr><literal type="string">"linear"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>LINEAR</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"scale"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"sqrt"</literal></expr>, <expr><literal type="string">"square root"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>SQRT</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"scale"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"cbrt"</literal></expr>, <expr><literal type="string">"cubic root"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>CBRT</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"scale"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"log"</literal></expr>, <expr><literal type="string">"logarithmic"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>LOG</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"scale"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"4thrt"</literal></expr>,<expr><literal type="string">"4th root"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>FOURTHRT</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"scale"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"5thrt"</literal></expr>,<expr><literal type="string">"5th root"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>FIFTHRT</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"scale"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"fscale"</literal></expr>, <expr><literal type="string">"set frequency scale"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>fscale</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>F_LINEAR</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NB_FSCALES</name><operator>-</operator><literal type="number">1</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"fscale"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"lin"</literal></expr>, <expr><literal type="string">"linear"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>F_LINEAR</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"fscale"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"log"</literal></expr>, <expr><literal type="string">"logarithmic"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>F_LOG</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"fscale"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"saturation"</literal></expr>, <expr><literal type="string">"color saturation multiplier"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>saturation</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_FLOAT</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name> <operator>=</operator> <literal type="number">1</literal></expr>}</block></expr>, <expr><operator>-</operator><literal type="number">10</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"win_func"</literal></expr>, <expr><literal type="string">"set window function"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>win_func</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>WFUNC_HANNING</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NB_WFUNC</name><operator>-</operator><literal type="number">1</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"win_func"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"rect"</literal></expr>, <expr><literal type="string">"Rectangular"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>WFUNC_RECT</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"win_func"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"bartlett"</literal></expr>, <expr><literal type="string">"Bartlett"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>WFUNC_BARTLETT</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"win_func"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"hann"</literal></expr>, <expr><literal type="string">"Hann"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>WFUNC_HANNING</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"win_func"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"hanning"</literal></expr>, <expr><literal type="string">"Hanning"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>WFUNC_HANNING</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"win_func"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"hamming"</literal></expr>, <expr><literal type="string">"Hamming"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>WFUNC_HAMMING</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"win_func"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"blackman"</literal></expr>, <expr><literal type="string">"Blackman"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>WFUNC_BLACKMAN</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"win_func"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"welch"</literal></expr>, <expr><literal type="string">"Welch"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>WFUNC_WELCH</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"win_func"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"flattop"</literal></expr>, <expr><literal type="string">"Flat-top"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>WFUNC_FLATTOP</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"win_func"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"bharris"</literal></expr>, <expr><literal type="string">"Blackman-Harris"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>WFUNC_BHARRIS</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"win_func"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"bnuttall"</literal></expr>, <expr><literal type="string">"Blackman-Nuttall"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>WFUNC_BNUTTALL</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"win_func"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"bhann"</literal></expr>, <expr><literal type="string">"Bartlett-Hann"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>WFUNC_BHANN</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"win_func"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"sine"</literal></expr>, <expr><literal type="string">"Sine"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>WFUNC_SINE</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"win_func"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"nuttall"</literal></expr>, <expr><literal type="string">"Nuttall"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>WFUNC_NUTTALL</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"win_func"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"lanczos"</literal></expr>, <expr><literal type="string">"Lanczos"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>WFUNC_LANCZOS</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"win_func"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"gauss"</literal></expr>, <expr><literal type="string">"Gauss"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>WFUNC_GAUSS</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"win_func"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"tukey"</literal></expr>, <expr><literal type="string">"Tukey"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>WFUNC_TUKEY</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"win_func"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"dolph"</literal></expr>, <expr><literal type="string">"Dolph-Chebyshev"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>WFUNC_DOLPH</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"win_func"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"cauchy"</literal></expr>, <expr><literal type="string">"Cauchy"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>WFUNC_CAUCHY</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"win_func"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"parzen"</literal></expr>, <expr><literal type="string">"Parzen"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>WFUNC_PARZEN</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"win_func"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"poisson"</literal></expr>, <expr><literal type="string">"Poisson"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>WFUNC_POISSON</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"win_func"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"bohman"</literal></expr>, <expr><literal type="string">"Bohman"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>WFUNC_BOHMAN</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"win_func"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"orientation"</literal></expr>, <expr><literal type="string">"set orientation"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>orientation</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>VERTICAL</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NB_ORIENTATIONS</name><operator>-</operator><literal type="number">1</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"orientation"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"vertical"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>VERTICAL</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"orientation"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"horizontal"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>HORIZONTAL</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"orientation"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"gain"</literal></expr>, <expr><literal type="string">"set scale gain"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>gain</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_FLOAT</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name> <operator>=</operator> <literal type="number">1</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">128</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"legend"</literal></expr>, <expr><literal type="string">"draw legend"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>legend</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_BOOL</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">1</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"rotation"</literal></expr>, <expr><literal type="string">"color rotation"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>rotation</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_FLOAT</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name> <operator>=</operator> <literal type="number">0</literal></expr>}</block></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"start"</literal></expr>, <expr><literal type="string">"start frequency"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>start</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>INT32_MAX</name></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"stop"</literal></expr>, <expr><literal type="string">"stop frequency"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>stop</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>INT32_MAX</name></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>AVFILTER_DEFINE_CLASS</name><argument_list>(<argument><expr><name>showspectrumpic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function><type><specifier>static</specifier> <name>int</name></type> <name>showspectrumpic_request_frame</name><parameter_list>(<parameter><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>outlink</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>outlink</name><operator>-&gt;</operator><name>src</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ShowSpectrumContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>inlink</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>inputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>, <decl><type ref="prev"/><name>samples</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_request_frame</name><argument_list>(<argument><expr><name>inlink</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>samples</name> <operator>=</operator> <call><name>av_audio_fifo_size</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>fifo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>AVERROR_EOF</name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>outpicref</name></name> <operator>&amp;&amp;</operator> <name>samples</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>consumed</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>x</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>sz</name> <init>= <expr><ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>orientation</name></name> <operator>==</operator> <name>VERTICAL</name></expr> ?</condition><then> <expr><name><name>s</name><operator>-&gt;</operator><name>w</name></name></expr> </then><else>: <expr><name><name>s</name><operator>-&gt;</operator><name>h</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ch</name></decl>, <decl><type ref="prev"/><name>spf</name></decl>, <decl><type ref="prev"/><name>spb</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>fin</name></decl>;</decl_stmt>

<expr_stmt><expr><name>spf</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>win_size</name></name> <operator>*</operator> <operator>(</operator><name>samples</name> <operator>/</operator> <operator>(</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>win_size</name></name> <operator>*</operator> <name>sz</name><operator>)</operator> <operator>*</operator> <call><name>ceil</name><argument_list>(<argument><expr><name>samples</name> <operator>/</operator> <operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>win_size</name></name> <operator>*</operator> <name>sz</name><operator>)</operator></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>spf</name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>spf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>spb</name> <operator>=</operator> <operator>(</operator><name>samples</name> <operator>/</operator> <operator>(</operator><name>spf</name> <operator>*</operator> <name>sz</name><operator>)</operator><operator>)</operator> <operator>*</operator> <name>spf</name></expr>;</expr_stmt>

<expr_stmt><expr><name>fin</name> <operator>=</operator> <call><name>ff_get_audio_buffer</name><argument_list>(<argument><expr><name>inlink</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>win_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>fin</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<while>while <condition>(<expr><name>x</name> <operator>&lt;</operator> <name>sz</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>av_audio_fifo_peek</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>fifo</name></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><name><name>fin</name><operator>-&gt;</operator><name>extended_data</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>win_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_audio_fifo_drain</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>fifo</name></name></expr></argument>, <argument><expr><name>spf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>win_size</name></name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>ch</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ch</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>nb_display_channels</name></name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>fin</name><operator>-&gt;</operator><name>extended_data</name><index>[<expr><name>ch</name></expr>]</index></name> <operator>+</operator> <name>ret</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>win_size</name></name> <operator>-</operator> <name>ret</name><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name><name>ctx</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>run_channel_fft</name></expr></argument>, <argument><expr><name>fin</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>nb_display_channels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>acalc_magnitudes</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>consumed</name> <operator>+=</operator> <name>spf</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>consumed</name> <operator>&gt;=</operator> <name>spb</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>h</name> <init>= <expr><ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>orientation</name></name> <operator>==</operator> <name>VERTICAL</name></expr> ?</condition><then> <expr><name><name>s</name><operator>-&gt;</operator><name>h</name></name></expr> </then><else>: <expr><name><name>s</name><operator>-&gt;</operator><name>w</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>scale_magnitudes</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">1.f</literal> <operator>/</operator> <operator>(</operator><name>consumed</name> <operator>/</operator> <name>spf</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>plot_spectrum_column</name><argument_list>(<argument><expr><name>inlink</name></expr></argument>, <argument><expr><name>fin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>consumed</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>x</name><operator>++</operator></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>ch</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ch</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>nb_display_channels</name></name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>magnitudes</name><index>[<expr><name>ch</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>h</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></if></if_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>outpicref</name><operator>-&gt;</operator><name>pts</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>legend</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>draw_legend</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>samples</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_filter_frame</name><argument_list>(<argument><expr><name>outlink</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>outpicref</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>outpicref</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>showspectrumpic_filter_frame</name><parameter_list>(<parameter><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>inlink</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>insamples</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>inlink</name><operator>-&gt;</operator><name>dst</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ShowSpectrumContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>av_audio_fifo_write</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>fifo</name></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><name><name>insamples</name><operator>-&gt;</operator><name>extended_data</name></name></expr></argument>, <argument><expr><name><name>insamples</name><operator>-&gt;</operator><name>nb_samples</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>insamples</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVFilterPad</name></type> <name><name>showspectrumpic_inputs</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"default"</literal></expr>,

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_AUDIO</name></expr>,

<expr><operator>.</operator><name>filter_frame</name> <operator>=</operator> <name>showspectrumpic_filter_frame</name></expr>,

}</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVFilterPad</name></type> <name><name>showspectrumpic_outputs</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"default"</literal></expr>,

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,

<expr><operator>.</operator><name>config_props</name> <operator>=</operator> <name>config_output</name></expr>,

<expr><operator>.</operator><name>request_frame</name> <operator>=</operator> <name>showspectrumpic_request_frame</name></expr>,

}</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFilter</name></type> <name>ff_avf_showspectrumpic</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"showspectrumpic"</literal></expr>,

<expr><operator>.</operator><name>description</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"Convert input audio to a spectrum video output single picture."</literal></expr></argument>)</argument_list></call></expr>,

<expr><operator>.</operator><name>uninit</name> <operator>=</operator> <name>uninit</name></expr>,

<expr><operator>.</operator><name>query_formats</name> <operator>=</operator> <name>query_formats</name></expr>,

<expr><operator>.</operator><name>priv_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>ShowSpectrumContext</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><operator>.</operator><name>inputs</name> <operator>=</operator> <name>showspectrumpic_inputs</name></expr>,

<expr><operator>.</operator><name>outputs</name> <operator>=</operator> <name>showspectrumpic_outputs</name></expr>,

<expr><operator>.</operator><name>priv_class</name> <operator>=</operator> <operator>&amp;</operator><name>showspectrumpic_class</name></expr>,

<expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>AVFILTER_FLAG_SLICE_THREADS</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

</unit>
