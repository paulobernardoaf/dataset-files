<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavfilter\graphdump.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/channel_layout.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/bprint.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/pixdesc.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avfilter.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>int</name></type> <name>print_link_prop</name><parameter_list>(<parameter><decl><type><name>AVBPrint</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>link</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>format</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>layout</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVBPrint</name></type> <name>dummy_buffer</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>buf</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>buf</name> <operator>=</operator> <operator>&amp;</operator><name>dummy_buffer</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<switch>switch <condition>(<expr><name><name>link</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>AVMEDIA_TYPE_VIDEO</name></expr>:</case>

<expr_stmt><expr><name>format</name> <operator>=</operator> <call><name>av_x_if_null</name><argument_list>(<argument><expr><call><name>av_get_pix_fmt_name</name><argument_list>(<argument><expr><name><name>link</name><operator>-&gt;</operator><name>format</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"?"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_bprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"[%dx%d %d:%d %s]"</literal></expr></argument>, <argument><expr><name><name>link</name><operator>-&gt;</operator><name>w</name></name></expr></argument>, <argument><expr><name><name>link</name><operator>-&gt;</operator><name>h</name></name></expr></argument>,

<argument><expr><name><name>link</name><operator>-&gt;</operator><name>sample_aspect_ratio</name><operator>.</operator><name>num</name></name></expr></argument>,

<argument><expr><name><name>link</name><operator>-&gt;</operator><name>sample_aspect_ratio</name><operator>.</operator><name>den</name></name></expr></argument>,

<argument><expr><name>format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AVMEDIA_TYPE_AUDIO</name></expr>:</case>

<expr_stmt><expr><call><name>av_get_channel_layout_string</name><argument_list>(<argument><expr><name>layout</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>layout</name></expr></argument>)</argument_list></sizeof></expr></argument>,

<argument><expr><name><name>link</name><operator>-&gt;</operator><name>channels</name></name></expr></argument>, <argument><expr><name><name>link</name><operator>-&gt;</operator><name>channel_layout</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>format</name> <operator>=</operator> <call><name>av_x_if_null</name><argument_list>(<argument><expr><call><name>av_get_sample_fmt_name</name><argument_list>(<argument><expr><name><name>link</name><operator>-&gt;</operator><name>format</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"?"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_bprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"[%dHz %s:%s]"</literal></expr></argument>,

<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>link</name><operator>-&gt;</operator><name>sample_rate</name></name></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>layout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>av_bprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"?"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<return>return <expr><name><name>buf</name><operator>-&gt;</operator><name>len</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>avfilter_graph_dump_to_buf</name><parameter_list>(<parameter><decl><type><name>AVBPrint</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>AVFilterGraph</name> <modifier>*</modifier></type><name>graph</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>x</name></decl>, <decl><type ref="prev"/><name>e</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>graph</name><operator>-&gt;</operator><name>nb_filters</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>filter</name> <init>= <expr><name><name>graph</name><operator>-&gt;</operator><name>filters</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>max_src_name</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>max_dst_name</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>max_in_name</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>max_out_name</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>max_in_fmt</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>max_out_fmt</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>width</name></decl>, <decl><type ref="prev"/><name>height</name></decl>, <decl><type ref="prev"/><name>in_indent</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>lname</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>filter</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>ltype</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>filter</name><operator>-&gt;</operator><name>filter</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>filter</name><operator>-&gt;</operator><name>nb_inputs</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>l</name> <init>= <expr><name><name>filter</name><operator>-&gt;</operator><name>inputs</name><index>[<expr><name>j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>ln</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>l</name><operator>-&gt;</operator><name>src</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>l</name><operator>-&gt;</operator><name>srcpad</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>max_src_name</name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name>max_src_name</name></expr></argument>, <argument><expr><name>ln</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>max_in_name</name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name>max_in_name</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>l</name><operator>-&gt;</operator><name>dstpad</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>max_in_fmt</name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name>max_in_fmt</name></expr></argument>, <argument><expr><call><name>print_link_prop</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>l</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>filter</name><operator>-&gt;</operator><name>nb_outputs</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>l</name> <init>= <expr><name><name>filter</name><operator>-&gt;</operator><name>outputs</name><index>[<expr><name>j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>ln</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>l</name><operator>-&gt;</operator><name>dst</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>l</name><operator>-&gt;</operator><name>dstpad</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>max_dst_name</name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name>max_dst_name</name></expr></argument>, <argument><expr><name>ln</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>max_out_name</name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name>max_out_name</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>l</name><operator>-&gt;</operator><name>srcpad</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>max_out_fmt</name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name>max_out_fmt</name></expr></argument>, <argument><expr><call><name>print_link_prop</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>l</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>in_indent</name> <operator>=</operator> <name>max_src_name</name> <operator>+</operator> <name>max_in_name</name> <operator>+</operator> <name>max_in_fmt</name></expr>;</expr_stmt>

<expr_stmt><expr><name>in_indent</name> <operator>+=</operator> <ternary><condition><expr><name>in_indent</name></expr> ?</condition><then> <expr><literal type="number">4</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>width</name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name>lname</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>ltype</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>height</name> <operator>=</operator> <call><name>FFMAX3</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name><name>filter</name><operator>-&gt;</operator><name>nb_inputs</name></name></expr></argument>, <argument><expr><name><name>filter</name><operator>-&gt;</operator><name>nb_outputs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_bprint_chars</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>, <argument><expr><name>in_indent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_bprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"+"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_bprint_chars</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="char">'-'</literal></expr></argument>, <argument><expr><name>width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_bprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"+\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name></type> <name>in_no</name> <init>= <expr><name>j</name> <operator>-</operator> <operator>(</operator><name>height</name> <operator>-</operator> <name><name>filter</name><operator>-&gt;</operator><name>nb_inputs</name></name> <operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>out_no</name> <init>= <expr><name>j</name> <operator>-</operator> <operator>(</operator><name>height</name> <operator>-</operator> <name><name>filter</name><operator>-&gt;</operator><name>nb_outputs</name></name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>in_no</name> <operator>&lt;</operator> <name><name>filter</name><operator>-&gt;</operator><name>nb_inputs</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>l</name> <init>= <expr><name><name>filter</name><operator>-&gt;</operator><name>inputs</name><index>[<expr><name>in_no</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>e</name> <operator>=</operator> <name><name>buf</name><operator>-&gt;</operator><name>len</name></name> <operator>+</operator> <name>max_src_name</name> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_bprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"%s:%s"</literal></expr></argument>, <argument><expr><name><name>l</name><operator>-&gt;</operator><name>src</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>l</name><operator>-&gt;</operator><name>srcpad</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_bprint_chars</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="char">'-'</literal></expr></argument>, <argument><expr><name>e</name> <operator>-</operator> <name><name>buf</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>e</name> <operator>=</operator> <name><name>buf</name><operator>-&gt;</operator><name>len</name></name> <operator>+</operator> <name>max_in_fmt</name> <operator>+</operator> <literal type="number">2</literal> <operator>+</operator>

<name>max_in_name</name> <operator>-</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>l</name><operator>-&gt;</operator><name>dstpad</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>print_link_prop</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_bprint_chars</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="char">'-'</literal></expr></argument>, <argument><expr><name>e</name> <operator>-</operator> <name><name>buf</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_bprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>l</name><operator>-&gt;</operator><name>dstpad</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>av_bprint_chars</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>, <argument><expr><name>in_indent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>av_bprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"|"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>j</name> <operator>==</operator> <operator>(</operator><name>height</name> <operator>-</operator> <literal type="number">2</literal><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>x</name> <operator>=</operator> <operator>(</operator><name>width</name> <operator>-</operator> <name>lname</name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_bprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"%*s%-*s"</literal></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><name>width</name> <operator>-</operator> <name>x</name></expr></argument>, <argument><expr><name><name>filter</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>j</name> <operator>==</operator> <operator>(</operator><name>height</name> <operator>-</operator> <literal type="number">2</literal><operator>)</operator> <operator>/</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>x</name> <operator>=</operator> <operator>(</operator><name>width</name> <operator>-</operator> <name>ltype</name> <operator>-</operator> <literal type="number">2</literal><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_bprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"%*s(%s)%*s"</literal></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><name><name>filter</name><operator>-&gt;</operator><name>filter</name><operator>-&gt;</operator><name>name</name></name></expr></argument>,

<argument><expr><name>width</name> <operator>-</operator> <name>ltype</name> <operator>-</operator> <literal type="number">2</literal> <operator>-</operator> <name>x</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>av_bprint_chars</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>, <argument><expr><name>width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>av_bprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"|"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>out_no</name> <operator>&lt;</operator> <name><name>filter</name><operator>-&gt;</operator><name>nb_outputs</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>l</name> <init>= <expr><name><name>filter</name><operator>-&gt;</operator><name>outputs</name><index>[<expr><name>out_no</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>ln</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>l</name><operator>-&gt;</operator><name>dst</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator>

<call><name>strlen</name><argument_list>(<argument><expr><name><name>l</name><operator>-&gt;</operator><name>dstpad</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>e</name> <operator>=</operator> <name><name>buf</name><operator>-&gt;</operator><name>len</name></name> <operator>+</operator> <name>max_out_name</name> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_bprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>l</name><operator>-&gt;</operator><name>srcpad</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_bprint_chars</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="char">'-'</literal></expr></argument>, <argument><expr><name>e</name> <operator>-</operator> <name><name>buf</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>e</name> <operator>=</operator> <name><name>buf</name><operator>-&gt;</operator><name>len</name></name> <operator>+</operator> <name>max_out_fmt</name> <operator>+</operator> <literal type="number">2</literal> <operator>+</operator>

<name>max_dst_name</name> <operator>-</operator> <name>ln</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>print_link_prop</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_bprint_chars</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="char">'-'</literal></expr></argument>, <argument><expr><name>e</name> <operator>-</operator> <name><name>buf</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_bprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"%s:%s"</literal></expr></argument>, <argument><expr><name><name>l</name><operator>-&gt;</operator><name>dst</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>l</name><operator>-&gt;</operator><name>dstpad</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_bprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>av_bprint_chars</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>, <argument><expr><name>in_indent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_bprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"+"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_bprint_chars</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="char">'-'</literal></expr></argument>, <argument><expr><name>width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_bprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"+\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_bprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type><name>avfilter_graph_dump</name><parameter_list>(<parameter><decl><type><name>AVFilterGraph</name> <modifier>*</modifier></type><name>graph</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>options</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVBPrint</name></type> <name>buf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>dump</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_bprint_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>AV_BPRINT_SIZE_COUNT_ONLY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avfilter_graph_dump_to_buf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name>graph</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_bprint_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name><name>buf</name><operator>.</operator><name>len</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>buf</name><operator>.</operator><name>len</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avfilter_graph_dump_to_buf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name>graph</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_bprint_finalize</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dump</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>dump</name></expr>;</return>

</block_content>}</block></function>

</unit>
