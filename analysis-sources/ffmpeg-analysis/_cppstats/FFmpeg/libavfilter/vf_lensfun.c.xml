<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavfilter\vf_lensfun.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;float.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avassert.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/imgutils.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/opt.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libswscale/swscale.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avfilter.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"formats.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"video.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;lensfun.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LANCZOS_RESOLUTION</name></cpp:macro> <cpp:value>256</cpp:value></cpp:define>

<enum>enum <name>Mode</name> <block>{

<decl><name>VIGNETTING</name> <init>= <expr><literal type="number">0x1</literal></expr></init></decl>,

<decl><name>GEOMETRY_DISTORTION</name> <init>= <expr><literal type="number">0x2</literal></expr></init></decl>,

<decl><name>SUBPIXEL_DISTORTION</name> <init>= <expr><literal type="number">0x4</literal></expr></init></decl>

}</block>;</enum>

<enum>enum <name>InterpolationType</name> <block>{

<decl><name>NEAREST</name></decl>,

<decl><name>LINEAR</name></decl>,

<decl><name>LANCZOS</name></decl>

}</block>;</enum>

<typedef>typedef <type><struct>struct <name>VignettingThreadData</name> <block>{

<decl_stmt><decl><type><name>int</name></type> <name>width</name></decl>, <name>height</name>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>data_in</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>linesize_in</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>pixel_composition</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lfModifier</name> <modifier>*</modifier></type><name>modifier</name></decl>;</decl_stmt>

}</block></struct></type> <name>VignettingThreadData</name>;</typedef>

<typedef>typedef <type><struct>struct <name>DistortionCorrectionThreadData</name> <block>{

<decl_stmt><decl><type><name>int</name></type> <name>width</name></decl>, <name>height</name>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>distortion_coords</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>data_in</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>data_out</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>linesize_in</name></decl>, <name>linesize_out</name>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>interpolation</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>mode</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>interpolation_type</name></decl>;</decl_stmt>

}</block></struct></type> <name>DistortionCorrectionThreadData</name>;</typedef>

<typedef>typedef <type><struct>struct <name>LensfunContext</name> <block>{

<decl_stmt><decl><type><specifier>const</specifier> <name>AVClass</name> <modifier>*</modifier></type><name>class</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>make</name></decl>, <modifier>*</modifier><name>model</name>, <modifier>*</modifier><name>lens_model</name>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>mode</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>focal_length</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>aperture</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>focus_distance</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>scale</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>target_geometry</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>reverse</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>interpolation_type</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>distortion_coords</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>interpolation</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lfLens</name> <modifier>*</modifier></type><name>lens</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lfCamera</name> <modifier>*</modifier></type><name>camera</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lfModifier</name> <modifier>*</modifier></type><name>modifier</name></decl>;</decl_stmt>

}</block></struct></type> <name>LensfunContext</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OFFSET</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>offsetof(LensfunContext, x)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLAGS</name></cpp:macro> <cpp:value>AV_OPT_FLAG_FILTERING_PARAM|AV_OPT_FLAG_VIDEO_PARAM</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVOption</name></type> <name><name>lensfun_options</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><literal type="string">"make"</literal></expr>, <expr><literal type="string">"set camera maker"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>make</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_STRING</name></expr>, <expr><block>{<expr><operator>.</operator><name>str</name><operator>=</operator><name>NULL</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"model"</literal></expr>, <expr><literal type="string">"set camera model"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>model</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_STRING</name></expr>, <expr><block>{<expr><operator>.</operator><name>str</name><operator>=</operator><name>NULL</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"lens_model"</literal></expr>, <expr><literal type="string">"set lens model"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>lens_model</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_STRING</name></expr>, <expr><block>{<expr><operator>.</operator><name>str</name><operator>=</operator><name>NULL</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"mode"</literal></expr>, <expr><literal type="string">"set mode"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>GEOMETRY_DISTORTION</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>VIGNETTING</name> <operator>|</operator> <name>GEOMETRY_DISTORTION</name> <operator>|</operator> <name>SUBPIXEL_DISTORTION</name></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"mode"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"vignetting"</literal></expr>, <expr><literal type="string">"fix lens vignetting"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>VIGNETTING</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"mode"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"geometry"</literal></expr>, <expr><literal type="string">"correct geometry distortion"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>GEOMETRY_DISTORTION</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"mode"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"subpixel"</literal></expr>, <expr><literal type="string">"fix chromatic aberrations"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>SUBPIXEL_DISTORTION</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"mode"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"vig_geo"</literal></expr>, <expr><literal type="string">"fix lens vignetting and correct geometry distortion"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>VIGNETTING</name> <operator>|</operator> <name>GEOMETRY_DISTORTION</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"mode"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"vig_subpixel"</literal></expr>, <expr><literal type="string">"fix lens vignetting and chromatic aberrations"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>VIGNETTING</name> <operator>|</operator> <name>SUBPIXEL_DISTORTION</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"mode"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"distortion"</literal></expr>, <expr><literal type="string">"correct geometry distortion and chromatic aberrations"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>GEOMETRY_DISTORTION</name> <operator>|</operator> <name>SUBPIXEL_DISTORTION</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"mode"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"all"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>VIGNETTING</name> <operator>|</operator> <name>GEOMETRY_DISTORTION</name> <operator>|</operator> <name>SUBPIXEL_DISTORTION</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"mode"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"focal_length"</literal></expr>, <expr><literal type="string">"focal length of video (zoom; constant for the duration of the use of this filter)"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>focal_length</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_FLOAT</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name><operator>=</operator><literal type="number">18</literal></expr>}</block></expr>, <expr><literal type="number">0.0</literal></expr>, <expr><name>DBL_MAX</name></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"aperture"</literal></expr>, <expr><literal type="string">"aperture (constant for the duration of the use of this filter)"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>aperture</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_FLOAT</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name><operator>=</operator><literal type="number">3.5</literal></expr>}</block></expr>, <expr><literal type="number">0.0</literal></expr>, <expr><name>DBL_MAX</name></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"focus_distance"</literal></expr>, <expr><literal type="string">"focus distance (constant for the duration of the use of this filter)"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>focus_distance</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_FLOAT</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name><operator>=</operator><literal type="number">1000.0f</literal></expr>}</block></expr>, <expr><literal type="number">0.0</literal></expr>, <expr><name>DBL_MAX</name></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"scale"</literal></expr>, <expr><literal type="string">"scale factor applied after corrections (0.0 means automatic scaling)"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>scale</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_FLOAT</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name><operator>=</operator><literal type="number">0.0</literal></expr>}</block></expr>, <expr><literal type="number">0.0</literal></expr>, <expr><name>DBL_MAX</name></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"target_geometry"</literal></expr>, <expr><literal type="string">"target geometry of the lens correction (only when geometry correction is enabled)"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>target_geometry</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>LF_RECTILINEAR</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"lens_geometry"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"rectilinear"</literal></expr>, <expr><literal type="string">"rectilinear lens (default)"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>LF_RECTILINEAR</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"lens_geometry"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"fisheye"</literal></expr>, <expr><literal type="string">"fisheye lens"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>LF_FISHEYE</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"lens_geometry"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"panoramic"</literal></expr>, <expr><literal type="string">"panoramic (cylindrical)"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>LF_PANORAMIC</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"lens_geometry"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"equirectangular"</literal></expr>, <expr><literal type="string">"equirectangular"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>LF_EQUIRECTANGULAR</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"lens_geometry"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"fisheye_orthographic"</literal></expr>, <expr><literal type="string">"orthographic fisheye"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>LF_FISHEYE_ORTHOGRAPHIC</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"lens_geometry"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"fisheye_stereographic"</literal></expr>, <expr><literal type="string">"stereographic fisheye"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>LF_FISHEYE_STEREOGRAPHIC</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"lens_geometry"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"fisheye_equisolid"</literal></expr>, <expr><literal type="string">"equisolid fisheye"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>LF_FISHEYE_EQUISOLID</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"lens_geometry"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"fisheye_thoby"</literal></expr>, <expr><literal type="string">"fisheye as measured by thoby"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>LF_FISHEYE_THOBY</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"lens_geometry"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"reverse"</literal></expr>, <expr><literal type="string">"Does reverse correction (regular image to lens distorted)"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>reverse</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_BOOL</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">0</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"interpolation"</literal></expr>, <expr><literal type="string">"Type of interpolation"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>interpolation_type</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>LINEAR</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>LANCZOS</name></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"interpolation"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"nearest"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>NEAREST</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"interpolation"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"linear"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>LINEAR</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"interpolation"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"lanczos"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>LANCZOS</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"interpolation"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>AVFILTER_DEFINE_CLASS</name><argument_list>(<argument><expr><name>lensfun</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>init</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>LensfunContext</name> <modifier>*</modifier></type><name>lensfun</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lfDatabase</name> <modifier>*</modifier></type><name>db</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>lfCamera</name> <modifier>*</modifier><modifier>*</modifier></type><name>cameras</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>lfLens</name> <modifier>*</modifier><modifier>*</modifier></type><name>lenses</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>lensfun</name><operator>-&gt;</operator><name>make</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_FATAL</name></expr></argument>, <argument><expr><literal type="string">"Option \"make\" not specified\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><name><name>lensfun</name><operator>-&gt;</operator><name>model</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_FATAL</name></expr></argument>, <argument><expr><literal type="string">"Option \"model\" not specified\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><name><name>lensfun</name><operator>-&gt;</operator><name>lens_model</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_FATAL</name></expr></argument>, <argument><expr><literal type="string">"Option \"lens_model\" not specified\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>lensfun</name><operator>-&gt;</operator><name>lens</name></name> <operator>=</operator> <call><name>lf_lens_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>lensfun</name><operator>-&gt;</operator><name>camera</name></name> <operator>=</operator> <call><name>lf_camera_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>db</name> <operator>=</operator> <call><name>lf_db_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>lf_db_load</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>LF_NO_ERROR</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>lf_db_destroy</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_FATAL</name></expr></argument>, <argument><expr><literal type="string">"Failed to load lensfun database\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>cameras</name> <operator>=</operator> <call><name>lf_db_find_cameras</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name><name>lensfun</name><operator>-&gt;</operator><name>make</name></name></expr></argument>, <argument><expr><name><name>lensfun</name><operator>-&gt;</operator><name>model</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>cameras</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>cameras</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>lf_camera_copy</name><argument_list>(<argument><expr><name><name>lensfun</name><operator>-&gt;</operator><name>camera</name></name></expr></argument>, <argument><expr><operator>*</operator><name>cameras</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"Using camera %s\n"</literal></expr></argument>, <argument><expr><name><name>lensfun</name><operator>-&gt;</operator><name>camera</name><operator>-&gt;</operator><name>Model</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>lf_free</name><argument_list>(<argument><expr><name>cameras</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lf_db_destroy</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_FATAL</name></expr></argument>, <argument><expr><literal type="string">"Failed to find camera in lensfun database\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>lf_free</name><argument_list>(<argument><expr><name>cameras</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>lenses</name> <operator>=</operator> <call><name>lf_db_find_lenses_hd</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name><name>lensfun</name><operator>-&gt;</operator><name>camera</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>lensfun</name><operator>-&gt;</operator><name>lens_model</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>lenses</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>lenses</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>lf_lens_copy</name><argument_list>(<argument><expr><name><name>lensfun</name><operator>-&gt;</operator><name>lens</name></name></expr></argument>, <argument><expr><operator>*</operator><name>lenses</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"Using lens %s\n"</literal></expr></argument>, <argument><expr><name><name>lensfun</name><operator>-&gt;</operator><name>lens</name><operator>-&gt;</operator><name>Model</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>lf_free</name><argument_list>(<argument><expr><name>lenses</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lf_db_destroy</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_FATAL</name></expr></argument>, <argument><expr><literal type="string">"Failed to find lens in lensfun database\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>lf_free</name><argument_list>(<argument><expr><name>lenses</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lf_db_destroy</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>query_formats</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>enum</name> <name>AVPixelFormat</name></name></type> <name><name>fmts</name><index>[]</index></name> <init>= <expr><block>{<expr><name>AV_PIX_FMT_RGB24</name></expr>, <expr><name>AV_PIX_FMT_NONE</name></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFilterFormats</name> <modifier>*</modifier></type><name>fmts_list</name> <init>= <expr><call><name>ff_make_format_list</name><argument_list>(<argument><expr><name>fmts</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>ff_set_common_formats</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>fmts_list</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>float</name></type> <name>lanczos_kernel</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>x</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>x</name> <operator>==</operator> <literal type="number">0.0f</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">1.0f</literal></expr>;</return>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>x</name> <operator>&gt;</operator> <operator>-</operator><literal type="number">2.0f</literal> <operator>&amp;&amp;</operator> <name>x</name> <operator>&lt;</operator> <literal type="number">2.0f</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>(</operator><literal type="number">2.0f</literal> <operator>*</operator> <call><name>sin</name><argument_list>(<argument><expr><name>M_PI</name> <operator>*</operator> <name>x</name></expr></argument>)</argument_list></call> <operator>*</operator> <call><name>sin</name><argument_list>(<argument><expr><name>M_PI</name> <operator>/</operator> <literal type="number">2.0f</literal> <operator>*</operator> <name>x</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>/</operator> <operator>(</operator><name>M_PI</name> <operator>*</operator> <name>M_PI</name> <operator>*</operator> <name>x</name> <operator>*</operator> <name>x</name><operator>)</operator></expr>;</return>

</block_content>}</block></if> <else>else <block>{<block_content>

<return>return <expr><literal type="number">0.0f</literal></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>config_props</name><parameter_list>(<parameter><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>inlink</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>inlink</name><operator>-&gt;</operator><name>dst</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>LensfunContext</name> <modifier>*</modifier></type><name>lensfun</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>index</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>a</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>lensfun_mode</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>lensfun</name><operator>-&gt;</operator><name>modifier</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>lensfun</name><operator>-&gt;</operator><name>camera</name></name> <operator>&amp;&amp;</operator> <name><name>lensfun</name><operator>-&gt;</operator><name>lens</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>lensfun</name><operator>-&gt;</operator><name>modifier</name></name> <operator>=</operator> <call><name>lf_modifier_new</name><argument_list>(<argument><expr><name><name>lensfun</name><operator>-&gt;</operator><name>lens</name></name></expr></argument>,

<argument><expr><name><name>lensfun</name><operator>-&gt;</operator><name>camera</name><operator>-&gt;</operator><name>CropFactor</name></name></expr></argument>,

<argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>w</name></name></expr></argument>,

<argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>h</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>lensfun</name><operator>-&gt;</operator><name>mode</name></name> <operator>&amp;</operator> <name>VIGNETTING</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>lensfun_mode</name> <operator>|=</operator> <name>LF_MODIFY_VIGNETTING</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>lensfun</name><operator>-&gt;</operator><name>mode</name></name> <operator>&amp;</operator> <name>GEOMETRY_DISTORTION</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>lensfun_mode</name> <operator>|=</operator> <name>LF_MODIFY_DISTORTION</name> <operator>|</operator> <name>LF_MODIFY_GEOMETRY</name> <operator>|</operator> <name>LF_MODIFY_SCALE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>lensfun</name><operator>-&gt;</operator><name>mode</name></name> <operator>&amp;</operator> <name>SUBPIXEL_DISTORTION</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>lensfun_mode</name> <operator>|=</operator> <name>LF_MODIFY_TCA</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>lf_modifier_initialize</name><argument_list>(<argument><expr><name><name>lensfun</name><operator>-&gt;</operator><name>modifier</name></name></expr></argument>,

<argument><expr><name><name>lensfun</name><operator>-&gt;</operator><name>lens</name></name></expr></argument>,

<argument><expr><name>LF_PF_U8</name></expr></argument>,

<argument><expr><name><name>lensfun</name><operator>-&gt;</operator><name>focal_length</name></name></expr></argument>,

<argument><expr><name><name>lensfun</name><operator>-&gt;</operator><name>aperture</name></name></expr></argument>,

<argument><expr><name><name>lensfun</name><operator>-&gt;</operator><name>focus_distance</name></name></expr></argument>,

<argument><expr><name><name>lensfun</name><operator>-&gt;</operator><name>scale</name></name></expr></argument>,

<argument><expr><name><name>lensfun</name><operator>-&gt;</operator><name>target_geometry</name></name></expr></argument>,

<argument><expr><name>lensfun_mode</name></expr></argument>,

<argument><expr><name><name>lensfun</name><operator>-&gt;</operator><name>reverse</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<return>return <expr><name>AVERROR_BUG</name></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>lensfun</name><operator>-&gt;</operator><name>distortion_coords</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>lensfun</name><operator>-&gt;</operator><name>mode</name></name> <operator>&amp;</operator> <name>SUBPIXEL_DISTORTION</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>lensfun</name><operator>-&gt;</operator><name>distortion_coords</name></name> <operator>=</operator> <call><name>av_malloc_array</name><argument_list>(<argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>w</name></name> <operator>*</operator> <name><name>inlink</name><operator>-&gt;</operator><name>h</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <literal type="number">2</literal> <operator>*</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>lensfun</name><operator>-&gt;</operator><name>distortion_coords</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>lensfun</name><operator>-&gt;</operator><name>mode</name></name> <operator>&amp;</operator> <name>GEOMETRY_DISTORTION</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>lf_modifier_apply_subpixel_geometry_distortion</name><argument_list>(<argument><expr><name><name>lensfun</name><operator>-&gt;</operator><name>modifier</name></name></expr></argument>,

<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>w</name></name></expr></argument>, <argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>h</name></name></expr></argument>,

<argument><expr><name><name>lensfun</name><operator>-&gt;</operator><name>distortion_coords</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>lf_modifier_apply_subpixel_distortion</name><argument_list>(<argument><expr><name><name>lensfun</name><operator>-&gt;</operator><name>modifier</name></name></expr></argument>,

<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>w</name></name></expr></argument>, <argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>h</name></name></expr></argument>,

<argument><expr><name><name>lensfun</name><operator>-&gt;</operator><name>distortion_coords</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>lensfun</name><operator>-&gt;</operator><name>mode</name></name> <operator>&amp;</operator> <name>GEOMETRY_DISTORTION</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>lensfun</name><operator>-&gt;</operator><name>distortion_coords</name></name> <operator>=</operator> <call><name>av_malloc_array</name><argument_list>(<argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>w</name></name> <operator>*</operator> <name><name>inlink</name><operator>-&gt;</operator><name>h</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>lensfun</name><operator>-&gt;</operator><name>distortion_coords</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>lf_modifier_apply_geometry_distortion</name><argument_list>(<argument><expr><name><name>lensfun</name><operator>-&gt;</operator><name>modifier</name></name></expr></argument>,

<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>w</name></name></expr></argument>, <argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>h</name></name></expr></argument>,

<argument><expr><name><name>lensfun</name><operator>-&gt;</operator><name>distortion_coords</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>lensfun</name><operator>-&gt;</operator><name>interpolation</name></name></expr>)</condition><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name><name>lensfun</name><operator>-&gt;</operator><name>interpolation_type</name></name> <operator>==</operator> <name>LANCZOS</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>lensfun</name><operator>-&gt;</operator><name>interpolation</name></name> <operator>=</operator> <call><name>av_malloc_array</name><argument_list>(<argument><expr><name>LANCZOS_RESOLUTION</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>lensfun</name><operator>-&gt;</operator><name>interpolation</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>index</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>index</name> <operator>&lt;</operator> <literal type="number">4</literal> <operator>*</operator> <name>LANCZOS_RESOLUTION</name></expr>;</condition> <incr><expr><operator>++</operator><name>index</name></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>index</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>lensfun</name><operator>-&gt;</operator><name>interpolation</name><index>[<expr><name>index</name></expr>]</index></name> <operator>=</operator> <literal type="number">1.0f</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>a</name> <operator>=</operator> <call><name>sqrtf</name><argument_list>(<argument><expr><operator>(</operator><name>float</name><operator>)</operator><name>index</name> <operator>/</operator> <name>LANCZOS_RESOLUTION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>lensfun</name><operator>-&gt;</operator><name>interpolation</name><index>[<expr><name>index</name></expr>]</index></name> <operator>=</operator> <call><name>lanczos_kernel</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vignetting_filter_slice</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>jobnr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nb_jobs</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>VignettingThreadData</name> <modifier>*</modifier></type><name>thread_data</name> <init>= <expr><name>arg</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>slice_start</name> <init>= <expr><name><name>thread_data</name><operator>-&gt;</operator><name>height</name></name> <operator>*</operator> <name>jobnr</name> <operator>/</operator> <name>nb_jobs</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>slice_end</name> <init>= <expr><name><name>thread_data</name><operator>-&gt;</operator><name>height</name></name> <operator>*</operator> <operator>(</operator><name>jobnr</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <name>nb_jobs</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>lf_modifier_apply_color_modification</name><argument_list>(<argument><expr><name><name>thread_data</name><operator>-&gt;</operator><name>modifier</name></name></expr></argument>,

<argument><expr><name><name>thread_data</name><operator>-&gt;</operator><name>data_in</name></name> <operator>+</operator> <name>slice_start</name> <operator>*</operator> <name><name>thread_data</name><operator>-&gt;</operator><name>linesize_in</name></name></expr></argument>,

<argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><name>slice_start</name></expr></argument>,

<argument><expr><name><name>thread_data</name><operator>-&gt;</operator><name>width</name></name></expr></argument>,

<argument><expr><name>slice_end</name> <operator>-</operator> <name>slice_start</name></expr></argument>,

<argument><expr><name><name>thread_data</name><operator>-&gt;</operator><name>pixel_composition</name></name></expr></argument>,

<argument><expr><name><name>thread_data</name><operator>-&gt;</operator><name>linesize_in</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>float</name></type> <name>square</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>x</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name>x</name> <operator>*</operator> <name>x</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>distortion_correction_filter_slice</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>jobnr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nb_jobs</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>DistortionCorrectionThreadData</name> <modifier>*</modifier></type><name>thread_data</name> <init>= <expr><name>arg</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>slice_start</name> <init>= <expr><name><name>thread_data</name><operator>-&gt;</operator><name>height</name></name> <operator>*</operator> <name>jobnr</name> <operator>/</operator> <name>nb_jobs</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>slice_end</name> <init>= <expr><name><name>thread_data</name><operator>-&gt;</operator><name>height</name></name> <operator>*</operator> <operator>(</operator><name>jobnr</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <name>nb_jobs</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>rgb_index</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>interpolated</name></decl>, <decl><type ref="prev"/><name>new_x</name></decl>, <decl><type ref="prev"/><name>new_y</name></decl>, <decl><type ref="prev"/><name>d</name></decl>, <decl><type ref="prev"/><name>norm</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>new_x_int</name></decl>, <decl><type ref="prev"/><name>new_y_int</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <name>slice_start</name></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>slice_end</name></expr>;</condition> <incr><expr><operator>++</operator><name>y</name></expr></incr>)</control><block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name><name>thread_data</name><operator>-&gt;</operator><name>width</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>x</name></expr></incr>)</control><block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>rgb_index</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>rgb_index</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><operator>++</operator><name>rgb_index</name></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>thread_data</name><operator>-&gt;</operator><name>mode</name></name> <operator>&amp;</operator> <name>SUBPIXEL_DISTORTION</name></expr>)</condition> <block>{<block_content>

<switch>switch<condition>(<expr><name><name>thread_data</name><operator>-&gt;</operator><name>interpolation_type</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>NEAREST</name></expr>:</case>

<expr_stmt><expr><name>new_x_int</name> <operator>=</operator> <name><name>thread_data</name><operator>-&gt;</operator><name>distortion_coords</name><index>[<expr><name>x</name> <operator>*</operator> <literal type="number">2</literal> <operator>*</operator> <literal type="number">3</literal> <operator>+</operator> <name>y</name> <operator>*</operator> <name><name>thread_data</name><operator>-&gt;</operator><name>width</name></name> <operator>*</operator> <literal type="number">2</literal> <operator>*</operator> <literal type="number">3</literal> <operator>+</operator> <name>rgb_index</name> <operator>*</operator> <literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <literal type="number">0.5f</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>new_y_int</name> <operator>=</operator> <name><name>thread_data</name><operator>-&gt;</operator><name>distortion_coords</name><index>[<expr><name>x</name> <operator>*</operator> <literal type="number">2</literal> <operator>*</operator> <literal type="number">3</literal> <operator>+</operator> <name>y</name> <operator>*</operator> <name><name>thread_data</name><operator>-&gt;</operator><name>width</name></name> <operator>*</operator> <literal type="number">2</literal> <operator>*</operator> <literal type="number">3</literal> <operator>+</operator> <name>rgb_index</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <literal type="number">0.5f</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>new_x_int</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>new_x_int</name> <operator>&gt;=</operator> <name><name>thread_data</name><operator>-&gt;</operator><name>width</name></name> <operator>||</operator> <name>new_y_int</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>new_y_int</name> <operator>&gt;=</operator> <name><name>thread_data</name><operator>-&gt;</operator><name>height</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>thread_data</name><operator>-&gt;</operator><name>data_out</name><index>[<expr><name>x</name> <operator>*</operator> <literal type="number">3</literal> <operator>+</operator> <name>rgb_index</name> <operator>+</operator> <name>y</name> <operator>*</operator> <name><name>thread_data</name><operator>-&gt;</operator><name>linesize_out</name></name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>thread_data</name><operator>-&gt;</operator><name>data_out</name><index>[<expr><name>x</name> <operator>*</operator> <literal type="number">3</literal> <operator>+</operator> <name>rgb_index</name> <operator>+</operator> <name>y</name> <operator>*</operator> <name><name>thread_data</name><operator>-&gt;</operator><name>linesize_out</name></name></expr>]</index></name> <operator>=</operator> <name><name>thread_data</name><operator>-&gt;</operator><name>data_in</name><index>[<expr><name>new_x_int</name> <operator>*</operator> <literal type="number">3</literal> <operator>+</operator> <name>rgb_index</name> <operator>+</operator> <name>new_y_int</name> <operator>*</operator> <name><name>thread_data</name><operator>-&gt;</operator><name>linesize_in</name></name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<case>case <expr><name>LINEAR</name></expr>:</case>

<expr_stmt><expr><name>interpolated</name> <operator>=</operator> <literal type="number">0.0f</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>new_x</name> <operator>=</operator> <name><name>thread_data</name><operator>-&gt;</operator><name>distortion_coords</name><index>[<expr><name>x</name> <operator>*</operator> <literal type="number">2</literal> <operator>*</operator> <literal type="number">3</literal> <operator>+</operator> <name>y</name> <operator>*</operator> <name><name>thread_data</name><operator>-&gt;</operator><name>width</name></name> <operator>*</operator> <literal type="number">2</literal> <operator>*</operator> <literal type="number">3</literal> <operator>+</operator> <name>rgb_index</name> <operator>*</operator> <literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>new_x_int</name> <operator>=</operator> <name>new_x</name></expr>;</expr_stmt>

<expr_stmt><expr><name>new_y</name> <operator>=</operator> <name><name>thread_data</name><operator>-&gt;</operator><name>distortion_coords</name><index>[<expr><name>x</name> <operator>*</operator> <literal type="number">2</literal> <operator>*</operator> <literal type="number">3</literal> <operator>+</operator> <name>y</name> <operator>*</operator> <name><name>thread_data</name><operator>-&gt;</operator><name>width</name></name> <operator>*</operator> <literal type="number">2</literal> <operator>*</operator> <literal type="number">3</literal> <operator>+</operator> <name>rgb_index</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>new_y_int</name> <operator>=</operator> <name>new_y</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>new_x_int</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>new_x_int</name> <operator>+</operator> <literal type="number">1</literal> <operator>&gt;=</operator> <name><name>thread_data</name><operator>-&gt;</operator><name>width</name></name> <operator>||</operator> <name>new_y_int</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>new_y_int</name> <operator>+</operator> <literal type="number">1</literal> <operator>&gt;=</operator> <name><name>thread_data</name><operator>-&gt;</operator><name>height</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>thread_data</name><operator>-&gt;</operator><name>data_out</name><index>[<expr><name>x</name> <operator>*</operator> <literal type="number">3</literal> <operator>+</operator> <name>rgb_index</name> <operator>+</operator> <name>y</name> <operator>*</operator> <name><name>thread_data</name><operator>-&gt;</operator><name>linesize_out</name></name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>thread_data</name><operator>-&gt;</operator><name>data_out</name><index>[<expr><name>x</name> <operator>*</operator> <literal type="number">3</literal> <operator>+</operator> <name>rgb_index</name> <operator>+</operator> <name>y</name> <operator>*</operator> <name><name>thread_data</name><operator>-&gt;</operator><name>linesize_out</name></name></expr>]</index></name> <operator>=</operator>

<name><name>thread_data</name><operator>-&gt;</operator><name>data_in</name><index>[ <expr><name>new_x_int</name> <operator>*</operator> <literal type="number">3</literal> <operator>+</operator> <name>rgb_index</name> <operator>+</operator> <name>new_y_int</name> <operator>*</operator> <name><name>thread_data</name><operator>-&gt;</operator><name>linesize_in</name></name></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>new_x_int</name> <operator>+</operator> <literal type="number">1</literal> <operator>-</operator> <name>new_x</name><operator>)</operator> <operator>*</operator> <operator>(</operator><name>new_y_int</name> <operator>+</operator> <literal type="number">1</literal> <operator>-</operator> <name>new_y</name><operator>)</operator>

<operator>+</operator> <name><name>thread_data</name><operator>-&gt;</operator><name>data_in</name><index>[<expr><operator>(</operator><name>new_x_int</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <literal type="number">3</literal> <operator>+</operator> <name>rgb_index</name> <operator>+</operator> <name>new_y_int</name> <operator>*</operator> <name><name>thread_data</name><operator>-&gt;</operator><name>linesize_in</name></name></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>new_x</name> <operator>-</operator> <name>new_x_int</name><operator>)</operator> <operator>*</operator> <operator>(</operator><name>new_y_int</name> <operator>+</operator> <literal type="number">1</literal> <operator>-</operator> <name>new_y</name><operator>)</operator>

<operator>+</operator> <name><name>thread_data</name><operator>-&gt;</operator><name>data_in</name><index>[ <expr><name>new_x_int</name> <operator>*</operator> <literal type="number">3</literal> <operator>+</operator> <name>rgb_index</name> <operator>+</operator> <operator>(</operator><name>new_y_int</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name><name>thread_data</name><operator>-&gt;</operator><name>linesize_in</name></name></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>new_x_int</name> <operator>+</operator> <literal type="number">1</literal> <operator>-</operator> <name>new_x</name><operator>)</operator> <operator>*</operator> <operator>(</operator><name>new_y</name> <operator>-</operator> <name>new_y_int</name><operator>)</operator>

<operator>+</operator> <name><name>thread_data</name><operator>-&gt;</operator><name>data_in</name><index>[<expr><operator>(</operator><name>new_x_int</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <literal type="number">3</literal> <operator>+</operator> <name>rgb_index</name> <operator>+</operator> <operator>(</operator><name>new_y_int</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name><name>thread_data</name><operator>-&gt;</operator><name>linesize_in</name></name></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>new_x</name> <operator>-</operator> <name>new_x_int</name><operator>)</operator> <operator>*</operator> <operator>(</operator><name>new_y</name> <operator>-</operator> <name>new_y_int</name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<case>case <expr><name>LANCZOS</name></expr>:</case>

<expr_stmt><expr><name>interpolated</name> <operator>=</operator> <literal type="number">0.0f</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>norm</name> <operator>=</operator> <literal type="number">0.0f</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>new_x</name> <operator>=</operator> <name><name>thread_data</name><operator>-&gt;</operator><name>distortion_coords</name><index>[<expr><name>x</name> <operator>*</operator> <literal type="number">2</literal> <operator>*</operator> <literal type="number">3</literal> <operator>+</operator> <name>y</name> <operator>*</operator> <name><name>thread_data</name><operator>-&gt;</operator><name>width</name></name> <operator>*</operator> <literal type="number">2</literal> <operator>*</operator> <literal type="number">3</literal> <operator>+</operator> <name>rgb_index</name> <operator>*</operator> <literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>new_x_int</name> <operator>=</operator> <name>new_x</name></expr>;</expr_stmt>

<expr_stmt><expr><name>new_y</name> <operator>=</operator> <name><name>thread_data</name><operator>-&gt;</operator><name>distortion_coords</name><index>[<expr><name>x</name> <operator>*</operator> <literal type="number">2</literal> <operator>*</operator> <literal type="number">3</literal> <operator>+</operator> <name>y</name> <operator>*</operator> <name><name>thread_data</name><operator>-&gt;</operator><name>width</name></name> <operator>*</operator> <literal type="number">2</literal> <operator>*</operator> <literal type="number">3</literal> <operator>+</operator> <name>rgb_index</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>new_y_int</name> <operator>=</operator> <name>new_y</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control><block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>new_x_int</name> <operator>+</operator> <name>i</name> <operator>-</operator> <literal type="number">2</literal> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>new_x_int</name> <operator>+</operator> <name>i</name> <operator>-</operator> <literal type="number">2</literal> <operator>&gt;=</operator> <name><name>thread_data</name><operator>-&gt;</operator><name>width</name></name> <operator>||</operator> <name>new_y_int</name> <operator>+</operator> <name>j</name> <operator>-</operator> <literal type="number">2</literal> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>new_y_int</name> <operator>+</operator> <name>j</name> <operator>-</operator> <literal type="number">2</literal> <operator>&gt;=</operator> <name><name>thread_data</name><operator>-&gt;</operator><name>height</name></name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name>d</name> <operator>=</operator> <call><name>square</name><argument_list>(<argument><expr><name>new_x</name> <operator>-</operator> <operator>(</operator><name>new_x_int</name> <operator>+</operator> <name>i</name> <operator>-</operator> <literal type="number">2</literal><operator>)</operator></expr></argument>)</argument_list></call> <operator>*</operator> <call><name>square</name><argument_list>(<argument><expr><name>new_y</name> <operator>-</operator> <operator>(</operator><name>new_y_int</name> <operator>+</operator> <name>j</name> <operator>-</operator> <literal type="number">2</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>d</name> <operator>&gt;=</operator> <literal type="number">4.0f</literal></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name>d</name> <operator>=</operator> <name><name>thread_data</name><operator>-&gt;</operator><name>interpolation</name><index>[<expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>d</name> <operator>*</operator> <name>LANCZOS_RESOLUTION</name><operator>)</operator></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>norm</name> <operator>+=</operator> <name>d</name></expr>;</expr_stmt>

<expr_stmt><expr><name>interpolated</name> <operator>+=</operator> <name><name>thread_data</name><operator>-&gt;</operator><name>data_in</name><index>[<expr><operator>(</operator><name>new_x_int</name> <operator>+</operator> <name>i</name> <operator>-</operator> <literal type="number">2</literal><operator>)</operator> <operator>*</operator> <literal type="number">3</literal> <operator>+</operator> <name>rgb_index</name> <operator>+</operator> <operator>(</operator><name>new_y_int</name> <operator>+</operator> <name>j</name> <operator>-</operator> <literal type="number">2</literal><operator>)</operator> <operator>*</operator> <name><name>thread_data</name><operator>-&gt;</operator><name>linesize_in</name></name></expr>]</index></name> <operator>*</operator> <name>d</name></expr>;</expr_stmt>

</block_content>}</block></for></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name>norm</name> <operator>==</operator> <literal type="number">0.0f</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>thread_data</name><operator>-&gt;</operator><name>data_out</name><index>[<expr><name>x</name> <operator>*</operator> <literal type="number">3</literal> <operator>+</operator> <name>rgb_index</name> <operator>+</operator> <name>y</name> <operator>*</operator> <name><name>thread_data</name><operator>-&gt;</operator><name>linesize_out</name></name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>interpolated</name> <operator>/=</operator> <name>norm</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>thread_data</name><operator>-&gt;</operator><name>data_out</name><index>[<expr><name>x</name> <operator>*</operator> <literal type="number">3</literal> <operator>+</operator> <name>rgb_index</name> <operator>+</operator> <name>y</name> <operator>*</operator> <name><name>thread_data</name><operator>-&gt;</operator><name>linesize_out</name></name></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><name>interpolated</name> <operator>&lt;</operator> <literal type="number">0.0f</literal></expr> ?</condition><then> <expr><literal type="number">0.0f</literal></expr> </then><else>: <expr><ternary><condition><expr><name>interpolated</name> <operator>&gt;</operator> <literal type="number">255.0f</literal></expr> ?</condition><then> <expr><literal type="number">255.0f</literal></expr> </then><else>: <expr><name>interpolated</name></expr></else></ternary></expr></else></ternary></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>thread_data</name><operator>-&gt;</operator><name>mode</name></name> <operator>&amp;</operator> <name>GEOMETRY_DISTORTION</name></expr>)</condition> <block>{<block_content>

<switch>switch<condition>(<expr><name><name>thread_data</name><operator>-&gt;</operator><name>interpolation_type</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>NEAREST</name></expr>:</case>

<expr_stmt><expr><name>new_x_int</name> <operator>=</operator> <name><name>thread_data</name><operator>-&gt;</operator><name>distortion_coords</name><index>[<expr><name>x</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <name>y</name> <operator>*</operator> <name><name>thread_data</name><operator>-&gt;</operator><name>width</name></name> <operator>*</operator> <literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <literal type="number">0.5f</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>new_y_int</name> <operator>=</operator> <name><name>thread_data</name><operator>-&gt;</operator><name>distortion_coords</name><index>[<expr><name>x</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <name>y</name> <operator>*</operator> <name><name>thread_data</name><operator>-&gt;</operator><name>width</name></name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <literal type="number">0.5f</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>new_x_int</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>new_x_int</name> <operator>&gt;=</operator> <name><name>thread_data</name><operator>-&gt;</operator><name>width</name></name> <operator>||</operator> <name>new_y_int</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>new_y_int</name> <operator>&gt;=</operator> <name><name>thread_data</name><operator>-&gt;</operator><name>height</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>thread_data</name><operator>-&gt;</operator><name>data_out</name><index>[<expr><name>x</name> <operator>*</operator> <literal type="number">3</literal> <operator>+</operator> <name>rgb_index</name> <operator>+</operator> <name>y</name> <operator>*</operator> <name><name>thread_data</name><operator>-&gt;</operator><name>linesize_out</name></name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>thread_data</name><operator>-&gt;</operator><name>data_out</name><index>[<expr><name>x</name> <operator>*</operator> <literal type="number">3</literal> <operator>+</operator> <name>rgb_index</name> <operator>+</operator> <name>y</name> <operator>*</operator> <name><name>thread_data</name><operator>-&gt;</operator><name>linesize_out</name></name></expr>]</index></name> <operator>=</operator> <name><name>thread_data</name><operator>-&gt;</operator><name>data_in</name><index>[<expr><name>new_x_int</name> <operator>*</operator> <literal type="number">3</literal> <operator>+</operator> <name>rgb_index</name> <operator>+</operator> <name>new_y_int</name> <operator>*</operator> <name><name>thread_data</name><operator>-&gt;</operator><name>linesize_in</name></name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<case>case <expr><name>LINEAR</name></expr>:</case>

<expr_stmt><expr><name>interpolated</name> <operator>=</operator> <literal type="number">0.0f</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>new_x</name> <operator>=</operator> <name><name>thread_data</name><operator>-&gt;</operator><name>distortion_coords</name><index>[<expr><name>x</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <name>y</name> <operator>*</operator> <name><name>thread_data</name><operator>-&gt;</operator><name>width</name></name> <operator>*</operator> <literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>new_x_int</name> <operator>=</operator> <name>new_x</name></expr>;</expr_stmt>

<expr_stmt><expr><name>new_y</name> <operator>=</operator> <name><name>thread_data</name><operator>-&gt;</operator><name>distortion_coords</name><index>[<expr><name>x</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <name>y</name> <operator>*</operator> <name><name>thread_data</name><operator>-&gt;</operator><name>width</name></name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>new_y_int</name> <operator>=</operator> <name>new_y</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>new_x_int</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>new_x_int</name> <operator>+</operator> <literal type="number">1</literal> <operator>&gt;=</operator> <name><name>thread_data</name><operator>-&gt;</operator><name>width</name></name> <operator>||</operator> <name>new_y_int</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>new_y_int</name> <operator>+</operator> <literal type="number">1</literal> <operator>&gt;=</operator> <name><name>thread_data</name><operator>-&gt;</operator><name>height</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>thread_data</name><operator>-&gt;</operator><name>data_out</name><index>[<expr><name>x</name> <operator>*</operator> <literal type="number">3</literal> <operator>+</operator> <name>rgb_index</name> <operator>+</operator> <name>y</name> <operator>*</operator> <name><name>thread_data</name><operator>-&gt;</operator><name>linesize_out</name></name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>thread_data</name><operator>-&gt;</operator><name>data_out</name><index>[<expr><name>x</name> <operator>*</operator> <literal type="number">3</literal> <operator>+</operator> <name>rgb_index</name> <operator>+</operator> <name>y</name> <operator>*</operator> <name><name>thread_data</name><operator>-&gt;</operator><name>linesize_out</name></name></expr>]</index></name> <operator>=</operator>

<name><name>thread_data</name><operator>-&gt;</operator><name>data_in</name><index>[ <expr><name>new_x_int</name> <operator>*</operator> <literal type="number">3</literal> <operator>+</operator> <name>rgb_index</name> <operator>+</operator> <name>new_y_int</name> <operator>*</operator> <name><name>thread_data</name><operator>-&gt;</operator><name>linesize_in</name></name></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>new_x_int</name> <operator>+</operator> <literal type="number">1</literal> <operator>-</operator> <name>new_x</name><operator>)</operator> <operator>*</operator> <operator>(</operator><name>new_y_int</name> <operator>+</operator> <literal type="number">1</literal> <operator>-</operator> <name>new_y</name><operator>)</operator>

<operator>+</operator> <name><name>thread_data</name><operator>-&gt;</operator><name>data_in</name><index>[<expr><operator>(</operator><name>new_x_int</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <literal type="number">3</literal> <operator>+</operator> <name>rgb_index</name> <operator>+</operator> <name>new_y_int</name> <operator>*</operator> <name><name>thread_data</name><operator>-&gt;</operator><name>linesize_in</name></name></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>new_x</name> <operator>-</operator> <name>new_x_int</name><operator>)</operator> <operator>*</operator> <operator>(</operator><name>new_y_int</name> <operator>+</operator> <literal type="number">1</literal> <operator>-</operator> <name>new_y</name><operator>)</operator>

<operator>+</operator> <name><name>thread_data</name><operator>-&gt;</operator><name>data_in</name><index>[ <expr><name>new_x_int</name> <operator>*</operator> <literal type="number">3</literal> <operator>+</operator> <name>rgb_index</name> <operator>+</operator> <operator>(</operator><name>new_y_int</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name><name>thread_data</name><operator>-&gt;</operator><name>linesize_in</name></name></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>new_x_int</name> <operator>+</operator> <literal type="number">1</literal> <operator>-</operator> <name>new_x</name><operator>)</operator> <operator>*</operator> <operator>(</operator><name>new_y</name> <operator>-</operator> <name>new_y_int</name><operator>)</operator>

<operator>+</operator> <name><name>thread_data</name><operator>-&gt;</operator><name>data_in</name><index>[<expr><operator>(</operator><name>new_x_int</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <literal type="number">3</literal> <operator>+</operator> <name>rgb_index</name> <operator>+</operator> <operator>(</operator><name>new_y_int</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name><name>thread_data</name><operator>-&gt;</operator><name>linesize_in</name></name></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>new_x</name> <operator>-</operator> <name>new_x_int</name><operator>)</operator> <operator>*</operator> <operator>(</operator><name>new_y</name> <operator>-</operator> <name>new_y_int</name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<case>case <expr><name>LANCZOS</name></expr>:</case>

<expr_stmt><expr><name>interpolated</name> <operator>=</operator> <literal type="number">0.0f</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>norm</name> <operator>=</operator> <literal type="number">0.0f</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>new_x</name> <operator>=</operator> <name><name>thread_data</name><operator>-&gt;</operator><name>distortion_coords</name><index>[<expr><name>x</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <name>y</name> <operator>*</operator> <name><name>thread_data</name><operator>-&gt;</operator><name>width</name></name> <operator>*</operator> <literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>new_x_int</name> <operator>=</operator> <name>new_x</name></expr>;</expr_stmt>

<expr_stmt><expr><name>new_y</name> <operator>=</operator> <name><name>thread_data</name><operator>-&gt;</operator><name>distortion_coords</name><index>[<expr><name>x</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <name>y</name> <operator>*</operator> <name><name>thread_data</name><operator>-&gt;</operator><name>width</name></name> <operator>*</operator> <literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>new_y_int</name> <operator>=</operator> <name>new_y</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control><block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>new_x_int</name> <operator>+</operator> <name>i</name> <operator>-</operator> <literal type="number">2</literal> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>new_x_int</name> <operator>+</operator> <name>i</name> <operator>-</operator> <literal type="number">2</literal> <operator>&gt;=</operator> <name><name>thread_data</name><operator>-&gt;</operator><name>width</name></name> <operator>||</operator> <name>new_y_int</name> <operator>+</operator> <name>j</name> <operator>-</operator> <literal type="number">2</literal> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>new_y_int</name> <operator>+</operator> <name>j</name> <operator>-</operator> <literal type="number">2</literal> <operator>&gt;=</operator> <name><name>thread_data</name><operator>-&gt;</operator><name>height</name></name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name>d</name> <operator>=</operator> <call><name>square</name><argument_list>(<argument><expr><name>new_x</name> <operator>-</operator> <operator>(</operator><name>new_x_int</name> <operator>+</operator> <name>i</name> <operator>-</operator> <literal type="number">2</literal><operator>)</operator></expr></argument>)</argument_list></call> <operator>*</operator> <call><name>square</name><argument_list>(<argument><expr><name>new_y</name> <operator>-</operator> <operator>(</operator><name>new_y_int</name> <operator>+</operator> <name>j</name> <operator>-</operator> <literal type="number">2</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>d</name> <operator>&gt;=</operator> <literal type="number">4.0f</literal></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name>d</name> <operator>=</operator> <name><name>thread_data</name><operator>-&gt;</operator><name>interpolation</name><index>[<expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>d</name> <operator>*</operator> <name>LANCZOS_RESOLUTION</name><operator>)</operator></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>norm</name> <operator>+=</operator> <name>d</name></expr>;</expr_stmt>

<expr_stmt><expr><name>interpolated</name> <operator>+=</operator> <name><name>thread_data</name><operator>-&gt;</operator><name>data_in</name><index>[<expr><operator>(</operator><name>new_x_int</name> <operator>+</operator> <name>i</name> <operator>-</operator> <literal type="number">2</literal><operator>)</operator> <operator>*</operator> <literal type="number">3</literal> <operator>+</operator> <name>rgb_index</name> <operator>+</operator> <operator>(</operator><name>new_y_int</name> <operator>+</operator> <name>j</name> <operator>-</operator> <literal type="number">2</literal><operator>)</operator> <operator>*</operator> <name><name>thread_data</name><operator>-&gt;</operator><name>linesize_in</name></name></expr>]</index></name> <operator>*</operator> <name>d</name></expr>;</expr_stmt>

</block_content>}</block></for></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name>norm</name> <operator>==</operator> <literal type="number">0.0f</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>thread_data</name><operator>-&gt;</operator><name>data_out</name><index>[<expr><name>x</name> <operator>*</operator> <literal type="number">3</literal> <operator>+</operator> <name>rgb_index</name> <operator>+</operator> <name>y</name> <operator>*</operator> <name><name>thread_data</name><operator>-&gt;</operator><name>linesize_out</name></name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>interpolated</name> <operator>/=</operator> <name>norm</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>thread_data</name><operator>-&gt;</operator><name>data_out</name><index>[<expr><name>x</name> <operator>*</operator> <literal type="number">3</literal> <operator>+</operator> <name>rgb_index</name> <operator>+</operator> <name>y</name> <operator>*</operator> <name><name>thread_data</name><operator>-&gt;</operator><name>linesize_out</name></name></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><name>interpolated</name> <operator>&lt;</operator> <literal type="number">0.0f</literal></expr> ?</condition><then> <expr><literal type="number">0.0f</literal></expr> </then><else>: <expr><ternary><condition><expr><name>interpolated</name> <operator>&gt;</operator> <literal type="number">255.0f</literal></expr> ?</condition><then> <expr><literal type="number">255.0f</literal></expr> </then><else>: <expr><name>interpolated</name></expr></else></ternary></expr></else></ternary></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>thread_data</name><operator>-&gt;</operator><name>data_out</name><index>[<expr><name>x</name> <operator>*</operator> <literal type="number">3</literal> <operator>+</operator> <name>rgb_index</name> <operator>+</operator> <name>y</name> <operator>*</operator> <name><name>thread_data</name><operator>-&gt;</operator><name>linesize_out</name></name></expr>]</index></name> <operator>=</operator> <name><name>thread_data</name><operator>-&gt;</operator><name>data_in</name><index>[<expr><name>x</name> <operator>*</operator> <literal type="number">3</literal> <operator>+</operator> <name>rgb_index</name> <operator>+</operator> <name>y</name> <operator>*</operator> <name><name>thread_data</name><operator>-&gt;</operator><name>linesize_in</name></name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for></block_content></block></for></block_content></block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>filter_frame</name><parameter_list>(<parameter><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>inlink</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>in</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>inlink</name><operator>-&gt;</operator><name>dst</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>LensfunContext</name> <modifier>*</modifier></type><name>lensfun</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>outlink</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>outputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>out</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VignettingThreadData</name></type> <name>vignetting_thread_data</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DistortionCorrectionThreadData</name></type> <name>distortion_correction_thread_data</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>lensfun</name><operator>-&gt;</operator><name>mode</name></name> <operator>&amp;</operator> <name>VIGNETTING</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_frame_make_writable</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vignetting_thread_data</name> <operator>=</operator> <operator>(</operator><name>VignettingThreadData</name><operator>)</operator> <block>{

<expr><operator>.</operator><name>width</name> <operator>=</operator> <name><name>inlink</name><operator>-&gt;</operator><name>w</name></name></expr>,

<expr><operator>.</operator><name>height</name> <operator>=</operator> <name><name>inlink</name><operator>-&gt;</operator><name>h</name></name></expr>,

<expr><operator>.</operator><name>data_in</name> <operator>=</operator> <name><name>in</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>,

<expr><operator>.</operator><name>linesize_in</name> <operator>=</operator> <name><name>in</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>,

<expr><operator>.</operator><name>pixel_composition</name> <operator>=</operator> <call><name>LF_CR_3</name><argument_list>(<argument><expr><name>RED</name></expr></argument>, <argument><expr><name>GREEN</name></expr></argument>, <argument><expr><name>BLUE</name></expr></argument>)</argument_list></call></expr>,

<expr><operator>.</operator><name>modifier</name> <operator>=</operator> <name><name>lensfun</name><operator>-&gt;</operator><name>modifier</name></name></expr>

}</block></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>ctx</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>ctx</name></expr></argument>,

<argument><expr><name>vignetting_filter_slice</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>vignetting_thread_data</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>,

<argument><expr><call><name>FFMIN</name><argument_list>(<argument><expr><name><name>outlink</name><operator>-&gt;</operator><name>h</name></name></expr></argument>, <argument><expr><call><name>ff_filter_get_nb_threads</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>lensfun</name><operator>-&gt;</operator><name>mode</name></name> <operator>&amp;</operator> <operator>(</operator><name>GEOMETRY_DISTORTION</name> <operator>|</operator> <name>SUBPIXEL_DISTORTION</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>out</name> <operator>=</operator> <call><name>ff_get_video_buffer</name><argument_list>(<argument><expr><name>outlink</name></expr></argument>, <argument><expr><name><name>outlink</name><operator>-&gt;</operator><name>w</name></name></expr></argument>, <argument><expr><name><name>outlink</name><operator>-&gt;</operator><name>h</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>out</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_frame_copy_props</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>distortion_correction_thread_data</name> <operator>=</operator> <operator>(</operator><name>DistortionCorrectionThreadData</name><operator>)</operator> <block>{

<expr><operator>.</operator><name>width</name> <operator>=</operator> <name><name>inlink</name><operator>-&gt;</operator><name>w</name></name></expr>,

<expr><operator>.</operator><name>height</name> <operator>=</operator> <name><name>inlink</name><operator>-&gt;</operator><name>h</name></name></expr>,

<expr><operator>.</operator><name>distortion_coords</name> <operator>=</operator> <name><name>lensfun</name><operator>-&gt;</operator><name>distortion_coords</name></name></expr>,

<expr><operator>.</operator><name>data_in</name> <operator>=</operator> <name><name>in</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>,

<expr><operator>.</operator><name>data_out</name> <operator>=</operator> <name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>,

<expr><operator>.</operator><name>linesize_in</name> <operator>=</operator> <name><name>in</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>,

<expr><operator>.</operator><name>linesize_out</name> <operator>=</operator> <name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>,

<expr><operator>.</operator><name>interpolation</name> <operator>=</operator> <name><name>lensfun</name><operator>-&gt;</operator><name>interpolation</name></name></expr>,

<expr><operator>.</operator><name>mode</name> <operator>=</operator> <name><name>lensfun</name><operator>-&gt;</operator><name>mode</name></name></expr>,

<expr><operator>.</operator><name>interpolation_type</name> <operator>=</operator> <name><name>lensfun</name><operator>-&gt;</operator><name>interpolation_type</name></name></expr>

}</block></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>ctx</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>ctx</name></expr></argument>,

<argument><expr><name>distortion_correction_filter_slice</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>distortion_correction_thread_data</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>,

<argument><expr><call><name>FFMIN</name><argument_list>(<argument><expr><name><name>outlink</name><operator>-&gt;</operator><name>h</name></name></expr></argument>, <argument><expr><call><name>ff_filter_get_nb_threads</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>ff_filter_frame</name><argument_list>(<argument><expr><name>outlink</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if> <else>else <block>{<block_content>

<return>return <expr><call><name>ff_filter_frame</name><argument_list>(<argument><expr><name>outlink</name></expr></argument>, <argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>void</name></type> <name>uninit</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>LensfunContext</name> <modifier>*</modifier></type><name>lensfun</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>lensfun</name><operator>-&gt;</operator><name>camera</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>lf_camera_destroy</name><argument_list>(<argument><expr><name><name>lensfun</name><operator>-&gt;</operator><name>camera</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>lensfun</name><operator>-&gt;</operator><name>lens</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>lf_lens_destroy</name><argument_list>(<argument><expr><name><name>lensfun</name><operator>-&gt;</operator><name>lens</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>lensfun</name><operator>-&gt;</operator><name>modifier</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>lf_modifier_destroy</name><argument_list>(<argument><expr><name><name>lensfun</name><operator>-&gt;</operator><name>modifier</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>lensfun</name><operator>-&gt;</operator><name>distortion_coords</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>lensfun</name><operator>-&gt;</operator><name>interpolation</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVFilterPad</name></type> <name><name>lensfun_inputs</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"default"</literal></expr>,

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,

<expr><operator>.</operator><name>config_props</name> <operator>=</operator> <name>config_props</name></expr>,

<expr><operator>.</operator><name>filter_frame</name> <operator>=</operator> <name>filter_frame</name></expr>,

}</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVFilterPad</name></type> <name><name>lensfun_outputs</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"default"</literal></expr>,

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,

}</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFilter</name></type> <name>ff_vf_lensfun</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"lensfun"</literal></expr>,

<expr><operator>.</operator><name>description</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"Apply correction to an image based on info derived from the lensfun database."</literal></expr></argument>)</argument_list></call></expr>,

<expr><operator>.</operator><name>priv_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>LensfunContext</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>init</name></expr>,

<expr><operator>.</operator><name>uninit</name> <operator>=</operator> <name>uninit</name></expr>,

<expr><operator>.</operator><name>query_formats</name> <operator>=</operator> <name>query_formats</name></expr>,

<expr><operator>.</operator><name>inputs</name> <operator>=</operator> <name>lensfun_inputs</name></expr>,

<expr><operator>.</operator><name>outputs</name> <operator>=</operator> <name>lensfun_outputs</name></expr>,

<expr><operator>.</operator><name>priv_class</name> <operator>=</operator> <operator>&amp;</operator><name>lensfun_class</name></expr>,

<expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>AVFILTER_FLAG_SUPPORT_TIMELINE_GENERIC</name> <operator>|</operator> <name>AVFILTER_FLAG_SLICE_THREADS</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

</unit>
