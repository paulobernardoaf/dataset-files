<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavfilter\vf_bm3d.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;float.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avassert.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/imgutils.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/opt.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/pixdesc.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavcodec/avfft.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avfilter.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"filters.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"formats.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"framesync.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"video.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_NB_THREADS</name></cpp:macro> <cpp:value>32</cpp:value></cpp:define>

<enum>enum <name>FilterModes</name> <block>{

<decl><name>BASIC</name></decl>,

<decl><name>FINAL</name></decl>,

<decl><name>NB_MODES</name></decl>,

}</block>;</enum>

<typedef>typedef <type><struct>struct <name>ThreadData</name> <block>{

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>src_linesize</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>ref</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ref_linesize</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>plane</name></decl>;</decl_stmt>

}</block></struct></type> <name>ThreadData</name>;</typedef>

<typedef>typedef <type><struct>struct <name>PosCode</name> <block>{

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <name>y</name>;</decl_stmt>

}</block></struct></type> <name>PosCode</name>;</typedef>

<typedef>typedef <type><struct>struct <name>PosPairCode</name> <block>{

<decl_stmt><decl><type><name>double</name></type> <name>score</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <name>y</name>;</decl_stmt>

}</block></struct></type> <name>PosPairCode</name>;</typedef>

<typedef>typedef <type><struct>struct <name>SliceContext</name> <block>{

<decl_stmt><decl><type><name>DCTContext</name> <modifier>*</modifier></type><name>gdctf</name></decl>, <modifier>*</modifier><name>gdcti</name>;</decl_stmt>

<decl_stmt><decl><type><name>DCTContext</name> <modifier>*</modifier></type><name>dctf</name></decl>, <modifier>*</modifier><name>dcti</name>;</decl_stmt>

<decl_stmt><decl><type><name>FFTSample</name> <modifier>*</modifier></type><name>bufferh</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>FFTSample</name> <modifier>*</modifier></type><name>bufferv</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>FFTSample</name> <modifier>*</modifier></type><name>bufferz</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>FFTSample</name> <modifier>*</modifier></type><name>buffer</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>FFTSample</name> <modifier>*</modifier></type><name>rbufferh</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>FFTSample</name> <modifier>*</modifier></type><name>rbufferv</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>FFTSample</name> <modifier>*</modifier></type><name>rbufferz</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>FFTSample</name> <modifier>*</modifier></type><name>rbuffer</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>num</name></decl>, <modifier>*</modifier><name>den</name>;</decl_stmt>

<decl_stmt><decl><type><name>PosPairCode</name></type> <name><name>match_blocks</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>nb_match_blocks</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PosCode</name> <modifier>*</modifier></type><name>search_positions</name></decl>;</decl_stmt>

}</block></struct></type> <name>SliceContext</name>;</typedef>

<typedef>typedef <type><struct>struct <name>BM3DContext</name> <block>{

<decl_stmt><decl><type><specifier>const</specifier> <name>AVClass</name> <modifier>*</modifier></type><name>class</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>sigma</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>block_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>block_step</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>group_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>bm_range</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>bm_step</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>th_mse</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>hard_threshold</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>mode</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ref</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>planes</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>depth</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>max</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>nb_planes</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>planewidth</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>planeheight</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>group_bits</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>pgroup_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SliceContext</name></type> <name><name>slices</name><index>[<expr><name>MAX_NB_THREADS</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>FFFrameSync</name></type> <name>fs</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>nb_threads</name></decl>;</decl_stmt>

<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>get_block_row</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>srcp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_linesize</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>block_size</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>double</name></type> (<modifier>*</modifier><name>do_block_ssd</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>BM3DContext</name></name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>PosCode</name> <modifier>*</modifier></type><name>pos</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_stride</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>r_y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>r_x</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>do_output</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>BM3DContext</name></name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_linesize</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>plane</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nb_jobs</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>block_filtering</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>BM3DContext</name></name> <modifier>*</modifier></type><name>s</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_linesize</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>ref</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ref_linesize</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>plane</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>jobnr</name></decl></parameter>)</parameter_list>;</function_decl>

}</block></struct></type> <name>BM3DContext</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OFFSET</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>offsetof(BM3DContext, x)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLAGS</name></cpp:macro> <cpp:value>AV_OPT_FLAG_FILTERING_PARAM|AV_OPT_FLAG_VIDEO_PARAM</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVOption</name></type> <name><name>bm3d_options</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><literal type="string">"sigma"</literal></expr>, <expr><literal type="string">"set denoising strength"</literal></expr>,

<expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>sigma</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_FLOAT</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name><operator>=</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">99999.9</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"block"</literal></expr>, <expr><literal type="string">"set log2(size) of local patch"</literal></expr>,

<expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>block_size</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">4</literal></expr>}</block></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"bstep"</literal></expr>, <expr><literal type="string">"set sliding step for processing blocks"</literal></expr>,

<expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>block_step</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">4</literal></expr>}</block></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">64</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"group"</literal></expr>, <expr><literal type="string">"set maximal number of similar blocks"</literal></expr>,

<expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>group_size</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">256</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"range"</literal></expr>, <expr><literal type="string">"set block matching range"</literal></expr>,

<expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>bm_range</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">9</literal></expr>}</block></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>INT32_MAX</name></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"mstep"</literal></expr>, <expr><literal type="string">"set step for block matching"</literal></expr>,

<expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>bm_step</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">64</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"thmse"</literal></expr>, <expr><literal type="string">"set threshold of mean square error for block matching"</literal></expr>,

<expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>th_mse</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_FLOAT</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name><operator>=</operator><literal type="number">0</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>INT32_MAX</name></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"hdthr"</literal></expr>, <expr><literal type="string">"set hard threshold for 3D transfer domain"</literal></expr>,

<expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>hard_threshold</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_FLOAT</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name><operator>=</operator><literal type="number">2.7</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>INT32_MAX</name></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"estim"</literal></expr>, <expr><literal type="string">"set filtering estimation mode"</literal></expr>,

<expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>BASIC</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NB_MODES</name><operator>-</operator><literal type="number">1</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"mode"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"basic"</literal></expr>, <expr><literal type="string">"basic estimate"</literal></expr>,

<expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>BASIC</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"mode"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"final"</literal></expr>, <expr><literal type="string">"final estimate"</literal></expr>,

<expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>FINAL</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"mode"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"ref"</literal></expr>, <expr><literal type="string">"have reference stream"</literal></expr>,

<expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>ref</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_BOOL</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">0</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"planes"</literal></expr>, <expr><literal type="string">"set planes to filter"</literal></expr>,

<expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>planes</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">7</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>AVFILTER_DEFINE_CLASS</name><argument_list>(<argument><expr><name>bm3d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function><type><specifier>static</specifier> <name>int</name></type> <name>query_formats</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>enum</name> <name>AVPixelFormat</name></name></type> <name><name>pix_fmts</name><index>[]</index></name> <init>= <expr><block>{

<expr><name>AV_PIX_FMT_GRAY8</name></expr>, <expr><name>AV_PIX_FMT_GRAY9</name></expr>, <expr><name>AV_PIX_FMT_GRAY10</name></expr>,

<expr><name>AV_PIX_FMT_GRAY12</name></expr>, <expr><name>AV_PIX_FMT_GRAY14</name></expr>, <expr><name>AV_PIX_FMT_GRAY16</name></expr>,

<expr><name>AV_PIX_FMT_YUV410P</name></expr>, <expr><name>AV_PIX_FMT_YUV411P</name></expr>,

<expr><name>AV_PIX_FMT_YUV420P</name></expr>, <expr><name>AV_PIX_FMT_YUV422P</name></expr>,

<expr><name>AV_PIX_FMT_YUV440P</name></expr>, <expr><name>AV_PIX_FMT_YUV444P</name></expr>,

<expr><name>AV_PIX_FMT_YUVJ420P</name></expr>, <expr><name>AV_PIX_FMT_YUVJ422P</name></expr>,

<expr><name>AV_PIX_FMT_YUVJ440P</name></expr>, <expr><name>AV_PIX_FMT_YUVJ444P</name></expr>,

<expr><name>AV_PIX_FMT_YUVJ411P</name></expr>,

<expr><name>AV_PIX_FMT_YUV420P9</name></expr>, <expr><name>AV_PIX_FMT_YUV422P9</name></expr>, <expr><name>AV_PIX_FMT_YUV444P9</name></expr>,

<expr><name>AV_PIX_FMT_YUV420P10</name></expr>, <expr><name>AV_PIX_FMT_YUV422P10</name></expr>, <expr><name>AV_PIX_FMT_YUV444P10</name></expr>,

<expr><name>AV_PIX_FMT_YUV440P10</name></expr>,

<expr><name>AV_PIX_FMT_YUV444P12</name></expr>, <expr><name>AV_PIX_FMT_YUV422P12</name></expr>, <expr><name>AV_PIX_FMT_YUV420P12</name></expr>,

<expr><name>AV_PIX_FMT_YUV440P12</name></expr>,

<expr><name>AV_PIX_FMT_YUV444P14</name></expr>, <expr><name>AV_PIX_FMT_YUV422P14</name></expr>, <expr><name>AV_PIX_FMT_YUV420P14</name></expr>,

<expr><name>AV_PIX_FMT_YUV420P16</name></expr>, <expr><name>AV_PIX_FMT_YUV422P16</name></expr>, <expr><name>AV_PIX_FMT_YUV444P16</name></expr>,

<expr><name>AV_PIX_FMT_GBRP</name></expr>, <expr><name>AV_PIX_FMT_GBRP9</name></expr>, <expr><name>AV_PIX_FMT_GBRP10</name></expr>,

<expr><name>AV_PIX_FMT_GBRP12</name></expr>, <expr><name>AV_PIX_FMT_GBRP14</name></expr>, <expr><name>AV_PIX_FMT_GBRP16</name></expr>,

<expr><name>AV_PIX_FMT_YUVA420P</name></expr>, <expr><name>AV_PIX_FMT_YUVA422P</name></expr>, <expr><name>AV_PIX_FMT_YUVA444P</name></expr>,

<expr><name>AV_PIX_FMT_YUVA444P9</name></expr>, <expr><name>AV_PIX_FMT_YUVA444P10</name></expr>, <expr><name>AV_PIX_FMT_YUVA444P12</name></expr>, <expr><name>AV_PIX_FMT_YUVA444P16</name></expr>,

<expr><name>AV_PIX_FMT_YUVA422P9</name></expr>, <expr><name>AV_PIX_FMT_YUVA422P10</name></expr>, <expr><name>AV_PIX_FMT_YUVA422P12</name></expr>, <expr><name>AV_PIX_FMT_YUVA422P16</name></expr>,

<expr><name>AV_PIX_FMT_YUVA420P9</name></expr>, <expr><name>AV_PIX_FMT_YUVA420P10</name></expr>, <expr><name>AV_PIX_FMT_YUVA420P16</name></expr>,

<expr><name>AV_PIX_FMT_GBRAP</name></expr>, <expr><name>AV_PIX_FMT_GBRAP10</name></expr>, <expr><name>AV_PIX_FMT_GBRAP12</name></expr>, <expr><name>AV_PIX_FMT_GBRAP16</name></expr>,

<expr><name>AV_PIX_FMT_NONE</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFilterFormats</name> <modifier>*</modifier></type><name>fmts_list</name> <init>= <expr><call><name>ff_make_format_list</name><argument_list>(<argument><expr><name>pix_fmts</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>fmts_list</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>ff_set_common_formats</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>fmts_list</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>do_search_boundary</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>pos</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>plane_boundary</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>search_range</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>search_step</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>search_boundary</name></decl>;</decl_stmt>

<expr_stmt><expr><name>search_range</name> <operator>=</operator> <name>search_range</name> <operator>/</operator> <name>search_step</name> <operator>*</operator> <name>search_step</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>pos</name> <operator>==</operator> <name>plane_boundary</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>search_boundary</name> <operator>=</operator> <name>plane_boundary</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>pos</name> <operator>&gt;</operator> <name>plane_boundary</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>search_boundary</name> <operator>=</operator> <name>pos</name> <operator>-</operator> <name>search_range</name></expr>;</expr_stmt>

<while>while <condition>(<expr><name>search_boundary</name> <operator>&lt;</operator> <name>plane_boundary</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>search_boundary</name> <operator>+=</operator> <name>search_step</name></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>search_boundary</name> <operator>=</operator> <name>pos</name> <operator>+</operator> <name>search_range</name></expr>;</expr_stmt>

<while>while <condition>(<expr><name>search_boundary</name> <operator>&gt;</operator> <name>plane_boundary</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>search_boundary</name> <operator>-=</operator> <name>search_step</name></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></else></if_stmt>

<return>return <expr><name>search_boundary</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>search_boundary</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>plane_boundary</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>search_range</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>search_step</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>vertical</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>do_search_boundary</name><argument_list>(<argument><expr><ternary><condition><expr><name>vertical</name></expr> ?</condition><then> <expr><name>y</name></expr> </then><else>: <expr><name>x</name></expr></else></ternary></expr></argument>, <argument><expr><name>plane_boundary</name></expr></argument>, <argument><expr><name>search_range</name></expr></argument>, <argument><expr><name>search_step</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>cmp_scores</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>PosPairCode</name></name> <modifier>*</modifier></type><name>pair1</name> <init>= <expr><name>a</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>PosPairCode</name></name> <modifier>*</modifier></type><name>pair2</name> <init>= <expr><name>b</name></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>FFDIFFSIGN</name><argument_list>(<argument><expr><name><name>pair1</name><operator>-&gt;</operator><name>score</name></name></expr></argument>, <argument><expr><name><name>pair2</name><operator>-&gt;</operator><name>score</name></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>double</name></type> <name>do_block_ssd</name><parameter_list>(<parameter><decl><type><name>BM3DContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>PosCode</name> <modifier>*</modifier></type><name>pos</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>r_y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>r_x</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>srcp</name> <init>= <expr><name>src</name> <operator>+</operator> <name><name>pos</name><operator>-&gt;</operator><name>y</name></name> <operator>*</operator> <name>src_stride</name> <operator>+</operator> <name><name>pos</name><operator>-&gt;</operator><name>x</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>refp</name> <init>= <expr><name>src</name> <operator>+</operator> <name>r_y</name> <operator>*</operator> <name>src_stride</name> <operator>+</operator> <name>r_x</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>block_size</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>block_size</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>dist</name> <init>= <expr><literal type="number">0.</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>block_size</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>block_size</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>double</name></type> <name>temp</name> <init>= <expr><name><name>refp</name><index>[<expr><name>x</name></expr>]</index></name> <operator>-</operator> <name><name>srcp</name><index>[<expr><name>x</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>dist</name> <operator>+=</operator> <name>temp</name> <operator>*</operator> <name>temp</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>srcp</name> <operator>+=</operator> <name>src_stride</name></expr>;</expr_stmt>

<expr_stmt><expr><name>refp</name> <operator>+=</operator> <name>src_stride</name></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><name>dist</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>double</name></type> <name>do_block_ssd16</name><parameter_list>(<parameter><decl><type><name>BM3DContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>PosCode</name> <modifier>*</modifier></type><name>pos</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>r_y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>r_x</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>srcp</name> <init>= <expr><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name><name>pos</name><operator>-&gt;</operator><name>y</name></name> <operator>*</operator> <name>src_stride</name> <operator>/</operator> <literal type="number">2</literal> <operator>+</operator> <name><name>pos</name><operator>-&gt;</operator><name>x</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>refp</name> <init>= <expr><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>r_y</name> <operator>*</operator> <name>src_stride</name> <operator>/</operator> <literal type="number">2</literal> <operator>+</operator> <name>r_x</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>block_size</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>block_size</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>dist</name> <init>= <expr><literal type="number">0.</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>block_size</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>block_size</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>double</name></type> <name>temp</name> <init>= <expr><name><name>refp</name><index>[<expr><name>x</name></expr>]</index></name> <operator>-</operator> <name><name>srcp</name><index>[<expr><name>x</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>dist</name> <operator>+=</operator> <name>temp</name> <operator>*</operator> <name>temp</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>srcp</name> <operator>+=</operator> <name>src_stride</name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>refp</name> <operator>+=</operator> <name>src_stride</name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><name>dist</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>do_block_matching_multi</name><parameter_list>(<parameter><decl><type><name>BM3DContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_range</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>PosCode</name> <modifier>*</modifier></type><name>search_pos</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>search_size</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>th_mse</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>r_y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>r_x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>plane</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>jobnr</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>SliceContext</name> <modifier>*</modifier></type><name>sc</name> <init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>slices</name><index>[<expr><name>jobnr</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>MSE2SSE</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>group_size</name></name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>block_size</name></name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>block_size</name></name> <operator>*</operator> <name>src_range</name> <operator>*</operator> <name>src_range</name> <operator>/</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>max</name></name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>max</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>distMul</name> <init>= <expr><literal type="number">1.</literal> <operator>/</operator> <name>MSE2SSE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>th_sse</name> <init>= <expr><name>th_mse</name> <operator>*</operator> <name>MSE2SSE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>index</name> <init>= <expr><name><name>sc</name><operator>-&gt;</operator><name>nb_match_blocks</name></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>search_size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>PosCode</name></type> <name>pos</name> <init>= <expr><name><name>search_pos</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>dist</name></decl>;</decl_stmt>

<expr_stmt><expr><name>dist</name> <operator>=</operator> <call><name><name>s</name><operator>-&gt;</operator><name>do_block_ssd</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pos</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>r_y</name></expr></argument>, <argument><expr><name>r_x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>dist</name> <operator>&lt;=</operator> <name>th_sse</name> <operator>&amp;&amp;</operator> <name>dist</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>double</name></type> <name>score</name> <init>= <expr><name>dist</name> <operator>*</operator> <name>distMul</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>index</name> <operator>&gt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>group_size</name></name> <operator>&amp;&amp;</operator> <name>score</name> <operator>&gt;=</operator> <name><name>sc</name><operator>-&gt;</operator><name>match_blocks</name><index>[<expr><name>index</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>score</name></expr>)</condition> <block>{<block_content>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>index</name> <operator>&gt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>group_size</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>index</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>group_size</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>sc</name><operator>-&gt;</operator><name>match_blocks</name><index>[<expr><name>index</name></expr>]</index></name><operator>.</operator><name>score</name> <operator>=</operator> <name>score</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sc</name><operator>-&gt;</operator><name>match_blocks</name><index>[<expr><name>index</name></expr>]</index></name><operator>.</operator><name>y</name> <operator>=</operator> <name><name>pos</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sc</name><operator>-&gt;</operator><name>match_blocks</name><index>[<expr><name>index</name></expr>]</index></name><operator>.</operator><name>x</name> <operator>=</operator> <name><name>pos</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>index</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>qsort</name><argument_list>(<argument><expr><name><name>sc</name><operator>-&gt;</operator><name>match_blocks</name></name></expr></argument>, <argument><expr><name>index</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>PosPairCode</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>cmp_scores</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>sc</name><operator>-&gt;</operator><name>nb_match_blocks</name></name> <operator>=</operator> <name>index</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>block_matching_multi</name><parameter_list>(<parameter><decl><type><name>BM3DContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>ref</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ref_linesize</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>exclude_cur_pos</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>plane</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>jobnr</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>SliceContext</name> <modifier>*</modifier></type><name>sc</name> <init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>slices</name><index>[<expr><name>jobnr</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>width</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>planewidth</name><index>[<expr><name>plane</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>height</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>planeheight</name><index>[<expr><name>plane</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>block_size</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>block_size</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>step</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>bm_step</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>range</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>bm_range</name></name> <operator>/</operator> <name>step</name> <operator>*</operator> <name>step</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>l</name> <init>= <expr><call><name>search_boundary</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>range</name></expr></argument>, <argument><expr><name>step</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>r</name> <init>= <expr><call><name>search_boundary</name><argument_list>(<argument><expr><name>width</name> <operator>-</operator> <name>block_size</name></expr></argument>, <argument><expr><name>range</name></expr></argument>, <argument><expr><name>step</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>t</name> <init>= <expr><call><name>search_boundary</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>range</name></expr></argument>, <argument><expr><name>step</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>b</name> <init>= <expr><call><name>search_boundary</name><argument_list>(<argument><expr><name>height</name> <operator>-</operator> <name>block_size</name></expr></argument>, <argument><expr><name>range</name></expr></argument>, <argument><expr><name>step</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>index</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <name>t</name></expr>;</init> <condition><expr><name>j</name> <operator>&lt;=</operator> <name>b</name></expr>;</condition> <incr><expr><name>j</name> <operator>+=</operator> <name>step</name></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>l</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>r</name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <name>step</name></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>PosCode</name></type> <name>pos</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>exclude_cur_pos</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>j</name> <operator>==</operator> <name>y</name> <operator>&amp;&amp;</operator> <name>i</name> <operator>==</operator> <name>x</name></expr>)</condition> <block>{<block_content>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>pos</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name>j</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pos</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sc</name><operator>-&gt;</operator><name>search_positions</name><index>[<expr><name>index</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>pos</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>exclude_cur_pos</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>sc</name><operator>-&gt;</operator><name>match_blocks</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>score</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sc</name><operator>-&gt;</operator><name>match_blocks</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>y</name> <operator>=</operator> <name>y</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sc</name><operator>-&gt;</operator><name>match_blocks</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>x</name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sc</name><operator>-&gt;</operator><name>nb_match_blocks</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>do_block_matching_multi</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>ref</name></expr></argument>, <argument><expr><name>ref_linesize</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>bm_range</name></name></expr></argument>,

<argument><expr><name><name>sc</name><operator>-&gt;</operator><name>search_positions</name></name></expr></argument>, <argument><expr><name>index</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>th_mse</name></name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>plane</name></expr></argument>, <argument><expr><name>jobnr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>block_matching</name><parameter_list>(<parameter><decl><type><name>BM3DContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>ref</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ref_linesize</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>j</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>plane</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>jobnr</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>SliceContext</name> <modifier>*</modifier></type><name>sc</name> <init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>slices</name><index>[<expr><name>jobnr</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>group_size</name></name> <operator>==</operator> <literal type="number">1</literal> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>th_mse</name></name> <operator>&lt;=</operator> <literal type="number">0.f</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>sc</name><operator>-&gt;</operator><name>match_blocks</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>score</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sc</name><operator>-&gt;</operator><name>match_blocks</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>x</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sc</name><operator>-&gt;</operator><name>match_blocks</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>y</name> <operator>=</operator> <name>j</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sc</name><operator>-&gt;</operator><name>nb_match_blocks</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>sc</name><operator>-&gt;</operator><name>nb_match_blocks</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>block_matching_multi</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>ref</name></expr></argument>, <argument><expr><name>ref_linesize</name></expr></argument>, <argument><expr><name>j</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>plane</name></expr></argument>, <argument><expr><name>jobnr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>get_block_row</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>srcp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_linesize</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>block_size</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><name>srcp</name> <operator>+</operator> <name>y</name> <operator>*</operator> <name>src_linesize</name> <operator>+</operator> <name>x</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>block_size</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>dst</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>src</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>get_block_row16</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>srcp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_linesize</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>block_size</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><name>srcp</name> <operator>+</operator> <name>y</name> <operator>*</operator> <name>src_linesize</name> <operator>/</operator> <literal type="number">2</literal> <operator>+</operator> <name>x</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>block_size</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>dst</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>src</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>basic_block_filtering</name><parameter_list>(<parameter><decl><type><name>BM3DContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_linesize</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>ref</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ref_linesize</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>plane</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>jobnr</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>SliceContext</name> <modifier>*</modifier></type><name>sc</name> <init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>slices</name><index>[<expr><name>jobnr</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>buffer_linesize</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>block_size</name></name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>block_size</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>nb_match_blocks</name> <init>= <expr><name><name>sc</name><operator>-&gt;</operator><name>nb_match_blocks</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>block_size</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>block_size</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>width</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>planewidth</name><index>[<expr><name>plane</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>pgroup_size</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>pgroup_size</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>group_size</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>group_size</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>buffer</name> <init>= <expr><name><name>sc</name><operator>-&gt;</operator><name>buffer</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>bufferh</name> <init>= <expr><name><name>sc</name><operator>-&gt;</operator><name>bufferh</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>bufferv</name> <init>= <expr><name><name>sc</name><operator>-&gt;</operator><name>bufferv</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>bufferz</name> <init>= <expr><name><name>sc</name><operator>-&gt;</operator><name>bufferz</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name><name>threshold</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>den_weight</name></decl>, <decl><type ref="prev"/><name>num_weight</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>retained</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>nb_match_blocks</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>y</name> <init>= <expr><name><name>sc</name><operator>-&gt;</operator><name>match_blocks</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>y</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>x</name> <init>= <expr><name><name>sc</name><operator>-&gt;</operator><name>match_blocks</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>x</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>block_size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>get_block_row</name></name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_linesize</name></expr></argument>, <argument><expr><name>y</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>block_size</name></expr></argument>, <argument><expr><name>bufferh</name> <operator>+</operator> <name>block_size</name> <operator>*</operator> <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_dct_calc</name><argument_list>(<argument><expr><name><name>sc</name><operator>-&gt;</operator><name>dctf</name></name></expr></argument>, <argument><expr><name>bufferh</name> <operator>+</operator> <name>block_size</name> <operator>*</operator> <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>block_size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>block_size</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>bufferv</name><index>[<expr><name>i</name> <operator>*</operator> <name>block_size</name> <operator>+</operator> <name>j</name></expr>]</index></name> <operator>=</operator> <name><name>bufferh</name><index>[<expr><name>j</name> <operator>*</operator> <name>block_size</name> <operator>+</operator> <name>i</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>av_dct_calc</name><argument_list>(<argument><expr><name><name>sc</name><operator>-&gt;</operator><name>dctf</name></name></expr></argument>, <argument><expr><name>bufferv</name> <operator>+</operator> <name>i</name> <operator>*</operator> <name>block_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>block_size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>buffer</name> <operator>+</operator> <name>k</name> <operator>*</operator> <name>buffer_linesize</name> <operator>+</operator> <name>i</name> <operator>*</operator> <name>block_size</name></expr></argument>,

<argument><expr><name>bufferv</name> <operator>+</operator> <name>i</name> <operator>*</operator> <name>block_size</name></expr></argument>, <argument><expr><name>block_size</name> <operator>*</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>block_size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>block_size</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>nb_match_blocks</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>bufferz</name><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <name><name>buffer</name><index>[<expr><name>buffer_linesize</name> <operator>*</operator> <name>k</name> <operator>+</operator> <name>i</name> <operator>*</operator> <name>block_size</name> <operator>+</operator> <name>j</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name>group_size</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_dct_calc</name><argument_list>(<argument><expr><name><name>sc</name><operator>-&gt;</operator><name>gdctf</name></name></expr></argument>, <argument><expr><name>bufferz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>bufferz</name> <operator>+=</operator> <name>pgroup_size</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<expr_stmt><expr><name><name>threshold</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>hard_threshold</name></name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>sigma</name></name> <operator>*</operator> <name>M_SQRT2</name> <operator>*</operator> <name>block_size</name> <operator>*</operator> <name>block_size</name> <operator>*</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>depth</name></name> <operator>-</operator> <literal type="number">8</literal><operator>)</operator><operator>)</operator> <operator>/</operator> <literal type="number">255.f</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>threshold</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>threshold</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <call><name>sqrtf</name><argument_list>(<argument><expr><literal type="number">2.f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>threshold</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>threshold</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <literal type="number">2.f</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>threshold</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>threshold</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <call><name>sqrtf</name><argument_list>(<argument><expr><literal type="number">8.f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>bufferz</name> <operator>=</operator> <name><name>sc</name><operator>-&gt;</operator><name>bufferz</name></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>block_size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>block_size</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>nb_match_blocks</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>thresh</name> <init>= <expr><name><name>threshold</name><index>[<expr><operator>(</operator><name>j</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>i</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>k</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>bufferz</name><index>[<expr><name>k</name></expr>]</index></name> <operator>&gt;</operator> <name>thresh</name> <operator>||</operator> <name><name>bufferz</name><index>[<expr><name>k</name></expr>]</index></name> <operator>&lt;</operator> <operator>-</operator><name>thresh</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>retained</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>bufferz</name><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>bufferz</name> <operator>+=</operator> <name>pgroup_size</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<expr_stmt><expr><name>bufferz</name> <operator>=</operator> <name><name>sc</name><operator>-&gt;</operator><name>bufferz</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>buffer</name> <operator>=</operator> <name><name>sc</name><operator>-&gt;</operator><name>buffer</name></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>block_size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>block_size</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>group_size</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_dct_calc</name><argument_list>(<argument><expr><name><name>sc</name><operator>-&gt;</operator><name>gdcti</name></name></expr></argument>, <argument><expr><name>bufferz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>nb_match_blocks</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>buffer</name><index>[<expr><name>buffer_linesize</name> <operator>*</operator> <name>k</name> <operator>+</operator> <name>i</name> <operator>*</operator> <name>block_size</name> <operator>+</operator> <name>j</name></expr>]</index></name> <operator>=</operator> <name><name>bufferz</name><index>[<expr><name>k</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>bufferz</name> <operator>+=</operator> <name>pgroup_size</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<expr_stmt><expr><name>den_weight</name> <operator>=</operator> <ternary><condition><expr><name>retained</name> <operator>&lt;</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><literal type="number">1.f</literal></expr> </then><else>: <expr><literal type="number">1.f</literal> <operator>/</operator> <name>retained</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>num_weight</name> <operator>=</operator> <name>den_weight</name></expr>;</expr_stmt>

<expr_stmt><expr><name>buffer</name> <operator>=</operator> <name><name>sc</name><operator>-&gt;</operator><name>buffer</name></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>nb_match_blocks</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>num</name> <init>= <expr><name><name>sc</name><operator>-&gt;</operator><name>num</name></name> <operator>+</operator> <name>y</name> <operator>*</operator> <name>width</name> <operator>+</operator> <name>x</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>den</name> <init>= <expr><name><name>sc</name><operator>-&gt;</operator><name>den</name></name> <operator>+</operator> <name>y</name> <operator>*</operator> <name>width</name> <operator>+</operator> <name>x</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>block_size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>bufferv</name> <operator>+</operator> <name>i</name> <operator>*</operator> <name>block_size</name></expr></argument>,

<argument><expr><name>buffer</name> <operator>+</operator> <name>k</name> <operator>*</operator> <name>buffer_linesize</name> <operator>+</operator> <name>i</name> <operator>*</operator> <name>block_size</name></expr></argument>,

<argument><expr><name>block_size</name> <operator>*</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>block_size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>av_dct_calc</name><argument_list>(<argument><expr><name><name>sc</name><operator>-&gt;</operator><name>dcti</name></name></expr></argument>, <argument><expr><name>bufferv</name> <operator>+</operator> <name>block_size</name> <operator>*</operator> <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>block_size</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>bufferh</name><index>[<expr><name>j</name> <operator>*</operator> <name>block_size</name> <operator>+</operator> <name>i</name></expr>]</index></name> <operator>=</operator> <name><name>bufferv</name><index>[<expr><name>i</name> <operator>*</operator> <name>block_size</name> <operator>+</operator> <name>j</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>block_size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>av_dct_calc</name><argument_list>(<argument><expr><name><name>sc</name><operator>-&gt;</operator><name>dcti</name></name></expr></argument>, <argument><expr><name>bufferh</name> <operator>+</operator> <name>block_size</name> <operator>*</operator> <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>block_size</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>num</name><index>[<expr><name>j</name></expr>]</index></name> <operator>+=</operator> <name><name>bufferh</name><index>[<expr><name>i</name> <operator>*</operator> <name>block_size</name> <operator>+</operator> <name>j</name></expr>]</index></name> <operator>*</operator> <name>num_weight</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>den</name><index>[<expr><name>j</name></expr>]</index></name> <operator>+=</operator> <name>den_weight</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>num</name> <operator>+=</operator> <name>width</name></expr>;</expr_stmt>

<expr_stmt><expr><name>den</name> <operator>+=</operator> <name>width</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>final_block_filtering</name><parameter_list>(<parameter><decl><type><name>BM3DContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_linesize</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>ref</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ref_linesize</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>plane</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>jobnr</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>SliceContext</name> <modifier>*</modifier></type><name>sc</name> <init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>slices</name><index>[<expr><name>jobnr</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>buffer_linesize</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>block_size</name></name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>block_size</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>nb_match_blocks</name> <init>= <expr><name><name>sc</name><operator>-&gt;</operator><name>nb_match_blocks</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>block_size</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>block_size</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>width</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>planewidth</name><index>[<expr><name>plane</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>pgroup_size</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>pgroup_size</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>group_size</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>group_size</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>sigma_sqr</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>sigma</name></name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>sigma</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>buffer</name> <init>= <expr><name><name>sc</name><operator>-&gt;</operator><name>buffer</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>bufferh</name> <init>= <expr><name><name>sc</name><operator>-&gt;</operator><name>bufferh</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>bufferv</name> <init>= <expr><name><name>sc</name><operator>-&gt;</operator><name>bufferv</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>bufferz</name> <init>= <expr><name><name>sc</name><operator>-&gt;</operator><name>bufferz</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>rbuffer</name> <init>= <expr><name><name>sc</name><operator>-&gt;</operator><name>rbuffer</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>rbufferh</name> <init>= <expr><name><name>sc</name><operator>-&gt;</operator><name>rbufferh</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>rbufferv</name> <init>= <expr><name><name>sc</name><operator>-&gt;</operator><name>rbufferv</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>rbufferz</name> <init>= <expr><name><name>sc</name><operator>-&gt;</operator><name>rbufferz</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>den_weight</name></decl>, <decl><type ref="prev"/><name>num_weight</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>l2_wiener</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>nb_match_blocks</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>y</name> <init>= <expr><name><name>sc</name><operator>-&gt;</operator><name>match_blocks</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>y</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>x</name> <init>= <expr><name><name>sc</name><operator>-&gt;</operator><name>match_blocks</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>x</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>block_size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>get_block_row</name></name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_linesize</name></expr></argument>, <argument><expr><name>y</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>block_size</name></expr></argument>, <argument><expr><name>bufferh</name> <operator>+</operator> <name>block_size</name> <operator>*</operator> <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>get_block_row</name></name><argument_list>(<argument><expr><name>ref</name></expr></argument>, <argument><expr><name>ref_linesize</name></expr></argument>, <argument><expr><name>y</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>block_size</name></expr></argument>, <argument><expr><name>rbufferh</name> <operator>+</operator> <name>block_size</name> <operator>*</operator> <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_dct_calc</name><argument_list>(<argument><expr><name><name>sc</name><operator>-&gt;</operator><name>dctf</name></name></expr></argument>, <argument><expr><name>bufferh</name> <operator>+</operator> <name>block_size</name> <operator>*</operator> <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_dct_calc</name><argument_list>(<argument><expr><name><name>sc</name><operator>-&gt;</operator><name>dctf</name></name></expr></argument>, <argument><expr><name>rbufferh</name> <operator>+</operator> <name>block_size</name> <operator>*</operator> <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>block_size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>block_size</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>bufferv</name><index>[<expr><name>i</name> <operator>*</operator> <name>block_size</name> <operator>+</operator> <name>j</name></expr>]</index></name> <operator>=</operator> <name><name>bufferh</name><index>[<expr><name>j</name> <operator>*</operator> <name>block_size</name> <operator>+</operator> <name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rbufferv</name><index>[<expr><name>i</name> <operator>*</operator> <name>block_size</name> <operator>+</operator> <name>j</name></expr>]</index></name> <operator>=</operator> <name><name>rbufferh</name><index>[<expr><name>j</name> <operator>*</operator> <name>block_size</name> <operator>+</operator> <name>i</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>av_dct_calc</name><argument_list>(<argument><expr><name><name>sc</name><operator>-&gt;</operator><name>dctf</name></name></expr></argument>, <argument><expr><name>bufferv</name> <operator>+</operator> <name>i</name> <operator>*</operator> <name>block_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_dct_calc</name><argument_list>(<argument><expr><name><name>sc</name><operator>-&gt;</operator><name>dctf</name></name></expr></argument>, <argument><expr><name>rbufferv</name> <operator>+</operator> <name>i</name> <operator>*</operator> <name>block_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>block_size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>buffer</name> <operator>+</operator> <name>k</name> <operator>*</operator> <name>buffer_linesize</name> <operator>+</operator> <name>i</name> <operator>*</operator> <name>block_size</name></expr></argument>,

<argument><expr><name>bufferv</name> <operator>+</operator> <name>i</name> <operator>*</operator> <name>block_size</name></expr></argument>, <argument><expr><name>block_size</name> <operator>*</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>rbuffer</name> <operator>+</operator> <name>k</name> <operator>*</operator> <name>buffer_linesize</name> <operator>+</operator> <name>i</name> <operator>*</operator> <name>block_size</name></expr></argument>,

<argument><expr><name>rbufferv</name> <operator>+</operator> <name>i</name> <operator>*</operator> <name>block_size</name></expr></argument>, <argument><expr><name>block_size</name> <operator>*</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>block_size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>block_size</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>nb_match_blocks</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>bufferz</name><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <name><name>buffer</name><index>[<expr><name>buffer_linesize</name> <operator>*</operator> <name>k</name> <operator>+</operator> <name>i</name> <operator>*</operator> <name>block_size</name> <operator>+</operator> <name>j</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rbufferz</name><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <name><name>rbuffer</name><index>[<expr><name>buffer_linesize</name> <operator>*</operator> <name>k</name> <operator>+</operator> <name>i</name> <operator>*</operator> <name>block_size</name> <operator>+</operator> <name>j</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>group_size</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_dct_calc</name><argument_list>(<argument><expr><name><name>sc</name><operator>-&gt;</operator><name>gdctf</name></name></expr></argument>, <argument><expr><name>bufferz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_dct_calc</name><argument_list>(<argument><expr><name><name>sc</name><operator>-&gt;</operator><name>gdctf</name></name></expr></argument>, <argument><expr><name>rbufferz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>bufferz</name> <operator>+=</operator> <name>pgroup_size</name></expr>;</expr_stmt>

<expr_stmt><expr><name>rbufferz</name> <operator>+=</operator> <name>pgroup_size</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<expr_stmt><expr><name>bufferz</name> <operator>=</operator> <name><name>sc</name><operator>-&gt;</operator><name>bufferz</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>rbufferz</name> <operator>=</operator> <name><name>sc</name><operator>-&gt;</operator><name>rbufferz</name></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>block_size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>block_size</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>nb_match_blocks</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>ref_sqr</name> <init>= <expr><name><name>rbufferz</name><index>[<expr><name>k</name></expr>]</index></name> <operator>*</operator> <name><name>rbufferz</name><index>[<expr><name>k</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>wiener_coef</name> <init>= <expr><name>ref_sqr</name> <operator>/</operator> <operator>(</operator><name>ref_sqr</name> <operator>+</operator> <name>sigma_sqr</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>isnan</name><argument_list>(<argument><expr><name>wiener_coef</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>wiener_coef</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>bufferz</name><index>[<expr><name>k</name></expr>]</index></name> <operator>*=</operator> <name>wiener_coef</name></expr>;</expr_stmt>

<expr_stmt><expr><name>l2_wiener</name> <operator>+=</operator> <name>wiener_coef</name> <operator>*</operator> <name>wiener_coef</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>bufferz</name> <operator>+=</operator> <name>pgroup_size</name></expr>;</expr_stmt>

<expr_stmt><expr><name>rbufferz</name> <operator>+=</operator> <name>pgroup_size</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<expr_stmt><expr><name>bufferz</name> <operator>=</operator> <name><name>sc</name><operator>-&gt;</operator><name>bufferz</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>buffer</name> <operator>=</operator> <name><name>sc</name><operator>-&gt;</operator><name>buffer</name></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>block_size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>block_size</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>group_size</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_dct_calc</name><argument_list>(<argument><expr><name><name>sc</name><operator>-&gt;</operator><name>gdcti</name></name></expr></argument>, <argument><expr><name>bufferz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>nb_match_blocks</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>buffer</name><index>[<expr><name>buffer_linesize</name> <operator>*</operator> <name>k</name> <operator>+</operator> <name>i</name> <operator>*</operator> <name>block_size</name> <operator>+</operator> <name>j</name></expr>]</index></name> <operator>=</operator> <name><name>bufferz</name><index>[<expr><name>k</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>bufferz</name> <operator>+=</operator> <name>pgroup_size</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<expr_stmt><expr><name>l2_wiener</name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name>l2_wiener</name></expr></argument>, <argument><expr><literal type="number">1e-15f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>den_weight</name> <operator>=</operator> <literal type="number">1.f</literal> <operator>/</operator> <name>l2_wiener</name></expr>;</expr_stmt>

<expr_stmt><expr><name>num_weight</name> <operator>=</operator> <name>den_weight</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>nb_match_blocks</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>num</name> <init>= <expr><name><name>sc</name><operator>-&gt;</operator><name>num</name></name> <operator>+</operator> <name>y</name> <operator>*</operator> <name>width</name> <operator>+</operator> <name>x</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>den</name> <init>= <expr><name><name>sc</name><operator>-&gt;</operator><name>den</name></name> <operator>+</operator> <name>y</name> <operator>*</operator> <name>width</name> <operator>+</operator> <name>x</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>block_size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>bufferv</name> <operator>+</operator> <name>i</name> <operator>*</operator> <name>block_size</name></expr></argument>,

<argument><expr><name>buffer</name> <operator>+</operator> <name>k</name> <operator>*</operator> <name>buffer_linesize</name> <operator>+</operator> <name>i</name> <operator>*</operator> <name>block_size</name></expr></argument>,

<argument><expr><name>block_size</name> <operator>*</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>block_size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>av_dct_calc</name><argument_list>(<argument><expr><name><name>sc</name><operator>-&gt;</operator><name>dcti</name></name></expr></argument>, <argument><expr><name>bufferv</name> <operator>+</operator> <name>block_size</name> <operator>*</operator> <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>block_size</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>bufferh</name><index>[<expr><name>j</name> <operator>*</operator> <name>block_size</name> <operator>+</operator> <name>i</name></expr>]</index></name> <operator>=</operator> <name><name>bufferv</name><index>[<expr><name>i</name> <operator>*</operator> <name>block_size</name> <operator>+</operator> <name>j</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>block_size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>av_dct_calc</name><argument_list>(<argument><expr><name><name>sc</name><operator>-&gt;</operator><name>dcti</name></name></expr></argument>, <argument><expr><name>bufferh</name> <operator>+</operator> <name>block_size</name> <operator>*</operator> <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>block_size</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>num</name><index>[<expr><name>j</name></expr>]</index></name> <operator>+=</operator> <name><name>bufferh</name><index>[<expr><name>i</name> <operator>*</operator> <name>block_size</name> <operator>+</operator> <name>j</name></expr>]</index></name> <operator>*</operator> <name>num_weight</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>den</name><index>[<expr><name>j</name></expr>]</index></name> <operator>+=</operator> <name>den_weight</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>num</name> <operator>+=</operator> <name>width</name></expr>;</expr_stmt>

<expr_stmt><expr><name>den</name> <operator>+=</operator> <name>width</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>do_output</name><parameter_list>(<parameter><decl><type><name>BM3DContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_linesize</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>plane</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nb_jobs</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>height</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>planeheight</name><index>[<expr><name>plane</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>width</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>planewidth</name><index>[<expr><name>plane</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dstp</name> <init>= <expr><name>dst</name> <operator>+</operator> <name>i</name> <operator>*</operator> <name>dst_linesize</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>sum_den</name> <init>= <expr><literal type="number">0.f</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>sum_num</name> <init>= <expr><literal type="number">0.f</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>nb_jobs</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>SliceContext</name> <modifier>*</modifier></type><name>sc</name> <init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>slices</name><index>[<expr><name>k</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>num</name> <init>= <expr><name><name>sc</name><operator>-&gt;</operator><name>num</name><index>[<expr><name>i</name> <operator>*</operator> <name>width</name> <operator>+</operator> <name>j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>den</name> <init>= <expr><name><name>sc</name><operator>-&gt;</operator><name>den</name><index>[<expr><name>i</name> <operator>*</operator> <name>width</name> <operator>+</operator> <name>j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>sum_num</name> <operator>+=</operator> <name>num</name></expr>;</expr_stmt>

<expr_stmt><expr><name>sum_den</name> <operator>+=</operator> <name>den</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>dstp</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <call><name>av_clip_uint8</name><argument_list>(<argument><expr><call><name>lrintf</name><argument_list>(<argument><expr><name>sum_num</name> <operator>/</operator> <name>sum_den</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>do_output16</name><parameter_list>(<parameter><decl><type><name>BM3DContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_linesize</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>plane</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nb_jobs</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>height</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>planeheight</name><index>[<expr><name>plane</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>width</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>planewidth</name><index>[<expr><name>plane</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>depth</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>depth</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dstp</name> <init>= <expr><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>i</name> <operator>*</operator> <name>dst_linesize</name> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>sum_den</name> <init>= <expr><literal type="number">0.f</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>sum_num</name> <init>= <expr><literal type="number">0.f</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>nb_jobs</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>SliceContext</name> <modifier>*</modifier></type><name>sc</name> <init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>slices</name><index>[<expr><name>k</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>num</name> <init>= <expr><name><name>sc</name><operator>-&gt;</operator><name>num</name><index>[<expr><name>i</name> <operator>*</operator> <name>width</name> <operator>+</operator> <name>j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>den</name> <init>= <expr><name><name>sc</name><operator>-&gt;</operator><name>den</name><index>[<expr><name>i</name> <operator>*</operator> <name>width</name> <operator>+</operator> <name>j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>sum_num</name> <operator>+=</operator> <name>num</name></expr>;</expr_stmt>

<expr_stmt><expr><name>sum_den</name> <operator>+=</operator> <name>den</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>dstp</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <call><name>av_clip_uintp2_c</name><argument_list>(<argument><expr><call><name>lrintf</name><argument_list>(<argument><expr><name>sum_num</name> <operator>/</operator> <name>sum_den</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>depth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>filter_slice</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>jobnr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nb_jobs</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>BM3DContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SliceContext</name> <modifier>*</modifier></type><name>sc</name> <init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>slices</name><index>[<expr><name>jobnr</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>block_step</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>block_step</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ThreadData</name> <modifier>*</modifier></type><name>td</name> <init>= <expr><name>arg</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><name><name>td</name><operator>-&gt;</operator><name>src</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>ref</name> <init>= <expr><name><name>td</name><operator>-&gt;</operator><name>ref</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>src_linesize</name> <init>= <expr><name><name>td</name><operator>-&gt;</operator><name>src_linesize</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>ref_linesize</name> <init>= <expr><name><name>td</name><operator>-&gt;</operator><name>ref_linesize</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>plane</name> <init>= <expr><name><name>td</name><operator>-&gt;</operator><name>plane</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>width</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>planewidth</name><index>[<expr><name>plane</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>height</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>planeheight</name><index>[<expr><name>plane</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>block_pos_bottom</name> <init>= <expr><call><name>FFMAX</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>height</name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>block_size</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>block_pos_right</name> <init>= <expr><call><name>FFMAX</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>width</name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>block_size</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>slice_start</name> <init>= <expr><operator>(</operator><operator>(</operator><operator>(</operator><name>height</name> <operator>+</operator> <name>block_step</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <name>block_step</name><operator>)</operator> <operator>*</operator> <name>jobnr</name> <operator>/</operator> <name>nb_jobs</name><operator>)</operator> <operator>*</operator> <name>block_step</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>slice_end</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>jobnr</name> <operator>==</operator> <name>nb_jobs</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr> ?</condition><then> <expr><name>block_pos_bottom</name> <operator>+</operator> <name>block_step</name></expr> </then><else>:

<expr><operator>(</operator><operator>(</operator><operator>(</operator><name>height</name> <operator>+</operator> <name>block_step</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <name>block_step</name><operator>)</operator> <operator>*</operator> <operator>(</operator><name>jobnr</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <name>nb_jobs</name><operator>)</operator> <operator>*</operator> <name>block_step</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>sc</name><operator>-&gt;</operator><name>num</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>width</name> <operator>*</operator> <name>height</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>FFTSample</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>sc</name><operator>-&gt;</operator><name>den</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>width</name> <operator>*</operator> <name>height</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>FFTSample</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <name>slice_start</name></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>slice_end</name></expr>;</condition> <incr><expr><name>j</name> <operator>+=</operator> <name>block_step</name></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>j</name> <operator>&gt;</operator> <name>block_pos_bottom</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>j</name> <operator>=</operator> <name>block_pos_bottom</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>block_pos_right</name> <operator>+</operator> <name>block_step</name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <name>block_step</name></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;</operator> <name>block_pos_right</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>i</name> <operator>=</operator> <name>block_pos_right</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>block_matching</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>ref</name></expr></argument>, <argument><expr><name>ref_linesize</name></expr></argument>, <argument><expr><name>j</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>plane</name></expr></argument>, <argument><expr><name>jobnr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>block_filtering</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_linesize</name></expr></argument>,

<argument><expr><name>ref</name></expr></argument>, <argument><expr><name>ref_linesize</name></expr></argument>, <argument><expr><name>j</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>plane</name></expr></argument>, <argument><expr><name>jobnr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>filter_frame</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier><modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>ref</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>BM3DContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>outlink</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>outputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>p</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>out</name> <operator>=</operator> <call><name>ff_get_video_buffer</name><argument_list>(<argument><expr><name>outlink</name></expr></argument>, <argument><expr><name><name>outlink</name><operator>-&gt;</operator><name>w</name></name></expr></argument>, <argument><expr><name><name>outlink</name><operator>-&gt;</operator><name>h</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>out</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_frame_copy_props</name><argument_list>(<argument><expr><operator>*</operator><name>out</name></expr></argument>, <argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>p</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>nb_planes</name></name></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>nb_jobs</name> <init>= <expr><call><name>FFMAX</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name>FFMIN</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>nb_threads</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>planeheight</name><index>[<expr><name>p</name></expr>]</index></name> <operator>/</operator> <name><name>s</name><operator>-&gt;</operator><name>block_size</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ThreadData</name></type> <name>td</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>p</name><operator>)</operator> <operator>&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>planes</name></name><operator>)</operator> <operator>||</operator> <name><name>ctx</name><operator>-&gt;</operator><name>is_disabled</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_image_copy_plane</name><argument_list>(<argument><expr><name><operator>(</operator><operator>*</operator><name>out</name><operator>)</operator><operator>-&gt;</operator><name>data</name></name><index>[<expr><name>p</name></expr>]</index></expr></argument>, <argument><expr><name><operator>(</operator><operator>*</operator><name>out</name><operator>)</operator><operator>-&gt;</operator><name>linesize</name></name><index>[<expr><name>p</name></expr>]</index></expr></argument>,

<argument><expr><name><name>in</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>p</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>in</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>p</name></expr>]</index></name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>planewidth</name><index>[<expr><name>p</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>planeheight</name><index>[<expr><name>p</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>td</name><operator>.</operator><name>src</name></name> <operator>=</operator> <name><name>in</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>p</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>td</name><operator>.</operator><name>src_linesize</name></name> <operator>=</operator> <name><name>in</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>p</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>td</name><operator>.</operator><name>ref</name></name> <operator>=</operator> <name><name>ref</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>p</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>td</name><operator>.</operator><name>ref_linesize</name></name> <operator>=</operator> <name><name>ref</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>p</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>td</name><operator>.</operator><name>plane</name></name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>ctx</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>filter_slice</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>td</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>nb_jobs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>do_output</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><operator>(</operator><operator>*</operator><name>out</name><operator>)</operator><operator>-&gt;</operator><name>data</name></name><index>[<expr><name>p</name></expr>]</index></expr></argument>, <argument><expr><name><operator>(</operator><operator>*</operator><name>out</name><operator>)</operator><operator>-&gt;</operator><name>linesize</name></name><index>[<expr><name>p</name></expr>]</index></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>nb_jobs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SQR</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((x) * (x))</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>int</name></type> <name>config_input</name><parameter_list>(<parameter><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>inlink</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>AVPixFmtDescriptor</name> <modifier>*</modifier></type><name>desc</name> <init>= <expr><call><name>av_pix_fmt_desc_get</name><argument_list>(<argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>format</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>inlink</name><operator>-&gt;</operator><name>dst</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>BM3DContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>group_bits</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>nb_threads</name></name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><call><name>ff_filter_get_nb_threads</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>MAX_NB_THREADS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>nb_planes</name></name> <operator>=</operator> <call><name>av_pix_fmt_count_planes</name><argument_list>(<argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>format</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>depth</name></name> <operator>=</operator> <name><name>desc</name><operator>-&gt;</operator><name>comp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>depth</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>max</name></name> <operator>=</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>depth</name></name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>planeheight</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>planeheight</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>AV_CEIL_RSHIFT</name><argument_list>(<argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>h</name></name></expr></argument>, <argument><expr><name><name>desc</name><operator>-&gt;</operator><name>log2_chroma_h</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>planeheight</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>planeheight</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>inlink</name><operator>-&gt;</operator><name>h</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>planewidth</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>planewidth</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>AV_CEIL_RSHIFT</name><argument_list>(<argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>w</name></name></expr></argument>, <argument><expr><name><name>desc</name><operator>-&gt;</operator><name>log2_chroma_w</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>planewidth</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>planewidth</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>inlink</name><operator>-&gt;</operator><name>w</name></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>group_bits</name> <operator>=</operator> <literal type="number">4</literal></expr>;</init> <condition><expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>group_bits</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>group_size</name></name></expr>;</condition> <incr><expr><name>group_bits</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></for>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>group_bits</name></name> <operator>=</operator> <name>group_bits</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>pgroup_size</name></name> <operator>=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>group_bits</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>nb_threads</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>SliceContext</name> <modifier>*</modifier></type><name>sc</name> <init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>slices</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>sc</name><operator>-&gt;</operator><name>num</name></name> <operator>=</operator> <call><name>av_calloc</name><argument_list>(<argument><expr><call><name>FFALIGN</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>planewidth</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>block_size</name></name></expr></argument>)</argument_list></call> <operator>*</operator> <call><name>FFALIGN</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>planeheight</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>block_size</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>FFTSample</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sc</name><operator>-&gt;</operator><name>den</name></name> <operator>=</operator> <call><name>av_calloc</name><argument_list>(<argument><expr><call><name>FFALIGN</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>planewidth</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>block_size</name></name></expr></argument>)</argument_list></call> <operator>*</operator> <call><name>FFALIGN</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>planeheight</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>block_size</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>FFTSample</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>sc</name><operator>-&gt;</operator><name>num</name></name> <operator>||</operator> <operator>!</operator><name><name>sc</name><operator>-&gt;</operator><name>den</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>sc</name><operator>-&gt;</operator><name>dctf</name></name> <operator>=</operator> <call><name>av_dct_init</name><argument_list>(<argument><expr><call><name>av_log2</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>block_size</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>DCT_II</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sc</name><operator>-&gt;</operator><name>dcti</name></name> <operator>=</operator> <call><name>av_dct_init</name><argument_list>(<argument><expr><call><name>av_log2</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>block_size</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>DCT_III</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>sc</name><operator>-&gt;</operator><name>dctf</name></name> <operator>||</operator> <operator>!</operator><name><name>sc</name><operator>-&gt;</operator><name>dcti</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>group_bits</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>sc</name><operator>-&gt;</operator><name>gdctf</name></name> <operator>=</operator> <call><name>av_dct_init</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>group_bits</name></name></expr></argument>, <argument><expr><name>DCT_II</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sc</name><operator>-&gt;</operator><name>gdcti</name></name> <operator>=</operator> <call><name>av_dct_init</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>group_bits</name></name></expr></argument>, <argument><expr><name>DCT_III</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>sc</name><operator>-&gt;</operator><name>gdctf</name></name> <operator>||</operator> <operator>!</operator><name><name>sc</name><operator>-&gt;</operator><name>gdcti</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>sc</name><operator>-&gt;</operator><name>buffer</name></name> <operator>=</operator> <call><name>av_calloc</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>block_size</name></name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>block_size</name></name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>pgroup_size</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>sc</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sc</name><operator>-&gt;</operator><name>bufferz</name></name> <operator>=</operator> <call><name>av_calloc</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>block_size</name></name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>block_size</name></name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>pgroup_size</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>sc</name><operator>-&gt;</operator><name>bufferz</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sc</name><operator>-&gt;</operator><name>bufferh</name></name> <operator>=</operator> <call><name>av_calloc</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>block_size</name></name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>block_size</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>sc</name><operator>-&gt;</operator><name>bufferh</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sc</name><operator>-&gt;</operator><name>bufferv</name></name> <operator>=</operator> <call><name>av_calloc</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>block_size</name></name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>block_size</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>sc</name><operator>-&gt;</operator><name>bufferv</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>sc</name><operator>-&gt;</operator><name>bufferh</name></name> <operator>||</operator> <operator>!</operator><name><name>sc</name><operator>-&gt;</operator><name>bufferv</name></name> <operator>||</operator> <operator>!</operator><name><name>sc</name><operator>-&gt;</operator><name>buffer</name></name> <operator>||</operator> <operator>!</operator><name><name>sc</name><operator>-&gt;</operator><name>bufferz</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>mode</name></name> <operator>==</operator> <name>FINAL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>sc</name><operator>-&gt;</operator><name>rbuffer</name></name> <operator>=</operator> <call><name>av_calloc</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>block_size</name></name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>block_size</name></name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>pgroup_size</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>sc</name><operator>-&gt;</operator><name>rbuffer</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sc</name><operator>-&gt;</operator><name>rbufferz</name></name> <operator>=</operator> <call><name>av_calloc</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>block_size</name></name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>block_size</name></name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>pgroup_size</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>sc</name><operator>-&gt;</operator><name>rbufferz</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sc</name><operator>-&gt;</operator><name>rbufferh</name></name> <operator>=</operator> <call><name>av_calloc</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>block_size</name></name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>block_size</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>sc</name><operator>-&gt;</operator><name>rbufferh</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sc</name><operator>-&gt;</operator><name>rbufferv</name></name> <operator>=</operator> <call><name>av_calloc</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>block_size</name></name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>block_size</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>sc</name><operator>-&gt;</operator><name>rbufferv</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>sc</name><operator>-&gt;</operator><name>rbufferh</name></name> <operator>||</operator> <operator>!</operator><name><name>sc</name><operator>-&gt;</operator><name>rbufferv</name></name> <operator>||</operator> <operator>!</operator><name><name>sc</name><operator>-&gt;</operator><name>rbuffer</name></name> <operator>||</operator> <operator>!</operator><name><name>sc</name><operator>-&gt;</operator><name>rbufferz</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>sc</name><operator>-&gt;</operator><name>search_positions</name></name> <operator>=</operator> <call><name>av_calloc</name><argument_list>(<argument><expr><call><name>SQR</name><argument_list>(<argument><expr><literal type="number">2</literal> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>bm_range</name></name> <operator>/</operator> <name><name>s</name><operator>-&gt;</operator><name>bm_step</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>sc</name><operator>-&gt;</operator><name>search_positions</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>sc</name><operator>-&gt;</operator><name>search_positions</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>do_output</name></name> <operator>=</operator> <name>do_output</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>do_block_ssd</name></name> <operator>=</operator> <name>do_block_ssd</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>get_block_row</name></name> <operator>=</operator> <name>get_block_row</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>depth</name></name> <operator>&gt;</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>do_output</name></name> <operator>=</operator> <name>do_output16</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>do_block_ssd</name></name> <operator>=</operator> <name>do_block_ssd16</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>get_block_row</name></name> <operator>=</operator> <name>get_block_row16</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>activate</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>BM3DContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>ref</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>frame</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>out</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>, <decl><type ref="prev"/><name>status</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>pts</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>FF_FILTER_FORWARD_STATUS_BACK</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>outputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>inputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_inlink_consume_frame</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>inputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>frame</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>filter_frame</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>out</name></expr></argument>, <argument><expr><name>frame</name></expr></argument>, <argument><expr><name>frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_filter_frame</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>outputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>ff_inlink_acknowledge_status</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>inputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>status</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pts</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ff_outlink_set_status</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>outputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>status</name></expr></argument>, <argument><expr><name>pts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>ff_outlink_frame_wanted</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>outputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ff_inlink_request_frame</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>inputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<return>return <expr><call><name>ff_framesync_activate</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>fs</name></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>process_frame</name><parameter_list>(<parameter><decl><type><name>FFFrameSync</name> <modifier>*</modifier></type><name>fs</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>fs</name><operator>-&gt;</operator><name>parent</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>BM3DContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>fs</name><operator>-&gt;</operator><name>opaque</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>outlink</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>outputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>out</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>src</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ref</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_framesync_get_frame</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>fs</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>src</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator>

<operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_framesync_get_frame</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>fs</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>ref</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>filter_frame</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>out</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>ref</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>pts</name></name> <operator>=</operator> <call><name>av_rescale_q</name><argument_list>(<argument><expr><name><name>src</name><operator>-&gt;</operator><name>pts</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>fs</name><operator>.</operator><name>time_base</name></name></expr></argument>, <argument><expr><name><name>outlink</name><operator>-&gt;</operator><name>time_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>ff_filter_frame</name><argument_list>(<argument><expr><name>outlink</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>init</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>BM3DContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFilterPad</name></type> <name>pad</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>mode</name></name> <operator>==</operator> <name>BASIC</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>th_mse</name></name> <operator>==</operator> <literal type="number">0.f</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>th_mse</name></name> <operator>=</operator> <literal type="number">400.f</literal> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>sigma</name></name> <operator>*</operator> <literal type="number">80.f</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>block_filtering</name></name> <operator>=</operator> <name>basic_block_filtering</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>mode</name></name> <operator>==</operator> <name>FINAL</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>ref</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Reference stream is mandatory in final estimation mode.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>ref</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>th_mse</name></name> <operator>==</operator> <literal type="number">0.f</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>th_mse</name></name> <operator>=</operator> <literal type="number">200.f</literal> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>sigma</name></name> <operator>*</operator> <literal type="number">10.f</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>block_filtering</name></name> <operator>=</operator> <name>final_block_filtering</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<return>return <expr><name>AVERROR_BUG</name></expr>;</return>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>block_size</name></name> <operator>=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>block_size</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>block_step</name></name> <operator>&gt;</operator> <name><name>s</name><operator>-&gt;</operator><name>block_size</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"bstep: %d can't be bigger than block size. Changing to %d.\n"</literal></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>block_step</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>block_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>block_step</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>block_size</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>bm_step</name></name> <operator>&gt;</operator> <name><name>s</name><operator>-&gt;</operator><name>bm_range</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"mstep: %d can't be bigger than block matching range. Changing to %d.\n"</literal></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>bm_step</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>bm_range</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>bm_step</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>bm_range</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>pad</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pad</name><operator>.</operator><name>name</name></name> <operator>=</operator> <call><name>av_strdup</name><argument_list>(<argument><expr><literal type="string">"source"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pad</name><operator>.</operator><name>config_props</name></name> <operator>=</operator> <name>config_input</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pad</name><operator>.</operator><name>name</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_insert_inpad</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>pad</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pad</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>ref</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>pad</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pad</name><operator>.</operator><name>name</name></name> <operator>=</operator> <call><name>av_strdup</name><argument_list>(<argument><expr><literal type="string">"reference"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pad</name><operator>.</operator><name>config_props</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pad</name><operator>.</operator><name>name</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_insert_inpad</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>pad</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pad</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>config_output</name><parameter_list>(<parameter><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>outlink</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>outlink</name><operator>-&gt;</operator><name>src</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>BM3DContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>inputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>ref</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>FFFrameSyncIn</name> <modifier>*</modifier></type><name>in</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>ref</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ref</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>inputs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>src</name><operator>-&gt;</operator><name>format</name></name> <operator>!=</operator> <name><name>ref</name><operator>-&gt;</operator><name>format</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"inputs must be of same pixel format\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>src</name><operator>-&gt;</operator><name>w</name></name> <operator>!=</operator> <name><name>ref</name><operator>-&gt;</operator><name>w</name></name> <operator>||</operator>

<name><name>src</name><operator>-&gt;</operator><name>h</name></name> <operator>!=</operator> <name><name>ref</name><operator>-&gt;</operator><name>h</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"First input link %s parameters "</literal>

<literal type="string">"(size %dx%d) do not match the corresponding "</literal>

<literal type="string">"second input link %s parameters (%dx%d) "</literal></expr></argument>,

<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>input_pads</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><name><name>src</name><operator>-&gt;</operator><name>w</name></name></expr></argument>, <argument><expr><name><name>src</name><operator>-&gt;</operator><name>h</name></name></expr></argument>,

<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>input_pads</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><name><name>ref</name><operator>-&gt;</operator><name>w</name></name></expr></argument>, <argument><expr><name><name>ref</name><operator>-&gt;</operator><name>h</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>outlink</name><operator>-&gt;</operator><name>w</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>w</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>outlink</name><operator>-&gt;</operator><name>h</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>h</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>outlink</name><operator>-&gt;</operator><name>time_base</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>time_base</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>outlink</name><operator>-&gt;</operator><name>sample_aspect_ratio</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>sample_aspect_ratio</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>outlink</name><operator>-&gt;</operator><name>frame_rate</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>frame_rate</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>ref</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_framesync_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>fs</name></name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>in</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>fs</name><operator>.</operator><name>in</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>in</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>time_base</name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>time_base</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>in</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>time_base</name> <operator>=</operator> <name><name>ref</name><operator>-&gt;</operator><name>time_base</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>in</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>sync</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>in</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>before</name> <operator>=</operator> <name>EXT_STOP</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>in</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>after</name> <operator>=</operator> <name>EXT_STOP</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>in</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>sync</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>in</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>before</name> <operator>=</operator> <name>EXT_STOP</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>in</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>after</name> <operator>=</operator> <name>EXT_STOP</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>fs</name><operator>.</operator><name>opaque</name></name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>fs</name><operator>.</operator><name>on_event</name></name> <operator>=</operator> <name>process_frame</name></expr>;</expr_stmt>

<return>return <expr><call><name>ff_framesync_configure</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>fs</name></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>void</name></type> <name>uninit</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>BM3DContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>nb_inputs</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>input_pads</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>ref</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ff_framesync_uninit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>fs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>nb_threads</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>SliceContext</name> <modifier>*</modifier></type><name>sc</name> <init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>slices</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sc</name><operator>-&gt;</operator><name>num</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sc</name><operator>-&gt;</operator><name>den</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_dct_end</name><argument_list>(<argument><expr><name><name>sc</name><operator>-&gt;</operator><name>gdctf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_dct_end</name><argument_list>(<argument><expr><name><name>sc</name><operator>-&gt;</operator><name>gdcti</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_dct_end</name><argument_list>(<argument><expr><name><name>sc</name><operator>-&gt;</operator><name>dctf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_dct_end</name><argument_list>(<argument><expr><name><name>sc</name><operator>-&gt;</operator><name>dcti</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sc</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sc</name><operator>-&gt;</operator><name>bufferh</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sc</name><operator>-&gt;</operator><name>bufferv</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sc</name><operator>-&gt;</operator><name>bufferz</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sc</name><operator>-&gt;</operator><name>rbuffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sc</name><operator>-&gt;</operator><name>rbufferh</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sc</name><operator>-&gt;</operator><name>rbufferv</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sc</name><operator>-&gt;</operator><name>rbufferz</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sc</name><operator>-&gt;</operator><name>search_positions</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVFilterPad</name></type> <name><name>bm3d_outputs</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"default"</literal></expr>,

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,

<expr><operator>.</operator><name>config_props</name> <operator>=</operator> <name>config_output</name></expr>,

}</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFilter</name></type> <name>ff_vf_bm3d</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"bm3d"</literal></expr>,

<expr><operator>.</operator><name>description</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"Block-Matching 3D denoiser."</literal></expr></argument>)</argument_list></call></expr>,

<expr><operator>.</operator><name>priv_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>BM3DContext</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>init</name></expr>,

<expr><operator>.</operator><name>uninit</name> <operator>=</operator> <name>uninit</name></expr>,

<expr><operator>.</operator><name>activate</name> <operator>=</operator> <name>activate</name></expr>,

<expr><operator>.</operator><name>query_formats</name> <operator>=</operator> <name>query_formats</name></expr>,

<expr><operator>.</operator><name>inputs</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>outputs</name> <operator>=</operator> <name>bm3d_outputs</name></expr>,

<expr><operator>.</operator><name>priv_class</name> <operator>=</operator> <operator>&amp;</operator><name>bm3d_class</name></expr>,

<expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>AVFILTER_FLAG_SUPPORT_TIMELINE_INTERNAL</name> <operator>|</operator>

<name>AVFILTER_FLAG_DYNAMIC_INPUTS</name> <operator>|</operator>

<name>AVFILTER_FLAG_SLICE_THREADS</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

</unit>
