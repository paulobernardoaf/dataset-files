<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavfilter\generate_wave_table.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avassert.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avfilter.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"generate_wave_table.h"</cpp:file></cpp:include>

<function><type><name>void</name></type> <name>ff_generate_wave_table</name><parameter_list>(<parameter><decl><type><name><name>enum</name> <name>WaveType</name></name></type> <name>wave_type</name></decl></parameter>,

<parameter><decl><type><name><name>enum</name> <name>AVSampleFormat</name></name></type> <name>sample_fmt</name></decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>table</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>table_size</name></decl></parameter>,

<parameter><decl><type><name>double</name></type> <name>min</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>max</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>phase</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>phase_offset</name> <init>= <expr><name>phase</name> <operator>/</operator> <name>M_PI</name> <operator>/</operator> <literal type="number">2</literal> <operator>*</operator> <name>table_size</name> <operator>+</operator> <literal type="number">0.5</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>table_size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>point</name> <init>= <expr><operator>(</operator><name>i</name> <operator>+</operator> <name>phase_offset</name><operator>)</operator> <operator>%</operator> <name>table_size</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>d</name></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>wave_type</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>WAVE_SIN</name></expr>:</case>

<expr_stmt><expr><name>d</name> <operator>=</operator> <operator>(</operator><call><name>sin</name><argument_list>(<argument><expr><operator>(</operator><name>double</name><operator>)</operator><name>point</name> <operator>/</operator> <name>table_size</name> <operator>*</operator> <literal type="number">2</literal> <operator>*</operator> <name>M_PI</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>WAVE_TRI</name></expr>:</case>

<expr_stmt><expr><name>d</name> <operator>=</operator> <operator>(</operator><name>double</name><operator>)</operator><name>point</name> <operator>*</operator> <literal type="number">2</literal> <operator>/</operator> <name>table_size</name></expr>;</expr_stmt>

<switch>switch <condition>(<expr><literal type="number">4</literal> <operator>*</operator> <name>point</name> <operator>/</operator> <name>table_size</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">0</literal></expr>:</case> <expr_stmt><expr><name>d</name> <operator>=</operator> <name>d</name> <operator>+</operator> <literal type="number">0.5</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">1</literal></expr>:</case>

<case>case <expr><literal type="number">2</literal></expr>:</case> <expr_stmt><expr><name>d</name> <operator>=</operator> <literal type="number">1.5</literal> <operator>-</operator> <name>d</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">3</literal></expr>:</case> <expr_stmt><expr><name>d</name> <operator>=</operator> <name>d</name> <operator>-</operator> <literal type="number">1.5</literal></expr>;</expr_stmt> <break>break;</break>

</block_content>}</block></switch>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></switch>

<expr_stmt><expr><name>d</name> <operator>=</operator> <name>d</name> <operator>*</operator> <operator>(</operator><name>max</name> <operator>-</operator> <name>min</name><operator>)</operator> <operator>+</operator> <name>min</name></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>sample_fmt</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>AV_SAMPLE_FMT_FLT</name></expr>:</case> <block>{<block_content>

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>fp</name> <init>= <expr><operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><name>table</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>fp</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><name>d</name></expr>;</expr_stmt>

<expr_stmt><expr><name>table</name> <operator>=</operator> <name>fp</name></expr>;</expr_stmt>

<continue>continue;</continue> </block_content>}</block>

<case>case <expr><name>AV_SAMPLE_FMT_DBL</name></expr>:</case> <block>{<block_content>

<decl_stmt><decl><type><name>double</name> <modifier>*</modifier></type><name>dp</name> <init>= <expr><operator>(</operator><name>double</name> <operator>*</operator><operator>)</operator><name>table</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>dp</name><operator>++</operator> <operator>=</operator> <name>d</name></expr>;</expr_stmt>

<expr_stmt><expr><name>table</name> <operator>=</operator> <name>dp</name></expr>;</expr_stmt>

<continue>continue;</continue> </block_content>}</block>

</block_content>}</block></switch>

<expr_stmt><expr><name>d</name> <operator>+=</operator> <ternary><condition><expr><name>d</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">0.5</literal></expr> </then><else>: <expr><literal type="number">0.5</literal></expr></else></ternary></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>sample_fmt</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>AV_SAMPLE_FMT_S16</name></expr>:</case> <block>{<block_content>

<decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>sp</name> <init>= <expr><name>table</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>sp</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>int16_t</name><operator>)</operator><name>d</name></expr>;</expr_stmt>

<expr_stmt><expr><name>table</name> <operator>=</operator> <name>sp</name></expr>;</expr_stmt>

<continue>continue;</continue> </block_content>}</block>

<case>case <expr><name>AV_SAMPLE_FMT_S32</name></expr>:</case> <block>{<block_content>

<decl_stmt><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>ip</name> <init>= <expr><name>table</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>ip</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>int32_t</name><operator>)</operator><name>d</name></expr>;</expr_stmt>

<expr_stmt><expr><name>table</name> <operator>=</operator> <name>ip</name></expr>;</expr_stmt>

<continue>continue;</continue> </block_content>}</block>

<default>default:</default>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></switch>

</block_content>}</block></for>

</block_content>}</block></function>

</unit>
