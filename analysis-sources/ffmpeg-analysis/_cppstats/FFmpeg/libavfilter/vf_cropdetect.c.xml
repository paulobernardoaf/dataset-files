<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavfilter\vf_cropdetect.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/imgutils.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/opt.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avfilter.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"formats.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"video.h"</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct <name>CropDetectContext</name> <block>{

<decl_stmt><decl><type><specifier>const</specifier> <name>AVClass</name> <modifier>*</modifier></type><name>class</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>x1</name></decl>, <name>y1</name>, <name>x2</name>, <name>y2</name>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>limit</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>round</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>reset_count</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>frame_nb</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>max_pixsteps</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>max_outliers</name></decl>;</decl_stmt>

}</block></struct></type> <name>CropDetectContext</name>;</typedef>

<function><type><specifier>static</specifier> <name>int</name></type> <name>query_formats</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>enum</name> <name>AVPixelFormat</name></name></type> <name><name>pix_fmts</name><index>[]</index></name> <init>= <expr><block>{

<expr><name>AV_PIX_FMT_YUV420P</name></expr>, <expr><name>AV_PIX_FMT_YUVJ420P</name></expr>,

<expr><name>AV_PIX_FMT_YUV422P</name></expr>, <expr><name>AV_PIX_FMT_YUVJ422P</name></expr>,

<expr><name>AV_PIX_FMT_YUV444P</name></expr>, <expr><name>AV_PIX_FMT_YUVJ444P</name></expr>,

<expr><name>AV_PIX_FMT_YUV411P</name></expr>, <expr><name>AV_PIX_FMT_GRAY8</name></expr>,

<expr><name>AV_PIX_FMT_YUV440P</name></expr>, <expr><name>AV_PIX_FMT_YUV410P</name></expr>,

<expr><name>AV_PIX_FMT_YUV420P9</name></expr> , <expr><name>AV_PIX_FMT_YUV422P9</name></expr> , <expr><name>AV_PIX_FMT_YUV444P9</name></expr>,

<expr><name>AV_PIX_FMT_YUV420P10</name></expr>, <expr><name>AV_PIX_FMT_YUV422P10</name></expr>, <expr><name>AV_PIX_FMT_YUV444P10</name></expr>,

<expr><name>AV_PIX_FMT_YUV420P12</name></expr>, <expr><name>AV_PIX_FMT_YUV422P12</name></expr>, <expr><name>AV_PIX_FMT_YUV444P12</name></expr>,

<expr><name>AV_PIX_FMT_YUV420P14</name></expr>, <expr><name>AV_PIX_FMT_YUV422P14</name></expr>, <expr><name>AV_PIX_FMT_YUV444P14</name></expr>,

<expr><name>AV_PIX_FMT_YUV420P16</name></expr>, <expr><name>AV_PIX_FMT_YUV422P16</name></expr>, <expr><name>AV_PIX_FMT_YUV444P16</name></expr>,

<expr><name>AV_PIX_FMT_NV12</name></expr>, <expr><name>AV_PIX_FMT_NV21</name></expr>,

<expr><name>AV_PIX_FMT_RGB24</name></expr>, <expr><name>AV_PIX_FMT_BGR24</name></expr>,

<expr><name>AV_PIX_FMT_RGBA</name></expr>, <expr><name>AV_PIX_FMT_BGRA</name></expr>,

<expr><name>AV_PIX_FMT_NONE</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFilterFormats</name> <modifier>*</modifier></type><name>fmts_list</name> <init>= <expr><call><name>ff_make_format_list</name><argument_list>(<argument><expr><name>pix_fmts</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>fmts_list</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>ff_set_common_formats</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>fmts_list</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>checkline</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bpp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>total</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>div</name> <init>= <expr><name>len</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>src16</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint16_t</name> <operator>*</operator><operator>)</operator><name>src</name></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>bpp</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">1</literal></expr>:</case>

<while>while <condition>(<expr><name>len</name> <operator>&gt;=</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>total</name> <operator>+=</operator> <name><name>src</name><index>[ <expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>src</name><index>[ <expr><name>stride</name></expr>]</index></name> <operator>+</operator> <name><name>src</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>stride</name></expr>]</index></name> <operator>+</operator> <name><name>src</name><index>[<expr><literal type="number">3</literal><operator>*</operator><name>stride</name></expr>]</index></name>

<operator>+</operator> <name><name>src</name><index>[<expr><literal type="number">4</literal><operator>*</operator><name>stride</name></expr>]</index></name> <operator>+</operator> <name><name>src</name><index>[<expr><literal type="number">5</literal><operator>*</operator><name>stride</name></expr>]</index></name> <operator>+</operator> <name><name>src</name><index>[<expr><literal type="number">6</literal><operator>*</operator><name>stride</name></expr>]</index></name> <operator>+</operator> <name><name>src</name><index>[<expr><literal type="number">7</literal><operator>*</operator><name>stride</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>src</name> <operator>+=</operator> <literal type="number">8</literal><operator>*</operator><name>stride</name></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>-=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

</block_content>}</block></while>

<while>while <condition>(<expr><operator>--</operator><name>len</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>total</name> <operator>+=</operator> <name><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>

</block_content>}</block></while>

<break>break;</break>

<case>case <expr><literal type="number">2</literal></expr>:</case>

<expr_stmt><expr><name>stride</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<while>while <condition>(<expr><name>len</name> <operator>&gt;=</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>total</name> <operator>+=</operator> <name><name>src16</name><index>[ <expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>src16</name><index>[ <expr><name>stride</name></expr>]</index></name> <operator>+</operator> <name><name>src16</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>stride</name></expr>]</index></name> <operator>+</operator> <name><name>src16</name><index>[<expr><literal type="number">3</literal><operator>*</operator><name>stride</name></expr>]</index></name>

<operator>+</operator> <name><name>src16</name><index>[<expr><literal type="number">4</literal><operator>*</operator><name>stride</name></expr>]</index></name> <operator>+</operator> <name><name>src16</name><index>[<expr><literal type="number">5</literal><operator>*</operator><name>stride</name></expr>]</index></name> <operator>+</operator> <name><name>src16</name><index>[<expr><literal type="number">6</literal><operator>*</operator><name>stride</name></expr>]</index></name> <operator>+</operator> <name><name>src16</name><index>[<expr><literal type="number">7</literal><operator>*</operator><name>stride</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>src16</name> <operator>+=</operator> <literal type="number">8</literal><operator>*</operator><name>stride</name></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>-=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

</block_content>}</block></while>

<while>while <condition>(<expr><operator>--</operator><name>len</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>total</name> <operator>+=</operator> <name><name>src16</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>src16</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>

</block_content>}</block></while>

<break>break;</break>

<case>case <expr><literal type="number">3</literal></expr>:</case>

<case>case <expr><literal type="number">4</literal></expr>:</case>

<while>while <condition>(<expr><name>len</name> <operator>&gt;=</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>total</name> <operator>+=</operator> <name><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>src</name><index>[<expr><literal type="number">1</literal></expr> ]</index></name> <operator>+</operator> <name><name>src</name><index>[<expr><literal type="number">2</literal></expr> ]</index></name>

<operator>+</operator> <name><name>src</name><index>[ <expr><name>stride</name></expr>]</index></name> <operator>+</operator> <name><name>src</name><index>[<expr><literal type="number">1</literal><operator>+</operator> <name>stride</name></expr>]</index></name> <operator>+</operator> <name><name>src</name><index>[<expr><literal type="number">2</literal><operator>+</operator> <name>stride</name></expr>]</index></name>

<operator>+</operator> <name><name>src</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>stride</name></expr>]</index></name> <operator>+</operator> <name><name>src</name><index>[<expr><literal type="number">1</literal><operator>+</operator><literal type="number">2</literal><operator>*</operator><name>stride</name></expr>]</index></name> <operator>+</operator> <name><name>src</name><index>[<expr><literal type="number">2</literal><operator>+</operator><literal type="number">2</literal><operator>*</operator><name>stride</name></expr>]</index></name>

<operator>+</operator> <name><name>src</name><index>[<expr><literal type="number">3</literal><operator>*</operator><name>stride</name></expr>]</index></name> <operator>+</operator> <name><name>src</name><index>[<expr><literal type="number">1</literal><operator>+</operator><literal type="number">3</literal><operator>*</operator><name>stride</name></expr>]</index></name> <operator>+</operator> <name><name>src</name><index>[<expr><literal type="number">2</literal><operator>+</operator><literal type="number">3</literal><operator>*</operator><name>stride</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>src</name> <operator>+=</operator> <literal type="number">4</literal><operator>*</operator><name>stride</name></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>-=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

</block_content>}</block></while>

<while>while <condition>(<expr><operator>--</operator><name>len</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>total</name> <operator>+=</operator> <name><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>src</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>src</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><name>div</name> <operator>*=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<expr_stmt><expr><name>total</name> <operator>/=</operator> <name>div</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"total:%d\n"</literal></expr></argument>, <argument><expr><name>total</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>total</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>init</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>CropDetectContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>frame_nb</name></name> <operator>=</operator> <operator>-</operator><literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_VERBOSE</name></expr></argument>, <argument><expr><literal type="string">"limit:%f round:%d reset_count:%d\n"</literal></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>limit</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>round</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>reset_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>config_input</name><parameter_list>(<parameter><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>inlink</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>inlink</name><operator>-&gt;</operator><name>dst</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CropDetectContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>AVPixFmtDescriptor</name> <modifier>*</modifier></type><name>desc</name> <init>= <expr><call><name>av_pix_fmt_desc_get</name><argument_list>(<argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>format</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_image_fill_max_pixsteps</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>max_pixsteps</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>limit</name></name> <operator>&lt;</operator> <literal type="number">1.0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>limit</name></name> <operator>*=</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name><name>desc</name><operator>-&gt;</operator><name>comp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>depth</name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>x1</name></name> <operator>=</operator> <name><name>inlink</name><operator>-&gt;</operator><name>w</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>y1</name></name> <operator>=</operator> <name><name>inlink</name><operator>-&gt;</operator><name>h</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>x2</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>y2</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SET_META</name><parameter_list>(<parameter><type><name>key</name></type></parameter>, <parameter><type><name>value</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>av_dict_set_int(metadata, key, value, 0)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>int</name></type> <name>filter_frame</name><parameter_list>(<parameter><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>inlink</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>frame</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>inlink</name><operator>-&gt;</operator><name>dst</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CropDetectContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>bpp</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>max_pixsteps</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>w</name></decl>, <decl><type ref="prev"/><name>h</name></decl>, <decl><type ref="prev"/><name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>, <decl><type ref="prev"/><name>shrink_by</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVDictionary</name> <modifier>*</modifier><modifier>*</modifier></type><name>metadata</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>outliers</name></decl>, <decl><type ref="prev"/><name>last_y</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>limit</name> <init>= <expr><call><name>lrint</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>limit</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>++</operator><name><name>s</name><operator>-&gt;</operator><name>frame_nb</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>metadata</name> <operator>=</operator> <operator>&amp;</operator><name><name>frame</name><operator>-&gt;</operator><name>metadata</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>reset_count</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>frame_nb</name></name> <operator>&gt;</operator> <name><name>s</name><operator>-&gt;</operator><name>reset_count</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>x1</name></name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>width</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>y1</name></name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>height</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>x2</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>y2</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>frame_nb</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FIND</name><parameter_list>(<parameter><type><name>DST</name></type></parameter>, <parameter><type><name>FROM</name></type></parameter>, <parameter><type><name>NOEND</name></type></parameter>, <parameter><type><name>INC</name></type></parameter>, <parameter><type><name>STEP0</name></type></parameter>, <parameter><type><name>STEP1</name></type></parameter>, <parameter><type><name>LEN</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>outliers = 0;for (last_y = y = FROM; NOEND; y = y INC) {if (checkline(ctx, frame-&gt;data[0] + STEP0 * y, STEP1, LEN, bpp) &gt; limit) {if (++outliers &gt; s-&gt;max_outliers) { DST = last_y;break;}} elselast_y = y INC;}</cpp:value></cpp:define>

<expr_stmt><expr><call><name>FIND</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>y1</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>y</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>y1</name></name></expr></argument>, <argument><expr><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>bpp</name></expr></argument>, <argument><expr><name><name>frame</name><operator>-&gt;</operator><name>width</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>FIND</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>y2</name></name></expr></argument>, <argument><expr><name><name>frame</name><operator>-&gt;</operator><name>height</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>y</name> <operator>&gt;</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>y2</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>y1</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>bpp</name></expr></argument>, <argument><expr><name><name>frame</name><operator>-&gt;</operator><name>width</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>FIND</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>x1</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>y</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>x1</name></name></expr></argument>, <argument><expr><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>bpp</name></expr></argument>, <argument><expr><name><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>frame</name><operator>-&gt;</operator><name>height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>FIND</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>x2</name></name></expr></argument>, <argument><expr><name><name>frame</name><operator>-&gt;</operator><name>width</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>y</name> <operator>&gt;</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>x2</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>x1</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>bpp</name></expr></argument>, <argument><expr><name><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>frame</name><operator>-&gt;</operator><name>height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>x</name> <operator>=</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>x1</name></name><operator>+</operator><literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <operator>~</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>y</name> <operator>=</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>y1</name></name><operator>+</operator><literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <operator>~</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>w</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>x2</name></name> <operator>-</operator> <name>x</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>h</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>y2</name></name> <operator>-</operator> <name>y</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>round</name></name> <operator>&lt;=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>round</name></name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>round</name></name> <operator>%</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>round</name></name> <operator>*=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>shrink_by</name> <operator>=</operator> <name>w</name> <operator>%</operator> <name><name>s</name><operator>-&gt;</operator><name>round</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>w</name> <operator>-=</operator> <name>shrink_by</name></expr>;</expr_stmt>

<expr_stmt><expr><name>x</name> <operator>+=</operator> <operator>(</operator><name>shrink_by</name><operator>/</operator><literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <operator>~</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>shrink_by</name> <operator>=</operator> <name>h</name> <operator>%</operator> <name><name>s</name><operator>-&gt;</operator><name>round</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>h</name> <operator>-=</operator> <name>shrink_by</name></expr>;</expr_stmt>

<expr_stmt><expr><name>y</name> <operator>+=</operator> <operator>(</operator><name>shrink_by</name><operator>/</operator><literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <operator>~</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SET_META</name><argument_list>(<argument><expr><literal type="string">"lavfi.cropdetect.x1"</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>x1</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SET_META</name><argument_list>(<argument><expr><literal type="string">"lavfi.cropdetect.x2"</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>x2</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SET_META</name><argument_list>(<argument><expr><literal type="string">"lavfi.cropdetect.y1"</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>y1</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SET_META</name><argument_list>(<argument><expr><literal type="string">"lavfi.cropdetect.y2"</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>y2</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SET_META</name><argument_list>(<argument><expr><literal type="string">"lavfi.cropdetect.w"</literal></expr></argument>, <argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SET_META</name><argument_list>(<argument><expr><literal type="string">"lavfi.cropdetect.h"</literal></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SET_META</name><argument_list>(<argument><expr><literal type="string">"lavfi.cropdetect.x"</literal></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SET_META</name><argument_list>(<argument><expr><literal type="string">"lavfi.cropdetect.y"</literal></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>,

<argument><expr><literal type="string">"x1:%d x2:%d y1:%d y2:%d w:%d h:%d x:%d y:%d pts:%"</literal><name>PRId64</name><literal type="string">" t:%f crop=%d:%d:%d:%d\n"</literal></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>x1</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>x2</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>y1</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>y2</name></name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name><name>frame</name><operator>-&gt;</operator><name>pts</name></name></expr></argument>,

<argument><expr><ternary><condition><expr><name><name>frame</name><operator>-&gt;</operator><name>pts</name></name> <operator>==</operator> <name>AV_NOPTS_VALUE</name></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><name><name>frame</name><operator>-&gt;</operator><name>pts</name></name> <operator>*</operator> <call><name>av_q2d</name><argument_list>(<argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>time_base</name></name></expr></argument>)</argument_list></call></expr></else></ternary></expr></argument>,

<argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>ff_filter_frame</name><argument_list>(<argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>dst</name><operator>-&gt;</operator><name>outputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>frame</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OFFSET</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>offsetof(CropDetectContext, x)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLAGS</name></cpp:macro> <cpp:value>AV_OPT_FLAG_VIDEO_PARAM|AV_OPT_FLAG_FILTERING_PARAM</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVOption</name></type> <name><name>cropdetect_options</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><literal type="string">"limit"</literal></expr>, <expr><literal type="string">"Threshold below which the pixel is considered black"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>limit</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_FLOAT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>dbl</name> <operator>=</operator> <literal type="number">24.0</literal><operator>/</operator><literal type="number">255</literal></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">65535</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"round"</literal></expr>, <expr><literal type="string">"Value by which the width/height should be divisible"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>round</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">16</literal></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"reset"</literal></expr>, <expr><literal type="string">"Recalculate the crop area after this many frames"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>reset_count</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0</literal></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"reset_count"</literal></expr>, <expr><literal type="string">"Recalculate the crop area after this many frames"</literal></expr>,<expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>reset_count</name></expr></argument>)</argument_list></call></expr>,<expr><name>AV_OPT_TYPE_INT</name></expr>,<expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0</literal></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"max_outliers"</literal></expr>, <expr><literal type="string">"Threshold count of outliers"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>max_outliers</name></expr></argument>)</argument_list></call></expr>,<expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0</literal></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>AVFILTER_DEFINE_CLASS</name><argument_list>(<argument><expr><name>cropdetect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVFilterPad</name></type> <name><name>avfilter_vf_cropdetect_inputs</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"default"</literal></expr>,

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,

<expr><operator>.</operator><name>config_props</name> <operator>=</operator> <name>config_input</name></expr>,

<expr><operator>.</operator><name>filter_frame</name> <operator>=</operator> <name>filter_frame</name></expr>,

}</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVFilterPad</name></type> <name><name>avfilter_vf_cropdetect_outputs</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"default"</literal></expr>,

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>

}</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFilter</name></type> <name>ff_vf_cropdetect</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"cropdetect"</literal></expr>,

<expr><operator>.</operator><name>description</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"Auto-detect crop size."</literal></expr></argument>)</argument_list></call></expr>,

<expr><operator>.</operator><name>priv_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>CropDetectContext</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><operator>.</operator><name>priv_class</name> <operator>=</operator> <operator>&amp;</operator><name>cropdetect_class</name></expr>,

<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>init</name></expr>,

<expr><operator>.</operator><name>query_formats</name> <operator>=</operator> <name>query_formats</name></expr>,

<expr><operator>.</operator><name>inputs</name> <operator>=</operator> <name>avfilter_vf_cropdetect_inputs</name></expr>,

<expr><operator>.</operator><name>outputs</name> <operator>=</operator> <name>avfilter_vf_cropdetect_outputs</name></expr>,

<expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>AVFILTER_FLAG_SUPPORT_TIMELINE_GENERIC</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

</unit>
