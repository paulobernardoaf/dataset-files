<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavfilter\af_earwax.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/channel_layout.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avfilter.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"audio.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"formats.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NUMTAPS</name></cpp:macro> <cpp:value>64</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int8_t</name></type> <name><name>filt</name><index>[<expr><name>NUMTAPS</name></expr>]</index></name> <init>= <expr><block>{

<expr><literal type="number">4</literal></expr>, <expr><operator>-</operator><literal type="number">6</literal></expr>, 

<expr><literal type="number">4</literal></expr>, <expr><operator>-</operator><literal type="number">11</literal></expr>, 

<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">5</literal></expr>, 

<expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, 

<expr><operator>-</operator><literal type="number">2</literal></expr>, <expr><literal type="number">5</literal></expr>, 

<expr><operator>-</operator><literal type="number">5</literal></expr>, <expr><literal type="number">0</literal></expr>,

<expr><literal type="number">9</literal></expr>, <expr><literal type="number">1</literal></expr>,

<expr><literal type="number">6</literal></expr>, <expr><literal type="number">3</literal></expr>, 

<expr><operator>-</operator><literal type="number">4</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, 

<expr><operator>-</operator><literal type="number">5</literal></expr>, <expr><operator>-</operator><literal type="number">3</literal></expr>, 

<expr><operator>-</operator><literal type="number">2</literal></expr>, <expr><operator>-</operator><literal type="number">5</literal></expr>, 

<expr><operator>-</operator><literal type="number">7</literal></expr>, <expr><literal type="number">1</literal></expr>, 

<expr><literal type="number">6</literal></expr>, <expr><operator>-</operator><literal type="number">7</literal></expr>, 

<expr><literal type="number">30</literal></expr>, <expr><operator>-</operator><literal type="number">29</literal></expr>, 

<expr><literal type="number">12</literal></expr>, <expr><operator>-</operator><literal type="number">3</literal></expr>, 

<expr><operator>-</operator><literal type="number">11</literal></expr>, <expr><literal type="number">4</literal></expr>, 

<expr><operator>-</operator><literal type="number">3</literal></expr>, <expr><literal type="number">7</literal></expr>, 

<expr><operator>-</operator><literal type="number">20</literal></expr>, <expr><literal type="number">23</literal></expr>, 

<expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>, 

<expr><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">6</literal></expr>, 

<expr><operator>-</operator><literal type="number">14</literal></expr>, <expr><operator>-</operator><literal type="number">5</literal></expr>, 

<expr><literal type="number">15</literal></expr>, <expr><operator>-</operator><literal type="number">18</literal></expr>, 

<expr><literal type="number">6</literal></expr>, <expr><literal type="number">7</literal></expr>, 

<expr><literal type="number">15</literal></expr>, <expr><operator>-</operator><literal type="number">10</literal></expr>, 

<expr><operator>-</operator><literal type="number">14</literal></expr>, <expr><literal type="number">22</literal></expr>, 

<expr><operator>-</operator><literal type="number">7</literal></expr>, <expr><operator>-</operator><literal type="number">2</literal></expr>, 

<expr><operator>-</operator><literal type="number">4</literal></expr>, <expr><literal type="number">9</literal></expr>, 

<expr><literal type="number">6</literal></expr>, <expr><operator>-</operator><literal type="number">12</literal></expr>, 

<expr><literal type="number">6</literal></expr>, <expr><operator>-</operator><literal type="number">6</literal></expr>, 

<expr><literal type="number">0</literal></expr>, <expr><operator>-</operator><literal type="number">11</literal></expr>,

<expr><literal type="number">0</literal></expr>, <expr><operator>-</operator><literal type="number">5</literal></expr>,

<expr><literal type="number">4</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<typedef>typedef <type><struct>struct <name>EarwaxContext</name> <block>{

<decl_stmt><decl><type><name>int16_t</name></type> <name><name>taps</name><index>[<expr><name>NUMTAPS</name> <operator>*</operator> <literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

}</block></struct></type> <name>EarwaxContext</name>;</typedef>

<function><type><specifier>static</specifier> <name>int</name></type> <name>query_formats</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name><name>sample_rates</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">44100</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFilterFormats</name> <modifier>*</modifier></type><name>formats</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFilterChannelLayouts</name> <modifier>*</modifier></type><name>layout</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_add_format</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>formats</name></expr></argument>, <argument><expr><name>AV_SAMPLE_FMT_S16</name></expr></argument> )</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator>

<operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_set_common_formats</name> <argument_list>(<argument><expr><name>ctx</name></expr></argument> , <argument><expr><name>formats</name></expr></argument> )</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator>

<operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_add_channel_layout</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>layout</name></expr></argument> , <argument><expr><name>AV_CH_LAYOUT_STEREO</name></expr></argument> )</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator>

<operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_set_common_channel_layouts</name> <argument_list>(<argument><expr><name>ctx</name></expr></argument> , <argument><expr><name>layout</name></expr></argument> )</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator>

<operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_set_common_samplerates</name> <argument_list>(<argument><expr><name>ctx</name></expr></argument> , <argument><expr><call><name>ff_make_format_list</name><argument_list>(<argument><expr><name>sample_rates</name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int16_t</name> <modifier>*</modifier></type><name>scalarproduct</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name>endin</name></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>out</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int32_t</name></type> <name>sample</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int16_t</name></type> <name>j</name></decl>;</decl_stmt>

<while>while <condition>(<expr><name>in</name> <operator>&lt;</operator> <name>endin</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>sample</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>NUMTAPS</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name>sample</name> <operator>+=</operator> <name><name>in</name><index>[<expr><name>j</name></expr>]</index></name> <operator>*</operator> <name><name>filt</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><operator>*</operator><name>out</name> <operator>=</operator> <call><name>av_clip_int16</name><argument_list>(<argument><expr><name>sample</name> <operator>&gt;&gt;</operator> <literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>out</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>in</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<return>return <expr><name>out</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>filter_frame</name><parameter_list>(<parameter><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>inlink</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>insamples</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>outlink</name> <init>= <expr><name><name>inlink</name><operator>-&gt;</operator><name>dst</name><operator>-&gt;</operator><name>outputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>taps</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>endin</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>in</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>out</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>outsamples</name> <init>= <expr><call><name>ff_get_audio_buffer</name><argument_list>(<argument><expr><name>outlink</name></expr></argument>, <argument><expr><name><name>insamples</name><operator>-&gt;</operator><name>nb_samples</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>outsamples</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>insamples</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_frame_copy_props</name><argument_list>(<argument><expr><name>outsamples</name></expr></argument>, <argument><expr><name>insamples</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>taps</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>EarwaxContext</name> <operator>*</operator><operator>)</operator><name><name>inlink</name><operator>-&gt;</operator><name>dst</name><operator>-&gt;</operator><name>priv</name></name><operator>)</operator><operator>-&gt;</operator><name>taps</name></expr>;</expr_stmt>

<expr_stmt><expr><name>out</name> <operator>=</operator> <operator>(</operator><name>int16_t</name> <operator>*</operator><operator>)</operator><name><name>outsamples</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>in</name> <operator>=</operator> <operator>(</operator><name>int16_t</name> <operator>*</operator><operator>)</operator><name><name>insamples</name> <operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>NUMTAPS</name></expr></argument>, <argument><expr><literal type="number">2</literal><operator>*</operator><name><name>insamples</name><operator>-&gt;</operator><name>nb_samples</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>taps</name><operator>+</operator><name>NUMTAPS</name></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><name>len</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>taps</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>out</name> <operator>=</operator> <call><name>scalarproduct</name><argument_list>(<argument><expr><name>taps</name></expr></argument>, <argument><expr><name>taps</name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><literal type="number">2</literal><operator>*</operator><name><name>insamples</name><operator>-&gt;</operator><name>nb_samples</name></name> <operator>&gt;=</operator> <name>NUMTAPS</name></expr> )</condition><block>{<block_content>

<expr_stmt><expr><name>endin</name> <operator>=</operator> <name>in</name> <operator>+</operator> <name><name>insamples</name><operator>-&gt;</operator><name>nb_samples</name></name> <operator>*</operator> <literal type="number">2</literal> <operator>-</operator> <name>NUMTAPS</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>scalarproduct</name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><name>endin</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>taps</name></expr></argument>, <argument><expr><name>endin</name></expr></argument>, <argument><expr><name>NUMTAPS</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>taps</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name>taps</name></expr></argument>, <argument><expr><name>taps</name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name><name>insamples</name><operator>-&gt;</operator><name>nb_samples</name></name></expr></argument>, <argument><expr><name>NUMTAPS</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>taps</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>insamples</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>ff_filter_frame</name><argument_list>(<argument><expr><name>outlink</name></expr></argument>, <argument><expr><name>outsamples</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVFilterPad</name></type> <name><name>earwax_inputs</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"default"</literal></expr>,

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_AUDIO</name></expr>,

<expr><operator>.</operator><name>filter_frame</name> <operator>=</operator> <name>filter_frame</name></expr>,

}</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVFilterPad</name></type> <name><name>earwax_outputs</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"default"</literal></expr>,

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_AUDIO</name></expr>,

}</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFilter</name></type> <name>ff_af_earwax</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"earwax"</literal></expr>,

<expr><operator>.</operator><name>description</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"Widen the stereo image."</literal></expr></argument>)</argument_list></call></expr>,

<expr><operator>.</operator><name>query_formats</name> <operator>=</operator> <name>query_formats</name></expr>,

<expr><operator>.</operator><name>priv_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>EarwaxContext</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><operator>.</operator><name>inputs</name> <operator>=</operator> <name>earwax_inputs</name></expr>,

<expr><operator>.</operator><name>outputs</name> <operator>=</operator> <name>earwax_outputs</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

</unit>
