<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavfilter\af_volume.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/channel_layout.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/common.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/eval.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/ffmath.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/float_dsp.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/intreadwrite.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/opt.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/replaygain.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"audio.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avfilter.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"formats.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"af_volume.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier> <specifier>const</specifier></type> <name><name>precision_str</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="string">"fixed"</literal></expr>, <expr><literal type="string">"float"</literal></expr>, <expr><literal type="string">"double"</literal></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>var_names</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="string">"n"</literal></expr>, 

<expr><literal type="string">"nb_channels"</literal></expr>, 

<expr><literal type="string">"nb_consumed_samples"</literal></expr>, 

<expr><literal type="string">"nb_samples"</literal></expr>, 

<expr><literal type="string">"pos"</literal></expr>, 

<expr><literal type="string">"pts"</literal></expr>, 

<expr><literal type="string">"sample_rate"</literal></expr>, 

<expr><literal type="string">"startpts"</literal></expr>, 

<expr><literal type="string">"startt"</literal></expr>, 

<expr><literal type="string">"t"</literal></expr>, 

<expr><literal type="string">"tb"</literal></expr>, 

<expr><literal type="string">"volume"</literal></expr>, 

<expr><name>NULL</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OFFSET</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>offsetof(VolumeContext, x)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>A</name></cpp:macro> <cpp:value>AV_OPT_FLAG_AUDIO_PARAM</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F</name></cpp:macro> <cpp:value>AV_OPT_FLAG_FILTERING_PARAM</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T</name></cpp:macro> <cpp:value>AV_OPT_FLAG_RUNTIME_PARAM</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVOption</name></type> <name><name>volume_options</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><literal type="string">"volume"</literal></expr>, <expr><literal type="string">"set volume adjustment expression"</literal></expr>,

<expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>volume_expr</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_STRING</name></expr>, <expr><block>{ <expr><operator>.</operator><name>str</name> <operator>=</operator> <literal type="string">"1.0"</literal></expr> }</block></expr>, <expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>A</name><operator>|</operator><name>F</name><operator>|</operator><name>T</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"precision"</literal></expr>, <expr><literal type="string">"select mathematical precision"</literal></expr>,

<expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>precision</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>PRECISION_FLOAT</name></expr> }</block></expr>, <expr><name>PRECISION_FIXED</name></expr>, <expr><name>PRECISION_DOUBLE</name></expr>, <expr><name>A</name><operator>|</operator><name>F</name></expr>, <expr><literal type="string">"precision"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"fixed"</literal></expr>, <expr><literal type="string">"select 8-bit fixed-point"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>PRECISION_FIXED</name></expr> }</block></expr>, <expr><name>INT_MIN</name></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>A</name><operator>|</operator><name>F</name></expr>, <expr><literal type="string">"precision"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"float"</literal></expr>, <expr><literal type="string">"select 32-bit floating-point"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>PRECISION_FLOAT</name></expr> }</block></expr>, <expr><name>INT_MIN</name></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>A</name><operator>|</operator><name>F</name></expr>, <expr><literal type="string">"precision"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"double"</literal></expr>, <expr><literal type="string">"select 64-bit floating-point"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>PRECISION_DOUBLE</name></expr> }</block></expr>, <expr><name>INT_MIN</name></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>A</name><operator>|</operator><name>F</name></expr>, <expr><literal type="string">"precision"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"eval"</literal></expr>, <expr><literal type="string">"specify when to evaluate expressions"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>eval_mode</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>EVAL_MODE_ONCE</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>EVAL_MODE_NB</name><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>A</name><operator>|</operator><name>F</name></expr>, <expr><literal type="string">"eval"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"once"</literal></expr>, <expr><literal type="string">"eval volume expression once"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>EVAL_MODE_ONCE</name></expr>}</block></expr>, <expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>A</name><operator>|</operator><name>F</name></expr>, <expr><operator>.</operator><name>unit</name> <operator>=</operator> <literal type="string">"eval"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"frame"</literal></expr>, <expr><literal type="string">"eval volume expression per-frame"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>EVAL_MODE_FRAME</name></expr>}</block></expr>, <expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>A</name><operator>|</operator><name>F</name></expr>, <expr><operator>.</operator><name>unit</name> <operator>=</operator> <literal type="string">"eval"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"replaygain"</literal></expr>, <expr><literal type="string">"Apply replaygain side data when present"</literal></expr>,

<expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>replaygain</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>REPLAYGAIN_DROP</name></expr> }</block></expr>, <expr><name>REPLAYGAIN_DROP</name></expr>, <expr><name>REPLAYGAIN_ALBUM</name></expr>, <expr><name>A</name><operator>|</operator><name>F</name></expr>, <expr><literal type="string">"replaygain"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"drop"</literal></expr>, <expr><literal type="string">"replaygain side data is dropped"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>REPLAYGAIN_DROP</name></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>A</name><operator>|</operator><name>F</name></expr>, <expr><literal type="string">"replaygain"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"ignore"</literal></expr>, <expr><literal type="string">"replaygain side data is ignored"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>REPLAYGAIN_IGNORE</name></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>A</name><operator>|</operator><name>F</name></expr>, <expr><literal type="string">"replaygain"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"track"</literal></expr>, <expr><literal type="string">"track gain is preferred"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>REPLAYGAIN_TRACK</name></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>A</name><operator>|</operator><name>F</name></expr>, <expr><literal type="string">"replaygain"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"album"</literal></expr>, <expr><literal type="string">"album gain is preferred"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>REPLAYGAIN_ALBUM</name></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>A</name><operator>|</operator><name>F</name></expr>, <expr><literal type="string">"replaygain"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"replaygain_preamp"</literal></expr>, <expr><literal type="string">"Apply replaygain pre-amplification"</literal></expr>,

<expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>replaygain_preamp</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_DOUBLE</name></expr>, <expr><block>{ <expr><operator>.</operator><name>dbl</name> <operator>=</operator> <literal type="number">0.0</literal></expr> }</block></expr>, <expr><operator>-</operator><literal type="number">15.0</literal></expr>, <expr><literal type="number">15.0</literal></expr>, <expr><name>A</name><operator>|</operator><name>F</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"replaygain_noclip"</literal></expr>, <expr><literal type="string">"Apply replaygain clipping prevention"</literal></expr>,

<expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>replaygain_noclip</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_BOOL</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">1</literal></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>A</name><operator>|</operator><name>F</name></expr> }</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>AVFILTER_DEFINE_CLASS</name><argument_list>(<argument><expr><name>volume</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function><type><specifier>static</specifier> <name>int</name></type> <name>set_expr</name><parameter_list>(<parameter><decl><type><name>AVExpr</name> <modifier>*</modifier><modifier>*</modifier></type><name>pexpr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>expr</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>log_ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVExpr</name> <modifier>*</modifier></type><name>old</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>pexpr</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>old</name> <operator>=</operator> <operator>*</operator><name>pexpr</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>av_expr_parse</name><argument_list>(<argument><expr><name>pexpr</name></expr></argument>, <argument><expr><name>expr</name></expr></argument>, <argument><expr><name>var_names</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>log_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>log_ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"Error when evaluating the volume expression '%s'\n"</literal></expr></argument>, <argument><expr><name>expr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>pexpr</name> <operator>=</operator> <name>old</name></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_expr_free</name><argument_list>(<argument><expr><name>old</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>init</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VolumeContext</name> <modifier>*</modifier></type><name>vol</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>vol</name><operator>-&gt;</operator><name>fdsp</name></name> <operator>=</operator> <call><name>avpriv_float_dsp_alloc</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>vol</name><operator>-&gt;</operator><name>fdsp</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>set_expr</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vol</name><operator>-&gt;</operator><name>volume_pexpr</name></name></expr></argument>, <argument><expr><name><name>vol</name><operator>-&gt;</operator><name>volume_expr</name></name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>void</name></type> <name>uninit</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VolumeContext</name> <modifier>*</modifier></type><name>vol</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_expr_free</name><argument_list>(<argument><expr><name><name>vol</name><operator>-&gt;</operator><name>volume_pexpr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_opt_free</name><argument_list>(<argument><expr><name>vol</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vol</name><operator>-&gt;</operator><name>fdsp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>query_formats</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VolumeContext</name> <modifier>*</modifier></type><name>vol</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFilterFormats</name> <modifier>*</modifier></type><name>formats</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFilterChannelLayouts</name> <modifier>*</modifier></type><name>layouts</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>enum</name> <name>AVSampleFormat</name></name></type> <name><name>sample_fmts</name><index>[]</index><index>[<expr><literal type="number">7</literal></expr>]</index></name> <init>= <expr><block>{

<expr><index>[<expr><name>PRECISION_FIXED</name></expr>]</index> <operator>=</operator> <block>{

<expr><name>AV_SAMPLE_FMT_U8</name></expr>,

<expr><name>AV_SAMPLE_FMT_U8P</name></expr>,

<expr><name>AV_SAMPLE_FMT_S16</name></expr>,

<expr><name>AV_SAMPLE_FMT_S16P</name></expr>,

<expr><name>AV_SAMPLE_FMT_S32</name></expr>,

<expr><name>AV_SAMPLE_FMT_S32P</name></expr>,

<expr><name>AV_SAMPLE_FMT_NONE</name></expr>

}</block></expr>,

<expr><index>[<expr><name>PRECISION_FLOAT</name></expr>]</index> <operator>=</operator> <block>{

<expr><name>AV_SAMPLE_FMT_FLT</name></expr>,

<expr><name>AV_SAMPLE_FMT_FLTP</name></expr>,

<expr><name>AV_SAMPLE_FMT_NONE</name></expr>

}</block></expr>,

<expr><index>[<expr><name>PRECISION_DOUBLE</name></expr>]</index> <operator>=</operator> <block>{

<expr><name>AV_SAMPLE_FMT_DBL</name></expr>,

<expr><name>AV_SAMPLE_FMT_DBLP</name></expr>,

<expr><name>AV_SAMPLE_FMT_NONE</name></expr>

}</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name>layouts</name> <operator>=</operator> <call><name>ff_all_channel_counts</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>layouts</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_set_common_channel_layouts</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>layouts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>formats</name> <operator>=</operator> <call><name>ff_make_format_list</name><argument_list>(<argument><expr><name><name>sample_fmts</name><index>[<expr><name><name>vol</name><operator>-&gt;</operator><name>precision</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>formats</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_set_common_formats</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>formats</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>formats</name> <operator>=</operator> <call><name>ff_all_samplerates</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>formats</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>ff_set_common_samplerates</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>formats</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>scale_samples_u8</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>nb_samples</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>volume</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nb_samples</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>dst</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>av_clip_uint8</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>int64_t</name><operator>)</operator><name><name>src</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <literal type="number">128</literal><operator>)</operator> <operator>*</operator> <name>volume</name> <operator>+</operator> <literal type="number">128</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>+</operator> <literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>scale_samples_u8_small</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>nb_samples</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>volume</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nb_samples</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>dst</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>av_clip_uint8</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><operator>(</operator><name><name>src</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <literal type="number">128</literal><operator>)</operator> <operator>*</operator> <name>volume</name> <operator>+</operator> <literal type="number">128</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>+</operator> <literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>scale_samples_s16</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>nb_samples</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>volume</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>smp_dst</name> <init>= <expr><operator>(</operator><name>int16_t</name> <operator>*</operator><operator>)</operator><name>dst</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name>smp_src</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>int16_t</name> <operator>*</operator><operator>)</operator><name>src</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nb_samples</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>smp_dst</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>av_clip_int16</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>int64_t</name><operator>)</operator><name><name>smp_src</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name>volume</name> <operator>+</operator> <literal type="number">128</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>scale_samples_s16_small</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>nb_samples</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>volume</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>smp_dst</name> <init>= <expr><operator>(</operator><name>int16_t</name> <operator>*</operator><operator>)</operator><name>dst</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name>smp_src</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>int16_t</name> <operator>*</operator><operator>)</operator><name>src</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nb_samples</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>smp_dst</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>av_clip_int16</name><argument_list>(<argument><expr><operator>(</operator><name><name>smp_src</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name>volume</name> <operator>+</operator> <literal type="number">128</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>scale_samples_s32</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>nb_samples</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>volume</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>smp_dst</name> <init>= <expr><operator>(</operator><name>int32_t</name> <operator>*</operator><operator>)</operator><name>dst</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int32_t</name> <modifier>*</modifier></type><name>smp_src</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>int32_t</name> <operator>*</operator><operator>)</operator><name>src</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nb_samples</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>smp_dst</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>av_clipl_int32</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><operator>(</operator><name>int64_t</name><operator>)</operator><name><name>smp_src</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name>volume</name> <operator>+</operator> <literal type="number">128</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>void</name></type> <name>volume_init</name><parameter_list>(<parameter><decl><type><name>VolumeContext</name> <modifier>*</modifier></type><name>vol</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>vol</name><operator>-&gt;</operator><name>samples_align</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<switch>switch <condition>(<expr><call><name>av_get_packed_sample_fmt</name><argument_list>(<argument><expr><name><name>vol</name><operator>-&gt;</operator><name>sample_fmt</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<case>case <expr><name>AV_SAMPLE_FMT_U8</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>vol</name><operator>-&gt;</operator><name>volume_i</name></name> <operator>&lt;</operator> <literal type="number">0x1000000</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>vol</name><operator>-&gt;</operator><name>scale_samples</name></name> <operator>=</operator> <name>scale_samples_u8_small</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>vol</name><operator>-&gt;</operator><name>scale_samples</name></name> <operator>=</operator> <name>scale_samples_u8</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<break>break;</break>

<case>case <expr><name>AV_SAMPLE_FMT_S16</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>vol</name><operator>-&gt;</operator><name>volume_i</name></name> <operator>&lt;</operator> <literal type="number">0x10000</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>vol</name><operator>-&gt;</operator><name>scale_samples</name></name> <operator>=</operator> <name>scale_samples_s16_small</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>vol</name><operator>-&gt;</operator><name>scale_samples</name></name> <operator>=</operator> <name>scale_samples_s16</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<break>break;</break>

<case>case <expr><name>AV_SAMPLE_FMT_S32</name></expr>:</case>

<expr_stmt><expr><name><name>vol</name><operator>-&gt;</operator><name>scale_samples</name></name> <operator>=</operator> <name>scale_samples_s32</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AV_SAMPLE_FMT_FLT</name></expr>:</case>

<expr_stmt><expr><name><name>vol</name><operator>-&gt;</operator><name>samples_align</name></name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AV_SAMPLE_FMT_DBL</name></expr>:</case>

<expr_stmt><expr><name><name>vol</name><operator>-&gt;</operator><name>samples_align</name></name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name>ARCH_X86</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ff_volume_init_x86</name><argument_list>(<argument><expr><name>vol</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>set_volume</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VolumeContext</name> <modifier>*</modifier></type><name>vol</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>vol</name><operator>-&gt;</operator><name>volume</name></name> <operator>=</operator> <call><name>av_expr_eval</name><argument_list>(<argument><expr><name><name>vol</name><operator>-&gt;</operator><name>volume_pexpr</name></name></expr></argument>, <argument><expr><name><name>vol</name><operator>-&gt;</operator><name>var_values</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>isnan</name><argument_list>(<argument><expr><name><name>vol</name><operator>-&gt;</operator><name>volume</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>vol</name><operator>-&gt;</operator><name>eval_mode</name></name> <operator>==</operator> <name>EVAL_MODE_ONCE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid value NaN for volume\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Invalid value NaN for volume, setting to 0\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vol</name><operator>-&gt;</operator><name>volume</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>vol</name><operator>-&gt;</operator><name>var_values</name><index>[<expr><name>VAR_VOLUME</name></expr>]</index></name> <operator>=</operator> <name><name>vol</name><operator>-&gt;</operator><name>volume</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_VERBOSE</name></expr></argument>, <argument><expr><literal type="string">"n:%f t:%f pts:%f precision:%s "</literal></expr></argument>,

<argument><expr><name><name>vol</name><operator>-&gt;</operator><name>var_values</name><index>[<expr><name>VAR_N</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>vol</name><operator>-&gt;</operator><name>var_values</name><index>[<expr><name>VAR_T</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>vol</name><operator>-&gt;</operator><name>var_values</name><index>[<expr><name>VAR_PTS</name></expr>]</index></name></expr></argument>,

<argument><expr><name><name>precision_str</name><index>[<expr><name><name>vol</name><operator>-&gt;</operator><name>precision</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>vol</name><operator>-&gt;</operator><name>precision</name></name> <operator>==</operator> <name>PRECISION_FIXED</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>vol</name><operator>-&gt;</operator><name>volume_i</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name><name>vol</name><operator>-&gt;</operator><name>volume</name></name> <operator>*</operator> <literal type="number">256</literal> <operator>+</operator> <literal type="number">0.5</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vol</name><operator>-&gt;</operator><name>volume</name></name> <operator>=</operator> <name><name>vol</name><operator>-&gt;</operator><name>volume_i</name></name> <operator>/</operator> <literal type="number">256.0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_VERBOSE</name></expr></argument>, <argument><expr><literal type="string">"volume_i:%d/255 "</literal></expr></argument>, <argument><expr><name><name>vol</name><operator>-&gt;</operator><name>volume_i</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_VERBOSE</name></expr></argument>, <argument><expr><literal type="string">"volume:%f volume_dB:%f\n"</literal></expr></argument>,

<argument><expr><name><name>vol</name><operator>-&gt;</operator><name>volume</name></name></expr></argument>, <argument><expr><literal type="number">20.0</literal><operator>*</operator><call><name>log10</name><argument_list>(<argument><expr><name><name>vol</name><operator>-&gt;</operator><name>volume</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>volume_init</name><argument_list>(<argument><expr><name>vol</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>config_output</name><parameter_list>(<parameter><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>outlink</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>outlink</name><operator>-&gt;</operator><name>src</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VolumeContext</name> <modifier>*</modifier></type><name>vol</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>inlink</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>inputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>vol</name><operator>-&gt;</operator><name>sample_fmt</name></name> <operator>=</operator> <name><name>inlink</name><operator>-&gt;</operator><name>format</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vol</name><operator>-&gt;</operator><name>channels</name></name> <operator>=</operator> <name><name>inlink</name><operator>-&gt;</operator><name>channels</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vol</name><operator>-&gt;</operator><name>planes</name></name> <operator>=</operator> <ternary><condition><expr><call><name>av_sample_fmt_is_planar</name><argument_list>(<argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>format</name></name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name><name>vol</name><operator>-&gt;</operator><name>channels</name></name></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vol</name><operator>-&gt;</operator><name>var_values</name><index>[<expr><name>VAR_N</name></expr>]</index></name> <operator>=</operator>

<name><name>vol</name><operator>-&gt;</operator><name>var_values</name><index>[<expr><name>VAR_NB_CONSUMED_SAMPLES</name></expr>]</index></name> <operator>=</operator>

<name><name>vol</name><operator>-&gt;</operator><name>var_values</name><index>[<expr><name>VAR_NB_SAMPLES</name></expr>]</index></name> <operator>=</operator>

<name><name>vol</name><operator>-&gt;</operator><name>var_values</name><index>[<expr><name>VAR_POS</name></expr>]</index></name> <operator>=</operator>

<name><name>vol</name><operator>-&gt;</operator><name>var_values</name><index>[<expr><name>VAR_PTS</name></expr>]</index></name> <operator>=</operator>

<name><name>vol</name><operator>-&gt;</operator><name>var_values</name><index>[<expr><name>VAR_STARTPTS</name></expr>]</index></name> <operator>=</operator>

<name><name>vol</name><operator>-&gt;</operator><name>var_values</name><index>[<expr><name>VAR_STARTT</name></expr>]</index></name> <operator>=</operator>

<name><name>vol</name><operator>-&gt;</operator><name>var_values</name><index>[<expr><name>VAR_T</name></expr>]</index></name> <operator>=</operator>

<name><name>vol</name><operator>-&gt;</operator><name>var_values</name><index>[<expr><name>VAR_VOLUME</name></expr>]</index></name> <operator>=</operator> <name>NAN</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vol</name><operator>-&gt;</operator><name>var_values</name><index>[<expr><name>VAR_NB_CHANNELS</name></expr>]</index></name> <operator>=</operator> <name><name>inlink</name><operator>-&gt;</operator><name>channels</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vol</name><operator>-&gt;</operator><name>var_values</name><index>[<expr><name>VAR_TB</name></expr>]</index></name> <operator>=</operator> <call><name>av_q2d</name><argument_list>(<argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>time_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vol</name><operator>-&gt;</operator><name>var_values</name><index>[<expr><name>VAR_SAMPLE_RATE</name></expr>]</index></name> <operator>=</operator> <name><name>inlink</name><operator>-&gt;</operator><name>sample_rate</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>src</name></name></expr></argument>, <argument><expr><name>AV_LOG_VERBOSE</name></expr></argument>, <argument><expr><literal type="string">"tb:%f sample_rate:%f nb_channels:%f\n"</literal></expr></argument>,

<argument><expr><name><name>vol</name><operator>-&gt;</operator><name>var_values</name><index>[<expr><name>VAR_TB</name></expr>]</index></name></expr></argument>,

<argument><expr><name><name>vol</name><operator>-&gt;</operator><name>var_values</name><index>[<expr><name>VAR_SAMPLE_RATE</name></expr>]</index></name></expr></argument>,

<argument><expr><name><name>vol</name><operator>-&gt;</operator><name>var_values</name><index>[<expr><name>VAR_NB_CHANNELS</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>set_volume</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>process_command</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>args</name></decl></parameter>,

<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>res</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>res_len</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VolumeContext</name> <modifier>*</modifier></type><name>vol</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOSYS</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="string">"volume"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>set_expr</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vol</name><operator>-&gt;</operator><name>volume_pexpr</name></name></expr></argument>, <argument><expr><name>args</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>vol</name><operator>-&gt;</operator><name>eval_mode</name></name> <operator>==</operator> <name>EVAL_MODE_ONCE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>set_volume</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D2TS</name><parameter_list>(<parameter><type><name>d</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(isnan(d) ? AV_NOPTS_VALUE : (int64_t)(d))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TS2D</name><parameter_list>(<parameter><type><name>ts</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((ts) == AV_NOPTS_VALUE ? NAN : (double)(ts))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TS2T</name><parameter_list>(<parameter><type><name>ts</name></type></parameter>, <parameter><type><name>tb</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((ts) == AV_NOPTS_VALUE ? NAN : (double)(ts)*av_q2d(tb))</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>int</name></type> <name>filter_frame</name><parameter_list>(<parameter><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>inlink</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>inlink</name><operator>-&gt;</operator><name>dst</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VolumeContext</name> <modifier>*</modifier></type><name>vol</name> <init>= <expr><name><name>inlink</name><operator>-&gt;</operator><name>dst</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>outlink</name> <init>= <expr><name><name>inlink</name><operator>-&gt;</operator><name>dst</name><operator>-&gt;</operator><name>outputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>nb_samples</name> <init>= <expr><name><name>buf</name><operator>-&gt;</operator><name>nb_samples</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>out_buf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>pos</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFrameSideData</name> <modifier>*</modifier></type><name>sd</name> <init>= <expr><call><name>av_frame_get_side_data</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>AV_FRAME_DATA_REPLAYGAIN</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>sd</name> <operator>&amp;&amp;</operator> <name><name>vol</name><operator>-&gt;</operator><name>replaygain</name></name> <operator>!=</operator> <name>REPLAYGAIN_IGNORE</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>vol</name><operator>-&gt;</operator><name>replaygain</name></name> <operator>!=</operator> <name>REPLAYGAIN_DROP</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>AVReplayGain</name> <modifier>*</modifier></type><name>replaygain</name> <init>= <expr><operator>(</operator><name>AVReplayGain</name><operator>*</operator><operator>)</operator><name><name>sd</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name></type> <name>gain</name> <init>= <expr><literal type="number">100000</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>peak</name> <init>= <expr><literal type="number">100000</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>g</name></decl>, <decl><type ref="prev"/><name>p</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>vol</name><operator>-&gt;</operator><name>replaygain</name></name> <operator>==</operator> <name>REPLAYGAIN_TRACK</name> <operator>&amp;&amp;</operator>

<name><name>replaygain</name><operator>-&gt;</operator><name>track_gain</name></name> <operator>!=</operator> <name>INT32_MIN</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>gain</name> <operator>=</operator> <name><name>replaygain</name><operator>-&gt;</operator><name>track_gain</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>replaygain</name><operator>-&gt;</operator><name>track_peak</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>peak</name> <operator>=</operator> <name><name>replaygain</name><operator>-&gt;</operator><name>track_peak</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>replaygain</name><operator>-&gt;</operator><name>album_gain</name></name> <operator>!=</operator> <name>INT32_MIN</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>gain</name> <operator>=</operator> <name><name>replaygain</name><operator>-&gt;</operator><name>album_gain</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>replaygain</name><operator>-&gt;</operator><name>album_peak</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>peak</name> <operator>=</operator> <name><name>replaygain</name><operator>-&gt;</operator><name>album_peak</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>dst</name></name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Both ReplayGain gain "</literal>

<literal type="string">"values are unknown.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>g</name> <operator>=</operator> <name>gain</name> <operator>/</operator> <literal type="number">100000.0f</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name>peak</name> <operator>/</operator> <literal type="number">100000.0f</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>dst</name></name></expr></argument>, <argument><expr><name>AV_LOG_VERBOSE</name></expr></argument>,

<argument><expr><literal type="string">"Using gain %f dB from replaygain side data.\n"</literal></expr></argument>, <argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vol</name><operator>-&gt;</operator><name>volume</name></name> <operator>=</operator> <call><name>ff_exp10</name><argument_list>(<argument><expr><operator>(</operator><name>g</name> <operator>+</operator> <name><name>vol</name><operator>-&gt;</operator><name>replaygain_preamp</name></name><operator>)</operator> <operator>/</operator> <literal type="number">20</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>vol</name><operator>-&gt;</operator><name>replaygain_noclip</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>vol</name><operator>-&gt;</operator><name>volume</name></name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name><name>vol</name><operator>-&gt;</operator><name>volume</name></name></expr></argument>, <argument><expr><literal type="number">1.0</literal> <operator>/</operator> <name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>vol</name><operator>-&gt;</operator><name>volume_i</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name><name>vol</name><operator>-&gt;</operator><name>volume</name></name> <operator>*</operator> <literal type="number">256</literal> <operator>+</operator> <literal type="number">0.5</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>volume_init</name><argument_list>(<argument><expr><name>vol</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_frame_remove_side_data</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>AV_FRAME_DATA_REPLAYGAIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>isnan</name><argument_list>(<argument><expr><name><name>vol</name><operator>-&gt;</operator><name>var_values</name><index>[<expr><name>VAR_STARTPTS</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>vol</name><operator>-&gt;</operator><name>var_values</name><index>[<expr><name>VAR_STARTPTS</name></expr>]</index></name> <operator>=</operator> <call><name>TS2D</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>pts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vol</name><operator>-&gt;</operator><name>var_values</name><index>[<expr><name>VAR_STARTT</name></expr> ]</index></name> <operator>=</operator> <call><name>TS2T</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>pts</name></name></expr></argument>, <argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>time_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>vol</name><operator>-&gt;</operator><name>var_values</name><index>[<expr><name>VAR_PTS</name></expr>]</index></name> <operator>=</operator> <call><name>TS2D</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>pts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vol</name><operator>-&gt;</operator><name>var_values</name><index>[<expr><name>VAR_T</name></expr> ]</index></name> <operator>=</operator> <call><name>TS2T</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>pts</name></name></expr></argument>, <argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>time_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vol</name><operator>-&gt;</operator><name>var_values</name><index>[<expr><name>VAR_N</name></expr> ]</index></name> <operator>=</operator> <name><name>inlink</name><operator>-&gt;</operator><name>frame_count_out</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>pos</name> <operator>=</operator> <name><name>buf</name><operator>-&gt;</operator><name>pkt_pos</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vol</name><operator>-&gt;</operator><name>var_values</name><index>[<expr><name>VAR_POS</name></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><name>pos</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr> ?</condition><then> <expr><name>NAN</name></expr> </then><else>: <expr><name>pos</name></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>vol</name><operator>-&gt;</operator><name>eval_mode</name></name> <operator>==</operator> <name>EVAL_MODE_FRAME</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>set_volume</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>vol</name><operator>-&gt;</operator><name>volume</name></name> <operator>==</operator> <literal type="number">1.0</literal> <operator>||</operator> <name><name>vol</name><operator>-&gt;</operator><name>volume_i</name></name> <operator>==</operator> <literal type="number">256</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>out_buf</name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>

<goto>goto <name>end</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>av_frame_is_writable</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call>

<operator>&amp;&amp;</operator> <operator>(</operator><name><name>vol</name><operator>-&gt;</operator><name>precision</name></name> <operator>!=</operator> <name>PRECISION_FIXED</name> <operator>||</operator> <name><name>vol</name><operator>-&gt;</operator><name>volume_i</name></name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>out_buf</name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>out_buf</name> <operator>=</operator> <call><name>ff_get_audio_buffer</name><argument_list>(<argument><expr><name>outlink</name></expr></argument>, <argument><expr><name>nb_samples</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>out_buf</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>av_frame_copy_props</name><argument_list>(<argument><expr><name>out_buf</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>out_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>vol</name><operator>-&gt;</operator><name>precision</name></name> <operator>!=</operator> <name>PRECISION_FIXED</name> <operator>||</operator> <name><name>vol</name><operator>-&gt;</operator><name>volume_i</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>p</name></decl>, <decl><type ref="prev"/><name>plane_samples</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>av_sample_fmt_is_planar</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>format</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>plane_samples</name> <operator>=</operator> <call><name>FFALIGN</name><argument_list>(<argument><expr><name>nb_samples</name></expr></argument>, <argument><expr><name><name>vol</name><operator>-&gt;</operator><name>samples_align</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>plane_samples</name> <operator>=</operator> <call><name>FFALIGN</name><argument_list>(<argument><expr><name>nb_samples</name> <operator>*</operator> <name><name>vol</name><operator>-&gt;</operator><name>channels</name></name></expr></argument>, <argument><expr><name><name>vol</name><operator>-&gt;</operator><name>samples_align</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>vol</name><operator>-&gt;</operator><name>precision</name></name> <operator>==</operator> <name>PRECISION_FIXED</name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>p</name> <operator>&lt;</operator> <name><name>vol</name><operator>-&gt;</operator><name>planes</name></name></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name><name>vol</name><operator>-&gt;</operator><name>scale_samples</name></name><argument_list>(<argument><expr><name><name>out_buf</name><operator>-&gt;</operator><name>extended_data</name><index>[<expr><name>p</name></expr>]</index></name></expr></argument>,

<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>extended_data</name><index>[<expr><name>p</name></expr>]</index></name></expr></argument>, <argument><expr><name>plane_samples</name></expr></argument>,

<argument><expr><name><name>vol</name><operator>-&gt;</operator><name>volume_i</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>av_get_packed_sample_fmt</name><argument_list>(<argument><expr><name><name>vol</name><operator>-&gt;</operator><name>sample_fmt</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>AV_SAMPLE_FMT_FLT</name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>p</name> <operator>&lt;</operator> <name><name>vol</name><operator>-&gt;</operator><name>planes</name></name></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name><name>vol</name><operator>-&gt;</operator><name>fdsp</name><operator>-&gt;</operator><name>vector_fmul_scalar</name></name><argument_list>(<argument><expr><operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><name><name>out_buf</name><operator>-&gt;</operator><name>extended_data</name><index>[<expr><name>p</name></expr>]</index></name></expr></argument>,

<argument><expr><operator>(</operator><specifier>const</specifier> <name>float</name> <operator>*</operator><operator>)</operator><name><name>buf</name><operator>-&gt;</operator><name>extended_data</name><index>[<expr><name>p</name></expr>]</index></name></expr></argument>,

<argument><expr><name><name>vol</name><operator>-&gt;</operator><name>volume</name></name></expr></argument>, <argument><expr><name>plane_samples</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if> <else>else <block>{<block_content>

<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>p</name> <operator>&lt;</operator> <name><name>vol</name><operator>-&gt;</operator><name>planes</name></name></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name><name>vol</name><operator>-&gt;</operator><name>fdsp</name><operator>-&gt;</operator><name>vector_dmul_scalar</name></name><argument_list>(<argument><expr><operator>(</operator><name>double</name> <operator>*</operator><operator>)</operator><name><name>out_buf</name><operator>-&gt;</operator><name>extended_data</name><index>[<expr><name>p</name></expr>]</index></name></expr></argument>,

<argument><expr><operator>(</operator><specifier>const</specifier> <name>double</name> <operator>*</operator><operator>)</operator><name><name>buf</name><operator>-&gt;</operator><name>extended_data</name><index>[<expr><name>p</name></expr>]</index></name></expr></argument>,

<argument><expr><name><name>vol</name><operator>-&gt;</operator><name>volume</name></name></expr></argument>, <argument><expr><name>plane_samples</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>emms_c</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>buf</name> <operator>!=</operator> <name>out_buf</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<label><name>end</name>:</label>

<expr_stmt><expr><name><name>vol</name><operator>-&gt;</operator><name>var_values</name><index>[<expr><name>VAR_NB_CONSUMED_SAMPLES</name></expr>]</index></name> <operator>+=</operator> <name><name>out_buf</name><operator>-&gt;</operator><name>nb_samples</name></name></expr>;</expr_stmt>

<return>return <expr><call><name>ff_filter_frame</name><argument_list>(<argument><expr><name>outlink</name></expr></argument>, <argument><expr><name>out_buf</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVFilterPad</name></type> <name><name>avfilter_af_volume_inputs</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"default"</literal></expr>,

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_AUDIO</name></expr>,

<expr><operator>.</operator><name>filter_frame</name> <operator>=</operator> <name>filter_frame</name></expr>,

}</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVFilterPad</name></type> <name><name>avfilter_af_volume_outputs</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"default"</literal></expr>,

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_AUDIO</name></expr>,

<expr><operator>.</operator><name>config_props</name> <operator>=</operator> <name>config_output</name></expr>,

}</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFilter</name></type> <name>ff_af_volume</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"volume"</literal></expr>,

<expr><operator>.</operator><name>description</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"Change input volume."</literal></expr></argument>)</argument_list></call></expr>,

<expr><operator>.</operator><name>query_formats</name> <operator>=</operator> <name>query_formats</name></expr>,

<expr><operator>.</operator><name>priv_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>VolumeContext</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><operator>.</operator><name>priv_class</name> <operator>=</operator> <operator>&amp;</operator><name>volume_class</name></expr>,

<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>init</name></expr>,

<expr><operator>.</operator><name>uninit</name> <operator>=</operator> <name>uninit</name></expr>,

<expr><operator>.</operator><name>inputs</name> <operator>=</operator> <name>avfilter_af_volume_inputs</name></expr>,

<expr><operator>.</operator><name>outputs</name> <operator>=</operator> <name>avfilter_af_volume_outputs</name></expr>,

<expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>AVFILTER_FLAG_SUPPORT_TIMELINE_GENERIC</name></expr>,

<expr><operator>.</operator><name>process_command</name> <operator>=</operator> <name>process_command</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

</unit>
