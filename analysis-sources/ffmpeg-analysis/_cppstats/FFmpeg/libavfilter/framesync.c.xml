<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavfilter\framesync.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avassert.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/opt.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avfilter.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"filters.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"framesync.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OFFSET</name><parameter_list>(<parameter><type><name>member</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>offsetof(FFFrameSync, member)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLAGS</name></cpp:macro> <cpp:value>AV_OPT_FLAG_VIDEO_PARAM | AV_OPT_FLAG_FILTERING_PARAM</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>framesync_name</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><literal type="string">"framesync"</literal></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVOption</name></type> <name><name>framesync_options</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><literal type="string">"eof_action"</literal></expr>, <expr><literal type="string">"Action to take when encountering EOF from secondary input "</literal></expr>,

<expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>opt_eof_action</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>EOF_ACTION_REPEAT</name></expr> }</block></expr>,

<expr><name>EOF_ACTION_REPEAT</name></expr>, <expr><name>EOF_ACTION_PASS</name></expr>, <expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>FLAGS</name></expr>, <expr><literal type="string">"eof_action"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"repeat"</literal></expr>, <expr><literal type="string">"Repeat the previous frame."</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>EOF_ACTION_REPEAT</name></expr> }</block></expr>, <expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>FLAGS</name></expr>, <expr><literal type="string">"eof_action"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"endall"</literal></expr>, <expr><literal type="string">"End both streams."</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>EOF_ACTION_ENDALL</name></expr> }</block></expr>, <expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>FLAGS</name></expr>, <expr><literal type="string">"eof_action"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"pass"</literal></expr>, <expr><literal type="string">"Pass through the main input."</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>EOF_ACTION_PASS</name></expr> }</block></expr>, <expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>FLAGS</name></expr>, <expr><literal type="string">"eof_action"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"shortest"</literal></expr>, <expr><literal type="string">"force termination when the shortest input terminates"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>opt_shortest</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_BOOL</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0</literal></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"repeatlast"</literal></expr>, <expr><literal type="string">"extend last frame of secondary streams beyond EOF"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>opt_repeatlast</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_BOOL</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">1</literal></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVClass</name></type> <name>framesync_class</name> <init>= <expr><block>{

<expr><operator>.</operator><name>version</name> <operator>=</operator> <name>LIBAVUTIL_VERSION_INT</name></expr>,

<expr><operator>.</operator><name>class_name</name> <operator>=</operator> <literal type="string">"framesync"</literal></expr>,

<expr><operator>.</operator><name>item_name</name> <operator>=</operator> <name>framesync_name</name></expr>,

<expr><operator>.</operator><name>category</name> <operator>=</operator> <name>AV_CLASS_CATEGORY_FILTER</name></expr>,

<expr><operator>.</operator><name>option</name> <operator>=</operator> <name>framesync_options</name></expr>,

<expr><operator>.</operator><name>parent_log_context_offset</name> <operator>=</operator> <call><name>OFFSET</name><argument_list>(<argument><expr><name>parent</name></expr></argument>)</argument_list></call></expr>,

}</block></expr></init></decl>;</decl_stmt>

<enum>enum <block>{

<decl><name>STATE_BOF</name></decl>,

<decl><name>STATE_RUN</name></decl>,

<decl><name>STATE_EOF</name></decl>,

}</block>;</enum>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>consume_from_fifos</name><parameter_list>(<parameter><decl><type><name>FFFrameSync</name> <modifier>*</modifier></type><name>fs</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>const</specifier> <name>AVClass</name> <modifier>*</modifier></type><name>ff_framesync_get_class</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><operator>&amp;</operator><name>framesync_class</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_framesync_preinit</name><parameter_list>(<parameter><decl><type><name>FFFrameSync</name> <modifier>*</modifier></type><name>fs</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>fs</name><operator>-&gt;</operator><name>class</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>fs</name><operator>-&gt;</operator><name>class</name></name> <operator>=</operator> <operator>&amp;</operator><name>framesync_class</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_opt_set_defaults</name><argument_list>(<argument><expr><name>fs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_framesync_init</name><parameter_list>(<parameter><decl><type><name>FFFrameSync</name> <modifier>*</modifier></type><name>fs</name></decl></parameter>, <parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>parent</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>nb_in</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name><name>parent</name><operator>-&gt;</operator><name>nb_outputs</name></name> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_framesync_preinit</name><argument_list>(<argument><expr><name>fs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fs</name><operator>-&gt;</operator><name>parent</name></name> <operator>=</operator> <name>parent</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fs</name><operator>-&gt;</operator><name>nb_in</name></name> <operator>=</operator> <name>nb_in</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fs</name><operator>-&gt;</operator><name>in</name></name> <operator>=</operator> <call><name>av_calloc</name><argument_list>(<argument><expr><name>nb_in</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>fs</name><operator>-&gt;</operator><name>in</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>fs</name><operator>-&gt;</operator><name>in</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>framesync_eof</name><parameter_list>(<parameter><decl><type><name>FFFrameSync</name> <modifier>*</modifier></type><name>fs</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>fs</name><operator>-&gt;</operator><name>eof</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fs</name><operator>-&gt;</operator><name>frame_ready</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_outlink_set_status</name><argument_list>(<argument><expr><name><name>fs</name><operator>-&gt;</operator><name>parent</name><operator>-&gt;</operator><name>outputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>AVERROR_EOF</name></expr></argument>, <argument><expr><name>AV_NOPTS_VALUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>framesync_sync_level_update</name><parameter_list>(<parameter><decl><type><name>FFFrameSync</name> <modifier>*</modifier></type><name>fs</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>level</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>fs</name><operator>-&gt;</operator><name>nb_in</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name><name>fs</name><operator>-&gt;</operator><name>in</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>state</name> <operator>!=</operator> <name>STATE_EOF</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>level</name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name>level</name></expr></argument>, <argument><expr><name><name>fs</name><operator>-&gt;</operator><name>in</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>sync</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name>level</name> <operator>&lt;=</operator> <name><name>fs</name><operator>-&gt;</operator><name>sync_level</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>level</name> <operator>&lt;</operator> <name><name>fs</name><operator>-&gt;</operator><name>sync_level</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><name>AV_LOG_VERBOSE</name></expr></argument>, <argument><expr><literal type="string">"Sync level %u\n"</literal></expr></argument>, <argument><expr><name>level</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>level</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>fs</name><operator>-&gt;</operator><name>sync_level</name></name> <operator>=</operator> <name>level</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>framesync_eof</name><argument_list>(<argument><expr><name>fs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_framesync_configure</name><parameter_list>(<parameter><decl><type><name>FFFrameSync</name> <modifier>*</modifier></type><name>fs</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>gcd</name></decl>, <decl><type ref="prev"/><name>lcm</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>fs</name><operator>-&gt;</operator><name>opt_repeatlast</name></name> <operator>||</operator> <name><name>fs</name><operator>-&gt;</operator><name>opt_eof_action</name></name> <operator>==</operator> <name>EOF_ACTION_PASS</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>fs</name><operator>-&gt;</operator><name>opt_repeatlast</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fs</name><operator>-&gt;</operator><name>opt_eof_action</name></name> <operator>=</operator> <name>EOF_ACTION_PASS</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>fs</name><operator>-&gt;</operator><name>opt_shortest</name></name> <operator>||</operator> <name><name>fs</name><operator>-&gt;</operator><name>opt_eof_action</name></name> <operator>==</operator> <name>EOF_ACTION_ENDALL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>fs</name><operator>-&gt;</operator><name>opt_shortest</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fs</name><operator>-&gt;</operator><name>opt_eof_action</name></name> <operator>=</operator> <name>EOF_ACTION_ENDALL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>fs</name><operator>-&gt;</operator><name>opt_repeatlast</name></name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>fs</name><operator>-&gt;</operator><name>nb_in</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>fs</name><operator>-&gt;</operator><name>in</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>after</name> <operator>=</operator> <name>EXT_NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fs</name><operator>-&gt;</operator><name>in</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>sync</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>fs</name><operator>-&gt;</operator><name>opt_shortest</name></name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>fs</name><operator>-&gt;</operator><name>nb_in</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>fs</name><operator>-&gt;</operator><name>in</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>after</name> <operator>=</operator> <name>EXT_STOP</name></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>fs</name><operator>-&gt;</operator><name>time_base</name><operator>.</operator><name>num</name></name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>fs</name><operator>-&gt;</operator><name>nb_in</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>fs</name><operator>-&gt;</operator><name>in</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>sync</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>fs</name><operator>-&gt;</operator><name>time_base</name><operator>.</operator><name>num</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>gcd</name> <operator>=</operator> <call><name>av_gcd</name><argument_list>(<argument><expr><name><name>fs</name><operator>-&gt;</operator><name>time_base</name><operator>.</operator><name>den</name></name></expr></argument>, <argument><expr><name><name>fs</name><operator>-&gt;</operator><name>in</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>time_base</name><operator>.</operator><name>den</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>lcm</name> <operator>=</operator> <operator>(</operator><name><name>fs</name><operator>-&gt;</operator><name>time_base</name><operator>.</operator><name>den</name></name> <operator>/</operator> <name>gcd</name><operator>)</operator> <operator>*</operator> <name><name>fs</name><operator>-&gt;</operator><name>in</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>time_base</name><operator>.</operator><name>den</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>lcm</name> <operator>&lt;</operator> <name>AV_TIME_BASE</name> <operator>/</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>fs</name><operator>-&gt;</operator><name>time_base</name><operator>.</operator><name>den</name></name> <operator>=</operator> <name>lcm</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fs</name><operator>-&gt;</operator><name>time_base</name><operator>.</operator><name>num</name></name> <operator>=</operator> <call><name>av_gcd</name><argument_list>(<argument><expr><name><name>fs</name><operator>-&gt;</operator><name>time_base</name><operator>.</operator><name>num</name></name></expr></argument>,

<argument><expr><name><name>fs</name><operator>-&gt;</operator><name>in</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>time_base</name><operator>.</operator><name>num</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>fs</name><operator>-&gt;</operator><name>time_base</name><operator>.</operator><name>num</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fs</name><operator>-&gt;</operator><name>time_base</name><operator>.</operator><name>den</name></name> <operator>=</operator> <name>AV_TIME_BASE</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>fs</name><operator>-&gt;</operator><name>time_base</name></name> <operator>=</operator> <name><name>fs</name><operator>-&gt;</operator><name>in</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>time_base</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>fs</name><operator>-&gt;</operator><name>time_base</name><operator>.</operator><name>num</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Impossible to set time base\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><name>AV_LOG_VERBOSE</name></expr></argument>, <argument><expr><literal type="string">"Selected %d/%d time base\n"</literal></expr></argument>,

<argument><expr><name><name>fs</name><operator>-&gt;</operator><name>time_base</name><operator>.</operator><name>num</name></name></expr></argument>, <argument><expr><name><name>fs</name><operator>-&gt;</operator><name>time_base</name><operator>.</operator><name>den</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>fs</name><operator>-&gt;</operator><name>nb_in</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>fs</name><operator>-&gt;</operator><name>in</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>pts</name> <operator>=</operator> <name><name>fs</name><operator>-&gt;</operator><name>in</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>pts_next</name> <operator>=</operator> <name>AV_NOPTS_VALUE</name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name><name>fs</name><operator>-&gt;</operator><name>sync_level</name></name> <operator>=</operator> <name>UINT_MAX</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>framesync_sync_level_update</name><argument_list>(<argument><expr><name>fs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>framesync_advance</name><parameter_list>(<parameter><decl><type><name>FFFrameSync</name> <modifier>*</modifier></type><name>fs</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>pts</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<while>while <condition>(<expr><operator>!</operator><operator>(</operator><name><name>fs</name><operator>-&gt;</operator><name>frame_ready</name></name> <operator>||</operator> <name><name>fs</name><operator>-&gt;</operator><name>eof</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>consume_from_fifos</name><argument_list>(<argument><expr><name>fs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>pts</name> <operator>=</operator> <name>INT64_MAX</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>fs</name><operator>-&gt;</operator><name>nb_in</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name><name>fs</name><operator>-&gt;</operator><name>in</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>have_next</name> <operator>&amp;&amp;</operator> <name><name>fs</name><operator>-&gt;</operator><name>in</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>pts_next</name> <operator>&lt;</operator> <name>pts</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>pts</name> <operator>=</operator> <name><name>fs</name><operator>-&gt;</operator><name>in</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>pts_next</name></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name>pts</name> <operator>==</operator> <name>INT64_MAX</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>framesync_eof</name><argument_list>(<argument><expr><name>fs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>fs</name><operator>-&gt;</operator><name>nb_in</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>fs</name><operator>-&gt;</operator><name>in</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>pts_next</name> <operator>==</operator> <name>pts</name> <operator>||</operator>

<operator>(</operator><name><name>fs</name><operator>-&gt;</operator><name>in</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>before</name> <operator>==</operator> <name>EXT_INFINITY</name> <operator>&amp;&amp;</operator>

<name><name>fs</name><operator>-&gt;</operator><name>in</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>state</name> <operator>==</operator> <name>STATE_BOF</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fs</name><operator>-&gt;</operator><name>in</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fs</name><operator>-&gt;</operator><name>in</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>frame</name> <operator>=</operator> <name><name>fs</name><operator>-&gt;</operator><name>in</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>frame_next</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fs</name><operator>-&gt;</operator><name>in</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>pts</name> <operator>=</operator> <name><name>fs</name><operator>-&gt;</operator><name>in</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>pts_next</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fs</name><operator>-&gt;</operator><name>in</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>frame_next</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fs</name><operator>-&gt;</operator><name>in</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>pts_next</name> <operator>=</operator> <name>AV_NOPTS_VALUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fs</name><operator>-&gt;</operator><name>in</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>have_next</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fs</name><operator>-&gt;</operator><name>in</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>state</name> <operator>=</operator> <ternary><condition><expr><name><name>fs</name><operator>-&gt;</operator><name>in</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>frame</name></expr> ?</condition><then> <expr><name>STATE_RUN</name></expr> </then><else>: <expr><name>STATE_EOF</name></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>fs</name><operator>-&gt;</operator><name>in</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>sync</name> <operator>==</operator> <name><name>fs</name><operator>-&gt;</operator><name>sync_level</name></name> <operator>&amp;&amp;</operator> <name><name>fs</name><operator>-&gt;</operator><name>in</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>frame</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>fs</name><operator>-&gt;</operator><name>frame_ready</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>fs</name><operator>-&gt;</operator><name>in</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>state</name> <operator>==</operator> <name>STATE_EOF</name> <operator>&amp;&amp;</operator>

<name><name>fs</name><operator>-&gt;</operator><name>in</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>after</name> <operator>==</operator> <name>EXT_STOP</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>framesync_eof</name><argument_list>(<argument><expr><name>fs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>fs</name><operator>-&gt;</operator><name>frame_ready</name></name></expr>)</condition><block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>fs</name><operator>-&gt;</operator><name>nb_in</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>fs</name><operator>-&gt;</operator><name>in</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>state</name> <operator>==</operator> <name>STATE_BOF</name> <operator>&amp;&amp;</operator>

<name><name>fs</name><operator>-&gt;</operator><name>in</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>before</name> <operator>==</operator> <name>EXT_STOP</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>fs</name><operator>-&gt;</operator><name>frame_ready</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>fs</name><operator>-&gt;</operator><name>pts</name></name> <operator>=</operator> <name>pts</name></expr>;</expr_stmt>

</block_content>}</block></while>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int64_t</name></type> <name>framesync_pts_extrapolate</name><parameter_list>(<parameter><decl><type><name>FFFrameSync</name> <modifier>*</modifier></type><name>fs</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>in</name></decl></parameter>,

<parameter><decl><type><name>int64_t</name></type> <name>pts</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name>pts</name> <operator>+</operator> <literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>framesync_inject_frame</name><parameter_list>(<parameter><decl><type><name>FFFrameSync</name> <modifier>*</modifier></type><name>fs</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>in</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>frame</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int64_t</name></type> <name>pts</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><operator>!</operator><name><name>fs</name><operator>-&gt;</operator><name>in</name><index>[<expr><name>in</name></expr>]</index></name><operator>.</operator><name>have_next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name>frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pts</name> <operator>=</operator> <call><name>av_rescale_q</name><argument_list>(<argument><expr><name><name>frame</name><operator>-&gt;</operator><name>pts</name></name></expr></argument>, <argument><expr><name><name>fs</name><operator>-&gt;</operator><name>in</name><index>[<expr><name>in</name></expr>]</index></name><operator>.</operator><name>time_base</name></expr></argument>, <argument><expr><name><name>fs</name><operator>-&gt;</operator><name>time_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>pts</name></name> <operator>=</operator> <name>pts</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fs</name><operator>-&gt;</operator><name>in</name><index>[<expr><name>in</name></expr>]</index></name><operator>.</operator><name>frame_next</name> <operator>=</operator> <name>frame</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fs</name><operator>-&gt;</operator><name>in</name><index>[<expr><name>in</name></expr>]</index></name><operator>.</operator><name>pts_next</name> <operator>=</operator> <name>pts</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fs</name><operator>-&gt;</operator><name>in</name><index>[<expr><name>in</name></expr>]</index></name><operator>.</operator><name>have_next</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>framesync_inject_status</name><parameter_list>(<parameter><decl><type><name>FFFrameSync</name> <modifier>*</modifier></type><name>fs</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>in</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>status</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>pts</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><operator>!</operator><name><name>fs</name><operator>-&gt;</operator><name>in</name><index>[<expr><name>in</name></expr>]</index></name><operator>.</operator><name>have_next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pts</name> <operator>=</operator> <ternary><condition><expr><name><name>fs</name><operator>-&gt;</operator><name>in</name><index>[<expr><name>in</name></expr>]</index></name><operator>.</operator><name>state</name> <operator>!=</operator> <name>STATE_RUN</name> <operator>||</operator> <name><name>fs</name><operator>-&gt;</operator><name>in</name><index>[<expr><name>in</name></expr>]</index></name><operator>.</operator><name>after</name> <operator>==</operator> <name>EXT_INFINITY</name></expr>

?</condition><then> <expr><name>INT64_MAX</name></expr> </then><else>: <expr><call><name>framesync_pts_extrapolate</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><name><name>fs</name><operator>-&gt;</operator><name>in</name><index>[<expr><name>in</name></expr>]</index></name><operator>.</operator><name>pts</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fs</name><operator>-&gt;</operator><name>in</name><index>[<expr><name>in</name></expr>]</index></name><operator>.</operator><name>sync</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>framesync_sync_level_update</name><argument_list>(<argument><expr><name>fs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fs</name><operator>-&gt;</operator><name>in</name><index>[<expr><name>in</name></expr>]</index></name><operator>.</operator><name>frame_next</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fs</name><operator>-&gt;</operator><name>in</name><index>[<expr><name>in</name></expr>]</index></name><operator>.</operator><name>pts_next</name> <operator>=</operator> <name>pts</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fs</name><operator>-&gt;</operator><name>in</name><index>[<expr><name>in</name></expr>]</index></name><operator>.</operator><name>have_next</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_framesync_get_frame</name><parameter_list>(<parameter><decl><type><name>FFFrameSync</name> <modifier>*</modifier></type><name>fs</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>in</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier><modifier>*</modifier></type><name>rframe</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name></type> <name>get</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>frame</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>need_copy</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>pts_next</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>fs</name><operator>-&gt;</operator><name>in</name><index>[<expr><name>in</name></expr>]</index></name><operator>.</operator><name>frame</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>rframe</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>frame</name> <operator>=</operator> <name><name>fs</name><operator>-&gt;</operator><name>in</name><index>[<expr><name>in</name></expr>]</index></name><operator>.</operator><name>frame</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>get</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>pts_next</name> <operator>=</operator> <ternary><condition><expr><name><name>fs</name><operator>-&gt;</operator><name>in</name><index>[<expr><name>in</name></expr>]</index></name><operator>.</operator><name>have_next</name></expr> ?</condition><then> <expr><name><name>fs</name><operator>-&gt;</operator><name>in</name><index>[<expr><name>in</name></expr>]</index></name><operator>.</operator><name>pts_next</name></expr> </then><else>: <expr><name>INT64_MAX</name></expr></else></ternary></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>fs</name><operator>-&gt;</operator><name>nb_in</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name>need_copy</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>!=</operator> <name>in</name> <operator>&amp;&amp;</operator> <name><name>fs</name><operator>-&gt;</operator><name>in</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>sync</name> <operator>&amp;&amp;</operator>

<operator>(</operator><operator>!</operator><name><name>fs</name><operator>-&gt;</operator><name>in</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>have_next</name> <operator>||</operator> <name><name>fs</name><operator>-&gt;</operator><name>in</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>pts_next</name> <operator>&lt;</operator> <name>pts_next</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>need_copy</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name>need_copy</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>frame</name> <operator>=</operator> <call><name>av_frame_clone</name><argument_list>(<argument><expr><name>frame</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>av_frame_make_writable</name><argument_list>(<argument><expr><name>frame</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>fs</name><operator>-&gt;</operator><name>in</name><index>[<expr><name>in</name></expr>]</index></name><operator>.</operator><name>frame</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>fs</name><operator>-&gt;</operator><name>frame_ready</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>rframe</name> <operator>=</operator> <name>frame</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_framesync_uninit</name><parameter_list>(<parameter><decl><type><name>FFFrameSync</name> <modifier>*</modifier></type><name>fs</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>fs</name><operator>-&gt;</operator><name>nb_in</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fs</name><operator>-&gt;</operator><name>in</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fs</name><operator>-&gt;</operator><name>in</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>frame_next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fs</name><operator>-&gt;</operator><name>in</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>consume_from_fifos</name><parameter_list>(<parameter><decl><type><name>FFFrameSync</name> <modifier>*</modifier></type><name>fs</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>fs</name><operator>-&gt;</operator><name>parent</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>frame</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>pts</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>nb_active</name></decl>, <decl><type ref="prev"/><name>nb_miss</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>, <decl><type ref="prev"/><name>status</name></decl>;</decl_stmt>

<expr_stmt><expr><name>nb_active</name> <operator>=</operator> <name>nb_miss</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>fs</name><operator>-&gt;</operator><name>nb_in</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>fs</name><operator>-&gt;</operator><name>in</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>have_next</name> <operator>||</operator> <name><name>fs</name><operator>-&gt;</operator><name>in</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>state</name> <operator>==</operator> <name>STATE_EOF</name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name>nb_active</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_inlink_consume_frame</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>inputs</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name>frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>framesync_inject_frame</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_inlink_acknowledge_status</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>inputs</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>status</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>framesync_inject_status</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>status</name></expr></argument>, <argument><expr><name>pts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><name>ret</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>nb_miss</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>nb_miss</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>nb_miss</name> <operator>==</operator> <name>nb_active</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>ff_outlink_frame_wanted</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>outputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FFERROR_NOT_READY</name></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>fs</name><operator>-&gt;</operator><name>nb_in</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>fs</name><operator>-&gt;</operator><name>in</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>have_next</name> <operator>&amp;&amp;</operator> <name><name>fs</name><operator>-&gt;</operator><name>in</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>state</name> <operator>!=</operator> <name>STATE_EOF</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ff_inlink_request_frame</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>inputs</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_framesync_activate</name><parameter_list>(<parameter><decl><type><name>FFFrameSync</name> <modifier>*</modifier></type><name>fs</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>framesync_advance</name><argument_list>(<argument><expr><name>fs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>fs</name><operator>-&gt;</operator><name>eof</name></name> <operator>||</operator> <operator>!</operator><name><name>fs</name><operator>-&gt;</operator><name>frame_ready</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name><name>fs</name><operator>-&gt;</operator><name>on_event</name></name><argument_list>(<argument><expr><name>fs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>fs</name><operator>-&gt;</operator><name>frame_ready</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_framesync_init_dualinput</name><parameter_list>(<parameter><decl><type><name>FFFrameSync</name> <modifier>*</modifier></type><name>fs</name></decl></parameter>, <parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>parent</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_framesync_init</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><name>parent</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>fs</name><operator>-&gt;</operator><name>in</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>time_base</name> <operator>=</operator> <name><name>parent</name><operator>-&gt;</operator><name>inputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>time_base</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fs</name><operator>-&gt;</operator><name>in</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>time_base</name> <operator>=</operator> <name><name>parent</name><operator>-&gt;</operator><name>inputs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>time_base</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fs</name><operator>-&gt;</operator><name>in</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>sync</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fs</name><operator>-&gt;</operator><name>in</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>before</name> <operator>=</operator> <name>EXT_STOP</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fs</name><operator>-&gt;</operator><name>in</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>after</name> <operator>=</operator> <name>EXT_INFINITY</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fs</name><operator>-&gt;</operator><name>in</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>sync</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fs</name><operator>-&gt;</operator><name>in</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>before</name> <operator>=</operator> <name>EXT_NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fs</name><operator>-&gt;</operator><name>in</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>after</name> <operator>=</operator> <name>EXT_INFINITY</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_framesync_dualinput_get</name><parameter_list>(<parameter><decl><type><name>FFFrameSync</name> <modifier>*</modifier></type><name>fs</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier><modifier>*</modifier></type><name>f0</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier><modifier>*</modifier></type><name>f1</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>fs</name><operator>-&gt;</operator><name>parent</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>mainpic</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>secondpic</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_framesync_get_frame</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>mainpic</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator>

<operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_framesync_get_frame</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>secondpic</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mainpic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name>mainpic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mainpic</name><operator>-&gt;</operator><name>pts</name></name> <operator>=</operator> <call><name>av_rescale_q</name><argument_list>(<argument><expr><name><name>fs</name><operator>-&gt;</operator><name>pts</name></name></expr></argument>, <argument><expr><name><name>fs</name><operator>-&gt;</operator><name>time_base</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>outputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>time_base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>is_disabled</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>secondpic</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>f0</name> <operator>=</operator> <name>mainpic</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>f1</name> <operator>=</operator> <name>secondpic</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_framesync_dualinput_get_writable</name><parameter_list>(<parameter><decl><type><name>FFFrameSync</name> <modifier>*</modifier></type><name>fs</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier><modifier>*</modifier></type><name>f0</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier><modifier>*</modifier></type><name>f1</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_framesync_dualinput_get</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><name>f0</name></expr></argument>, <argument><expr><name>f1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_inlink_make_frame_writable</name><argument_list>(<argument><expr><name><name>fs</name><operator>-&gt;</operator><name>parent</name><operator>-&gt;</operator><name>inputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>f0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><name>f0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>f1</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

</unit>
