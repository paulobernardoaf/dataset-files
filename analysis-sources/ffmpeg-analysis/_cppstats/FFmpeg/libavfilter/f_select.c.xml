<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavfilter\f_select.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avstring.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/eval.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/fifo.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/imgutils.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/opt.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/pixdesc.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avfilter.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"audio.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"formats.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"video.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"scene_sad.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>var_names</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="string">"TB"</literal></expr>, 

<expr><literal type="string">"pts"</literal></expr>, 

<expr><literal type="string">"start_pts"</literal></expr>, 

<expr><literal type="string">"prev_pts"</literal></expr>, 

<expr><literal type="string">"prev_selected_pts"</literal></expr>, 

<expr><literal type="string">"t"</literal></expr>, 

<expr><literal type="string">"start_t"</literal></expr>, 

<expr><literal type="string">"prev_t"</literal></expr>, 

<expr><literal type="string">"prev_selected_t"</literal></expr>, 

<expr><literal type="string">"pict_type"</literal></expr>, 

<expr><literal type="string">"I"</literal></expr>,

<expr><literal type="string">"P"</literal></expr>,

<expr><literal type="string">"B"</literal></expr>,

<expr><literal type="string">"S"</literal></expr>,

<expr><literal type="string">"SI"</literal></expr>,

<expr><literal type="string">"SP"</literal></expr>,

<expr><literal type="string">"BI"</literal></expr>,

<expr><literal type="string">"PICT_TYPE_I"</literal></expr>,

<expr><literal type="string">"PICT_TYPE_P"</literal></expr>,

<expr><literal type="string">"PICT_TYPE_B"</literal></expr>,

<expr><literal type="string">"PICT_TYPE_S"</literal></expr>,

<expr><literal type="string">"PICT_TYPE_SI"</literal></expr>,

<expr><literal type="string">"PICT_TYPE_SP"</literal></expr>,

<expr><literal type="string">"PICT_TYPE_BI"</literal></expr>,

<expr><literal type="string">"interlace_type"</literal></expr>, 

<expr><literal type="string">"PROGRESSIVE"</literal></expr>,

<expr><literal type="string">"TOPFIRST"</literal></expr>,

<expr><literal type="string">"BOTTOMFIRST"</literal></expr>,

<expr><literal type="string">"consumed_samples_n"</literal></expr>,

<expr><literal type="string">"samples_n"</literal></expr>, 

<expr><literal type="string">"sample_rate"</literal></expr>, 

<expr><literal type="string">"n"</literal></expr>, 

<expr><literal type="string">"selected_n"</literal></expr>, 

<expr><literal type="string">"prev_selected_n"</literal></expr>, 

<expr><literal type="string">"key"</literal></expr>, 

<expr><literal type="string">"pos"</literal></expr>, 

<expr><literal type="string">"scene"</literal></expr>,

<expr><literal type="string">"concatdec_select"</literal></expr>, 

<expr><name>NULL</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<enum>enum <name>var_name</name> <block>{

<decl><name>VAR_TB</name></decl>,

<decl><name>VAR_PTS</name></decl>,

<decl><name>VAR_START_PTS</name></decl>,

<decl><name>VAR_PREV_PTS</name></decl>,

<decl><name>VAR_PREV_SELECTED_PTS</name></decl>,

<decl><name>VAR_T</name></decl>,

<decl><name>VAR_START_T</name></decl>,

<decl><name>VAR_PREV_T</name></decl>,

<decl><name>VAR_PREV_SELECTED_T</name></decl>,

<decl><name>VAR_PICT_TYPE</name></decl>,

<decl><name>VAR_I</name></decl>,

<decl><name>VAR_P</name></decl>,

<decl><name>VAR_B</name></decl>,

<decl><name>VAR_S</name></decl>,

<decl><name>VAR_SI</name></decl>,

<decl><name>VAR_SP</name></decl>,

<decl><name>VAR_BI</name></decl>,

<decl><name>VAR_PICT_TYPE_I</name></decl>,

<decl><name>VAR_PICT_TYPE_P</name></decl>,

<decl><name>VAR_PICT_TYPE_B</name></decl>,

<decl><name>VAR_PICT_TYPE_S</name></decl>,

<decl><name>VAR_PICT_TYPE_SI</name></decl>,

<decl><name>VAR_PICT_TYPE_SP</name></decl>,

<decl><name>VAR_PICT_TYPE_BI</name></decl>,

<decl><name>VAR_INTERLACE_TYPE</name></decl>,

<decl><name>VAR_INTERLACE_TYPE_P</name></decl>,

<decl><name>VAR_INTERLACE_TYPE_T</name></decl>,

<decl><name>VAR_INTERLACE_TYPE_B</name></decl>,

<decl><name>VAR_CONSUMED_SAMPLES_N</name></decl>,

<decl><name>VAR_SAMPLES_N</name></decl>,

<decl><name>VAR_SAMPLE_RATE</name></decl>,

<decl><name>VAR_N</name></decl>,

<decl><name>VAR_SELECTED_N</name></decl>,

<decl><name>VAR_PREV_SELECTED_N</name></decl>,

<decl><name>VAR_KEY</name></decl>,

<decl><name>VAR_POS</name></decl>,

<decl><name>VAR_SCENE</name></decl>,

<decl><name>VAR_CONCATDEC_SELECT</name></decl>,

<decl><name>VAR_VARS_NB</name></decl>

}</block>;</enum>

<typedef>typedef <type><struct>struct <name>SelectContext</name> <block>{

<decl_stmt><decl><type><specifier>const</specifier> <name>AVClass</name> <modifier>*</modifier></type><name>class</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>expr_str</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVExpr</name> <modifier>*</modifier></type><name>expr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name><name>var_values</name><index>[<expr><name>VAR_VARS_NB</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>bitdepth</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>nb_planes</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ptrdiff_t</name></type> <name><name>width</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ptrdiff_t</name></type> <name><name>height</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>do_scene_detect</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>ff_scene_sad_fn</name></type> <name>sad</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>double</name></type> <name>prev_mafd</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>prev_picref</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>double</name></type> <name>select</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>select_out</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>nb_outputs</name></decl>;</decl_stmt>

}</block></struct></type> <name>SelectContext</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OFFSET</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>offsetof(SelectContext, x)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFINE_OPTIONS</name><parameter_list>(<parameter><type><name>filt_name</name></type></parameter>, <parameter><type><name>FLAGS</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static const AVOption filt_name##_options[] = { { "expr", "set an expression to use for selecting frames", OFFSET(expr_str), AV_OPT_TYPE_STRING, { .str = "1" }, .flags=FLAGS }, { "e", "set an expression to use for selecting frames", OFFSET(expr_str), AV_OPT_TYPE_STRING, { .str = "1" }, .flags=FLAGS }, { "outputs", "set the number of outputs", OFFSET(nb_outputs), AV_OPT_TYPE_INT, {.i64 = 1}, 1, INT_MAX, .flags=FLAGS }, { "n", "set the number of outputs", OFFSET(nb_outputs), AV_OPT_TYPE_INT, {.i64 = 1}, 1, INT_MAX, .flags=FLAGS }, { NULL } }</cpp:value></cpp:define>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>request_frame</name><parameter_list>(<parameter><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>outlink</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>init</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>SelectContext</name> <modifier>*</modifier></type><name>select</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>av_expr_parse</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>select</name><operator>-&gt;</operator><name>expr</name></name></expr></argument>, <argument><expr><name><name>select</name><operator>-&gt;</operator><name>expr_str</name></name></expr></argument>,

<argument><expr><name>var_names</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Error while parsing expression '%s'\n"</literal></expr></argument>,

<argument><expr><name><name>select</name><operator>-&gt;</operator><name>expr_str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>select</name><operator>-&gt;</operator><name>do_scene_detect</name></name> <operator>=</operator> <operator>!</operator><operator>!</operator><call><name>strstr</name><argument_list>(<argument><expr><name><name>select</name><operator>-&gt;</operator><name>expr_str</name></name></expr></argument>, <argument><expr><literal type="string">"scene"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>select</name><operator>-&gt;</operator><name>nb_outputs</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>AVFilterPad</name></type> <name>pad</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>pad</name><operator>.</operator><name>name</name></name> <operator>=</operator> <call><name>av_asprintf</name><argument_list>(<argument><expr><literal type="string">"output%d"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pad</name><operator>.</operator><name>name</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>pad</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>filter</name><operator>-&gt;</operator><name>inputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pad</name><operator>.</operator><name>request_frame</name></name> <operator>=</operator> <name>request_frame</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_insert_outpad</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pad</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pad</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INTERLACE_TYPE_P</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INTERLACE_TYPE_T</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INTERLACE_TYPE_B</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>int</name></type> <name>config_input</name><parameter_list>(<parameter><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>inlink</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>SelectContext</name> <modifier>*</modifier></type><name>select</name> <init>= <expr><name><name>inlink</name><operator>-&gt;</operator><name>dst</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>AVPixFmtDescriptor</name> <modifier>*</modifier></type><name>desc</name> <init>= <expr><call><name>av_pix_fmt_desc_get</name><argument_list>(<argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>format</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>is_yuv</name> <init>= <expr><operator>!</operator><operator>(</operator><name><name>desc</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_PIX_FMT_FLAG_RGB</name><operator>)</operator> <operator>&amp;&amp;</operator>

<operator>(</operator><name><name>desc</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_PIX_FMT_FLAG_PLANAR</name><operator>)</operator> <operator>&amp;&amp;</operator>

<name><name>desc</name><operator>-&gt;</operator><name>nb_components</name></name> <operator>&gt;=</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>select</name><operator>-&gt;</operator><name>bitdepth</name></name> <operator>=</operator> <name><name>desc</name><operator>-&gt;</operator><name>comp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>depth</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>select</name><operator>-&gt;</operator><name>nb_planes</name></name> <operator>=</operator> <ternary><condition><expr><name>is_yuv</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><call><name>av_pix_fmt_count_planes</name><argument_list>(<argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>format</name></name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>plane</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>plane</name> <operator>&lt;</operator> <name><name>select</name><operator>-&gt;</operator><name>nb_planes</name></name></expr>;</condition> <incr><expr><name>plane</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>ptrdiff_t</name></type> <name>line_size</name> <init>= <expr><call><name>av_image_get_linesize</name><argument_list>(<argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>format</name></name></expr></argument>, <argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>w</name></name></expr></argument>, <argument><expr><name>plane</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>vsub</name> <init>= <expr><name><name>desc</name><operator>-&gt;</operator><name>log2_chroma_h</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>select</name><operator>-&gt;</operator><name>width</name><index>[<expr><name>plane</name></expr>]</index></name> <operator>=</operator> <name>line_size</name> <operator>&gt;&gt;</operator> <operator>(</operator><name><name>select</name><operator>-&gt;</operator><name>bitdepth</name></name> <operator>&gt;</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>select</name><operator>-&gt;</operator><name>height</name><index>[<expr><name>plane</name></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><name>plane</name> <operator>==</operator> <literal type="number">1</literal> <operator>||</operator> <name>plane</name> <operator>==</operator> <literal type="number">2</literal></expr> ?</condition><then> <expr><call><name>AV_CEIL_RSHIFT</name><argument_list>(<argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>h</name></name></expr></argument>, <argument><expr><name>vsub</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name><name>inlink</name><operator>-&gt;</operator><name>h</name></name></expr></else></ternary></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>select</name><operator>-&gt;</operator><name>var_values</name><index>[<expr><name>VAR_N</name></expr>]</index></name> <operator>=</operator> <literal type="number">0.0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>select</name><operator>-&gt;</operator><name>var_values</name><index>[<expr><name>VAR_SELECTED_N</name></expr>]</index></name> <operator>=</operator> <literal type="number">0.0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>select</name><operator>-&gt;</operator><name>var_values</name><index>[<expr><name>VAR_TB</name></expr>]</index></name> <operator>=</operator> <call><name>av_q2d</name><argument_list>(<argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>time_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>select</name><operator>-&gt;</operator><name>var_values</name><index>[<expr><name>VAR_PREV_PTS</name></expr>]</index></name> <operator>=</operator> <name>NAN</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>select</name><operator>-&gt;</operator><name>var_values</name><index>[<expr><name>VAR_PREV_SELECTED_PTS</name></expr>]</index></name> <operator>=</operator> <name>NAN</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>select</name><operator>-&gt;</operator><name>var_values</name><index>[<expr><name>VAR_PREV_SELECTED_T</name></expr>]</index></name> <operator>=</operator> <name>NAN</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>select</name><operator>-&gt;</operator><name>var_values</name><index>[<expr><name>VAR_PREV_T</name></expr>]</index></name> <operator>=</operator> <name>NAN</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>select</name><operator>-&gt;</operator><name>var_values</name><index>[<expr><name>VAR_START_PTS</name></expr>]</index></name> <operator>=</operator> <name>NAN</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>select</name><operator>-&gt;</operator><name>var_values</name><index>[<expr><name>VAR_START_T</name></expr>]</index></name> <operator>=</operator> <name>NAN</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>select</name><operator>-&gt;</operator><name>var_values</name><index>[<expr><name>VAR_I</name></expr>]</index></name> <operator>=</operator> <name>AV_PICTURE_TYPE_I</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>select</name><operator>-&gt;</operator><name>var_values</name><index>[<expr><name>VAR_P</name></expr>]</index></name> <operator>=</operator> <name>AV_PICTURE_TYPE_P</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>select</name><operator>-&gt;</operator><name>var_values</name><index>[<expr><name>VAR_B</name></expr>]</index></name> <operator>=</operator> <name>AV_PICTURE_TYPE_B</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>select</name><operator>-&gt;</operator><name>var_values</name><index>[<expr><name>VAR_SI</name></expr>]</index></name> <operator>=</operator> <name>AV_PICTURE_TYPE_SI</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>select</name><operator>-&gt;</operator><name>var_values</name><index>[<expr><name>VAR_SP</name></expr>]</index></name> <operator>=</operator> <name>AV_PICTURE_TYPE_SP</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>select</name><operator>-&gt;</operator><name>var_values</name><index>[<expr><name>VAR_BI</name></expr>]</index></name> <operator>=</operator> <name>AV_PICTURE_TYPE_BI</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>select</name><operator>-&gt;</operator><name>var_values</name><index>[<expr><name>VAR_PICT_TYPE_I</name></expr>]</index></name> <operator>=</operator> <name>AV_PICTURE_TYPE_I</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>select</name><operator>-&gt;</operator><name>var_values</name><index>[<expr><name>VAR_PICT_TYPE_P</name></expr>]</index></name> <operator>=</operator> <name>AV_PICTURE_TYPE_P</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>select</name><operator>-&gt;</operator><name>var_values</name><index>[<expr><name>VAR_PICT_TYPE_B</name></expr>]</index></name> <operator>=</operator> <name>AV_PICTURE_TYPE_B</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>select</name><operator>-&gt;</operator><name>var_values</name><index>[<expr><name>VAR_PICT_TYPE_SI</name></expr>]</index></name> <operator>=</operator> <name>AV_PICTURE_TYPE_SI</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>select</name><operator>-&gt;</operator><name>var_values</name><index>[<expr><name>VAR_PICT_TYPE_SP</name></expr>]</index></name> <operator>=</operator> <name>AV_PICTURE_TYPE_SP</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>select</name><operator>-&gt;</operator><name>var_values</name><index>[<expr><name>VAR_PICT_TYPE_BI</name></expr>]</index></name> <operator>=</operator> <name>AV_PICTURE_TYPE_BI</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>select</name><operator>-&gt;</operator><name>var_values</name><index>[<expr><name>VAR_INTERLACE_TYPE_P</name></expr>]</index></name> <operator>=</operator> <name>INTERLACE_TYPE_P</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>select</name><operator>-&gt;</operator><name>var_values</name><index>[<expr><name>VAR_INTERLACE_TYPE_T</name></expr>]</index></name> <operator>=</operator> <name>INTERLACE_TYPE_T</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>select</name><operator>-&gt;</operator><name>var_values</name><index>[<expr><name>VAR_INTERLACE_TYPE_B</name></expr>]</index></name> <operator>=</operator> <name>INTERLACE_TYPE_B</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>select</name><operator>-&gt;</operator><name>var_values</name><index>[<expr><name>VAR_PICT_TYPE</name></expr>]</index></name> <operator>=</operator> <name>NAN</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>select</name><operator>-&gt;</operator><name>var_values</name><index>[<expr><name>VAR_INTERLACE_TYPE</name></expr>]</index></name> <operator>=</operator> <name>NAN</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>select</name><operator>-&gt;</operator><name>var_values</name><index>[<expr><name>VAR_SCENE</name></expr>]</index></name> <operator>=</operator> <name>NAN</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>select</name><operator>-&gt;</operator><name>var_values</name><index>[<expr><name>VAR_CONSUMED_SAMPLES_N</name></expr>]</index></name> <operator>=</operator> <name>NAN</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>select</name><operator>-&gt;</operator><name>var_values</name><index>[<expr><name>VAR_SAMPLES_N</name></expr>]</index></name> <operator>=</operator> <name>NAN</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>select</name><operator>-&gt;</operator><name>var_values</name><index>[<expr><name>VAR_SAMPLE_RATE</name></expr>]</index></name> <operator>=</operator>

<ternary><condition><expr><name><name>inlink</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>AVMEDIA_TYPE_AUDIO</name></expr> ?</condition><then> <expr><name><name>inlink</name><operator>-&gt;</operator><name>sample_rate</name></name></expr> </then><else>: <expr><name>NAN</name></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>CONFIG_SELECT_FILTER</name> <operator>&amp;&amp;</operator> <name><name>select</name><operator>-&gt;</operator><name>do_scene_detect</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>select</name><operator>-&gt;</operator><name>sad</name></name> <operator>=</operator> <call><name>ff_scene_sad_get_fn</name><argument_list>(<argument><expr><ternary><condition><expr><name><name>select</name><operator>-&gt;</operator><name>bitdepth</name></name> <operator>==</operator> <literal type="number">8</literal></expr> ?</condition><then> <expr><literal type="number">8</literal></expr> </then><else>: <expr><literal type="number">16</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>select</name><operator>-&gt;</operator><name>sad</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>double</name></type> <name>get_scene_score</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>frame</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>double</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SelectContext</name> <modifier>*</modifier></type><name>select</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>prev_picref</name> <init>= <expr><name><name>select</name><operator>-&gt;</operator><name>prev_picref</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>prev_picref</name> <operator>&amp;&amp;</operator>

<name><name>frame</name><operator>-&gt;</operator><name>height</name></name> <operator>==</operator> <name><name>prev_picref</name><operator>-&gt;</operator><name>height</name></name> <operator>&amp;&amp;</operator>

<name><name>frame</name><operator>-&gt;</operator><name>width</name></name> <operator>==</operator> <name><name>prev_picref</name><operator>-&gt;</operator><name>width</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>sad</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>mafd</name></decl>, <decl><type ref="prev"/><name>diff</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>plane</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>plane</name> <operator>&lt;</operator> <name><name>select</name><operator>-&gt;</operator><name>nb_planes</name></name></expr>;</condition> <incr><expr><name>plane</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>plane_sad</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name><name>select</name><operator>-&gt;</operator><name>sad</name></name><argument_list>(<argument><expr><name><name>prev_picref</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>plane</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>prev_picref</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>plane</name></expr>]</index></name></expr></argument>,

<argument><expr><name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>plane</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>plane</name></expr>]</index></name></expr></argument>,

<argument><expr><name><name>select</name><operator>-&gt;</operator><name>width</name><index>[<expr><name>plane</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>select</name><operator>-&gt;</operator><name>height</name><index>[<expr><name>plane</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>plane_sad</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sad</name> <operator>+=</operator> <name>plane_sad</name></expr>;</expr_stmt>

<expr_stmt><expr><name>count</name> <operator>+=</operator> <name><name>select</name><operator>-&gt;</operator><name>width</name><index>[<expr><name>plane</name></expr>]</index></name> <operator>*</operator> <name><name>select</name><operator>-&gt;</operator><name>height</name><index>[<expr><name>plane</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>emms_c</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>mafd</name> <operator>=</operator> <operator>(</operator><name>double</name><operator>)</operator><name>sad</name> <operator>/</operator> <name>count</name> <operator>/</operator> <operator>(</operator><literal type="number">1ULL</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name><name>select</name><operator>-&gt;</operator><name>bitdepth</name></name> <operator>-</operator> <literal type="number">8</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>diff</name> <operator>=</operator> <call><name>fabs</name><argument_list>(<argument><expr><name>mafd</name> <operator>-</operator> <name><name>select</name><operator>-&gt;</operator><name>prev_mafd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>av_clipf</name><argument_list>(<argument><expr><call><name>FFMIN</name><argument_list>(<argument><expr><name>mafd</name></expr></argument>, <argument><expr><name>diff</name></expr></argument>)</argument_list></call> <operator>/</operator> <literal type="number">100.</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>select</name><operator>-&gt;</operator><name>prev_mafd</name></name> <operator>=</operator> <name>mafd</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>prev_picref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>select</name><operator>-&gt;</operator><name>prev_picref</name></name> <operator>=</operator> <call><name>av_frame_clone</name><argument_list>(<argument><expr><name>frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>double</name></type> <name>get_concatdec_select</name><parameter_list>(<parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>frame</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>pts</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVDictionary</name> <modifier>*</modifier></type><name>metadata</name> <init>= <expr><name><name>frame</name><operator>-&gt;</operator><name>metadata</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVDictionaryEntry</name> <modifier>*</modifier></type><name>start_time_entry</name> <init>= <expr><call><name>av_dict_get</name><argument_list>(<argument><expr><name>metadata</name></expr></argument>, <argument><expr><literal type="string">"lavf.concatdec.start_time"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVDictionaryEntry</name> <modifier>*</modifier></type><name>duration_entry</name> <init>= <expr><call><name>av_dict_get</name><argument_list>(<argument><expr><name>metadata</name></expr></argument>, <argument><expr><literal type="string">"lavf.concatdec.duration"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>start_time_entry</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int64_t</name></type> <name>start_time</name> <init>= <expr><call><name>strtoll</name><argument_list>(<argument><expr><name><name>start_time_entry</name><operator>-&gt;</operator><name>value</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>pts</name> <operator>&gt;=</operator> <name>start_time</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>duration_entry</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int64_t</name></type> <name>duration</name> <init>= <expr><call><name>strtoll</name><argument_list>(<argument><expr><name><name>duration_entry</name><operator>-&gt;</operator><name>value</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>pts</name> <operator>&lt;</operator> <name>start_time</name> <operator>+</operator> <name>duration</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>NAN</name></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D2TS</name><parameter_list>(<parameter><type><name>d</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(isnan(d) ? AV_NOPTS_VALUE : (int64_t)(d))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TS2D</name><parameter_list>(<parameter><type><name>ts</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((ts) == AV_NOPTS_VALUE ? NAN : (double)(ts))</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type> <name>select_frame</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>frame</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>SelectContext</name> <modifier>*</modifier></type><name>select</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>inlink</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>inputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>res</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>isnan</name><argument_list>(<argument><expr><name><name>select</name><operator>-&gt;</operator><name>var_values</name><index>[<expr><name>VAR_START_PTS</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>select</name><operator>-&gt;</operator><name>var_values</name><index>[<expr><name>VAR_START_PTS</name></expr>]</index></name> <operator>=</operator> <call><name>TS2D</name><argument_list>(<argument><expr><name><name>frame</name><operator>-&gt;</operator><name>pts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>isnan</name><argument_list>(<argument><expr><name><name>select</name><operator>-&gt;</operator><name>var_values</name><index>[<expr><name>VAR_START_T</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>select</name><operator>-&gt;</operator><name>var_values</name><index>[<expr><name>VAR_START_T</name></expr>]</index></name> <operator>=</operator> <call><name>TS2D</name><argument_list>(<argument><expr><name><name>frame</name><operator>-&gt;</operator><name>pts</name></name></expr></argument>)</argument_list></call> <operator>*</operator> <call><name>av_q2d</name><argument_list>(<argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>time_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>select</name><operator>-&gt;</operator><name>var_values</name><index>[<expr><name>VAR_N</name></expr> ]</index></name> <operator>=</operator> <name><name>inlink</name><operator>-&gt;</operator><name>frame_count_out</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>select</name><operator>-&gt;</operator><name>var_values</name><index>[<expr><name>VAR_PTS</name></expr>]</index></name> <operator>=</operator> <call><name>TS2D</name><argument_list>(<argument><expr><name><name>frame</name><operator>-&gt;</operator><name>pts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>select</name><operator>-&gt;</operator><name>var_values</name><index>[<expr><name>VAR_T</name></expr> ]</index></name> <operator>=</operator> <call><name>TS2D</name><argument_list>(<argument><expr><name><name>frame</name><operator>-&gt;</operator><name>pts</name></name></expr></argument>)</argument_list></call> <operator>*</operator> <call><name>av_q2d</name><argument_list>(<argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>time_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>select</name><operator>-&gt;</operator><name>var_values</name><index>[<expr><name>VAR_POS</name></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><name><name>frame</name><operator>-&gt;</operator><name>pkt_pos</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr> ?</condition><then> <expr><name>NAN</name></expr> </then><else>: <expr><name><name>frame</name><operator>-&gt;</operator><name>pkt_pos</name></name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>select</name><operator>-&gt;</operator><name>var_values</name><index>[<expr><name>VAR_KEY</name></expr>]</index></name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>key_frame</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>select</name><operator>-&gt;</operator><name>var_values</name><index>[<expr><name>VAR_CONCATDEC_SELECT</name></expr>]</index></name> <operator>=</operator> <call><name>get_concatdec_select</name><argument_list>(<argument><expr><name>frame</name></expr></argument>, <argument><expr><call><name>av_rescale_q</name><argument_list>(<argument><expr><name><name>frame</name><operator>-&gt;</operator><name>pts</name></name></expr></argument>, <argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>time_base</name></name></expr></argument>, <argument><expr><name>AV_TIME_BASE_Q</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>inlink</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>AVMEDIA_TYPE_AUDIO</name></expr>:</case>

<expr_stmt><expr><name><name>select</name><operator>-&gt;</operator><name>var_values</name><index>[<expr><name>VAR_SAMPLES_N</name></expr>]</index></name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>nb_samples</name></name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AVMEDIA_TYPE_VIDEO</name></expr>:</case>

<expr_stmt><expr><name><name>select</name><operator>-&gt;</operator><name>var_values</name><index>[<expr><name>VAR_INTERLACE_TYPE</name></expr>]</index></name> <operator>=</operator>

<ternary><condition><expr><operator>!</operator><name><name>frame</name><operator>-&gt;</operator><name>interlaced_frame</name></name></expr> ?</condition><then> <expr><name>INTERLACE_TYPE_P</name></expr> </then><else>:

<expr><ternary><condition><expr><name><name>frame</name><operator>-&gt;</operator><name>top_field_first</name></name></expr> ?</condition><then> <expr><name>INTERLACE_TYPE_T</name></expr> </then><else>: <expr><name>INTERLACE_TYPE_B</name></expr></else></ternary></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>select</name><operator>-&gt;</operator><name>var_values</name><index>[<expr><name>VAR_PICT_TYPE</name></expr>]</index></name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>pict_type</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>select</name><operator>-&gt;</operator><name>do_scene_detect</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>select</name><operator>-&gt;</operator><name>var_values</name><index>[<expr><name>VAR_SCENE</name></expr>]</index></name> <operator>=</operator> <call><name>get_scene_score</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%f"</literal></expr></argument>, <argument><expr><name><name>select</name><operator>-&gt;</operator><name>var_values</name><index>[<expr><name>VAR_SCENE</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_dict_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>frame</name><operator>-&gt;</operator><name>metadata</name></name></expr></argument>, <argument><expr><literal type="string">"lavfi.scene_score"</literal></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

</block_content>}</block></switch>

<expr_stmt><expr><name><name>select</name><operator>-&gt;</operator><name>select</name></name> <operator>=</operator> <name>res</name> <operator>=</operator> <call><name>av_expr_eval</name><argument_list>(<argument><expr><name><name>select</name><operator>-&gt;</operator><name>expr</name></name></expr></argument>, <argument><expr><name><name>select</name><operator>-&gt;</operator><name>var_values</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>dst</name></name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>,

<argument><expr><literal type="string">"n:%f pts:%f t:%f key:%d"</literal></expr></argument>,

<argument><expr><name><name>select</name><operator>-&gt;</operator><name>var_values</name><index>[<expr><name>VAR_N</name></expr>]</index></name></expr></argument>,

<argument><expr><name><name>select</name><operator>-&gt;</operator><name>var_values</name><index>[<expr><name>VAR_PTS</name></expr>]</index></name></expr></argument>,

<argument><expr><name><name>select</name><operator>-&gt;</operator><name>var_values</name><index>[<expr><name>VAR_T</name></expr>]</index></name></expr></argument>,

<argument><expr><name><name>frame</name><operator>-&gt;</operator><name>key_frame</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>inlink</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>AVMEDIA_TYPE_VIDEO</name></expr>:</case>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>dst</name></name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">" interlace_type:%c pict_type:%c scene:%f"</literal></expr></argument>,

<argument><expr><ternary><condition><expr><operator>(</operator><operator>!</operator><name><name>frame</name><operator>-&gt;</operator><name>interlaced_frame</name></name><operator>)</operator></expr> ?</condition><then> <expr><literal type="char">'P'</literal></expr> </then><else>:

<expr><ternary><condition><expr><name><name>frame</name><operator>-&gt;</operator><name>top_field_first</name></name></expr> ?</condition><then> <expr><literal type="char">'T'</literal></expr> </then><else>: <expr><literal type="char">'B'</literal></expr></else></ternary></expr></else></ternary></expr></argument>,

<argument><expr><call><name>av_get_picture_type_char</name><argument_list>(<argument><expr><name><name>frame</name><operator>-&gt;</operator><name>pict_type</name></name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name><name>select</name><operator>-&gt;</operator><name>var_values</name><index>[<expr><name>VAR_SCENE</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AVMEDIA_TYPE_AUDIO</name></expr>:</case>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>dst</name></name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">" samples_n:%d consumed_samples_n:%f"</literal></expr></argument>,

<argument><expr><name><name>frame</name><operator>-&gt;</operator><name>nb_samples</name></name></expr></argument>,

<argument><expr><name><name>select</name><operator>-&gt;</operator><name>var_values</name><index>[<expr><name>VAR_CONSUMED_SAMPLES_N</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name>res</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>select</name><operator>-&gt;</operator><name>select_out</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt> 

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>isnan</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call> <operator>||</operator> <name>res</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>select</name><operator>-&gt;</operator><name>select_out</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>select</name><operator>-&gt;</operator><name>select_out</name></name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><call><name>ceilf</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>select</name><operator>-&gt;</operator><name>nb_outputs</name></name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>dst</name></name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">" -&gt; select:%f select_out:%d\n"</literal></expr></argument>, <argument><expr><name>res</name></expr></argument>, <argument><expr><name><name>select</name><operator>-&gt;</operator><name>select_out</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>res</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>select</name><operator>-&gt;</operator><name>var_values</name><index>[<expr><name>VAR_PREV_SELECTED_N</name></expr>]</index></name> <operator>=</operator> <name><name>select</name><operator>-&gt;</operator><name>var_values</name><index>[<expr><name>VAR_N</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>select</name><operator>-&gt;</operator><name>var_values</name><index>[<expr><name>VAR_PREV_SELECTED_PTS</name></expr>]</index></name> <operator>=</operator> <name><name>select</name><operator>-&gt;</operator><name>var_values</name><index>[<expr><name>VAR_PTS</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>select</name><operator>-&gt;</operator><name>var_values</name><index>[<expr><name>VAR_PREV_SELECTED_T</name></expr>]</index></name> <operator>=</operator> <name><name>select</name><operator>-&gt;</operator><name>var_values</name><index>[<expr><name>VAR_T</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>select</name><operator>-&gt;</operator><name>var_values</name><index>[<expr><name>VAR_SELECTED_N</name></expr>]</index></name> <operator>+=</operator> <literal type="number">1.0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>inlink</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>AVMEDIA_TYPE_AUDIO</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>select</name><operator>-&gt;</operator><name>var_values</name><index>[<expr><name>VAR_CONSUMED_SAMPLES_N</name></expr>]</index></name> <operator>+=</operator> <name><name>frame</name><operator>-&gt;</operator><name>nb_samples</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>select</name><operator>-&gt;</operator><name>var_values</name><index>[<expr><name>VAR_PREV_PTS</name></expr>]</index></name> <operator>=</operator> <name><name>select</name><operator>-&gt;</operator><name>var_values</name><index>[<expr><name>VAR_PTS</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>select</name><operator>-&gt;</operator><name>var_values</name><index>[<expr><name>VAR_PREV_T</name></expr>]</index></name> <operator>=</operator> <name><name>select</name><operator>-&gt;</operator><name>var_values</name><index>[<expr><name>VAR_T</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>filter_frame</name><parameter_list>(<parameter><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>inlink</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>frame</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>inlink</name><operator>-&gt;</operator><name>dst</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SelectContext</name> <modifier>*</modifier></type><name>select</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>select_frame</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>select</name><operator>-&gt;</operator><name>select</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>ff_filter_frame</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>outputs</name><index>[<expr><name><name>select</name><operator>-&gt;</operator><name>select_out</name></name></expr>]</index></name></expr></argument>, <argument><expr><name>frame</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>request_frame</name><parameter_list>(<parameter><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>outlink</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>inlink</name> <init>= <expr><name><name>outlink</name><operator>-&gt;</operator><name>src</name><operator>-&gt;</operator><name>inputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>ff_request_frame</name><argument_list>(<argument><expr><name>inlink</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>void</name></type> <name>uninit</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>SelectContext</name> <modifier>*</modifier></type><name>select</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_expr_free</name><argument_list>(<argument><expr><name><name>select</name><operator>-&gt;</operator><name>expr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>select</name><operator>-&gt;</operator><name>expr</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>nb_outputs</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>output_pads</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name><name>select</name><operator>-&gt;</operator><name>do_scene_detect</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>select</name><operator>-&gt;</operator><name>prev_picref</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_ASELECT_FILTER</name></expr></cpp:if>

<expr_stmt><expr><call><name>DEFINE_OPTIONS</name><argument_list>(<argument><expr><name>aselect</name></expr></argument>, <argument><expr><name>AV_OPT_FLAG_AUDIO_PARAM</name><operator>|</operator><name>AV_OPT_FLAG_FILTERING_PARAM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AVFILTER_DEFINE_CLASS</name><argument_list>(<argument><expr><name>aselect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>aselect_init</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>SelectContext</name> <modifier>*</modifier></type><name>select</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>init</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>select</name><operator>-&gt;</operator><name>do_scene_detect</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Scene detection is ignored in aselect filter\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVFilterPad</name></type> <name><name>avfilter_af_aselect_inputs</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"default"</literal></expr>,

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_AUDIO</name></expr>,

<expr><operator>.</operator><name>config_props</name> <operator>=</operator> <name>config_input</name></expr>,

<expr><operator>.</operator><name>filter_frame</name> <operator>=</operator> <name>filter_frame</name></expr>,

}</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFilter</name></type> <name>ff_af_aselect</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"aselect"</literal></expr>,

<expr><operator>.</operator><name>description</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"Select audio frames to pass in output."</literal></expr></argument>)</argument_list></call></expr>,

<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>aselect_init</name></expr>,

<expr><operator>.</operator><name>uninit</name> <operator>=</operator> <name>uninit</name></expr>,

<expr><operator>.</operator><name>priv_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SelectContext</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><operator>.</operator><name>inputs</name> <operator>=</operator> <name>avfilter_af_aselect_inputs</name></expr>,

<expr><operator>.</operator><name>priv_class</name> <operator>=</operator> <operator>&amp;</operator><name>aselect_class</name></expr>,

<expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>AVFILTER_FLAG_DYNAMIC_OUTPUTS</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_SELECT_FILTER</name></expr></cpp:if>

<function><type><specifier>static</specifier> <name>int</name></type> <name>query_formats</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>SelectContext</name> <modifier>*</modifier></type><name>select</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>select</name><operator>-&gt;</operator><name>do_scene_detect</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>ff_default_query_formats</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>enum</name> <name>AVPixelFormat</name></name></type> <name><name>pix_fmts</name><index>[]</index></name> <init>= <expr><block>{

<expr><name>AV_PIX_FMT_RGB24</name></expr>, <expr><name>AV_PIX_FMT_BGR24</name></expr>, <expr><name>AV_PIX_FMT_RGBA</name></expr>,

<expr><name>AV_PIX_FMT_ABGR</name></expr>, <expr><name>AV_PIX_FMT_BGRA</name></expr>, <expr><name>AV_PIX_FMT_GRAY8</name></expr>,

<expr><name>AV_PIX_FMT_YUV420P</name></expr>, <expr><name>AV_PIX_FMT_YUVJ420P</name></expr>,

<expr><name>AV_PIX_FMT_YUV422P</name></expr>, <expr><name>AV_PIX_FMT_YUVJ422P</name></expr>,

<expr><name>AV_PIX_FMT_YUV420P10</name></expr>,

<expr><name>AV_PIX_FMT_NONE</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFilterFormats</name> <modifier>*</modifier></type><name>fmts_list</name> <init>= <expr><call><name>ff_make_format_list</name><argument_list>(<argument><expr><name>pix_fmts</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>fmts_list</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_set_common_formats</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>fmts_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<expr_stmt><expr><call><name>DEFINE_OPTIONS</name><argument_list>(<argument><expr><name>select</name></expr></argument>, <argument><expr><name>AV_OPT_FLAG_VIDEO_PARAM</name><operator>|</operator><name>AV_OPT_FLAG_FILTERING_PARAM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AVFILTER_DEFINE_CLASS</name><argument_list>(<argument><expr><name>select</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>select_init</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>init</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVFilterPad</name></type> <name><name>avfilter_vf_select_inputs</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"default"</literal></expr>,

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,

<expr><operator>.</operator><name>config_props</name> <operator>=</operator> <name>config_input</name></expr>,

<expr><operator>.</operator><name>filter_frame</name> <operator>=</operator> <name>filter_frame</name></expr>,

}</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFilter</name></type> <name>ff_vf_select</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"select"</literal></expr>,

<expr><operator>.</operator><name>description</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"Select video frames to pass in output."</literal></expr></argument>)</argument_list></call></expr>,

<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>select_init</name></expr>,

<expr><operator>.</operator><name>uninit</name> <operator>=</operator> <name>uninit</name></expr>,

<expr><operator>.</operator><name>query_formats</name> <operator>=</operator> <name>query_formats</name></expr>,

<expr><operator>.</operator><name>priv_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SelectContext</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><operator>.</operator><name>priv_class</name> <operator>=</operator> <operator>&amp;</operator><name>select_class</name></expr>,

<expr><operator>.</operator><name>inputs</name> <operator>=</operator> <name>avfilter_vf_select_inputs</name></expr>,

<expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>AVFILTER_FLAG_DYNAMIC_OUTPUTS</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

</unit>
