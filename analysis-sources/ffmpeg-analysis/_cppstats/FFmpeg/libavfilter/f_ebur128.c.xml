<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavfilter\f_ebur128.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avassert.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avstring.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/channel_layout.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/dict.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/ffmath.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/xga_font_data.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/opt.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/timestamp.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libswresample/swresample.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"audio.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avfilter.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"formats.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_CHANNELS</name></cpp:macro> <cpp:value>63</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PRE_B0</name></cpp:macro> <cpp:value>1.53512485958697</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PRE_B1</name></cpp:macro> <cpp:value>-2.69169618940638</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PRE_B2</name></cpp:macro> <cpp:value>1.19839281085285</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PRE_A1</name></cpp:macro> <cpp:value>-1.69065929318241</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PRE_A2</name></cpp:macro> <cpp:value>0.73248077421585</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RLB_B0</name></cpp:macro> <cpp:value>1.0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RLB_B1</name></cpp:macro> <cpp:value>-2.0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RLB_B2</name></cpp:macro> <cpp:value>1.0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RLB_A1</name></cpp:macro> <cpp:value>-1.99004745483398</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RLB_A2</name></cpp:macro> <cpp:value>0.99007225036621</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ABS_THRES</name></cpp:macro> <cpp:value>-70</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ABS_UP_THRES</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HIST_GRAIN</name></cpp:macro> <cpp:value>100</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HIST_SIZE</name></cpp:macro> <cpp:value>((ABS_UP_THRES - ABS_THRES) * HIST_GRAIN + 1)</cpp:value></cpp:define>

<struct>struct <name>hist_entry</name> <block>{

<decl_stmt><decl><type><name>int</name></type> <name>count</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>double</name></type> <name>energy</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>double</name></type> <name>loudness</name></decl>;</decl_stmt> 

}</block>;</struct>

<struct>struct <name>integrator</name> <block>{

<decl_stmt><decl><type><name>double</name> <modifier>*</modifier></type><name><name>cache</name><index>[<expr><name>MAX_CHANNELS</name></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>cache_pos</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>double</name></type> <name><name>sum</name><index>[<expr><name>MAX_CHANNELS</name></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>filled</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>double</name></type> <name>rel_threshold</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>double</name></type> <name>sum_kept_powers</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>nb_kept_powers</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name><name>struct</name> <name>hist_entry</name></name> <modifier>*</modifier></type><name>histogram</name></decl>;</decl_stmt> 

}</block>;</struct>

<struct>struct <name>rect</name> <block>{ <decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>, <decl><type ref="prev"/><name>w</name></decl>, <decl><type ref="prev"/><name>h</name></decl>;</decl_stmt> }</block>;</struct>

<typedef>typedef <type><struct>struct <name>EBUR128Context</name> <block>{

<decl_stmt><decl><type><specifier>const</specifier> <name>AVClass</name> <modifier>*</modifier></type><name>class</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>peak_mode</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>double</name> <modifier>*</modifier></type><name>true_peaks</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>double</name> <modifier>*</modifier></type><name>sample_peaks</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>double</name> <modifier>*</modifier></type><name>true_peaks_per_frame</name></decl>;</decl_stmt> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_SWRESAMPLE</name></expr></cpp:if>

<decl_stmt><decl><type><name>SwrContext</name> <modifier>*</modifier></type><name>swr_ctx</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>double</name> <modifier>*</modifier></type><name>swr_buf</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>swr_linesize</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>int</name></type> <name>do_video</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>w</name></decl>, <name>h</name>;</decl_stmt> 

<decl_stmt><decl><type><name><name>struct</name> <name>rect</name></name></type> <name>text</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name><name>struct</name> <name>rect</name></name></type> <name>graph</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name><name>struct</name> <name>rect</name></name></type> <name>gauge</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>outpicref</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>meter</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>scale_range</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>y_zero_lu</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>y_opt_max</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>y_opt_min</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>y_line_ref</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>nb_channels</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>double</name> <modifier>*</modifier></type><name>ch_weighting</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>sample_count</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>double</name></type> <name><name>x</name><index>[<expr><name>MAX_CHANNELS</name> <operator>*</operator> <literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>double</name></type> <name><name>y</name><index>[<expr><name>MAX_CHANNELS</name> <operator>*</operator> <literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>double</name></type> <name><name>z</name><index>[<expr><name>MAX_CHANNELS</name> <operator>*</operator> <literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>I400_BINS</name></cpp:macro> <cpp:value>(48000 * 4 / 10)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>I3000_BINS</name></cpp:macro> <cpp:value>(48000 * 3)</cpp:value></cpp:define>

<decl_stmt><decl><type><name><name>struct</name> <name>integrator</name></name></type> <name>i400</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name><name>struct</name> <name>integrator</name></name></type> <name>i3000</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>double</name></type> <name>integrated_loudness</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>double</name></type> <name>loudness_range</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>double</name></type> <name>lra_low</name></decl>, <name>lra_high</name>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>loglevel</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>metadata</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>dual_mono</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>double</name></type> <name>pan_law</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>target</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>gauge_type</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>scale</name></decl>;</decl_stmt> 

}</block></struct></type> <name>EBUR128Context</name>;</typedef>

<enum>enum <block>{

<decl><name>PEAK_MODE_NONE</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,

<decl><name>PEAK_MODE_SAMPLES_PEAKS</name> <init>= <expr><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">1</literal></expr></init></decl>,

<decl><name>PEAK_MODE_TRUE_PEAKS</name> <init>= <expr><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">2</literal></expr></init></decl>,

}</block>;</enum>

<enum>enum <block>{

<decl><name>GAUGE_TYPE_MOMENTARY</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,

<decl><name>GAUGE_TYPE_SHORTTERM</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,

}</block>;</enum>

<enum>enum <block>{

<decl><name>SCALE_TYPE_ABSOLUTE</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,

<decl><name>SCALE_TYPE_RELATIVE</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,

}</block>;</enum>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OFFSET</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>offsetof(EBUR128Context, x)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>A</name></cpp:macro> <cpp:value>AV_OPT_FLAG_AUDIO_PARAM</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V</name></cpp:macro> <cpp:value>AV_OPT_FLAG_VIDEO_PARAM</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F</name></cpp:macro> <cpp:value>AV_OPT_FLAG_FILTERING_PARAM</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVOption</name></type> <name><name>ebur128_options</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><literal type="string">"video"</literal></expr>, <expr><literal type="string">"set video output"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>do_video</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_BOOL</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>V</name><operator>|</operator><name>F</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"size"</literal></expr>, <expr><literal type="string">"set video size"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_IMAGE_SIZE</name></expr>, <expr><block>{<expr><operator>.</operator><name>str</name> <operator>=</operator> <literal type="string">"640x480"</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>V</name><operator>|</operator><name>F</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"meter"</literal></expr>, <expr><literal type="string">"set scale meter (+9 to +18)"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>meter</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">9</literal></expr>}</block></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">18</literal></expr>, <expr><name>V</name><operator>|</operator><name>F</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"framelog"</literal></expr>, <expr><literal type="string">"force frame logging level"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>loglevel</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><name>INT_MIN</name></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>A</name><operator>|</operator><name>V</name><operator>|</operator><name>F</name></expr>, <expr><literal type="string">"level"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"info"</literal></expr>, <expr><literal type="string">"information logging level"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>AV_LOG_INFO</name></expr>}</block></expr>, <expr><name>INT_MIN</name></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>A</name><operator>|</operator><name>V</name><operator>|</operator><name>F</name></expr>, <expr><literal type="string">"level"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"verbose"</literal></expr>, <expr><literal type="string">"verbose logging level"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>AV_LOG_VERBOSE</name></expr>}</block></expr>, <expr><name>INT_MIN</name></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>A</name><operator>|</operator><name>V</name><operator>|</operator><name>F</name></expr>, <expr><literal type="string">"level"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"metadata"</literal></expr>, <expr><literal type="string">"inject metadata in the filtergraph"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>metadata</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_BOOL</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>A</name><operator>|</operator><name>V</name><operator>|</operator><name>F</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"peak"</literal></expr>, <expr><literal type="string">"set peak mode"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>peak_mode</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_FLAGS</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>PEAK_MODE_NONE</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>A</name><operator>|</operator><name>F</name></expr>, <expr><literal type="string">"mode"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"none"</literal></expr>, <expr><literal type="string">"disable any peak mode"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>PEAK_MODE_NONE</name></expr>}</block></expr>, <expr><name>INT_MIN</name></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>A</name><operator>|</operator><name>F</name></expr>, <expr><literal type="string">"mode"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"sample"</literal></expr>, <expr><literal type="string">"enable peak-sample mode"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>PEAK_MODE_SAMPLES_PEAKS</name></expr>}</block></expr>, <expr><name>INT_MIN</name></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>A</name><operator>|</operator><name>F</name></expr>, <expr><literal type="string">"mode"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"true"</literal></expr>, <expr><literal type="string">"enable true-peak mode"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>PEAK_MODE_TRUE_PEAKS</name></expr>}</block></expr>, <expr><name>INT_MIN</name></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>A</name><operator>|</operator><name>F</name></expr>, <expr><literal type="string">"mode"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"dualmono"</literal></expr>, <expr><literal type="string">"treat mono input files as dual-mono"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>dual_mono</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_BOOL</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>A</name><operator>|</operator><name>F</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"panlaw"</literal></expr>, <expr><literal type="string">"set a specific pan law for dual-mono files"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>pan_law</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_DOUBLE</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name> <operator>=</operator> <operator>-</operator><literal type="number">3.01029995663978</literal></expr>}</block></expr>, <expr><operator>-</operator><literal type="number">10.0</literal></expr>, <expr><literal type="number">0.0</literal></expr>, <expr><name>A</name><operator>|</operator><name>F</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"target"</literal></expr>, <expr><literal type="string">"set a specific target level in LUFS (-23 to 0)"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>target</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <operator>-</operator><literal type="number">23</literal></expr>}</block></expr>, <expr><operator>-</operator><literal type="number">23</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>V</name><operator>|</operator><name>F</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"gauge"</literal></expr>, <expr><literal type="string">"set gauge display type"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>gauge_type</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0</literal></expr> }</block></expr>, <expr><name>GAUGE_TYPE_MOMENTARY</name></expr>, <expr><name>GAUGE_TYPE_SHORTTERM</name></expr>, <expr><name>V</name><operator>|</operator><name>F</name></expr>, <expr><literal type="string">"gaugetype"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"momentary"</literal></expr>, <expr><literal type="string">"display momentary value"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>GAUGE_TYPE_MOMENTARY</name></expr>}</block></expr>, <expr><name>INT_MIN</name></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>V</name><operator>|</operator><name>F</name></expr>, <expr><literal type="string">"gaugetype"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"m"</literal></expr>, <expr><literal type="string">"display momentary value"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>GAUGE_TYPE_MOMENTARY</name></expr>}</block></expr>, <expr><name>INT_MIN</name></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>V</name><operator>|</operator><name>F</name></expr>, <expr><literal type="string">"gaugetype"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"shortterm"</literal></expr>, <expr><literal type="string">"display short-term value"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>GAUGE_TYPE_SHORTTERM</name></expr>}</block></expr>, <expr><name>INT_MIN</name></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>V</name><operator>|</operator><name>F</name></expr>, <expr><literal type="string">"gaugetype"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"s"</literal></expr>, <expr><literal type="string">"display short-term value"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>GAUGE_TYPE_SHORTTERM</name></expr>}</block></expr>, <expr><name>INT_MIN</name></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>V</name><operator>|</operator><name>F</name></expr>, <expr><literal type="string">"gaugetype"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"scale"</literal></expr>, <expr><literal type="string">"sets display method for the stats"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>scale</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0</literal></expr>}</block></expr>, <expr><name>SCALE_TYPE_ABSOLUTE</name></expr>, <expr><name>SCALE_TYPE_RELATIVE</name></expr>, <expr><name>V</name><operator>|</operator><name>F</name></expr>, <expr><literal type="string">"scaletype"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"absolute"</literal></expr>, <expr><literal type="string">"display absolute values (LUFS)"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>SCALE_TYPE_ABSOLUTE</name></expr>}</block></expr>, <expr><name>INT_MIN</name></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>V</name><operator>|</operator><name>F</name></expr>, <expr><literal type="string">"scaletype"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"LUFS"</literal></expr>, <expr><literal type="string">"display absolute values (LUFS)"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>SCALE_TYPE_ABSOLUTE</name></expr>}</block></expr>, <expr><name>INT_MIN</name></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>V</name><operator>|</operator><name>F</name></expr>, <expr><literal type="string">"scaletype"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"relative"</literal></expr>, <expr><literal type="string">"display values relative to target (LU)"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>SCALE_TYPE_RELATIVE</name></expr>}</block></expr>, <expr><name>INT_MIN</name></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>V</name><operator>|</operator><name>F</name></expr>, <expr><literal type="string">"scaletype"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"LU"</literal></expr>, <expr><literal type="string">"display values relative to target (LU)"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>SCALE_TYPE_RELATIVE</name></expr>}</block></expr>, <expr><name>INT_MIN</name></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>V</name><operator>|</operator><name>F</name></expr>, <expr><literal type="string">"scaletype"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>,

}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>AVFILTER_DEFINE_CLASS</name><argument_list>(<argument><expr><name>ebur128</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>graph_colors</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="number">0xdd</literal></expr>, <expr><literal type="number">0x66</literal></expr>, <expr><literal type="number">0x66</literal></expr>, 

<expr><literal type="number">0x66</literal></expr>, <expr><literal type="number">0x66</literal></expr>, <expr><literal type="number">0xdd</literal></expr>, 

<expr><literal type="number">0x96</literal></expr>, <expr><literal type="number">0x33</literal></expr>, <expr><literal type="number">0x33</literal></expr>, 

<expr><literal type="number">0x33</literal></expr>, <expr><literal type="number">0x33</literal></expr>, <expr><literal type="number">0x96</literal></expr>, 

<expr><literal type="number">0xdd</literal></expr>, <expr><literal type="number">0x96</literal></expr>, <expr><literal type="number">0x96</literal></expr>, 

<expr><literal type="number">0x96</literal></expr>, <expr><literal type="number">0x96</literal></expr>, <expr><literal type="number">0xdd</literal></expr>, 

<expr><literal type="number">0xdd</literal></expr>, <expr><literal type="number">0x33</literal></expr>, <expr><literal type="number">0x33</literal></expr>, 

<expr><literal type="number">0x33</literal></expr>, <expr><literal type="number">0x33</literal></expr>, <expr><literal type="number">0xdd</literal></expr>, 

<expr><literal type="number">0xdd</literal></expr>, <expr><literal type="number">0x66</literal></expr>, <expr><literal type="number">0x66</literal></expr>, 

<expr><literal type="number">0x66</literal></expr>, <expr><literal type="number">0xdd</literal></expr>, <expr><literal type="number">0x66</literal></expr>, 

<expr><literal type="number">0x96</literal></expr>, <expr><literal type="number">0x33</literal></expr>, <expr><literal type="number">0x33</literal></expr>, 

<expr><literal type="number">0x33</literal></expr>, <expr><literal type="number">0x96</literal></expr>, <expr><literal type="number">0x33</literal></expr>, 

<expr><literal type="number">0xdd</literal></expr>, <expr><literal type="number">0x96</literal></expr>, <expr><literal type="number">0x96</literal></expr>, 

<expr><literal type="number">0x96</literal></expr>, <expr><literal type="number">0xdd</literal></expr>, <expr><literal type="number">0x96</literal></expr>, 

<expr><literal type="number">0xdd</literal></expr>, <expr><literal type="number">0x33</literal></expr>, <expr><literal type="number">0x33</literal></expr>, 

<expr><literal type="number">0x33</literal></expr>, <expr><literal type="number">0xdd</literal></expr>, <expr><literal type="number">0x33</literal></expr>, 

}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>get_graph_color</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>EBUR128Context</name> <modifier>*</modifier></type><name>ebur128</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>v</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>above_opt_max</name> <init>= <expr><name>y</name> <operator>&gt;</operator> <name><name>ebur128</name><operator>-&gt;</operator><name>y_opt_max</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>below_opt_min</name> <init>= <expr><name>y</name> <operator>&lt;</operator> <name><name>ebur128</name><operator>-&gt;</operator><name>y_opt_min</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>reached</name> <init>= <expr><name>y</name> <operator>&gt;=</operator> <name>v</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>line</name> <init>= <expr><name><name>ebur128</name><operator>-&gt;</operator><name>y_line_ref</name><index>[<expr><name>y</name></expr>]</index></name> <operator>||</operator> <name>y</name> <operator>==</operator> <name><name>ebur128</name><operator>-&gt;</operator><name>y_zero_lu</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>colorid</name> <init>= <expr><literal type="number">8</literal><operator>*</operator><name>below_opt_min</name><operator>+</operator> <literal type="number">4</literal><operator>*</operator><name>line</name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>reached</name> <operator>+</operator> <name>above_opt_max</name></expr></init></decl>;</decl_stmt>

<return>return <expr><name>graph_colors</name> <operator>+</operator> <literal type="number">3</literal><operator>*</operator><name>colorid</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>lu_to_y</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>EBUR128Context</name> <modifier>*</modifier></type><name>ebur128</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>v</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name>v</name> <operator>+=</operator> <literal type="number">2</literal> <operator>*</operator> <name><name>ebur128</name><operator>-&gt;</operator><name>meter</name></name></expr>;</expr_stmt> 

<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>av_clipf</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>ebur128</name><operator>-&gt;</operator><name>scale_range</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name>v</name> <operator>=</operator> <name><name>ebur128</name><operator>-&gt;</operator><name>scale_range</name></name> <operator>-</operator> <name>v</name></expr>;</expr_stmt> 

<return>return <expr><name>v</name> <operator>*</operator> <name><name>ebur128</name><operator>-&gt;</operator><name>graph</name><operator>.</operator><name>h</name></name> <operator>/</operator> <name><name>ebur128</name><operator>-&gt;</operator><name>scale_range</name></name></expr>;</return> 

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FONT8</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FONT16</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>font_colors</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="number">0xdd</literal></expr>, <expr><literal type="number">0xdd</literal></expr>, <expr><literal type="number">0x00</literal></expr>,

<expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x96</literal></expr>, <expr><literal type="number">0x96</literal></expr>,

}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>drawtext</name><parameter_list>(<parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>pic</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ftid</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>color</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">128</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>font</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>font_height</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>va_list</name></type> <name>vl</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ftid</name> <operator>==</operator> <name>FONT16</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>font</name> <operator>=</operator> <name>avpriv_vga16_font</name></expr><operator>,</operator> <expr><name>font_height</name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>ftid</name> <operator>==</operator> <name>FONT8</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>font</name> <operator>=</operator> <name>avpriv_cga_font</name></expr><operator>,</operator> <expr><name>font_height</name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content> <return>return;</return></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>vl</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vsnprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>vl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>vl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>char_y</name></decl>, <decl><type ref="prev"/><name>mask</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name><name>pic</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>y</name><operator>*</operator><name><name>pic</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><name>x</name> <operator>+</operator> <name>i</name><operator>*</operator><literal type="number">8</literal><operator>)</operator><operator>*</operator><literal type="number">3</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>char_y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>char_y</name> <operator>&lt;</operator> <name>font_height</name></expr>;</condition> <incr><expr><name>char_y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>mask</name> <operator>=</operator> <literal type="number">0x80</literal></expr>;</init> <condition><expr><name>mask</name></expr>;</condition> <incr><expr><name>mask</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>font</name><index>[<expr><name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name>font_height</name> <operator>+</operator> <name>char_y</name></expr>]</index></name> <operator>&amp;</operator> <name>mask</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>color</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"\x00\x00\x00"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>p</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>p</name> <operator>+=</operator> <name><name>pic</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <literal type="number">8</literal><operator>*</operator><literal type="number">3</literal></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>drawline</name><parameter_list>(<parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>pic</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>step</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name><name>pic</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>y</name><operator>*</operator><name><name>pic</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>x</name><operator>*</operator><literal type="number">3</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"\x00\xff\x00"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>+=</operator> <name>step</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>config_video_output</name><parameter_list>(<parameter><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>outlink</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>outlink</name><operator>-&gt;</operator><name>src</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EBUR128Context</name> <modifier>*</modifier></type><name>ebur128</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>outpicref</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ebur128</name><operator>-&gt;</operator><name>w</name></name> <operator>&lt;</operator> <literal type="number">640</literal> <operator>||</operator> <name><name>ebur128</name><operator>-&gt;</operator><name>h</name></name> <operator>&lt;</operator> <literal type="number">480</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Video size %dx%d is too small, "</literal>

<literal type="string">"minimum size is 640x480\n"</literal></expr></argument>, <argument><expr><name><name>ebur128</name><operator>-&gt;</operator><name>w</name></name></expr></argument>, <argument><expr><name><name>ebur128</name><operator>-&gt;</operator><name>h</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>outlink</name><operator>-&gt;</operator><name>w</name></name> <operator>=</operator> <name><name>ebur128</name><operator>-&gt;</operator><name>w</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>outlink</name><operator>-&gt;</operator><name>h</name></name> <operator>=</operator> <name><name>ebur128</name><operator>-&gt;</operator><name>h</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>outlink</name><operator>-&gt;</operator><name>sample_aspect_ratio</name></name> <operator>=</operator> <operator>(</operator><name>AVRational</name><operator>)</operator><block>{<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>}</block></expr>;</expr_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PAD</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>

<expr_stmt><expr><name><name>ebur128</name><operator>-&gt;</operator><name>text</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name>PAD</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ebur128</name><operator>-&gt;</operator><name>text</name><operator>.</operator><name>y</name></name> <operator>=</operator> <literal type="number">40</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ebur128</name><operator>-&gt;</operator><name>text</name><operator>.</operator><name>w</name></name> <operator>=</operator> <literal type="number">3</literal> <operator>*</operator> <literal type="number">8</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>ebur128</name><operator>-&gt;</operator><name>text</name><operator>.</operator><name>h</name></name> <operator>=</operator> <name><name>ebur128</name><operator>-&gt;</operator><name>h</name></name> <operator>-</operator> <name>PAD</name> <operator>-</operator> <name><name>ebur128</name><operator>-&gt;</operator><name>text</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ebur128</name><operator>-&gt;</operator><name>gauge</name><operator>.</operator><name>w</name></name> <operator>=</operator> <literal type="number">20</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ebur128</name><operator>-&gt;</operator><name>gauge</name><operator>.</operator><name>h</name></name> <operator>=</operator> <name><name>ebur128</name><operator>-&gt;</operator><name>text</name><operator>.</operator><name>h</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ebur128</name><operator>-&gt;</operator><name>gauge</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name><name>ebur128</name><operator>-&gt;</operator><name>w</name></name> <operator>-</operator> <name>PAD</name> <operator>-</operator> <name><name>ebur128</name><operator>-&gt;</operator><name>gauge</name><operator>.</operator><name>w</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ebur128</name><operator>-&gt;</operator><name>gauge</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name><name>ebur128</name><operator>-&gt;</operator><name>text</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ebur128</name><operator>-&gt;</operator><name>graph</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name><name>ebur128</name><operator>-&gt;</operator><name>text</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name><name>ebur128</name><operator>-&gt;</operator><name>text</name><operator>.</operator><name>w</name></name> <operator>+</operator> <name>PAD</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ebur128</name><operator>-&gt;</operator><name>graph</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name><name>ebur128</name><operator>-&gt;</operator><name>gauge</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ebur128</name><operator>-&gt;</operator><name>graph</name><operator>.</operator><name>w</name></name> <operator>=</operator> <name><name>ebur128</name><operator>-&gt;</operator><name>gauge</name><operator>.</operator><name>x</name></name> <operator>-</operator> <name><name>ebur128</name><operator>-&gt;</operator><name>graph</name><operator>.</operator><name>x</name></name> <operator>-</operator> <name>PAD</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ebur128</name><operator>-&gt;</operator><name>graph</name><operator>.</operator><name>h</name></name> <operator>=</operator> <name><name>ebur128</name><operator>-&gt;</operator><name>gauge</name><operator>.</operator><name>h</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name><name>ebur128</name><operator>-&gt;</operator><name>graph</name><operator>.</operator><name>h</name></name> <operator>==</operator> <name><name>ebur128</name><operator>-&gt;</operator><name>gauge</name><operator>.</operator><name>h</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ebur128</name><operator>-&gt;</operator><name>outpicref</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ebur128</name><operator>-&gt;</operator><name>outpicref</name></name> <operator>=</operator> <name>outpicref</name> <operator>=</operator>

<call><name>ff_get_video_buffer</name><argument_list>(<argument><expr><name>outlink</name></expr></argument>, <argument><expr><name><name>outlink</name><operator>-&gt;</operator><name>w</name></name></expr></argument>, <argument><expr><name><name>outlink</name><operator>-&gt;</operator><name>h</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>outpicref</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>outpicref</name><operator>-&gt;</operator><name>sample_aspect_ratio</name></name> <operator>=</operator> <operator>(</operator><name>AVRational</name><operator>)</operator><block>{<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>}</block></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ebur128</name><operator>-&gt;</operator><name>y_line_ref</name></name> <operator>=</operator> <call><name>av_calloc</name><argument_list>(<argument><expr><name><name>ebur128</name><operator>-&gt;</operator><name>graph</name><operator>.</operator><name>h</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>ebur128</name><operator>-&gt;</operator><name>y_line_ref</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ebur128</name><operator>-&gt;</operator><name>y_line_ref</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>outpicref</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>ebur128</name><operator>-&gt;</operator><name>h</name></name> <operator>*</operator> <name><name>outpicref</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>drawtext</name><argument_list>(<argument><expr><name>outpicref</name></expr></argument>, <argument><expr><name>PAD</name></expr></argument>, <argument><expr><name>PAD</name><operator>+</operator><literal type="number">16</literal></expr></argument>, <argument><expr><name>FONT8</name></expr></argument>, <argument><expr><name>font_colors</name><operator>+</operator><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="string">" LU"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name><name>ebur128</name><operator>-&gt;</operator><name>meter</name></name></expr>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <operator>-</operator><name><name>ebur128</name><operator>-&gt;</operator><name>meter</name></name> <operator>*</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>y</name> <operator>=</operator> <call><name>lu_to_y</name><argument_list>(<argument><expr><name>ebur128</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>x</name> <operator>=</operator> <name>PAD</name> <operator>+</operator> <operator>(</operator><name><name>i</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">10</literal> <operator>&amp;&amp;</operator> <name>i</name></expr></argument> &gt;</argument_list></name> <operator>-</operator><literal type="number">10</literal><operator>)</operator> <operator>*</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ebur128</name><operator>-&gt;</operator><name>y_line_ref</name><index>[<expr><name>y</name></expr>]</index></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

<expr_stmt><expr><name>y</name> <operator>-=</operator> <literal type="number">4</literal></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>drawtext</name><argument_list>(<argument><expr><name>outpicref</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name> <operator>+</operator> <name><name>ebur128</name><operator>-&gt;</operator><name>graph</name><operator>.</operator><name>y</name></name></expr></argument>, <argument><expr><name>FONT8</name></expr></argument>, <argument><expr><name>font_colors</name><operator>+</operator><literal type="number">3</literal></expr></argument>,

<argument><expr><literal type="string">"%c%d"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="char">'-'</literal></expr> </then><else>: <expr><ternary><condition><expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="char">'+'</literal></expr> </then><else>: <expr><literal type="char">' '</literal></expr></else></ternary></expr></else></ternary></expr></argument>, <argument><expr><call><name>FFABS</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>ebur128</name><operator>-&gt;</operator><name>y_zero_lu</name></name> <operator>=</operator> <call><name>lu_to_y</name><argument_list>(<argument><expr><name>ebur128</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ebur128</name><operator>-&gt;</operator><name>y_opt_max</name></name> <operator>=</operator> <call><name>lu_to_y</name><argument_list>(<argument><expr><name>ebur128</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ebur128</name><operator>-&gt;</operator><name>y_opt_min</name></name> <operator>=</operator> <call><name>lu_to_y</name><argument_list>(<argument><expr><name>ebur128</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>outpicref</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>ebur128</name><operator>-&gt;</operator><name>graph</name><operator>.</operator><name>y</name></name> <operator>*</operator> <name><name>outpicref</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name>

<operator>+</operator> <name><name>ebur128</name><operator>-&gt;</operator><name>graph</name><operator>.</operator><name>x</name></name> <operator>*</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name><name>ebur128</name><operator>-&gt;</operator><name>graph</name><operator>.</operator><name>h</name></name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><call><name>get_graph_color</name><argument_list>(<argument><expr><name>ebur128</name></expr></argument>, <argument><expr><name>INT_MAX</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name><name>ebur128</name><operator>-&gt;</operator><name>graph</name><operator>.</operator><name>w</name></name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <name>x</name><operator>*</operator><literal type="number">3</literal></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>p</name> <operator>+=</operator> <name><name>outpicref</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DRAW_RECT</name><parameter_list>(<parameter><type><name>r</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { drawline(outpicref, r.x, r.y - 1, r.w, 3); drawline(outpicref, r.x, r.y + r.h, r.w, 3); drawline(outpicref, r.x - 1, r.y, r.h, outpicref-&gt;linesize[0]); drawline(outpicref, r.x + r.w, r.y, r.h, outpicref-&gt;linesize[0]); } while (0)</cpp:value></cpp:define>

<expr_stmt><expr><call><name>DRAW_RECT</name><argument_list>(<argument><expr><name><name>ebur128</name><operator>-&gt;</operator><name>graph</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DRAW_RECT</name><argument_list>(<argument><expr><name><name>ebur128</name><operator>-&gt;</operator><name>gauge</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>config_audio_input</name><parameter_list>(<parameter><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>inlink</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>inlink</name><operator>-&gt;</operator><name>dst</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EBUR128Context</name> <modifier>*</modifier></type><name>ebur128</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ebur128</name><operator>-&gt;</operator><name>metadata</name></name> <operator>||</operator> <operator>(</operator><name><name>ebur128</name><operator>-&gt;</operator><name>peak_mode</name></name> <operator>&amp;</operator> <name>PEAK_MODE_TRUE_PEAKS</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>inlink</name><operator>-&gt;</operator><name>min_samples</name></name> <operator>=</operator>

<name><name>inlink</name><operator>-&gt;</operator><name>max_samples</name></name> <operator>=</operator>

<name><name>inlink</name><operator>-&gt;</operator><name>partial_buf_size</name></name> <operator>=</operator> <name><name>inlink</name><operator>-&gt;</operator><name>sample_rate</name></name> <operator>/</operator> <literal type="number">10</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>config_audio_output</name><parameter_list>(<parameter><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>outlink</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>outlink</name><operator>-&gt;</operator><name>src</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EBUR128Context</name> <modifier>*</modifier></type><name>ebur128</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>nb_channels</name> <init>= <expr><call><name>av_get_channel_layout_nb_channels</name><argument_list>(<argument><expr><name><name>outlink</name><operator>-&gt;</operator><name>channel_layout</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BACK_MASK</name></cpp:macro> <cpp:value>(AV_CH_BACK_LEFT |AV_CH_BACK_CENTER |AV_CH_BACK_RIGHT| AV_CH_TOP_BACK_LEFT|AV_CH_TOP_BACK_CENTER|AV_CH_TOP_BACK_RIGHT| AV_CH_SIDE_LEFT |AV_CH_SIDE_RIGHT| AV_CH_SURROUND_DIRECT_LEFT |AV_CH_SURROUND_DIRECT_RIGHT)</cpp:value></cpp:define>

<expr_stmt><expr><name><name>ebur128</name><operator>-&gt;</operator><name>nb_channels</name></name> <operator>=</operator> <name>nb_channels</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ebur128</name><operator>-&gt;</operator><name>ch_weighting</name></name> <operator>=</operator> <call><name>av_calloc</name><argument_list>(<argument><expr><name>nb_channels</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>ebur128</name><operator>-&gt;</operator><name>ch_weighting</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ebur128</name><operator>-&gt;</operator><name>ch_weighting</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nb_channels</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint64_t</name></type> <name>chl</name> <init>= <expr><call><name>av_channel_layout_extract_channel</name><argument_list>(<argument><expr><name><name>outlink</name><operator>-&gt;</operator><name>channel_layout</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>chl</name> <operator>&amp;</operator> <operator>(</operator><name>AV_CH_LOW_FREQUENCY</name><operator>|</operator><name>AV_CH_LOW_FREQUENCY_2</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ebur128</name><operator>-&gt;</operator><name>ch_weighting</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>chl</name> <operator>&amp;</operator> <name>BACK_MASK</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ebur128</name><operator>-&gt;</operator><name>ch_weighting</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">1.41</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>ebur128</name><operator>-&gt;</operator><name>ch_weighting</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">1.0</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ebur128</name><operator>-&gt;</operator><name>ch_weighting</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>ebur128</name><operator>-&gt;</operator><name>i400</name><operator>.</operator><name>cache</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>av_calloc</name><argument_list>(<argument><expr><name>I400_BINS</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>ebur128</name><operator>-&gt;</operator><name>i400</name><operator>.</operator><name>cache</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ebur128</name><operator>-&gt;</operator><name>i3000</name><operator>.</operator><name>cache</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>av_calloc</name><argument_list>(<argument><expr><name>I3000_BINS</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>ebur128</name><operator>-&gt;</operator><name>i3000</name><operator>.</operator><name>cache</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ebur128</name><operator>-&gt;</operator><name>i400</name><operator>.</operator><name>cache</name><index>[<expr><name>i</name></expr>]</index></name> <operator>||</operator> <operator>!</operator><name><name>ebur128</name><operator>-&gt;</operator><name>i3000</name><operator>.</operator><name>cache</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></for>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_SWRESAMPLE</name></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><name><name>ebur128</name><operator>-&gt;</operator><name>peak_mode</name></name> <operator>&amp;</operator> <name>PEAK_MODE_TRUE_PEAKS</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>ebur128</name><operator>-&gt;</operator><name>swr_buf</name></name> <operator>=</operator> <call><name>av_malloc_array</name><argument_list>(<argument><expr><name>nb_channels</name></expr></argument>, <argument><expr><literal type="number">19200</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>double</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ebur128</name><operator>-&gt;</operator><name>true_peaks</name></name> <operator>=</operator> <call><name>av_calloc</name><argument_list>(<argument><expr><name>nb_channels</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>ebur128</name><operator>-&gt;</operator><name>true_peaks</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ebur128</name><operator>-&gt;</operator><name>true_peaks_per_frame</name></name> <operator>=</operator> <call><name>av_calloc</name><argument_list>(<argument><expr><name>nb_channels</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>ebur128</name><operator>-&gt;</operator><name>true_peaks_per_frame</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ebur128</name><operator>-&gt;</operator><name>swr_ctx</name></name> <operator>=</operator> <call><name>swr_alloc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ebur128</name><operator>-&gt;</operator><name>swr_buf</name></name> <operator>||</operator> <operator>!</operator><name><name>ebur128</name><operator>-&gt;</operator><name>true_peaks</name></name> <operator>||</operator>

<operator>!</operator><name><name>ebur128</name><operator>-&gt;</operator><name>true_peaks_per_frame</name></name> <operator>||</operator> <operator>!</operator><name><name>ebur128</name><operator>-&gt;</operator><name>swr_ctx</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_opt_set_int</name><argument_list>(<argument><expr><name><name>ebur128</name><operator>-&gt;</operator><name>swr_ctx</name></name></expr></argument>, <argument><expr><literal type="string">"in_channel_layout"</literal></expr></argument>, <argument><expr><name><name>outlink</name><operator>-&gt;</operator><name>channel_layout</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_opt_set_int</name><argument_list>(<argument><expr><name><name>ebur128</name><operator>-&gt;</operator><name>swr_ctx</name></name></expr></argument>, <argument><expr><literal type="string">"in_sample_rate"</literal></expr></argument>, <argument><expr><name><name>outlink</name><operator>-&gt;</operator><name>sample_rate</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_opt_set_sample_fmt</name><argument_list>(<argument><expr><name><name>ebur128</name><operator>-&gt;</operator><name>swr_ctx</name></name></expr></argument>, <argument><expr><literal type="string">"in_sample_fmt"</literal></expr></argument>, <argument><expr><name><name>outlink</name><operator>-&gt;</operator><name>format</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_opt_set_int</name><argument_list>(<argument><expr><name><name>ebur128</name><operator>-&gt;</operator><name>swr_ctx</name></name></expr></argument>, <argument><expr><literal type="string">"out_channel_layout"</literal></expr></argument>, <argument><expr><name><name>outlink</name><operator>-&gt;</operator><name>channel_layout</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_opt_set_int</name><argument_list>(<argument><expr><name><name>ebur128</name><operator>-&gt;</operator><name>swr_ctx</name></name></expr></argument>, <argument><expr><literal type="string">"out_sample_rate"</literal></expr></argument>, <argument><expr><literal type="number">192000</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_opt_set_sample_fmt</name><argument_list>(<argument><expr><name><name>ebur128</name><operator>-&gt;</operator><name>swr_ctx</name></name></expr></argument>, <argument><expr><literal type="string">"out_sample_fmt"</literal></expr></argument>, <argument><expr><name><name>outlink</name><operator>-&gt;</operator><name>format</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>swr_init</name><argument_list>(<argument><expr><name><name>ebur128</name><operator>-&gt;</operator><name>swr_ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name><name>ebur128</name><operator>-&gt;</operator><name>peak_mode</name></name> <operator>&amp;</operator> <name>PEAK_MODE_SAMPLES_PEAKS</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ebur128</name><operator>-&gt;</operator><name>sample_peaks</name></name> <operator>=</operator> <call><name>av_calloc</name><argument_list>(<argument><expr><name>nb_channels</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>ebur128</name><operator>-&gt;</operator><name>sample_peaks</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ebur128</name><operator>-&gt;</operator><name>sample_peaks</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENERGY</name><parameter_list>(<parameter><type><name>loudness</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(ff_exp10(((loudness) + 0.691) / 10.))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOUDNESS</name><parameter_list>(<parameter><type><name>energy</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(-0.691 + 10 * log10(energy))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DBFS</name><parameter_list>(<parameter><type><name>energy</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(20 * log10(energy))</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>hist_entry</name></name> <modifier>*</modifier></type><name>get_histogram</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>hist_entry</name></name> <modifier>*</modifier></type><name>h</name> <init>= <expr><call><name>av_calloc</name><argument_list>(<argument><expr><name>HIST_SIZE</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>h</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>h</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>HIST_SIZE</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>h</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>loudness</name> <operator>=</operator> <name>i</name> <operator>/</operator> <operator>(</operator><name>double</name><operator>)</operator><name>HIST_GRAIN</name> <operator>+</operator> <name>ABS_THRES</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>energy</name> <operator>=</operator> <call><name>ENERGY</name><argument_list>(<argument><expr><name><name>h</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>loudness</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><name>h</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>init</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>EBUR128Context</name> <modifier>*</modifier></type><name>ebur128</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFilterPad</name></type> <name>pad</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ebur128</name><operator>-&gt;</operator><name>loglevel</name></name> <operator>!=</operator> <name>AV_LOG_INFO</name> <operator>&amp;&amp;</operator>

<name><name>ebur128</name><operator>-&gt;</operator><name>loglevel</name></name> <operator>!=</operator> <name>AV_LOG_VERBOSE</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>ebur128</name><operator>-&gt;</operator><name>do_video</name></name> <operator>||</operator> <name><name>ebur128</name><operator>-&gt;</operator><name>metadata</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ebur128</name><operator>-&gt;</operator><name>loglevel</name></name> <operator>=</operator> <name>AV_LOG_VERBOSE</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ebur128</name><operator>-&gt;</operator><name>loglevel</name></name> <operator>=</operator> <name>AV_LOG_INFO</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>CONFIG_SWRESAMPLE</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>ebur128</name><operator>-&gt;</operator><name>peak_mode</name></name> <operator>&amp;</operator> <name>PEAK_MODE_TRUE_PEAKS</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"True-peak mode requires libswresample to be performed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ebur128</name><operator>-&gt;</operator><name>scale_range</name></name> <operator>=</operator> <literal type="number">3</literal> <operator>*</operator> <name><name>ebur128</name><operator>-&gt;</operator><name>meter</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ebur128</name><operator>-&gt;</operator><name>i400</name><operator>.</operator><name>histogram</name></name> <operator>=</operator> <call><name>get_histogram</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ebur128</name><operator>-&gt;</operator><name>i3000</name><operator>.</operator><name>histogram</name></name> <operator>=</operator> <call><name>get_histogram</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ebur128</name><operator>-&gt;</operator><name>i400</name><operator>.</operator><name>histogram</name></name> <operator>||</operator> <operator>!</operator><name><name>ebur128</name><operator>-&gt;</operator><name>i3000</name><operator>.</operator><name>histogram</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>ebur128</name><operator>-&gt;</operator><name>integrated_loudness</name></name> <operator>=</operator> <name>ABS_THRES</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ebur128</name><operator>-&gt;</operator><name>loudness_range</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ebur128</name><operator>-&gt;</operator><name>do_video</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>pad</name> <operator>=</operator> <operator>(</operator><name>AVFilterPad</name><operator>)</operator><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <call><name>av_strdup</name><argument_list>(<argument><expr><literal type="string">"out0"</literal></expr></argument>)</argument_list></call></expr>,

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,

<expr><operator>.</operator><name>config_props</name> <operator>=</operator> <name>config_video_output</name></expr>,

}</block></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pad</name><operator>.</operator><name>name</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_insert_outpad</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>pad</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pad</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>pad</name> <operator>=</operator> <operator>(</operator><name>AVFilterPad</name><operator>)</operator><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <call><name>av_asprintf</name><argument_list>(<argument><expr><literal type="string">"out%d"</literal></expr></argument>, <argument><expr><name><name>ebur128</name><operator>-&gt;</operator><name>do_video</name></name></expr></argument>)</argument_list></call></expr>,

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_AUDIO</name></expr>,

<expr><operator>.</operator><name>config_props</name> <operator>=</operator> <name>config_audio_output</name></expr>,

}</block></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pad</name><operator>.</operator><name>name</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_insert_outpad</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name><name>ebur128</name><operator>-&gt;</operator><name>do_video</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pad</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pad</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_VERBOSE</name></expr></argument>, <argument><expr><literal type="string">"EBU +%d scale\n"</literal></expr></argument>, <argument><expr><name><name>ebur128</name><operator>-&gt;</operator><name>meter</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HIST_POS</name><parameter_list>(<parameter><type><name>power</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(int)(((power) - ABS_THRES) * HIST_GRAIN)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>int</name></type> <name>gate_update</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>integrator</name></name> <modifier>*</modifier></type><name>integ</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>power</name></decl></parameter>,

<parameter><decl><type><name>double</name></type> <name>loudness</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>gate_thres</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ipower</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>relative_threshold</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>gate_hist_pos</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ipower</name> <operator>=</operator> <call><name>av_clip</name><argument_list>(<argument><expr><call><name>HIST_POS</name><argument_list>(<argument><expr><name>loudness</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>HIST_SIZE</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>integ</name><operator>-&gt;</operator><name>histogram</name><index>[<expr><name>ipower</name></expr>]</index></name><operator>.</operator><name>count</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>integ</name><operator>-&gt;</operator><name>sum_kept_powers</name></name> <operator>+=</operator> <name>power</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>integ</name><operator>-&gt;</operator><name>nb_kept_powers</name></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>relative_threshold</name> <operator>=</operator> <name><name>integ</name><operator>-&gt;</operator><name>sum_kept_powers</name></name> <operator>/</operator> <name><name>integ</name><operator>-&gt;</operator><name>nb_kept_powers</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>relative_threshold</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>relative_threshold</name> <operator>=</operator> <literal type="number">1e-12</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>integ</name><operator>-&gt;</operator><name>rel_threshold</name></name> <operator>=</operator> <call><name>LOUDNESS</name><argument_list>(<argument><expr><name>relative_threshold</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>gate_thres</name></expr>;</expr_stmt>

<expr_stmt><expr><name>gate_hist_pos</name> <operator>=</operator> <call><name>av_clip</name><argument_list>(<argument><expr><call><name>HIST_POS</name><argument_list>(<argument><expr><name><name>integ</name><operator>-&gt;</operator><name>rel_threshold</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>HIST_SIZE</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>gate_hist_pos</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>filter_frame</name><parameter_list>(<parameter><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>inlink</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>insamples</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>ch</name></decl>, <decl><type ref="prev"/><name>idx_insample</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>inlink</name><operator>-&gt;</operator><name>dst</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EBUR128Context</name> <modifier>*</modifier></type><name>ebur128</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>nb_channels</name> <init>= <expr><name><name>ebur128</name><operator>-&gt;</operator><name>nb_channels</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>nb_samples</name> <init>= <expr><name><name>insamples</name><operator>-&gt;</operator><name>nb_samples</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>double</name> <modifier>*</modifier></type><name>samples</name> <init>= <expr><operator>(</operator><name>double</name> <operator>*</operator><operator>)</operator><name><name>insamples</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>pic</name> <init>= <expr><name><name>ebur128</name><operator>-&gt;</operator><name>outpicref</name></name></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_SWRESAMPLE</name></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><name><name>ebur128</name><operator>-&gt;</operator><name>peak_mode</name></name> <operator>&amp;</operator> <name>PEAK_MODE_TRUE_PEAKS</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>double</name> <modifier>*</modifier></type><name>swr_samples</name> <init>= <expr><name><name>ebur128</name><operator>-&gt;</operator><name>swr_buf</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>swr_convert</name><argument_list>(<argument><expr><name><name>ebur128</name><operator>-&gt;</operator><name>swr_ctx</name></name></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name><operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>ebur128</name><operator>-&gt;</operator><name>swr_buf</name></name></expr></argument>, <argument><expr><literal type="number">19200</literal></expr></argument>,

<argument><expr><operator>(</operator><specifier>const</specifier> <name>uint8_t</name> <operator>*</operator><operator>*</operator><operator>)</operator><name><name>insamples</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>nb_samples</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>ch</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ch</name> <operator>&lt;</operator> <name>nb_channels</name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ebur128</name><operator>-&gt;</operator><name>true_peaks_per_frame</name><index>[<expr><name>ch</name></expr>]</index></name> <operator>=</operator> <literal type="number">0.0</literal></expr>;</expr_stmt></block_content></block></for>

<for>for <control>(<init><expr><name>idx_insample</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>idx_insample</name> <operator>&lt;</operator> <name>ret</name></expr>;</condition> <incr><expr><name>idx_insample</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>ch</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ch</name> <operator>&lt;</operator> <name>nb_channels</name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>ebur128</name><operator>-&gt;</operator><name>true_peaks</name><index>[<expr><name>ch</name></expr>]</index></name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name><name>ebur128</name><operator>-&gt;</operator><name>true_peaks</name><index>[<expr><name>ch</name></expr>]</index></name></expr></argument>, <argument><expr><call><name>fabs</name><argument_list>(<argument><expr><operator>*</operator><name>swr_samples</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ebur128</name><operator>-&gt;</operator><name>true_peaks_per_frame</name><index>[<expr><name>ch</name></expr>]</index></name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name><name>ebur128</name><operator>-&gt;</operator><name>true_peaks_per_frame</name><index>[<expr><name>ch</name></expr>]</index></name></expr></argument>,

<argument><expr><call><name>fabs</name><argument_list>(<argument><expr><operator>*</operator><name>swr_samples</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>swr_samples</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<for>for <control>(<init><expr><name>idx_insample</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>idx_insample</name> <operator>&lt;</operator> <name>nb_samples</name></expr>;</condition> <incr><expr><name>idx_insample</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>bin_id_400</name> <init>= <expr><name><name>ebur128</name><operator>-&gt;</operator><name>i400</name><operator>.</operator><name>cache_pos</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>bin_id_3000</name> <init>= <expr><name><name>ebur128</name><operator>-&gt;</operator><name>i3000</name><operator>.</operator><name>cache_pos</name></name></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOVE_TO_NEXT_CACHED_ENTRY</name><parameter_list>(<parameter><type><name>time</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { ebur128-&gt;i##time.cache_pos++; if (ebur128-&gt;i##time.cache_pos == I##time##_BINS) { ebur128-&gt;i##time.filled = 1; ebur128-&gt;i##time.cache_pos = 0; } } while (0)</cpp:value></cpp:define>

<expr_stmt><expr><call><name>MOVE_TO_NEXT_CACHED_ENTRY</name><argument_list>(<argument><expr><literal type="number">400</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MOVE_TO_NEXT_CACHED_ENTRY</name><argument_list>(<argument><expr><literal type="number">3000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>ch</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ch</name> <operator>&lt;</operator> <name>nb_channels</name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>double</name></type> <name>bin</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ebur128</name><operator>-&gt;</operator><name>peak_mode</name></name> <operator>&amp;</operator> <name>PEAK_MODE_SAMPLES_PEAKS</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ebur128</name><operator>-&gt;</operator><name>sample_peaks</name><index>[<expr><name>ch</name></expr>]</index></name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name><name>ebur128</name><operator>-&gt;</operator><name>sample_peaks</name><index>[<expr><name>ch</name></expr>]</index></name></expr></argument>, <argument><expr><call><name>fabs</name><argument_list>(<argument><expr><operator>*</operator><name>samples</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>ebur128</name><operator>-&gt;</operator><name>x</name><index>[<expr><name>ch</name> <operator>*</operator> <literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <operator>*</operator><name>samples</name><operator>++</operator></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ebur128</name><operator>-&gt;</operator><name>ch_weighting</name><index>[<expr><name>ch</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FILTER</name><parameter_list>(<parameter><type><name>Y</name></type></parameter>, <parameter><type><name>X</name></type></parameter>, <parameter><type><name>name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { double *dst = ebur128-&gt;Y + ch*3; double *src = ebur128-&gt;X + ch*3; dst[2] = dst[1]; dst[1] = dst[0]; dst[0] = src[0]*name##_B0 + src[1]*name##_B1 + src[2]*name##_B2 - dst[1]*name##_A1 - dst[2]*name##_A2; } while (0)</cpp:value></cpp:define>

<expr_stmt><expr><call><name>FILTER</name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>PRE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>ebur128</name><operator>-&gt;</operator><name>x</name><index>[<expr><name>ch</name> <operator>*</operator> <literal type="number">3</literal> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>ebur128</name><operator>-&gt;</operator><name>x</name><index>[<expr><name>ch</name> <operator>*</operator> <literal type="number">3</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ebur128</name><operator>-&gt;</operator><name>x</name><index>[<expr><name>ch</name> <operator>*</operator> <literal type="number">3</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>ebur128</name><operator>-&gt;</operator><name>x</name><index>[<expr><name>ch</name> <operator>*</operator> <literal type="number">3</literal></expr> ]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>FILTER</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>RLB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name>bin</name> <operator>=</operator> <name><name>ebur128</name><operator>-&gt;</operator><name>z</name><index>[<expr><name>ch</name> <operator>*</operator> <literal type="number">3</literal></expr>]</index></name> <operator>*</operator> <name><name>ebur128</name><operator>-&gt;</operator><name>z</name><index>[<expr><name>ch</name> <operator>*</operator> <literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ebur128</name><operator>-&gt;</operator><name>i400</name><operator>.</operator><name>sum</name> <index>[<expr><name>ch</name></expr>]</index></name> <operator>=</operator> <name><name>ebur128</name><operator>-&gt;</operator><name>i400</name><operator>.</operator><name>sum</name> <index>[<expr><name>ch</name></expr>]</index></name> <operator>+</operator> <name>bin</name> <operator>-</operator> <name><name>ebur128</name><operator>-&gt;</operator><name>i400</name><operator>.</operator><name>cache</name> <index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>bin_id_400</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ebur128</name><operator>-&gt;</operator><name>i3000</name><operator>.</operator><name>sum</name><index>[<expr><name>ch</name></expr>]</index></name> <operator>=</operator> <name><name>ebur128</name><operator>-&gt;</operator><name>i3000</name><operator>.</operator><name>sum</name><index>[<expr><name>ch</name></expr>]</index></name> <operator>+</operator> <name>bin</name> <operator>-</operator> <name><name>ebur128</name><operator>-&gt;</operator><name>i3000</name><operator>.</operator><name>cache</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>bin_id_3000</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ebur128</name><operator>-&gt;</operator><name>i400</name><operator>.</operator><name>cache</name> <index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>bin_id_400</name></expr> ]</index></name> <operator>=</operator> <name>bin</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ebur128</name><operator>-&gt;</operator><name>i3000</name><operator>.</operator><name>cache</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>bin_id_3000</name></expr>]</index></name> <operator>=</operator> <name>bin</name></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>++</operator><name><name>ebur128</name><operator>-&gt;</operator><name>sample_count</name></name> <operator>==</operator> <literal type="number">4800</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>double</name></type> <name>loudness_400</name></decl>, <decl><type ref="prev"/><name>loudness_3000</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>power_400</name> <init>= <expr><literal type="number">1e-12</literal></expr></init></decl>, <decl><type ref="prev"/><name>power_3000</name> <init>= <expr><literal type="number">1e-12</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>outlink</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>outputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>pts</name> <init>= <expr><name><name>insamples</name><operator>-&gt;</operator><name>pts</name></name> <operator>+</operator>

<macro><name>av_rescale_q</name><argument_list>(<argument>idx_insample</argument>, <argument>(AVRational){ <literal type="number">1</literal></argument>, <argument>inlink-&gt;sample_rate }</argument>,

<argument>outlink-&gt;time_base</argument>)</argument_list></macro></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>ebur128</name><operator>-&gt;</operator><name>sample_count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COMPUTE_LOUDNESS</name><parameter_list>(<parameter><type><name>m</name></type></parameter>, <parameter><type><name>time</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { if (ebur128-&gt;i##time.filled) { for (ch = 0; ch &lt; nb_channels; ch++) power_##time += ebur128-&gt;ch_weighting[ch] * ebur128-&gt;i##time.sum[ch]; power_##time /= I##time##_BINS; } loudness_##time = LOUDNESS(power_##time); } while (0)</cpp:value></cpp:define>

<expr_stmt><expr><call><name>COMPUTE_LOUDNESS</name><argument_list>(<argument><expr><name>M</name></expr></argument>, <argument><expr><literal type="number">400</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>COMPUTE_LOUDNESS</name><argument_list>(<argument><expr><name>S</name></expr></argument>, <argument><expr><literal type="number">3000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>I_GATE_THRES</name></cpp:macro> <cpp:value>-10</cpp:value></cpp:define> 

<if_stmt><if>if <condition>(<expr><name>loudness_400</name> <operator>&gt;=</operator> <name>ABS_THRES</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>double</name></type> <name>integrated_sum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>nb_integrated</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>gate_hist_pos</name> <init>= <expr><call><name>gate_update</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ebur128</name><operator>-&gt;</operator><name>i400</name></name></expr></argument>, <argument><expr><name>power_400</name></expr></argument>,

<argument><expr><name>loudness_400</name></expr></argument>, <argument><expr><name>I_GATE_THRES</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>gate_hist_pos</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>HIST_SIZE</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>nb_v</name> <init>= <expr><name><name>ebur128</name><operator>-&gt;</operator><name>i400</name><operator>.</operator><name>histogram</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>count</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>nb_integrated</name> <operator>+=</operator> <name>nb_v</name></expr>;</expr_stmt>

<expr_stmt><expr><name>integrated_sum</name> <operator>+=</operator> <name>nb_v</name> <operator>*</operator> <name><name>ebur128</name><operator>-&gt;</operator><name>i400</name><operator>.</operator><name>histogram</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>energy</name></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>nb_integrated</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ebur128</name><operator>-&gt;</operator><name>integrated_loudness</name></name> <operator>=</operator> <call><name>LOUDNESS</name><argument_list>(<argument><expr><name>integrated_sum</name> <operator>/</operator> <name>nb_integrated</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>nb_channels</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>ebur128</name><operator>-&gt;</operator><name>dual_mono</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ebur128</name><operator>-&gt;</operator><name>integrated_loudness</name></name> <operator>-=</operator> <name><name>ebur128</name><operator>-&gt;</operator><name>pan_law</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LRA_GATE_THRES</name></cpp:macro> <cpp:value>-20</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LRA_LOWER_PRC</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LRA_HIGHER_PRC</name></cpp:macro> <cpp:value>95</cpp:value></cpp:define>

<if_stmt><if>if <condition>(<expr><name>loudness_3000</name> <operator>&gt;=</operator> <name>ABS_THRES</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>nb_powers</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>gate_hist_pos</name> <init>= <expr><call><name>gate_update</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ebur128</name><operator>-&gt;</operator><name>i3000</name></name></expr></argument>, <argument><expr><name>power_3000</name></expr></argument>,

<argument><expr><name>loudness_3000</name></expr></argument>, <argument><expr><name>LRA_GATE_THRES</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>gate_hist_pos</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>HIST_SIZE</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name>nb_powers</name> <operator>+=</operator> <name><name>ebur128</name><operator>-&gt;</operator><name>i3000</name><operator>.</operator><name>histogram</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>count</name></expr>;</expr_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name>nb_powers</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>nb_pow</name></decl>;</decl_stmt>

<expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>nb_pow</name> <operator>=</operator> <name>LRA_LOWER_PRC</name> <operator>*</operator> <name>nb_powers</name> <operator>/</operator> <literal type="number">100.</literal> <operator>+</operator> <literal type="number">0.5</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>gate_hist_pos</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>HIST_SIZE</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>n</name> <operator>+=</operator> <name><name>ebur128</name><operator>-&gt;</operator><name>i3000</name><operator>.</operator><name>histogram</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>count</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&gt;=</operator> <name>nb_pow</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ebur128</name><operator>-&gt;</operator><name>lra_low</name></name> <operator>=</operator> <name><name>ebur128</name><operator>-&gt;</operator><name>i3000</name><operator>.</operator><name>histogram</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>loudness</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>n</name> <operator>=</operator> <name>nb_powers</name></expr>;</expr_stmt>

<expr_stmt><expr><name>nb_pow</name> <operator>=</operator> <name>LRA_HIGHER_PRC</name> <operator>*</operator> <name>nb_powers</name> <operator>/</operator> <literal type="number">100.</literal> <operator>+</operator> <literal type="number">0.5</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>HIST_SIZE</name> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>n</name> <operator>-=</operator> <name><name>ebur128</name><operator>-&gt;</operator><name>i3000</name><operator>.</operator><name>histogram</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>count</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&lt;</operator> <name>nb_pow</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ebur128</name><operator>-&gt;</operator><name>lra_high</name></name> <operator>=</operator> <name><name>ebur128</name><operator>-&gt;</operator><name>i3000</name><operator>.</operator><name>histogram</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>loudness</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>ebur128</name><operator>-&gt;</operator><name>loudness_range</name></name> <operator>=</operator> <name><name>ebur128</name><operator>-&gt;</operator><name>lra_high</name></name> <operator>-</operator> <name><name>ebur128</name><operator>-&gt;</operator><name>lra_low</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>nb_channels</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>ebur128</name><operator>-&gt;</operator><name>dual_mono</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>loudness_400</name> <operator>-=</operator> <name><name>ebur128</name><operator>-&gt;</operator><name>pan_law</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>loudness_3000</name> <operator>-=</operator> <name><name>ebur128</name><operator>-&gt;</operator><name>pan_law</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOG_FMT</name></cpp:macro> <cpp:value>"TARGET:%d LUFS M:%6.1f S:%6.1f I:%6.1f %s LRA:%6.1f LU"</cpp:value></cpp:define>

<if_stmt><if>if <condition>(<expr><name><name>ebur128</name><operator>-&gt;</operator><name>do_video</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>clone</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>gauge_value</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>y_loudness_lu_graph</name></decl>, <decl><type ref="prev"/><name>y_loudness_lu_gauge</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ebur128</name><operator>-&gt;</operator><name>gauge_type</name></name> <operator>==</operator> <name>GAUGE_TYPE_MOMENTARY</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>gauge_value</name> <operator>=</operator> <name>loudness_400</name> <operator>-</operator> <name><name>ebur128</name><operator>-&gt;</operator><name>target</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>gauge_value</name> <operator>=</operator> <name>loudness_3000</name> <operator>-</operator> <name><name>ebur128</name><operator>-&gt;</operator><name>target</name></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>y_loudness_lu_graph</name> <operator>=</operator> <call><name>lu_to_y</name><argument_list>(<argument><expr><name>ebur128</name></expr></argument>, <argument><expr><name>loudness_3000</name> <operator>-</operator> <name><name>ebur128</name><operator>-&gt;</operator><name>target</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>y_loudness_lu_gauge</name> <operator>=</operator> <call><name>lu_to_y</name><argument_list>(<argument><expr><name>ebur128</name></expr></argument>, <argument><expr><name>gauge_value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>pic</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>ebur128</name><operator>-&gt;</operator><name>graph</name><operator>.</operator><name>y</name></name><operator>*</operator><name><name>pic</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>ebur128</name><operator>-&gt;</operator><name>graph</name><operator>.</operator><name>x</name></name><operator>*</operator><literal type="number">3</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name><name>ebur128</name><operator>-&gt;</operator><name>graph</name><operator>.</operator><name>h</name></name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><call><name>get_graph_color</name><argument_list>(<argument><expr><name>ebur128</name></expr></argument>, <argument><expr><name>y_loudness_lu_graph</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>p</name> <operator>+</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><operator>(</operator><name><name>ebur128</name><operator>-&gt;</operator><name>graph</name><operator>.</operator><name>w</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <operator>(</operator><name><name>ebur128</name><operator>-&gt;</operator><name>graph</name><operator>.</operator><name>w</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>+=</operator> <name><name>pic</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>pic</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>ebur128</name><operator>-&gt;</operator><name>gauge</name><operator>.</operator><name>y</name></name><operator>*</operator><name><name>pic</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>ebur128</name><operator>-&gt;</operator><name>gauge</name><operator>.</operator><name>x</name></name><operator>*</operator><literal type="number">3</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name><name>ebur128</name><operator>-&gt;</operator><name>gauge</name><operator>.</operator><name>h</name></name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><call><name>get_graph_color</name><argument_list>(<argument><expr><name>ebur128</name></expr></argument>, <argument><expr><name>y_loudness_lu_gauge</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name><name>ebur128</name><operator>-&gt;</operator><name>gauge</name><operator>.</operator><name>w</name></name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <name>x</name><operator>*</operator><literal type="number">3</literal></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>p</name> <operator>+=</operator> <name><name>pic</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>ebur128</name><operator>-&gt;</operator><name>scale</name></name> <operator>==</operator> <name>SCALE_TYPE_ABSOLUTE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>drawtext</name><argument_list>(<argument><expr><name>pic</name></expr></argument>, <argument><expr><name>PAD</name></expr></argument>, <argument><expr><name>PAD</name> <operator>-</operator> <name>PAD</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>FONT16</name></expr></argument>, <argument><expr><name>font_colors</name></expr></argument>,

<argument><expr><name>LOG_FMT</name> <literal type="string">" "</literal></expr></argument>, 

<argument><expr><name><name>ebur128</name><operator>-&gt;</operator><name>target</name></name></expr></argument>, <argument><expr><name>loudness_400</name></expr></argument>, <argument><expr><name>loudness_3000</name></expr></argument>,

<argument><expr><name><name>ebur128</name><operator>-&gt;</operator><name>integrated_loudness</name></name></expr></argument>, <argument><expr><literal type="string">"LUFS"</literal></expr></argument>, <argument><expr><name><name>ebur128</name><operator>-&gt;</operator><name>loudness_range</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>drawtext</name><argument_list>(<argument><expr><name>pic</name></expr></argument>, <argument><expr><name>PAD</name></expr></argument>, <argument><expr><name>PAD</name> <operator>-</operator> <name>PAD</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>FONT16</name></expr></argument>, <argument><expr><name>font_colors</name></expr></argument>,

<argument><expr><name>LOG_FMT</name> <literal type="string">" "</literal></expr></argument>, 

<argument><expr><name><name>ebur128</name><operator>-&gt;</operator><name>target</name></name></expr></argument>, <argument><expr><name>loudness_400</name><operator>-</operator><name><name>ebur128</name><operator>-&gt;</operator><name>target</name></name></expr></argument>, <argument><expr><name>loudness_3000</name><operator>-</operator><name><name>ebur128</name><operator>-&gt;</operator><name>target</name></name></expr></argument>,

<argument><expr><name><name>ebur128</name><operator>-&gt;</operator><name>integrated_loudness</name></name><operator>-</operator><name><name>ebur128</name><operator>-&gt;</operator><name>target</name></name></expr></argument>, <argument><expr><literal type="string">"LU"</literal></expr></argument>, <argument><expr><name><name>ebur128</name><operator>-&gt;</operator><name>loudness_range</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>pic</name><operator>-&gt;</operator><name>pts</name></name> <operator>=</operator> <name>pts</name></expr>;</expr_stmt>

<expr_stmt><expr><name>clone</name> <operator>=</operator> <call><name>av_frame_clone</name><argument_list>(<argument><expr><name>pic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>clone</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_filter_frame</name><argument_list>(<argument><expr><name>outlink</name></expr></argument>, <argument><expr><name>clone</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ebur128</name><operator>-&gt;</operator><name>metadata</name></name></expr>)</condition> <block>{<block_content> 

<decl_stmt><decl><type><name>char</name></type> <name><name>metabuf</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>META_PREFIX</name></cpp:macro> <cpp:value>"lavfi.r128."</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SET_META</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>var</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { snprintf(metabuf, sizeof(metabuf), "%.3f", var); av_dict_set(&amp;insamples-&gt;metadata, name, metabuf, 0); } while (0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SET_META_PEAK</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>ptype</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { if (ebur128-&gt;peak_mode &amp; PEAK_MODE_ ##ptype ##_PEAKS) { char key[64]; for (ch = 0; ch &lt; nb_channels; ch++) { snprintf(key, sizeof(key), META_PREFIX AV_STRINGIFY(name) "_peaks_ch%d", ch); SET_META(key, ebur128-&gt;name##_peaks[ch]); } } } while (0)</cpp:value></cpp:define>

<expr_stmt><expr><call><name>SET_META</name><argument_list>(<argument><expr><name>META_PREFIX</name> <literal type="string">"M"</literal></expr></argument>, <argument><expr><name>loudness_400</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SET_META</name><argument_list>(<argument><expr><name>META_PREFIX</name> <literal type="string">"S"</literal></expr></argument>, <argument><expr><name>loudness_3000</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SET_META</name><argument_list>(<argument><expr><name>META_PREFIX</name> <literal type="string">"I"</literal></expr></argument>, <argument><expr><name><name>ebur128</name><operator>-&gt;</operator><name>integrated_loudness</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SET_META</name><argument_list>(<argument><expr><name>META_PREFIX</name> <literal type="string">"LRA"</literal></expr></argument>, <argument><expr><name><name>ebur128</name><operator>-&gt;</operator><name>loudness_range</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SET_META</name><argument_list>(<argument><expr><name>META_PREFIX</name> <literal type="string">"LRA.low"</literal></expr></argument>, <argument><expr><name><name>ebur128</name><operator>-&gt;</operator><name>lra_low</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SET_META</name><argument_list>(<argument><expr><name>META_PREFIX</name> <literal type="string">"LRA.high"</literal></expr></argument>, <argument><expr><name><name>ebur128</name><operator>-&gt;</operator><name>lra_high</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SET_META_PEAK</name><argument_list>(<argument><expr><name>sample</name></expr></argument>, <argument><expr><name>SAMPLES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SET_META_PEAK</name><argument_list>(<argument><expr><name>true</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ebur128</name><operator>-&gt;</operator><name>scale</name></name> <operator>==</operator> <name>SCALE_TYPE_ABSOLUTE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name><name>ebur128</name><operator>-&gt;</operator><name>loglevel</name></name></expr></argument>, <argument><expr><literal type="string">"t: %-10s "</literal> <name>LOG_FMT</name></expr></argument>,

<argument><expr><call><name>av_ts2timestr</name><argument_list>(<argument><expr><name>pts</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>outlink</name><operator>-&gt;</operator><name>time_base</name></name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name><name>ebur128</name><operator>-&gt;</operator><name>target</name></name></expr></argument>, <argument><expr><name>loudness_400</name></expr></argument>, <argument><expr><name>loudness_3000</name></expr></argument>,

<argument><expr><name><name>ebur128</name><operator>-&gt;</operator><name>integrated_loudness</name></name></expr></argument>, <argument><expr><literal type="string">"LUFS"</literal></expr></argument>, <argument><expr><name><name>ebur128</name><operator>-&gt;</operator><name>loudness_range</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name><name>ebur128</name><operator>-&gt;</operator><name>loglevel</name></name></expr></argument>, <argument><expr><literal type="string">"t: %-10s "</literal> <name>LOG_FMT</name></expr></argument>,

<argument><expr><call><name>av_ts2timestr</name><argument_list>(<argument><expr><name>pts</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>outlink</name><operator>-&gt;</operator><name>time_base</name></name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name><name>ebur128</name><operator>-&gt;</operator><name>target</name></name></expr></argument>, <argument><expr><name>loudness_400</name><operator>-</operator><name><name>ebur128</name><operator>-&gt;</operator><name>target</name></name></expr></argument>, <argument><expr><name>loudness_3000</name><operator>-</operator><name><name>ebur128</name><operator>-&gt;</operator><name>target</name></name></expr></argument>,

<argument><expr><name><name>ebur128</name><operator>-&gt;</operator><name>integrated_loudness</name></name><operator>-</operator><name><name>ebur128</name><operator>-&gt;</operator><name>target</name></name></expr></argument>, <argument><expr><literal type="string">"LU"</literal></expr></argument>, <argument><expr><name><name>ebur128</name><operator>-&gt;</operator><name>loudness_range</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PRINT_PEAKS</name><parameter_list>(<parameter><type><name>str</name></type></parameter>, <parameter><type><name>sp</name></type></parameter>, <parameter><type><name>ptype</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { if (ebur128-&gt;peak_mode &amp; PEAK_MODE_ ##ptype ##_PEAKS) { av_log(ctx, ebur128-&gt;loglevel, " " str ":"); for (ch = 0; ch &lt; nb_channels; ch++) av_log(ctx, ebur128-&gt;loglevel, " %5.1f", DBFS(sp[ch])); av_log(ctx, ebur128-&gt;loglevel, " dBFS"); } } while (0)</cpp:value></cpp:define>

<expr_stmt><expr><call><name>PRINT_PEAKS</name><argument_list>(<argument><expr><literal type="string">"SPK"</literal></expr></argument>, <argument><expr><name><name>ebur128</name><operator>-&gt;</operator><name>sample_peaks</name></name></expr></argument>, <argument><expr><name>SAMPLES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PRINT_PEAKS</name><argument_list>(<argument><expr><literal type="string">"FTPK"</literal></expr></argument>, <argument><expr><name><name>ebur128</name><operator>-&gt;</operator><name>true_peaks_per_frame</name></name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PRINT_PEAKS</name><argument_list>(<argument><expr><literal type="string">"TPK"</literal></expr></argument>, <argument><expr><name><name>ebur128</name><operator>-&gt;</operator><name>true_peaks</name></name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name><name>ebur128</name><operator>-&gt;</operator><name>loglevel</name></name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><call><name>ff_filter_frame</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>outputs</name><index>[<expr><name><name>ebur128</name><operator>-&gt;</operator><name>do_video</name></name></expr>]</index></name></expr></argument>, <argument><expr><name>insamples</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>query_formats</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>EBUR128Context</name> <modifier>*</modifier></type><name>ebur128</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFilterFormats</name> <modifier>*</modifier></type><name>formats</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFilterChannelLayouts</name> <modifier>*</modifier></type><name>layouts</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>inlink</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>inputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>outlink</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>outputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>enum</name> <name>AVSampleFormat</name></name></type> <name><name>sample_fmts</name><index>[]</index></name> <init>= <expr><block>{ <expr><name>AV_SAMPLE_FMT_DBL</name></expr>, <expr><name>AV_SAMPLE_FMT_NONE</name></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name><name>input_srate</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="number">48000</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>}</block></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>enum</name> <name>AVPixelFormat</name></name></type> <name><name>pix_fmts</name><index>[]</index></name> <init>= <expr><block>{ <expr><name>AV_PIX_FMT_RGB24</name></expr>, <expr><name>AV_PIX_FMT_NONE</name></expr> }</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ebur128</name><operator>-&gt;</operator><name>do_video</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>formats</name> <operator>=</operator> <call><name>ff_make_format_list</name><argument_list>(<argument><expr><name>pix_fmts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_formats_ref</name><argument_list>(<argument><expr><name>formats</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>outlink</name><operator>-&gt;</operator><name>in_formats</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>outlink</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>outputs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>formats</name> <operator>=</operator> <call><name>ff_make_format_list</name><argument_list>(<argument><expr><name>sample_fmts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_formats_ref</name><argument_list>(<argument><expr><name>formats</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>inlink</name><operator>-&gt;</operator><name>out_formats</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator>

<operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_formats_ref</name><argument_list>(<argument><expr><name>formats</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>outlink</name><operator>-&gt;</operator><name>in_formats</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>layouts</name> <operator>=</operator> <call><name>ff_all_channel_layouts</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_channel_layouts_ref</name><argument_list>(<argument><expr><name>layouts</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>inlink</name><operator>-&gt;</operator><name>out_channel_layouts</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator>

<operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_channel_layouts_ref</name><argument_list>(<argument><expr><name>layouts</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>outlink</name><operator>-&gt;</operator><name>in_channel_layouts</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>formats</name> <operator>=</operator> <call><name>ff_make_format_list</name><argument_list>(<argument><expr><name>input_srate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_formats_ref</name><argument_list>(<argument><expr><name>formats</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>inlink</name><operator>-&gt;</operator><name>out_samplerates</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator>

<operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_formats_ref</name><argument_list>(<argument><expr><name>formats</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>outlink</name><operator>-&gt;</operator><name>in_samplerates</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>void</name></type> <name>uninit</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EBUR128Context</name> <modifier>*</modifier></type><name>ebur128</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ebur128</name><operator>-&gt;</operator><name>nb_channels</name></name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>ebur128</name><operator>-&gt;</operator><name>dual_mono</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ebur128</name><operator>-&gt;</operator><name>i400</name><operator>.</operator><name>rel_threshold</name></name> <operator>-=</operator> <name><name>ebur128</name><operator>-&gt;</operator><name>pan_law</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ebur128</name><operator>-&gt;</operator><name>i3000</name><operator>.</operator><name>rel_threshold</name></name> <operator>-=</operator> <name><name>ebur128</name><operator>-&gt;</operator><name>pan_law</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ebur128</name><operator>-&gt;</operator><name>lra_low</name></name> <operator>-=</operator> <name><name>ebur128</name><operator>-&gt;</operator><name>pan_law</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ebur128</name><operator>-&gt;</operator><name>lra_high</name></name> <operator>-=</operator> <name><name>ebur128</name><operator>-&gt;</operator><name>pan_law</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"Summary:\n\n"</literal>

<literal type="string">" Integrated loudness:\n"</literal>

<literal type="string">" I: %5.1f LUFS\n"</literal>

<literal type="string">" Threshold: %5.1f LUFS\n\n"</literal>

<literal type="string">" Loudness range:\n"</literal>

<literal type="string">" LRA: %5.1f LU\n"</literal>

<literal type="string">" Threshold: %5.1f LUFS\n"</literal>

<literal type="string">" LRA low: %5.1f LUFS\n"</literal>

<literal type="string">" LRA high: %5.1f LUFS"</literal></expr></argument>,

<argument><expr><name><name>ebur128</name><operator>-&gt;</operator><name>integrated_loudness</name></name></expr></argument>, <argument><expr><name><name>ebur128</name><operator>-&gt;</operator><name>i400</name><operator>.</operator><name>rel_threshold</name></name></expr></argument>,

<argument><expr><name><name>ebur128</name><operator>-&gt;</operator><name>loudness_range</name></name></expr></argument>, <argument><expr><name><name>ebur128</name><operator>-&gt;</operator><name>i3000</name><operator>.</operator><name>rel_threshold</name></name></expr></argument>,

<argument><expr><name><name>ebur128</name><operator>-&gt;</operator><name>lra_low</name></name></expr></argument>, <argument><expr><name><name>ebur128</name><operator>-&gt;</operator><name>lra_high</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PRINT_PEAK_SUMMARY</name><parameter_list>(<parameter><type><name>str</name></type></parameter>, <parameter><type><name>sp</name></type></parameter>, <parameter><type><name>ptype</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { int ch; double maxpeak; maxpeak = 0.0; if (ebur128-&gt;peak_mode &amp; PEAK_MODE_ ##ptype ##_PEAKS) { for (ch = 0; ch &lt; ebur128-&gt;nb_channels; ch++) maxpeak = FFMAX(maxpeak, sp[ch]); av_log(ctx, AV_LOG_INFO, "\n\n " str " peak:\n" " Peak: %5.1f dBFS", DBFS(maxpeak)); } } while (0)</cpp:value></cpp:define>

<expr_stmt><expr><call><name>PRINT_PEAK_SUMMARY</name><argument_list>(<argument><expr><literal type="string">"Sample"</literal></expr></argument>, <argument><expr><name><name>ebur128</name><operator>-&gt;</operator><name>sample_peaks</name></name></expr></argument>, <argument><expr><name>SAMPLES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PRINT_PEAK_SUMMARY</name><argument_list>(<argument><expr><literal type="string">"True"</literal></expr></argument>, <argument><expr><name><name>ebur128</name><operator>-&gt;</operator><name>true_peaks</name></name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ebur128</name><operator>-&gt;</operator><name>y_line_ref</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ebur128</name><operator>-&gt;</operator><name>ch_weighting</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ebur128</name><operator>-&gt;</operator><name>true_peaks</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ebur128</name><operator>-&gt;</operator><name>sample_peaks</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ebur128</name><operator>-&gt;</operator><name>true_peaks_per_frame</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ebur128</name><operator>-&gt;</operator><name>i400</name><operator>.</operator><name>histogram</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ebur128</name><operator>-&gt;</operator><name>i3000</name><operator>.</operator><name>histogram</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ebur128</name><operator>-&gt;</operator><name>nb_channels</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ebur128</name><operator>-&gt;</operator><name>i400</name><operator>.</operator><name>cache</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ebur128</name><operator>-&gt;</operator><name>i3000</name><operator>.</operator><name>cache</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>nb_outputs</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>output_pads</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ebur128</name><operator>-&gt;</operator><name>outpicref</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_SWRESAMPLE</name></expr></cpp:if>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ebur128</name><operator>-&gt;</operator><name>swr_buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>swr_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ebur128</name><operator>-&gt;</operator><name>swr_ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVFilterPad</name></type> <name><name>ebur128_inputs</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"default"</literal></expr>,

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_AUDIO</name></expr>,

<expr><operator>.</operator><name>filter_frame</name> <operator>=</operator> <name>filter_frame</name></expr>,

<expr><operator>.</operator><name>config_props</name> <operator>=</operator> <name>config_audio_input</name></expr>,

}</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFilter</name></type> <name>ff_af_ebur128</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"ebur128"</literal></expr>,

<expr><operator>.</operator><name>description</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"EBU R128 scanner."</literal></expr></argument>)</argument_list></call></expr>,

<expr><operator>.</operator><name>priv_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>EBUR128Context</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>init</name></expr>,

<expr><operator>.</operator><name>uninit</name> <operator>=</operator> <name>uninit</name></expr>,

<expr><operator>.</operator><name>query_formats</name> <operator>=</operator> <name>query_formats</name></expr>,

<expr><operator>.</operator><name>inputs</name> <operator>=</operator> <name>ebur128_inputs</name></expr>,

<expr><operator>.</operator><name>outputs</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>priv_class</name> <operator>=</operator> <operator>&amp;</operator><name>ebur128_class</name></expr>,

<expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>AVFILTER_FLAG_DYNAMIC_OUTPUTS</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

</unit>
