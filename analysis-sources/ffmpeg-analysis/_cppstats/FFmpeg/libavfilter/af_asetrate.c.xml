<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavfilter\af_asetrate.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/opt.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avfilter.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct <name>ASetRateContext</name> <block>{

<decl_stmt><decl><type><specifier>const</specifier> <name>AVClass</name> <modifier>*</modifier></type><name>class</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>sample_rate</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>rescale_pts</name></decl>;</decl_stmt>

}</block></struct></type> <name>ASetRateContext</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CONTEXT</name></cpp:macro> <cpp:value>ASetRateContext</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLAGS</name></cpp:macro> <cpp:value>AV_OPT_FLAG_AUDIO_PARAM|AV_OPT_FLAG_FILTERING_PARAM</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPT_GENERIC</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>field</name></type></parameter>, <parameter><type><name>def</name></type></parameter>, <parameter><type><name>min</name></type></parameter>, <parameter><type><name>max</name></type></parameter>, <parameter><type><name>descr</name></type></parameter>, <parameter><type><name>type</name></type></parameter>, <parameter><type><name>deffield</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ name, descr, offsetof(CONTEXT, field), AV_OPT_TYPE_ ##type, { .deffield = def }, min, max, FLAGS, __VA_ARGS__ }</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPT_INT</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>field</name></type></parameter>, <parameter><type><name>def</name></type></parameter>, <parameter><type><name>min</name></type></parameter>, <parameter><type><name>max</name></type></parameter>, <parameter><type><name>descr</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>OPT_GENERIC(name, field, def, min, max, descr, INT, i64, __VA_ARGS__)</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVOption</name></type> <name><name>asetrate_options</name><index>[]</index></name> <init>= <expr><block>{

<expr><call><name>OPT_INT</name><argument_list>(<argument><expr><literal type="string">"sample_rate"</literal></expr></argument>, <argument><expr><name>sample_rate</name></expr></argument>, <argument><expr><literal type="number">44100</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>INT_MAX</name></expr></argument>, <argument><expr><literal type="string">"set the sample rate"</literal></expr></argument>,)</argument_list></call></expr>,

<expr><call><name>OPT_INT</name><argument_list>(<argument><expr><literal type="string">"r"</literal></expr></argument>, <argument><expr><name>sample_rate</name></expr></argument>, <argument><expr><literal type="number">44100</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>INT_MAX</name></expr></argument>, <argument><expr><literal type="string">"set the sample rate"</literal></expr></argument>,)</argument_list></call></expr>,

<expr><block>{<expr><name>NULL</name></expr>}</block></expr>,

}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>AVFILTER_DEFINE_CLASS</name><argument_list>(<argument><expr><name>asetrate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>query_formats</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ASetRateContext</name> <modifier>*</modifier></type><name>sr</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>sample_rates</name><index>[]</index></name> <init>= <expr><block>{ <expr><name><name>sr</name><operator>-&gt;</operator><name>sample_rate</name></name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>ff_formats_ref</name><argument_list>(<argument><expr><call><name>ff_make_format_list</name><argument_list>(<argument><expr><name>sample_rates</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>outputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>in_samplerates</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>config_props</name><parameter_list>(<parameter><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>outlink</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>outlink</name><operator>-&gt;</operator><name>src</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ASetRateContext</name> <modifier>*</modifier></type><name>sr</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>inlink</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>inputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVRational</name></type> <name>intb</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>inputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>time_base</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>inrate</name> <init>= <expr><name><name>inlink</name><operator>-&gt;</operator><name>sample_rate</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>intb</name><operator>.</operator><name>num</name></name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>intb</name><operator>.</operator><name>den</name></name> <operator>==</operator> <name>inrate</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>outlink</name><operator>-&gt;</operator><name>time_base</name><operator>.</operator><name>num</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>outlink</name><operator>-&gt;</operator><name>time_base</name><operator>.</operator><name>den</name></name> <operator>=</operator> <name><name>outlink</name><operator>-&gt;</operator><name>sample_rate</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>outlink</name><operator>-&gt;</operator><name>time_base</name></name> <operator>=</operator> <name>intb</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sr</name><operator>-&gt;</operator><name>rescale_pts</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>av_q2d</name><argument_list>(<argument><expr><name>intb</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">1.0</literal> <operator>/</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name>inrate</name></expr></argument>, <argument><expr><name><name>outlink</name><operator>-&gt;</operator><name>sample_rate</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Time base is inaccurate\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>filter_frame</name><parameter_list>(<parameter><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>inlink</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>frame</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>inlink</name><operator>-&gt;</operator><name>dst</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ASetRateContext</name> <modifier>*</modifier></type><name>sr</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>outlink</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>outputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>sample_rate</name></name> <operator>=</operator> <name><name>outlink</name><operator>-&gt;</operator><name>sample_rate</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sr</name><operator>-&gt;</operator><name>rescale_pts</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>pts</name></name> <operator>=</operator> <call><name>av_rescale</name><argument_list>(<argument><expr><name><name>frame</name><operator>-&gt;</operator><name>pts</name></name></expr></argument>, <argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>sample_rate</name></name></expr></argument>,

<argument><expr><name><name>outlink</name><operator>-&gt;</operator><name>sample_rate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><call><name>ff_filter_frame</name><argument_list>(<argument><expr><name>outlink</name></expr></argument>, <argument><expr><name>frame</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVFilterPad</name></type> <name><name>asetrate_inputs</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"default"</literal></expr>,

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_AUDIO</name></expr>,

<expr><operator>.</operator><name>filter_frame</name> <operator>=</operator> <name>filter_frame</name></expr>,

}</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVFilterPad</name></type> <name><name>asetrate_outputs</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"default"</literal></expr>,

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_AUDIO</name></expr>,

<expr><operator>.</operator><name>config_props</name> <operator>=</operator> <name>config_props</name></expr>,

}</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFilter</name></type> <name>ff_af_asetrate</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"asetrate"</literal></expr>,

<expr><operator>.</operator><name>description</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"Change the sample rate without "</literal>

<literal type="string">"altering the data."</literal></expr></argument>)</argument_list></call></expr>,

<expr><operator>.</operator><name>query_formats</name> <operator>=</operator> <name>query_formats</name></expr>,

<expr><operator>.</operator><name>priv_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>ASetRateContext</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><operator>.</operator><name>inputs</name> <operator>=</operator> <name>asetrate_inputs</name></expr>,

<expr><operator>.</operator><name>outputs</name> <operator>=</operator> <name>asetrate_outputs</name></expr>,

<expr><operator>.</operator><name>priv_class</name> <operator>=</operator> <operator>&amp;</operator><name>asetrate_class</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

</unit>
