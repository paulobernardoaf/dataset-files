<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavfilter\vf_rotate.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avstring.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/eval.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/opt.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/intreadwrite.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/parseutils.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/pixdesc.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avfilter.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"drawutils.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"video.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;float.h&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier> <specifier>const</specifier></type> <name><name>var_names</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="string">"in_w"</literal></expr> , <expr><literal type="string">"iw"</literal></expr>, 

<expr><literal type="string">"in_h"</literal></expr> , <expr><literal type="string">"ih"</literal></expr>, 

<expr><literal type="string">"out_w"</literal></expr>, <expr><literal type="string">"ow"</literal></expr>, 

<expr><literal type="string">"out_h"</literal></expr>, <expr><literal type="string">"oh"</literal></expr>, 

<expr><literal type="string">"hsub"</literal></expr>, <expr><literal type="string">"vsub"</literal></expr>,

<expr><literal type="string">"n"</literal></expr>, 

<expr><literal type="string">"t"</literal></expr>, 

<expr><name>NULL</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<enum>enum <name>var_name</name> <block>{

<decl><name>VAR_IN_W</name></decl> , <decl><name>VAR_IW</name></decl>,

<decl><name>VAR_IN_H</name></decl> , <decl><name>VAR_IH</name></decl>,

<decl><name>VAR_OUT_W</name></decl>, <decl><name>VAR_OW</name></decl>,

<decl><name>VAR_OUT_H</name></decl>, <decl><name>VAR_OH</name></decl>,

<decl><name>VAR_HSUB</name></decl>, <decl><name>VAR_VSUB</name></decl>,

<decl><name>VAR_N</name></decl>,

<decl><name>VAR_T</name></decl>,

<decl><name>VAR_VARS_NB</name></decl>

}</block>;</enum>

<typedef>typedef <type><struct>struct <name>RotContext</name> <block>{

<decl_stmt><decl><type><specifier>const</specifier> <name>AVClass</name> <modifier>*</modifier></type><name>class</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>angle</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>angle_expr_str</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>AVExpr</name> <modifier>*</modifier></type><name>angle_expr</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>outw_expr_str</name></decl>, <modifier>*</modifier><name>outh_expr_str</name>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>outh</name></decl>, <name>outw</name>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>fillcolor</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>fillcolor_str</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>fillcolor_enable</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>hsub</name></decl>, <name>vsub</name>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>nb_planes</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>use_bilinear</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>sinx</name></decl>, <name>cosx</name>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name><name>var_values</name><index>[<expr><name>VAR_VARS_NB</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>FFDrawContext</name></type> <name>draw</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>FFDrawColor</name></type> <name>color</name></decl>;</decl_stmt>

<function_decl><type><name>uint8_t</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>interpolate_bilinear</name>)<parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst_color</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_linesize</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_linestep</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>max_x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>max_y</name></decl></parameter>)</parameter_list>;</function_decl>

}</block></struct></type> <name>RotContext</name>;</typedef>

<typedef>typedef <type><struct>struct <name>ThreadData</name> <block>{

<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>in</name></decl>, <modifier>*</modifier><name>out</name>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>inw</name></decl>, <name>inh</name>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>outw</name></decl>, <name>outh</name>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>plane</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>xi</name></decl>, <name>yi</name>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>xprime</name></decl>, <name>yprime</name>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>, <name>s</name>;</decl_stmt>

}</block></struct></type> <name>ThreadData</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OFFSET</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>offsetof(RotContext, x)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLAGS</name></cpp:macro> <cpp:value>AV_OPT_FLAG_FILTERING_PARAM|AV_OPT_FLAG_VIDEO_PARAM</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TFLAGS</name></cpp:macro> <cpp:value>AV_OPT_FLAG_FILTERING_PARAM|AV_OPT_FLAG_VIDEO_PARAM|AV_OPT_FLAG_RUNTIME_PARAM</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVOption</name></type> <name><name>rotate_options</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><literal type="string">"angle"</literal></expr>, <expr><literal type="string">"set angle (in radians)"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>angle_expr_str</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_STRING</name></expr>, <expr><block>{<expr><operator>.</operator><name>str</name><operator>=</operator><literal type="string">"0"</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>.</operator><name>flags</name><operator>=</operator><name>TFLAGS</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"a"</literal></expr>, <expr><literal type="string">"set angle (in radians)"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>angle_expr_str</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_STRING</name></expr>, <expr><block>{<expr><operator>.</operator><name>str</name><operator>=</operator><literal type="string">"0"</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>.</operator><name>flags</name><operator>=</operator><name>TFLAGS</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"out_w"</literal></expr>, <expr><literal type="string">"set output width expression"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>outw_expr_str</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_STRING</name></expr>, <expr><block>{<expr><operator>.</operator><name>str</name><operator>=</operator><literal type="string">"iw"</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>.</operator><name>flags</name><operator>=</operator><name>FLAGS</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"ow"</literal></expr>, <expr><literal type="string">"set output width expression"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>outw_expr_str</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_STRING</name></expr>, <expr><block>{<expr><operator>.</operator><name>str</name><operator>=</operator><literal type="string">"iw"</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>.</operator><name>flags</name><operator>=</operator><name>FLAGS</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"out_h"</literal></expr>, <expr><literal type="string">"set output height expression"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>outh_expr_str</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_STRING</name></expr>, <expr><block>{<expr><operator>.</operator><name>str</name><operator>=</operator><literal type="string">"ih"</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>.</operator><name>flags</name><operator>=</operator><name>FLAGS</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"oh"</literal></expr>, <expr><literal type="string">"set output height expression"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>outh_expr_str</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_STRING</name></expr>, <expr><block>{<expr><operator>.</operator><name>str</name><operator>=</operator><literal type="string">"ih"</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>.</operator><name>flags</name><operator>=</operator><name>FLAGS</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"fillcolor"</literal></expr>, <expr><literal type="string">"set background fill color"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>fillcolor_str</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_STRING</name></expr>, <expr><block>{<expr><operator>.</operator><name>str</name><operator>=</operator><literal type="string">"black"</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>.</operator><name>flags</name><operator>=</operator><name>FLAGS</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"c"</literal></expr>, <expr><literal type="string">"set background fill color"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>fillcolor_str</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_STRING</name></expr>, <expr><block>{<expr><operator>.</operator><name>str</name><operator>=</operator><literal type="string">"black"</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>.</operator><name>flags</name><operator>=</operator><name>FLAGS</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"bilinear"</literal></expr>, <expr><literal type="string">"use bilinear interpolation"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>use_bilinear</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_BOOL</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><operator>.</operator><name>flags</name><operator>=</operator><name>FLAGS</name></expr> }</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>AVFILTER_DEFINE_CLASS</name><argument_list>(<argument><expr><name>rotate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>init</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>RotContext</name> <modifier>*</modifier></type><name>rot</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>rot</name><operator>-&gt;</operator><name>fillcolor_str</name></name></expr></argument>, <argument><expr><literal type="string">"none"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>rot</name><operator>-&gt;</operator><name>fillcolor_enable</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>av_parse_color</name><argument_list>(<argument><expr><name><name>rot</name><operator>-&gt;</operator><name>fillcolor</name></name></expr></argument>, <argument><expr><name><name>rot</name><operator>-&gt;</operator><name>fillcolor_str</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>rot</name><operator>-&gt;</operator><name>fillcolor_enable</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></else></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>void</name></type> <name>uninit</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>RotContext</name> <modifier>*</modifier></type><name>rot</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_expr_free</name><argument_list>(<argument><expr><name><name>rot</name><operator>-&gt;</operator><name>angle_expr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rot</name><operator>-&gt;</operator><name>angle_expr</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>query_formats</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>enum</name> <name>AVPixelFormat</name></name></type> <name><name>pix_fmts</name><index>[]</index></name> <init>= <expr><block>{

<expr><name>AV_PIX_FMT_GBRP</name></expr>, <expr><name>AV_PIX_FMT_GBRAP</name></expr>,

<expr><name>AV_PIX_FMT_ARGB</name></expr>, <expr><name>AV_PIX_FMT_RGBA</name></expr>,

<expr><name>AV_PIX_FMT_ABGR</name></expr>, <expr><name>AV_PIX_FMT_BGRA</name></expr>,

<expr><name>AV_PIX_FMT_0RGB</name></expr>, <expr><name>AV_PIX_FMT_RGB0</name></expr>,

<expr><name>AV_PIX_FMT_0BGR</name></expr>, <expr><name>AV_PIX_FMT_BGR0</name></expr>,

<expr><name>AV_PIX_FMT_RGB24</name></expr>, <expr><name>AV_PIX_FMT_BGR24</name></expr>,

<expr><name>AV_PIX_FMT_GRAY8</name></expr>,

<expr><name>AV_PIX_FMT_YUV410P</name></expr>,

<expr><name>AV_PIX_FMT_YUV444P</name></expr>, <expr><name>AV_PIX_FMT_YUVJ444P</name></expr>,

<expr><name>AV_PIX_FMT_YUV420P</name></expr>, <expr><name>AV_PIX_FMT_YUVJ420P</name></expr>,

<expr><name>AV_PIX_FMT_YUVA444P</name></expr>, <expr><name>AV_PIX_FMT_YUVA420P</name></expr>,

<expr><name>AV_PIX_FMT_YUV420P10LE</name></expr>, <expr><name>AV_PIX_FMT_YUVA420P10LE</name></expr>,

<expr><name>AV_PIX_FMT_YUV444P10LE</name></expr>, <expr><name>AV_PIX_FMT_YUVA444P10LE</name></expr>,

<expr><name>AV_PIX_FMT_YUV420P12LE</name></expr>,

<expr><name>AV_PIX_FMT_YUV444P12LE</name></expr>,

<expr><name>AV_PIX_FMT_YUV444P16LE</name></expr>, <expr><name>AV_PIX_FMT_YUVA444P16LE</name></expr>,

<expr><name>AV_PIX_FMT_YUV420P16LE</name></expr>, <expr><name>AV_PIX_FMT_YUVA420P16LE</name></expr>,

<expr><name>AV_PIX_FMT_YUV444P9LE</name></expr>, <expr><name>AV_PIX_FMT_YUVA444P9LE</name></expr>,

<expr><name>AV_PIX_FMT_YUV420P9LE</name></expr>, <expr><name>AV_PIX_FMT_YUVA420P9LE</name></expr>,

<expr><name>AV_PIX_FMT_NONE</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFilterFormats</name> <modifier>*</modifier></type><name>fmts_list</name> <init>= <expr><call><name>ff_make_format_list</name><argument_list>(<argument><expr><name>pix_fmts</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>fmts_list</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>ff_set_common_formats</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>fmts_list</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>double</name></type> <name>get_rotated_w</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>opaque</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>angle</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>RotContext</name> <modifier>*</modifier></type><name>rot</name> <init>= <expr><name>opaque</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>inw</name> <init>= <expr><name><name>rot</name><operator>-&gt;</operator><name>var_values</name><index>[<expr><name>VAR_IN_W</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>inh</name> <init>= <expr><name><name>rot</name><operator>-&gt;</operator><name>var_values</name><index>[<expr><name>VAR_IN_H</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>sinx</name> <init>= <expr><call><name>sin</name><argument_list>(<argument><expr><name>angle</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>cosx</name> <init>= <expr><call><name>cos</name><argument_list>(<argument><expr><name>angle</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>FFMAX</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>inh</name> <operator>*</operator> <name>sinx</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>-</operator><name>inw</name> <operator>*</operator> <name>cosx</name></expr></argument>)</argument_list></call> <operator>+</operator>

<call><name>FFMAX</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>inw</name> <operator>*</operator> <name>cosx</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>-</operator><name>inh</name> <operator>*</operator> <name>sinx</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>double</name></type> <name>get_rotated_h</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>opaque</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>angle</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>RotContext</name> <modifier>*</modifier></type><name>rot</name> <init>= <expr><name>opaque</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>inw</name> <init>= <expr><name><name>rot</name><operator>-&gt;</operator><name>var_values</name><index>[<expr><name>VAR_IN_W</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>inh</name> <init>= <expr><name><name>rot</name><operator>-&gt;</operator><name>var_values</name><index>[<expr><name>VAR_IN_H</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>sinx</name> <init>= <expr><call><name>sin</name><argument_list>(<argument><expr><name>angle</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>cosx</name> <init>= <expr><call><name>cos</name><argument_list>(<argument><expr><name>angle</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>FFMAX</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>-</operator><name>inh</name> <operator>*</operator> <name>cosx</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>-</operator><name>inw</name> <operator>*</operator> <name>sinx</name></expr></argument>)</argument_list></call> <operator>+</operator>

<call><name>FFMAX</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>inh</name> <operator>*</operator> <name>cosx</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>inw</name> <operator>*</operator> <name>sinx</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<expr_stmt><expr><specifier>static</specifier> <call><call><name>double</name> <argument_list>(<argument><expr><operator>*</operator> <specifier>const</specifier> <name><name>func1</name><index>[]</index></name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>void</name> <operator>*</operator></expr></argument>, <argument><expr><name>double</name></expr></argument>)</argument_list></call> <operator>=</operator> <block>{

<expr><name>get_rotated_w</name></expr>,

<expr><name>get_rotated_h</name></expr>,

<expr><name>NULL</name></expr>

}</block></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier> <specifier>const</specifier></type> <name><name>func1_names</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="string">"rotw"</literal></expr>,

<expr><literal type="string">"roth"</literal></expr>,

<expr><name>NULL</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FIXP</name></cpp:macro> <cpp:value>(1&lt;&lt;16)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FIXP2</name></cpp:macro> <cpp:value>(1&lt;&lt;20)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INT_PI</name></cpp:macro> <cpp:value>3294199</cpp:value></cpp:define> 

<function><type><specifier>static</specifier> <name>int64_t</name></type> <name>int_sin</name><parameter_list>(<parameter><decl><type><name>int64_t</name></type> <name>a</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int64_t</name></type> <name>a2</name></decl>, <decl><type ref="prev"/><name>res</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>a</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>a</name> <operator>=</operator> <name>INT_PI</name><operator>-</operator><name>a</name></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<expr_stmt><expr><name>a</name> <operator>%=</operator> <literal type="number">2</literal> <operator>*</operator> <name>INT_PI</name></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name>a</name> <operator>&gt;=</operator> <name>INT_PI</name><operator>*</operator><literal type="number">3</literal><operator>/</operator><literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>a</name> <operator>-=</operator> <literal type="number">2</literal><operator>*</operator><name>INT_PI</name></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<if_stmt><if>if <condition>(<expr><name>a</name> <operator>&gt;=</operator> <name>INT_PI</name><operator>/</operator><literal type="number">2</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>a</name> <operator>=</operator> <name>INT_PI</name> <operator>-</operator> <name>a</name></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<expr_stmt><expr><name>a2</name> <operator>=</operator> <operator>(</operator><name>a</name><operator>*</operator><name>a</name><operator>)</operator><operator>/</operator><operator>(</operator><name>FIXP2</name><operator>)</operator></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">2</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">11</literal></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">2</literal></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>res</name> <operator>+=</operator> <name>a</name></expr>;</expr_stmt>

<expr_stmt><expr><name>a</name> <operator>=</operator> <operator>-</operator><name>a</name><operator>*</operator><name>a2</name> <operator>/</operator> <operator>(</operator><name>FIXP2</name><operator>*</operator><name>i</name><operator>*</operator><operator>(</operator><name>i</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><operator>(</operator><name>res</name> <operator>+</operator> <literal type="number">8</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">4</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>interpolate_bilinear8</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst_color</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_linesize</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_linestep</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>max_x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>max_y</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>int_x</name> <init>= <expr><call><name>av_clip</name><argument_list>(<argument><expr><name>x</name><operator>&gt;&gt;</operator><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>max_x</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>int_y</name> <init>= <expr><call><name>av_clip</name><argument_list>(<argument><expr><name>y</name><operator>&gt;&gt;</operator><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>max_y</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>frac_x</name> <init>= <expr><name>x</name><operator>&amp;</operator><literal type="number">0xFFFF</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>frac_y</name> <init>= <expr><name>y</name><operator>&amp;</operator><literal type="number">0xFFFF</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>int_x1</name> <init>= <expr><call><name>FFMIN</name><argument_list>(<argument><expr><name>int_x</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>max_x</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>int_y1</name> <init>= <expr><call><name>FFMIN</name><argument_list>(<argument><expr><name>int_y</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>max_y</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>src_linestep</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>s00</name> <init>= <expr><name><name>src</name><index>[<expr><name>src_linestep</name> <operator>*</operator> <name>int_x</name> <operator>+</operator> <name>i</name> <operator>+</operator> <name>src_linesize</name> <operator>*</operator> <name>int_y</name></expr> ]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>s01</name> <init>= <expr><name><name>src</name><index>[<expr><name>src_linestep</name> <operator>*</operator> <name>int_x1</name> <operator>+</operator> <name>i</name> <operator>+</operator> <name>src_linesize</name> <operator>*</operator> <name>int_y</name></expr> ]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>s10</name> <init>= <expr><name><name>src</name><index>[<expr><name>src_linestep</name> <operator>*</operator> <name>int_x</name> <operator>+</operator> <name>i</name> <operator>+</operator> <name>src_linesize</name> <operator>*</operator> <name>int_y1</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>s11</name> <init>= <expr><name><name>src</name><index>[<expr><name>src_linestep</name> <operator>*</operator> <name>int_x1</name> <operator>+</operator> <name>i</name> <operator>+</operator> <name>src_linesize</name> <operator>*</operator> <name>int_y1</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>s0</name> <init>= <expr><operator>(</operator><operator>(</operator><operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">16</literal><operator>)</operator> <operator>-</operator> <name>frac_x</name><operator>)</operator><operator>*</operator><name>s00</name> <operator>+</operator> <name>frac_x</name><operator>*</operator><name>s01</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>s1</name> <init>= <expr><operator>(</operator><operator>(</operator><operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">16</literal><operator>)</operator> <operator>-</operator> <name>frac_x</name><operator>)</operator><operator>*</operator><name>s10</name> <operator>+</operator> <name>frac_x</name><operator>*</operator><name>s11</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>dst_color</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>int64_t</name><operator>)</operator><operator>(</operator><operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">16</literal><operator>)</operator> <operator>-</operator> <name>frac_y</name><operator>)</operator><operator>*</operator><name>s0</name> <operator>+</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><name>frac_y</name><operator>*</operator><name>s1</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">32</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><name>dst_color</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>interpolate_bilinear16</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst_color</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_linesize</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_linestep</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>max_x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>max_y</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>int_x</name> <init>= <expr><call><name>av_clip</name><argument_list>(<argument><expr><name>x</name><operator>&gt;&gt;</operator><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>max_x</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>int_y</name> <init>= <expr><call><name>av_clip</name><argument_list>(<argument><expr><name>y</name><operator>&gt;&gt;</operator><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>max_y</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>frac_x</name> <init>= <expr><name>x</name><operator>&amp;</operator><literal type="number">0xFFFF</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>frac_y</name> <init>= <expr><name>y</name><operator>&amp;</operator><literal type="number">0xFFFF</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>int_x1</name> <init>= <expr><call><name>FFMIN</name><argument_list>(<argument><expr><name>int_x</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>max_x</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>int_y1</name> <init>= <expr><call><name>FFMIN</name><argument_list>(<argument><expr><name>int_y</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>max_y</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>src_linestep</name></expr>;</condition> <incr><expr><name>i</name><operator>+=</operator><literal type="number">2</literal></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>s00</name> <init>= <expr><call><name>AV_RL16</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>src</name><index>[<expr><name>src_linestep</name> <operator>*</operator> <name>int_x</name> <operator>+</operator> <name>i</name> <operator>+</operator> <name>src_linesize</name> <operator>*</operator> <name>int_y</name></expr> ]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>s01</name> <init>= <expr><call><name>AV_RL16</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>src</name><index>[<expr><name>src_linestep</name> <operator>*</operator> <name>int_x1</name> <operator>+</operator> <name>i</name> <operator>+</operator> <name>src_linesize</name> <operator>*</operator> <name>int_y</name></expr> ]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>s10</name> <init>= <expr><call><name>AV_RL16</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>src</name><index>[<expr><name>src_linestep</name> <operator>*</operator> <name>int_x</name> <operator>+</operator> <name>i</name> <operator>+</operator> <name>src_linesize</name> <operator>*</operator> <name>int_y1</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>s11</name> <init>= <expr><call><name>AV_RL16</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>src</name><index>[<expr><name>src_linestep</name> <operator>*</operator> <name>int_x1</name> <operator>+</operator> <name>i</name> <operator>+</operator> <name>src_linesize</name> <operator>*</operator> <name>int_y1</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>s0</name> <init>= <expr><operator>(</operator><operator>(</operator><operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">16</literal><operator>)</operator> <operator>-</operator> <name>frac_x</name><operator>)</operator><operator>*</operator><name>s00</name> <operator>+</operator> <name>frac_x</name><operator>*</operator><name>s01</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>s1</name> <init>= <expr><operator>(</operator><operator>(</operator><operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">16</literal><operator>)</operator> <operator>-</operator> <name>frac_x</name><operator>)</operator><operator>*</operator><name>s10</name> <operator>+</operator> <name>frac_x</name><operator>*</operator><name>s11</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>AV_WL16</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dst_color</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>int64_t</name><operator>)</operator><operator>(</operator><operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">16</literal><operator>)</operator> <operator>-</operator> <name>frac_y</name><operator>)</operator><operator>*</operator><name>s0</name> <operator>+</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><name>frac_y</name><operator>*</operator><name>s1</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><name>dst_color</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>config_props</name><parameter_list>(<parameter><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>outlink</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>outlink</name><operator>-&gt;</operator><name>src</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RotContext</name> <modifier>*</modifier></type><name>rot</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>inlink</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>inputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>AVPixFmtDescriptor</name> <modifier>*</modifier></type><name>pixdesc</name> <init>= <expr><call><name>av_pix_fmt_desc_get</name><argument_list>(<argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>format</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>res</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>expr</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ff_draw_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rot</name><operator>-&gt;</operator><name>draw</name></name></expr></argument>, <argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>format</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_draw_color</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rot</name><operator>-&gt;</operator><name>draw</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>rot</name><operator>-&gt;</operator><name>color</name></name></expr></argument>, <argument><expr><name><name>rot</name><operator>-&gt;</operator><name>fillcolor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rot</name><operator>-&gt;</operator><name>hsub</name></name> <operator>=</operator> <name><name>pixdesc</name><operator>-&gt;</operator><name>log2_chroma_w</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rot</name><operator>-&gt;</operator><name>vsub</name></name> <operator>=</operator> <name><name>pixdesc</name><operator>-&gt;</operator><name>log2_chroma_h</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pixdesc</name><operator>-&gt;</operator><name>comp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>depth</name> <operator>==</operator> <literal type="number">8</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>rot</name><operator>-&gt;</operator><name>interpolate_bilinear</name></name> <operator>=</operator> <name>interpolate_bilinear8</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>rot</name><operator>-&gt;</operator><name>interpolate_bilinear</name></name> <operator>=</operator> <name>interpolate_bilinear16</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>rot</name><operator>-&gt;</operator><name>var_values</name><index>[<expr><name>VAR_IN_W</name></expr>]</index></name> <operator>=</operator> <name><name>rot</name><operator>-&gt;</operator><name>var_values</name><index>[<expr><name>VAR_IW</name></expr>]</index></name> <operator>=</operator> <name><name>inlink</name><operator>-&gt;</operator><name>w</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rot</name><operator>-&gt;</operator><name>var_values</name><index>[<expr><name>VAR_IN_H</name></expr>]</index></name> <operator>=</operator> <name><name>rot</name><operator>-&gt;</operator><name>var_values</name><index>[<expr><name>VAR_IH</name></expr>]</index></name> <operator>=</operator> <name><name>inlink</name><operator>-&gt;</operator><name>h</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rot</name><operator>-&gt;</operator><name>var_values</name><index>[<expr><name>VAR_HSUB</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal><operator>&lt;&lt;</operator><name><name>rot</name><operator>-&gt;</operator><name>hsub</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rot</name><operator>-&gt;</operator><name>var_values</name><index>[<expr><name>VAR_VSUB</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal><operator>&lt;&lt;</operator><name><name>rot</name><operator>-&gt;</operator><name>vsub</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rot</name><operator>-&gt;</operator><name>var_values</name><index>[<expr><name>VAR_N</name></expr>]</index></name> <operator>=</operator> <name>NAN</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rot</name><operator>-&gt;</operator><name>var_values</name><index>[<expr><name>VAR_T</name></expr>]</index></name> <operator>=</operator> <name>NAN</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rot</name><operator>-&gt;</operator><name>var_values</name><index>[<expr><name>VAR_OUT_W</name></expr>]</index></name> <operator>=</operator> <name><name>rot</name><operator>-&gt;</operator><name>var_values</name><index>[<expr><name>VAR_OW</name></expr>]</index></name> <operator>=</operator> <name>NAN</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rot</name><operator>-&gt;</operator><name>var_values</name><index>[<expr><name>VAR_OUT_H</name></expr>]</index></name> <operator>=</operator> <name><name>rot</name><operator>-&gt;</operator><name>var_values</name><index>[<expr><name>VAR_OH</name></expr>]</index></name> <operator>=</operator> <name>NAN</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_expr_free</name><argument_list>(<argument><expr><name><name>rot</name><operator>-&gt;</operator><name>angle_expr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rot</name><operator>-&gt;</operator><name>angle_expr</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>av_expr_parse</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rot</name><operator>-&gt;</operator><name>angle_expr</name></name></expr></argument>, <argument><expr><name>expr</name> <operator>=</operator> <name><name>rot</name><operator>-&gt;</operator><name>angle_expr_str</name></name></expr></argument>, <argument><expr><name>var_names</name></expr></argument>,

<argument><expr><name>func1_names</name></expr></argument>, <argument><expr><name>func1</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"Error occurred parsing angle expression '%s'\n"</literal></expr></argument>, <argument><expr><name><name>rot</name><operator>-&gt;</operator><name>angle_expr_str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SET_SIZE_EXPR</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>opt_name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { ret = av_expr_parse_and_eval(&amp;res, expr = rot-&gt;name##_expr_str, var_names, rot-&gt;var_values, func1_names, func1, NULL, NULL, rot, 0, ctx); if (ret &lt; 0 || isnan(res) || isinf(res) || res &lt;= 0) { av_log(ctx, AV_LOG_ERROR, "Error parsing or evaluating expression for option %s: " "invalid expression '%s' or non-positive or indefinite value %f\n", opt_name, expr, res); return ret; } } while (0)</cpp:value></cpp:define>

<expr_stmt><expr><call><name>av_expr_parse_and_eval</name><argument_list>(<argument><expr><operator>&amp;</operator><name>res</name></expr></argument>, <argument><expr><name>expr</name> <operator>=</operator> <name><name>rot</name><operator>-&gt;</operator><name>outw_expr_str</name></name></expr></argument>, <argument><expr><name>var_names</name></expr></argument>, <argument><expr><name><name>rot</name><operator>-&gt;</operator><name>var_values</name></name></expr></argument>,

<argument><expr><name>func1_names</name></expr></argument>, <argument><expr><name>func1</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>rot</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rot</name><operator>-&gt;</operator><name>var_values</name><index>[<expr><name>VAR_OUT_W</name></expr>]</index></name> <operator>=</operator> <name><name>rot</name><operator>-&gt;</operator><name>var_values</name><index>[<expr><name>VAR_OW</name></expr>]</index></name> <operator>=</operator> <name>res</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rot</name><operator>-&gt;</operator><name>outw</name></name> <operator>=</operator> <name>res</name> <operator>+</operator> <literal type="number">0.5</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SET_SIZE_EXPR</name><argument_list>(<argument><expr><name>outh</name></expr></argument>, <argument><expr><literal type="string">"out_h"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rot</name><operator>-&gt;</operator><name>var_values</name><index>[<expr><name>VAR_OUT_H</name></expr>]</index></name> <operator>=</operator> <name><name>rot</name><operator>-&gt;</operator><name>var_values</name><index>[<expr><name>VAR_OH</name></expr>]</index></name> <operator>=</operator> <name>res</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rot</name><operator>-&gt;</operator><name>outh</name></name> <operator>=</operator> <name>res</name> <operator>+</operator> <literal type="number">0.5</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SET_SIZE_EXPR</name><argument_list>(<argument><expr><name>outw</name></expr></argument>, <argument><expr><literal type="string">"out_w"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rot</name><operator>-&gt;</operator><name>var_values</name><index>[<expr><name>VAR_OUT_W</name></expr>]</index></name> <operator>=</operator> <name><name>rot</name><operator>-&gt;</operator><name>var_values</name><index>[<expr><name>VAR_OW</name></expr>]</index></name> <operator>=</operator> <name>res</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rot</name><operator>-&gt;</operator><name>outw</name></name> <operator>=</operator> <name>res</name> <operator>+</operator> <literal type="number">0.5</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rot</name><operator>-&gt;</operator><name>nb_planes</name></name> <operator>=</operator> <call><name>av_pix_fmt_count_planes</name><argument_list>(<argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>format</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>outlink</name><operator>-&gt;</operator><name>w</name></name> <operator>=</operator> <name><name>rot</name><operator>-&gt;</operator><name>outw</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>outlink</name><operator>-&gt;</operator><name>h</name></name> <operator>=</operator> <name><name>rot</name><operator>-&gt;</operator><name>outh</name></name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>void</name></type> <name>copy_elem</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pout</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>pin</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>elem_size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>v</name></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>elem_size</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">1</literal></expr>:</case>

<expr_stmt><expr><operator>*</operator><name>pout</name> <operator>=</operator> <operator>*</operator><name>pin</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">2</literal></expr>:</case>

<expr_stmt><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><name>pout</name><operator>)</operator> <operator>=</operator> <operator>*</operator><operator>(</operator><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><name>pin</name><operator>)</operator></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">3</literal></expr>:</case>

<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>AV_RB24</name><argument_list>(<argument><expr><name>pin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_WB24</name><argument_list>(<argument><expr><name>pout</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">4</literal></expr>:</case>

<expr_stmt><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><name>pout</name><operator>)</operator> <operator>=</operator> <operator>*</operator><operator>(</operator><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><name>pin</name><operator>)</operator></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>pout</name></expr></argument>, <argument><expr><name>pin</name></expr></argument>, <argument><expr><name>elem_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>void</name></type> <name>simple_rotate_internal</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_linesize</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>angle</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>elem_size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<switch>switch<condition>(<expr><name>angle</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">0</literal></expr>:</case>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>elem_size</name> <operator>*</operator> <name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">1</literal></expr>:</case>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>copy_elem</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <name>i</name><operator>*</operator><name>elem_size</name></expr></argument>, <argument><expr><name>src</name> <operator>+</operator> <operator>(</operator><name>len</name><operator>-</operator><name>i</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><name>src_linesize</name></expr></argument>, <argument><expr><name>elem_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<break>break;</break>

<case>case <expr><literal type="number">2</literal></expr>:</case>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>copy_elem</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <name>i</name><operator>*</operator><name>elem_size</name></expr></argument>, <argument><expr><name>src</name> <operator>+</operator> <operator>(</operator><name>len</name><operator>-</operator><name>i</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><name>elem_size</name></expr></argument>, <argument><expr><name>elem_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<break>break;</break>

<case>case <expr><literal type="number">3</literal></expr>:</case>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>copy_elem</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <name>i</name><operator>*</operator><name>elem_size</name></expr></argument>, <argument><expr><name>src</name> <operator>+</operator> <name>i</name><operator>*</operator><name>src_linesize</name></expr></argument>, <argument><expr><name>elem_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>void</name></type> <name>simple_rotate</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_linesize</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>angle</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>elem_size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<switch>switch<condition>(<expr><name>elem_size</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">1</literal></expr> :</case> <expr_stmt><expr><call><name>simple_rotate_internal</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_linesize</name></expr></argument>, <argument><expr><name>angle</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">2</literal></expr> :</case> <expr_stmt><expr><call><name>simple_rotate_internal</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_linesize</name></expr></argument>, <argument><expr><name>angle</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">3</literal></expr> :</case> <expr_stmt><expr><call><name>simple_rotate_internal</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_linesize</name></expr></argument>, <argument><expr><name>angle</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">4</literal></expr> :</case> <expr_stmt><expr><call><name>simple_rotate_internal</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_linesize</name></expr></argument>, <argument><expr><name>angle</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<default>default:</default> <expr_stmt><expr><call><name>simple_rotate_internal</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_linesize</name></expr></argument>, <argument><expr><name>angle</name></expr></argument>, <argument><expr><name>elem_size</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TS2T</name><parameter_list>(<parameter><type><name>ts</name></type></parameter>, <parameter><type><name>tb</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((ts) == AV_NOPTS_VALUE ? NAN : (double)(ts)*av_q2d(tb))</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>int</name></type> <name>filter_slice</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>job</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nb_jobs</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ThreadData</name> <modifier>*</modifier></type><name>td</name> <init>= <expr><name>arg</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>in</name> <init>= <expr><name><name>td</name><operator>-&gt;</operator><name>in</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>out</name> <init>= <expr><name><name>td</name><operator>-&gt;</operator><name>out</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RotContext</name> <modifier>*</modifier></type><name>rot</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>outw</name> <init>= <expr><name><name>td</name><operator>-&gt;</operator><name>outw</name></name></expr></init></decl>, <decl><type ref="prev"/><name>outh</name> <init>= <expr><name><name>td</name><operator>-&gt;</operator><name>outh</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>inw</name> <init>= <expr><name><name>td</name><operator>-&gt;</operator><name>inw</name></name></expr></init></decl>, <decl><type ref="prev"/><name>inh</name> <init>= <expr><name><name>td</name><operator>-&gt;</operator><name>inh</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>plane</name> <init>= <expr><name><name>td</name><operator>-&gt;</operator><name>plane</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>xi</name> <init>= <expr><name><name>td</name><operator>-&gt;</operator><name>xi</name></name></expr></init></decl>, <decl><type ref="prev"/><name>yi</name> <init>= <expr><name><name>td</name><operator>-&gt;</operator><name>yi</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>c</name> <init>= <expr><name><name>td</name><operator>-&gt;</operator><name>c</name></name></expr></init></decl>, <decl><type ref="prev"/><name>s</name> <init>= <expr><name><name>td</name><operator>-&gt;</operator><name>s</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>start</name> <init>= <expr><operator>(</operator><name>outh</name> <operator>*</operator> <name>job</name> <operator>)</operator> <operator>/</operator> <name>nb_jobs</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>end</name> <init>= <expr><operator>(</operator><name>outh</name> <operator>*</operator> <operator>(</operator><name>job</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>/</operator> <name>nb_jobs</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>xprime</name> <init>= <expr><name><name>td</name><operator>-&gt;</operator><name>xprime</name></name> <operator>+</operator> <name>start</name> <operator>*</operator> <name>s</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>yprime</name> <init>= <expr><name><name>td</name><operator>-&gt;</operator><name>yprime</name></name> <operator>+</operator> <name>start</name> <operator>*</operator> <name>c</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <name>start</name></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>end</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>x</name> <operator>=</operator> <name>xprime</name> <operator>+</operator> <name>xi</name> <operator>+</operator> <name>FIXP</name><operator>*</operator><operator>(</operator><name>inw</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>/</operator><literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>y</name> <operator>=</operator> <name>yprime</name> <operator>+</operator> <name>yi</name> <operator>+</operator> <name>FIXP</name><operator>*</operator><operator>(</operator><name>inh</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>/</operator><literal type="number">2</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>fabs</name><argument_list>(<argument><expr><name><name>rot</name><operator>-&gt;</operator><name>angle</name></name> <operator>-</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>FLT_EPSILON</name> <operator>&amp;&amp;</operator> <name>outw</name> <operator>==</operator> <name>inw</name> <operator>&amp;&amp;</operator> <name>outh</name> <operator>==</operator> <name>inh</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>simple_rotate</name><argument_list>(<argument><expr><name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>plane</name></expr>]</index></name> <operator>+</operator> <name>j</name> <operator>*</operator> <name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>plane</name></expr>]</index></name></expr></argument>,

<argument><expr><name><name>in</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>plane</name></expr>]</index></name> <operator>+</operator> <name>j</name> <operator>*</operator> <name><name>in</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>plane</name></expr>]</index></name></expr></argument>,

<argument><expr><name><name>in</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>plane</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>rot</name><operator>-&gt;</operator><name>draw</name><operator>.</operator><name>pixelstep</name><index>[<expr><name>plane</name></expr>]</index></name></expr></argument>, <argument><expr><name>outw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>fabs</name><argument_list>(<argument><expr><name><name>rot</name><operator>-&gt;</operator><name>angle</name></name> <operator>-</operator> <name>M_PI</name><operator>/</operator><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>FLT_EPSILON</name> <operator>&amp;&amp;</operator> <name>outw</name> <operator>==</operator> <name>inh</name> <operator>&amp;&amp;</operator> <name>outh</name> <operator>==</operator> <name>inw</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>simple_rotate</name><argument_list>(<argument><expr><name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>plane</name></expr>]</index></name> <operator>+</operator> <name>j</name> <operator>*</operator> <name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>plane</name></expr>]</index></name></expr></argument>,

<argument><expr><name><name>in</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>plane</name></expr>]</index></name> <operator>+</operator> <name>j</name> <operator>*</operator> <name><name>rot</name><operator>-&gt;</operator><name>draw</name><operator>.</operator><name>pixelstep</name><index>[<expr><name>plane</name></expr>]</index></name></expr></argument>,

<argument><expr><name><name>in</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>plane</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>rot</name><operator>-&gt;</operator><name>draw</name><operator>.</operator><name>pixelstep</name><index>[<expr><name>plane</name></expr>]</index></name></expr></argument>, <argument><expr><name>outw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>fabs</name><argument_list>(<argument><expr><name><name>rot</name><operator>-&gt;</operator><name>angle</name></name> <operator>-</operator> <name>M_PI</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>FLT_EPSILON</name> <operator>&amp;&amp;</operator> <name>outw</name> <operator>==</operator> <name>inw</name> <operator>&amp;&amp;</operator> <name>outh</name> <operator>==</operator> <name>inh</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>simple_rotate</name><argument_list>(<argument><expr><name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>plane</name></expr>]</index></name> <operator>+</operator> <name>j</name> <operator>*</operator> <name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>plane</name></expr>]</index></name></expr></argument>,

<argument><expr><name><name>in</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>plane</name></expr>]</index></name> <operator>+</operator> <operator>(</operator><name>outh</name><operator>-</operator><name>j</name><operator>-</operator><literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name><name>in</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>plane</name></expr>]</index></name></expr></argument>,

<argument><expr><name><name>in</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>plane</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name><name>rot</name><operator>-&gt;</operator><name>draw</name><operator>.</operator><name>pixelstep</name><index>[<expr><name>plane</name></expr>]</index></name></expr></argument>, <argument><expr><name>outw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>fabs</name><argument_list>(<argument><expr><name><name>rot</name><operator>-&gt;</operator><name>angle</name></name> <operator>-</operator> <literal type="number">3</literal><operator>*</operator><name>M_PI</name><operator>/</operator><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>FLT_EPSILON</name> <operator>&amp;&amp;</operator> <name>outw</name> <operator>==</operator> <name>inh</name> <operator>&amp;&amp;</operator> <name>outh</name> <operator>==</operator> <name>inw</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>simple_rotate</name><argument_list>(<argument><expr><name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>plane</name></expr>]</index></name> <operator>+</operator> <name>j</name> <operator>*</operator> <name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>plane</name></expr>]</index></name></expr></argument>,

<argument><expr><name><name>in</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>plane</name></expr>]</index></name> <operator>+</operator> <operator>(</operator><name>outh</name><operator>-</operator><name>j</name><operator>-</operator><literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name><name>rot</name><operator>-&gt;</operator><name>draw</name><operator>.</operator><name>pixelstep</name><index>[<expr><name>plane</name></expr>]</index></name></expr></argument>,

<argument><expr><name><name>in</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>plane</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name><name>rot</name><operator>-&gt;</operator><name>draw</name><operator>.</operator><name>pixelstep</name><index>[<expr><name>plane</name></expr>]</index></name></expr></argument>, <argument><expr><name>outw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>outw</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int32_t</name></type> <name>v</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>x1</name></decl>, <decl><type ref="prev"/><name>y1</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pin</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>pout</name></decl>;</decl_stmt>

<expr_stmt><expr><name>x1</name> <operator>=</operator> <name>x</name><operator>&gt;&gt;</operator><literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>y1</name> <operator>=</operator> <name>y</name><operator>&gt;&gt;</operator><literal type="number">16</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>x1</name> <operator>&gt;=</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>x1</name> <operator>&lt;=</operator> <name>inw</name> <operator>&amp;&amp;</operator> <name>y1</name> <operator>&gt;=</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>y1</name> <operator>&lt;=</operator> <name>inh</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>inp_inv</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt> 

<expr_stmt><expr><name>pout</name> <operator>=</operator> <name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>plane</name></expr>]</index></name> <operator>+</operator> <name>j</name> <operator>*</operator> <name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>plane</name></expr>]</index></name> <operator>+</operator> <name>i</name> <operator>*</operator> <name><name>rot</name><operator>-&gt;</operator><name>draw</name><operator>.</operator><name>pixelstep</name><index>[<expr><name>plane</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>rot</name><operator>-&gt;</operator><name>use_bilinear</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>pin</name> <operator>=</operator> <call><name><name>rot</name><operator>-&gt;</operator><name>interpolate_bilinear</name></name><argument_list>(<argument><expr><name>inp_inv</name></expr></argument>,

<argument><expr><name><name>in</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>plane</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>in</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>plane</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>rot</name><operator>-&gt;</operator><name>draw</name><operator>.</operator><name>pixelstep</name><index>[<expr><name>plane</name></expr>]</index></name></expr></argument>,

<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>inw</name><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>inh</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>x2</name> <init>= <expr><call><name>av_clip</name><argument_list>(<argument><expr><name>x1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>inw</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>y2</name> <init>= <expr><call><name>av_clip</name><argument_list>(<argument><expr><name>y1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>inh</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>pin</name> <operator>=</operator> <name><name>in</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>plane</name></expr>]</index></name> <operator>+</operator> <name>y2</name> <operator>*</operator> <name><name>in</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>plane</name></expr>]</index></name> <operator>+</operator> <name>x2</name> <operator>*</operator> <name><name>rot</name><operator>-&gt;</operator><name>draw</name><operator>.</operator><name>pixelstep</name><index>[<expr><name>plane</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<switch>switch <condition>(<expr><name><name>rot</name><operator>-&gt;</operator><name>draw</name><operator>.</operator><name>pixelstep</name><index>[<expr><name>plane</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">1</literal></expr>:</case>

<expr_stmt><expr><operator>*</operator><name>pout</name> <operator>=</operator> <operator>*</operator><name>pin</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">2</literal></expr>:</case>

<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>AV_RL16</name><argument_list>(<argument><expr><name>pin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_WL16</name><argument_list>(<argument><expr><name>pout</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">3</literal></expr>:</case>

<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>AV_RB24</name><argument_list>(<argument><expr><name>pin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_WB24</name><argument_list>(<argument><expr><name>pout</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">4</literal></expr>:</case>

<expr_stmt><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><name>pout</name><operator>)</operator> <operator>=</operator> <operator>*</operator><operator>(</operator><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><name>pin</name><operator>)</operator></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>pout</name></expr></argument>, <argument><expr><name>pin</name></expr></argument>, <argument><expr><name><name>rot</name><operator>-&gt;</operator><name>draw</name><operator>.</operator><name>pixelstep</name><index>[<expr><name>plane</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>x</name> <operator>+=</operator> <name>c</name></expr>;</expr_stmt>

<expr_stmt><expr><name>y</name> <operator>-=</operator> <name>s</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>xprime</name> <operator>+=</operator> <name>s</name></expr>;</expr_stmt>

<expr_stmt><expr><name>yprime</name> <operator>+=</operator> <name>c</name></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>filter_frame</name><parameter_list>(<parameter><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>inlink</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>in</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>inlink</name><operator>-&gt;</operator><name>dst</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>outlink</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>outputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>out</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RotContext</name> <modifier>*</modifier></type><name>rot</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>angle_int</name></decl>, <decl><type ref="prev"/><name>s</name></decl>, <decl><type ref="prev"/><name>c</name></decl>, <decl><type ref="prev"/><name>plane</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>res</name></decl>;</decl_stmt>

<expr_stmt><expr><name>out</name> <operator>=</operator> <call><name>ff_get_video_buffer</name><argument_list>(<argument><expr><name>outlink</name></expr></argument>, <argument><expr><name><name>outlink</name><operator>-&gt;</operator><name>w</name></name></expr></argument>, <argument><expr><name><name>outlink</name><operator>-&gt;</operator><name>h</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>out</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_frame_copy_props</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rot</name><operator>-&gt;</operator><name>var_values</name><index>[<expr><name>VAR_N</name></expr>]</index></name> <operator>=</operator> <name><name>inlink</name><operator>-&gt;</operator><name>frame_count_out</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rot</name><operator>-&gt;</operator><name>var_values</name><index>[<expr><name>VAR_T</name></expr>]</index></name> <operator>=</operator> <call><name>TS2T</name><argument_list>(<argument><expr><name><name>in</name><operator>-&gt;</operator><name>pts</name></name></expr></argument>, <argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>time_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rot</name><operator>-&gt;</operator><name>angle</name></name> <operator>=</operator> <name>res</name> <operator>=</operator> <call><name>av_expr_eval</name><argument_list>(<argument><expr><name><name>rot</name><operator>-&gt;</operator><name>angle_expr</name></name></expr></argument>, <argument><expr><name><name>rot</name><operator>-&gt;</operator><name>var_values</name></name></expr></argument>, <argument><expr><name>rot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"n:%f time:%f angle:%f/PI\n"</literal></expr></argument>,

<argument><expr><name><name>rot</name><operator>-&gt;</operator><name>var_values</name><index>[<expr><name>VAR_N</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>rot</name><operator>-&gt;</operator><name>var_values</name><index>[<expr><name>VAR_T</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>rot</name><operator>-&gt;</operator><name>angle</name></name><operator>/</operator><name>M_PI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>angle_int</name> <operator>=</operator> <name>res</name> <operator>*</operator> <name>FIXP</name> <operator>*</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>int_sin</name><argument_list>(<argument><expr><name>angle_int</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>int_sin</name><argument_list>(<argument><expr><name>angle_int</name> <operator>+</operator> <name>INT_PI</name><operator>/</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>rot</name><operator>-&gt;</operator><name>fillcolor_enable</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ff_fill_rectangle</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rot</name><operator>-&gt;</operator><name>draw</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>rot</name><operator>-&gt;</operator><name>color</name></name></expr></argument>, <argument><expr><name><name>out</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>out</name><operator>-&gt;</operator><name>linesize</name></name></expr></argument>,

<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>outlink</name><operator>-&gt;</operator><name>w</name></name></expr></argument>, <argument><expr><name><name>outlink</name><operator>-&gt;</operator><name>h</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>plane</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>plane</name> <operator>&lt;</operator> <name><name>rot</name><operator>-&gt;</operator><name>nb_planes</name></name></expr>;</condition> <incr><expr><name>plane</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>hsub</name> <init>= <expr><ternary><condition><expr><name>plane</name> <operator>==</operator> <literal type="number">1</literal> <operator>||</operator> <name>plane</name> <operator>==</operator> <literal type="number">2</literal></expr> ?</condition><then> <expr><name><name>rot</name><operator>-&gt;</operator><name>hsub</name></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>vsub</name> <init>= <expr><ternary><condition><expr><name>plane</name> <operator>==</operator> <literal type="number">1</literal> <operator>||</operator> <name>plane</name> <operator>==</operator> <literal type="number">2</literal></expr> ?</condition><then> <expr><name><name>rot</name><operator>-&gt;</operator><name>vsub</name></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>outw</name> <init>= <expr><call><name>AV_CEIL_RSHIFT</name><argument_list>(<argument><expr><name><name>outlink</name><operator>-&gt;</operator><name>w</name></name></expr></argument>, <argument><expr><name>hsub</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>outh</name> <init>= <expr><call><name>AV_CEIL_RSHIFT</name><argument_list>(<argument><expr><name><name>outlink</name><operator>-&gt;</operator><name>h</name></name></expr></argument>, <argument><expr><name>vsub</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ThreadData</name></type> <name>td</name> <init>= <expr><block>{ <expr><operator>.</operator><name>in</name> <operator>=</operator> <name>in</name></expr>, <expr><operator>.</operator><name>out</name> <operator>=</operator> <name>out</name></expr>,

<expr><operator>.</operator><name>inw</name> <operator>=</operator> <call><name>AV_CEIL_RSHIFT</name><argument_list>(<argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>w</name></name></expr></argument>, <argument><expr><name>hsub</name></expr></argument>)</argument_list></call></expr>,

<expr><operator>.</operator><name>inh</name> <operator>=</operator> <call><name>AV_CEIL_RSHIFT</name><argument_list>(<argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>h</name></name></expr></argument>, <argument><expr><name>vsub</name></expr></argument>)</argument_list></call></expr>,

<expr><operator>.</operator><name>outh</name> <operator>=</operator> <name>outh</name></expr>, <expr><operator>.</operator><name>outw</name> <operator>=</operator> <name>outw</name></expr>,

<expr><operator>.</operator><name>xi</name> <operator>=</operator> <operator>-</operator><operator>(</operator><name>outw</name><operator>-</operator><literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>c</name> <operator>/</operator> <literal type="number">2</literal></expr>, <expr><operator>.</operator><name>yi</name> <operator>=</operator> <operator>(</operator><name>outw</name><operator>-</operator><literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>s</name> <operator>/</operator> <literal type="number">2</literal></expr>,

<expr><operator>.</operator><name>xprime</name> <operator>=</operator> <operator>-</operator><operator>(</operator><name>outh</name><operator>-</operator><literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>s</name> <operator>/</operator> <literal type="number">2</literal></expr>,

<expr><operator>.</operator><name>yprime</name> <operator>=</operator> <operator>-</operator><operator>(</operator><name>outh</name><operator>-</operator><literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>c</name> <operator>/</operator> <literal type="number">2</literal></expr>,

<expr><operator>.</operator><name>plane</name> <operator>=</operator> <name>plane</name></expr>, <expr><operator>.</operator><name>c</name> <operator>=</operator> <name>c</name></expr>, <expr><operator>.</operator><name>s</name> <operator>=</operator> <name>s</name></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name><name>ctx</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>filter_slice</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>td</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><call><name>FFMIN</name><argument_list>(<argument><expr><name>outh</name></expr></argument>, <argument><expr><call><name>ff_filter_get_nb_threads</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>ff_filter_frame</name><argument_list>(<argument><expr><name>outlink</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>process_command</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>args</name></decl></parameter>,

<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>res</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>res_len</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>RotContext</name> <modifier>*</modifier></type><name>rot</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="string">"angle"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="string">"a"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>AVExpr</name> <modifier>*</modifier></type><name>old</name> <init>= <expr><name><name>rot</name><operator>-&gt;</operator><name>angle_expr</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>av_expr_parse</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rot</name><operator>-&gt;</operator><name>angle_expr</name></name></expr></argument>, <argument><expr><name>args</name></expr></argument>, <argument><expr><name>var_names</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"Error when parsing the expression '%s' for angle command\n"</literal></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rot</name><operator>-&gt;</operator><name>angle_expr</name></name> <operator>=</operator> <name>old</name></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_expr_free</name><argument_list>(<argument><expr><name>old</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOSYS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVFilterPad</name></type> <name><name>rotate_inputs</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"default"</literal></expr>,

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,

<expr><operator>.</operator><name>filter_frame</name> <operator>=</operator> <name>filter_frame</name></expr>,

}</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVFilterPad</name></type> <name><name>rotate_outputs</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"default"</literal></expr>,

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,

<expr><operator>.</operator><name>config_props</name> <operator>=</operator> <name>config_props</name></expr>,

}</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFilter</name></type> <name>ff_vf_rotate</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"rotate"</literal></expr>,

<expr><operator>.</operator><name>description</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"Rotate the input image."</literal></expr></argument>)</argument_list></call></expr>,

<expr><operator>.</operator><name>priv_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>RotContext</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>init</name></expr>,

<expr><operator>.</operator><name>uninit</name> <operator>=</operator> <name>uninit</name></expr>,

<expr><operator>.</operator><name>query_formats</name> <operator>=</operator> <name>query_formats</name></expr>,

<expr><operator>.</operator><name>process_command</name> <operator>=</operator> <name>process_command</name></expr>,

<expr><operator>.</operator><name>inputs</name> <operator>=</operator> <name>rotate_inputs</name></expr>,

<expr><operator>.</operator><name>outputs</name> <operator>=</operator> <name>rotate_outputs</name></expr>,

<expr><operator>.</operator><name>priv_class</name> <operator>=</operator> <operator>&amp;</operator><name>rotate_class</name></expr>,

<expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>AVFILTER_FLAG_SUPPORT_TIMELINE_GENERIC</name> <operator>|</operator> <name>AVFILTER_FLAG_SLICE_THREADS</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

</unit>
