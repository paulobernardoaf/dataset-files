

















#ifndef AVFILTER_INTERNAL_H
#define AVFILTER_INTERNAL_H






#include "libavutil/internal.h"
#include "avfilter.h"
#include "formats.h"
#include "framepool.h"
#include "framequeue.h"
#include "thread.h"
#include "version.h"
#include "video.h"
#include "libavcodec/avcodec.h"
#include "libavcodec/internal.h"

typedef struct AVFilterCommand {
    double time;                
    char *command;              
    char *arg;                  
    int flags;
    struct AVFilterCommand *next;
} AVFilterCommand;




void ff_avfilter_graph_update_heap(AVFilterGraph *graph, AVFilterLink *link);




struct AVFilterPad {
    




    const char *name;

    


    enum AVMediaType type;

    





    AVFrame *(*get_video_buffer)(AVFilterLink *link, int w, int h);

    





    AVFrame *(*get_audio_buffer)(AVFilterLink *link, int nb_samples);

    









    int (*filter_frame)(AVFilterLink *link, AVFrame *frame);

    






    int (*request_frame)(AVFilterLink *link);

    













    int (*config_props)(AVFilterLink *link);

    





    int needs_fifo;

    





    int needs_writable;
};

struct AVFilterGraphInternal {
    void *thread;
    avfilter_execute_func *thread_execute;
    FFFrameQueueGlobal frame_queues;
};

struct AVFilterInternal {
    avfilter_execute_func *execute;
};










int ff_fmt_is_in(int fmt, const int *fmts);











av_warn_unused_result
int ff_parse_pixel_format(enum AVPixelFormat *ret, const char *arg, void *log_ctx);









av_warn_unused_result
int ff_parse_sample_rate(int *ret, const char *arg, void *log_ctx);









av_warn_unused_result
int ff_parse_time_base(AVRational *ret, const char *arg, void *log_ctx);









av_warn_unused_result
int ff_parse_sample_format(int *ret, const char *arg, void *log_ctx);











av_warn_unused_result
int ff_parse_channel_layout(int64_t *ret, int *nret, const char *arg,
                            void *log_ctx);

void ff_update_link_current_pts(AVFilterLink *link, int64_t pts);








void ff_avfilter_link_set_in_status(AVFilterLink *link, int status, int64_t pts);





void ff_avfilter_link_set_out_status(AVFilterLink *link, int status, int64_t pts);

void ff_command_queue_pop(AVFilterContext *filter);



#define FF_TPRINTF_START(ctx, func) ff_tlog(NULL, "%-16s: ", #func)

char *ff_get_ref_perms_string(char *buf, size_t buf_size, int perms);

void ff_tlog_ref(void *ctx, AVFrame *ref, int end);

void ff_tlog_link(void *ctx, AVFilterLink *link, int end);















int ff_insert_pad(unsigned idx, unsigned *count, size_t padidx_off,
                   AVFilterPad **pads, AVFilterLink ***links,
                   AVFilterPad *newpad);


static inline int ff_insert_inpad(AVFilterContext *f, unsigned index,
                                   AVFilterPad *p)
{
    return ff_insert_pad(index, &f->nb_inputs, offsetof(AVFilterLink, dstpad),
                  &f->input_pads, &f->inputs, p);
}


static inline int ff_insert_outpad(AVFilterContext *f, unsigned index,
                                    AVFilterPad *p)
{
    return ff_insert_pad(index, &f->nb_outputs, offsetof(AVFilterLink, srcpad),
                  &f->output_pads, &f->outputs, p);
}
































int ff_request_frame(AVFilterLink *link);

#define AVFILTER_DEFINE_CLASS(fname)            static const AVClass fname##_class = {      .class_name = #fname,                   .item_name  = av_default_item_name,     .option     = fname##_options,          .version    = LIBAVUTIL_VERSION_INT,    .category   = AV_CLASS_CATEGORY_FILTER, }













#define FF_INLINK_IDX(link)  ((int)((link)->dstpad - (link)->dst->input_pads))
#define FF_OUTLINK_IDX(link) ((int)((link)->srcpad - (link)->src->output_pads))












int ff_filter_frame(AVFilterLink *link, AVFrame *frame);









AVFilterContext *ff_filter_alloc(const AVFilter *filter, const char *inst_name);

int ff_filter_activate(AVFilterContext *filter);




void ff_filter_graph_remove_filter(AVFilterGraph *graph, AVFilterContext *filter);





#define FF_FILTER_FLAG_HWFRAME_AWARE (1 << 0)




int ff_filter_graph_run_once(AVFilterGraph *graph);






static inline int ff_norm_qscale(int qscale, int type)
{
    switch (type) {
    case FF_QSCALE_TYPE_MPEG1: return qscale;
    case FF_QSCALE_TYPE_MPEG2: return qscale >> 1;
    case FF_QSCALE_TYPE_H264:  return qscale >> 2;
    case FF_QSCALE_TYPE_VP56:  return (63 - qscale + 2) >> 2;
    }
    return qscale;
}





int ff_filter_get_nb_threads(AVFilterContext *ctx);





int ff_filter_process_command(AVFilterContext *ctx, const char *cmd,
                              const char *arg, char *res, int res_len, int flags);














int ff_filter_init_hw_frames(AVFilterContext *avctx, AVFilterLink *link,
                             int default_pool_size);

#endif 
