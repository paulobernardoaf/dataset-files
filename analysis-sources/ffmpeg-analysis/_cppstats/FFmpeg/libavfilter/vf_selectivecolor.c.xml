<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavfilter\vf_selectivecolor.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avassert.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/file.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/intreadwrite.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/opt.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/pixdesc.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavcodec/mathops.h"</cpp:file></cpp:include> 

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avfilter.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"drawutils.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"formats.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"video.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>G</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>B</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>A</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>

<enum>enum <name>color_range</name> <block>{

<decl><name>RANGE_REDS</name></decl>,

<decl><name>RANGE_YELLOWS</name></decl>,

<decl><name>RANGE_GREENS</name></decl>,

<decl><name>RANGE_CYANS</name></decl>,

<decl><name>RANGE_BLUES</name></decl>,

<decl><name>RANGE_MAGENTAS</name></decl>,

<decl><name>RANGE_WHITES</name></decl>,

<decl><name>RANGE_NEUTRALS</name></decl>,

<decl><name>RANGE_BLACKS</name></decl>,

<decl><name>NB_RANGES</name></decl>

}</block>;</enum>

<enum>enum <name>correction_method</name> <block>{

<decl><name>CORRECTION_METHOD_ABSOLUTE</name></decl>,

<decl><name>CORRECTION_METHOD_RELATIVE</name></decl>,

<decl><name>NB_CORRECTION_METHODS</name></decl>,

}</block>;</enum>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>color_names</name><index>[<expr><name>NB_RANGES</name></expr>]</index></name> <init>= <expr><block>{

<expr><literal type="string">"red"</literal></expr>, <expr><literal type="string">"yellow"</literal></expr>, <expr><literal type="string">"green"</literal></expr>, <expr><literal type="string">"cyan"</literal></expr>, <expr><literal type="string">"blue"</literal></expr>, <expr><literal type="string">"magenta"</literal></expr>, <expr><literal type="string">"white"</literal></expr>, <expr><literal type="string">"neutral"</literal></expr>, <expr><literal type="string">"black"</literal></expr>

}</block></expr></init></decl>;</decl_stmt>

<typedef>typedef <function_decl><type><name>int</name></type> (<modifier>*</modifier><name>get_range_scale_func</name>)<parameter_list>(<parameter><decl><type><name>int</name></type> <name>r</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>g</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>min_val</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>max_val</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<struct>struct <name>process_range</name> <block>{

<decl_stmt><decl><type><name>int</name></type> <name>range_id</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>mask</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>get_range_scale_func</name></type> <name>get_scale</name></decl>;</decl_stmt>

}</block>;</struct>

<typedef>typedef <type><struct>struct <name>ThreadData</name> <block>{

<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>in</name></decl>, <modifier>*</modifier><name>out</name>;</decl_stmt>

}</block></struct></type> <name>ThreadData</name>;</typedef>

<typedef>typedef <type><struct>struct <name>SelectiveColorContext</name> <block>{

<decl_stmt><decl><type><specifier>const</specifier> <name>AVClass</name> <modifier>*</modifier></type><name>class</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>correction_method</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name><name>opt_cmyk_adjust</name><index>[<expr><name>NB_RANGES</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name><name>cmyk_adjust</name><index>[<expr><name>NB_RANGES</name></expr>]</index><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>process_range</name></name></type> <name><name>process_ranges</name><index>[<expr><name>NB_RANGES</name></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>nb_process_ranges</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psfile</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>rgba_map</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>is_16bit</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>step</name></decl>;</decl_stmt>

}</block></struct></type> <name>SelectiveColorContext</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OFFSET</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>offsetof(SelectiveColorContext, x)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLAGS</name></cpp:macro> <cpp:value>AV_OPT_FLAG_FILTERING_PARAM|AV_OPT_FLAG_VIDEO_PARAM</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RANGE_OPTION</name><parameter_list>(<parameter><type><name>color_name</name></type></parameter>, <parameter><type><name>range</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ color_name"s", "adjust "color_name" regions", OFFSET(opt_cmyk_adjust[range]), AV_OPT_TYPE_STRING, {.str=NULL}, 0, 0, FLAGS }</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVOption</name></type> <name><name>selectivecolor_options</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><literal type="string">"correction_method"</literal></expr>, <expr><literal type="string">"select correction method"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>correction_method</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>CORRECTION_METHOD_ABSOLUTE</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NB_CORRECTION_METHODS</name><operator>-</operator><literal type="number">1</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"correction_method"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"absolute"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>CORRECTION_METHOD_ABSOLUTE</name></expr>}</block></expr>, <expr><name>INT_MIN</name></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"correction_method"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"relative"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>CORRECTION_METHOD_RELATIVE</name></expr>}</block></expr>, <expr><name>INT_MIN</name></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"correction_method"</literal></expr> }</block></expr>,

<expr><call><name>RANGE_OPTION</name><argument_list>(<argument><expr><literal type="string">"red"</literal></expr></argument>, <argument><expr><name>RANGE_REDS</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>RANGE_OPTION</name><argument_list>(<argument><expr><literal type="string">"yellow"</literal></expr></argument>, <argument><expr><name>RANGE_YELLOWS</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>RANGE_OPTION</name><argument_list>(<argument><expr><literal type="string">"green"</literal></expr></argument>, <argument><expr><name>RANGE_GREENS</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>RANGE_OPTION</name><argument_list>(<argument><expr><literal type="string">"cyan"</literal></expr></argument>, <argument><expr><name>RANGE_CYANS</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>RANGE_OPTION</name><argument_list>(<argument><expr><literal type="string">"blue"</literal></expr></argument>, <argument><expr><name>RANGE_BLUES</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>RANGE_OPTION</name><argument_list>(<argument><expr><literal type="string">"magenta"</literal></expr></argument>, <argument><expr><name>RANGE_MAGENTAS</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>RANGE_OPTION</name><argument_list>(<argument><expr><literal type="string">"white"</literal></expr></argument>, <argument><expr><name>RANGE_WHITES</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>RANGE_OPTION</name><argument_list>(<argument><expr><literal type="string">"neutral"</literal></expr></argument>, <argument><expr><name>RANGE_NEUTRALS</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>RANGE_OPTION</name><argument_list>(<argument><expr><literal type="string">"black"</literal></expr></argument>, <argument><expr><name>RANGE_BLACKS</name></expr></argument>)</argument_list></call></expr>,

<expr><block>{ <expr><literal type="string">"psfile"</literal></expr>, <expr><literal type="string">"set Photoshop selectivecolor file name"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>psfile</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_STRING</name></expr>, <expr><block>{<expr><operator>.</operator><name>str</name><operator>=</operator><name>NULL</name></expr>}</block></expr>, <expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>FLAGS</name></expr> }</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>AVFILTER_DEFINE_CLASS</name><argument_list>(<argument><expr><name>selectivecolor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function><type><specifier>static</specifier> <name>int</name></type> <name>get_rgb_scale</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>r</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>g</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>min_val</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>max_val</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name>max_val</name> <operator>-</operator> <call><name>mid_pred</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>g</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>get_cmy_scale</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>r</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>g</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>min_val</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>max_val</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>mid_pred</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>g</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>min_val</name></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DECLARE_RANGE_SCALE_FUNCS</name><parameter_list>(<parameter><type><name>nbits</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static int get_neutrals_scale##nbits(int r, int g, int b, int min_val, int max_val) { return (((1&lt;&lt;nbits)-1)*2 - ( abs((max_val&lt;&lt;1) - ((1&lt;&lt;nbits)-1)) + abs((min_val&lt;&lt;1) - ((1&lt;&lt;nbits)-1))) + 1) &gt;&gt; 1; } static int get_whites_scale##nbits(int r, int g, int b, int min_val, int max_val) { return (min_val&lt;&lt;1) - ((1&lt;&lt;nbits)-1); } static int get_blacks_scale##nbits(int r, int g, int b, int min_val, int max_val) { return ((1&lt;&lt;nbits)-1) - (max_val&lt;&lt;1); }</cpp:value></cpp:define> 

<macro><name>DECLARE_RANGE_SCALE_FUNCS</name><argument_list>(<argument><literal type="number">8</literal></argument>)</argument_list></macro>

<macro><name>DECLARE_RANGE_SCALE_FUNCS</name><argument_list>(<argument><literal type="number">16</literal></argument>)</argument_list></macro>

<function><type><specifier>static</specifier> <name>int</name></type> <name>register_range</name><parameter_list>(<parameter><decl><type><name>SelectiveColorContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>range_id</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>cmyk</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>cmyk_adjust</name><index>[<expr><name>range_id</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cmyk</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>||</operator> <name><name>cmyk</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>||</operator> <name><name>cmyk</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>||</operator> <name><name>cmyk</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>process_range</name></name> <modifier>*</modifier></type><name>pr</name> <init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>process_ranges</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>nb_process_ranges</name></name><operator>++</operator></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cmyk</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;</operator> <operator>-</operator><literal type="number">1.0</literal> <operator>||</operator> <name><name>cmyk</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;</operator> <literal type="number">1.0</literal> <operator>||</operator>

<name><name>cmyk</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;</operator> <operator>-</operator><literal type="number">1.0</literal> <operator>||</operator> <name><name>cmyk</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&gt;</operator> <literal type="number">1.0</literal> <operator>||</operator>

<name><name>cmyk</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&lt;</operator> <operator>-</operator><literal type="number">1.0</literal> <operator>||</operator> <name><name>cmyk</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&gt;</operator> <literal type="number">1.0</literal> <operator>||</operator>

<name><name>cmyk</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&lt;</operator> <operator>-</operator><literal type="number">1.0</literal> <operator>||</operator> <name><name>cmyk</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&gt;</operator> <literal type="number">1.0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid %s adjustments (%g %g %g %g). "</literal>

<literal type="string">"Settings must be set in [-1;1] range\n"</literal></expr></argument>,

<argument><expr><name><name>color_names</name><index>[<expr><name>range_id</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>cmyk</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>cmyk</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>cmyk</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>cmyk</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>pr</name><operator>-&gt;</operator><name>range_id</name></name> <operator>=</operator> <name>range_id</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pr</name><operator>-&gt;</operator><name>mask</name></name> <operator>=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>range_id</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pr</name><operator>-&gt;</operator><name>mask</name></name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><name>RANGE_REDS</name> <operator>|</operator> <literal type="number">1</literal><operator>&lt;&lt;</operator><name>RANGE_GREENS</name> <operator>|</operator> <literal type="number">1</literal><operator>&lt;&lt;</operator><name>RANGE_BLUES</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>pr</name><operator>-&gt;</operator><name>get_scale</name></name> <operator>=</operator> <name>get_rgb_scale</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>pr</name><operator>-&gt;</operator><name>mask</name></name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><name>RANGE_CYANS</name> <operator>|</operator> <literal type="number">1</literal><operator>&lt;&lt;</operator><name>RANGE_MAGENTAS</name> <operator>|</operator> <literal type="number">1</literal><operator>&lt;&lt;</operator><name>RANGE_YELLOWS</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>pr</name><operator>-&gt;</operator><name>get_scale</name></name> <operator>=</operator> <name>get_cmy_scale</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>is_16bit</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>pr</name><operator>-&gt;</operator><name>mask</name></name> <operator>&amp;</operator> <literal type="number">1</literal><operator>&lt;&lt;</operator><name>RANGE_WHITES</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>pr</name><operator>-&gt;</operator><name>get_scale</name></name> <operator>=</operator> <name>get_whites_scale8</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>is_16bit</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>pr</name><operator>-&gt;</operator><name>mask</name></name> <operator>&amp;</operator> <literal type="number">1</literal><operator>&lt;&lt;</operator><name>RANGE_NEUTRALS</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>pr</name><operator>-&gt;</operator><name>get_scale</name></name> <operator>=</operator> <name>get_neutrals_scale8</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>is_16bit</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>pr</name><operator>-&gt;</operator><name>mask</name></name> <operator>&amp;</operator> <literal type="number">1</literal><operator>&lt;&lt;</operator><name>RANGE_BLACKS</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>pr</name><operator>-&gt;</operator><name>get_scale</name></name> <operator>=</operator> <name>get_blacks_scale8</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>( <expr><name><name>s</name><operator>-&gt;</operator><name>is_16bit</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>pr</name><operator>-&gt;</operator><name>mask</name></name> <operator>&amp;</operator> <literal type="number">1</literal><operator>&lt;&lt;</operator><name>RANGE_WHITES</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>pr</name><operator>-&gt;</operator><name>get_scale</name></name> <operator>=</operator> <name>get_whites_scale16</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>( <expr><name><name>s</name><operator>-&gt;</operator><name>is_16bit</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>pr</name><operator>-&gt;</operator><name>mask</name></name> <operator>&amp;</operator> <literal type="number">1</literal><operator>&lt;&lt;</operator><name>RANGE_NEUTRALS</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>pr</name><operator>-&gt;</operator><name>get_scale</name></name> <operator>=</operator> <name>get_neutrals_scale16</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>( <expr><name><name>s</name><operator>-&gt;</operator><name>is_16bit</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>pr</name><operator>-&gt;</operator><name>mask</name></name> <operator>&amp;</operator> <literal type="number">1</literal><operator>&lt;&lt;</operator><name>RANGE_BLACKS</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>pr</name><operator>-&gt;</operator><name>get_scale</name></name> <operator>=</operator> <name>get_blacks_scale16</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>parse_psfile</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fname</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int16_t</name></type> <name>val</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>version</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SelectiveColorContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>av_file_map</name><argument_list>(<argument><expr><name>fname</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>READ16</name><parameter_list>(<parameter><type><name>dst</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { if (size &lt; 2) { ret = AVERROR_INVALIDDATA; goto end; } dst = AV_RB16(buf); buf += 2; size -= 2; } while (0)</cpp:value></cpp:define>

<expr_stmt><expr><call><name>READ16</name><argument_list>(<argument><expr><name>version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>version</name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Unsupported selective color file version %d, "</literal>

<literal type="string">"the settings might not be loaded properly\n"</literal></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>READ16</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>correction_method</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>cmyk_adjust</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>READ16</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>val</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"%c value of first CMYK entry is not 0 "</literal>

<literal type="string">"but %d\n"</literal></expr></argument>, <argument><expr><literal type="string">"CMYK"</literal><index>[<expr><name>i</name></expr>]</index></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>cmyk_adjust</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>k</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>cmyk_adjust</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>READ16</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>cmyk_adjust</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <name>val</name> <operator>/</operator> <literal type="number">100.</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>register_range</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>end</name>;</goto></block_content></block></if></if_stmt>

</block_content>}</block></for>

<label><name>end</name>:</label>

<expr_stmt><expr><call><name>av_file_unmap</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>config_input</name><parameter_list>(<parameter><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>inlink</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>inlink</name><operator>-&gt;</operator><name>dst</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SelectiveColorContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>AVPixFmtDescriptor</name> <modifier>*</modifier></type><name>desc</name> <init>= <expr><call><name>av_pix_fmt_desc_get</name><argument_list>(<argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>format</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>is_16bit</name></name> <operator>=</operator> <name><name>desc</name><operator>-&gt;</operator><name>comp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>depth</name> <operator>&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>step</name></name> <operator>=</operator> <call><name>av_get_padded_bits_per_pixel</name><argument_list>(<argument><expr><name>desc</name></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <operator>(</operator><literal type="number">3</literal> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>is_16bit</name></name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_fill_rgba_map</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>rgba_map</name></name></expr></argument>, <argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>format</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>cmyk_adjust</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">10</literal> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>cmyk_adjust</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>psfile</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>parse_psfile</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>psfile</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>opt_cmyk_adjust</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>opt_cmyk_adjust</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>opt_cmyk_adjust</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>opt_cmyk_adjust</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>cmyk</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>cmyk_adjust</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>sscanf</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>opt_cmyk_adjust</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"%f %f %f %f"</literal></expr></argument>, <argument><expr><name>cmyk</name></expr></argument>, <argument><expr><name>cmyk</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>cmyk</name><operator>+</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>cmyk</name><operator>+</operator><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>register_range</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_VERBOSE</name></expr></argument>, <argument><expr><literal type="string">"Adjustments:%s\n"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>nb_process_ranges</name></name></expr> ?</condition><then> <expr><literal type="string">""</literal></expr> </then><else>: <expr><literal type="string">" none"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>nb_process_ranges</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>process_range</name></name> <modifier>*</modifier></type><name>pr</name> <init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>process_ranges</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>cmyk</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>cmyk_adjust</name><index>[<expr><name><name>pr</name><operator>-&gt;</operator><name>range_id</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_VERBOSE</name></expr></argument>, <argument><expr><literal type="string">"%8ss: C=%6g M=%6g Y=%6g K=%6g\n"</literal></expr></argument>,

<argument><expr><name><name>color_names</name><index>[<expr><name><name>pr</name><operator>-&gt;</operator><name>range_id</name></name></expr>]</index></name></expr></argument>, <argument><expr><name><name>cmyk</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>cmyk</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>cmyk</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>cmyk</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>query_formats</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>enum</name> <name>AVPixelFormat</name></name></type> <name><name>pix_fmts</name><index>[]</index></name> <init>= <expr><block>{

<expr><name>AV_PIX_FMT_RGB24</name></expr>, <expr><name>AV_PIX_FMT_BGR24</name></expr>,

<expr><name>AV_PIX_FMT_RGBA</name></expr>, <expr><name>AV_PIX_FMT_BGRA</name></expr>,

<expr><name>AV_PIX_FMT_ARGB</name></expr>, <expr><name>AV_PIX_FMT_ABGR</name></expr>,

<expr><name>AV_PIX_FMT_0RGB</name></expr>, <expr><name>AV_PIX_FMT_0BGR</name></expr>,

<expr><name>AV_PIX_FMT_RGB0</name></expr>, <expr><name>AV_PIX_FMT_BGR0</name></expr>,

<expr><name>AV_PIX_FMT_RGB48</name></expr>, <expr><name>AV_PIX_FMT_BGR48</name></expr>,

<expr><name>AV_PIX_FMT_RGBA64</name></expr>, <expr><name>AV_PIX_FMT_BGRA64</name></expr>,

<expr><name>AV_PIX_FMT_NONE</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFilterFormats</name> <modifier>*</modifier></type><name>fmts_list</name> <init>= <expr><call><name>ff_make_format_list</name><argument_list>(<argument><expr><name>pix_fmts</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>fmts_list</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>ff_set_common_formats</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>fmts_list</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>comp_adjust</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>scale</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>value</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>adjust</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>k</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>correction_method</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>min</name> <init>= <expr><operator>-</operator><name>value</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>max</name> <init>= <expr><literal type="number">1.</literal> <operator>-</operator> <name>value</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>res</name> <init>= <expr><operator>(</operator><operator>-</operator><literal type="number">1.</literal> <operator>-</operator> <name>adjust</name><operator>)</operator> <operator>*</operator> <name>k</name> <operator>-</operator> <name>adjust</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>correction_method</name> <operator>==</operator> <name>CORRECTION_METHOD_RELATIVE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>res</name> <operator>*=</operator> <name>max</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><call><name>lrint</name><argument_list>(<argument><expr><call><name>av_clipf</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>min</name></expr></argument>, <argument><expr><name>max</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>scale</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DECLARE_SELECTIVE_COLOR_FUNC</name><parameter_list>(<parameter><type><name>nbits</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static inline int selective_color_##nbits(AVFilterContext *ctx, ThreadData *td, int jobnr, int nb_jobs, int direct, int correction_method) { int i, x, y; const AVFrame *in = td-&gt;in; AVFrame *out = td-&gt;out; const SelectiveColorContext *s = ctx-&gt;priv; const int height = in-&gt;height; const int width = in-&gt;width; const int slice_start = (height * jobnr ) / nb_jobs; const int slice_end = (height * (jobnr+1)) / nb_jobs; const int dst_linesize = out-&gt;linesize[0]; const int src_linesize = in-&gt;linesize[0]; const uint8_t roffset = s-&gt;rgba_map[R]; const uint8_t goffset = s-&gt;rgba_map[G]; const uint8_t boffset = s-&gt;rgba_map[B]; const uint8_t aoffset = s-&gt;rgba_map[A]; for (y = slice_start; y &lt; slice_end; y++) { uint##nbits##_t *dst = ( uint##nbits##_t *)(out-&gt;data[0] + y * dst_linesize); const uint##nbits##_t *src = (const uint##nbits##_t *)( in-&gt;data[0] + y * src_linesize); for (x = 0; x &lt; width * s-&gt;step; x += s-&gt;step) { const int r = src[x + roffset]; const int g = src[x + goffset]; const int b = src[x + boffset]; const int min_color = FFMIN3(r, g, b); const int max_color = FFMAX3(r, g, b); const int is_white = (r &gt; 1&lt;&lt;(nbits-1) &amp;&amp; g &gt; 1&lt;&lt;(nbits-1) &amp;&amp; b &gt; 1&lt;&lt;(nbits-1)); const int is_neutral = (r || g || b) &amp;&amp; (r != (1&lt;&lt;nbits)-1 || g != (1&lt;&lt;nbits)-1 || b != (1&lt;&lt;nbits)-1); const int is_black = (r &lt; 1&lt;&lt;(nbits-1) &amp;&amp; g &lt; 1&lt;&lt;(nbits-1) &amp;&amp; b &lt; 1&lt;&lt;(nbits-1)); const uint32_t range_flag = (r == max_color) &lt;&lt; RANGE_REDS | (r == min_color) &lt;&lt; RANGE_CYANS | (g == max_color) &lt;&lt; RANGE_GREENS | (g == min_color) &lt;&lt; RANGE_MAGENTAS | (b == max_color) &lt;&lt; RANGE_BLUES | (b == min_color) &lt;&lt; RANGE_YELLOWS | is_white &lt;&lt; RANGE_WHITES | is_neutral &lt;&lt; RANGE_NEUTRALS | is_black &lt;&lt; RANGE_BLACKS; const float rnorm = r * (1.f / ((1&lt;&lt;nbits)-1)); const float gnorm = g * (1.f / ((1&lt;&lt;nbits)-1)); const float bnorm = b * (1.f / ((1&lt;&lt;nbits)-1)); int adjust_r = 0, adjust_g = 0, adjust_b = 0; for (i = 0; i &lt; s-&gt;nb_process_ranges; i++) { const struct process_range *pr = &amp;s-&gt;process_ranges[i]; if (range_flag &amp; pr-&gt;mask) { const int scale = pr-&gt;get_scale(r, g, b, min_color, max_color); if (scale &gt; 0) { const float *cmyk_adjust = s-&gt;cmyk_adjust[pr-&gt;range_id]; const float adj_c = cmyk_adjust[0]; const float adj_m = cmyk_adjust[1]; const float adj_y = cmyk_adjust[2]; const float k = cmyk_adjust[3]; adjust_r += comp_adjust(scale, rnorm, adj_c, k, correction_method); adjust_g += comp_adjust(scale, gnorm, adj_m, k, correction_method); adjust_b += comp_adjust(scale, bnorm, adj_y, k, correction_method); } } } if (!direct || adjust_r || adjust_g || adjust_b) { dst[x + roffset] = av_clip_uint##nbits(r + adjust_r); dst[x + goffset] = av_clip_uint##nbits(g + adjust_g); dst[x + boffset] = av_clip_uint##nbits(b + adjust_b); if (!direct &amp;&amp; s-&gt;step == 4) dst[x + aoffset] = src[x + aoffset]; } } } return 0; }</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEF_SELECTIVE_COLOR_FUNC</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>direct</name></type></parameter>, <parameter><type><name>correction_method</name></type></parameter>, <parameter><type><name>nbits</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static int selective_color_##name##_##nbits(AVFilterContext *ctx, void *arg, int jobnr, int nb_jobs) { return selective_color_##nbits(ctx, arg, jobnr, nb_jobs, direct, correction_method); }</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEF_SELECTIVE_COLOR_FUNCS</name><parameter_list>(<parameter><type><name>nbits</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>DECLARE_SELECTIVE_COLOR_FUNC(nbits) DEF_SELECTIVE_COLOR_FUNC(indirect_absolute, 0, CORRECTION_METHOD_ABSOLUTE, nbits) DEF_SELECTIVE_COLOR_FUNC(indirect_relative, 0, CORRECTION_METHOD_RELATIVE, nbits) DEF_SELECTIVE_COLOR_FUNC( direct_absolute, 1, CORRECTION_METHOD_ABSOLUTE, nbits) DEF_SELECTIVE_COLOR_FUNC( direct_relative, 1, CORRECTION_METHOD_RELATIVE, nbits)</cpp:value></cpp:define>

<macro><name>DEF_SELECTIVE_COLOR_FUNCS</name><argument_list>(<argument><literal type="number">8</literal></argument>)</argument_list></macro>

<macro><name>DEF_SELECTIVE_COLOR_FUNCS</name><argument_list>(<argument><literal type="number">16</literal></argument>)</argument_list></macro>

<typedef>typedef <function_decl><type><name>int</name></type> (<modifier>*</modifier><name>selective_color_func_type</name>)<parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>td</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>jobnr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nb_jobs</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<function><type><specifier>static</specifier> <name>int</name></type> <name>filter_frame</name><parameter_list>(<parameter><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>inlink</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>in</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>inlink</name><operator>-&gt;</operator><name>dst</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>outlink</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>outputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>direct</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>out</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ThreadData</name></type> <name>td</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>SelectiveColorContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>selective_color_func_type</name></type> <name><name>funcs</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{

<expr><block>{

<expr><block>{<expr><name>selective_color_indirect_absolute_8</name></expr>, <expr><name>selective_color_indirect_relative_8</name></expr>}</block></expr>,

<expr><block>{<expr><name>selective_color_direct_absolute_8</name></expr>, <expr><name>selective_color_direct_relative_8</name></expr>}</block></expr>,

}</block></expr>,<expr><block>{

<expr><block>{<expr><name>selective_color_indirect_absolute_16</name></expr>, <expr><name>selective_color_indirect_relative_16</name></expr>}</block></expr>,

<expr><block>{<expr><name>selective_color_direct_absolute_16</name></expr>, <expr><name>selective_color_direct_relative_16</name></expr>}</block></expr>,

}</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>av_frame_is_writable</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>direct</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>out</name> <operator>=</operator> <name>in</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>direct</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>out</name> <operator>=</operator> <call><name>ff_get_video_buffer</name><argument_list>(<argument><expr><name>outlink</name></expr></argument>, <argument><expr><name><name>outlink</name><operator>-&gt;</operator><name>w</name></name></expr></argument>, <argument><expr><name><name>outlink</name><operator>-&gt;</operator><name>h</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>out</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_frame_copy_props</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>td</name><operator>.</operator><name>in</name></name> <operator>=</operator> <name>in</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>td</name><operator>.</operator><name>out</name></name> <operator>=</operator> <name>out</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>ctx</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name><name>funcs</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>is_16bit</name></name></expr>]</index><index>[<expr><name>direct</name></expr>]</index><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>correction_method</name></name></expr>]</index></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>td</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><call><name>FFMIN</name><argument_list>(<argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>h</name></name></expr></argument>, <argument><expr><call><name>ff_filter_get_nb_threads</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>direct</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><call><name>ff_filter_frame</name><argument_list>(<argument><expr><name>outlink</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVFilterPad</name></type> <name><name>selectivecolor_inputs</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"default"</literal></expr>,

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,

<expr><operator>.</operator><name>filter_frame</name> <operator>=</operator> <name>filter_frame</name></expr>,

<expr><operator>.</operator><name>config_props</name> <operator>=</operator> <name>config_input</name></expr>,

}</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVFilterPad</name></type> <name><name>selectivecolor_outputs</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"default"</literal></expr>,

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,

}</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFilter</name></type> <name>ff_vf_selectivecolor</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"selectivecolor"</literal></expr>,

<expr><operator>.</operator><name>description</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"Apply CMYK adjustments to specific color ranges."</literal></expr></argument>)</argument_list></call></expr>,

<expr><operator>.</operator><name>priv_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SelectiveColorContext</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><operator>.</operator><name>query_formats</name> <operator>=</operator> <name>query_formats</name></expr>,

<expr><operator>.</operator><name>inputs</name> <operator>=</operator> <name>selectivecolor_inputs</name></expr>,

<expr><operator>.</operator><name>outputs</name> <operator>=</operator> <name>selectivecolor_outputs</name></expr>,

<expr><operator>.</operator><name>priv_class</name> <operator>=</operator> <operator>&amp;</operator><name>selectivecolor_class</name></expr>,

<expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>AVFILTER_FLAG_SUPPORT_TIMELINE_GENERIC</name> <operator>|</operator> <name>AVFILTER_FLAG_SLICE_THREADS</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

</unit>
