<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavfilter\af_agate.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/audio_fifo.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avassert.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/channel_layout.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/opt.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avfilter.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"audio.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"filters.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"formats.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"hermite.h"</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct <name>AudioGateContext</name> <block>{

<decl_stmt><decl><type><specifier>const</specifier> <name>AVClass</name> <modifier>*</modifier></type><name>class</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>level_in</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>level_sc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>attack</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>release</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>threshold</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>ratio</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>knee</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>makeup</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>range</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>link</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>detection</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>mode</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>thres</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>knee_start</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>knee_stop</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>lin_knee_start</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>lin_knee_stop</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>lin_slope</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>attack_coeff</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>release_coeff</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVAudioFifo</name> <modifier>*</modifier></type><name><name>fifo</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>pts</name></decl>;</decl_stmt>

}</block></struct></type> <name>AudioGateContext</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OFFSET</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>offsetof(AudioGateContext, x)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>A</name></cpp:macro> <cpp:value>AV_OPT_FLAG_AUDIO_PARAM|AV_OPT_FLAG_FILTERING_PARAM</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVOption</name></type> <name><name>options</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><literal type="string">"level_in"</literal></expr>, <expr><literal type="string">"set input level"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>level_in</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_DOUBLE</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name><operator>=</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><literal type="number">0.015625</literal></expr>, <expr><literal type="number">64</literal></expr>, <expr><name>A</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"mode"</literal></expr>, <expr><literal type="string">"set mode"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">0</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>A</name></expr>, <expr><literal type="string">"mode"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"downward"</literal></expr>,<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">0</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>A</name></expr>, <expr><literal type="string">"mode"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"upward"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>A</name></expr>, <expr><literal type="string">"mode"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"range"</literal></expr>, <expr><literal type="string">"set max gain reduction"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>range</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_DOUBLE</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name><operator>=</operator><literal type="number">0.06125</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>A</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"threshold"</literal></expr>, <expr><literal type="string">"set threshold"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>threshold</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_DOUBLE</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name><operator>=</operator><literal type="number">0.125</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>A</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"ratio"</literal></expr>, <expr><literal type="string">"set ratio"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>ratio</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_DOUBLE</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name><operator>=</operator><literal type="number">2</literal></expr>}</block></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">9000</literal></expr>, <expr><name>A</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"attack"</literal></expr>, <expr><literal type="string">"set attack"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>attack</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_DOUBLE</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name><operator>=</operator><literal type="number">20</literal></expr>}</block></expr>, <expr><literal type="number">0.01</literal></expr>, <expr><literal type="number">9000</literal></expr>, <expr><name>A</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"release"</literal></expr>, <expr><literal type="string">"set release"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>release</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_DOUBLE</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name><operator>=</operator><literal type="number">250</literal></expr>}</block></expr>, <expr><literal type="number">0.01</literal></expr>, <expr><literal type="number">9000</literal></expr>, <expr><name>A</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"makeup"</literal></expr>, <expr><literal type="string">"set makeup gain"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>makeup</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_DOUBLE</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name><operator>=</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">64</literal></expr>, <expr><name>A</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"knee"</literal></expr>, <expr><literal type="string">"set knee"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>knee</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_DOUBLE</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name><operator>=</operator><literal type="number">2.828427125</literal></expr>}</block></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><name>A</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"detection"</literal></expr>, <expr><literal type="string">"set detection"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>detection</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>A</name></expr>, <expr><literal type="string">"detection"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"peak"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">0</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>A</name></expr>, <expr><literal type="string">"detection"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"rms"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>A</name></expr>, <expr><literal type="string">"detection"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"link"</literal></expr>, <expr><literal type="string">"set link"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>link</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">0</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>A</name></expr>, <expr><literal type="string">"link"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"average"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">0</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>A</name></expr>, <expr><literal type="string">"link"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"maximum"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>A</name></expr>, <expr><literal type="string">"link"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"level_sc"</literal></expr>, <expr><literal type="string">"set sidechain gain"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>level_sc</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_DOUBLE</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name><operator>=</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><literal type="number">0.015625</literal></expr>, <expr><literal type="number">64</literal></expr>, <expr><name>A</name></expr> }</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int</name></type> <name>agate_config_input</name><parameter_list>(<parameter><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>inlink</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>inlink</name><operator>-&gt;</operator><name>dst</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AudioGateContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>lin_threshold</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>threshold</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>lin_knee_sqrt</name> <init>= <expr><call><name>sqrt</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>knee</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>detection</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>lin_threshold</name> <operator>*=</operator> <name>lin_threshold</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>attack_coeff</name></name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><literal type="number">1.</literal></expr></argument>, <argument><expr><literal type="number">1.</literal> <operator>/</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>attack</name></name> <operator>*</operator> <name><name>inlink</name><operator>-&gt;</operator><name>sample_rate</name></name> <operator>/</operator> <literal type="number">4000.</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>release_coeff</name></name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><literal type="number">1.</literal></expr></argument>, <argument><expr><literal type="number">1.</literal> <operator>/</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>release</name></name> <operator>*</operator> <name><name>inlink</name><operator>-&gt;</operator><name>sample_rate</name></name> <operator>/</operator> <literal type="number">4000.</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>lin_knee_stop</name></name> <operator>=</operator> <name>lin_threshold</name> <operator>*</operator> <name>lin_knee_sqrt</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>lin_knee_start</name></name> <operator>=</operator> <name>lin_threshold</name> <operator>/</operator> <name>lin_knee_sqrt</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>thres</name></name> <operator>=</operator> <call><name>log</name><argument_list>(<argument><expr><name>lin_threshold</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>knee_start</name></name> <operator>=</operator> <call><name>log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>lin_knee_start</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>knee_stop</name></name> <operator>=</operator> <call><name>log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>lin_knee_stop</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FAKE_INFINITY</name></cpp:macro> <cpp:value>(65536.0 * 65536.0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_FAKE_INFINITY</name><parameter_list>(<parameter><type><name>value</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(fabs(value-FAKE_INFINITY) &lt; 1.0)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>double</name></type> <name>output_gain</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>lin_slope</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>ratio</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>thres</name></decl></parameter>,

<parameter><decl><type><name>double</name></type> <name>knee</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>knee_start</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>knee_stop</name></decl></parameter>,

<parameter><decl><type><name>double</name></type> <name>range</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>double</name></type> <name>slope</name> <init>= <expr><call><name>log</name><argument_list>(<argument><expr><name>lin_slope</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>tratio</name> <init>= <expr><name>ratio</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>gain</name> <init>= <expr><literal type="number">0.</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>delta</name> <init>= <expr><literal type="number">0.</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>IS_FAKE_INFINITY</name><argument_list>(<argument><expr><name>ratio</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>tratio</name> <operator>=</operator> <literal type="number">1000.</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>gain</name> <operator>=</operator> <operator>(</operator><name>slope</name> <operator>-</operator> <name>thres</name><operator>)</operator> <operator>*</operator> <name>tratio</name> <operator>+</operator> <name>thres</name></expr>;</expr_stmt>

<expr_stmt><expr><name>delta</name> <operator>=</operator> <name>tratio</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>mode</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>knee</name> <operator>&gt;</operator> <literal type="number">1.</literal> <operator>&amp;&amp;</operator> <name>slope</name> <operator>&lt;</operator> <name>knee_stop</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>gain</name> <operator>=</operator> <call><name>hermite_interpolation</name><argument_list>(<argument><expr><name>slope</name></expr></argument>, <argument><expr><name>knee_stop</name></expr></argument>, <argument><expr><name>knee_start</name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>knee_stop</name> <operator>-</operator> <name>thres</name><operator>)</operator> <operator>*</operator> <name>tratio</name> <operator>+</operator> <name>thres</name><operator>)</operator></expr></argument>, <argument><expr><name>knee_start</name></expr></argument>, <argument><expr><name>delta</name></expr></argument>, <argument><expr><literal type="number">1.</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>knee</name> <operator>&gt;</operator> <literal type="number">1.</literal> <operator>&amp;&amp;</operator> <name>slope</name> <operator>&gt;</operator> <name>knee_start</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>gain</name> <operator>=</operator> <call><name>hermite_interpolation</name><argument_list>(<argument><expr><name>slope</name></expr></argument>, <argument><expr><name>knee_start</name></expr></argument>, <argument><expr><name>knee_stop</name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>knee_start</name> <operator>-</operator> <name>thres</name><operator>)</operator> <operator>*</operator> <name>tratio</name> <operator>+</operator> <name>thres</name><operator>)</operator></expr></argument>, <argument><expr><name>knee_stop</name></expr></argument>, <argument><expr><name>delta</name></expr></argument>, <argument><expr><literal type="number">1.</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><call><name>FFMAX</name><argument_list>(<argument><expr><name>range</name></expr></argument>, <argument><expr><call><name>exp</name><argument_list>(<argument><expr><name>gain</name> <operator>-</operator> <name>slope</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>gate</name><parameter_list>(<parameter><decl><type><name>AudioGateContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>double</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>double</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>double</name> <modifier>*</modifier></type><name>scsrc</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>nb_samples</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>level_in</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>level_sc</name></decl></parameter>,

<parameter><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>inlink</name></decl></parameter>, <parameter><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>sclink</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>double</name></type> <name>makeup</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>makeup</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>double</name></type> <name>attack_coeff</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>attack_coeff</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>double</name></type> <name>release_coeff</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>release_coeff</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>c</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name>nb_samples</name></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr><operator>,</operator> <expr><name>src</name> <operator>+=</operator> <name><name>inlink</name><operator>-&gt;</operator><name>channels</name></name></expr><operator>,</operator> <expr><name>dst</name> <operator>+=</operator> <name><name>inlink</name><operator>-&gt;</operator><name>channels</name></name></expr><operator>,</operator> <expr><name>scsrc</name> <operator>+=</operator> <name><name>sclink</name><operator>-&gt;</operator><name>channels</name></name></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>double</name></type> <name>abs_sample</name> <init>= <expr><call><name>fabs</name><argument_list>(<argument><expr><name><name>scsrc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name>level_sc</name></expr></argument>)</argument_list></call></expr></init></decl>, <decl><type ref="prev"/><name>gain</name> <init>= <expr><literal type="number">1.0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>detected</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>link</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>c</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>c</name> <operator>&lt;</operator> <name><name>sclink</name><operator>-&gt;</operator><name>channels</name></name></expr>;</condition> <incr><expr><name>c</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name>abs_sample</name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><call><name>fabs</name><argument_list>(<argument><expr><name><name>scsrc</name><index>[<expr><name>c</name></expr>]</index></name> <operator>*</operator> <name>level_sc</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>abs_sample</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></if> <else>else <block>{<block_content>

<for>for <control>(<init><expr><name>c</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>c</name> <operator>&lt;</operator> <name><name>sclink</name><operator>-&gt;</operator><name>channels</name></name></expr>;</condition> <incr><expr><name>c</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name>abs_sample</name> <operator>+=</operator> <call><name>fabs</name><argument_list>(<argument><expr><name><name>scsrc</name><index>[<expr><name>c</name></expr>]</index></name> <operator>*</operator> <name>level_sc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>abs_sample</name> <operator>/=</operator> <name><name>sclink</name><operator>-&gt;</operator><name>channels</name></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>detection</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>abs_sample</name> <operator>*=</operator> <name>abs_sample</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>lin_slope</name></name> <operator>+=</operator> <operator>(</operator><name>abs_sample</name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>lin_slope</name></name><operator>)</operator> <operator>*</operator> <operator>(</operator><ternary><condition><expr><name>abs_sample</name> <operator>&gt;</operator> <name><name>s</name><operator>-&gt;</operator><name>lin_slope</name></name></expr> ?</condition><then> <expr><name>attack_coeff</name></expr> </then><else>: <expr><name>release_coeff</name></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>mode</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>detected</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>lin_slope</name></name> <operator>&gt;</operator> <name><name>s</name><operator>-&gt;</operator><name>lin_knee_start</name></name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>detected</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>lin_slope</name></name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>lin_knee_stop</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>lin_slope</name></name> <operator>&gt;</operator> <literal type="number">0.0</literal> <operator>&amp;&amp;</operator> <name>detected</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>gain</name> <operator>=</operator> <call><name>output_gain</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>lin_slope</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>ratio</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>thres</name></name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>knee</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>knee_start</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>knee_stop</name></name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>range</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>mode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>c</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>c</name> <operator>&lt;</operator> <name><name>inlink</name><operator>-&gt;</operator><name>channels</name></name></expr>;</condition> <incr><expr><name>c</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>dst</name><index>[<expr><name>c</name></expr>]</index></name> <operator>=</operator> <name><name>src</name><index>[<expr><name>c</name></expr>]</index></name> <operator>*</operator> <name>level_in</name> <operator>*</operator> <name>gain</name> <operator>*</operator> <name>makeup</name></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></for>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_AGATE_FILTER</name></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>agate_options</name></cpp:macro> <cpp:value>options</cpp:value></cpp:define>

<expr_stmt><expr><call><name>AVFILTER_DEFINE_CLASS</name><argument_list>(<argument><expr><name>agate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function><type><specifier>static</specifier> <name>int</name></type> <name>query_formats</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVFilterFormats</name> <modifier>*</modifier></type><name>formats</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFilterChannelLayouts</name> <modifier>*</modifier></type><name>layouts</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_add_format</name><argument_list>(<argument><expr><operator>&amp;</operator><name>formats</name></expr></argument>, <argument><expr><name>AV_SAMPLE_FMT_DBL</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_set_common_formats</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>formats</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>layouts</name> <operator>=</operator> <call><name>ff_all_channel_counts</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>layouts</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_set_common_channel_layouts</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>layouts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>formats</name> <operator>=</operator> <call><name>ff_all_samplerates</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>formats</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>ff_set_common_samplerates</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>formats</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>filter_frame</name><parameter_list>(<parameter><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>inlink</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>in</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>double</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>double</name> <operator>*</operator><operator>)</operator><name><name>in</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>inlink</name><operator>-&gt;</operator><name>dst</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>outlink</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>outputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AudioGateContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>out</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name> <modifier>*</modifier></type><name>dst</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>av_frame_is_writable</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>out</name> <operator>=</operator> <name>in</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>out</name> <operator>=</operator> <call><name>ff_get_audio_buffer</name><argument_list>(<argument><expr><name>outlink</name></expr></argument>, <argument><expr><name><name>in</name><operator>-&gt;</operator><name>nb_samples</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>out</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_frame_copy_props</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>dst</name> <operator>=</operator> <operator>(</operator><name>double</name> <operator>*</operator><operator>)</operator><name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gate</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name><name>in</name><operator>-&gt;</operator><name>nb_samples</name></name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>level_in</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>level_in</name></name></expr></argument>, <argument><expr><name>inlink</name></expr></argument>, <argument><expr><name>inlink</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>out</name> <operator>!=</operator> <name>in</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><call><name>ff_filter_frame</name><argument_list>(<argument><expr><name>outlink</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVFilterPad</name></type> <name><name>inputs</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"default"</literal></expr>,

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_AUDIO</name></expr>,

<expr><operator>.</operator><name>filter_frame</name> <operator>=</operator> <name>filter_frame</name></expr>,

<expr><operator>.</operator><name>config_props</name> <operator>=</operator> <name>agate_config_input</name></expr>,

}</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVFilterPad</name></type> <name><name>outputs</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"default"</literal></expr>,

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_AUDIO</name></expr>,

}</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFilter</name></type> <name>ff_af_agate</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"agate"</literal></expr>,

<expr><operator>.</operator><name>description</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"Audio gate."</literal></expr></argument>)</argument_list></call></expr>,

<expr><operator>.</operator><name>query_formats</name> <operator>=</operator> <name>query_formats</name></expr>,

<expr><operator>.</operator><name>priv_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>AudioGateContext</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><operator>.</operator><name>priv_class</name> <operator>=</operator> <operator>&amp;</operator><name>agate_class</name></expr>,

<expr><operator>.</operator><name>inputs</name> <operator>=</operator> <name>inputs</name></expr>,

<expr><operator>.</operator><name>outputs</name> <operator>=</operator> <name>outputs</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_SIDECHAINGATE_FILTER</name></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sidechaingate_options</name></cpp:macro> <cpp:value>options</cpp:value></cpp:define>

<expr_stmt><expr><call><name>AVFILTER_DEFINE_CLASS</name><argument_list>(<argument><expr><name>sidechaingate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function><type><specifier>static</specifier> <name>int</name></type> <name>activate</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AudioGateContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>out</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name><name>in</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{ <expr><name>NULL</name></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>nb_samples</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name> <modifier>*</modifier></type><name>dst</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>FF_FILTER_FORWARD_STATUS_BACK_ALL</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>outputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_inlink_consume_frame</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>inputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>in</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_audio_fifo_write</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>fifo</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><name><name>in</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>extended_data</name></expr></argument>,

<argument><expr><name><name>in</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>nb_samples</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>in</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_inlink_consume_frame</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>inputs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>in</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_audio_fifo_write</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>fifo</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><name><name>in</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>extended_data</name></expr></argument>,

<argument><expr><name><name>in</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>nb_samples</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>in</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>nb_samples</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><call><name>av_audio_fifo_size</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>fifo</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>av_audio_fifo_size</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>fifo</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>nb_samples</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>out</name> <operator>=</operator> <call><name>ff_get_audio_buffer</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>outputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>nb_samples</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>out</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>in</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>ff_get_audio_buffer</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>inputs</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>nb_samples</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>in</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>in</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>in</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_audio_fifo_read</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>fifo</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><name><name>in</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>data</name></expr></argument>, <argument><expr><name>nb_samples</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>dst</name> <operator>=</operator> <operator>(</operator><name>double</name> <operator>*</operator><operator>)</operator><name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>pts</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>pts</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>pts</name></name> <operator>+=</operator> <macro><name>av_rescale_q</name><argument_list>(<argument>nb_samples</argument>, <argument>(AVRational){<literal type="number">1</literal></argument>, <argument>ctx-&gt;outputs[<literal type="number">0</literal>]-&gt;sample_rate}</argument>, <argument>ctx-&gt;outputs[<literal type="number">0</literal>]-&gt;time_base</argument>)</argument_list></macro></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gate</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>(</operator><name>double</name> <operator>*</operator><operator>)</operator><name><name>in</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>dst</name></expr></argument>,

<argument><expr><operator>(</operator><name>double</name> <operator>*</operator><operator>)</operator><name><name>in</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>nb_samples</name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>level_in</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>level_sc</name></name></expr></argument>,

<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>inputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>inputs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>in</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>in</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_filter_frame</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>outputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>FF_FILTER_FORWARD_STATUS</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>inputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>outputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>FF_FILTER_FORWARD_STATUS</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>inputs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>outputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ff_outlink_frame_wanted</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>outputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>av_audio_fifo_size</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>fifo</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ff_inlink_request_frame</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>inputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>av_audio_fifo_size</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>fifo</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ff_inlink_request_frame</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>inputs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>scquery_formats</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVFilterFormats</name> <modifier>*</modifier></type><name>formats</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFilterChannelLayouts</name> <modifier>*</modifier></type><name>layouts</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>enum</name> <name>AVSampleFormat</name></name></type> <name><name>sample_fmts</name><index>[]</index></name> <init>= <expr><block>{

<expr><name>AV_SAMPLE_FMT_DBL</name></expr>,

<expr><name>AV_SAMPLE_FMT_NONE</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>inputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>in_channel_layouts</name> <operator>||</operator>

<operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>inputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name><name>in_channel_layouts</name><operator>-&gt;</operator><name>nb_channel_layouts</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>,

<argument><expr><literal type="string">"No channel layout for input 1\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EAGAIN</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_add_channel_layout</name><argument_list>(<argument><expr><operator>&amp;</operator><name>layouts</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>inputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name><name>in_channel_layouts</name><operator>-&gt;</operator><name>channel_layouts</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator>

<operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_channel_layouts_ref</name><argument_list>(<argument><expr><name>layouts</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>outputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>in_channel_layouts</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>layouts</name> <operator>=</operator> <call><name>ff_all_channel_counts</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_channel_layouts_ref</name><argument_list>(<argument><expr><name>layouts</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>inputs</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>out_channel_layouts</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>formats</name> <operator>=</operator> <call><name>ff_make_format_list</name><argument_list>(<argument><expr><name>sample_fmts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_set_common_formats</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>formats</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>formats</name> <operator>=</operator> <call><name>ff_all_samplerates</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>ff_set_common_samplerates</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>formats</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>scconfig_output</name><parameter_list>(<parameter><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>outlink</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>outlink</name><operator>-&gt;</operator><name>src</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AudioGateContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>inputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>sample_rate</name> <operator>!=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>inputs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>sample_rate</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"Inputs must have the same sample rate "</literal>

<literal type="string">"%d for in0 vs %d for in1\n"</literal></expr></argument>,

<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>inputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>sample_rate</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>inputs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>sample_rate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>outlink</name><operator>-&gt;</operator><name>sample_rate</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>inputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>sample_rate</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>outlink</name><operator>-&gt;</operator><name>time_base</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>inputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>time_base</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>outlink</name><operator>-&gt;</operator><name>channel_layout</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>inputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>channel_layout</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>outlink</name><operator>-&gt;</operator><name>channels</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>inputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>channels</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>fifo</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>av_audio_fifo_alloc</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>inputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>format</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>inputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>channels</name></expr></argument>, <argument><expr><literal type="number">1024</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>fifo</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>av_audio_fifo_alloc</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>inputs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>format</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>inputs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>channels</name></expr></argument>, <argument><expr><literal type="number">1024</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>fifo</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>||</operator> <operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>fifo</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>agate_config_input</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>inputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>void</name></type> <name>uninit</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AudioGateContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_audio_fifo_free</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>fifo</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_audio_fifo_free</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>fifo</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVFilterPad</name></type> <name><name>sidechaingate_inputs</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"main"</literal></expr>,

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_AUDIO</name></expr>,

}</block></expr>,<expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"sidechain"</literal></expr>,

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_AUDIO</name></expr>,

}</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVFilterPad</name></type> <name><name>sidechaingate_outputs</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"default"</literal></expr>,

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_AUDIO</name></expr>,

<expr><operator>.</operator><name>config_props</name> <operator>=</operator> <name>scconfig_output</name></expr>,

}</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFilter</name></type> <name>ff_af_sidechaingate</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"sidechaingate"</literal></expr>,

<expr><operator>.</operator><name>description</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"Audio sidechain gate."</literal></expr></argument>)</argument_list></call></expr>,

<expr><operator>.</operator><name>priv_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>AudioGateContext</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><operator>.</operator><name>priv_class</name> <operator>=</operator> <operator>&amp;</operator><name>sidechaingate_class</name></expr>,

<expr><operator>.</operator><name>query_formats</name> <operator>=</operator> <name>scquery_formats</name></expr>,

<expr><operator>.</operator><name>activate</name> <operator>=</operator> <name>activate</name></expr>,

<expr><operator>.</operator><name>uninit</name> <operator>=</operator> <name>uninit</name></expr>,

<expr><operator>.</operator><name>inputs</name> <operator>=</operator> <name>sidechaingate_inputs</name></expr>,

<expr><operator>.</operator><name>outputs</name> <operator>=</operator> <name>sidechaingate_outputs</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

</unit>
