<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavfilter\af_silencedetect.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;float.h&gt;</cpp:file></cpp:include> 

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/opt.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/timestamp.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"audio.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"formats.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avfilter.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct <name>SilenceDetectContext</name> <block>{

<decl_stmt><decl><type><specifier>const</specifier> <name>AVClass</name> <modifier>*</modifier></type><name>class</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>noise</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int64_t</name></type> <name>duration</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>mono</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>channels</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>independent_channels</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int64_t</name> <modifier>*</modifier></type><name>nb_null_samples</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int64_t</name> <modifier>*</modifier></type><name>start</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int64_t</name></type> <name>frame_end</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>last_sample_rate</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>AVRational</name></type> <name>time_base</name></decl>;</decl_stmt> 

<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>silencedetect</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SilenceDetectContext</name></name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>insamples</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>nb_samples</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>nb_samples_notify</name></decl></parameter>,

<parameter><decl><type><name>AVRational</name></type> <name>time_base</name></decl></parameter>)</parameter_list>;</function_decl>

}</block></struct></type> <name>SilenceDetectContext</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_DURATION</name></cpp:macro> <cpp:value>(24*3600*1000000LL)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OFFSET</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>offsetof(SilenceDetectContext, x)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLAGS</name></cpp:macro> <cpp:value>AV_OPT_FLAG_FILTERING_PARAM|AV_OPT_FLAG_AUDIO_PARAM</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVOption</name></type> <name><name>silencedetect_options</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><literal type="string">"n"</literal></expr>, <expr><literal type="string">"set noise tolerance"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>noise</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_DOUBLE</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name><operator>=</operator><literal type="number">0.001</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>DBL_MAX</name></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"noise"</literal></expr>, <expr><literal type="string">"set noise tolerance"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>noise</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_DOUBLE</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name><operator>=</operator><literal type="number">0.001</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>DBL_MAX</name></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"d"</literal></expr>, <expr><literal type="string">"set minimum duration in seconds"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>duration</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_DURATION</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">2000000</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>MAX_DURATION</name></expr>,<expr><name>FLAGS</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"duration"</literal></expr>, <expr><literal type="string">"set minimum duration in seconds"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>duration</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_DURATION</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">2000000</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>MAX_DURATION</name></expr>,<expr><name>FLAGS</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"mono"</literal></expr>, <expr><literal type="string">"check each channel separately"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>mono</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_BOOL</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">0</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"m"</literal></expr>, <expr><literal type="string">"check each channel separately"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>mono</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_BOOL</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">0</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>AVFILTER_DEFINE_CLASS</name><argument_list>(<argument><expr><name>silencedetect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>set_meta</name><parameter_list>(<parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>insamples</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>channel</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>key2</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>channel</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>key2</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>key2</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"lavfi.%s.%d"</literal></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>channel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>key2</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>key2</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"lavfi.%s"</literal></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>av_dict_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>insamples</name><operator>-&gt;</operator><name>metadata</name></name></expr></argument>, <argument><expr><name>key2</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>void</name></type> <name>update</name><parameter_list>(<parameter><decl><type><name>SilenceDetectContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>insamples</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>is_silence</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>current_sample</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>nb_samples_notify</name></decl></parameter>,

<parameter><decl><type><name>AVRational</name></type> <name>time_base</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>channel</name> <init>= <expr><name>current_sample</name> <operator>%</operator> <name><name>s</name><operator>-&gt;</operator><name>independent_channels</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>is_silence</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>start</name><index>[<expr><name>channel</name></expr>]</index></name> <operator>==</operator> <name>INT64_MIN</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>nb_null_samples</name><index>[<expr><name>channel</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>nb_null_samples</name><index>[<expr><name>channel</name></expr>]</index></name> <operator>&gt;=</operator> <name>nb_samples_notify</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>start</name><index>[<expr><name>channel</name></expr>]</index></name> <operator>=</operator> <name><name>insamples</name><operator>-&gt;</operator><name>pts</name></name> <operator>+</operator> <macro><name>av_rescale_q</name><argument_list>(<argument>current_sample / s-&gt;channels + <literal type="number">1</literal> - nb_samples_notify * s-&gt;independent_channels / s-&gt;channels</argument>,

<argument>(AVRational){ <literal type="number">1</literal></argument>, <argument>s-&gt;last_sample_rate }</argument>, <argument>time_base</argument>)</argument_list></macro></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_meta</name><argument_list>(<argument><expr><name>insamples</name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>mono</name></name></expr> ?</condition><then> <expr><name>channel</name> <operator>+</operator> <literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>, <argument><expr><literal type="string">"silence_start"</literal></expr></argument>,

<argument><expr><call><name>av_ts2timestr</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>start</name><index>[<expr><name>channel</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>time_base</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>mono</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"channel: %d | "</literal></expr></argument>, <argument><expr><name>channel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"silence_start: %s\n"</literal></expr></argument>,

<argument><expr><call><name>av_ts2timestr</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>start</name><index>[<expr><name>channel</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>time_base</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>start</name><index>[<expr><name>channel</name></expr>]</index></name> <operator>&gt;</operator> <name>INT64_MIN</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int64_t</name></type> <name>end_pts</name> <init>= <expr><ternary><condition><expr><name>insamples</name></expr> ?</condition><then> <expr><name><name>insamples</name><operator>-&gt;</operator><name>pts</name></name> <operator>+</operator> <macro><name>av_rescale_q</name><argument_list>(<argument>current_sample / s-&gt;channels</argument>,

<argument>(AVRational){ <literal type="number">1</literal></argument>, <argument>s-&gt;last_sample_rate }</argument>, <argument>time_base</argument>)</argument_list></macro></expr>

</then><else>: <expr><name><name>s</name><operator>-&gt;</operator><name>frame_end</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>duration_ts</name> <init>= <expr><name>end_pts</name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>start</name><index>[<expr><name>channel</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>insamples</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>set_meta</name><argument_list>(<argument><expr><name>insamples</name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>mono</name></name></expr> ?</condition><then> <expr><name>channel</name> <operator>+</operator> <literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>, <argument><expr><literal type="string">"silence_end"</literal></expr></argument>,

<argument><expr><call><name>av_ts2timestr</name><argument_list>(<argument><expr><name>end_pts</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>time_base</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_meta</name><argument_list>(<argument><expr><name>insamples</name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>mono</name></name></expr> ?</condition><then> <expr><name>channel</name> <operator>+</operator> <literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>, <argument><expr><literal type="string">"silence_duration"</literal></expr></argument>,

<argument><expr><call><name>av_ts2timestr</name><argument_list>(<argument><expr><name>duration_ts</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>time_base</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>mono</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"channel: %d | "</literal></expr></argument>, <argument><expr><name>channel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"silence_end: %s | silence_duration: %s\n"</literal></expr></argument>,

<argument><expr><call><name>av_ts2timestr</name><argument_list>(<argument><expr><name>end_pts</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>time_base</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>av_ts2timestr</name><argument_list>(<argument><expr><name>duration_ts</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>time_base</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>nb_null_samples</name><index>[<expr><name>channel</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>start</name><index>[<expr><name>channel</name></expr>]</index></name> <operator>=</operator> <name>INT64_MIN</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SILENCE_DETECT</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>type</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static void silencedetect_##name(SilenceDetectContext *s, AVFrame *insamples, int nb_samples, int64_t nb_samples_notify, AVRational time_base) { const type *p = (const type *)insamples-&gt;data[0]; const type noise = s-&gt;noise; int i; for (i = 0; i &lt; nb_samples; i++, p++) update(s, insamples, *p &lt; noise &amp;&amp; *p &gt; -noise, i, nb_samples_notify, time_base); }</cpp:value></cpp:define>

<macro><name>SILENCE_DETECT</name><argument_list>(<argument>dbl</argument>, <argument>double</argument>)</argument_list></macro>

<macro><name>SILENCE_DETECT</name><argument_list>(<argument>flt</argument>, <argument>float</argument>)</argument_list></macro>

<macro><name>SILENCE_DETECT</name><argument_list>(<argument>s32</argument>, <argument>int32_t</argument>)</argument_list></macro>

<macro><name>SILENCE_DETECT</name><argument_list>(<argument>s16</argument>, <argument>int16_t</argument>)</argument_list></macro>

<function><type><specifier>static</specifier> <name>int</name></type> <name>config_input</name><parameter_list>(<parameter><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>inlink</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>inlink</name><operator>-&gt;</operator><name>dst</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SilenceDetectContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>channels</name></name> <operator>=</operator> <name><name>inlink</name><operator>-&gt;</operator><name>channels</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>duration</name></name> <operator>=</operator> <call><name>av_rescale</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>duration</name></name></expr></argument>, <argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>sample_rate</name></name></expr></argument>, <argument><expr><name>AV_TIME_BASE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>independent_channels</name></name> <operator>=</operator> <ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>mono</name></name></expr> ?</condition><then> <expr><name><name>s</name><operator>-&gt;</operator><name>channels</name></name></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>nb_null_samples</name></name> <operator>=</operator> <call><name>av_mallocz_array</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>nb_null_samples</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>independent_channels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>nb_null_samples</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>start</name></name> <operator>=</operator> <call><name>av_malloc_array</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>start</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>independent_channels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>start</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>c</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>c</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>independent_channels</name></name></expr>;</condition> <incr><expr><name>c</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>start</name><index>[<expr><name>c</name></expr>]</index></name> <operator>=</operator> <name>INT64_MIN</name></expr>;</expr_stmt></block_content></block></for>

<switch>switch <condition>(<expr><name><name>inlink</name><operator>-&gt;</operator><name>format</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>AV_SAMPLE_FMT_DBL</name></expr>:</case> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>silencedetect</name></name> <operator>=</operator> <name>silencedetect_dbl</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>AV_SAMPLE_FMT_FLT</name></expr>:</case> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>silencedetect</name></name> <operator>=</operator> <name>silencedetect_flt</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>AV_SAMPLE_FMT_S32</name></expr>:</case>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>noise</name></name> <operator>*=</operator> <name>INT32_MAX</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>silencedetect</name></name> <operator>=</operator> <name>silencedetect_s32</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AV_SAMPLE_FMT_S16</name></expr>:</case>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>noise</name></name> <operator>*=</operator> <name>INT16_MAX</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>silencedetect</name></name> <operator>=</operator> <name>silencedetect_s16</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>filter_frame</name><parameter_list>(<parameter><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>inlink</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>insamples</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>SilenceDetectContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>inlink</name><operator>-&gt;</operator><name>dst</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>nb_channels</name> <init>= <expr><name><name>inlink</name><operator>-&gt;</operator><name>channels</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>srate</name> <init>= <expr><name><name>inlink</name><operator>-&gt;</operator><name>sample_rate</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>nb_samples</name> <init>= <expr><name><name>insamples</name><operator>-&gt;</operator><name>nb_samples</name></name> <operator>*</operator> <name>nb_channels</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>nb_samples_notify</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>duration</name></name> <operator>*</operator> <operator>(</operator><ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>mono</name></name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><name>nb_channels</name></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>last_sample_rate</name></name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>last_sample_rate</name></name> <operator>!=</operator> <name>srate</name></expr>)</condition><block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>c</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>c</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>independent_channels</name></name></expr>;</condition> <incr><expr><name>c</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>nb_null_samples</name><index>[<expr><name>c</name></expr>]</index></name> <operator>=</operator> <name>srate</name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>nb_null_samples</name><index>[<expr><name>c</name></expr>]</index></name> <operator>/</operator> <name><name>s</name><operator>-&gt;</operator><name>last_sample_rate</name></name></expr>;</expr_stmt>

</block_content>}</block></for></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>last_sample_rate</name></name> <operator>=</operator> <name>srate</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>time_base</name></name> <operator>=</operator> <name><name>inlink</name><operator>-&gt;</operator><name>time_base</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>frame_end</name></name> <operator>=</operator> <name><name>insamples</name><operator>-&gt;</operator><name>pts</name></name> <operator>+</operator> <macro><name>av_rescale_q</name><argument_list>(<argument>insamples-&gt;nb_samples</argument>,

<argument>(AVRational){ <literal type="number">1</literal></argument>, <argument>s-&gt;last_sample_rate }</argument>, <argument>inlink-&gt;time_base</argument>)</argument_list></macro></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>silencedetect</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>insamples</name></expr></argument>, <argument><expr><name>nb_samples</name></expr></argument>, <argument><expr><name>nb_samples_notify</name></expr></argument>,

<argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>time_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>ff_filter_frame</name><argument_list>(<argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>dst</name><operator>-&gt;</operator><name>outputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>insamples</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>query_formats</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVFilterFormats</name> <modifier>*</modifier></type><name>formats</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFilterChannelLayouts</name> <modifier>*</modifier></type><name>layouts</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>enum</name> <name>AVSampleFormat</name></name></type> <name><name>sample_fmts</name><index>[]</index></name> <init>= <expr><block>{

<expr><name>AV_SAMPLE_FMT_DBL</name></expr>,

<expr><name>AV_SAMPLE_FMT_FLT</name></expr>,

<expr><name>AV_SAMPLE_FMT_S32</name></expr>,

<expr><name>AV_SAMPLE_FMT_S16</name></expr>,

<expr><name>AV_SAMPLE_FMT_NONE</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name>layouts</name> <operator>=</operator> <call><name>ff_all_channel_layouts</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>layouts</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_set_common_channel_layouts</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>layouts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>formats</name> <operator>=</operator> <call><name>ff_make_format_list</name><argument_list>(<argument><expr><name>sample_fmts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>formats</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_set_common_formats</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>formats</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>formats</name> <operator>=</operator> <call><name>ff_all_samplerates</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>formats</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>ff_set_common_samplerates</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>formats</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>void</name></type> <name>uninit</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>SilenceDetectContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>c</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>c</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>independent_channels</name></name></expr>;</condition> <incr><expr><name>c</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>start</name><index>[<expr><name>c</name></expr>]</index></name> <operator>&gt;</operator> <name>INT64_MIN</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>update</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>time_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>nb_null_samples</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>start</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVFilterPad</name></type> <name><name>silencedetect_inputs</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"default"</literal></expr>,

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_AUDIO</name></expr>,

<expr><operator>.</operator><name>config_props</name> <operator>=</operator> <name>config_input</name></expr>,

<expr><operator>.</operator><name>filter_frame</name> <operator>=</operator> <name>filter_frame</name></expr>,

}</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVFilterPad</name></type> <name><name>silencedetect_outputs</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"default"</literal></expr>,

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_AUDIO</name></expr>,

}</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFilter</name></type> <name>ff_af_silencedetect</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"silencedetect"</literal></expr>,

<expr><operator>.</operator><name>description</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"Detect silence."</literal></expr></argument>)</argument_list></call></expr>,

<expr><operator>.</operator><name>priv_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SilenceDetectContext</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><operator>.</operator><name>query_formats</name> <operator>=</operator> <name>query_formats</name></expr>,

<expr><operator>.</operator><name>uninit</name> <operator>=</operator> <name>uninit</name></expr>,

<expr><operator>.</operator><name>inputs</name> <operator>=</operator> <name>silencedetect_inputs</name></expr>,

<expr><operator>.</operator><name>outputs</name> <operator>=</operator> <name>silencedetect_outputs</name></expr>,

<expr><operator>.</operator><name>priv_class</name> <operator>=</operator> <operator>&amp;</operator><name>silencedetect_class</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

</unit>
