<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavfilter\af_firequalizer.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/opt.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/eval.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avassert.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavcodec/avfft.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avfilter.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"audio.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RDFT_BITS_MIN</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RDFT_BITS_MAX</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define>

<enum>enum <name>WindowFunc</name> <block>{

<decl><name>WFUNC_RECTANGULAR</name></decl>,

<decl><name>WFUNC_HANN</name></decl>,

<decl><name>WFUNC_HAMMING</name></decl>,

<decl><name>WFUNC_BLACKMAN</name></decl>,

<decl><name>WFUNC_NUTTALL3</name></decl>,

<decl><name>WFUNC_MNUTTALL3</name></decl>,

<decl><name>WFUNC_NUTTALL</name></decl>,

<decl><name>WFUNC_BNUTTALL</name></decl>,

<decl><name>WFUNC_BHARRIS</name></decl>,

<decl><name>WFUNC_TUKEY</name></decl>,

<decl><name>NB_WFUNC</name></decl>

}</block>;</enum>

<enum>enum <name>Scale</name> <block>{

<decl><name>SCALE_LINLIN</name></decl>,

<decl><name>SCALE_LINLOG</name></decl>,

<decl><name>SCALE_LOGLIN</name></decl>,

<decl><name>SCALE_LOGLOG</name></decl>,

<decl><name>NB_SCALE</name></decl>

}</block>;</enum>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NB_GAIN_ENTRY_MAX</name></cpp:macro> <cpp:value>4096</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <name>GainEntry</name> <block>{

<decl_stmt><decl><type><name>double</name></type> <name>freq</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>gain</name></decl>;</decl_stmt>

}</block></struct></type> <name>GainEntry</name>;</typedef>

<typedef>typedef <type><struct>struct <name>OverlapIndex</name> <block>{

<decl_stmt><decl><type><name>int</name></type> <name>buf_idx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>overlap_idx</name></decl>;</decl_stmt>

}</block></struct></type> <name>OverlapIndex</name>;</typedef>

<typedef>typedef <type><struct>struct <name>FIREqualizerContext</name> <block>{

<decl_stmt><decl><type><specifier>const</specifier> <name>AVClass</name> <modifier>*</modifier></type><name>class</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RDFTContext</name> <modifier>*</modifier></type><name>analysis_rdft</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RDFTContext</name> <modifier>*</modifier></type><name>analysis_irdft</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RDFTContext</name> <modifier>*</modifier></type><name>rdft</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RDFTContext</name> <modifier>*</modifier></type><name>irdft</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>FFTContext</name> <modifier>*</modifier></type><name>fft_ctx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RDFTContext</name> <modifier>*</modifier></type><name>cepstrum_rdft</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RDFTContext</name> <modifier>*</modifier></type><name>cepstrum_irdft</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>analysis_rdft_len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>rdft_len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>cepstrum_len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>analysis_buf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>dump_buf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>kernel_tmp_buf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>kernel_buf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>cepstrum_buf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>conv_buf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>OverlapIndex</name> <modifier>*</modifier></type><name>conv_idx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>fir_len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>nsamples_max</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>next_pts</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>frame_nsamples_max</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>remaining</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>gain_cmd</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>gain_entry_cmd</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>gain</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>gain_entry</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>delay</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>accuracy</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>wfunc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>fixed</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>multi</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>zero_phase</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>scale</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>dumpfile</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>dumpscale</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>fft2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>min_phase</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>nb_gain_entry</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>gain_entry_err</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GainEntry</name></type> <name><name>gain_entry_tbl</name><index>[<expr><name>NB_GAIN_ENTRY_MAX</name></expr>]</index></name></decl>;</decl_stmt>

}</block></struct></type> <name>FIREqualizerContext</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OFFSET</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>offsetof(FIREqualizerContext, x)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLAGS</name></cpp:macro> <cpp:value>AV_OPT_FLAG_AUDIO_PARAM|AV_OPT_FLAG_FILTERING_PARAM</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TFLAGS</name></cpp:macro> <cpp:value>AV_OPT_FLAG_AUDIO_PARAM|AV_OPT_FLAG_FILTERING_PARAM|AV_OPT_FLAG_RUNTIME_PARAM</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVOption</name></type> <name><name>firequalizer_options</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><literal type="string">"gain"</literal></expr>, <expr><literal type="string">"set gain curve"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>gain</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_STRING</name></expr>, <expr><block>{ <expr><operator>.</operator><name>str</name> <operator>=</operator> <literal type="string">"gain_interpolate(f)"</literal></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>TFLAGS</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"gain_entry"</literal></expr>, <expr><literal type="string">"set gain entry"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>gain_entry</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_STRING</name></expr>, <expr><block>{ <expr><operator>.</operator><name>str</name> <operator>=</operator> <name>NULL</name></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>TFLAGS</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"delay"</literal></expr>, <expr><literal type="string">"set delay"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>delay</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_DOUBLE</name></expr>, <expr><block>{ <expr><operator>.</operator><name>dbl</name> <operator>=</operator> <literal type="number">0.01</literal></expr> }</block></expr>, <expr><literal type="number">0.0</literal></expr>, <expr><literal type="number">1e10</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"accuracy"</literal></expr>, <expr><literal type="string">"set accuracy"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>accuracy</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_DOUBLE</name></expr>, <expr><block>{ <expr><operator>.</operator><name>dbl</name> <operator>=</operator> <literal type="number">5.0</literal></expr> }</block></expr>, <expr><literal type="number">0.0</literal></expr>, <expr><literal type="number">1e10</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"wfunc"</literal></expr>, <expr><literal type="string">"set window function"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>wfunc</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>WFUNC_HANN</name></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NB_WFUNC</name><operator>-</operator><literal type="number">1</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"wfunc"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"rectangular"</literal></expr>, <expr><literal type="string">"rectangular window"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>WFUNC_RECTANGULAR</name></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"wfunc"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"hann"</literal></expr>, <expr><literal type="string">"hann window"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>WFUNC_HANN</name></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"wfunc"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"hamming"</literal></expr>, <expr><literal type="string">"hamming window"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>WFUNC_HAMMING</name></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"wfunc"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"blackman"</literal></expr>, <expr><literal type="string">"blackman window"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>WFUNC_BLACKMAN</name></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"wfunc"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"nuttall3"</literal></expr>, <expr><literal type="string">"3-term nuttall window"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>WFUNC_NUTTALL3</name></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"wfunc"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"mnuttall3"</literal></expr>, <expr><literal type="string">"minimum 3-term nuttall window"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>WFUNC_MNUTTALL3</name></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"wfunc"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"nuttall"</literal></expr>, <expr><literal type="string">"nuttall window"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>WFUNC_NUTTALL</name></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"wfunc"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"bnuttall"</literal></expr>, <expr><literal type="string">"blackman-nuttall window"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>WFUNC_BNUTTALL</name></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"wfunc"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"bharris"</literal></expr>, <expr><literal type="string">"blackman-harris window"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>WFUNC_BHARRIS</name></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"wfunc"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"tukey"</literal></expr>, <expr><literal type="string">"tukey window"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>WFUNC_TUKEY</name></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"wfunc"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"fixed"</literal></expr>, <expr><literal type="string">"set fixed frame samples"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>fixed</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_BOOL</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0</literal></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"multi"</literal></expr>, <expr><literal type="string">"set multi channels mode"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>multi</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_BOOL</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0</literal></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"zero_phase"</literal></expr>, <expr><literal type="string">"set zero phase mode"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>zero_phase</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_BOOL</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0</literal></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"scale"</literal></expr>, <expr><literal type="string">"set gain scale"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>scale</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>SCALE_LINLOG</name></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NB_SCALE</name><operator>-</operator><literal type="number">1</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"scale"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"linlin"</literal></expr>, <expr><literal type="string">"linear-freq linear-gain"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>SCALE_LINLIN</name></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"scale"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"linlog"</literal></expr>, <expr><literal type="string">"linear-freq logarithmic-gain"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>SCALE_LINLOG</name></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"scale"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"loglin"</literal></expr>, <expr><literal type="string">"logarithmic-freq linear-gain"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>SCALE_LOGLIN</name></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"scale"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"loglog"</literal></expr>, <expr><literal type="string">"logarithmic-freq logarithmic-gain"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>SCALE_LOGLOG</name></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"scale"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"dumpfile"</literal></expr>, <expr><literal type="string">"set dump file"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>dumpfile</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_STRING</name></expr>, <expr><block>{ <expr><operator>.</operator><name>str</name> <operator>=</operator> <name>NULL</name></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"dumpscale"</literal></expr>, <expr><literal type="string">"set dump scale"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>dumpscale</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>SCALE_LINLOG</name></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NB_SCALE</name><operator>-</operator><literal type="number">1</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"scale"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"fft2"</literal></expr>, <expr><literal type="string">"set 2-channels fft"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>fft2</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_BOOL</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0</literal></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"min_phase"</literal></expr>, <expr><literal type="string">"set minimum phase mode"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>min_phase</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_BOOL</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0</literal></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>AVFILTER_DEFINE_CLASS</name><argument_list>(<argument><expr><name>firequalizer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>common_uninit</name><parameter_list>(<parameter><decl><type><name>FIREqualizerContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>av_rdft_end</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>analysis_rdft</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_rdft_end</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>analysis_irdft</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_rdft_end</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>rdft</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_rdft_end</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>irdft</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_fft_end</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>fft_ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_rdft_end</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>cepstrum_rdft</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_rdft_end</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>cepstrum_irdft</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>analysis_rdft</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>analysis_irdft</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>rdft</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>irdft</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>fft_ctx</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>cepstrum_rdft</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>cepstrum_irdft</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>analysis_buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>dump_buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>kernel_tmp_buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>kernel_buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>cepstrum_buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>conv_buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>conv_idx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>void</name></type> <name>uninit</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>FIREqualizerContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>common_uninit</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gain_cmd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gain_entry_cmd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>query_formats</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVFilterChannelLayouts</name> <modifier>*</modifier></type><name>layouts</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFilterFormats</name> <modifier>*</modifier></type><name>formats</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>enum</name> <name>AVSampleFormat</name></name></type> <name><name>sample_fmts</name><index>[]</index></name> <init>= <expr><block>{

<expr><name>AV_SAMPLE_FMT_FLTP</name></expr>,

<expr><name>AV_SAMPLE_FMT_NONE</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name>layouts</name> <operator>=</operator> <call><name>ff_all_channel_counts</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>layouts</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_set_common_channel_layouts</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>layouts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>formats</name> <operator>=</operator> <call><name>ff_make_format_list</name><argument_list>(<argument><expr><name>sample_fmts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>formats</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_set_common_formats</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>formats</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>formats</name> <operator>=</operator> <call><name>ff_all_samplerates</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>formats</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>ff_set_common_samplerates</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>formats</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>fast_convolute</name><parameter_list>(<parameter><decl><type><name>FIREqualizerContext</name> <modifier>*</modifier><name>av_restrict</name></type> <name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier><name>av_restrict</name></type> <name>kernel_buf</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier><name>av_restrict</name></type> <name>conv_buf</name></decl></parameter>,

<parameter><decl><type><name>OverlapIndex</name> <modifier>*</modifier><name>av_restrict</name></type> <name>idx</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier><name>av_restrict</name></type> <name>data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nsamples</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>nsamples</name> <operator>&lt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>nsamples_max</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><name>conv_buf</name> <operator>+</operator> <name><name>idx</name><operator>-&gt;</operator><name>buf_idx</name></name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>rdft_len</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>obuf</name> <init>= <expr><name>conv_buf</name> <operator>+</operator> <operator>!</operator><name><name>idx</name><operator>-&gt;</operator><name>buf_idx</name></name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>rdft_len</name></name> <operator>+</operator> <name><name>idx</name><operator>-&gt;</operator><name>overlap_idx</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>center</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>fir_len</name></name><operator>/</operator><literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>k</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>center</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>data</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>center</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>nsamples</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>data</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>center</name> <operator>+</operator> <name>nsamples</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>rdft_len</name></name> <operator>-</operator> <name>nsamples</name> <operator>-</operator> <name>center</name><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>data</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_rdft_calc</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>rdft</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*=</operator> <name><name>kernel_buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*=</operator> <name><name>kernel_buf</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>rdft_len</name></name><operator>/</operator><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>rdft_len</name></name><operator>/</operator><literal type="number">2</literal></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>k</name></expr>]</index></name> <operator>*=</operator> <name><name>kernel_buf</name><index>[<expr><name>k</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>k</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>*=</operator> <name><name>kernel_buf</name><index>[<expr><name>k</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>av_rdft_calc</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>irdft</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>rdft_len</name></name> <operator>-</operator> <name><name>idx</name><operator>-&gt;</operator><name>overlap_idx</name></name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>buf</name><index>[<expr><name>k</name></expr>]</index></name> <operator>+=</operator> <name><name>obuf</name><index>[<expr><name>k</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>nsamples</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>data</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>idx</name><operator>-&gt;</operator><name>buf_idx</name></name> <operator>=</operator> <operator>!</operator><name><name>idx</name><operator>-&gt;</operator><name>buf_idx</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>idx</name><operator>-&gt;</operator><name>overlap_idx</name></name> <operator>=</operator> <name>nsamples</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<while>while <condition>(<expr><name>nsamples</name> <operator>&gt;</operator> <name><name>s</name><operator>-&gt;</operator><name>nsamples_max</name></name> <operator>*</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fast_convolute</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>kernel_buf</name></expr></argument>, <argument><expr><name>conv_buf</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>nsamples_max</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>data</name> <operator>+=</operator> <name><name>s</name><operator>-&gt;</operator><name>nsamples_max</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>nsamples</name> <operator>-=</operator> <name><name>s</name><operator>-&gt;</operator><name>nsamples_max</name></name></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>fast_convolute</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>kernel_buf</name></expr></argument>, <argument><expr><name>conv_buf</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>nsamples</name><operator>/</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fast_convolute</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>kernel_buf</name></expr></argument>, <argument><expr><name>conv_buf</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>, <argument><expr><name>data</name> <operator>+</operator> <name>nsamples</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>nsamples</name> <operator>-</operator> <name>nsamples</name><operator>/</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>fast_convolute_nonlinear</name><parameter_list>(<parameter><decl><type><name>FIREqualizerContext</name> <modifier>*</modifier><name>av_restrict</name></type> <name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier><name>av_restrict</name></type> <name>kernel_buf</name></decl></parameter>,

<parameter><decl><type><name>float</name> <modifier>*</modifier><name>av_restrict</name></type> <name>conv_buf</name></decl></parameter>, <parameter><decl><type><name>OverlapIndex</name> <modifier>*</modifier><name>av_restrict</name></type> <name>idx</name></decl></parameter>,

<parameter><decl><type><name>float</name> <modifier>*</modifier><name>av_restrict</name></type> <name>data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nsamples</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>nsamples</name> <operator>&lt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>nsamples_max</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><name>conv_buf</name> <operator>+</operator> <name><name>idx</name><operator>-&gt;</operator><name>buf_idx</name></name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>rdft_len</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>obuf</name> <init>= <expr><name>conv_buf</name> <operator>+</operator> <operator>!</operator><name><name>idx</name><operator>-&gt;</operator><name>buf_idx</name></name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>rdft_len</name></name> <operator>+</operator> <name><name>idx</name><operator>-&gt;</operator><name>overlap_idx</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>k</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>nsamples</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>data</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>nsamples</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>rdft_len</name></name> <operator>-</operator> <name>nsamples</name><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>data</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_rdft_calc</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>rdft</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*=</operator> <name><name>kernel_buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*=</operator> <name><name>kernel_buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">2</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>rdft_len</name></name></expr>;</condition> <incr><expr><name>k</name> <operator>+=</operator> <literal type="number">2</literal></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>re</name></decl>, <decl><type ref="prev"/><name>im</name></decl>;</decl_stmt>

<expr_stmt><expr><name>re</name> <operator>=</operator> <name><name>buf</name><index>[<expr><name>k</name></expr>]</index></name> <operator>*</operator> <name><name>kernel_buf</name><index>[<expr><name>k</name></expr>]</index></name> <operator>-</operator> <name><name>buf</name><index>[<expr><name>k</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name><name>kernel_buf</name><index>[<expr><name>k</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>im</name> <operator>=</operator> <name><name>buf</name><index>[<expr><name>k</name></expr>]</index></name> <operator>*</operator> <name><name>kernel_buf</name><index>[<expr><name>k</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>buf</name><index>[<expr><name>k</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name><name>kernel_buf</name><index>[<expr><name>k</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <name>re</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><index>[<expr><name>k</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>im</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>av_rdft_calc</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>irdft</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>rdft_len</name></name> <operator>-</operator> <name><name>idx</name><operator>-&gt;</operator><name>overlap_idx</name></name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>buf</name><index>[<expr><name>k</name></expr>]</index></name> <operator>+=</operator> <name><name>obuf</name><index>[<expr><name>k</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>nsamples</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>data</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>idx</name><operator>-&gt;</operator><name>buf_idx</name></name> <operator>=</operator> <operator>!</operator><name><name>idx</name><operator>-&gt;</operator><name>buf_idx</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>idx</name><operator>-&gt;</operator><name>overlap_idx</name></name> <operator>=</operator> <name>nsamples</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<while>while <condition>(<expr><name>nsamples</name> <operator>&gt;</operator> <name><name>s</name><operator>-&gt;</operator><name>nsamples_max</name></name> <operator>*</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fast_convolute_nonlinear</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>kernel_buf</name></expr></argument>, <argument><expr><name>conv_buf</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>nsamples_max</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>data</name> <operator>+=</operator> <name><name>s</name><operator>-&gt;</operator><name>nsamples_max</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>nsamples</name> <operator>-=</operator> <name><name>s</name><operator>-&gt;</operator><name>nsamples_max</name></name></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>fast_convolute_nonlinear</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>kernel_buf</name></expr></argument>, <argument><expr><name>conv_buf</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>nsamples</name><operator>/</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fast_convolute_nonlinear</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>kernel_buf</name></expr></argument>, <argument><expr><name>conv_buf</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>, <argument><expr><name>data</name> <operator>+</operator> <name>nsamples</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>nsamples</name> <operator>-</operator> <name>nsamples</name><operator>/</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>fast_convolute2</name><parameter_list>(<parameter><decl><type><name>FIREqualizerContext</name> <modifier>*</modifier><name>av_restrict</name></type> <name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier><name>av_restrict</name></type> <name>kernel_buf</name></decl></parameter>, <parameter><decl><type><name>FFTComplex</name> <modifier>*</modifier><name>av_restrict</name></type> <name>conv_buf</name></decl></parameter>,

<parameter><decl><type><name>OverlapIndex</name> <modifier>*</modifier><name>av_restrict</name></type> <name>idx</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier><name>av_restrict</name></type> <name>data0</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier><name>av_restrict</name></type> <name>data1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nsamples</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>nsamples</name> <operator>&lt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>nsamples_max</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>FFTComplex</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><name>conv_buf</name> <operator>+</operator> <name><name>idx</name><operator>-&gt;</operator><name>buf_idx</name></name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>rdft_len</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>FFTComplex</name> <modifier>*</modifier></type><name>obuf</name> <init>= <expr><name>conv_buf</name> <operator>+</operator> <operator>!</operator><name><name>idx</name><operator>-&gt;</operator><name>buf_idx</name></name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>rdft_len</name></name> <operator>+</operator> <name><name>idx</name><operator>-&gt;</operator><name>overlap_idx</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>center</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>fir_len</name></name><operator>/</operator><literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>k</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>tmp</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>center</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>nsamples</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>buf</name><index>[<expr><name>center</name><operator>+</operator><name>k</name></expr>]</index></name><operator>.</operator><name>re</name> <operator>=</operator> <name><name>data0</name><index>[<expr><name>k</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><index>[<expr><name>center</name><operator>+</operator><name>k</name></expr>]</index></name><operator>.</operator><name>im</name> <operator>=</operator> <name><name>data1</name><index>[<expr><name>k</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>center</name> <operator>+</operator> <name>nsamples</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>rdft_len</name></name> <operator>-</operator> <name>nsamples</name> <operator>-</operator> <name>center</name><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_fft_permute</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>fft_ctx</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_fft_calc</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>fft_ctx</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp</name> <operator>=</operator> <name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>re</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>re</name> <operator>=</operator> <literal type="number">0.5f</literal> <operator>*</operator> <name><name>kernel_buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>im</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>im</name> <operator>=</operator> <literal type="number">0.5f</literal> <operator>*</operator> <name><name>kernel_buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name>tmp</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>rdft_len</name></name><operator>/</operator><literal type="number">2</literal></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>m</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>rdft_len</name></name> <operator>-</operator> <name>k</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>tmp</name> <operator>=</operator> <name><name>buf</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>re</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>re</name> <operator>=</operator> <literal type="number">0.5f</literal> <operator>*</operator> <name><name>kernel_buf</name><index>[<expr><name>k</name></expr>]</index></name> <operator>*</operator> <name><name>buf</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>im</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>im</name> <operator>=</operator> <literal type="number">0.5f</literal> <operator>*</operator> <name><name>kernel_buf</name><index>[<expr><name>k</name></expr>]</index></name> <operator>*</operator> <name>tmp</name></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp</name> <operator>=</operator> <name><name>buf</name><index>[<expr><name>m</name></expr>]</index></name><operator>.</operator><name>re</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><index>[<expr><name>m</name></expr>]</index></name><operator>.</operator><name>re</name> <operator>=</operator> <literal type="number">0.5f</literal> <operator>*</operator> <name><name>kernel_buf</name><index>[<expr><name>k</name></expr>]</index></name> <operator>*</operator> <name><name>buf</name><index>[<expr><name>m</name></expr>]</index></name><operator>.</operator><name>im</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><index>[<expr><name>m</name></expr>]</index></name><operator>.</operator><name>im</name> <operator>=</operator> <literal type="number">0.5f</literal> <operator>*</operator> <name><name>kernel_buf</name><index>[<expr><name>k</name></expr>]</index></name> <operator>*</operator> <name>tmp</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>tmp</name> <operator>=</operator> <name><name>buf</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>re</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>re</name> <operator>=</operator> <literal type="number">0.5f</literal> <operator>*</operator> <name><name>kernel_buf</name><index>[<expr><name>k</name></expr>]</index></name> <operator>*</operator> <name><name>buf</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>im</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>im</name> <operator>=</operator> <literal type="number">0.5f</literal> <operator>*</operator> <name><name>kernel_buf</name><index>[<expr><name>k</name></expr>]</index></name> <operator>*</operator> <name>tmp</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_fft_permute</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>fft_ctx</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_fft_calc</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>fft_ctx</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>rdft_len</name></name> <operator>-</operator> <name><name>idx</name><operator>-&gt;</operator><name>overlap_idx</name></name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>buf</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>re</name> <operator>+=</operator> <name><name>obuf</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>re</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>im</name> <operator>+=</operator> <name><name>obuf</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>im</name></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>nsamples</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>data0</name><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <name><name>buf</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>im</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data1</name><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <name><name>buf</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>re</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>idx</name><operator>-&gt;</operator><name>buf_idx</name></name> <operator>=</operator> <operator>!</operator><name><name>idx</name><operator>-&gt;</operator><name>buf_idx</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>idx</name><operator>-&gt;</operator><name>overlap_idx</name></name> <operator>=</operator> <name>nsamples</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<while>while <condition>(<expr><name>nsamples</name> <operator>&gt;</operator> <name><name>s</name><operator>-&gt;</operator><name>nsamples_max</name></name> <operator>*</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fast_convolute2</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>kernel_buf</name></expr></argument>, <argument><expr><name>conv_buf</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>, <argument><expr><name>data0</name></expr></argument>, <argument><expr><name>data1</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>nsamples_max</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>data0</name> <operator>+=</operator> <name><name>s</name><operator>-&gt;</operator><name>nsamples_max</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>data1</name> <operator>+=</operator> <name><name>s</name><operator>-&gt;</operator><name>nsamples_max</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>nsamples</name> <operator>-=</operator> <name><name>s</name><operator>-&gt;</operator><name>nsamples_max</name></name></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>fast_convolute2</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>kernel_buf</name></expr></argument>, <argument><expr><name>conv_buf</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>, <argument><expr><name>data0</name></expr></argument>, <argument><expr><name>data1</name></expr></argument>, <argument><expr><name>nsamples</name><operator>/</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fast_convolute2</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>kernel_buf</name></expr></argument>, <argument><expr><name>conv_buf</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>, <argument><expr><name>data0</name> <operator>+</operator> <name>nsamples</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>data1</name> <operator>+</operator> <name>nsamples</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>nsamples</name> <operator>-</operator> <name>nsamples</name><operator>/</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>dump_fir</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ch</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>FIREqualizerContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>rate</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>inputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>sample_rate</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>xlog</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>dumpscale</name></name> <operator>==</operator> <name>SCALE_LOGLIN</name> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>dumpscale</name></name> <operator>==</operator> <name>SCALE_LOGLOG</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ylog</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>dumpscale</name></name> <operator>==</operator> <name>SCALE_LINLOG</name> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>dumpscale</name></name> <operator>==</operator> <name>SCALE_LOGLOG</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>center</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>fir_len</name></name> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>delay</name> <init>= <expr><ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>zero_phase</name></name></expr> ?</condition><then> <expr><literal type="number">0.0</literal></expr> </then><else>: <expr><operator>(</operator><name>double</name><operator>)</operator> <name>center</name> <operator>/</operator> <name>rate</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>vx</name></decl>, <decl><type ref="prev"/><name>ya</name></decl>, <decl><type ref="prev"/><name>yb</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>min_phase</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>analysis_buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*=</operator> <name><name>s</name><operator>-&gt;</operator><name>rdft_len</name></name><operator>/</operator><literal type="number">2</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;=</operator> <name>center</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>analysis_buf</name><index>[<expr><name>x</name></expr>]</index></name> <operator>*=</operator> <name><name>s</name><operator>-&gt;</operator><name>rdft_len</name></name><operator>/</operator><literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>analysis_buf</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>analysis_rdft_len</name></name> <operator>-</operator> <name>x</name></expr>]</index></name> <operator>*=</operator> <name><name>s</name><operator>-&gt;</operator><name>rdft_len</name></name><operator>/</operator><literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if> <else>else <block>{<block_content>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>fir_len</name></name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>analysis_buf</name><index>[<expr><name>x</name></expr>]</index></name> <operator>*=</operator> <name><name>s</name><operator>-&gt;</operator><name>rdft_len</name></name><operator>/</operator><literal type="number">2</literal></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ch</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"\n\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"#time[%d] (time amplitude)\n"</literal></expr></argument>, <argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>min_phase</name></name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <name>center</name></expr>;</init> <condition><expr><name>x</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>x</name><operator>--</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"%15.10f %15.10f\n"</literal></expr></argument>, <argument><expr><name>delay</name> <operator>-</operator> <operator>(</operator><name>double</name><operator>)</operator> <name>x</name> <operator>/</operator> <name>rate</name></expr></argument>, <argument><expr><operator>(</operator><name>double</name><operator>)</operator> <name><name>s</name><operator>-&gt;</operator><name>analysis_buf</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>analysis_rdft_len</name></name> <operator>-</operator> <name>x</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;=</operator> <name>center</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"%15.10f %15.10f\n"</literal></expr></argument>, <argument><expr><name>delay</name> <operator>+</operator> <operator>(</operator><name>double</name><operator>)</operator><name>x</name> <operator>/</operator> <name>rate</name></expr></argument> , <argument><expr><operator>(</operator><name>double</name><operator>)</operator> <name><name>s</name><operator>-&gt;</operator><name>analysis_buf</name><index>[<expr><name>x</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></if> <else>else <block>{<block_content>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>fir_len</name></name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"%15.10f %15.10f\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>double</name><operator>)</operator><name>x</name> <operator>/</operator> <name>rate</name></expr></argument>, <argument><expr><operator>(</operator><name>double</name><operator>)</operator> <name><name>s</name><operator>-&gt;</operator><name>analysis_buf</name><index>[<expr><name>x</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>av_rdft_calc</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>analysis_rdft</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>analysis_buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"\n\n#freq[%d] (frequency desired_gain actual_gain)\n"</literal></expr></argument>, <argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>analysis_rdft_len</name></name><operator>/</operator><literal type="number">2</literal></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>x</name> <operator>==</operator> <name><name>s</name><operator>-&gt;</operator><name>analysis_rdft_len</name></name><operator>/</operator><literal type="number">2</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">2</literal> <operator>*</operator> <name>x</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>vx</name> <operator>=</operator> <operator>(</operator><name>double</name><operator>)</operator><name>x</name> <operator>*</operator> <name>rate</name> <operator>/</operator> <name><name>s</name><operator>-&gt;</operator><name>analysis_rdft_len</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>xlog</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>vx</name> <operator>=</operator> <call><name>log2</name><argument_list>(<argument><expr><literal type="number">0.05</literal><operator>*</operator><name>vx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ya</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>dump_buf</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>yb</name> <operator>=</operator> <ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>min_phase</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name>i</name> <operator>&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr> ?</condition><then> <expr><call><name>hypotf</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>analysis_buf</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>analysis_buf</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name><name>s</name><operator>-&gt;</operator><name>analysis_buf</name><index>[<expr><name>i</name></expr>]</index></name></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>min_phase</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>yb</name> <operator>=</operator> <call><name>fabs</name><argument_list>(<argument><expr><name>yb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ylog</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ya</name> <operator>=</operator> <literal type="number">20.0</literal> <operator>*</operator> <call><name>log10</name><argument_list>(<argument><expr><call><name>fabs</name><argument_list>(<argument><expr><name>ya</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>yb</name> <operator>=</operator> <literal type="number">20.0</literal> <operator>*</operator> <call><name>log10</name><argument_list>(<argument><expr><call><name>fabs</name><argument_list>(<argument><expr><name>yb</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"%17.10f %17.10f %17.10f\n"</literal></expr></argument>, <argument><expr><name>vx</name></expr></argument>, <argument><expr><name>ya</name></expr></argument>, <argument><expr><name>yb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>double</name></type> <name>entry_func</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>freq</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>gain</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name>p</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>FIREqualizerContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>nb_gain_entry</name></name> <operator>&gt;=</operator> <name>NB_GAIN_ENTRY_MAX</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"entry table overflow.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>gain_entry_err</name></name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>isnan</name><argument_list>(<argument><expr><name>freq</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"nan frequency (%g, %g).\n"</literal></expr></argument>, <argument><expr><name>freq</name></expr></argument>, <argument><expr><name>gain</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>gain_entry_err</name></name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>nb_gain_entry</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>freq</name> <operator>&lt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>gain_entry_tbl</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>nb_gain_entry</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>freq</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"unsorted frequency (%g, %g).\n"</literal></expr></argument>, <argument><expr><name>freq</name></expr></argument>, <argument><expr><name>gain</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>gain_entry_err</name></name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>gain_entry_tbl</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>nb_gain_entry</name></name></expr>]</index></name><operator>.</operator><name>freq</name> <operator>=</operator> <name>freq</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>gain_entry_tbl</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>nb_gain_entry</name></name></expr>]</index></name><operator>.</operator><name>gain</name> <operator>=</operator> <name>gain</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>nb_gain_entry</name></name><operator>++</operator></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>gain_entry_compare</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>memb</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>double</name> <modifier>*</modifier></type><name>freq</name> <init>= <expr><name>key</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>GainEntry</name> <modifier>*</modifier></type><name>entry</name> <init>= <expr><name>memb</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>freq</name> <operator>&lt;</operator> <name><name>entry</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>freq</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>freq</name> <operator>&gt;</operator> <name><name>entry</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>freq</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>double</name></type> <name>gain_interpolate_func</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>freq</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name>p</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>FIREqualizerContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GainEntry</name> <modifier>*</modifier></type><name>res</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>d0</name></decl>, <decl><type ref="prev"/><name>d1</name></decl>, <decl><type ref="prev"/><name>d</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>isnan</name><argument_list>(<argument><expr><name>freq</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>freq</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>nb_gain_entry</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>freq</name> <operator>&lt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>gain_entry_tbl</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>freq</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name><name>s</name><operator>-&gt;</operator><name>gain_entry_tbl</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>gain</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>freq</name> <operator>&gt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>gain_entry_tbl</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>nb_gain_entry</name></name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>freq</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name><name>s</name><operator>-&gt;</operator><name>gain_entry_tbl</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>nb_gain_entry</name></name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>gain</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>bsearch</name><argument_list>(<argument><expr><operator>&amp;</operator><name>freq</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gain_entry_tbl</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>nb_gain_entry</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>res</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>gain_entry_compare</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>d</name> <operator>=</operator> <name><name>res</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>freq</name> <operator>-</operator> <name><name>res</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>freq</name></expr>;</expr_stmt>

<expr_stmt><expr><name>d0</name> <operator>=</operator> <name>freq</name> <operator>-</operator> <name><name>res</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>freq</name></expr>;</expr_stmt>

<expr_stmt><expr><name>d1</name> <operator>=</operator> <name><name>res</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>freq</name> <operator>-</operator> <name>freq</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>d0</name> <operator>&amp;&amp;</operator> <name>d1</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>(</operator><name>d0</name> <operator>*</operator> <name><name>res</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>gain</name> <operator>+</operator> <name>d1</name> <operator>*</operator> <name><name>res</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>gain</name><operator>)</operator> <operator>/</operator> <name>d</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>d0</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name><name>res</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>gain</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name><name>res</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>gain</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>double</name></type> <name>cubic_interpolate_func</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>freq</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name>p</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>FIREqualizerContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GainEntry</name> <modifier>*</modifier></type><name>res</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>x2</name></decl>, <decl><type ref="prev"/><name>x3</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>, <decl><type ref="prev"/><name>c</name></decl>, <decl><type ref="prev"/><name>d</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>m0</name></decl>, <decl><type ref="prev"/><name>m1</name></decl>, <decl><type ref="prev"/><name>m2</name></decl>, <decl><type ref="prev"/><name>msum</name></decl>, <decl><type ref="prev"/><name>unit</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>nb_gain_entry</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>freq</name> <operator>&lt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>gain_entry_tbl</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>freq</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name><name>s</name><operator>-&gt;</operator><name>gain_entry_tbl</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>gain</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>freq</name> <operator>&gt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>gain_entry_tbl</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>nb_gain_entry</name></name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>freq</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name><name>s</name><operator>-&gt;</operator><name>gain_entry_tbl</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>nb_gain_entry</name></name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>gain</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>bsearch</name><argument_list>(<argument><expr><operator>&amp;</operator><name>freq</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gain_entry_tbl</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>nb_gain_entry</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>res</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>gain_entry_compare</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>unit</name> <operator>=</operator> <name><name>res</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>freq</name> <operator>-</operator> <name><name>res</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>freq</name></expr>;</expr_stmt>

<expr_stmt><expr><name>m0</name> <operator>=</operator> <ternary><condition><expr><name>res</name> <operator>!=</operator> <name><name>s</name><operator>-&gt;</operator><name>gain_entry_tbl</name></name></expr> ?</condition><then>

<expr><name>unit</name> <operator>*</operator> <operator>(</operator><name><name>res</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>gain</name> <operator>-</operator> <name><name>res</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>gain</name><operator>)</operator> <operator>/</operator> <operator>(</operator><name><name>res</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>freq</name> <operator>-</operator> <name><name>res</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>freq</name><operator>)</operator></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>m1</name> <operator>=</operator> <name><name>res</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>gain</name> <operator>-</operator> <name><name>res</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>gain</name></expr>;</expr_stmt>

<expr_stmt><expr><name>m2</name> <operator>=</operator> <ternary><condition><expr><name>res</name> <operator>!=</operator> <name><name>s</name><operator>-&gt;</operator><name>gain_entry_tbl</name></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>nb_gain_entry</name></name> <operator>-</operator> <literal type="number">2</literal></expr> ?</condition><then>

<expr><name>unit</name> <operator>*</operator> <operator>(</operator><name><name>res</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>gain</name> <operator>-</operator> <name><name>res</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>gain</name><operator>)</operator> <operator>/</operator> <operator>(</operator><name><name>res</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>freq</name> <operator>-</operator> <name><name>res</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>freq</name><operator>)</operator></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>msum</name> <operator>=</operator> <call><name>fabs</name><argument_list>(<argument><expr><name>m0</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>fabs</name><argument_list>(<argument><expr><name>m1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>m0</name> <operator>=</operator> <ternary><condition><expr><name>msum</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><operator>(</operator><call><name>fabs</name><argument_list>(<argument><expr><name>m0</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>m1</name> <operator>+</operator> <call><name>fabs</name><argument_list>(<argument><expr><name>m1</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>m0</name><operator>)</operator> <operator>/</operator> <name>msum</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>msum</name> <operator>=</operator> <call><name>fabs</name><argument_list>(<argument><expr><name>m1</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>fabs</name><argument_list>(<argument><expr><name>m2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>m1</name> <operator>=</operator> <ternary><condition><expr><name>msum</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><operator>(</operator><call><name>fabs</name><argument_list>(<argument><expr><name>m1</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>m2</name> <operator>+</operator> <call><name>fabs</name><argument_list>(<argument><expr><name>m2</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>m1</name><operator>)</operator> <operator>/</operator> <name>msum</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>d</name> <operator>=</operator> <name><name>res</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>gain</name></expr>;</expr_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <name>m0</name></expr>;</expr_stmt>

<expr_stmt><expr><name>b</name> <operator>=</operator> <literal type="number">3</literal> <operator>*</operator> <name><name>res</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>gain</name> <operator>-</operator> <name>m1</name> <operator>-</operator> <literal type="number">2</literal> <operator>*</operator> <name>c</name> <operator>-</operator> <literal type="number">3</literal> <operator>*</operator> <name>d</name></expr>;</expr_stmt>

<expr_stmt><expr><name>a</name> <operator>=</operator> <name><name>res</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>gain</name> <operator>-</operator> <name>b</name> <operator>-</operator> <name>c</name> <operator>-</operator> <name>d</name></expr>;</expr_stmt>

<expr_stmt><expr><name>x</name> <operator>=</operator> <operator>(</operator><name>freq</name> <operator>-</operator> <name><name>res</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>freq</name><operator>)</operator> <operator>/</operator> <name>unit</name></expr>;</expr_stmt>

<expr_stmt><expr><name>x2</name> <operator>=</operator> <name>x</name> <operator>*</operator> <name>x</name></expr>;</expr_stmt>

<expr_stmt><expr><name>x3</name> <operator>=</operator> <name>x2</name> <operator>*</operator> <name>x</name></expr>;</expr_stmt>

<return>return <expr><name>a</name> <operator>*</operator> <name>x3</name> <operator>+</operator> <name>b</name> <operator>*</operator> <name>x2</name> <operator>+</operator> <name>c</name> <operator>*</operator> <name>x</name> <operator>+</operator> <name>d</name></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>var_names</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="string">"f"</literal></expr>,

<expr><literal type="string">"sr"</literal></expr>,

<expr><literal type="string">"ch"</literal></expr>,

<expr><literal type="string">"chid"</literal></expr>,

<expr><literal type="string">"chs"</literal></expr>,

<expr><literal type="string">"chlayout"</literal></expr>,

<expr><name>NULL</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<enum>enum <name>VarOffset</name> <block>{

<decl><name>VAR_F</name></decl>,

<decl><name>VAR_SR</name></decl>,

<decl><name>VAR_CH</name></decl>,

<decl><name>VAR_CHID</name></decl>,

<decl><name>VAR_CHS</name></decl>,

<decl><name>VAR_CHLAYOUT</name></decl>,

<decl><name>VAR_NB</name></decl>

}</block>;</enum>

<function><type><specifier>static</specifier> <name>void</name></type> <name>generate_min_phase_kernel</name><parameter_list>(<parameter><decl><type><name>FIREqualizerContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>rdft_buf</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>k</name></decl>, <decl><type ref="prev"/><name>cepstrum_len</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>cepstrum_len</name></name></expr></init></decl>, <decl><type ref="prev"/><name>rdft_len</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>rdft_len</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>norm</name> <init>= <expr><literal type="number">2.0</literal> <operator>/</operator> <name>cepstrum_len</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>minval</name> <init>= <expr><literal type="number">1e-7</literal> <operator>/</operator> <name>rdft_len</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>cepstrum_buf</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>cepstrum_len</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>cepstrum_buf</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>cepstrum_buf</name></name></expr></argument>, <argument><expr><name>rdft_buf</name></expr></argument>, <argument><expr><name>rdft_len</name><operator>/</operator><literal type="number">2</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>rdft_buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>cepstrum_buf</name></name> <operator>+</operator> <name>cepstrum_len</name> <operator>-</operator> <name>rdft_len</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>rdft_buf</name> <operator>+</operator> <name>rdft_len</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>rdft_len</name><operator>/</operator><literal type="number">2</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>rdft_buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_rdft_calc</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>cepstrum_rdft</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>cepstrum_buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>cepstrum_buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>log</name><argument_list>(<argument><expr><call><name>FFMAX</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>cepstrum_buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>minval</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>cepstrum_buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>log</name><argument_list>(<argument><expr><call><name>FFMAX</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>cepstrum_buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>minval</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">2</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>cepstrum_len</name></expr>;</condition> <incr><expr><name>k</name> <operator>+=</operator> <literal type="number">2</literal></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>cepstrum_buf</name><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <call><name>log</name><argument_list>(<argument><expr><call><name>FFMAX</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>cepstrum_buf</name><index>[<expr><name>k</name></expr>]</index></name></expr></argument>, <argument><expr><name>minval</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>cepstrum_buf</name><index>[<expr><name>k</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>av_rdft_calc</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>cepstrum_irdft</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>cepstrum_buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>cepstrum_buf</name></name> <operator>+</operator> <name>cepstrum_len</name><operator>/</operator><literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name>cepstrum_len</name><operator>/</operator><literal type="number">2</literal> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>cepstrum_buf</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>cepstrum_len</name><operator>/</operator><literal type="number">2</literal></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>cepstrum_buf</name><index>[<expr><name>k</name></expr>]</index></name> <operator>*=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>av_rdft_calc</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>cepstrum_rdft</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>cepstrum_buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>cepstrum_buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>exp</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>cepstrum_buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name>norm</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>norm</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>cepstrum_buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>exp</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>cepstrum_buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name>norm</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>norm</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">2</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>cepstrum_len</name></expr>;</condition> <incr><expr><name>k</name> <operator>+=</operator> <literal type="number">2</literal></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>double</name></type> <name>mag</name> <init>= <expr><call><name>exp</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>cepstrum_buf</name><index>[<expr><name>k</name></expr>]</index></name> <operator>*</operator> <name>norm</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>norm</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>ph</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>cepstrum_buf</name><index>[<expr><name>k</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name>norm</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>cepstrum_buf</name><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <name>mag</name> <operator>*</operator> <call><name>cos</name><argument_list>(<argument><expr><name>ph</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>cepstrum_buf</name><index>[<expr><name>k</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>mag</name> <operator>*</operator> <call><name>sin</name><argument_list>(<argument><expr><name>ph</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>av_rdft_calc</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>cepstrum_irdft</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>cepstrum_buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>rdft_buf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>rdft_len</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>rdft_buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>rdft_buf</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>cepstrum_buf</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>fir_len</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>rdft_buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>dumpfile</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>analysis_buf</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>analysis_rdft_len</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>analysis_buf</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>analysis_buf</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>cepstrum_buf</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>fir_len</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>analysis_buf</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>generate_kernel</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>gain</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>gain_entry</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>FIREqualizerContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>inlink</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>inputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>gain_entry_func_names</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="string">"entry"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>gain_func_names</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="string">"gain_interpolate"</literal></expr>, <expr><literal type="string">"cubic_interpolate"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr></init></decl>;</decl_stmt>

<function_decl><type><name>double</name></type> (<modifier>*</modifier><name>gain_entry_funcs</name><index>[]</index>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>double</name></type></decl></parameter>, <parameter><decl><type><name>double</name></type></decl></parameter>)</parameter_list> <init>= <expr><block>{ <expr><name>entry_func</name></expr></block></expr></init><operator>,</operator> NULL</function_decl> </block_content>}</block></function><empty_stmt>;</empty_stmt>

<function_decl><type><name>double</name></type> (<modifier>*</modifier><name>gain_funcs</name><index>[]</index>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>double</name></type></decl></parameter>)</parameter_list> <init>= <expr><block>{ <expr><name>gain_interpolate_func</name></expr></block></expr></init><operator>,</operator> cubic_interpolate_func<operator>,</operator> NULL</function_decl> };

<decl_stmt><decl><type><name>double</name></type> <name><name>vars</name><index>[<expr><name>VAR_NB</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVExpr</name> <modifier>*</modifier></type><name>gain_expr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>, <decl><type ref="prev"/><name>k</name></decl>, <decl><type ref="prev"/><name>center</name></decl>, <decl><type ref="prev"/><name>ch</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>xlog</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>scale</name></name> <operator>==</operator> <name>SCALE_LOGLIN</name> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>scale</name></name> <operator>==</operator> <name>SCALE_LOGLOG</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ylog</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>scale</name></name> <operator>==</operator> <name>SCALE_LINLOG</name> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>scale</name></name> <operator>==</operator> <name>SCALE_LOGLOG</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>dump_fp</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>nb_gain_entry</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>gain_entry_err</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>gain_entry</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>double</name></type> <name>result</name> <init>= <expr><literal type="number">0.0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>av_expr_parse_and_eval</name><argument_list>(<argument><expr><operator>&amp;</operator><name>result</name></expr></argument>, <argument><expr><name>gain_entry</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,

<argument><expr><name>gain_entry_func_names</name></expr></argument>, <argument><expr><name>gain_entry_funcs</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>gain_entry_err</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name><name>s</name><operator>-&gt;</operator><name>gain_entry_err</name></name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"nb_gain_entry = %d.\n"</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>nb_gain_entry</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>av_expr_parse</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gain_expr</name></expr></argument>, <argument><expr><name>gain</name></expr></argument>, <argument><expr><name>var_names</name></expr></argument>,

<argument><expr><name>gain_func_names</name></expr></argument>, <argument><expr><name>gain_funcs</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>dumpfile</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>dump_buf</name></name> <operator>||</operator> <operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>analysis_rdft</name></name> <operator>||</operator> <operator>!</operator><operator>(</operator><name>dump_fp</name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>dumpfile</name></name></expr></argument>, <argument><expr><literal type="string">"w"</literal></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"dumping failed.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>vars</name><index>[<expr><name>VAR_CHS</name></expr>]</index></name> <operator>=</operator> <name><name>inlink</name><operator>-&gt;</operator><name>channels</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vars</name><index>[<expr><name>VAR_CHLAYOUT</name></expr>]</index></name> <operator>=</operator> <name><name>inlink</name><operator>-&gt;</operator><name>channel_layout</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vars</name><index>[<expr><name>VAR_SR</name></expr>]</index></name> <operator>=</operator> <name><name>inlink</name><operator>-&gt;</operator><name>sample_rate</name></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>ch</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ch</name> <operator>&lt;</operator> <name><name>inlink</name><operator>-&gt;</operator><name>channels</name></name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>rdft_buf</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>kernel_tmp_buf</name></name> <operator>+</operator> <name>ch</name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>rdft_len</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>result</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>vars</name><index>[<expr><name>VAR_CH</name></expr>]</index></name> <operator>=</operator> <name>ch</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vars</name><index>[<expr><name>VAR_CHID</name></expr>]</index></name> <operator>=</operator> <call><name>av_channel_layout_extract_channel</name><argument_list>(<argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>channel_layout</name></name></expr></argument>, <argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vars</name><index>[<expr><name>VAR_F</name></expr>]</index></name> <operator>=</operator> <literal type="number">0.0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>xlog</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>vars</name><index>[<expr><name>VAR_F</name></expr>]</index></name> <operator>=</operator> <call><name>log2</name><argument_list>(<argument><expr><literal type="number">0.05</literal> <operator>*</operator> <name><name>vars</name><index>[<expr><name>VAR_F</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>av_expr_eval</name><argument_list>(<argument><expr><name>gain_expr</name></expr></argument>, <argument><expr><name>vars</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>analysis_buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><name>ylog</name></expr> ?</condition><then> <expr><call><name>pow</name><argument_list>(<argument><expr><literal type="number">10.0</literal></expr></argument>, <argument><expr><literal type="number">0.05</literal> <operator>*</operator> <name>result</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>result</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vars</name><index>[<expr><name>VAR_F</name></expr>]</index></name> <operator>=</operator> <literal type="number">0.5</literal> <operator>*</operator> <name><name>inlink</name><operator>-&gt;</operator><name>sample_rate</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>xlog</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>vars</name><index>[<expr><name>VAR_F</name></expr>]</index></name> <operator>=</operator> <call><name>log2</name><argument_list>(<argument><expr><literal type="number">0.05</literal> <operator>*</operator> <name><name>vars</name><index>[<expr><name>VAR_F</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>av_expr_eval</name><argument_list>(<argument><expr><name>gain_expr</name></expr></argument>, <argument><expr><name>vars</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>analysis_buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><name>ylog</name></expr> ?</condition><then> <expr><call><name>pow</name><argument_list>(<argument><expr><literal type="number">10.0</literal></expr></argument>, <argument><expr><literal type="number">0.05</literal> <operator>*</operator> <name>result</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>result</name></expr></else></ternary></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>analysis_rdft_len</name></name><operator>/</operator><literal type="number">2</literal></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>vars</name><index>[<expr><name>VAR_F</name></expr>]</index></name> <operator>=</operator> <name>k</name> <operator>*</operator> <operator>(</operator><operator>(</operator><name>double</name><operator>)</operator><name><name>inlink</name><operator>-&gt;</operator><name>sample_rate</name></name> <operator>/</operator><operator>(</operator><name>double</name><operator>)</operator><name><name>s</name><operator>-&gt;</operator><name>analysis_rdft_len</name></name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>xlog</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>vars</name><index>[<expr><name>VAR_F</name></expr>]</index></name> <operator>=</operator> <call><name>log2</name><argument_list>(<argument><expr><literal type="number">0.05</literal> <operator>*</operator> <name><name>vars</name><index>[<expr><name>VAR_F</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>av_expr_eval</name><argument_list>(<argument><expr><name>gain_expr</name></expr></argument>, <argument><expr><name>vars</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>analysis_buf</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>k</name></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><name>ylog</name></expr> ?</condition><then> <expr><call><name>pow</name><argument_list>(<argument><expr><literal type="number">10.0</literal></expr></argument>, <argument><expr><literal type="number">0.05</literal> <operator>*</operator> <name>result</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>min_phase</name></name></expr> ?</condition><then> <expr><call><name>fabs</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>result</name></expr></else></ternary></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>analysis_buf</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>k</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0.0</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>dump_buf</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>dump_buf</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>analysis_buf</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>analysis_rdft_len</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>analysis_buf</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_rdft_calc</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>analysis_irdft</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>analysis_buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>center</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>fir_len</name></name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;=</operator> <name>center</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>double</name></type> <name>u</name> <init>= <expr><name>k</name> <operator>*</operator> <operator>(</operator><name>M_PI</name><operator>/</operator><name>center</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>win</name></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>wfunc</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>WFUNC_RECTANGULAR</name></expr>:</case>

<expr_stmt><expr><name>win</name> <operator>=</operator> <literal type="number">1.0</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>WFUNC_HANN</name></expr>:</case>

<expr_stmt><expr><name>win</name> <operator>=</operator> <literal type="number">0.5</literal> <operator>+</operator> <literal type="number">0.5</literal> <operator>*</operator> <call><name>cos</name><argument_list>(<argument><expr><name>u</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>WFUNC_HAMMING</name></expr>:</case>

<expr_stmt><expr><name>win</name> <operator>=</operator> <literal type="number">0.53836</literal> <operator>+</operator> <literal type="number">0.46164</literal> <operator>*</operator> <call><name>cos</name><argument_list>(<argument><expr><name>u</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>WFUNC_BLACKMAN</name></expr>:</case>

<expr_stmt><expr><name>win</name> <operator>=</operator> <literal type="number">0.42</literal> <operator>+</operator> <literal type="number">0.5</literal> <operator>*</operator> <call><name>cos</name><argument_list>(<argument><expr><name>u</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">0.08</literal> <operator>*</operator> <call><name>cos</name><argument_list>(<argument><expr><literal type="number">2</literal><operator>*</operator><name>u</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>WFUNC_NUTTALL3</name></expr>:</case>

<expr_stmt><expr><name>win</name> <operator>=</operator> <literal type="number">0.40897</literal> <operator>+</operator> <literal type="number">0.5</literal> <operator>*</operator> <call><name>cos</name><argument_list>(<argument><expr><name>u</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">0.09103</literal> <operator>*</operator> <call><name>cos</name><argument_list>(<argument><expr><literal type="number">2</literal><operator>*</operator><name>u</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>WFUNC_MNUTTALL3</name></expr>:</case>

<expr_stmt><expr><name>win</name> <operator>=</operator> <literal type="number">0.4243801</literal> <operator>+</operator> <literal type="number">0.4973406</literal> <operator>*</operator> <call><name>cos</name><argument_list>(<argument><expr><name>u</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">0.0782793</literal> <operator>*</operator> <call><name>cos</name><argument_list>(<argument><expr><literal type="number">2</literal><operator>*</operator><name>u</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>WFUNC_NUTTALL</name></expr>:</case>

<expr_stmt><expr><name>win</name> <operator>=</operator> <literal type="number">0.355768</literal> <operator>+</operator> <literal type="number">0.487396</literal> <operator>*</operator> <call><name>cos</name><argument_list>(<argument><expr><name>u</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">0.144232</literal> <operator>*</operator> <call><name>cos</name><argument_list>(<argument><expr><literal type="number">2</literal><operator>*</operator><name>u</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">0.012604</literal> <operator>*</operator> <call><name>cos</name><argument_list>(<argument><expr><literal type="number">3</literal><operator>*</operator><name>u</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>WFUNC_BNUTTALL</name></expr>:</case>

<expr_stmt><expr><name>win</name> <operator>=</operator> <literal type="number">0.3635819</literal> <operator>+</operator> <literal type="number">0.4891775</literal> <operator>*</operator> <call><name>cos</name><argument_list>(<argument><expr><name>u</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">0.1365995</literal> <operator>*</operator> <call><name>cos</name><argument_list>(<argument><expr><literal type="number">2</literal><operator>*</operator><name>u</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">0.0106411</literal> <operator>*</operator> <call><name>cos</name><argument_list>(<argument><expr><literal type="number">3</literal><operator>*</operator><name>u</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>WFUNC_BHARRIS</name></expr>:</case>

<expr_stmt><expr><name>win</name> <operator>=</operator> <literal type="number">0.35875</literal> <operator>+</operator> <literal type="number">0.48829</literal> <operator>*</operator> <call><name>cos</name><argument_list>(<argument><expr><name>u</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">0.14128</literal> <operator>*</operator> <call><name>cos</name><argument_list>(<argument><expr><literal type="number">2</literal><operator>*</operator><name>u</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">0.01168</literal> <operator>*</operator> <call><name>cos</name><argument_list>(<argument><expr><literal type="number">3</literal><operator>*</operator><name>u</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>WFUNC_TUKEY</name></expr>:</case>

<expr_stmt><expr><name>win</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>u</name> <operator>&lt;=</operator> <literal type="number">0.5</literal> <operator>*</operator> <name>M_PI</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1.0</literal></expr> </then><else>: <expr><operator>(</operator><literal type="number">0.5</literal> <operator>+</operator> <literal type="number">0.5</literal> <operator>*</operator> <call><name>cos</name><argument_list>(<argument><expr><literal type="number">2</literal><operator>*</operator><name>u</name> <operator>-</operator> <name>M_PI</name></expr></argument>)</argument_list></call><operator>)</operator></expr></else></ternary></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></switch>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>analysis_buf</name><index>[<expr><name>k</name></expr>]</index></name> <operator>*=</operator> <operator>(</operator><literal type="number">2.0</literal><operator>/</operator><name><name>s</name><operator>-&gt;</operator><name>analysis_rdft_len</name></name><operator>)</operator> <operator>*</operator> <operator>(</operator><literal type="number">2.0</literal><operator>/</operator><name><name>s</name><operator>-&gt;</operator><name>rdft_len</name></name><operator>)</operator> <operator>*</operator> <name>win</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>k</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>analysis_buf</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>analysis_rdft_len</name></name> <operator>-</operator> <name>k</name></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>analysis_buf</name><index>[<expr><name>k</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>analysis_buf</name></name> <operator>+</operator> <name>center</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>analysis_rdft_len</name></name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>fir_len</name></name><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>analysis_buf</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>rdft_buf</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>analysis_buf</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>rdft_len</name></name><operator>/</operator><literal type="number">2</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>analysis_buf</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>rdft_buf</name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>rdft_len</name></name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>analysis_buf</name></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>analysis_rdft_len</name></name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>rdft_len</name></name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>rdft_len</name></name><operator>/</operator><literal type="number">2</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>analysis_buf</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>min_phase</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>generate_min_phase_kernel</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>rdft_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_rdft_calc</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>rdft</name></name></expr></argument>, <argument><expr><name>rdft_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>rdft_len</name></name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>isnan</name><argument_list>(<argument><expr><name><name>rdft_buf</name><index>[<expr><name>k</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>isinf</name><argument_list>(<argument><expr><name><name>rdft_buf</name><index>[<expr><name>k</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"filter kernel contains nan or infinity.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_expr_free</name><argument_list>(<argument><expr><name>gain_expr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>dump_fp</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>dump_fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>min_phase</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>rdft_buf</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>rdft_len</name></name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>rdft_buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>rdft_len</name></name><operator>/</operator><literal type="number">2</literal></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>rdft_buf</name><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <name><name>rdft_buf</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>k</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name><name>rdft_buf</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>rdft_len</name></name><operator>/</operator><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>rdft_buf</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>rdft_len</name></name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>dump_fp</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>dump_fir</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>dump_fp</name></expr></argument>, <argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>multi</name></name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>kernel_buf</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>kernel_tmp_buf</name></name></expr></argument>, <argument><expr><operator>(</operator><ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>multi</name></name></expr> ?</condition><then> <expr><name><name>inlink</name><operator>-&gt;</operator><name>channels</name></name></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary><operator>)</operator> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>rdft_len</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>kernel_buf</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_expr_free</name><argument_list>(<argument><expr><name>gain_expr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>dump_fp</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>dump_fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

}

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SELECT_GAIN</name><parameter_list>(<parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(s-&gt;gain_cmd ? s-&gt;gain_cmd : s-&gt;gain)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SELECT_GAIN_ENTRY</name><parameter_list>(<parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(s-&gt;gain_entry_cmd ? s-&gt;gain_entry_cmd : s-&gt;gain_entry)</cpp:value></cpp:define>

static <function><type><name>int</name></type> <name>config_input</name><parameter_list>(<parameter><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>inlink</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>inlink</name><operator>-&gt;</operator><name>dst</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>FIREqualizerContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>rdft_bits</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>common_uninit</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>next_pts</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>frame_nsamples_max</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>fir_len</name></name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><literal type="number">2</literal> <operator>*</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name><name>inlink</name><operator>-&gt;</operator><name>sample_rate</name></name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>delay</name></name><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>remaining</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>fir_len</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>rdft_bits</name> <operator>=</operator> <name>RDFT_BITS_MIN</name></expr>;</init> <condition><expr><name>rdft_bits</name> <operator>&lt;=</operator> <name>RDFT_BITS_MAX</name></expr>;</condition> <incr><expr><name>rdft_bits</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>rdft_len</name></name> <operator>=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>rdft_bits</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>nsamples_max</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>rdft_len</name></name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>fir_len</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>nsamples_max</name></name> <operator>*</operator> <literal type="number">2</literal> <operator>&gt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>fir_len</name></name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>rdft_bits</name> <operator>&gt;</operator> <name>RDFT_BITS_MAX</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"too large delay, please decrease it.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>rdft</name></name> <operator>=</operator> <call><name>av_rdft_init</name><argument_list>(<argument><expr><name>rdft_bits</name></expr></argument>, <argument><expr><name>DFT_R2C</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator> <operator>!</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>irdft</name></name> <operator>=</operator> <call><name>av_rdft_init</name><argument_list>(<argument><expr><name>rdft_bits</name></expr></argument>, <argument><expr><name>IDFT_C2R</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>fft2</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>multi</name></name> <operator>&amp;&amp;</operator> <name><name>inlink</name><operator>-&gt;</operator><name>channels</name></name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>fft_ctx</name></name> <operator>=</operator> <call><name>av_fft_init</name><argument_list>(<argument><expr><name>rdft_bits</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>min_phase</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>cepstrum_bits</name> <init>= <expr><name>rdft_bits</name> <operator>+</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>cepstrum_bits</name> <operator>&gt;</operator> <name>RDFT_BITS_MAX</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"too large delay, please decrease it.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>cepstrum_bits</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>RDFT_BITS_MAX</name></expr></argument>, <argument><expr><name>cepstrum_bits</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>cepstrum_rdft</name></name> <operator>=</operator> <call><name>av_rdft_init</name><argument_list>(<argument><expr><name>cepstrum_bits</name></expr></argument>, <argument><expr><name>DFT_R2C</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>cepstrum_irdft</name></name> <operator>=</operator> <call><name>av_rdft_init</name><argument_list>(<argument><expr><name>cepstrum_bits</name></expr></argument>, <argument><expr><name>IDFT_C2R</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>cepstrum_rdft</name></name> <operator>||</operator> <operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>cepstrum_irdft</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>cepstrum_len</name></name> <operator>=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>cepstrum_bits</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>cepstrum_buf</name></name> <operator>=</operator> <call><name>av_malloc_array</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>cepstrum_len</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>cepstrum_buf</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>cepstrum_buf</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<for>for <control>( <init>;</init> <condition><expr><name>rdft_bits</name> <operator>&lt;=</operator> <name>RDFT_BITS_MAX</name></expr>;</condition> <incr><expr><name>rdft_bits</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>analysis_rdft_len</name></name> <operator>=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>rdft_bits</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>inlink</name><operator>-&gt;</operator><name>sample_rate</name></name> <operator>&lt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>accuracy</name></name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>analysis_rdft_len</name></name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>rdft_bits</name> <operator>&gt;</operator> <name>RDFT_BITS_MAX</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"too small accuracy, please increase it.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>analysis_irdft</name></name> <operator>=</operator> <call><name>av_rdft_init</name><argument_list>(<argument><expr><name>rdft_bits</name></expr></argument>, <argument><expr><name>IDFT_C2R</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>dumpfile</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>analysis_rdft</name></name> <operator>=</operator> <call><name>av_rdft_init</name><argument_list>(<argument><expr><name>rdft_bits</name></expr></argument>, <argument><expr><name>DFT_R2C</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>dump_buf</name></name> <operator>=</operator> <call><name>av_malloc_array</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>analysis_rdft_len</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>dump_buf</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>analysis_buf</name></name> <operator>=</operator> <call><name>av_malloc_array</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>analysis_rdft_len</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>analysis_buf</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>kernel_tmp_buf</name></name> <operator>=</operator> <call><name>av_malloc_array</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>rdft_len</name></name> <operator>*</operator> <operator>(</operator><ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>multi</name></name></expr> ?</condition><then> <expr><name><name>inlink</name><operator>-&gt;</operator><name>channels</name></name></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary><operator>)</operator></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>kernel_tmp_buf</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>kernel_buf</name></name> <operator>=</operator> <call><name>av_malloc_array</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>rdft_len</name></name> <operator>*</operator> <operator>(</operator><ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>multi</name></name></expr> ?</condition><then> <expr><name><name>inlink</name><operator>-&gt;</operator><name>channels</name></name></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary><operator>)</operator></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>kernel_buf</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>conv_buf</name></name> <operator>=</operator> <call><name>av_calloc</name><argument_list>(<argument><expr><literal type="number">2</literal> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>rdft_len</name></name> <operator>*</operator> <name><name>inlink</name><operator>-&gt;</operator><name>channels</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>conv_buf</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>conv_idx</name></name> <operator>=</operator> <call><name>av_calloc</name><argument_list>(<argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>channels</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>conv_idx</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>analysis_buf</name></name> <operator>||</operator> <operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>kernel_tmp_buf</name></name> <operator>||</operator> <operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>kernel_buf</name></name> <operator>||</operator> <operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>conv_buf</name></name> <operator>||</operator> <operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>conv_idx</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"sample_rate = %d, channels = %d, analysis_rdft_len = %d, rdft_len = %d, fir_len = %d, nsamples_max = %d.\n"</literal></expr></argument>,

<argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>sample_rate</name></name></expr></argument>, <argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>channels</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>analysis_rdft_len</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>rdft_len</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>fir_len</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>nsamples_max</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>fixed</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>inlink</name><operator>-&gt;</operator><name>min_samples</name></name> <operator>=</operator> <name><name>inlink</name><operator>-&gt;</operator><name>max_samples</name></name> <operator>=</operator> <name><name>inlink</name><operator>-&gt;</operator><name>partial_buf_size</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>nsamples_max</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><call><name>generate_kernel</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><call><name>SELECT_GAIN</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>SELECT_GAIN_ENTRY</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>filter_frame</name><parameter_list>(<parameter><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>inlink</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>frame</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>inlink</name><operator>-&gt;</operator><name>dst</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>FIREqualizerContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ch</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>min_phase</name></name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>ch</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ch</name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;</operator> <name><name>inlink</name><operator>-&gt;</operator><name>channels</name></name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>fft_ctx</name></name></expr>;</condition> <incr><expr><name>ch</name> <operator>+=</operator> <literal type="number">2</literal></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>fast_convolute2</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>kernel_buf</name></name></expr></argument>, <argument><expr><operator>(</operator><name>FFTComplex</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>conv_buf</name></name> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <name>ch</name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>rdft_len</name></name><operator>)</operator></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>conv_idx</name></name> <operator>+</operator> <name>ch</name></expr></argument>, <argument><expr><operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator> <name><name>frame</name><operator>-&gt;</operator><name>extended_data</name><index>[<expr><name>ch</name></expr>]</index></name></expr></argument>,

<argument><expr><operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator> <name><name>frame</name><operator>-&gt;</operator><name>extended_data</name><index>[<expr><name>ch</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>frame</name><operator>-&gt;</operator><name>nb_samples</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for <control>( <init>;</init> <condition><expr><name>ch</name> <operator>&lt;</operator> <name><name>inlink</name><operator>-&gt;</operator><name>channels</name></name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>fast_convolute</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>kernel_buf</name></name> <operator>+</operator> <operator>(</operator><ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>multi</name></name></expr> ?</condition><then> <expr><name>ch</name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>rdft_len</name></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>conv_buf</name></name> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <name>ch</name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>rdft_len</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>conv_idx</name></name> <operator>+</operator> <name>ch</name></expr></argument>,

<argument><expr><operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator> <name><name>frame</name><operator>-&gt;</operator><name>extended_data</name><index>[<expr><name>ch</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>frame</name><operator>-&gt;</operator><name>nb_samples</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if> <else>else <block>{<block_content>

<for>for <control>(<init><expr><name>ch</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ch</name> <operator>&lt;</operator> <name><name>inlink</name><operator>-&gt;</operator><name>channels</name></name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>fast_convolute_nonlinear</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>kernel_buf</name></name> <operator>+</operator> <operator>(</operator><ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>multi</name></name></expr> ?</condition><then> <expr><name>ch</name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>rdft_len</name></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>conv_buf</name></name> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <name>ch</name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>rdft_len</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>conv_idx</name></name> <operator>+</operator> <name>ch</name></expr></argument>,

<argument><expr><operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator> <name><name>frame</name><operator>-&gt;</operator><name>extended_data</name><index>[<expr><name>ch</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>frame</name><operator>-&gt;</operator><name>nb_samples</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>next_pts</name></name> <operator>=</operator> <name>AV_NOPTS_VALUE</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>frame</name><operator>-&gt;</operator><name>pts</name></name> <operator>!=</operator> <name>AV_NOPTS_VALUE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>next_pts</name></name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>pts</name></name> <operator>+</operator> <call><name>av_rescale_q</name><argument_list>(<argument><expr><name><name>frame</name><operator>-&gt;</operator><name>nb_samples</name></name></expr></argument>, <argument><expr><call><name>av_make_q</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>sample_rate</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>time_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>zero_phase</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>min_phase</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>pts</name></name> <operator>-=</operator> <call><name>av_rescale_q</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>fir_len</name></name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><call><name>av_make_q</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>sample_rate</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>time_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>frame_nsamples_max</name></name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>frame_nsamples_max</name></name></expr></argument>, <argument><expr><name><name>frame</name><operator>-&gt;</operator><name>nb_samples</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>ff_filter_frame</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>outputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>frame</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>request_frame</name><parameter_list>(<parameter><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>outlink</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>outlink</name><operator>-&gt;</operator><name>src</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>FIREqualizerContext</name> <modifier>*</modifier></type><name>s</name><init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_request_frame</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>inputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>AVERROR_EOF</name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>remaining</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>frame_nsamples_max</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>frame</name> <init>= <expr><call><name>ff_get_audio_buffer</name><argument_list>(<argument><expr><name>outlink</name></expr></argument>, <argument><expr><call><name>FFMIN</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>remaining</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>frame_nsamples_max</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>frame</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_samples_set_silence</name><argument_list>(<argument><expr><name><name>frame</name><operator>-&gt;</operator><name>extended_data</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>frame</name><operator>-&gt;</operator><name>nb_samples</name></name></expr></argument>, <argument><expr><name><name>outlink</name><operator>-&gt;</operator><name>channels</name></name></expr></argument>, <argument><expr><name><name>frame</name><operator>-&gt;</operator><name>format</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>pts</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>next_pts</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>remaining</name></name> <operator>-=</operator> <name><name>frame</name><operator>-&gt;</operator><name>nb_samples</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>filter_frame</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>inputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>process_command</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>args</name></decl></parameter>,

<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>res</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>res_len</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>FIREqualizerContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOSYS</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="string">"gain"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>gain_cmd</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>SELECT_GAIN</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><call><name>SELECT_GAIN</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"equal gain, do not rebuild.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>gain_cmd</name> <operator>=</operator> <call><name>av_strdup</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>gain_cmd</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>generate_kernel</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>gain_cmd</name></expr></argument>, <argument><expr><call><name>SELECT_GAIN_ENTRY</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gain_cmd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>gain_cmd</name></name> <operator>=</operator> <name>gain_cmd</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gain_cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="string">"gain_entry"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>gain_entry_cmd</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>SELECT_GAIN_ENTRY</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><call><name>SELECT_GAIN_ENTRY</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"equal gain_entry, do not rebuild.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>gain_entry_cmd</name> <operator>=</operator> <call><name>av_strdup</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>gain_entry_cmd</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>generate_kernel</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><call><name>SELECT_GAIN</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>gain_entry_cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gain_entry_cmd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>gain_entry_cmd</name></name> <operator>=</operator> <name>gain_entry_cmd</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gain_entry_cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVFilterPad</name></type> <name><name>firequalizer_inputs</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"default"</literal></expr>,

<expr><operator>.</operator><name>config_props</name> <operator>=</operator> <name>config_input</name></expr>,

<expr><operator>.</operator><name>filter_frame</name> <operator>=</operator> <name>filter_frame</name></expr>,

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_AUDIO</name></expr>,

<expr><operator>.</operator><name>needs_writable</name> <operator>=</operator> <literal type="number">1</literal></expr>,

}</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVFilterPad</name></type> <name><name>firequalizer_outputs</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"default"</literal></expr>,

<expr><operator>.</operator><name>request_frame</name> <operator>=</operator> <name>request_frame</name></expr>,

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_AUDIO</name></expr>,

}</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFilter</name></type> <name>ff_af_firequalizer</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"firequalizer"</literal></expr>,

<expr><operator>.</operator><name>description</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"Finite Impulse Response Equalizer."</literal></expr></argument>)</argument_list></call></expr>,

<expr><operator>.</operator><name>uninit</name> <operator>=</operator> <name>uninit</name></expr>,

<expr><operator>.</operator><name>query_formats</name> <operator>=</operator> <name>query_formats</name></expr>,

<expr><operator>.</operator><name>process_command</name> <operator>=</operator> <name>process_command</name></expr>,

<expr><operator>.</operator><name>priv_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>FIREqualizerContext</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><operator>.</operator><name>inputs</name> <operator>=</operator> <name>firequalizer_inputs</name></expr>,

<expr><operator>.</operator><name>outputs</name> <operator>=</operator> <name>firequalizer_outputs</name></expr>,

<expr><operator>.</operator><name>priv_class</name> <operator>=</operator> <operator>&amp;</operator><name>firequalizer_class</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

</unit>
