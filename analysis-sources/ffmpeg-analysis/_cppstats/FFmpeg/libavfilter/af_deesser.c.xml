<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavfilter\af_deesser.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/channel_layout.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/opt.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avfilter.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"audio.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"formats.h"</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct <name>DeesserChannel</name> <block>{

<decl_stmt><decl><type><name>double</name></type> <name>s1</name></decl>, <name>s2</name>, <name>s3</name>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>m1</name></decl>, <name>m2</name>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>ratioA</name></decl>, <name>ratioB</name>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>iirSampleA</name></decl>, <name>iirSampleB</name>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>flip</name></decl>;</decl_stmt>

}</block></struct></type> <name>DeesserChannel</name>;</typedef>

<typedef>typedef <type><struct>struct <name>DeesserContext</name> <block>{

<decl_stmt><decl><type><specifier>const</specifier> <name>AVClass</name> <modifier>*</modifier></type><name>class</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>intensity</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>max</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>frequency</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>mode</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DeesserChannel</name> <modifier>*</modifier></type><name>chan</name></decl>;</decl_stmt>

}</block></struct></type> <name>DeesserContext</name>;</typedef>

<enum>enum <name>OutModes</name> <block>{

<decl><name>IN_MODE</name></decl>,

<decl><name>OUT_MODE</name></decl>,

<decl><name>ESS_MODE</name></decl>,

<decl><name>NB_MODES</name></decl>

}</block>;</enum>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OFFSET</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>offsetof(DeesserContext, x)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>A</name></cpp:macro> <cpp:value>AV_OPT_FLAG_AUDIO_PARAM|AV_OPT_FLAG_FILTERING_PARAM</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVOption</name></type> <name><name>deesser_options</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><literal type="string">"i"</literal></expr>, <expr><literal type="string">"set intensity"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>intensity</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_DOUBLE</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name><operator>=</operator><literal type="number">0.0</literal></expr>}</block></expr>, <expr><literal type="number">0.0</literal></expr>, <expr><literal type="number">1.0</literal></expr>, <expr><name>A</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"m"</literal></expr>, <expr><literal type="string">"set max deessing"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>max</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_DOUBLE</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name><operator>=</operator><literal type="number">0.5</literal></expr>}</block></expr>, <expr><literal type="number">0.0</literal></expr>, <expr><literal type="number">1.0</literal></expr>, <expr><name>A</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"f"</literal></expr>, <expr><literal type="string">"set frequency"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>frequency</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_DOUBLE</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name><operator>=</operator><literal type="number">0.5</literal></expr>}</block></expr>, <expr><literal type="number">0.0</literal></expr>, <expr><literal type="number">1.0</literal></expr>, <expr><name>A</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"s"</literal></expr>, <expr><literal type="string">"set output mode"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>OUT_MODE</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NB_MODES</name><operator>-</operator><literal type="number">1</literal></expr>, <expr><name>A</name></expr>, <expr><literal type="string">"mode"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"i"</literal></expr>, <expr><literal type="string">"input"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>IN_MODE</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>A</name></expr>, <expr><literal type="string">"mode"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"o"</literal></expr>, <expr><literal type="string">"output"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>OUT_MODE</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>A</name></expr>, <expr><literal type="string">"mode"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"e"</literal></expr>, <expr><literal type="string">"ess"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>ESS_MODE</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>A</name></expr>, <expr><literal type="string">"mode"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>AVFILTER_DEFINE_CLASS</name><argument_list>(<argument><expr><name>deesser</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function><type><specifier>static</specifier> <name>int</name></type> <name>query_formats</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVFilterFormats</name> <modifier>*</modifier></type><name>formats</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFilterChannelLayouts</name> <modifier>*</modifier></type><name>layouts</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>enum</name> <name>AVSampleFormat</name></name></type> <name><name>sample_fmts</name><index>[]</index></name> <init>= <expr><block>{

<expr><name>AV_SAMPLE_FMT_DBLP</name></expr>,

<expr><name>AV_SAMPLE_FMT_NONE</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name>formats</name> <operator>=</operator> <call><name>ff_make_format_list</name><argument_list>(<argument><expr><name>sample_fmts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>formats</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_set_common_formats</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>formats</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>layouts</name> <operator>=</operator> <call><name>ff_all_channel_counts</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>layouts</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_set_common_channel_layouts</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>layouts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>formats</name> <operator>=</operator> <call><name>ff_all_samplerates</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>ff_set_common_samplerates</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>formats</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>config_input</name><parameter_list>(<parameter><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>inlink</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>inlink</name><operator>-&gt;</operator><name>dst</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DeesserContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>chan</name></name> <operator>=</operator> <call><name>av_calloc</name><argument_list>(<argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>channels</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>chan</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>chan</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>inlink</name><operator>-&gt;</operator><name>channels</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>DeesserChannel</name> <modifier>*</modifier></type><name>chan</name> <init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>chan</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>chan</name><operator>-&gt;</operator><name>ratioA</name></name> <operator>=</operator> <name><name>chan</name><operator>-&gt;</operator><name>ratioB</name></name> <operator>=</operator> <literal type="number">1.0</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>filter_frame</name><parameter_list>(<parameter><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>inlink</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>in</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>inlink</name><operator>-&gt;</operator><name>dst</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>outlink</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>outputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DeesserContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>out</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>av_frame_is_writable</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>out</name> <operator>=</operator> <name>in</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>out</name> <operator>=</operator> <call><name>ff_get_audio_buffer</name><argument_list>(<argument><expr><name>outlink</name></expr></argument>, <argument><expr><name><name>in</name><operator>-&gt;</operator><name>nb_samples</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>out</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_frame_copy_props</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>ch</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>ch</name> <operator>&lt;</operator> <name><name>inlink</name><operator>-&gt;</operator><name>channels</name></name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>DeesserChannel</name> <modifier>*</modifier></type><name>dec</name> <init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>chan</name><index>[<expr><name>ch</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><operator>(</operator><name>double</name> <operator>*</operator><operator>)</operator><name><name>in</name><operator>-&gt;</operator><name>extended_data</name><index>[<expr><name>ch</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><operator>(</operator><name>double</name> <operator>*</operator><operator>)</operator><name><name>out</name><operator>-&gt;</operator><name>extended_data</name><index>[<expr><name>ch</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>overallscale</name> <init>= <expr><ternary><condition><expr><name><name>inlink</name><operator>-&gt;</operator><name>sample_rate</name></name> <operator>&lt;</operator> <literal type="number">44100</literal></expr> ?</condition><then> <expr><literal type="number">44100.0</literal> <operator>/</operator> <name><name>inlink</name><operator>-&gt;</operator><name>sample_rate</name></name></expr> </then><else>: <expr><name><name>inlink</name><operator>-&gt;</operator><name>sample_rate</name></name> <operator>/</operator> <literal type="number">44100.0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>intensity</name> <init>= <expr><call><name>pow</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>intensity</name></name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call> <operator>*</operator> <operator>(</operator><literal type="number">8192</literal> <operator>/</operator> <name>overallscale</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>maxdess</name> <init>= <expr><literal type="number">1.0</literal> <operator>/</operator> <call><name>pow</name><argument_list>(<argument><expr><literal type="number">10.0</literal></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>max</name></name> <operator>-</operator> <literal type="number">1.0</literal><operator>)</operator> <operator>*</operator> <literal type="number">48.0</literal><operator>)</operator> <operator>/</operator> <literal type="number">20</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>iirAmount</name> <init>= <expr><call><name>pow</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>frequency</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>/</operator> <name>overallscale</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>offset</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>sense</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>recovery</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>attackspeed</name></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>in</name><operator>-&gt;</operator><name>nb_samples</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>double</name></type> <name>sample</name> <init>= <expr><name><name>src</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>dec</name><operator>-&gt;</operator><name>s3</name></name> <operator>=</operator> <name><name>dec</name><operator>-&gt;</operator><name>s2</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dec</name><operator>-&gt;</operator><name>s2</name></name> <operator>=</operator> <name><name>dec</name><operator>-&gt;</operator><name>s1</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dec</name><operator>-&gt;</operator><name>s1</name></name> <operator>=</operator> <name>sample</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dec</name><operator>-&gt;</operator><name>m1</name></name> <operator>=</operator> <operator>(</operator><name><name>dec</name><operator>-&gt;</operator><name>s1</name></name> <operator>-</operator> <name><name>dec</name><operator>-&gt;</operator><name>s2</name></name><operator>)</operator> <operator>*</operator> <operator>(</operator><operator>(</operator><name><name>dec</name><operator>-&gt;</operator><name>s1</name></name> <operator>-</operator> <name><name>dec</name><operator>-&gt;</operator><name>s2</name></name><operator>)</operator> <operator>/</operator> <literal type="number">1.3</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dec</name><operator>-&gt;</operator><name>m2</name></name> <operator>=</operator> <operator>(</operator><name><name>dec</name><operator>-&gt;</operator><name>s2</name></name> <operator>-</operator> <name><name>dec</name><operator>-&gt;</operator><name>s3</name></name><operator>)</operator> <operator>*</operator> <operator>(</operator><operator>(</operator><name><name>dec</name><operator>-&gt;</operator><name>s1</name></name> <operator>-</operator> <name><name>dec</name><operator>-&gt;</operator><name>s2</name></name><operator>)</operator> <operator>/</operator> <literal type="number">1.3</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>sense</name> <operator>=</operator> <operator>(</operator><name><name>dec</name><operator>-&gt;</operator><name>m1</name></name> <operator>-</operator> <name><name>dec</name><operator>-&gt;</operator><name>m2</name></name><operator>)</operator> <operator>*</operator> <operator>(</operator><operator>(</operator><name><name>dec</name><operator>-&gt;</operator><name>m1</name></name> <operator>-</operator> <name><name>dec</name><operator>-&gt;</operator><name>m2</name></name><operator>)</operator> <operator>/</operator> <literal type="number">1.3</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>attackspeed</name> <operator>=</operator> <literal type="number">7.0</literal> <operator>+</operator> <name>sense</name> <operator>*</operator> <literal type="number">1024</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>sense</name> <operator>=</operator> <literal type="number">1.0</literal> <operator>+</operator> <name>intensity</name> <operator>*</operator> <name>intensity</name> <operator>*</operator> <name>sense</name></expr>;</expr_stmt>

<expr_stmt><expr><name>sense</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>sense</name></expr></argument>, <argument><expr><name>intensity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>recovery</name> <operator>=</operator> <literal type="number">1.0</literal> <operator>+</operator> <operator>(</operator><literal type="number">0.01</literal> <operator>/</operator> <name>sense</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>offset</name> <operator>=</operator> <literal type="number">1.0</literal> <operator>-</operator> <call><name>fabs</name><argument_list>(<argument><expr><name>sample</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>dec</name><operator>-&gt;</operator><name>flip</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>dec</name><operator>-&gt;</operator><name>iirSampleA</name></name> <operator>=</operator> <operator>(</operator><name><name>dec</name><operator>-&gt;</operator><name>iirSampleA</name></name> <operator>*</operator> <operator>(</operator><literal type="number">1.0</literal> <operator>-</operator> <operator>(</operator><name>offset</name> <operator>*</operator> <name>iirAmount</name><operator>)</operator><operator>)</operator><operator>)</operator> <operator>+</operator>

<operator>(</operator><name>sample</name> <operator>*</operator> <operator>(</operator><name>offset</name> <operator>*</operator> <name>iirAmount</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>dec</name><operator>-&gt;</operator><name>ratioA</name></name> <operator>&lt;</operator> <name>sense</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>dec</name><operator>-&gt;</operator><name>ratioA</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name><name>dec</name><operator>-&gt;</operator><name>ratioA</name></name> <operator>*</operator> <name>attackspeed</name><operator>)</operator> <operator>+</operator> <name>sense</name><operator>)</operator> <operator>/</operator> <operator>(</operator><name>attackspeed</name> <operator>+</operator> <literal type="number">1.0</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>dec</name><operator>-&gt;</operator><name>ratioA</name></name> <operator>=</operator> <literal type="number">1.0</literal> <operator>+</operator> <operator>(</operator><operator>(</operator><name><name>dec</name><operator>-&gt;</operator><name>ratioA</name></name> <operator>-</operator> <literal type="number">1.0</literal><operator>)</operator> <operator>/</operator> <name>recovery</name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>dec</name><operator>-&gt;</operator><name>ratioA</name></name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name><name>dec</name><operator>-&gt;</operator><name>ratioA</name></name></expr></argument>, <argument><expr><name>maxdess</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sample</name> <operator>=</operator> <name><name>dec</name><operator>-&gt;</operator><name>iirSampleA</name></name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>sample</name> <operator>-</operator> <name><name>dec</name><operator>-&gt;</operator><name>iirSampleA</name></name><operator>)</operator> <operator>/</operator> <name><name>dec</name><operator>-&gt;</operator><name>ratioA</name></name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>dec</name><operator>-&gt;</operator><name>iirSampleB</name></name> <operator>=</operator> <operator>(</operator><name><name>dec</name><operator>-&gt;</operator><name>iirSampleB</name></name> <operator>*</operator> <operator>(</operator><literal type="number">1.0</literal> <operator>-</operator> <operator>(</operator><name>offset</name> <operator>*</operator> <name>iirAmount</name><operator>)</operator><operator>)</operator><operator>)</operator> <operator>+</operator>

<operator>(</operator><name>sample</name> <operator>*</operator> <operator>(</operator><name>offset</name> <operator>*</operator> <name>iirAmount</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>dec</name><operator>-&gt;</operator><name>ratioB</name></name> <operator>&lt;</operator> <name>sense</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>dec</name><operator>-&gt;</operator><name>ratioB</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name><name>dec</name><operator>-&gt;</operator><name>ratioB</name></name> <operator>*</operator> <name>attackspeed</name><operator>)</operator> <operator>+</operator> <name>sense</name><operator>)</operator> <operator>/</operator> <operator>(</operator><name>attackspeed</name> <operator>+</operator> <literal type="number">1.0</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>dec</name><operator>-&gt;</operator><name>ratioB</name></name> <operator>=</operator> <literal type="number">1.0</literal> <operator>+</operator> <operator>(</operator><operator>(</operator><name><name>dec</name><operator>-&gt;</operator><name>ratioB</name></name> <operator>-</operator> <literal type="number">1.0</literal><operator>)</operator> <operator>/</operator> <name>recovery</name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>dec</name><operator>-&gt;</operator><name>ratioB</name></name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name><name>dec</name><operator>-&gt;</operator><name>ratioB</name></name></expr></argument>, <argument><expr><name>maxdess</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sample</name> <operator>=</operator> <name><name>dec</name><operator>-&gt;</operator><name>iirSampleB</name></name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>sample</name> <operator>-</operator> <name><name>dec</name><operator>-&gt;</operator><name>iirSampleB</name></name><operator>)</operator> <operator>/</operator> <name><name>dec</name><operator>-&gt;</operator><name>ratioB</name></name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>dec</name><operator>-&gt;</operator><name>flip</name></name> <operator>=</operator> <operator>!</operator><name><name>dec</name><operator>-&gt;</operator><name>flip</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>is_disabled</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>sample</name> <operator>=</operator> <name><name>src</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<switch>switch <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>mode</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>IN_MODE</name></expr>:</case> <expr_stmt><expr><name><name>dst</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>src</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>OUT_MODE</name></expr>:</case> <expr_stmt><expr><name><name>dst</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>sample</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>ESS_MODE</name></expr>:</case> <expr_stmt><expr><name><name>dst</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>src</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <name>sample</name></expr>;</expr_stmt> <break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></for>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>out</name> <operator>!=</operator> <name>in</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><call><name>ff_filter_frame</name><argument_list>(<argument><expr><name>outlink</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>void</name></type> <name>uninit</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>DeesserContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>chan</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVFilterPad</name></type> <name><name>inputs</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"default"</literal></expr>,

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_AUDIO</name></expr>,

<expr><operator>.</operator><name>filter_frame</name> <operator>=</operator> <name>filter_frame</name></expr>,

<expr><operator>.</operator><name>config_props</name> <operator>=</operator> <name>config_input</name></expr>,

}</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVFilterPad</name></type> <name><name>outputs</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"default"</literal></expr>,

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_AUDIO</name></expr>,

}</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFilter</name></type> <name>ff_af_deesser</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"deesser"</literal></expr>,

<expr><operator>.</operator><name>description</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"Apply de-essing to the audio."</literal></expr></argument>)</argument_list></call></expr>,

<expr><operator>.</operator><name>query_formats</name> <operator>=</operator> <name>query_formats</name></expr>,

<expr><operator>.</operator><name>priv_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>DeesserContext</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><operator>.</operator><name>priv_class</name> <operator>=</operator> <operator>&amp;</operator><name>deesser_class</name></expr>,

<expr><operator>.</operator><name>uninit</name> <operator>=</operator> <name>uninit</name></expr>,

<expr><operator>.</operator><name>inputs</name> <operator>=</operator> <name>inputs</name></expr>,

<expr><operator>.</operator><name>outputs</name> <operator>=</operator> <name>outputs</name></expr>,

<expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>AVFILTER_FLAG_SUPPORT_TIMELINE_INTERNAL</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

</unit>
