<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavfilter\vf_dnn_processing.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavformat/avio.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/opt.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/pixdesc.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avassert.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/imgutils.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avfilter.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dnn_interface.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"formats.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libswscale/swscale.h"</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct <name>DnnProcessingContext</name> <block>{

<decl_stmt><decl><type><specifier>const</specifier> <name>AVClass</name> <modifier>*</modifier></type><name>class</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>model_filename</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DNNBackendType</name></type> <name>backend_type</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>model_inputname</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>model_outputname</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DNNModule</name> <modifier>*</modifier></type><name>dnn_module</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DNNModel</name> <modifier>*</modifier></type><name>model</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DNNData</name></type> <name>input</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DNNData</name></type> <name>output</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>SwsContext</name></name> <modifier>*</modifier></type><name>sws_gray8_to_grayf32</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>SwsContext</name></name> <modifier>*</modifier></type><name>sws_grayf32_to_gray8</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>SwsContext</name></name> <modifier>*</modifier></type><name>sws_uv_scale</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>sws_uv_height</name></decl>;</decl_stmt>

}</block></struct></type> <name>DnnProcessingContext</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OFFSET</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>offsetof(DnnProcessingContext, x)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLAGS</name></cpp:macro> <cpp:value>AV_OPT_FLAG_FILTERING_PARAM | AV_OPT_FLAG_VIDEO_PARAM</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVOption</name></type> <name><name>dnn_processing_options</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><literal type="string">"dnn_backend"</literal></expr>, <expr><literal type="string">"DNN backend"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>backend_type</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0</literal></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"backend"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"native"</literal></expr>, <expr><literal type="string">"native backend flag"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0</literal></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"backend"</literal></expr> }</block></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>CONFIG_LIBTENSORFLOW</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr></cpp:if>

<expr><block>{ <expr><literal type="string">"tensorflow"</literal></expr>, <expr><literal type="string">"tensorflow backend flag"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">1</literal></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"backend"</literal></expr> }</block></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><block>{ <expr><literal type="string">"model"</literal></expr>, <expr><literal type="string">"path to model file"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>model_filename</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_STRING</name></expr>, <expr><block>{ <expr><operator>.</operator><name>str</name> <operator>=</operator> <name>NULL</name></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"input"</literal></expr>, <expr><literal type="string">"input name of the model"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>model_inputname</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_STRING</name></expr>, <expr><block>{ <expr><operator>.</operator><name>str</name> <operator>=</operator> <name>NULL</name></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"output"</literal></expr>, <expr><literal type="string">"output name of the model"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>model_outputname</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_STRING</name></expr>, <expr><block>{ <expr><operator>.</operator><name>str</name> <operator>=</operator> <name>NULL</name></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>AVFILTER_DEFINE_CLASS</name><argument_list>(<argument><expr><name>dnn_processing</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>init</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>context</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>DnnProcessingContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>context</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>model_filename</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"model file for network is not specified\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>model_inputname</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"input name of the model network is not specified\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>model_outputname</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"output name of the model network is not specified\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>dnn_module</name></name> <operator>=</operator> <call><name>ff_get_dnn_module</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>backend_type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>dnn_module</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"could not create DNN module for requested backend\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>dnn_module</name><operator>-&gt;</operator><name>load_model</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"load_model for network is not specified\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>model</name></name> <operator>=</operator> <operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>dnn_module</name><operator>-&gt;</operator><name>load_model</name></name><operator>)</operator><operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>model_filename</name></name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>model</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"could not load DNN model\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>query_formats</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>context</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>enum</name> <name>AVPixelFormat</name></name></type> <name><name>pix_fmts</name><index>[]</index></name> <init>= <expr><block>{

<expr><name>AV_PIX_FMT_RGB24</name></expr>, <expr><name>AV_PIX_FMT_BGR24</name></expr>,

<expr><name>AV_PIX_FMT_GRAY8</name></expr>, <expr><name>AV_PIX_FMT_GRAYF32</name></expr>,

<expr><name>AV_PIX_FMT_YUV420P</name></expr>, <expr><name>AV_PIX_FMT_YUV422P</name></expr>,

<expr><name>AV_PIX_FMT_YUV444P</name></expr>, <expr><name>AV_PIX_FMT_YUV410P</name></expr>, <expr><name>AV_PIX_FMT_YUV411P</name></expr>,

<expr><name>AV_PIX_FMT_NONE</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFilterFormats</name> <modifier>*</modifier></type><name>fmts_list</name> <init>= <expr><call><name>ff_make_format_list</name><argument_list>(<argument><expr><name>pix_fmts</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>ff_set_common_formats</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>fmts_list</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOG_FORMAT_CHANNEL_MISMATCH</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>av_log(ctx, AV_LOG_ERROR, "the frame's format %s does not match " "the model input channel %d\n", av_get_pix_fmt_name(fmt), model_input-&gt;channels);</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>int</name></type> <name>check_modelinput_inlink</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>DNNData</name> <modifier>*</modifier></type><name>model_input</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>AVFilterLink</name> <modifier>*</modifier></type><name>inlink</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>inlink</name><operator>-&gt;</operator><name>dst</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>fmt</name> <init>= <expr><name><name>inlink</name><operator>-&gt;</operator><name>format</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>model_input</name><operator>-&gt;</operator><name>height</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>model_input</name><operator>-&gt;</operator><name>height</name></name> <operator>!=</operator> <name><name>inlink</name><operator>-&gt;</operator><name>h</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"the model requires frame height %d but got %d\n"</literal></expr></argument>,

<argument><expr><name><name>model_input</name><operator>-&gt;</operator><name>height</name></name></expr></argument>, <argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>h</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EIO</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>model_input</name><operator>-&gt;</operator><name>width</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>model_input</name><operator>-&gt;</operator><name>width</name></name> <operator>!=</operator> <name><name>inlink</name><operator>-&gt;</operator><name>w</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"the model requires frame width %d but got %d\n"</literal></expr></argument>,

<argument><expr><name><name>model_input</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>w</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EIO</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><name>fmt</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>AV_PIX_FMT_RGB24</name></expr>:</case>

<case>case <expr><name>AV_PIX_FMT_BGR24</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>model_input</name><operator>-&gt;</operator><name>channels</name></name> <operator>!=</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>LOG_FORMAT_CHANNEL_MISMATCH</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EIO</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>model_input</name><operator>-&gt;</operator><name>dt</name></name> <operator>!=</operator> <name>DNN_FLOAT</name> <operator>&amp;&amp;</operator> <name><name>model_input</name><operator>-&gt;</operator><name>dt</name></name> <operator>!=</operator> <name>DNN_UINT8</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"only support dnn models with input data type as float32 and uint8.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EIO</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<case>case <expr><name>AV_PIX_FMT_GRAY8</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>model_input</name><operator>-&gt;</operator><name>channels</name></name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>LOG_FORMAT_CHANNEL_MISMATCH</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EIO</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>model_input</name><operator>-&gt;</operator><name>dt</name></name> <operator>!=</operator> <name>DNN_UINT8</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"only support dnn models with input data type uint8.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EIO</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<case>case <expr><name>AV_PIX_FMT_GRAYF32</name></expr>:</case>

<case>case <expr><name>AV_PIX_FMT_YUV420P</name></expr>:</case>

<case>case <expr><name>AV_PIX_FMT_YUV422P</name></expr>:</case>

<case>case <expr><name>AV_PIX_FMT_YUV444P</name></expr>:</case>

<case>case <expr><name>AV_PIX_FMT_YUV410P</name></expr>:</case>

<case>case <expr><name>AV_PIX_FMT_YUV411P</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>model_input</name><operator>-&gt;</operator><name>channels</name></name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>LOG_FORMAT_CHANNEL_MISMATCH</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EIO</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>model_input</name><operator>-&gt;</operator><name>dt</name></name> <operator>!=</operator> <name>DNN_FLOAT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"only support dnn models with input data type float32.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EIO</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<default>default:</default>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"%s not supported.\n"</literal></expr></argument>, <argument><expr><call><name>av_get_pix_fmt_name</name><argument_list>(<argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EIO</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></switch>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>config_input</name><parameter_list>(<parameter><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>inlink</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>context</name> <init>= <expr><name><name>inlink</name><operator>-&gt;</operator><name>dst</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DnnProcessingContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>context</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DNNReturnType</name></type> <name>result</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DNNData</name></type> <name>model_input</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>check</name></decl>;</decl_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name><name>ctx</name><operator>-&gt;</operator><name>model</name><operator>-&gt;</operator><name>get_input</name></name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>model</name><operator>-&gt;</operator><name>model</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>model_input</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>model_inputname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>result</name> <operator>!=</operator> <name>DNN_SUCCESS</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"could not get input from the model\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EIO</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>check</name> <operator>=</operator> <call><name>check_modelinput_inlink</name><argument_list>(<argument><expr><operator>&amp;</operator><name>model_input</name></expr></argument>, <argument><expr><name>inlink</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>check</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>check</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>input</name><operator>.</operator><name>width</name></name> <operator>=</operator> <name><name>inlink</name><operator>-&gt;</operator><name>w</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>input</name><operator>.</operator><name>height</name></name> <operator>=</operator> <name><name>inlink</name><operator>-&gt;</operator><name>h</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>input</name><operator>.</operator><name>channels</name></name> <operator>=</operator> <name><name>model_input</name><operator>.</operator><name>channels</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>input</name><operator>.</operator><name>dt</name></name> <operator>=</operator> <name><name>model_input</name><operator>.</operator><name>dt</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>model</name><operator>-&gt;</operator><name>set_input_output</name></name><operator>)</operator><operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>model</name><operator>-&gt;</operator><name>model</name></name><operator>,</operator>

<operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>input</name></name><operator>,</operator> <name><name>ctx</name><operator>-&gt;</operator><name>model_inputname</name></name><operator>,</operator>

<operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>model_outputname</name></name><operator>,</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>result</name> <operator>!=</operator> <name>DNN_SUCCESS</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"could not set input and output for the model\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EIO</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>prepare_sws_context</name><parameter_list>(<parameter><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>outlink</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>context</name> <init>= <expr><name><name>outlink</name><operator>-&gt;</operator><name>src</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DnnProcessingContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>context</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>inlink</name> <init>= <expr><name><name>context</name><operator>-&gt;</operator><name>inputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>fmt</name> <init>= <expr><name><name>inlink</name><operator>-&gt;</operator><name>format</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DNNDataType</name></type> <name>input_dt</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>input</name><operator>.</operator><name>dt</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DNNDataType</name></type> <name>output_dt</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>output</name><operator>.</operator><name>dt</name></name></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>fmt</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>AV_PIX_FMT_RGB24</name></expr>:</case>

<case>case <expr><name>AV_PIX_FMT_BGR24</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name>input_dt</name> <operator>==</operator> <name>DNN_FLOAT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>sws_gray8_to_grayf32</name></name> <operator>=</operator> <call><name>sws_getContext</name><argument_list>(<argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>w</name></name> <operator>*</operator> <literal type="number">3</literal></expr></argument>,

<argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>h</name></name></expr></argument>,

<argument><expr><name>AV_PIX_FMT_GRAY8</name></expr></argument>,

<argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>w</name></name> <operator>*</operator> <literal type="number">3</literal></expr></argument>,

<argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>h</name></name></expr></argument>,

<argument><expr><name>AV_PIX_FMT_GRAYF32</name></expr></argument>,

<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>output_dt</name> <operator>==</operator> <name>DNN_FLOAT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>sws_grayf32_to_gray8</name></name> <operator>=</operator> <call><name>sws_getContext</name><argument_list>(<argument><expr><name><name>outlink</name><operator>-&gt;</operator><name>w</name></name> <operator>*</operator> <literal type="number">3</literal></expr></argument>,

<argument><expr><name><name>outlink</name><operator>-&gt;</operator><name>h</name></name></expr></argument>,

<argument><expr><name>AV_PIX_FMT_GRAYF32</name></expr></argument>,

<argument><expr><name><name>outlink</name><operator>-&gt;</operator><name>w</name></name> <operator>*</operator> <literal type="number">3</literal></expr></argument>,

<argument><expr><name><name>outlink</name><operator>-&gt;</operator><name>h</name></name></expr></argument>,

<argument><expr><name>AV_PIX_FMT_GRAY8</name></expr></argument>,

<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<case>case <expr><name>AV_PIX_FMT_YUV420P</name></expr>:</case>

<case>case <expr><name>AV_PIX_FMT_YUV422P</name></expr>:</case>

<case>case <expr><name>AV_PIX_FMT_YUV444P</name></expr>:</case>

<case>case <expr><name>AV_PIX_FMT_YUV410P</name></expr>:</case>

<case>case <expr><name>AV_PIX_FMT_YUV411P</name></expr>:</case>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name>input_dt</name> <operator>==</operator> <name>DNN_FLOAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name>output_dt</name> <operator>==</operator> <name>DNN_FLOAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>sws_gray8_to_grayf32</name></name> <operator>=</operator> <call><name>sws_getContext</name><argument_list>(<argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>w</name></name></expr></argument>,

<argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>h</name></name></expr></argument>,

<argument><expr><name>AV_PIX_FMT_GRAY8</name></expr></argument>,

<argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>w</name></name></expr></argument>,

<argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>h</name></name></expr></argument>,

<argument><expr><name>AV_PIX_FMT_GRAYF32</name></expr></argument>,

<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>sws_grayf32_to_gray8</name></name> <operator>=</operator> <call><name>sws_getContext</name><argument_list>(<argument><expr><name><name>outlink</name><operator>-&gt;</operator><name>w</name></name></expr></argument>,

<argument><expr><name><name>outlink</name><operator>-&gt;</operator><name>h</name></name></expr></argument>,

<argument><expr><name>AV_PIX_FMT_GRAYF32</name></expr></argument>,

<argument><expr><name><name>outlink</name><operator>-&gt;</operator><name>w</name></name></expr></argument>,

<argument><expr><name><name>outlink</name><operator>-&gt;</operator><name>h</name></name></expr></argument>,

<argument><expr><name>AV_PIX_FMT_GRAY8</name></expr></argument>,

<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>inlink</name><operator>-&gt;</operator><name>w</name></name> <operator>!=</operator> <name><name>outlink</name><operator>-&gt;</operator><name>w</name></name> <operator>||</operator> <name><name>inlink</name><operator>-&gt;</operator><name>h</name></name> <operator>!=</operator> <name><name>outlink</name><operator>-&gt;</operator><name>h</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>AVPixFmtDescriptor</name> <modifier>*</modifier></type><name>desc</name> <init>= <expr><call><name>av_pix_fmt_desc_get</name><argument_list>(<argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>sws_src_h</name> <init>= <expr><call><name>AV_CEIL_RSHIFT</name><argument_list>(<argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>h</name></name></expr></argument>, <argument><expr><name><name>desc</name><operator>-&gt;</operator><name>log2_chroma_h</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>sws_src_w</name> <init>= <expr><call><name>AV_CEIL_RSHIFT</name><argument_list>(<argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>w</name></name></expr></argument>, <argument><expr><name><name>desc</name><operator>-&gt;</operator><name>log2_chroma_w</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>sws_dst_h</name> <init>= <expr><call><name>AV_CEIL_RSHIFT</name><argument_list>(<argument><expr><name><name>outlink</name><operator>-&gt;</operator><name>h</name></name></expr></argument>, <argument><expr><name><name>desc</name><operator>-&gt;</operator><name>log2_chroma_h</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>sws_dst_w</name> <init>= <expr><call><name>AV_CEIL_RSHIFT</name><argument_list>(<argument><expr><name><name>outlink</name><operator>-&gt;</operator><name>w</name></name></expr></argument>, <argument><expr><name><name>desc</name><operator>-&gt;</operator><name>log2_chroma_w</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>sws_uv_scale</name></name> <operator>=</operator> <call><name>sws_getContext</name><argument_list>(<argument><expr><name>sws_src_w</name></expr></argument>, <argument><expr><name>sws_src_h</name></expr></argument>, <argument><expr><name>AV_PIX_FMT_GRAY8</name></expr></argument>,

<argument><expr><name>sws_dst_w</name></expr></argument>, <argument><expr><name>sws_dst_h</name></expr></argument>, <argument><expr><name>AV_PIX_FMT_GRAY8</name></expr></argument>,

<argument><expr><name>SWS_BICUBIC</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>sws_uv_height</name></name> <operator>=</operator> <name>sws_src_h</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<default>default:</default>

<break>break;</break>

</block_content>}</block></switch>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>config_output</name><parameter_list>(<parameter><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>outlink</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>context</name> <init>= <expr><name><name>outlink</name><operator>-&gt;</operator><name>src</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DnnProcessingContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>context</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DNNReturnType</name></type> <name>result</name></decl>;</decl_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>dnn_module</name><operator>-&gt;</operator><name>execute_model</name></name><operator>)</operator><operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>model</name></name><operator>,</operator> <operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>output</name></name><operator>,</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>result</name> <operator>!=</operator> <name>DNN_SUCCESS</name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"failed to execute model\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EIO</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>outlink</name><operator>-&gt;</operator><name>w</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>output</name><operator>.</operator><name>width</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>outlink</name><operator>-&gt;</operator><name>h</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>output</name><operator>.</operator><name>height</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>prepare_sws_context</name><argument_list>(<argument><expr><name>outlink</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>copy_from_frame_to_dnn</name><parameter_list>(<parameter><decl><type><name>DnnProcessingContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>AVFrame</name> <modifier>*</modifier></type><name>frame</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>bytewidth</name> <init>= <expr><call><name>av_image_get_linesize</name><argument_list>(<argument><expr><name><name>frame</name><operator>-&gt;</operator><name>format</name></name></expr></argument>, <argument><expr><name><name>frame</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DNNData</name> <modifier>*</modifier></type><name>dnn_input</name> <init>= <expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>input</name></name></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>frame</name><operator>-&gt;</operator><name>format</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>AV_PIX_FMT_RGB24</name></expr>:</case>

<case>case <expr><name>AV_PIX_FMT_BGR24</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>dnn_input</name><operator>-&gt;</operator><name>dt</name></name> <operator>==</operator> <name>DNN_FLOAT</name></expr>)</condition> <block>{<block_content>

<macro><name>sws_scale</name><argument_list>(<argument>ctx-&gt;sws_gray8_to_grayf32</argument>, <argument>(const uint8_t **)frame-&gt;data</argument>, <argument>frame-&gt;linesize</argument>,

<argument><literal type="number">0</literal></argument>, <argument>frame-&gt;height</argument>, <argument>(uint8_t * const*)(&amp;dnn_input-&gt;data)</argument>,

<argument>(const int [<literal type="number">4</literal>]){frame-&gt;linesize[<literal type="number">0</literal>] * sizeof(float)</argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">0</literal>}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name><name>dnn_input</name><operator>-&gt;</operator><name>dt</name></name> <operator>==</operator> <name>DNN_UINT8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_image_copy_plane</name><argument_list>(<argument><expr><name><name>dnn_input</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>bytewidth</name></expr></argument>,

<argument><expr><name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,

<argument><expr><name>bytewidth</name></expr></argument>, <argument><expr><name><name>frame</name><operator>-&gt;</operator><name>height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<case>case <expr><name>AV_PIX_FMT_GRAY8</name></expr>:</case>

<case>case <expr><name>AV_PIX_FMT_GRAYF32</name></expr>:</case>

<expr_stmt><expr><call><name>av_image_copy_plane</name><argument_list>(<argument><expr><name><name>dnn_input</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>bytewidth</name></expr></argument>,

<argument><expr><name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,

<argument><expr><name>bytewidth</name></expr></argument>, <argument><expr><name><name>frame</name><operator>-&gt;</operator><name>height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<case>case <expr><name>AV_PIX_FMT_YUV420P</name></expr>:</case>

<case>case <expr><name>AV_PIX_FMT_YUV422P</name></expr>:</case>

<case>case <expr><name>AV_PIX_FMT_YUV444P</name></expr>:</case>

<case>case <expr><name>AV_PIX_FMT_YUV410P</name></expr>:</case>

<case>case <expr><name>AV_PIX_FMT_YUV411P</name></expr>:</case>

<macro><name>sws_scale</name><argument_list>(<argument>ctx-&gt;sws_gray8_to_grayf32</argument>, <argument>(const uint8_t **)frame-&gt;data</argument>, <argument>frame-&gt;linesize</argument>,

<argument><literal type="number">0</literal></argument>, <argument>frame-&gt;height</argument>, <argument>(uint8_t * const*)(&amp;dnn_input-&gt;data)</argument>,

<argument>(const int [<literal type="number">4</literal>]){frame-&gt;width * sizeof(float)</argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">0</literal>}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<default>default:</default>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EIO</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></switch>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>copy_from_dnn_to_frame</name><parameter_list>(<parameter><decl><type><name>DnnProcessingContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>frame</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>bytewidth</name> <init>= <expr><call><name>av_image_get_linesize</name><argument_list>(<argument><expr><name><name>frame</name><operator>-&gt;</operator><name>format</name></name></expr></argument>, <argument><expr><name><name>frame</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DNNData</name> <modifier>*</modifier></type><name>dnn_output</name> <init>= <expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>output</name></name></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>frame</name><operator>-&gt;</operator><name>format</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>AV_PIX_FMT_RGB24</name></expr>:</case>

<case>case <expr><name>AV_PIX_FMT_BGR24</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>dnn_output</name><operator>-&gt;</operator><name>dt</name></name> <operator>==</operator> <name>DNN_FLOAT</name></expr>)</condition> <block>{<block_content>

<macro><name>sws_scale</name><argument_list>(<argument>ctx-&gt;sws_grayf32_to_gray8</argument>, <argument>(const uint8_t *[<literal type="number">4</literal>]){(const uint8_t *)dnn_output-&gt;data</argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">0</literal>}</argument>,

<argument>(const int[<literal type="number">4</literal>]){frame-&gt;linesize[<literal type="number">0</literal>] * sizeof(float)</argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">0</literal>}</argument>,

<argument><literal type="number">0</literal></argument>, <argument>frame-&gt;height</argument>, <argument>(uint8_t * const*)frame-&gt;data</argument>, <argument>frame-&gt;linesize</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name><name>dnn_output</name><operator>-&gt;</operator><name>dt</name></name> <operator>==</operator> <name>DNN_UINT8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_image_copy_plane</name><argument_list>(<argument><expr><name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,

<argument><expr><name><name>dnn_output</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>bytewidth</name></expr></argument>,

<argument><expr><name>bytewidth</name></expr></argument>, <argument><expr><name><name>frame</name><operator>-&gt;</operator><name>height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<case>case <expr><name>AV_PIX_FMT_GRAY8</name></expr>:</case>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name><name>dnn_output</name><operator>-&gt;</operator><name>dt</name></name> <operator>==</operator> <name>DNN_UINT8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_image_copy_plane</name><argument_list>(<argument><expr><name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,

<argument><expr><name><name>dnn_output</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>bytewidth</name></expr></argument>,

<argument><expr><name>bytewidth</name></expr></argument>, <argument><expr><name><name>frame</name><operator>-&gt;</operator><name>height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<case>case <expr><name>AV_PIX_FMT_GRAYF32</name></expr>:</case>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name><name>dnn_output</name><operator>-&gt;</operator><name>dt</name></name> <operator>==</operator> <name>DNN_FLOAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_image_copy_plane</name><argument_list>(<argument><expr><name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,

<argument><expr><name><name>dnn_output</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>bytewidth</name></expr></argument>,

<argument><expr><name>bytewidth</name></expr></argument>, <argument><expr><name><name>frame</name><operator>-&gt;</operator><name>height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<case>case <expr><name>AV_PIX_FMT_YUV420P</name></expr>:</case>

<case>case <expr><name>AV_PIX_FMT_YUV422P</name></expr>:</case>

<case>case <expr><name>AV_PIX_FMT_YUV444P</name></expr>:</case>

<case>case <expr><name>AV_PIX_FMT_YUV410P</name></expr>:</case>

<case>case <expr><name>AV_PIX_FMT_YUV411P</name></expr>:</case>

<macro><name>sws_scale</name><argument_list>(<argument>ctx-&gt;sws_grayf32_to_gray8</argument>, <argument>(const uint8_t *[<literal type="number">4</literal>]){(const uint8_t *)dnn_output-&gt;data</argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">0</literal>}</argument>,

<argument>(const int[<literal type="number">4</literal>]){frame-&gt;width * sizeof(float)</argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">0</literal>}</argument>,

<argument><literal type="number">0</literal></argument>, <argument>frame-&gt;height</argument>, <argument>(uint8_t * const*)frame-&gt;data</argument>, <argument>frame-&gt;linesize</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<default>default:</default>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EIO</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></switch>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>int</name></type> <name>isPlanarYUV</name><parameter_list>(<parameter><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>pix_fmt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>AVPixFmtDescriptor</name> <modifier>*</modifier></type><name>desc</name> <init>= <expr><call><name>av_pix_fmt_desc_get</name><argument_list>(<argument><expr><name>pix_fmt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>!</operator><operator>(</operator><name><name>desc</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_PIX_FMT_FLAG_RGB</name><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>desc</name><operator>-&gt;</operator><name>nb_components</name></name> <operator>==</operator> <literal type="number">3</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>copy_uv_planes</name><parameter_list>(<parameter><decl><type><name>DnnProcessingContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>AVFrame</name> <modifier>*</modifier></type><name>in</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>AVPixFmtDescriptor</name> <modifier>*</modifier></type><name>desc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>uv_height</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>sws_uv_scale</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name><name>in</name><operator>-&gt;</operator><name>height</name></name> <operator>==</operator> <name><name>out</name><operator>-&gt;</operator><name>height</name></name> <operator>&amp;&amp;</operator> <name><name>in</name><operator>-&gt;</operator><name>width</name></name> <operator>==</operator> <name><name>out</name><operator>-&gt;</operator><name>width</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>desc</name> <operator>=</operator> <call><name>av_pix_fmt_desc_get</name><argument_list>(<argument><expr><name><name>in</name><operator>-&gt;</operator><name>format</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>uv_height</name> <operator>=</operator> <call><name>AV_CEIL_RSHIFT</name><argument_list>(<argument><expr><name><name>in</name><operator>-&gt;</operator><name>height</name></name></expr></argument>, <argument><expr><name><name>desc</name><operator>-&gt;</operator><name>log2_chroma_h</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>bytewidth</name> <init>= <expr><call><name>av_image_get_linesize</name><argument_list>(<argument><expr><name><name>in</name><operator>-&gt;</operator><name>format</name></name></expr></argument>, <argument><expr><name><name>in</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_image_copy_plane</name><argument_list>(<argument><expr><name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,

<argument><expr><name><name>in</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>in</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,

<argument><expr><name>bytewidth</name></expr></argument>, <argument><expr><name>uv_height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>sws_scale</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>sws_uv_scale</name></name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>uint8_t</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>(</operator><name><name>in</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>, <argument><expr><name><name>in</name><operator>-&gt;</operator><name>linesize</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>,

<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>sws_uv_height</name></name></expr></argument>, <argument><expr><name><name>out</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>out</name><operator>-&gt;</operator><name>linesize</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sws_scale</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>sws_uv_scale</name></name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>uint8_t</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>(</operator><name><name>in</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator></expr></argument>, <argument><expr><name><name>in</name><operator>-&gt;</operator><name>linesize</name></name> <operator>+</operator> <literal type="number">2</literal></expr></argument>,

<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>sws_uv_height</name></name></expr></argument>, <argument><expr><name><name>out</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name><name>out</name><operator>-&gt;</operator><name>linesize</name></name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>filter_frame</name><parameter_list>(<parameter><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>inlink</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>in</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>context</name> <init>= <expr><name><name>inlink</name><operator>-&gt;</operator><name>dst</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>outlink</name> <init>= <expr><name><name>context</name><operator>-&gt;</operator><name>outputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DnnProcessingContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>context</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DNNReturnType</name></type> <name>dnn_result</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>out</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>copy_from_frame_to_dnn</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dnn_result</name> <operator>=</operator> <operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>dnn_module</name><operator>-&gt;</operator><name>execute_model</name></name><operator>)</operator><operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>model</name></name><operator>,</operator> <operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>output</name></name><operator>,</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>dnn_result</name> <operator>!=</operator> <name>DNN_SUCCESS</name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"failed to execute model\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EIO</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>out</name> <operator>=</operator> <call><name>ff_get_video_buffer</name><argument_list>(<argument><expr><name>outlink</name></expr></argument>, <argument><expr><name><name>outlink</name><operator>-&gt;</operator><name>w</name></name></expr></argument>, <argument><expr><name><name>outlink</name><operator>-&gt;</operator><name>h</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>out</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_frame_copy_props</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>copy_from_dnn_to_frame</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>isPlanarYUV</name><argument_list>(<argument><expr><name><name>in</name><operator>-&gt;</operator><name>format</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>copy_uv_planes</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>ff_filter_frame</name><argument_list>(<argument><expr><name>outlink</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>void</name></type> <name>uninit</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>DnnProcessingContext</name> <modifier>*</modifier></type><name>context</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>sws_freeContext</name><argument_list>(<argument><expr><name><name>context</name><operator>-&gt;</operator><name>sws_gray8_to_grayf32</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sws_freeContext</name><argument_list>(<argument><expr><name><name>context</name><operator>-&gt;</operator><name>sws_grayf32_to_gray8</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sws_freeContext</name><argument_list>(<argument><expr><name><name>context</name><operator>-&gt;</operator><name>sws_uv_scale</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>context</name><operator>-&gt;</operator><name>dnn_module</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>(</operator><name><name>context</name><operator>-&gt;</operator><name>dnn_module</name><operator>-&gt;</operator><name>free_model</name></name><operator>)</operator><operator>(</operator><operator>&amp;</operator><name><name>context</name><operator>-&gt;</operator><name>model</name></name><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>context</name><operator>-&gt;</operator><name>dnn_module</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVFilterPad</name></type> <name><name>dnn_processing_inputs</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"default"</literal></expr>,

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,

<expr><operator>.</operator><name>config_props</name> <operator>=</operator> <name>config_input</name></expr>,

<expr><operator>.</operator><name>filter_frame</name> <operator>=</operator> <name>filter_frame</name></expr>,

}</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVFilterPad</name></type> <name><name>dnn_processing_outputs</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"default"</literal></expr>,

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,

<expr><operator>.</operator><name>config_props</name> <operator>=</operator> <name>config_output</name></expr>,

}</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFilter</name></type> <name>ff_vf_dnn_processing</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"dnn_processing"</literal></expr>,

<expr><operator>.</operator><name>description</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"Apply DNN processing filter to the input."</literal></expr></argument>)</argument_list></call></expr>,

<expr><operator>.</operator><name>priv_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>DnnProcessingContext</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>init</name></expr>,

<expr><operator>.</operator><name>uninit</name> <operator>=</operator> <name>uninit</name></expr>,

<expr><operator>.</operator><name>query_formats</name> <operator>=</operator> <name>query_formats</name></expr>,

<expr><operator>.</operator><name>inputs</name> <operator>=</operator> <name>dnn_processing_inputs</name></expr>,

<expr><operator>.</operator><name>outputs</name> <operator>=</operator> <name>dnn_processing_outputs</name></expr>,

<expr><operator>.</operator><name>priv_class</name> <operator>=</operator> <operator>&amp;</operator><name>dnn_processing_class</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

</unit>
