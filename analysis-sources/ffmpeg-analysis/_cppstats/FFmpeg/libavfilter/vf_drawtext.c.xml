<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavfilter\vf_drawtext.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_SYS_TIME_H</name></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/time.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/stat.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;time.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_UNISTD_H</name></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fenv.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_LIBFONTCONFIG</name></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fontconfig/fontconfig.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avstring.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/bprint.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/common.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/file.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/eval.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/opt.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/random_seed.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/parseutils.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/timecode.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/time_internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/tree.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/lfg.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avfilter.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"drawutils.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"formats.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"video.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_LIBFRIBIDI</name></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fribidi.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ft2build.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> FT_FREETYPE_H</cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> FT_GLYPH_H</cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> FT_STROKER_H</cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>var_names</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="string">"dar"</literal></expr>,

<expr><literal type="string">"hsub"</literal></expr>, <expr><literal type="string">"vsub"</literal></expr>,

<expr><literal type="string">"line_h"</literal></expr>, <expr><literal type="string">"lh"</literal></expr>, 

<expr><literal type="string">"main_h"</literal></expr>, <expr><literal type="string">"h"</literal></expr>, <expr><literal type="string">"H"</literal></expr>, 

<expr><literal type="string">"main_w"</literal></expr>, <expr><literal type="string">"w"</literal></expr>, <expr><literal type="string">"W"</literal></expr>, 

<expr><literal type="string">"max_glyph_a"</literal></expr>, <expr><literal type="string">"ascent"</literal></expr>, 

<expr><literal type="string">"max_glyph_d"</literal></expr>, <expr><literal type="string">"descent"</literal></expr>, 

<expr><literal type="string">"max_glyph_h"</literal></expr>, 

<expr><literal type="string">"max_glyph_w"</literal></expr>, 

<expr><literal type="string">"n"</literal></expr>, 

<expr><literal type="string">"sar"</literal></expr>,

<expr><literal type="string">"t"</literal></expr>, 

<expr><literal type="string">"text_h"</literal></expr>, <expr><literal type="string">"th"</literal></expr>, 

<expr><literal type="string">"text_w"</literal></expr>, <expr><literal type="string">"tw"</literal></expr>, 

<expr><literal type="string">"x"</literal></expr>,

<expr><literal type="string">"y"</literal></expr>,

<expr><literal type="string">"pict_type"</literal></expr>,

<expr><literal type="string">"pkt_pos"</literal></expr>,

<expr><literal type="string">"pkt_duration"</literal></expr>,

<expr><literal type="string">"pkt_size"</literal></expr>,

<expr><name>NULL</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>fun2_names</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="string">"rand"</literal></expr>

}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>double</name></type> <name>drand</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>opaque</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>min</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>max</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name>min</name> <operator>+</operator> <operator>(</operator><name>max</name><operator>-</operator><name>min</name><operator>)</operator> <operator>/</operator> <name>UINT_MAX</name> <operator>*</operator> <call><name>av_lfg_get</name><argument_list>(<argument><expr><name>opaque</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<typedef>typedef <function_decl><type><name>double</name></type> (<modifier>*</modifier><name>eval_func2</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>b</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>eval_func2</name></type> <name><name>fun2</name><index>[]</index></name> <init>= <expr><block>{

<expr><name>drand</name></expr>,

<expr><name>NULL</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<enum>enum <name>var_name</name> <block>{

<decl><name>VAR_DAR</name></decl>,

<decl><name>VAR_HSUB</name></decl>, <decl><name>VAR_VSUB</name></decl>,

<decl><name>VAR_LINE_H</name></decl>, <decl><name>VAR_LH</name></decl>,

<decl><name>VAR_MAIN_H</name></decl>, <decl><name>VAR_h</name></decl>, <decl><name>VAR_H</name></decl>,

<decl><name>VAR_MAIN_W</name></decl>, <decl><name>VAR_w</name></decl>, <decl><name>VAR_W</name></decl>,

<decl><name>VAR_MAX_GLYPH_A</name></decl>, <decl><name>VAR_ASCENT</name></decl>,

<decl><name>VAR_MAX_GLYPH_D</name></decl>, <decl><name>VAR_DESCENT</name></decl>,

<decl><name>VAR_MAX_GLYPH_H</name></decl>,

<decl><name>VAR_MAX_GLYPH_W</name></decl>,

<decl><name>VAR_N</name></decl>,

<decl><name>VAR_SAR</name></decl>,

<decl><name>VAR_T</name></decl>,

<decl><name>VAR_TEXT_H</name></decl>, <decl><name>VAR_TH</name></decl>,

<decl><name>VAR_TEXT_W</name></decl>, <decl><name>VAR_TW</name></decl>,

<decl><name>VAR_X</name></decl>,

<decl><name>VAR_Y</name></decl>,

<decl><name>VAR_PICT_TYPE</name></decl>,

<decl><name>VAR_PKT_POS</name></decl>,

<decl><name>VAR_PKT_DURATION</name></decl>,

<decl><name>VAR_PKT_SIZE</name></decl>,

<decl><name>VAR_VARS_NB</name></decl>

}</block>;</enum>

<enum>enum <name>expansion_mode</name> <block>{

<decl><name>EXP_NONE</name></decl>,

<decl><name>EXP_NORMAL</name></decl>,

<decl><name>EXP_STRFTIME</name></decl>,

}</block>;</enum>

<typedef>typedef <type><struct>struct <name>DrawTextContext</name> <block>{

<decl_stmt><decl><type><specifier>const</specifier> <name>AVClass</name> <modifier>*</modifier></type><name>class</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>exp_mode</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>reinit</name></decl>;</decl_stmt> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_LIBFONTCONFIG</name></expr></cpp:if>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>font</name></decl>;</decl_stmt> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>fontfile</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>text</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>AVBPrint</name></type> <name>expanded_text</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>fontcolor_expr</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>AVBPrint</name></type> <name>expanded_fontcolor</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>ft_load_flags</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>FT_Vector</name> <modifier>*</modifier></type><name>positions</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>size_t</name></type> <name>nb_positions</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>textfile</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>max_glyph_w</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>max_glyph_h</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>shadowx</name></decl>, <name>shadowy</name>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>borderw</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>fontsize_expr</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>AVExpr</name> <modifier>*</modifier></type><name>fontsize_pexpr</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>fontsize</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>default_fontsize</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>line_spacing</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>short</name> <name>int</name></type> <name>draw_box</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>boxborderw</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>use_kerning</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>tabsize</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>fix_bounds</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>FFDrawContext</name></type> <name>dc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>FFDrawColor</name></type> <name>fontcolor</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>FFDrawColor</name></type> <name>shadowcolor</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>FFDrawColor</name></type> <name>bordercolor</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>FFDrawColor</name></type> <name>boxcolor</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>FT_Library</name></type> <name>library</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>FT_Face</name></type> <name>face</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>FT_Stroker</name></type> <name>stroker</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name><name>struct</name> <name>AVTreeNode</name></name> <modifier>*</modifier></type><name>glyphs</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>x_expr</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>y_expr</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>AVExpr</name> <modifier>*</modifier></type><name>x_pexpr</name></decl>, <modifier>*</modifier><name>y_pexpr</name>;</decl_stmt> 

<decl_stmt><decl><type><name>int64_t</name></type> <name>basetime</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>double</name></type> <name><name>var_values</name><index>[<expr><name>VAR_VARS_NB</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>a_expr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVExpr</name> <modifier>*</modifier></type><name>a_pexpr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>alpha</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVLFG</name></type> <name>prng</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>tc_opt_string</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>AVRational</name></type> <name>tc_rate</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>AVTimecode</name></type> <name>tc</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>tc24hmax</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>reload</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>start_number</name></decl>;</decl_stmt> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_LIBFRIBIDI</name></expr></cpp:if>

<decl_stmt><decl><type><name>int</name></type> <name>text_shaping</name></decl>;</decl_stmt> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>AVDictionary</name> <modifier>*</modifier></type><name>metadata</name></decl>;</decl_stmt>

}</block></struct></type> <name>DrawTextContext</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OFFSET</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>offsetof(DrawTextContext, x)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLAGS</name></cpp:macro> <cpp:value>AV_OPT_FLAG_FILTERING_PARAM|AV_OPT_FLAG_VIDEO_PARAM</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVOption</name></type> <name><name>drawtext_options</name><index>[]</index></name><init>= <expr><block>{

<expr><block>{<expr><literal type="string">"fontfile"</literal></expr>, <expr><literal type="string">"set font file"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>fontfile</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_STRING</name></expr>, <expr><block>{<expr><operator>.</operator><name>str</name><operator>=</operator><name>NULL</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"text"</literal></expr>, <expr><literal type="string">"set text"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_STRING</name></expr>, <expr><block>{<expr><operator>.</operator><name>str</name><operator>=</operator><name>NULL</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"textfile"</literal></expr>, <expr><literal type="string">"set text file"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>textfile</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_STRING</name></expr>, <expr><block>{<expr><operator>.</operator><name>str</name><operator>=</operator><name>NULL</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"fontcolor"</literal></expr>, <expr><literal type="string">"set foreground color"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name><name>fontcolor</name><operator>.</operator><name>rgba</name></name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_COLOR</name></expr>, <expr><block>{<expr><operator>.</operator><name>str</name><operator>=</operator><literal type="string">"black"</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"fontcolor_expr"</literal></expr>, <expr><literal type="string">"set foreground color expression"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>fontcolor_expr</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_STRING</name></expr>, <expr><block>{<expr><operator>.</operator><name>str</name><operator>=</operator><literal type="string">""</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"boxcolor"</literal></expr>, <expr><literal type="string">"set box color"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name><name>boxcolor</name><operator>.</operator><name>rgba</name></name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_COLOR</name></expr>, <expr><block>{<expr><operator>.</operator><name>str</name><operator>=</operator><literal type="string">"white"</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"bordercolor"</literal></expr>, <expr><literal type="string">"set border color"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name><name>bordercolor</name><operator>.</operator><name>rgba</name></name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_COLOR</name></expr>, <expr><block>{<expr><operator>.</operator><name>str</name><operator>=</operator><literal type="string">"black"</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"shadowcolor"</literal></expr>, <expr><literal type="string">"set shadow color"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name><name>shadowcolor</name><operator>.</operator><name>rgba</name></name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_COLOR</name></expr>, <expr><block>{<expr><operator>.</operator><name>str</name><operator>=</operator><literal type="string">"black"</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"box"</literal></expr>, <expr><literal type="string">"set box"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>draw_box</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_BOOL</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">0</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr> , <expr><name>FLAGS</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"boxborderw"</literal></expr>, <expr><literal type="string">"set box border width"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>boxborderw</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">0</literal></expr>}</block></expr>, <expr><name>INT_MIN</name></expr>, <expr><name>INT_MAX</name></expr> , <expr><name>FLAGS</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"line_spacing"</literal></expr>, <expr><literal type="string">"set line spacing in pixels"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>line_spacing</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">0</literal></expr>}</block></expr>, <expr><name>INT_MIN</name></expr>, <expr><name>INT_MAX</name></expr>,<expr><name>FLAGS</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"fontsize"</literal></expr>, <expr><literal type="string">"set font size"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>fontsize_expr</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_STRING</name></expr>, <expr><block>{<expr><operator>.</operator><name>str</name><operator>=</operator><name>NULL</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> , <expr><name>FLAGS</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"x"</literal></expr>, <expr><literal type="string">"set x expression"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>x_expr</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_STRING</name></expr>, <expr><block>{<expr><operator>.</operator><name>str</name><operator>=</operator><literal type="string">"0"</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"y"</literal></expr>, <expr><literal type="string">"set y expression"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>y_expr</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_STRING</name></expr>, <expr><block>{<expr><operator>.</operator><name>str</name><operator>=</operator><literal type="string">"0"</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"shadowx"</literal></expr>, <expr><literal type="string">"set shadow x offset"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>shadowx</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">0</literal></expr>}</block></expr>, <expr><name>INT_MIN</name></expr>, <expr><name>INT_MAX</name></expr> , <expr><name>FLAGS</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"shadowy"</literal></expr>, <expr><literal type="string">"set shadow y offset"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>shadowy</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">0</literal></expr>}</block></expr>, <expr><name>INT_MIN</name></expr>, <expr><name>INT_MAX</name></expr> , <expr><name>FLAGS</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"borderw"</literal></expr>, <expr><literal type="string">"set border width"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>borderw</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">0</literal></expr>}</block></expr>, <expr><name>INT_MIN</name></expr>, <expr><name>INT_MAX</name></expr> , <expr><name>FLAGS</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"tabsize"</literal></expr>, <expr><literal type="string">"set tab size"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>tabsize</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">4</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>INT_MAX</name></expr> , <expr><name>FLAGS</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"basetime"</literal></expr>, <expr><literal type="string">"set base time"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>basetime</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT64</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>AV_NOPTS_VALUE</name></expr>}</block></expr>, <expr><name>INT64_MIN</name></expr>, <expr><name>INT64_MAX</name></expr> , <expr><name>FLAGS</name></expr>}</block></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_LIBFONTCONFIG</name></expr></cpp:if>

<expr><block>{ <expr><literal type="string">"font"</literal></expr>, <expr><literal type="string">"Font name"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>font</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_STRING</name></expr>, <expr><block>{ <expr><operator>.</operator><name>str</name> <operator>=</operator> <literal type="string">"Sans"</literal></expr> }</block></expr>, <expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>FLAGS</name></expr> }</block></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><block>{<expr><literal type="string">"expansion"</literal></expr>, <expr><literal type="string">"set the expansion mode"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>exp_mode</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>EXP_NORMAL</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"expansion"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"none"</literal></expr>, <expr><literal type="string">"set no expansion"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>exp_mode</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>EXP_NONE</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"expansion"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"normal"</literal></expr>, <expr><literal type="string">"set normal expansion"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>exp_mode</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>EXP_NORMAL</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"expansion"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"strftime"</literal></expr>, <expr><literal type="string">"set strftime expansion (deprecated)"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>exp_mode</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>EXP_STRFTIME</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"expansion"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"timecode"</literal></expr>, <expr><literal type="string">"set initial timecode"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>tc_opt_string</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_STRING</name></expr>, <expr><block>{<expr><operator>.</operator><name>str</name><operator>=</operator><name>NULL</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"tc24hmax"</literal></expr>, <expr><literal type="string">"set 24 hours max (timecode only)"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>tc24hmax</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_BOOL</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">0</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FLAGS</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"timecode_rate"</literal></expr>, <expr><literal type="string">"set rate (timecode only)"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>tc_rate</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_RATIONAL</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name><operator>=</operator><literal type="number">0</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>FLAGS</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"r"</literal></expr>, <expr><literal type="string">"set rate (timecode only)"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>tc_rate</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_RATIONAL</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name><operator>=</operator><literal type="number">0</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>FLAGS</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"rate"</literal></expr>, <expr><literal type="string">"set rate (timecode only)"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>tc_rate</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_RATIONAL</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name><operator>=</operator><literal type="number">0</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>FLAGS</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"reload"</literal></expr>, <expr><literal type="string">"reload text file for each frame"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>reload</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_BOOL</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">0</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FLAGS</name></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"alpha"</literal></expr>, <expr><literal type="string">"apply alpha while rendering"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>a_expr</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_STRING</name></expr>, <expr><block>{ <expr><operator>.</operator><name>str</name> <operator>=</operator> <literal type="string">"1"</literal></expr> }</block></expr>, <expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>FLAGS</name></expr> }</block></expr>,

<expr><block>{<expr><literal type="string">"fix_bounds"</literal></expr>, <expr><literal type="string">"check and fix text coords to avoid clipping"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>fix_bounds</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_BOOL</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">0</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FLAGS</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"start_number"</literal></expr>, <expr><literal type="string">"start frame number for n/frame_num variable"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>start_number</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">0</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>FLAGS</name></expr>}</block></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_LIBFRIBIDI</name></expr></cpp:if>

<expr><block>{<expr><literal type="string">"text_shaping"</literal></expr>, <expr><literal type="string">"attempt to shape text before drawing"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>text_shaping</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_BOOL</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FLAGS</name></expr>}</block></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><block>{ <expr><literal type="string">"ft_load_flags"</literal></expr>, <expr><literal type="string">"set font loading flags for libfreetype"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>ft_load_flags</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_FLAGS</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>FT_LOAD_DEFAULT</name></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"ft_load_flags"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"default"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>FT_LOAD_DEFAULT</name></expr> }</block></expr>, <expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>FLAGS</name></expr>, <expr><operator>.</operator><name>unit</name> <operator>=</operator> <literal type="string">"ft_load_flags"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"no_scale"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>FT_LOAD_NO_SCALE</name></expr> }</block></expr>, <expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>FLAGS</name></expr>, <expr><operator>.</operator><name>unit</name> <operator>=</operator> <literal type="string">"ft_load_flags"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"no_hinting"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>FT_LOAD_NO_HINTING</name></expr> }</block></expr>, <expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>FLAGS</name></expr>, <expr><operator>.</operator><name>unit</name> <operator>=</operator> <literal type="string">"ft_load_flags"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"render"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>FT_LOAD_RENDER</name></expr> }</block></expr>, <expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>FLAGS</name></expr>, <expr><operator>.</operator><name>unit</name> <operator>=</operator> <literal type="string">"ft_load_flags"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"no_bitmap"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>FT_LOAD_NO_BITMAP</name></expr> }</block></expr>, <expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>FLAGS</name></expr>, <expr><operator>.</operator><name>unit</name> <operator>=</operator> <literal type="string">"ft_load_flags"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"vertical_layout"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>FT_LOAD_VERTICAL_LAYOUT</name></expr> }</block></expr>, <expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>FLAGS</name></expr>, <expr><operator>.</operator><name>unit</name> <operator>=</operator> <literal type="string">"ft_load_flags"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"force_autohint"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>FT_LOAD_FORCE_AUTOHINT</name></expr> }</block></expr>, <expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>FLAGS</name></expr>, <expr><operator>.</operator><name>unit</name> <operator>=</operator> <literal type="string">"ft_load_flags"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"crop_bitmap"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>FT_LOAD_CROP_BITMAP</name></expr> }</block></expr>, <expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>FLAGS</name></expr>, <expr><operator>.</operator><name>unit</name> <operator>=</operator> <literal type="string">"ft_load_flags"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"pedantic"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>FT_LOAD_PEDANTIC</name></expr> }</block></expr>, <expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>FLAGS</name></expr>, <expr><operator>.</operator><name>unit</name> <operator>=</operator> <literal type="string">"ft_load_flags"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"ignore_global_advance_width"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>FT_LOAD_IGNORE_GLOBAL_ADVANCE_WIDTH</name></expr> }</block></expr>, <expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>FLAGS</name></expr>, <expr><operator>.</operator><name>unit</name> <operator>=</operator> <literal type="string">"ft_load_flags"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"no_recurse"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>FT_LOAD_NO_RECURSE</name></expr> }</block></expr>, <expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>FLAGS</name></expr>, <expr><operator>.</operator><name>unit</name> <operator>=</operator> <literal type="string">"ft_load_flags"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"ignore_transform"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>FT_LOAD_IGNORE_TRANSFORM</name></expr> }</block></expr>, <expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>FLAGS</name></expr>, <expr><operator>.</operator><name>unit</name> <operator>=</operator> <literal type="string">"ft_load_flags"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"monochrome"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>FT_LOAD_MONOCHROME</name></expr> }</block></expr>, <expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>FLAGS</name></expr>, <expr><operator>.</operator><name>unit</name> <operator>=</operator> <literal type="string">"ft_load_flags"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"linear_design"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>FT_LOAD_LINEAR_DESIGN</name></expr> }</block></expr>, <expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>FLAGS</name></expr>, <expr><operator>.</operator><name>unit</name> <operator>=</operator> <literal type="string">"ft_load_flags"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"no_autohint"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>FT_LOAD_NO_AUTOHINT</name></expr> }</block></expr>, <expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>FLAGS</name></expr>, <expr><operator>.</operator><name>unit</name> <operator>=</operator> <literal type="string">"ft_load_flags"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>AVFILTER_DEFINE_CLASS</name><argument_list>(<argument><expr><name>drawtext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>__FTERRORS_H__</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FT_ERROR_START_LIST</name></cpp:macro> <cpp:value>{</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FT_ERRORDEF</name><parameter_list>(<parameter><type><name>e</name></type></parameter>, <parameter><type><name>v</name></type></parameter>, <parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ (e), (s) },</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FT_ERROR_END_LIST</name></cpp:macro> <cpp:value>{ 0, NULL } };</cpp:value></cpp:define>

<struct><specifier>static</specifier> <specifier>const</specifier> struct <name>ft_error</name> <block>{

<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>err_msg</name></decl>;</decl_stmt>

}</block> <decl><name><name>ft_errors</name><index>[]</index></name> <init>=</init></decl></struct>

<cpp:include>#<cpp:directive>include</cpp:directive> FT_ERRORS_H</cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FT_ERRMSG</name><parameter_list>(<parameter><type><name>e</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ft_errors[e].err_msg</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <name>Glyph</name> <block>{

<decl_stmt><decl><type><name>FT_Glyph</name></type> <name>glyph</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>FT_Glyph</name></type> <name>border_glyph</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>code</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>fontsize</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>FT_Bitmap</name></type> <name>bitmap</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>FT_Bitmap</name></type> <name>border_bitmap</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>FT_BBox</name></type> <name>bbox</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>advance</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>bitmap_left</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>bitmap_top</name></decl>;</decl_stmt>

}</block></struct></type> <name>Glyph</name>;</typedef>

<function><type><specifier>static</specifier> <name>int</name></type> <name>glyph_cmp</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>Glyph</name> <modifier>*</modifier></type><name>a</name> <init>= <expr><name>key</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>bb</name> <init>= <expr><name>b</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>diff</name> <init>= <expr><operator>(</operator><name>int64_t</name><operator>)</operator><name><name>a</name><operator>-&gt;</operator><name>code</name></name> <operator>-</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><name><name>bb</name><operator>-&gt;</operator><name>code</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>diff</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><ternary><condition><expr><name>diff</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</return></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<return>return <expr><call><name>FFDIFFSIGN</name><argument_list>(<argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator><name><name>a</name><operator>-&gt;</operator><name>fontsize</name></name></expr></argument>, <argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator><name><name>bb</name><operator>-&gt;</operator><name>fontsize</name></name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>load_glyph</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>Glyph</name> <modifier>*</modifier><modifier>*</modifier></type><name>glyph_ptr</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>code</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>DrawTextContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>FT_BitmapGlyph</name></type> <name>bitmapglyph</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Glyph</name> <modifier>*</modifier></type><name>glyph</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>AVTreeNode</name></name> <modifier>*</modifier></type><name>node</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FT_Load_Char</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>face</name></name></expr></argument>, <argument><expr><name>code</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>ft_load_flags</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>glyph</name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>glyph</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>glyph</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>glyph</name><operator>-&gt;</operator><name>code</name></name> <operator>=</operator> <name>code</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>glyph</name><operator>-&gt;</operator><name>fontsize</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>fontsize</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FT_Get_Glyph</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>face</name><operator>-&gt;</operator><name>glyph</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>glyph</name><operator>-&gt;</operator><name>glyph</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>borderw</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>glyph</name><operator>-&gt;</operator><name>border_glyph</name></name> <operator>=</operator> <name><name>glyph</name><operator>-&gt;</operator><name>glyph</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FT_Glyph_StrokeBorder</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>glyph</name><operator>-&gt;</operator><name>border_glyph</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>stroker</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>||</operator>

<call><name>FT_Glyph_To_Bitmap</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>glyph</name><operator>-&gt;</operator><name>border_glyph</name></name></expr></argument>, <argument><expr><name>FT_RENDER_MODE_NORMAL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>AVERROR_EXTERNAL</name></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>bitmapglyph</name> <operator>=</operator> <operator>(</operator><name>FT_BitmapGlyph</name><operator>)</operator> <name><name>glyph</name><operator>-&gt;</operator><name>border_glyph</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>glyph</name><operator>-&gt;</operator><name>border_bitmap</name></name> <operator>=</operator> <name><name>bitmapglyph</name><operator>-&gt;</operator><name>bitmap</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FT_Glyph_To_Bitmap</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>glyph</name><operator>-&gt;</operator><name>glyph</name></name></expr></argument>, <argument><expr><name>FT_RENDER_MODE_NORMAL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>AVERROR_EXTERNAL</name></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>bitmapglyph</name> <operator>=</operator> <operator>(</operator><name>FT_BitmapGlyph</name><operator>)</operator> <name><name>glyph</name><operator>-&gt;</operator><name>glyph</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>glyph</name><operator>-&gt;</operator><name>bitmap</name></name> <operator>=</operator> <name><name>bitmapglyph</name><operator>-&gt;</operator><name>bitmap</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>glyph</name><operator>-&gt;</operator><name>bitmap_left</name></name> <operator>=</operator> <name><name>bitmapglyph</name><operator>-&gt;</operator><name>left</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>glyph</name><operator>-&gt;</operator><name>bitmap_top</name></name> <operator>=</operator> <name><name>bitmapglyph</name><operator>-&gt;</operator><name>top</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>glyph</name><operator>-&gt;</operator><name>advance</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>face</name><operator>-&gt;</operator><name>glyph</name><operator>-&gt;</operator><name>advance</name><operator>.</operator><name>x</name></name> <operator>&gt;&gt;</operator> <literal type="number">6</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>FT_Glyph_Get_CBox</name><argument_list>(<argument><expr><name><name>glyph</name><operator>-&gt;</operator><name>glyph</name></name></expr></argument>, <argument><expr><name>ft_glyph_bbox_pixels</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>glyph</name><operator>-&gt;</operator><name>bbox</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>node</name> <operator>=</operator> <call><name>av_tree_node_alloc</name><argument_list>()</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_tree_insert</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>glyphs</name></name></expr></argument>, <argument><expr><name>glyph</name></expr></argument>, <argument><expr><name>glyph_cmp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>glyph_ptr</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>glyph_ptr</name> <operator>=</operator> <name>glyph</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<label><name>error</name>:</label>

<if_stmt><if>if <condition>(<expr><name>glyph</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>glyph</name><operator>-&gt;</operator><name>glyph</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>glyph</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>set_fontsize</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>fontsize</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DrawTextContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>FT_Set_Pixel_Sizes</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>face</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>fontsize</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Could not set font size to %d pixels: %s\n"</literal></expr></argument>,

<argument><expr><name>fontsize</name></expr></argument>, <argument><expr><call><name>FT_ERRMSG</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>fontsize</name></name> <operator>=</operator> <name>fontsize</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>parse_fontsize</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>DrawTextContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>fontsize_pexpr</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>fontsize_expr</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>av_expr_parse</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>fontsize_pexpr</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>fontsize_expr</name></name></expr></argument>, <argument><expr><name>var_names</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>fun2_names</name></expr></argument>, <argument><expr><name>fun2</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>update_fontsize</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>DrawTextContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>fontsize</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>default_fontsize</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>size</name></decl>, <decl><type ref="prev"/><name>roundedsize</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>fontsize_expr</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>parse_fontsize</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>av_expr_eval</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>fontsize_pexpr</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>var_values</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>prng</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isnan</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>roundedsize</name> <operator>=</operator> <call><name>round</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>roundedsize</name> <operator>&gt;</operator> <name>INT_MIN</name> <operator>&amp;&amp;</operator> <name>roundedsize</name> <operator>&lt;</operator> <name>INT_MAX</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"fontsize overflow\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>fontsize</name> <operator>=</operator> <name>roundedsize</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>fontsize</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>fontsize</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>fontsize</name> <operator>==</operator> <name><name>s</name><operator>-&gt;</operator><name>fontsize</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>set_fontsize</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>fontsize</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>load_font_file</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>index</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>DrawTextContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>FT_New_Face</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>library</name></name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>index</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>face</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name></expr>)</condition> <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>CONFIG_LIBFONTCONFIG</name></expr></cpp:if>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Could not load font \"%s\": %s\n"</literal></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>fontfile</name></name></expr></argument>, <argument><expr><call><name>FT_ERRMSG</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_LIBFONTCONFIG</name></expr></cpp:if>

<function><type><specifier>static</specifier> <name>int</name></type> <name>load_font_fontconfig</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>DrawTextContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>FcConfig</name> <modifier>*</modifier></type><name>fontconfig</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>FcPattern</name> <modifier>*</modifier></type><name>pat</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>best</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>FcResult</name></type> <name>result</name> <init>= <expr><name>FcResultMatch</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>FcChar8</name> <modifier>*</modifier></type><name>filename</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>index</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>err</name> <init>= <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOENT</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>parse_err</name></decl>;</decl_stmt>

<expr_stmt><expr><name>fontconfig</name> <operator>=</operator> <call><name>FcInitLoadConfigAndFonts</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>fontconfig</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"impossible to init fontconfig\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_UNKNOWN</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>pat</name> <operator>=</operator> <call><name>FcNameParse</name><argument_list>(<argument><expr><ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>fontfile</name></name></expr> ?</condition><then> <expr><name><name>s</name><operator>-&gt;</operator><name>fontfile</name></name></expr> </then><else>:

<expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>intptr_t</name><operator>)</operator><literal type="string">"default"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>pat</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"could not parse fontconfig pat"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>FcPatternAddString</name><argument_list>(<argument><expr><name>pat</name></expr></argument>, <argument><expr><name>FC_FAMILY</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>font</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>parse_err</name> <operator>=</operator> <call><name>parse_fontsize</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>parse_err</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>double</name></type> <name>size</name> <init>= <expr><call><name>av_expr_eval</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>fontsize_pexpr</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>var_values</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>prng</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>isnan</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"impossible to find font information"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>FcPatternAddDouble</name><argument_list>(<argument><expr><name>pat</name></expr></argument>, <argument><expr><name>FC_SIZE</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>FcDefaultSubstitute</name><argument_list>(<argument><expr><name>pat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>FcConfigSubstitute</name><argument_list>(<argument><expr><name>fontconfig</name></expr></argument>, <argument><expr><name>pat</name></expr></argument>, <argument><expr><name>FcMatchPattern</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"could not substitue fontconfig options"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>FcPatternDestroy</name><argument_list>(<argument><expr><name>pat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>best</name> <operator>=</operator> <call><name>FcFontMatch</name><argument_list>(<argument><expr><name>fontconfig</name></expr></argument>, <argument><expr><name>pat</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>FcPatternDestroy</name><argument_list>(<argument><expr><name>pat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>best</name> <operator>||</operator> <name>result</name> <operator>!=</operator> <name>FcResultMatch</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"Cannot find a valid font for the family %s\n"</literal></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>font</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(

<expr><call><name>FcPatternGetInteger</name><argument_list>(<argument><expr><name>best</name></expr></argument>, <argument><expr><name>FC_INDEX</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>index</name></expr></argument> )</argument_list></call> <operator>!=</operator> <name>FcResultMatch</name> <operator>||</operator>

<call><name>FcPatternGetDouble</name> <argument_list>(<argument><expr><name>best</name></expr></argument>, <argument><expr><name>FC_SIZE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument> )</argument_list></call> <operator>!=</operator> <name>FcResultMatch</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"impossible to find font information"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FcPatternGetString</name><argument_list>(<argument><expr><name>best</name></expr></argument>, <argument><expr><name>FC_FILE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>filename</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>FcResultMatch</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"No file path for %s\n"</literal></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>font</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"Using \"%s\"\n"</literal></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>parse_err</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>default_fontsize</name></name> <operator>=</operator> <name>size</name> <operator>+</operator> <literal type="number">0.5</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>load_font_file</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>filename</name></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>FcConfigDestroy</name><argument_list>(<argument><expr><name>fontconfig</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>fail</name>:</label>

<expr_stmt><expr><call><name>FcPatternDestroy</name><argument_list>(<argument><expr><name>best</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>err</name></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>int</name></type> <name>load_font</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>DrawTextContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>load_font_file</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>fontfile</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>err</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_LIBFONTCONFIG</name></expr></cpp:if>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>load_font_fontconfig</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>err</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>err</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>load_textfile</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>DrawTextContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>textbuf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>tmp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>textbuf_size</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>av_file_map</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>textfile</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>textbuf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>textbuf_size</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"The text file '%s' could not be read or is empty\n"</literal></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>textfile</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>err</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>textbuf_size</name> <operator>&gt;</operator> <name>SIZE_MAX</name> <operator>-</operator> <literal type="number">1</literal> <operator>||</operator> <operator>!</operator><operator>(</operator><name>tmp</name> <operator>=</operator> <call><name>av_realloc</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>text</name></name></expr></argument>, <argument><expr><name>textbuf_size</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_file_unmap</name><argument_list>(<argument><expr><name>textbuf</name></expr></argument>, <argument><expr><name>textbuf_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>text</name></name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>text</name></name></expr></argument>, <argument><expr><name>textbuf</name></expr></argument>, <argument><expr><name>textbuf_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>text</name><index>[<expr><name>textbuf_size</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_file_unmap</name><argument_list>(<argument><expr><name>textbuf</name></expr></argument>, <argument><expr><name>textbuf_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>is_newline</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>c</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name>c</name> <operator>==</operator> <literal type="char">'\n'</literal> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">'\r'</literal> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">'\f'</literal> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">'\v'</literal></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_LIBFRIBIDI</name></expr></cpp:if>

<function><type><specifier>static</specifier> <name>int</name></type> <name>shape_text</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>DrawTextContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>tmp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>FriBidiFlags</name></type> <name>flags</name> <init>= <expr><name>FRIBIDI_FLAGS_DEFAULT</name> <operator>|</operator>

<name>FRIBIDI_FLAGS_ARABIC</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>FriBidiChar</name> <modifier>*</modifier></type><name>unicodestr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>FriBidiStrIndex</name></type> <name>len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>FriBidiParType</name></type> <name>direction</name> <init>= <expr><name>FRIBIDI_PAR_LTR</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>FriBidiStrIndex</name></type> <name>line_start</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>FriBidiStrIndex</name></type> <name>line_end</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>FriBidiLevel</name> <modifier>*</modifier></type><name>embedding_levels</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>FriBidiArabicProp</name> <modifier>*</modifier></type><name>ar_props</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>FriBidiCharType</name> <modifier>*</modifier></type><name>bidi_types</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>FriBidiStrIndex</name></type> <name>i</name></decl>,<decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>text</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>unicodestr</name> <operator>=</operator> <call><name>av_malloc_array</name><argument_list>(<argument><expr><name>len</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>unicodestr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<goto>goto <name>out</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>fribidi_charset_to_unicode</name><argument_list>(<argument><expr><name>FRIBIDI_CHAR_SET_UTF8</name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>text</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>unicodestr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>bidi_types</name> <operator>=</operator> <call><name>av_malloc_array</name><argument_list>(<argument><expr><name>len</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>bidi_types</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>bidi_types</name></expr>)</condition> <block>{<block_content>

<goto>goto <name>out</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>fribidi_get_bidi_types</name><argument_list>(<argument><expr><name>unicodestr</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>bidi_types</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>embedding_levels</name> <operator>=</operator> <call><name>av_malloc_array</name><argument_list>(<argument><expr><name>len</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>embedding_levels</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>embedding_levels</name></expr>)</condition> <block>{<block_content>

<goto>goto <name>out</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>fribidi_get_par_embedding_levels</name><argument_list>(<argument><expr><name>bidi_types</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>direction</name></expr></argument>,

<argument><expr><name>embedding_levels</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<goto>goto <name>out</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ar_props</name> <operator>=</operator> <call><name>av_malloc_array</name><argument_list>(<argument><expr><name>len</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>ar_props</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ar_props</name></expr>)</condition> <block>{<block_content>

<goto>goto <name>out</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>fribidi_get_joining_types</name><argument_list>(<argument><expr><name>unicodestr</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>ar_props</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fribidi_join_arabic</name><argument_list>(<argument><expr><name>bidi_types</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>embedding_levels</name></expr></argument>, <argument><expr><name>ar_props</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fribidi_shape</name><argument_list>(<argument><expr><name>flags</name></expr></argument>, <argument><expr><name>embedding_levels</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>ar_props</name></expr></argument>, <argument><expr><name>unicodestr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>line_end</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>line_start</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>line_end</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>line_end</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>is_newline</name><argument_list>(<argument><expr><name><name>unicodestr</name><index>[<expr><name>line_end</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>||</operator> <name>line_end</name> <operator>==</operator> <name>len</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>fribidi_reorder_line</name><argument_list>(<argument><expr><name>flags</name></expr></argument>, <argument><expr><name>bidi_types</name></expr></argument>,

<argument><expr><name>line_end</name> <operator>-</operator> <name>line_start</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>line_start</name></expr></argument>,

<argument><expr><name>direction</name></expr></argument>, <argument><expr><name>embedding_levels</name></expr></argument>, <argument><expr><name>unicodestr</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<goto>goto <name>out</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>line_start</name> <operator>=</operator> <name>line_end</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name><name>unicodestr</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name>FRIBIDI_CHAR_FILL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>unicodestr</name><index>[<expr><name>j</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>unicodestr</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>

<expr_stmt><expr><name>len</name> <operator>=</operator> <name>j</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>tmp</name> <operator>=</operator> <call><name>av_realloc</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>text</name></name></expr></argument>, <argument><expr><operator>(</operator><name>len</name> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>text</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<goto>goto <name>out</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>text</name></name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>fribidi_unicode_to_charset</name><argument_list>(<argument><expr><name>FRIBIDI_CHAR_SET_UTF8</name></expr></argument>,

<argument><expr><name>unicodestr</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>text</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<label><name>out</name>:</label>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>unicodestr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>embedding_levels</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>ar_props</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>bidi_types</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>init</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DrawTextContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Glyph</name> <modifier>*</modifier></type><name>glyph</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_expr_free</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>fontsize_pexpr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>fontsize_pexpr</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>fontsize</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>default_fontsize</name></name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>fontfile</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name>CONFIG_LIBFONTCONFIG</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"No font filename provided\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>textfile</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>text</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"Both text and text file provided. Please provide only one\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>load_textfile</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>reload</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>textfile</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"No file to reload\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>tc_opt_string</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>av_timecode_init_from_string</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>tc</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>tc_rate</name></name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>tc_opt_string</name></name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>tc24hmax</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>tc</name><operator>.</operator><name>flags</name></name> <operator>|=</operator> <name>AV_TIMECODE_FLAG_24HOURSMAX</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>text</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>text</name></name> <operator>=</operator> <call><name>av_strdup</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>text</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"Either text, a valid file or a timecode must be provided\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_LIBFRIBIDI</name></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>text_shaping</name></name></expr>)</condition><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>shape_text</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>FT_Init_FreeType</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>library</name></name><operator>)</operator></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"Could not load FreeType: %s\n"</literal></expr></argument>, <argument><expr><call><name>FT_ERRMSG</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>load_font</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>update_fontsize</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>borderw</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>FT_Stroker_New</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>library</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>stroker</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Coult not init FT stroker\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_EXTERNAL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>FT_Stroker_Set</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>stroker</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>borderw</name></name> <operator>&lt;&lt;</operator> <literal type="number">6</literal></expr></argument>, <argument><expr><name>FT_STROKER_LINECAP_ROUND</name></expr></argument>,

<argument><expr><name>FT_STROKER_LINEJOIN_ROUND</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>use_kerning</name></name> <operator>=</operator> <call><name>FT_HAS_KERNING</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>face</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>load_glyph</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>load_glyph</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>glyph</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Could not set tabsize.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>err</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>tabsize</name></name> <operator>*=</operator> <name><name>glyph</name><operator>-&gt;</operator><name>advance</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>exp_mode</name></name> <operator>==</operator> <name>EXP_STRFTIME</name> <operator>&amp;&amp;</operator>

<operator>(</operator><call><name>strchr</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>text</name></name></expr></argument>, <argument><expr><literal type="char">'%'</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>strchr</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>text</name></name></expr></argument>, <argument><expr><literal type="char">'\\'</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"expansion=strftime is deprecated.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_bprint_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>expanded_text</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>AV_BPRINT_SIZE_UNLIMITED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_bprint_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>expanded_fontcolor</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>AV_BPRINT_SIZE_UNLIMITED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>query_formats</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>ff_set_common_formats</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><call><name>ff_draw_supported_pixel_formats</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>glyph_enu_free</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>opaque</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>elem</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>Glyph</name> <modifier>*</modifier></type><name>glyph</name> <init>= <expr><name>elem</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>FT_Done_Glyph</name><argument_list>(<argument><expr><name><name>glyph</name><operator>-&gt;</operator><name>glyph</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>FT_Done_Glyph</name><argument_list>(<argument><expr><name><name>glyph</name><operator>-&gt;</operator><name>border_glyph</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>elem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>void</name></type> <name>uninit</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>DrawTextContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_expr_free</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>x_pexpr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_expr_free</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>y_pexpr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_expr_free</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>a_pexpr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_expr_free</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>fontsize_pexpr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>x_pexpr</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>y_pexpr</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>a_pexpr</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>fontsize_pexpr</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>positions</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>nb_positions</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_tree_enumerate</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>glyphs</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>glyph_enu_free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_tree_destroy</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>glyphs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>glyphs</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>FT_Done_Face</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>face</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>FT_Stroker_Done</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>stroker</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>FT_Done_FreeType</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>library</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_bprint_finalize</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>expanded_text</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_bprint_finalize</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>expanded_fontcolor</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>config_input</name><parameter_list>(<parameter><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>inlink</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>inlink</name><operator>-&gt;</operator><name>dst</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DrawTextContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>expr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ff_draw_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>dc</name></name></expr></argument>, <argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>format</name></name></expr></argument>, <argument><expr><name>FF_DRAW_PROCESS_ALPHA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_draw_color</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>dc</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>fontcolor</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>fontcolor</name><operator>.</operator><name>rgba</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_draw_color</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>dc</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>shadowcolor</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>shadowcolor</name><operator>.</operator><name>rgba</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_draw_color</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>dc</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>bordercolor</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>bordercolor</name><operator>.</operator><name>rgba</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_draw_color</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>dc</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>boxcolor</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>boxcolor</name><operator>.</operator><name>rgba</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>var_values</name><index>[<expr><name>VAR_w</name></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>var_values</name><index>[<expr><name>VAR_W</name></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>var_values</name><index>[<expr><name>VAR_MAIN_W</name></expr>]</index></name> <operator>=</operator> <name><name>inlink</name><operator>-&gt;</operator><name>w</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>var_values</name><index>[<expr><name>VAR_h</name></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>var_values</name><index>[<expr><name>VAR_H</name></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>var_values</name><index>[<expr><name>VAR_MAIN_H</name></expr>]</index></name> <operator>=</operator> <name><name>inlink</name><operator>-&gt;</operator><name>h</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>var_values</name><index>[<expr><name>VAR_SAR</name></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><name><name>inlink</name><operator>-&gt;</operator><name>sample_aspect_ratio</name><operator>.</operator><name>num</name></name></expr> ?</condition><then> <expr><call><name>av_q2d</name><argument_list>(<argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>sample_aspect_ratio</name></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>var_values</name><index>[<expr><name>VAR_DAR</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>double</name><operator>)</operator><name><name>inlink</name><operator>-&gt;</operator><name>w</name></name> <operator>/</operator> <name><name>inlink</name><operator>-&gt;</operator><name>h</name></name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>var_values</name><index>[<expr><name>VAR_SAR</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>var_values</name><index>[<expr><name>VAR_HSUB</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>dc</name><operator>.</operator><name>hsub_max</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>var_values</name><index>[<expr><name>VAR_VSUB</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>dc</name><operator>.</operator><name>vsub_max</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>var_values</name><index>[<expr><name>VAR_X</name></expr>]</index></name> <operator>=</operator> <name>NAN</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>var_values</name><index>[<expr><name>VAR_Y</name></expr>]</index></name> <operator>=</operator> <name>NAN</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>var_values</name><index>[<expr><name>VAR_T</name></expr>]</index></name> <operator>=</operator> <name>NAN</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_lfg_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>prng</name></name></expr></argument>, <argument><expr><call><name>av_get_random_seed</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_expr_free</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>x_pexpr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_expr_free</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>y_pexpr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_expr_free</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>a_pexpr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>x_pexpr</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>y_pexpr</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>a_pexpr</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>av_expr_parse</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>x_pexpr</name></name></expr></argument>, <argument><expr><name>expr</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>x_expr</name></name></expr></argument>, <argument><expr><name>var_names</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>fun2_names</name></expr></argument>, <argument><expr><name>fun2</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator>

<operator>(</operator><name>ret</name> <operator>=</operator> <call><name>av_expr_parse</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>y_pexpr</name></name></expr></argument>, <argument><expr><name>expr</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>y_expr</name></name></expr></argument>, <argument><expr><name>var_names</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>fun2_names</name></expr></argument>, <argument><expr><name>fun2</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator>

<operator>(</operator><name>ret</name> <operator>=</operator> <call><name>av_expr_parse</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>a_pexpr</name></name></expr></argument>, <argument><expr><name>expr</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>a_expr</name></name></expr></argument>, <argument><expr><name>var_names</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>fun2_names</name></expr></argument>, <argument><expr><name>fun2</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to parse expression: %s \n"</literal></expr></argument>, <argument><expr><name>expr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>command</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>res</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>res_len</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>DrawTextContext</name> <modifier>*</modifier></type><name>old</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DrawTextContext</name> <modifier>*</modifier></type><name>new</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="string">"reinit"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>new</name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>DrawTextContext</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>new</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>class</name></name> <operator>=</operator> <operator>&amp;</operator><name>drawtext_class</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>av_opt_copy</name><argument_list>(<argument><expr><name>new</name></expr></argument>, <argument><expr><name>old</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name> <operator>=</operator> <name>new</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>av_set_options_string</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"="</literal></expr></argument>, <argument><expr><literal type="string">":"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name> <operator>=</operator> <name>old</name></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>init</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>uninit</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name> <operator>=</operator> <name>old</name></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>reinit</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name> <operator>=</operator> <name>old</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>uninit</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>old</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name> <operator>=</operator> <name>new</name></expr>;</expr_stmt>

<return>return <expr><call><name>config_input</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>inputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOSYS</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></else></if_stmt>

<label><name>fail</name>:</label>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to process command. Continuing with existing parameters.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>new</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>func_pict_type</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>AVBPrint</name> <modifier>*</modifier></type><name>bp</name></decl></parameter>,

<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>fct</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>tag</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>DrawTextContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_bprintf</name><argument_list>(<argument><expr><name>bp</name></expr></argument>, <argument><expr><literal type="string">"%c"</literal></expr></argument>, <argument><expr><call><name>av_get_picture_type_char</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>var_values</name><index>[<expr><name>VAR_PICT_TYPE</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>func_pts</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>AVBPrint</name> <modifier>*</modifier></type><name>bp</name></decl></parameter>,

<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>fct</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>tag</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>DrawTextContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>pts</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>var_values</name><index>[<expr><name>VAR_T</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name>fmt</name> <operator>=</operator> <ternary><condition><expr><name>argc</name> <operator>&gt;=</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr> </then><else>: <expr><literal type="string">"flt"</literal></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>&gt;=</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int64_t</name></type> <name>delta</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>av_parse_time</name><argument_list>(<argument><expr><operator>&amp;</operator><name>delta</name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid delta '%s'\n"</literal></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>pts</name> <operator>+=</operator> <operator>(</operator><name>double</name><operator>)</operator><name>delta</name> <operator>/</operator> <name>AV_TIME_BASE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>fmt</name></expr></argument>, <argument><expr><literal type="string">"flt"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_bprintf</name><argument_list>(<argument><expr><name>bp</name></expr></argument>, <argument><expr><literal type="string">"%.6f"</literal></expr></argument>, <argument><expr><name>pts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>fmt</name></expr></argument>, <argument><expr><literal type="string">"hms"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>isnan</name><argument_list>(<argument><expr><name>pts</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_bprintf</name><argument_list>(<argument><expr><name>bp</name></expr></argument>, <argument><expr><literal type="string">" ??:??:??.???"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>int64_t</name></type> <name>ms</name> <init>= <expr><call><name>llrint</name><argument_list>(<argument><expr><name>pts</name> <operator>*</operator> <literal type="number">1000</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name>sign</name> <init>= <expr><literal type="char">' '</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ms</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>sign</name> <operator>=</operator> <literal type="char">'-'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>ms</name> <operator>=</operator> <operator>-</operator><name>ms</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>&gt;=</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"24HH"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ms</name> <operator>%=</operator> <literal type="number">24</literal> <operator>*</operator> <literal type="number">60</literal> <operator>*</operator> <literal type="number">60</literal> <operator>*</operator> <literal type="number">1000</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid argument '%s'\n"</literal></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_bprintf</name><argument_list>(<argument><expr><name>bp</name></expr></argument>, <argument><expr><literal type="string">"%c%02d:%02d:%02d.%03d"</literal></expr></argument>, <argument><expr><name>sign</name></expr></argument>,

<argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>ms</name> <operator>/</operator> <operator>(</operator><literal type="number">60</literal> <operator>*</operator> <literal type="number">60</literal> <operator>*</operator> <literal type="number">1000</literal><operator>)</operator><operator>)</operator></expr></argument>,

<argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>ms</name> <operator>/</operator> <operator>(</operator><literal type="number">60</literal> <operator>*</operator> <literal type="number">1000</literal><operator>)</operator><operator>)</operator> <operator>%</operator> <literal type="number">60</literal></expr></argument>,

<argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>ms</name> <operator>/</operator> <literal type="number">1000</literal><operator>)</operator> <operator>%</operator> <literal type="number">60</literal></expr></argument>,

<argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>ms</name> <operator>%</operator> <literal type="number">1000</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>fmt</name></expr></argument>, <argument><expr><literal type="string">"localtime"</literal></expr></argument>)</argument_list></call> <operator>||</operator>

<operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>fmt</name></expr></argument>, <argument><expr><literal type="string">"gmtime"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>tm</name></name></type> <name>tm</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>time_t</name></type> <name>ms</name> <init>= <expr><operator>(</operator><name>time_t</name><operator>)</operator><name>pts</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>timefmt</name> <init>= <expr><ternary><condition><expr><name>argc</name> <operator>&gt;=</operator> <literal type="number">3</literal></expr> ?</condition><then> <expr><name><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr> </then><else>: <expr><literal type="string">"%Y-%m-%d %H:%M:%S"</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>fmt</name></expr></argument>, <argument><expr><literal type="string">"localtime"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>localtime_r</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ms</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>gmtime_r</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ms</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>av_bprint_strftime</name><argument_list>(<argument><expr><name>bp</name></expr></argument>, <argument><expr><name>timefmt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid format '%s'\n"</literal></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></else></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>func_frame_num</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>AVBPrint</name> <modifier>*</modifier></type><name>bp</name></decl></parameter>,

<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>fct</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>tag</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>DrawTextContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_bprintf</name><argument_list>(<argument><expr><name>bp</name></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>s</name><operator>-&gt;</operator><name>var_values</name><index>[<expr><name>VAR_N</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>func_metadata</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>AVBPrint</name> <modifier>*</modifier></type><name>bp</name></decl></parameter>,

<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>fct</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>tag</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>DrawTextContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVDictionaryEntry</name> <modifier>*</modifier></type><name>e</name> <init>= <expr><call><name>av_dict_get</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>metadata</name></name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>e</name> <operator>&amp;&amp;</operator> <name><name>e</name><operator>-&gt;</operator><name>value</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_bprintf</name><argument_list>(<argument><expr><name>bp</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>e</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>argc</name> <operator>&gt;=</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_bprintf</name><argument_list>(<argument><expr><name>bp</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>func_strftime</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>AVBPrint</name> <modifier>*</modifier></type><name>bp</name></decl></parameter>,

<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>fct</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>tag</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name> <init>= <expr><ternary><condition><expr><name>argc</name></expr> ?</condition><then> <expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr> </then><else>: <expr><literal type="string">"%Y-%m-%d %H:%M:%S"</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>time_t</name></type> <name>now</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>tm</name></name></type> <name>tm</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>time</name><argument_list>(<argument><expr><operator>&amp;</operator><name>now</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>tag</name> <operator>==</operator> <literal type="char">'L'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>localtime_r</name><argument_list>(<argument><expr><operator>&amp;</operator><name>now</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>tm</name> <operator>=</operator> <operator>*</operator><call><name>gmtime_r</name><argument_list>(<argument><expr><operator>&amp;</operator><name>now</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>av_bprint_strftime</name><argument_list>(<argument><expr><name>bp</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>func_eval_expr</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>AVBPrint</name> <modifier>*</modifier></type><name>bp</name></decl></parameter>,

<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>fct</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>tag</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>DrawTextContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>res</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>av_expr_parse_and_eval</name><argument_list>(<argument><expr><operator>&amp;</operator><name>res</name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>var_names</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>var_values</name></name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>fun2_names</name></expr></argument>, <argument><expr><name>fun2</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>prng</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"Expression '%s' for the expr text expansion function is not valid\n"</literal></expr></argument>,

<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_bprintf</name><argument_list>(<argument><expr><name>bp</name></expr></argument>, <argument><expr><literal type="string">"%f"</literal></expr></argument>, <argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>func_eval_expr_int_format</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>AVBPrint</name> <modifier>*</modifier></type><name>bp</name></decl></parameter>,

<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>fct</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>tag</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>DrawTextContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>res</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>intval</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>positions</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>fmt_str</name><index>[<expr><literal type="number">30</literal></expr>]</index></name> <init>= <expr><literal type="string">"%"</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>av_expr_parse_and_eval</name><argument_list>(<argument><expr><operator>&amp;</operator><name>res</name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>var_names</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>var_values</name></name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>fun2_names</name></expr></argument>, <argument><expr><name>fun2</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>prng</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"Expression '%s' for the expr text expansion function is not valid\n"</literal></expr></argument>,

<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strchr</name><argument_list>(<argument><expr><literal type="string">"xXdu"</literal></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid format '%c' specified,"</literal>

<literal type="string">" allowed values: 'x', 'X', 'd', 'u'\n"</literal></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>sscanf</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"%u"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>positions</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"expr_int_format(): Invalid number of positions"</literal>

<literal type="string">" to print: '%s'\n"</literal></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>feclearexcept</name><argument_list>(<argument><expr><name>FE_ALL_EXCEPT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>intval</name> <operator>=</operator> <name>res</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>fetestexcept</name><argument_list>(<argument><expr><name>FE_INVALID</name><operator>|</operator><name>FE_OVERFLOW</name><operator>|</operator><name>FE_UNDERFLOW</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Conversion of floating-point result to int failed. Control register: 0x%08x. Conversion result: %d\n"</literal></expr></argument>, <argument><expr><name>ret</name></expr></argument>, <argument><expr><name>intval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_strlcatf</name><argument_list>(<argument><expr><name>fmt_str</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>fmt_str</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"0%u"</literal></expr></argument>, <argument><expr><name>positions</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_strlcatf</name><argument_list>(<argument><expr><name>fmt_str</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>fmt_str</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%c"</literal></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Formatting value %f (expr '%s') with spec '%s'\n"</literal></expr></argument>,

<argument><expr><name>res</name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>fmt_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_bprintf</name><argument_list>(<argument><expr><name>bp</name></expr></argument>, <argument><expr><name>fmt_str</name></expr></argument>, <argument><expr><name>intval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<struct><specifier>static</specifier> <specifier>const</specifier> struct <name>drawtext_function</name> <block>{

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>argc_min</name></decl>, <decl><type ref="prev"/><name>argc_max</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>tag</name></decl>;</decl_stmt> 

<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>func</name>)<parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>AVBPrint</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>unsigned</name></type></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>

}</block> <decl><name><name>functions</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><literal type="string">"expr"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>func_eval_expr</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"e"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>func_eval_expr</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"expr_int_format"</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>func_eval_expr_int_format</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"eif"</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>func_eval_expr_int_format</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"pict_type"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>func_pict_type</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"pts"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>func_pts</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"gmtime"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="char">'G'</literal></expr>, <expr><name>func_strftime</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"localtime"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="char">'L'</literal></expr>, <expr><name>func_strftime</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"frame_num"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>func_frame_num</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"n"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>func_frame_num</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"metadata"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>func_metadata</name></expr> }</block></expr>,

}</block></expr></init></decl>;</struct>

<function><type><specifier>static</specifier> <name>int</name></type> <name>eval_function</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>AVBPrint</name> <modifier>*</modifier></type><name>bp</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>fct</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>functions</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>fct</name></expr></argument>, <argument><expr><name><name>functions</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>&lt;</operator> <name><name>functions</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>argc_min</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"%%{%s} requires at least %d arguments\n"</literal></expr></argument>,

<argument><expr><name>fct</name></expr></argument>, <argument><expr><name><name>functions</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>argc_min</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>&gt;</operator> <name><name>functions</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>argc_max</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"%%{%s} requires at most %d arguments\n"</literal></expr></argument>,

<argument><expr><name>fct</name></expr></argument>, <argument><expr><name><name>functions</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>argc_max</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<break>break;</break>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;=</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>functions</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"%%{%s} is not known\n"</literal></expr></argument>, <argument><expr><name>fct</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name><name>functions</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>func</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>bp</name></expr></argument>, <argument><expr><name>fct</name></expr></argument>, <argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><name><name>functions</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>tag</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>expand_function</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>AVBPrint</name> <modifier>*</modifier></type><name>bp</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>rtext</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>text</name> <init>= <expr><operator>*</operator><name>rtext</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name><name>argv</name><index>[<expr><literal type="number">16</literal></expr>]</index></name> <init>= <expr><block>{ <expr><name>NULL</name></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>argc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>text</name> <operator>!=</operator> <literal type="char">'{'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Stray %% near '%s'\n"</literal></expr></argument>, <argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>text</name><operator>++</operator></expr>;</expr_stmt>

<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>argv</name><index>[<expr><name>argc</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <call><name>av_get_token</name><argument_list>(<argument><expr><operator>&amp;</operator><name>text</name></expr></argument>, <argument><expr><literal type="string">":}"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>end</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>text</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Unterminated %%{} near '%s'\n"</literal></expr></argument>, <argument><expr><operator>*</operator><name>rtext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>end</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>==</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argv</name><index>[<expr><operator>--</operator><name>argc</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>text</name> <operator>==</operator> <literal type="char">'}'</literal></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>text</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>eval_function</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>bp</name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>argc</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>argv</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>end</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>rtext</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>text</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<label><name>end</name>:</label>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>argc</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>expand_text</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>text</name></decl></parameter>, <parameter><decl><type><name>AVBPrint</name> <modifier>*</modifier></type><name>bp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_bprint_clear</name><argument_list>(<argument><expr><name>bp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>*</operator><name>text</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>text</name> <operator>==</operator> <literal type="char">'\\'</literal> <operator>&amp;&amp;</operator> <name><name>text</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_bprint_chars</name><argument_list>(<argument><expr><name>bp</name></expr></argument>, <argument><expr><name><name>text</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>text</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>*</operator><name>text</name> <operator>==</operator> <literal type="char">'%'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>text</name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>expand_function</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>bp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>text</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>av_bprint_chars</name><argument_list>(<argument><expr><name>bp</name></expr></argument>, <argument><expr><operator>*</operator><name>text</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>text</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>av_bprint_is_complete</name><argument_list>(<argument><expr><name>bp</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>draw_glyphs</name><parameter_list>(<parameter><decl><type><name>DrawTextContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>frame</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>,

<parameter><decl><type><name>FFDrawColor</name> <modifier>*</modifier></type><name>color</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>borderw</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>text</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>expanded_text</name><operator>.</operator><name>str</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>x1</name></decl>, <decl><type ref="prev"/><name>y1</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Glyph</name> <modifier>*</modifier></type><name>glyph</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>p</name> <operator>=</operator> <name>text</name></expr>;</init> <condition><expr><operator>*</operator><name>p</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>FT_Bitmap</name></type> <name>bitmap</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Glyph</name></type> <name>dummy</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<macro><name>GET_UTF8</name><argument_list>(<argument>code</argument>, <argument>*p ? *p++ : <literal type="number">0</literal></argument>, <argument>code = <literal type="number">0xfffd</literal>; goto continue_on_invalid;</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<label><name>continue_on_invalid</name>:</label>

<if_stmt><if>if <condition>(<expr><name>code</name> <operator>==</operator> <literal type="char">'\n'</literal> <operator>||</operator> <name>code</name> <operator>==</operator> <literal type="char">'\r'</literal> <operator>||</operator> <name>code</name> <operator>==</operator> <literal type="char">'\t'</literal></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>dummy</name><operator>.</operator><name>code</name></name> <operator>=</operator> <name>code</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dummy</name><operator>.</operator><name>fontsize</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>fontsize</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>glyph</name> <operator>=</operator> <call><name>av_tree_find</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>glyphs</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dummy</name></expr></argument>, <argument><expr><name>glyph_cmp</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>bitmap</name> <operator>=</operator> <ternary><condition><expr><name>borderw</name></expr> ?</condition><then> <expr><name><name>glyph</name><operator>-&gt;</operator><name>border_bitmap</name></name></expr> </then><else>: <expr><name><name>glyph</name><operator>-&gt;</operator><name>bitmap</name></name></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>glyph</name><operator>-&gt;</operator><name>bitmap</name><operator>.</operator><name>pixel_mode</name></name> <operator>!=</operator> <name>FT_PIXEL_MODE_MONO</name> <operator>&amp;&amp;</operator>

<name><name>glyph</name><operator>-&gt;</operator><name>bitmap</name><operator>.</operator><name>pixel_mode</name></name> <operator>!=</operator> <name>FT_PIXEL_MODE_GRAY</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>x1</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>positions</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>x</name><operator>+</operator><name><name>s</name><operator>-&gt;</operator><name>x</name></name><operator>+</operator><name>x</name> <operator>-</operator> <name>borderw</name></expr>;</expr_stmt>

<expr_stmt><expr><name>y1</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>positions</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>y</name><operator>+</operator><name><name>s</name><operator>-&gt;</operator><name>y</name></name><operator>+</operator><name>y</name> <operator>-</operator> <name>borderw</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_blend_mask</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>dc</name></name></expr></argument>, <argument><expr><name>color</name></expr></argument>,

<argument><expr><name><name>frame</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>frame</name><operator>-&gt;</operator><name>linesize</name></name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>,

<argument><expr><name><name>bitmap</name><operator>.</operator><name>buffer</name></name></expr></argument>, <argument><expr><name><name>bitmap</name><operator>.</operator><name>pitch</name></name></expr></argument>,

<argument><expr><name><name>bitmap</name><operator>.</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>bitmap</name><operator>.</operator><name>rows</name></name></expr></argument>,

<argument><expr><ternary><condition><expr><name><name>bitmap</name><operator>.</operator><name>pixel_mode</name></name> <operator>==</operator> <name>FT_PIXEL_MODE_MONO</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><literal type="number">3</literal></expr></else></ternary></expr></argument>,

<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>x1</name></expr></argument>, <argument><expr><name>y1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>update_color_with_alpha</name><parameter_list>(<parameter><decl><type><name>DrawTextContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>FFDrawColor</name> <modifier>*</modifier></type><name>color</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>FFDrawColor</name></type> <name>incolor</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>color</name> <operator>=</operator> <name>incolor</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>color</name><operator>-&gt;</operator><name>rgba</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>color</name><operator>-&gt;</operator><name>rgba</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>alpha</name></name><operator>)</operator> <operator>/</operator> <literal type="number">255</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_draw_color</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>dc</name></name></expr></argument>, <argument><expr><name>color</name></expr></argument>, <argument><expr><name><name>color</name><operator>-&gt;</operator><name>rgba</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>update_alpha</name><parameter_list>(<parameter><decl><type><name>DrawTextContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>double</name></type> <name>alpha</name> <init>= <expr><call><name>av_expr_eval</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>a_pexpr</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>var_values</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>prng</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>isnan</name><argument_list>(<argument><expr><name>alpha</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>alpha</name> <operator>&gt;=</operator> <literal type="number">1.0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>alpha</name></name> <operator>=</operator> <literal type="number">255</literal></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>alpha</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>alpha</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>alpha</name></name> <operator>=</operator> <literal type="number">256</literal> <operator>*</operator> <name>alpha</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>draw_text</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>frame</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>DrawTextContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>inlink</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>inputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>prev_code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>x</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>y</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>max_text_line_w</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>box_w</name></decl>, <decl><type ref="prev"/><name>box_h</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>text</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>y_min</name> <init>= <expr><literal type="number">32000</literal></expr></init></decl>, <decl><type ref="prev"/><name>y_max</name> <init>= <expr><operator>-</operator><literal type="number">32000</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>x_min</name> <init>= <expr><literal type="number">32000</literal></expr></init></decl>, <decl><type ref="prev"/><name>x_max</name> <init>= <expr><operator>-</operator><literal type="number">32000</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>FT_Vector</name></type> <name>delta</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Glyph</name> <modifier>*</modifier></type><name>glyph</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>prev_glyph</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Glyph</name></type> <name>dummy</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>time_t</name></type> <name>now</name> <init>= <expr><call><name>time</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>tm</name></name></type> <name>ltime</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVBPrint</name> <modifier>*</modifier></type><name>bp</name> <init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>expanded_text</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>FFDrawColor</name></type> <name>fontcolor</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>FFDrawColor</name></type> <name>shadowcolor</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>FFDrawColor</name></type> <name>bordercolor</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>FFDrawColor</name></type> <name>boxcolor</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_bprint_clear</name><argument_list>(<argument><expr><name>bp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>basetime</name></name> <operator>!=</operator> <name>AV_NOPTS_VALUE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>now</name><operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>pts</name></name><operator>*</operator><call><name>av_q2d</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>inputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>time_base</name></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>basetime</name></name><operator>/</operator><literal type="number">1000000</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<switch>switch <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>exp_mode</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>EXP_NONE</name></expr>:</case>

<expr_stmt><expr><call><name>av_bprintf</name><argument_list>(<argument><expr><name>bp</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>text</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>EXP_NORMAL</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>expand_text</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>text</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>expanded_text</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<break>break;</break>

<case>case <expr><name>EXP_STRFTIME</name></expr>:</case>

<expr_stmt><expr><call><name>localtime_r</name><argument_list>(<argument><expr><operator>&amp;</operator><name>now</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ltime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_bprint_strftime</name><argument_list>(<argument><expr><name>bp</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>text</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ltime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>tc_opt_string</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>tcbuf</name><index>[<expr><name>AV_TIMECODE_STR_SIZE</name></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_timecode_make_string</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>tc</name></name></expr></argument>, <argument><expr><name>tcbuf</name></expr></argument>, <argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>frame_count_out</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_bprint_clear</name><argument_list>(<argument><expr><name>bp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_bprintf</name><argument_list>(<argument><expr><name>bp</name></expr></argument>, <argument><expr><literal type="string">"%s%s"</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>text</name></name></expr></argument>, <argument><expr><name>tcbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>av_bprint_is_complete</name><argument_list>(<argument><expr><name>bp</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>text</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>expanded_text</name><operator>.</operator><name>str</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>len</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>expanded_text</name><operator>.</operator><name>len</name></name><operator>)</operator> <operator>&gt;</operator> <name><name>s</name><operator>-&gt;</operator><name>nb_positions</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>positions</name></name> <operator>=</operator>

<call><name>av_realloc</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>positions</name></name></expr></argument>, <argument><expr><name>len</name><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>positions</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>nb_positions</name></name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>fontcolor_expr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_bprint_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>expanded_fontcolor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>expand_text</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>fontcolor_expr</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>expanded_fontcolor</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>av_bprint_is_complete</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>expanded_fontcolor</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Evaluated fontcolor is '%s'\n"</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>expanded_fontcolor</name><operator>.</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>av_parse_color</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>fontcolor</name><operator>.</operator><name>rgba</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>expanded_fontcolor</name><operator>.</operator><name>str</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>ff_draw_color</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>dc</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>fontcolor</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>fontcolor</name><operator>.</operator><name>rgba</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>update_fontsize</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>p</name> <operator>=</operator> <name>text</name></expr>;</init> <condition><expr><operator>*</operator><name>p</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<macro><name>GET_UTF8</name><argument_list>(<argument>code</argument>, <argument>*p ? *p++ : <literal type="number">0</literal></argument>, <argument>code = <literal type="number">0xfffd</literal>; goto continue_on_invalid;</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<label><name>continue_on_invalid</name>:</label>

<expr_stmt><expr><name><name>dummy</name><operator>.</operator><name>code</name></name> <operator>=</operator> <name>code</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dummy</name><operator>.</operator><name>fontsize</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>fontsize</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>glyph</name> <operator>=</operator> <call><name>av_tree_find</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>glyphs</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dummy</name></expr></argument>, <argument><expr><name>glyph_cmp</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>glyph</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>load_glyph</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>glyph</name></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>y_min</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name><name>glyph</name><operator>-&gt;</operator><name>bbox</name><operator>.</operator><name>yMin</name></name></expr></argument>, <argument><expr><name>y_min</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>y_max</name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name><name>glyph</name><operator>-&gt;</operator><name>bbox</name><operator>.</operator><name>yMax</name></name></expr></argument>, <argument><expr><name>y_max</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>x_min</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name><name>glyph</name><operator>-&gt;</operator><name>bbox</name><operator>.</operator><name>xMin</name></name></expr></argument>, <argument><expr><name>x_min</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>x_max</name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name><name>glyph</name><operator>-&gt;</operator><name>bbox</name><operator>.</operator><name>xMax</name></name></expr></argument>, <argument><expr><name>x_max</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>max_glyph_h</name></name> <operator>=</operator> <name>y_max</name> <operator>-</operator> <name>y_min</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>max_glyph_w</name></name> <operator>=</operator> <name>x_max</name> <operator>-</operator> <name>x_min</name></expr>;</expr_stmt>

<expr_stmt><expr><name>glyph</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>p</name> <operator>=</operator> <name>text</name></expr>;</init> <condition><expr><operator>*</operator><name>p</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<macro><name>GET_UTF8</name><argument_list>(<argument>code</argument>, <argument>*p ? *p++ : <literal type="number">0</literal></argument>, <argument>code = <literal type="number">0xfffd</literal>; goto continue_on_invalid2;</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<label><name>continue_on_invalid2</name>:</label>

<if_stmt><if>if <condition>(<expr><name>prev_code</name> <operator>==</operator> <literal type="char">'\r'</literal> <operator>&amp;&amp;</operator> <name>code</name> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name>prev_code</name> <operator>=</operator> <name>code</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>is_newline</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>max_text_line_w</name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name>max_text_line_w</name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>y</name> <operator>+=</operator> <name><name>s</name><operator>-&gt;</operator><name>max_glyph_h</name></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>line_spacing</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>prev_glyph</name> <operator>=</operator> <name>glyph</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dummy</name><operator>.</operator><name>code</name></name> <operator>=</operator> <name>code</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dummy</name><operator>.</operator><name>fontsize</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>fontsize</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>glyph</name> <operator>=</operator> <call><name>av_tree_find</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>glyphs</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dummy</name></expr></argument>, <argument><expr><name>glyph_cmp</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>use_kerning</name></name> <operator>&amp;&amp;</operator> <name>prev_glyph</name> <operator>&amp;&amp;</operator> <name><name>glyph</name><operator>-&gt;</operator><name>code</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>FT_Get_Kerning</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>face</name></name></expr></argument>, <argument><expr><name><name>prev_glyph</name><operator>-&gt;</operator><name>code</name></name></expr></argument>, <argument><expr><name><name>glyph</name><operator>-&gt;</operator><name>code</name></name></expr></argument>,

<argument><expr><name>ft_kerning_default</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>delta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>x</name> <operator>+=</operator> <name><name>delta</name><operator>.</operator><name>x</name></name> <operator>&gt;&gt;</operator> <literal type="number">6</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>positions</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>x</name> <operator>=</operator> <name>x</name> <operator>+</operator> <name><name>glyph</name><operator>-&gt;</operator><name>bitmap_left</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>positions</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>y</name> <operator>=</operator> <name>y</name> <operator>-</operator> <name><name>glyph</name><operator>-&gt;</operator><name>bitmap_top</name></name> <operator>+</operator> <name>y_max</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>code</name> <operator>==</operator> <literal type="char">'\t'</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>x</name> <operator>=</operator> <operator>(</operator><name>x</name> <operator>/</operator> <name><name>s</name><operator>-&gt;</operator><name>tabsize</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>tabsize</name></name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name>x</name> <operator>+=</operator> <name><name>glyph</name><operator>-&gt;</operator><name>advance</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>max_text_line_w</name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>max_text_line_w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>var_values</name><index>[<expr><name>VAR_TW</name></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>var_values</name><index>[<expr><name>VAR_TEXT_W</name></expr>]</index></name> <operator>=</operator> <name>max_text_line_w</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>var_values</name><index>[<expr><name>VAR_TH</name></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>var_values</name><index>[<expr><name>VAR_TEXT_H</name></expr>]</index></name> <operator>=</operator> <name>y</name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>max_glyph_h</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>var_values</name><index>[<expr><name>VAR_MAX_GLYPH_W</name></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>max_glyph_w</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>var_values</name><index>[<expr><name>VAR_MAX_GLYPH_H</name></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>max_glyph_h</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>var_values</name><index>[<expr><name>VAR_MAX_GLYPH_A</name></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>var_values</name><index>[<expr><name>VAR_ASCENT</name></expr> ]</index></name> <operator>=</operator> <name>y_max</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>var_values</name><index>[<expr><name>VAR_MAX_GLYPH_D</name></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>var_values</name><index>[<expr><name>VAR_DESCENT</name></expr>]</index></name> <operator>=</operator> <name>y_min</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>var_values</name><index>[<expr><name>VAR_LINE_H</name></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>var_values</name><index>[<expr><name>VAR_LH</name></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>max_glyph_h</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>x</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>var_values</name><index>[<expr><name>VAR_X</name></expr>]</index></name> <operator>=</operator> <call><name>av_expr_eval</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>x_pexpr</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>var_values</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>prng</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>y</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>var_values</name><index>[<expr><name>VAR_Y</name></expr>]</index></name> <operator>=</operator> <call><name>av_expr_eval</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>y_pexpr</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>var_values</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>prng</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>x</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>var_values</name><index>[<expr><name>VAR_X</name></expr>]</index></name> <operator>=</operator> <call><name>av_expr_eval</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>x_pexpr</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>var_values</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>prng</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>update_alpha</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>update_color_with_alpha</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fontcolor</name></expr></argument> , <argument><expr><name><name>s</name><operator>-&gt;</operator><name>fontcolor</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>update_color_with_alpha</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>shadowcolor</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>shadowcolor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>update_color_with_alpha</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bordercolor</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>bordercolor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>update_color_with_alpha</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>boxcolor</name></expr></argument> , <argument><expr><name><name>s</name><operator>-&gt;</operator><name>boxcolor</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>box_w</name> <operator>=</operator> <name>max_text_line_w</name></expr>;</expr_stmt>

<expr_stmt><expr><name>box_h</name> <operator>=</operator> <name>y</name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>max_glyph_h</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>fix_bounds</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>boxoffset</name> <init>= <expr><ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>draw_box</name></name></expr> ?</condition><then> <expr><call><name>FFMAX</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>boxborderw</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>borderoffset</name> <init>= <expr><ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>borderw</name></name></expr> ?</condition><then> <expr><call><name>FFMAX</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>borderw</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>offsetleft</name> <init>= <expr><call><name>FFMAX3</name><argument_list>(<argument><expr><name>boxoffset</name></expr></argument>, <argument><expr><name>borderoffset</name></expr></argument>,

<argument><expr><operator>(</operator><ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>shadowx</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><call><name>FFABS</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>shadowx</name></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>offsettop</name> <init>= <expr><call><name>FFMAX3</name><argument_list>(<argument><expr><name>boxoffset</name></expr></argument>, <argument><expr><name>borderoffset</name></expr></argument>,

<argument><expr><operator>(</operator><ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>shadowy</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><call><name>FFABS</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>shadowy</name></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>offsetright</name> <init>= <expr><call><name>FFMAX3</name><argument_list>(<argument><expr><name>boxoffset</name></expr></argument>, <argument><expr><name>borderoffset</name></expr></argument>,

<argument><expr><operator>(</operator><ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>shadowx</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name><name>s</name><operator>-&gt;</operator><name>shadowx</name></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>offsetbottom</name> <init>= <expr><call><name>FFMAX3</name><argument_list>(<argument><expr><name>boxoffset</name></expr></argument>, <argument><expr><name>borderoffset</name></expr></argument>,

<argument><expr><operator>(</operator><ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>shadowy</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name><name>s</name><operator>-&gt;</operator><name>shadowy</name></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>x</name></name> <operator>-</operator> <name>offsetleft</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>x</name></name> <operator>=</operator> <name>offsetleft</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>y</name></name> <operator>-</operator> <name>offsettop</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>y</name></name> <operator>=</operator> <name>offsettop</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>x</name></name> <operator>+</operator> <name>box_w</name> <operator>+</operator> <name>offsetright</name> <operator>&gt;</operator> <name>width</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>x</name></name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name>width</name> <operator>-</operator> <name>box_w</name> <operator>-</operator> <name>offsetright</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>y</name></name> <operator>+</operator> <name>box_h</name> <operator>+</operator> <name>offsetbottom</name> <operator>&gt;</operator> <name>height</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>y</name></name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name>height</name> <operator>-</operator> <name>box_h</name> <operator>-</operator> <name>offsetbottom</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>draw_box</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ff_blend_rectangle</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>dc</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>boxcolor</name></expr></argument>,

<argument><expr><name><name>frame</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>frame</name><operator>-&gt;</operator><name>linesize</name></name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>x</name></name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>boxborderw</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>y</name></name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>boxborderw</name></name></expr></argument>,

<argument><expr><name>box_w</name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>boxborderw</name></name> <operator>*</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>box_h</name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>boxborderw</name></name> <operator>*</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>shadowx</name></name> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>shadowy</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>draw_glyphs</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>frame</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>shadowcolor</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>shadowx</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>shadowy</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>borderw</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>draw_glyphs</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>frame</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>bordercolor</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>borderw</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>draw_glyphs</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>frame</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>fontcolor</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>filter_frame</name><parameter_list>(<parameter><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>inlink</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>frame</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>inlink</name><operator>-&gt;</operator><name>dst</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>outlink</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>outputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DrawTextContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>reload</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>load_textfile</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_LIBFRIBIDI</name></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>text_shaping</name></name></expr>)</condition><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>shape_text</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></if></if_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>var_values</name><index>[<expr><name>VAR_N</name></expr>]</index></name> <operator>=</operator> <name><name>inlink</name><operator>-&gt;</operator><name>frame_count_out</name></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>start_number</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>var_values</name><index>[<expr><name>VAR_T</name></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><name><name>frame</name><operator>-&gt;</operator><name>pts</name></name> <operator>==</operator> <name>AV_NOPTS_VALUE</name></expr> ?</condition><then>

<expr><name>NAN</name></expr> </then><else>: <expr><name><name>frame</name><operator>-&gt;</operator><name>pts</name></name> <operator>*</operator> <call><name>av_q2d</name><argument_list>(<argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>time_base</name></name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>var_values</name><index>[<expr><name>VAR_PICT_TYPE</name></expr>]</index></name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>pict_type</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>var_values</name><index>[<expr><name>VAR_PKT_POS</name></expr>]</index></name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>pkt_pos</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>var_values</name><index>[<expr><name>VAR_PKT_DURATION</name></expr>]</index></name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>pkt_duration</name></name> <operator>*</operator> <call><name>av_q2d</name><argument_list>(<argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>time_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>var_values</name><index>[<expr><name>VAR_PKT_SIZE</name></expr>]</index></name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>pkt_size</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>metadata</name></name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>metadata</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>draw_text</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>frame</name></expr></argument>, <argument><expr><name><name>frame</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>frame</name><operator>-&gt;</operator><name>height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"n:%d t:%f text_w:%d text_h:%d x:%d y:%d\n"</literal></expr></argument>,

<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>s</name><operator>-&gt;</operator><name>var_values</name><index>[<expr><name>VAR_N</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>var_values</name><index>[<expr><name>VAR_T</name></expr>]</index></name></expr></argument>,

<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>s</name><operator>-&gt;</operator><name>var_values</name><index>[<expr><name>VAR_TEXT_W</name></expr>]</index></name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>s</name><operator>-&gt;</operator><name>var_values</name><index>[<expr><name>VAR_TEXT_H</name></expr>]</index></name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>ff_filter_frame</name><argument_list>(<argument><expr><name>outlink</name></expr></argument>, <argument><expr><name>frame</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVFilterPad</name></type> <name><name>avfilter_vf_drawtext_inputs</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"default"</literal></expr>,

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,

<expr><operator>.</operator><name>filter_frame</name> <operator>=</operator> <name>filter_frame</name></expr>,

<expr><operator>.</operator><name>config_props</name> <operator>=</operator> <name>config_input</name></expr>,

<expr><operator>.</operator><name>needs_writable</name> <operator>=</operator> <literal type="number">1</literal></expr>,

}</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVFilterPad</name></type> <name><name>avfilter_vf_drawtext_outputs</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"default"</literal></expr>,

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,

}</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFilter</name></type> <name>ff_vf_drawtext</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"drawtext"</literal></expr>,

<expr><operator>.</operator><name>description</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"Draw text on top of video frames using libfreetype library."</literal></expr></argument>)</argument_list></call></expr>,

<expr><operator>.</operator><name>priv_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>DrawTextContext</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><operator>.</operator><name>priv_class</name> <operator>=</operator> <operator>&amp;</operator><name>drawtext_class</name></expr>,

<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>init</name></expr>,

<expr><operator>.</operator><name>uninit</name> <operator>=</operator> <name>uninit</name></expr>,

<expr><operator>.</operator><name>query_formats</name> <operator>=</operator> <name>query_formats</name></expr>,

<expr><operator>.</operator><name>inputs</name> <operator>=</operator> <name>avfilter_vf_drawtext_inputs</name></expr>,

<expr><operator>.</operator><name>outputs</name> <operator>=</operator> <name>avfilter_vf_drawtext_outputs</name></expr>,

<expr><operator>.</operator><name>process_command</name> <operator>=</operator> <name>command</name></expr>,

<expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>AVFILTER_FLAG_SUPPORT_TIMELINE_GENERIC</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

</unit>
