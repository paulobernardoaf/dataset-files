<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavfilter\bbox.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bbox.h"</cpp:file></cpp:include>

<function><type><name>int</name></type> <name>ff_calculate_bounding_box</name><parameter_list>(<parameter><decl><type><name>FFBoundingBox</name> <modifier>*</modifier></type><name>bbox</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>linesize</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>min_val</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>start_x</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>start_y</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>end_x</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>end_y</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>line</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>start_x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>start_x</name> <operator>&lt;</operator> <name>w</name></expr>;</condition> <incr><expr><name>start_x</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>h</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>data</name><index>[<expr><name>y</name> <operator>*</operator> <name>linesize</name> <operator>+</operator> <name>start_x</name></expr>]</index></name> <operator>&gt;</operator> <name>min_val</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>outl</name>;</goto></block_content></block></if></if_stmt></block_content></block></for></block_content></block></for>

<label><name>outl</name>:</label>

<if_stmt><if>if <condition>(<expr><name>start_x</name> <operator>==</operator> <name>w</name></expr>)</condition><block type="pseudo"><block_content> 

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>end_x</name> <operator>=</operator> <name>w</name> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>end_x</name> <operator>&gt;=</operator> <name>start_x</name></expr>;</condition> <incr><expr><name>end_x</name><operator>--</operator></expr></incr>)</control><block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>h</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>data</name><index>[<expr><name>y</name> <operator>*</operator> <name>linesize</name> <operator>+</operator> <name>end_x</name></expr>]</index></name> <operator>&gt;</operator> <name>min_val</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>outr</name>;</goto></block_content></block></if></if_stmt></block_content></block></for></block_content></block></for>

<label><name>outr</name>:</label>

<expr_stmt><expr><name>line</name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>start_y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>start_y</name> <operator>&lt;</operator> <name>h</name></expr>;</condition> <incr><expr><name>start_y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>w</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name><name>line</name><index>[<expr><name>x</name></expr>]</index></name> <operator>&gt;</operator> <name>min_val</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>outt</name>;</goto></block_content></block></if></if_stmt></block_content></block></for>

<expr_stmt><expr><name>line</name> <operator>+=</operator> <name>linesize</name></expr>;</expr_stmt>

</block_content>}</block></for>

<label><name>outt</name>:</label>

<expr_stmt><expr><name>line</name> <operator>=</operator> <name>data</name> <operator>+</operator> <operator>(</operator><name>h</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><name>linesize</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>end_y</name> <operator>=</operator> <name>h</name> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>end_y</name> <operator>&gt;=</operator> <name>start_y</name></expr>;</condition> <incr><expr><name>end_y</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>w</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name><name>line</name><index>[<expr><name>x</name></expr>]</index></name> <operator>&gt;</operator> <name>min_val</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>outb</name>;</goto></block_content></block></if></if_stmt></block_content></block></for>

<expr_stmt><expr><name>line</name> <operator>-=</operator> <name>linesize</name></expr>;</expr_stmt>

</block_content>}</block></for>

<label><name>outb</name>:</label>

<expr_stmt><expr><name><name>bbox</name><operator>-&gt;</operator><name>x1</name></name> <operator>=</operator> <name>start_x</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bbox</name><operator>-&gt;</operator><name>y1</name></name> <operator>=</operator> <name>start_y</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bbox</name><operator>-&gt;</operator><name>x2</name></name> <operator>=</operator> <name>end_x</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bbox</name><operator>-&gt;</operator><name>y2</name></name> <operator>=</operator> <name>end_y</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

</unit>
