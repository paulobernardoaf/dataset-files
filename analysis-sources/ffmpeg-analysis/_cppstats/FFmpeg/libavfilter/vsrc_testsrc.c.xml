<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavfilter\vsrc_testsrc.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;float.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avassert.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/common.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/ffmath.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/opt.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/imgutils.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/intreadwrite.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/parseutils.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/xga_font_data.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avfilter.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"drawutils.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"formats.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"video.h"</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct <name>TestSourceContext</name> <block>{

<decl_stmt><decl><type><specifier>const</specifier> <name>AVClass</name> <modifier>*</modifier></type><name>class</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>w</name></decl>, <name>h</name>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>nb_frame</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVRational</name></type> <name>time_base</name></decl>, <name>frame_rate</name>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>pts</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>duration</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>AVRational</name></type> <name>sar</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>draw_once</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>draw_once_reset</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>picref</name></decl>;</decl_stmt> 

<function_decl><type><name>void</name></type> (<modifier>*</modifier> <name>fill_picture_fn</name>)<parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>frame</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>int</name></type> <name>nb_decimals</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>alpha</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>FFDrawContext</name></type> <name>draw</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>FFDrawColor</name></type> <name>color</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>color_rgba</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>rgba_map</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>level</name></decl>;</decl_stmt>

}</block></struct></type> <name>TestSourceContext</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OFFSET</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>offsetof(TestSourceContext, x)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLAGS</name></cpp:macro> <cpp:value>AV_OPT_FLAG_VIDEO_PARAM|AV_OPT_FLAG_FILTERING_PARAM</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLAGSR</name></cpp:macro> <cpp:value>AV_OPT_FLAG_VIDEO_PARAM|AV_OPT_FLAG_FILTERING_PARAM|AV_OPT_FLAG_RUNTIME_PARAM</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIZE_OPTIONS</name></cpp:macro> <cpp:value>{ "size", "set video size", OFFSET(w), AV_OPT_TYPE_IMAGE_SIZE, {.str = "320x240"}, 0, 0, FLAGS },{ "s", "set video size", OFFSET(w), AV_OPT_TYPE_IMAGE_SIZE, {.str = "320x240"}, 0, 0, FLAGS },</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COMMON_OPTIONS_NOSIZE</name></cpp:macro> <cpp:value>{ "rate", "set video rate", OFFSET(frame_rate), AV_OPT_TYPE_VIDEO_RATE, {.str = "25"}, 0, INT_MAX, FLAGS },{ "r", "set video rate", OFFSET(frame_rate), AV_OPT_TYPE_VIDEO_RATE, {.str = "25"}, 0, INT_MAX, FLAGS },{ "duration", "set video duration", OFFSET(duration), AV_OPT_TYPE_DURATION, {.i64 = -1}, -1, INT64_MAX, FLAGS },{ "d", "set video duration", OFFSET(duration), AV_OPT_TYPE_DURATION, {.i64 = -1}, -1, INT64_MAX, FLAGS },{ "sar", "set video sample aspect ratio", OFFSET(sar), AV_OPT_TYPE_RATIONAL, {.dbl= 1}, 0, INT_MAX, FLAGS },</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COMMON_OPTIONS</name></cpp:macro> <cpp:value>SIZE_OPTIONS COMMON_OPTIONS_NOSIZE</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVOption</name></type> <name><name>options</name><index>[]</index></name> <init>= <expr><block>{

<expr><name>COMMON_OPTIONS</name>

<block>{ <expr><name>NULL</name></expr> }</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>init</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>TestSourceContext</name> <modifier>*</modifier></type><name>test</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>test</name><operator>-&gt;</operator><name>time_base</name></name> <operator>=</operator> <call><name>av_inv_q</name><argument_list>(<argument><expr><name><name>test</name><operator>-&gt;</operator><name>frame_rate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>test</name><operator>-&gt;</operator><name>nb_frame</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>test</name><operator>-&gt;</operator><name>pts</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_VERBOSE</name></expr></argument>, <argument><expr><literal type="string">"size:%dx%d rate:%d/%d duration:%f sar:%d/%d\n"</literal></expr></argument>,

<argument><expr><name><name>test</name><operator>-&gt;</operator><name>w</name></name></expr></argument>, <argument><expr><name><name>test</name><operator>-&gt;</operator><name>h</name></name></expr></argument>, <argument><expr><name><name>test</name><operator>-&gt;</operator><name>frame_rate</name><operator>.</operator><name>num</name></name></expr></argument>, <argument><expr><name><name>test</name><operator>-&gt;</operator><name>frame_rate</name><operator>.</operator><name>den</name></name></expr></argument>,

<argument><expr><ternary><condition><expr><name><name>test</name><operator>-&gt;</operator><name>duration</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><operator>(</operator><name>double</name><operator>)</operator><name><name>test</name><operator>-&gt;</operator><name>duration</name></name><operator>/</operator><literal type="number">1000000</literal></expr></else></ternary></expr></argument>,

<argument><expr><name><name>test</name><operator>-&gt;</operator><name>sar</name><operator>.</operator><name>num</name></name></expr></argument>, <argument><expr><name><name>test</name><operator>-&gt;</operator><name>sar</name><operator>.</operator><name>den</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>void</name></type> <name>uninit</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>TestSourceContext</name> <modifier>*</modifier></type><name>test</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>test</name><operator>-&gt;</operator><name>picref</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>config_props</name><parameter_list>(<parameter><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>outlink</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>TestSourceContext</name> <modifier>*</modifier></type><name>test</name> <init>= <expr><name><name>outlink</name><operator>-&gt;</operator><name>src</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>outlink</name><operator>-&gt;</operator><name>w</name></name> <operator>=</operator> <name><name>test</name><operator>-&gt;</operator><name>w</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>outlink</name><operator>-&gt;</operator><name>h</name></name> <operator>=</operator> <name><name>test</name><operator>-&gt;</operator><name>h</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>outlink</name><operator>-&gt;</operator><name>sample_aspect_ratio</name></name> <operator>=</operator> <name><name>test</name><operator>-&gt;</operator><name>sar</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>outlink</name><operator>-&gt;</operator><name>frame_rate</name></name> <operator>=</operator> <name><name>test</name><operator>-&gt;</operator><name>frame_rate</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>outlink</name><operator>-&gt;</operator><name>time_base</name></name> <operator>=</operator> <name><name>test</name><operator>-&gt;</operator><name>time_base</name></name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>request_frame</name><parameter_list>(<parameter><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>outlink</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>TestSourceContext</name> <modifier>*</modifier></type><name>test</name> <init>= <expr><name><name>outlink</name><operator>-&gt;</operator><name>src</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>frame</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>test</name><operator>-&gt;</operator><name>duration</name></name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>

<call><name>av_rescale_q</name><argument_list>(<argument><expr><name><name>test</name><operator>-&gt;</operator><name>pts</name></name></expr></argument>, <argument><expr><name><name>test</name><operator>-&gt;</operator><name>time_base</name></name></expr></argument>, <argument><expr><name>AV_TIME_BASE_Q</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <name><name>test</name><operator>-&gt;</operator><name>duration</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_EOF</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>test</name><operator>-&gt;</operator><name>draw_once</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>test</name><operator>-&gt;</operator><name>draw_once_reset</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>test</name><operator>-&gt;</operator><name>picref</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>test</name><operator>-&gt;</operator><name>draw_once_reset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>test</name><operator>-&gt;</operator><name>picref</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>test</name><operator>-&gt;</operator><name>picref</name></name> <operator>=</operator>

<call><name>ff_get_video_buffer</name><argument_list>(<argument><expr><name>outlink</name></expr></argument>, <argument><expr><name><name>test</name><operator>-&gt;</operator><name>w</name></name></expr></argument>, <argument><expr><name><name>test</name><operator>-&gt;</operator><name>h</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>test</name><operator>-&gt;</operator><name>picref</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name><name>test</name><operator>-&gt;</operator><name>fill_picture_fn</name></name><argument_list>(<argument><expr><name><name>outlink</name><operator>-&gt;</operator><name>src</name></name></expr></argument>, <argument><expr><name><name>test</name><operator>-&gt;</operator><name>picref</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>frame</name> <operator>=</operator> <call><name>av_frame_clone</name><argument_list>(<argument><expr><name><name>test</name><operator>-&gt;</operator><name>picref</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>frame</name> <operator>=</operator> <call><name>ff_get_video_buffer</name><argument_list>(<argument><expr><name>outlink</name></expr></argument>, <argument><expr><name><name>test</name><operator>-&gt;</operator><name>w</name></name></expr></argument>, <argument><expr><name><name>test</name><operator>-&gt;</operator><name>h</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>frame</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>pts</name></name> <operator>=</operator> <name><name>test</name><operator>-&gt;</operator><name>pts</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>key_frame</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>interlaced_frame</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>pict_type</name></name> <operator>=</operator> <name>AV_PICTURE_TYPE_I</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>sample_aspect_ratio</name></name> <operator>=</operator> <name><name>test</name><operator>-&gt;</operator><name>sar</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>test</name><operator>-&gt;</operator><name>draw_once</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name><name>test</name><operator>-&gt;</operator><name>fill_picture_fn</name></name><argument_list>(<argument><expr><name><name>outlink</name><operator>-&gt;</operator><name>src</name></name></expr></argument>, <argument><expr><name>frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>test</name><operator>-&gt;</operator><name>pts</name></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>test</name><operator>-&gt;</operator><name>nb_frame</name></name><operator>++</operator></expr>;</expr_stmt>

<return>return <expr><call><name>ff_filter_frame</name><argument_list>(<argument><expr><name>outlink</name></expr></argument>, <argument><expr><name>frame</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_COLOR_FILTER</name></expr></cpp:if>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVOption</name></type> <name><name>color_options</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><literal type="string">"color"</literal></expr>, <expr><literal type="string">"set color"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>color_rgba</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_COLOR</name></expr>, <expr><block>{<expr><operator>.</operator><name>str</name> <operator>=</operator> <literal type="string">"black"</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGSR</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"c"</literal></expr>, <expr><literal type="string">"set color"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>color_rgba</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_COLOR</name></expr>, <expr><block>{<expr><operator>.</operator><name>str</name> <operator>=</operator> <literal type="string">"black"</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGSR</name></expr> }</block></expr>,

<expr><name>COMMON_OPTIONS</name>

<block>{ <expr><name>NULL</name></expr> }</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>AVFILTER_DEFINE_CLASS</name><argument_list>(<argument><expr><name>color</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>color_fill_picture</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>picref</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>TestSourceContext</name> <modifier>*</modifier></type><name>test</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ff_fill_rectangle</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>test</name><operator>-&gt;</operator><name>draw</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>test</name><operator>-&gt;</operator><name>color</name></name></expr></argument>,

<argument><expr><name><name>picref</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>picref</name><operator>-&gt;</operator><name>linesize</name></name></expr></argument>,

<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>test</name><operator>-&gt;</operator><name>w</name></name></expr></argument>, <argument><expr><name><name>test</name><operator>-&gt;</operator><name>h</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>color_init</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>TestSourceContext</name> <modifier>*</modifier></type><name>test</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>test</name><operator>-&gt;</operator><name>fill_picture_fn</name></name> <operator>=</operator> <name>color_fill_picture</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>test</name><operator>-&gt;</operator><name>draw_once</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><call><name>init</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>color_query_formats</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>ff_set_common_formats</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><call><name>ff_draw_supported_pixel_formats</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>color_config_props</name><parameter_list>(<parameter><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>inlink</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>inlink</name><operator>-&gt;</operator><name>src</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>TestSourceContext</name> <modifier>*</modifier></type><name>test</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ff_draw_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>test</name><operator>-&gt;</operator><name>draw</name></name></expr></argument>, <argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>format</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_draw_color</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>test</name><operator>-&gt;</operator><name>draw</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>test</name><operator>-&gt;</operator><name>color</name></name></expr></argument>, <argument><expr><name><name>test</name><operator>-&gt;</operator><name>color_rgba</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>test</name><operator>-&gt;</operator><name>w</name></name> <operator>=</operator> <call><name>ff_draw_round_to_sub</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>test</name><operator>-&gt;</operator><name>draw</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>test</name><operator>-&gt;</operator><name>w</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>test</name><operator>-&gt;</operator><name>h</name></name> <operator>=</operator> <call><name>ff_draw_round_to_sub</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>test</name><operator>-&gt;</operator><name>draw</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>test</name><operator>-&gt;</operator><name>h</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>av_image_check_size</name><argument_list>(<argument><expr><name><name>test</name><operator>-&gt;</operator><name>w</name></name></expr></argument>, <argument><expr><name><name>test</name><operator>-&gt;</operator><name>h</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>config_props</name><argument_list>(<argument><expr><name>inlink</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>color_process_command</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>args</name></decl></parameter>,

<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>res</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>res_len</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>TestSourceContext</name> <modifier>*</modifier></type><name>test</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_filter_process_command</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>args</name></expr></argument>, <argument><expr><name>res</name></expr></argument>, <argument><expr><name>res_len</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>ff_draw_color</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>test</name><operator>-&gt;</operator><name>draw</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>test</name><operator>-&gt;</operator><name>color</name></name></expr></argument>, <argument><expr><name><name>test</name><operator>-&gt;</operator><name>color_rgba</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>test</name><operator>-&gt;</operator><name>draw_once_reset</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVFilterPad</name></type> <name><name>color_outputs</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"default"</literal></expr>,

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,

<expr><operator>.</operator><name>request_frame</name> <operator>=</operator> <name>request_frame</name></expr>,

<expr><operator>.</operator><name>config_props</name> <operator>=</operator> <name>color_config_props</name></expr>,

}</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFilter</name></type> <name>ff_vsrc_color</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"color"</literal></expr>,

<expr><operator>.</operator><name>description</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"Provide an uniformly colored input."</literal></expr></argument>)</argument_list></call></expr>,

<expr><operator>.</operator><name>priv_class</name> <operator>=</operator> <operator>&amp;</operator><name>color_class</name></expr>,

<expr><operator>.</operator><name>priv_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>TestSourceContext</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>color_init</name></expr>,

<expr><operator>.</operator><name>uninit</name> <operator>=</operator> <name>uninit</name></expr>,

<expr><operator>.</operator><name>query_formats</name> <operator>=</operator> <name>color_query_formats</name></expr>,

<expr><operator>.</operator><name>inputs</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>outputs</name> <operator>=</operator> <name>color_outputs</name></expr>,

<expr><operator>.</operator><name>process_command</name> <operator>=</operator> <name>color_process_command</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_HALDCLUTSRC_FILTER</name></expr></cpp:if>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVOption</name></type> <name><name>haldclutsrc_options</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><literal type="string">"level"</literal></expr>, <expr><literal type="string">"set level"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>level</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">6</literal></expr>}</block></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,

<expr><name>COMMON_OPTIONS_NOSIZE</name>

<block>{ <expr><name>NULL</name></expr> }</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>AVFILTER_DEFINE_CLASS</name><argument_list>(<argument><expr><name>haldclutsrc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>haldclutsrc_fill_picture</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>frame</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>k</name></decl>, <decl><type ref="prev"/><name>x</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>y</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>is16bit</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>step</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>alpha</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>TestSourceContext</name> <modifier>*</modifier></type><name>hc</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>level</name> <init>= <expr><name><name>hc</name><operator>-&gt;</operator><name>level</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>scale</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>w</name> <init>= <expr><name><name>frame</name><operator>-&gt;</operator><name>width</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>h</name> <init>= <expr><name><name>frame</name><operator>-&gt;</operator><name>height</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>linesize</name> <init>= <expr><name><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>AVPixFmtDescriptor</name> <modifier>*</modifier></type><name>desc</name> <init>= <expr><call><name>av_pix_fmt_desc_get</name><argument_list>(<argument><expr><name><name>frame</name><operator>-&gt;</operator><name>format</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>rgba_map</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name>w</name> <operator>==</operator> <name>h</name> <operator>&amp;&amp;</operator> <name>w</name> <operator>==</operator> <name>level</name><operator>*</operator><name>level</name><operator>*</operator><name>level</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_fill_rgba_map</name><argument_list>(<argument><expr><name>rgba_map</name></expr></argument>, <argument><expr><name><name>frame</name><operator>-&gt;</operator><name>format</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>frame</name><operator>-&gt;</operator><name>format</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>AV_PIX_FMT_RGB48</name></expr>:</case>

<case>case <expr><name>AV_PIX_FMT_BGR48</name></expr>:</case>

<case>case <expr><name>AV_PIX_FMT_RGBA64</name></expr>:</case>

<case>case <expr><name>AV_PIX_FMT_BGRA64</name></expr>:</case>

<expr_stmt><expr><name>is16bit</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>alpha</name> <operator>=</operator> <literal type="number">0xffff</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AV_PIX_FMT_RGBA</name></expr>:</case>

<case>case <expr><name>AV_PIX_FMT_BGRA</name></expr>:</case>

<case>case <expr><name>AV_PIX_FMT_ARGB</name></expr>:</case>

<case>case <expr><name>AV_PIX_FMT_ABGR</name></expr>:</case>

<expr_stmt><expr><name>alpha</name> <operator>=</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<expr_stmt><expr><name>step</name> <operator>=</operator> <call><name>av_get_padded_bits_per_pixel</name><argument_list>(<argument><expr><name>desc</name></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <operator>(</operator><literal type="number">3</literal> <operator>+</operator> <name>is16bit</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>scale</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><literal type="number">8</literal><operator>*</operator><operator>(</operator><name>is16bit</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator><operator>)</operator> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <operator>(</operator><name>level</name><operator>*</operator><name>level</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOAD_CLUT</name><parameter_list>(<parameter><type><name>nbits</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { uint##nbits##_t *dst = ((uint##nbits##_t *)(data + y*linesize)) + x*step; dst[rgba_map[0]] = av_clip_uint##nbits(i * scale); dst[rgba_map[1]] = av_clip_uint##nbits(j * scale); dst[rgba_map[2]] = av_clip_uint##nbits(k * scale); if (step == 4) dst[rgba_map[3]] = alpha; } while (0)</cpp:value></cpp:define>

<expr_stmt><expr><name>level</name> <operator>*=</operator> <name>level</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>level</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>level</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>level</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>is16bit</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>LOAD_CLUT</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>LOAD_CLUT</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>++</operator><name>x</name> <operator>==</operator> <name>w</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>y</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>haldclutsrc_init</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>TestSourceContext</name> <modifier>*</modifier></type><name>hc</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>hc</name><operator>-&gt;</operator><name>fill_picture_fn</name></name> <operator>=</operator> <name>haldclutsrc_fill_picture</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>hc</name><operator>-&gt;</operator><name>draw_once</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><call><name>init</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>haldclutsrc_query_formats</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>enum</name> <name>AVPixelFormat</name></name></type> <name><name>pix_fmts</name><index>[]</index></name> <init>= <expr><block>{

<expr><name>AV_PIX_FMT_RGB24</name></expr>, <expr><name>AV_PIX_FMT_BGR24</name></expr>,

<expr><name>AV_PIX_FMT_RGBA</name></expr>, <expr><name>AV_PIX_FMT_BGRA</name></expr>,

<expr><name>AV_PIX_FMT_ARGB</name></expr>, <expr><name>AV_PIX_FMT_ABGR</name></expr>,

<expr><name>AV_PIX_FMT_0RGB</name></expr>, <expr><name>AV_PIX_FMT_0BGR</name></expr>,

<expr><name>AV_PIX_FMT_RGB0</name></expr>, <expr><name>AV_PIX_FMT_BGR0</name></expr>,

<expr><name>AV_PIX_FMT_RGB48</name></expr>, <expr><name>AV_PIX_FMT_BGR48</name></expr>,

<expr><name>AV_PIX_FMT_RGBA64</name></expr>, <expr><name>AV_PIX_FMT_BGRA64</name></expr>,

<expr><name>AV_PIX_FMT_NONE</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFilterFormats</name> <modifier>*</modifier></type><name>fmts_list</name> <init>= <expr><call><name>ff_make_format_list</name><argument_list>(<argument><expr><name>pix_fmts</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>fmts_list</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>ff_set_common_formats</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>fmts_list</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>haldclutsrc_config_props</name><parameter_list>(<parameter><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>outlink</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>outlink</name><operator>-&gt;</operator><name>src</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>TestSourceContext</name> <modifier>*</modifier></type><name>hc</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>hc</name><operator>-&gt;</operator><name>w</name></name> <operator>=</operator> <name><name>hc</name><operator>-&gt;</operator><name>h</name></name> <operator>=</operator> <name><name>hc</name><operator>-&gt;</operator><name>level</name></name> <operator>*</operator> <name><name>hc</name><operator>-&gt;</operator><name>level</name></name> <operator>*</operator> <name><name>hc</name><operator>-&gt;</operator><name>level</name></name></expr>;</expr_stmt>

<return>return <expr><call><name>config_props</name><argument_list>(<argument><expr><name>outlink</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVFilterPad</name></type> <name><name>haldclutsrc_outputs</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"default"</literal></expr>,

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,

<expr><operator>.</operator><name>request_frame</name> <operator>=</operator> <name>request_frame</name></expr>,

<expr><operator>.</operator><name>config_props</name> <operator>=</operator> <name>haldclutsrc_config_props</name></expr>,

}</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFilter</name></type> <name>ff_vsrc_haldclutsrc</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"haldclutsrc"</literal></expr>,

<expr><operator>.</operator><name>description</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"Provide an identity Hald CLUT."</literal></expr></argument>)</argument_list></call></expr>,

<expr><operator>.</operator><name>priv_class</name> <operator>=</operator> <operator>&amp;</operator><name>haldclutsrc_class</name></expr>,

<expr><operator>.</operator><name>priv_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>TestSourceContext</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>haldclutsrc_init</name></expr>,

<expr><operator>.</operator><name>uninit</name> <operator>=</operator> <name>uninit</name></expr>,

<expr><operator>.</operator><name>query_formats</name> <operator>=</operator> <name>haldclutsrc_query_formats</name></expr>,

<expr><operator>.</operator><name>inputs</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>outputs</name> <operator>=</operator> <name>haldclutsrc_outputs</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_NULLSRC_FILTER</name></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>nullsrc_options</name></cpp:macro> <cpp:value>options</cpp:value></cpp:define>

<expr_stmt><expr><call><name>AVFILTER_DEFINE_CLASS</name><argument_list>(<argument><expr><name>nullsrc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>nullsrc_fill_picture</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>picref</name></decl></parameter>)</parameter_list> <block>{<block_content> </block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>nullsrc_init</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>TestSourceContext</name> <modifier>*</modifier></type><name>test</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>test</name><operator>-&gt;</operator><name>fill_picture_fn</name></name> <operator>=</operator> <name>nullsrc_fill_picture</name></expr>;</expr_stmt>

<return>return <expr><call><name>init</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVFilterPad</name></type> <name><name>nullsrc_outputs</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"default"</literal></expr>,

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,

<expr><operator>.</operator><name>request_frame</name> <operator>=</operator> <name>request_frame</name></expr>,

<expr><operator>.</operator><name>config_props</name> <operator>=</operator> <name>config_props</name></expr>,

}</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFilter</name></type> <name>ff_vsrc_nullsrc</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"nullsrc"</literal></expr>,

<expr><operator>.</operator><name>description</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"Null video source, return unprocessed video frames."</literal></expr></argument>)</argument_list></call></expr>,

<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>nullsrc_init</name></expr>,

<expr><operator>.</operator><name>uninit</name> <operator>=</operator> <name>uninit</name></expr>,

<expr><operator>.</operator><name>priv_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>TestSourceContext</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><operator>.</operator><name>priv_class</name> <operator>=</operator> <operator>&amp;</operator><name>nullsrc_class</name></expr>,

<expr><operator>.</operator><name>inputs</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>outputs</name> <operator>=</operator> <name>nullsrc_outputs</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_TESTSRC_FILTER</name></expr></cpp:if>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVOption</name></type> <name><name>testsrc_options</name><index>[]</index></name> <init>= <expr><block>{

<expr><name>COMMON_OPTIONS</name>

<block>{ <expr><literal type="string">"decimals"</literal></expr>, <expr><literal type="string">"set number of decimals to show"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>nb_decimals</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">0</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">17</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"n"</literal></expr>, <expr><literal type="string">"set number of decimals to show"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>nb_decimals</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">0</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">17</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>AVFILTER_DEFINE_CLASS</name><argument_list>(<argument><expr><name>testsrc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>draw_rectangle</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>val</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_linesize</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>segment_width</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>step</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>segment_width</name> <operator>*</operator> <operator>(</operator><name>step</name> <operator>*</operator> <name>x</name> <operator>+</operator> <name>y</name> <operator>*</operator> <name>dst_linesize</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>w</name> <operator>*=</operator> <name>segment_width</name> <operator>*</operator> <name>step</name></expr>;</expr_stmt>

<expr_stmt><expr><name>h</name> <operator>*=</operator> <name>segment_width</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>h</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dst_linesize</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>draw_digit</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>digit</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_linesize</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>segment_width</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TOP_HBAR</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MID_HBAR</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BOT_HBAR</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LEFT_TOP_VBAR</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LEFT_BOT_VBAR</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RIGHT_TOP_VBAR</name></cpp:macro> <cpp:value>32</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RIGHT_BOT_VBAR</name></cpp:macro> <cpp:value>64</cpp:value></cpp:define>

<struct>struct <name>segments</name> <block>{

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>, <decl><type ref="prev"/><name>w</name></decl>, <decl><type ref="prev"/><name>h</name></decl>;</decl_stmt>

}</block> <decl><name><name>segments</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>, 

<expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>, 

<expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>, 

<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">5</literal></expr> }</block></expr>, 

<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">5</literal></expr> }</block></expr>, 

<expr><block>{ <expr><literal type="number">6</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">5</literal></expr> }</block></expr>, 

<expr><block>{ <expr><literal type="number">6</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">5</literal></expr> }</block></expr> 

}</block></expr></init></decl>;</struct>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>masks</name><index>[<expr><literal type="number">10</literal></expr>]</index></name> <init>= <expr><block>{

<expr><name>TOP_HBAR</name> <operator>|</operator><name>BOT_HBAR</name><operator>|</operator><name>LEFT_TOP_VBAR</name><operator>|</operator><name>LEFT_BOT_VBAR</name><operator>|</operator><name>RIGHT_TOP_VBAR</name><operator>|</operator><name>RIGHT_BOT_VBAR</name></expr>,

<expr><name>RIGHT_TOP_VBAR</name><operator>|</operator><name>RIGHT_BOT_VBAR</name></expr>,

<expr><name>TOP_HBAR</name><operator>|</operator><name>MID_HBAR</name><operator>|</operator><name>BOT_HBAR</name><operator>|</operator><name>LEFT_BOT_VBAR</name> <operator>|</operator><name>RIGHT_TOP_VBAR</name></expr>,

<expr><name>TOP_HBAR</name><operator>|</operator><name>MID_HBAR</name><operator>|</operator><name>BOT_HBAR</name> <operator>|</operator><name>RIGHT_TOP_VBAR</name><operator>|</operator><name>RIGHT_BOT_VBAR</name></expr>,

<expr><name>MID_HBAR</name> <operator>|</operator><name>LEFT_TOP_VBAR</name> <operator>|</operator><name>RIGHT_TOP_VBAR</name><operator>|</operator><name>RIGHT_BOT_VBAR</name></expr>,

<expr><name>TOP_HBAR</name><operator>|</operator><name>BOT_HBAR</name><operator>|</operator><name>MID_HBAR</name><operator>|</operator><name>LEFT_TOP_VBAR</name> <operator>|</operator><name>RIGHT_BOT_VBAR</name></expr>,

<expr><name>TOP_HBAR</name><operator>|</operator><name>BOT_HBAR</name><operator>|</operator><name>MID_HBAR</name><operator>|</operator><name>LEFT_TOP_VBAR</name><operator>|</operator><name>LEFT_BOT_VBAR</name> <operator>|</operator><name>RIGHT_BOT_VBAR</name></expr>,

<expr><name>TOP_HBAR</name> <operator>|</operator><name>RIGHT_TOP_VBAR</name><operator>|</operator><name>RIGHT_BOT_VBAR</name></expr>,

<expr><name>TOP_HBAR</name><operator>|</operator><name>BOT_HBAR</name><operator>|</operator><name>MID_HBAR</name><operator>|</operator><name>LEFT_TOP_VBAR</name><operator>|</operator><name>LEFT_BOT_VBAR</name><operator>|</operator><name>RIGHT_TOP_VBAR</name><operator>|</operator><name>RIGHT_BOT_VBAR</name></expr>,

<expr><name>TOP_HBAR</name><operator>|</operator><name>BOT_HBAR</name><operator>|</operator><name>MID_HBAR</name><operator>|</operator><name>LEFT_TOP_VBAR</name> <operator>|</operator><name>RIGHT_TOP_VBAR</name><operator>|</operator><name>RIGHT_BOT_VBAR</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>mask</name> <init>= <expr><name><name>masks</name><index>[<expr><name>digit</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>draw_rectangle</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_linesize</name></expr></argument>, <argument><expr><name>segment_width</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">13</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>segments</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name>mask</name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><name>i</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>draw_rectangle</name><argument_list>(<argument><expr><literal type="number">255</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_linesize</name></expr></argument>, <argument><expr><name>segment_width</name></expr></argument>,

<argument><expr><name><name>segments</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>x</name></expr></argument>, <argument><expr><name><name>segments</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>y</name></expr></argument>, <argument><expr><name><name>segments</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>w</name></expr></argument>, <argument><expr><name><name>segments</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRADIENT_SIZE</name></cpp:macro> <cpp:value>(6 * 256)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type> <name>test_fill_picture</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>frame</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>TestSourceContext</name> <modifier>*</modifier></type><name>test</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p0</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>color</name></decl>, <decl><type ref="prev"/><name>color_rest</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>icolor</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>radius</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>quad0</name></decl>, <decl><type ref="prev"/><name>quad</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>dquad_x</name></decl>, <decl><type ref="prev"/><name>dquad_y</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>grad</name></decl>, <decl><type ref="prev"/><name>dgrad</name></decl>, <decl><type ref="prev"/><name>rgrad</name></decl>, <decl><type ref="prev"/><name>drgrad</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>seg_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>second</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>width</name> <init>= <expr><name><name>frame</name><operator>-&gt;</operator><name>width</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>height</name> <init>= <expr><name><name>frame</name><operator>-&gt;</operator><name>height</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>radius</name> <operator>=</operator> <operator>(</operator><name>width</name> <operator>+</operator> <name>height</name><operator>)</operator> <operator>/</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>quad0</name> <operator>=</operator> <name>width</name> <operator>*</operator> <name>width</name> <operator>/</operator> <literal type="number">4</literal> <operator>+</operator> <name>height</name> <operator>*</operator> <name>height</name> <operator>/</operator> <literal type="number">4</literal> <operator>-</operator> <name>radius</name> <operator>*</operator> <name>radius</name></expr>;</expr_stmt>

<expr_stmt><expr><name>dquad_y</name> <operator>=</operator> <literal type="number">1</literal> <operator>-</operator> <name>height</name></expr>;</expr_stmt>

<expr_stmt><expr><name>p0</name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name>p0</name></expr>;</expr_stmt>

<expr_stmt><expr><name>color</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>color_rest</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>quad</name> <operator>=</operator> <name>quad0</name></expr>;</expr_stmt>

<expr_stmt><expr><name>dquad_x</name> <operator>=</operator> <literal type="number">1</literal> <operator>-</operator> <name>width</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>icolor</name> <operator>=</operator> <name>color</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>quad</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>icolor</name> <operator>^=</operator> <literal type="number">7</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>quad</name> <operator>+=</operator> <name>dquad_x</name></expr>;</expr_stmt>

<expr_stmt><expr><name>dquad_x</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><operator>(</operator><name>p</name><operator>++</operator><operator>)</operator> <operator>=</operator> <ternary><condition><expr><name>icolor</name> <operator>&amp;</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><literal type="number">255</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><operator>(</operator><name>p</name><operator>++</operator><operator>)</operator> <operator>=</operator> <ternary><condition><expr><name>icolor</name> <operator>&amp;</operator> <literal type="number">2</literal></expr> ?</condition><then> <expr><literal type="number">255</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><operator>(</operator><name>p</name><operator>++</operator><operator>)</operator> <operator>=</operator> <ternary><condition><expr><name>icolor</name> <operator>&amp;</operator> <literal type="number">4</literal></expr> ?</condition><then> <expr><literal type="number">255</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>color_rest</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>color_rest</name> <operator>&gt;=</operator> <name>width</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>color_rest</name> <operator>-=</operator> <name>width</name></expr>;</expr_stmt>

<expr_stmt><expr><name>color</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>quad0</name> <operator>+=</operator> <name>dquad_y</name></expr>;</expr_stmt>

<expr_stmt><expr><name>dquad_y</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>p0</name> <operator>+=</operator> <name><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>p0</name> <operator>=</operator> <name>p</name> <operator>=</operator> <name>data</name> <operator>+</operator> <name><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>height</name> <operator>*</operator> <literal type="number">3</literal><operator>/</operator><literal type="number">4</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>grad</name> <operator>=</operator> <operator>(</operator><literal type="number">256</literal> <operator>*</operator> <name><name>test</name><operator>-&gt;</operator><name>nb_frame</name></name> <operator>*</operator> <name><name>test</name><operator>-&gt;</operator><name>time_base</name><operator>.</operator><name>num</name></name> <operator>/</operator> <name><name>test</name><operator>-&gt;</operator><name>time_base</name><operator>.</operator><name>den</name></name><operator>)</operator> <operator>%</operator>

<name>GRADIENT_SIZE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>rgrad</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>dgrad</name> <operator>=</operator> <name>GRADIENT_SIZE</name> <operator>/</operator> <name>width</name></expr>;</expr_stmt>

<expr_stmt><expr><name>drgrad</name> <operator>=</operator> <name>GRADIENT_SIZE</name> <operator>%</operator> <name>width</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><operator>(</operator><name>p</name><operator>++</operator><operator>)</operator> <operator>=</operator>

<ternary><condition><expr><name>grad</name> <operator>&lt;</operator> <literal type="number">256</literal> <operator>||</operator> <name>grad</name> <operator>&gt;=</operator> <literal type="number">5</literal> <operator>*</operator> <literal type="number">256</literal></expr> ?</condition><then> <expr><literal type="number">255</literal></expr> </then><else>:

<expr><ternary><condition><expr><name>grad</name> <operator>&gt;=</operator> <literal type="number">2</literal> <operator>*</operator> <literal type="number">256</literal> <operator>&amp;&amp;</operator> <name>grad</name> <operator>&lt;</operator> <literal type="number">4</literal> <operator>*</operator> <literal type="number">256</literal></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>:

<expr><ternary><condition><expr><name>grad</name> <operator>&lt;</operator> <literal type="number">2</literal> <operator>*</operator> <literal type="number">256</literal></expr> ?</condition><then> <expr><literal type="number">2</literal> <operator>*</operator> <literal type="number">256</literal> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <name>grad</name></expr> </then><else>: <expr><name>grad</name> <operator>-</operator> <literal type="number">4</literal> <operator>*</operator> <literal type="number">256</literal></expr></else></ternary></expr></else></ternary></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><operator>(</operator><name>p</name><operator>++</operator><operator>)</operator> <operator>=</operator>

<ternary><condition><expr><name>grad</name> <operator>&gt;=</operator> <literal type="number">4</literal> <operator>*</operator> <literal type="number">256</literal></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>:

<expr><ternary><condition><expr><name>grad</name> <operator>&gt;=</operator> <literal type="number">1</literal> <operator>*</operator> <literal type="number">256</literal> <operator>&amp;&amp;</operator> <name>grad</name> <operator>&lt;</operator> <literal type="number">3</literal> <operator>*</operator> <literal type="number">256</literal></expr> ?</condition><then> <expr><literal type="number">255</literal></expr> </then><else>:

<expr><ternary><condition><expr><name>grad</name> <operator>&lt;</operator> <literal type="number">1</literal> <operator>*</operator> <literal type="number">256</literal></expr> ?</condition><then> <expr><name>grad</name></expr> </then><else>: <expr><literal type="number">4</literal> <operator>*</operator> <literal type="number">256</literal> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <name>grad</name></expr></else></ternary></expr></else></ternary></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><operator>(</operator><name>p</name><operator>++</operator><operator>)</operator> <operator>=</operator>

<ternary><condition><expr><name>grad</name> <operator>&lt;</operator> <literal type="number">2</literal> <operator>*</operator> <literal type="number">256</literal></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>:

<expr><ternary><condition><expr><name>grad</name> <operator>&gt;=</operator> <literal type="number">3</literal> <operator>*</operator> <literal type="number">256</literal> <operator>&amp;&amp;</operator> <name>grad</name> <operator>&lt;</operator> <literal type="number">5</literal> <operator>*</operator> <literal type="number">256</literal></expr> ?</condition><then> <expr><literal type="number">255</literal></expr> </then><else>:

<expr><ternary><condition><expr><name>grad</name> <operator>&lt;</operator> <literal type="number">3</literal> <operator>*</operator> <literal type="number">256</literal></expr> ?</condition><then> <expr><name>grad</name> <operator>-</operator> <literal type="number">2</literal> <operator>*</operator> <literal type="number">256</literal></expr> </then><else>: <expr><literal type="number">6</literal> <operator>*</operator> <literal type="number">256</literal> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <name>grad</name></expr></else></ternary></expr></else></ternary></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>grad</name> <operator>+=</operator> <name>dgrad</name></expr>;</expr_stmt>

<expr_stmt><expr><name>rgrad</name> <operator>+=</operator> <name>drgrad</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>rgrad</name> <operator>&gt;=</operator> <name>GRADIENT_SIZE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>grad</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>rgrad</name> <operator>-=</operator> <name>GRADIENT_SIZE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>grad</name> <operator>&gt;=</operator> <name>GRADIENT_SIZE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>grad</name> <operator>-=</operator> <name>GRADIENT_SIZE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name>p0</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <name>height</name> <operator>/</operator> <literal type="number">8</literal></expr>;</init> <condition><expr><name>y</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>y</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>p</name><operator>+</operator><name><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">3</literal> <operator>*</operator> <name>width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>+=</operator> <name><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>seg_size</name> <operator>=</operator> <name>width</name> <operator>/</operator> <literal type="number">80</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>seg_size</name> <operator>&gt;=</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>height</name> <operator>&gt;=</operator> <literal type="number">13</literal> <operator>*</operator> <name>seg_size</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int64_t</name></type> <name>p10decimals</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>time</name> <init>= <expr><call><name>av_q2d</name><argument_list>(<argument><expr><name><name>test</name><operator>-&gt;</operator><name>time_base</name></name></expr></argument>)</argument_list></call> <operator>*</operator> <name><name>test</name><operator>-&gt;</operator><name>nb_frame</name></name> <operator>*</operator>

<call><name>ff_exp10</name><argument_list>(<argument><expr><name><name>test</name><operator>-&gt;</operator><name>nb_decimals</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>time</name> <operator>&gt;=</operator> <name>INT_MAX</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name><name>test</name><operator>-&gt;</operator><name>nb_decimals</name></name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name>p10decimals</name> <operator>*=</operator> <literal type="number">10</literal></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>second</name> <operator>=</operator> <call><name>av_rescale_rnd</name><argument_list>(<argument><expr><name><name>test</name><operator>-&gt;</operator><name>nb_frame</name></name> <operator>*</operator> <name><name>test</name><operator>-&gt;</operator><name>time_base</name><operator>.</operator><name>num</name></name></expr></argument>, <argument><expr><name>p10decimals</name></expr></argument>, <argument><expr><name><name>test</name><operator>-&gt;</operator><name>time_base</name><operator>.</operator><name>den</name></name></expr></argument>, <argument><expr><name>AV_ROUND_ZERO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>x</name> <operator>=</operator> <name>width</name> <operator>-</operator> <operator>(</operator><name>width</name> <operator>-</operator> <name>seg_size</name> <operator>*</operator> <literal type="number">64</literal><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>y</name> <operator>=</operator> <operator>(</operator><name>height</name> <operator>-</operator> <name>seg_size</name> <operator>*</operator> <literal type="number">13</literal><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name>data</name> <operator>+</operator> <operator>(</operator><name>x</name><operator>*</operator><literal type="number">3</literal> <operator>+</operator> <name>y</name> <operator>*</operator> <name><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>p</name> <operator>-=</operator> <literal type="number">3</literal> <operator>*</operator> <literal type="number">8</literal> <operator>*</operator> <name>seg_size</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>draw_digit</name><argument_list>(<argument><expr><name>second</name> <operator>%</operator> <literal type="number">10</literal></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>seg_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>second</name> <operator>/=</operator> <literal type="number">10</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>second</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>test_init</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>TestSourceContext</name> <modifier>*</modifier></type><name>test</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>test</name><operator>-&gt;</operator><name>fill_picture_fn</name></name> <operator>=</operator> <name>test_fill_picture</name></expr>;</expr_stmt>

<return>return <expr><call><name>init</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>test_query_formats</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>enum</name> <name>AVPixelFormat</name></name></type> <name><name>pix_fmts</name><index>[]</index></name> <init>= <expr><block>{

<expr><name>AV_PIX_FMT_RGB24</name></expr>, <expr><name>AV_PIX_FMT_NONE</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFilterFormats</name> <modifier>*</modifier></type><name>fmts_list</name> <init>= <expr><call><name>ff_make_format_list</name><argument_list>(<argument><expr><name>pix_fmts</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>fmts_list</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>ff_set_common_formats</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>fmts_list</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVFilterPad</name></type> <name><name>avfilter_vsrc_testsrc_outputs</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"default"</literal></expr>,

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,

<expr><operator>.</operator><name>request_frame</name> <operator>=</operator> <name>request_frame</name></expr>,

<expr><operator>.</operator><name>config_props</name> <operator>=</operator> <name>config_props</name></expr>,

}</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFilter</name></type> <name>ff_vsrc_testsrc</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"testsrc"</literal></expr>,

<expr><operator>.</operator><name>description</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"Generate test pattern."</literal></expr></argument>)</argument_list></call></expr>,

<expr><operator>.</operator><name>priv_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>TestSourceContext</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><operator>.</operator><name>priv_class</name> <operator>=</operator> <operator>&amp;</operator><name>testsrc_class</name></expr>,

<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>test_init</name></expr>,

<expr><operator>.</operator><name>uninit</name> <operator>=</operator> <name>uninit</name></expr>,

<expr><operator>.</operator><name>query_formats</name> <operator>=</operator> <name>test_query_formats</name></expr>,

<expr><operator>.</operator><name>inputs</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>outputs</name> <operator>=</operator> <name>avfilter_vsrc_testsrc_outputs</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_TESTSRC2_FILTER</name></expr></cpp:if>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVOption</name></type> <name><name>testsrc2_options</name><index>[]</index></name> <init>= <expr><block>{

<expr><name>COMMON_OPTIONS</name>

<block>{ <expr><literal type="string">"alpha"</literal></expr>, <expr><literal type="string">"set global alpha (opacity)"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>alpha</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">255</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">255</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>AVFILTER_DEFINE_CLASS</name><argument_list>(<argument><expr><name>testsrc2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>set_color</name><parameter_list>(<parameter><decl><type><name>TestSourceContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>FFDrawColor</name> <modifier>*</modifier></type><name>color</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>argb</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>rgba</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{ <expr><operator>(</operator><name>argb</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr>,

<expr><operator>(</operator><name>argb</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr>,

<expr><operator>(</operator><name>argb</name> <operator>&gt;&gt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr>,

<expr><operator>(</operator><name>argb</name> <operator>&gt;&gt;</operator> <literal type="number">24</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr>, }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ff_draw_color</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>draw</name></name></expr></argument>, <argument><expr><name>color</name></expr></argument>, <argument><expr><name>rgba</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint32_t</name></type> <name>color_gradient</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>index</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name></type> <name>si</name> <init>= <expr><name>index</name> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr></init></decl>, <decl><type ref="prev"/><name>sd</name> <init>= <expr><literal type="number">0xFF</literal> <operator>-</operator> <name>si</name></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>index</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">0</literal></expr>:</case> <return>return <expr><literal type="number">0xFF0000</literal> <operator>+</operator> <operator>(</operator><name>si</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator></expr>;</return>

<case>case <expr><literal type="number">1</literal></expr>:</case> <return>return <expr><literal type="number">0x00FF00</literal> <operator>+</operator> <operator>(</operator><name>sd</name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator></expr>;</return>

<case>case <expr><literal type="number">2</literal></expr>:</case> <return>return <expr><literal type="number">0x00FF00</literal> <operator>+</operator> <operator>(</operator><name>si</name> <operator>&lt;&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr>;</return>

<case>case <expr><literal type="number">3</literal></expr>:</case> <return>return <expr><literal type="number">0x0000FF</literal> <operator>+</operator> <operator>(</operator><name>sd</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator></expr>;</return>

<case>case <expr><literal type="number">4</literal></expr>:</case> <return>return <expr><literal type="number">0x0000FF</literal> <operator>+</operator> <operator>(</operator><name>si</name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator></expr>;</return>

<case>case <expr><literal type="number">5</literal></expr>:</case> <return>return <expr><literal type="number">0xFF0000</literal> <operator>+</operator> <operator>(</operator><name>sd</name> <operator>&lt;&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr>;</return>

</block_content>}</block></switch>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>draw_text</name><parameter_list>(<parameter><decl><type><name>TestSourceContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>frame</name></decl></parameter>, <parameter><decl><type><name>FFDrawColor</name> <modifier>*</modifier></type><name>color</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>x0</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y0</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>text</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>x</name> <init>= <expr><name>x0</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init>;</init> <condition><expr><operator>*</operator><name>text</name></expr>;</condition> <incr><expr><name>text</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>text</name> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>x</name> <operator>=</operator> <name>x0</name></expr>;</expr_stmt>

<expr_stmt><expr><name>y0</name> <operator>+=</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ff_blend_mask</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>draw</name></name></expr></argument>, <argument><expr><name>color</name></expr></argument>, <argument><expr><name><name>frame</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>frame</name><operator>-&gt;</operator><name>linesize</name></name></expr></argument>,

<argument><expr><name><name>frame</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>frame</name><operator>-&gt;</operator><name>height</name></name></expr></argument>,

<argument><expr><name>avpriv_vga16_font</name> <operator>+</operator> <operator>*</operator><name>text</name> <operator>*</operator> <literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>x</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>test2_fill_picture</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>frame</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>TestSourceContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>FFDrawColor</name></type> <name>color</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>alpha</name> <init>= <expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>s</name><operator>-&gt;</operator><name>alpha</name></name> <operator>&lt;&lt;</operator> <literal type="number">24</literal></expr></init></decl>;</decl_stmt>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>x</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>x2</name></decl>;</decl_stmt>

<expr_stmt><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">7</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>x2</name> <operator>=</operator> <call><name>av_rescale</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>w</name></name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>x2</name> <operator>=</operator> <call><name>ff_draw_round_to_sub</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>draw</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>x2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_color</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>color</name></expr></argument>, <argument><expr><operator>(</operator><ternary><condition><expr><operator>(</operator><name>i</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0xFF0000</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator> <operator>|</operator>

<operator>(</operator><ternary><condition><expr><operator>(</operator><name>i</name> <operator>&amp;</operator> <literal type="number">2</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0x00FF00</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator> <operator>|</operator>

<operator>(</operator><ternary><condition><expr><operator>(</operator><name>i</name> <operator>&amp;</operator> <literal type="number">4</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0x0000FF</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator> <operator>|</operator>

<name>alpha</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_fill_rectangle</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>draw</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>color</name></expr></argument>, <argument><expr><name><name>frame</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>frame</name><operator>-&gt;</operator><name>linesize</name></name></expr></argument>,

<argument><expr><name>x</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>x2</name> <operator>-</operator> <name>x</name></expr></argument>, <argument><expr><name><name>frame</name><operator>-&gt;</operator><name>height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>x</name> <operator>=</operator> <name>x2</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>h</name></name> <operator>&gt;=</operator> <literal type="number">64</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>dx</name></decl>, <decl><type ref="prev"/><name>y0</name></decl>, <decl><type ref="prev"/><name>y</name></decl>, <decl><type ref="prev"/><name>g0</name></decl>, <decl><type ref="prev"/><name>g</name></decl>;</decl_stmt>

<expr_stmt><expr><name>dx</name> <operator>=</operator> <call><name>ff_draw_round_to_sub</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>draw</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>y0</name> <operator>=</operator> <call><name>av_rescale_q</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pts</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>time_base</name></name></expr></argument>, <argument><expr><call><name>av_make_q</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>h</name></name> <operator>-</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>g0</name> <operator>=</operator> <call><name>av_rescale_q</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pts</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>time_base</name></name></expr></argument>, <argument><expr><call><name>av_make_q</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>w</name></name></expr>;</condition> <incr><expr><name>x</name> <operator>+=</operator> <name>dx</name></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>g</name> <operator>=</operator> <operator>(</operator><call><name>av_rescale</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><literal type="number">6</literal> <operator>*</operator> <literal type="number">256</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>w</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <name>g0</name><operator>)</operator> <operator>%</operator> <operator>(</operator><literal type="number">6</literal> <operator>*</operator> <literal type="number">256</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_color</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>color</name></expr></argument>, <argument><expr><call><name>color_gradient</name><argument_list>(<argument><expr><name>g</name></expr></argument>)</argument_list></call> <operator>|</operator> <name>alpha</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>y</name> <operator>=</operator> <name>y0</name> <operator>+</operator> <call><name>av_rescale</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>h</name></name> <operator>/</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>w</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>y</name> <operator>%=</operator> <literal type="number">2</literal> <operator>*</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>h</name></name> <operator>-</operator> <literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>y</name> <operator>&gt;</operator> <name><name>s</name><operator>-&gt;</operator><name>h</name></name> <operator>-</operator> <literal type="number">16</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>y</name> <operator>=</operator> <literal type="number">2</literal> <operator>*</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>h</name></name> <operator>-</operator> <literal type="number">16</literal><operator>)</operator> <operator>-</operator> <name>y</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>y</name> <operator>=</operator> <call><name>ff_draw_round_to_sub</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>draw</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_fill_rectangle</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>draw</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>color</name></expr></argument>, <argument><expr><name><name>frame</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>frame</name><operator>-&gt;</operator><name>linesize</name></name></expr></argument>,

<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>dx</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>w</name></name> <operator>&gt;=</operator> <literal type="number">64</literal> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>h</name></name> <operator>&gt;=</operator> <literal type="number">64</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>l</name> <init>= <expr><operator>(</operator><call><name>FFMIN</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>w</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>h</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">32</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>steps</name> <init>= <expr><call><name>FFMAX</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>l</name> <operator>&gt;&gt;</operator> <literal type="number">5</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>xc</name> <init>= <expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>w</name></name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>w</name></name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>yc</name> <init>= <expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>h</name></name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>cycle</name> <init>= <expr><name>l</name> <operator>&lt;&lt;</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>pos</name></decl>, <decl><type ref="prev"/><name>xh</name></decl>, <decl><type ref="prev"/><name>yh</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>c</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>c</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>c</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>set_color</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>color</name></expr></argument>, <argument><expr><operator>(</operator><literal type="number">0xBBBBBB</literal> <operator>^</operator> <operator>(</operator><literal type="number">0xFF</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>c</name> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator><operator>)</operator><operator>)</operator> <operator>|</operator> <name>alpha</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pos</name> <operator>=</operator> <call><name>av_rescale_q</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pts</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>time_base</name></name></expr></argument>, <argument><expr><call><name>av_make_q</name><argument_list>(<argument><expr><literal type="number">64</literal> <operator>&gt;&gt;</operator> <operator>(</operator><name>c</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>, <argument><expr><name>cycle</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>%</operator> <name>cycle</name></expr>;</expr_stmt>

<expr_stmt><expr><name>xh</name> <operator>=</operator> <ternary><condition><expr><name>pos</name> <operator>&lt;</operator> <literal type="number">1</literal> <operator>*</operator> <name>l</name></expr> ?</condition><then> <expr><name>pos</name></expr> </then><else>:

<expr><ternary><condition><expr><name>pos</name> <operator>&lt;</operator> <literal type="number">2</literal> <operator>*</operator> <name>l</name></expr> ?</condition><then> <expr><name>l</name></expr> </then><else>:

<expr><ternary><condition><expr><name>pos</name> <operator>&lt;</operator> <literal type="number">3</literal> <operator>*</operator> <name>l</name></expr> ?</condition><then> <expr><literal type="number">3</literal> <operator>*</operator> <name>l</name> <operator>-</operator> <name>pos</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></else></ternary></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>yh</name> <operator>=</operator> <ternary><condition><expr><name>pos</name> <operator>&lt;</operator> <literal type="number">1</literal> <operator>*</operator> <name>l</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>:

<expr><ternary><condition><expr><name>pos</name> <operator>&lt;</operator> <literal type="number">2</literal> <operator>*</operator> <name>l</name></expr> ?</condition><then> <expr><name>pos</name> <operator>-</operator> <name>l</name></expr> </then><else>:

<expr><ternary><condition><expr><name>pos</name> <operator>&lt;</operator> <literal type="number">3</literal> <operator>*</operator> <name>l</name></expr> ?</condition><then> <expr><name>l</name></expr> </then><else>:

<expr><name>cycle</name> <operator>-</operator> <name>pos</name></expr></else></ternary></expr></else></ternary></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>xh</name> <operator>-=</operator> <name>l</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>yh</name> <operator>-=</operator> <name>l</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>steps</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>x</name> <init>= <expr><call><name>av_rescale</name><argument_list>(<argument><expr><name>xh</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>steps</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>xc</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>y</name> <init>= <expr><call><name>av_rescale</name><argument_list>(<argument><expr><name>yh</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>steps</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>yc</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>x</name> <operator>=</operator> <call><name>ff_draw_round_to_sub</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>draw</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>y</name> <operator>=</operator> <call><name>ff_draw_round_to_sub</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>draw</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_fill_rectangle</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>draw</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>color</name></expr></argument>, <argument><expr><name><name>frame</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>frame</name><operator>-&gt;</operator><name>linesize</name></name></expr></argument>,

<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>w</name></name> <operator>&gt;=</operator> <literal type="number">64</literal> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>h</name></name> <operator>&gt;=</operator> <literal type="number">64</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>l</name> <init>= <expr><operator>(</operator><call><name>FFMIN</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>w</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>h</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">16</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>cycle</name> <init>= <expr><name>l</name> <operator>&lt;&lt;</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>xc</name> <init>= <expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>w</name></name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>yc</name> <init>= <expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>h</name></name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>h</name></name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>xm1</name> <init>= <expr><call><name>ff_draw_round_to_sub</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>draw</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>xc</name> <operator>-</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>xm2</name> <init>= <expr><call><name>ff_draw_round_to_sub</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>draw</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>xc</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ym1</name> <init>= <expr><call><name>ff_draw_round_to_sub</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>draw</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>yc</name> <operator>-</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ym2</name> <init>= <expr><call><name>ff_draw_round_to_sub</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>draw</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>yc</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>size</name></decl>, <decl><type ref="prev"/><name>step</name></decl>, <decl><type ref="prev"/><name>x1</name></decl>, <decl><type ref="prev"/><name>x2</name></decl>, <decl><type ref="prev"/><name>y1</name></decl>, <decl><type ref="prev"/><name>y2</name></decl>;</decl_stmt>

<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>av_rescale_q</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pts</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>time_base</name></name></expr></argument>, <argument><expr><call><name>av_make_q</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>cycle</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>step</name> <operator>=</operator> <name>size</name> <operator>/</operator> <name>l</name></expr>;</expr_stmt>

<expr_stmt><expr><name>size</name> <operator>%=</operator> <name>l</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>step</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>size</name> <operator>=</operator> <name>l</name> <operator>-</operator> <name>size</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>step</name> <operator>=</operator> <operator>(</operator><name>step</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_color</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>color</name></expr></argument>, <argument><expr><literal type="number">0xFF808080</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>x1</name> <operator>=</operator> <call><name>ff_draw_round_to_sub</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>draw</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>xc</name> <operator>-</operator> <literal type="number">4</literal> <operator>-</operator> <name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>x2</name> <operator>=</operator> <call><name>ff_draw_round_to_sub</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>draw</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>xc</name> <operator>+</operator> <literal type="number">4</literal> <operator>+</operator> <name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>y1</name> <operator>=</operator> <call><name>ff_draw_round_to_sub</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>draw</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>yc</name> <operator>-</operator> <literal type="number">4</literal> <operator>-</operator> <name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>y2</name> <operator>=</operator> <call><name>ff_draw_round_to_sub</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>draw</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>yc</name> <operator>+</operator> <literal type="number">4</literal> <operator>+</operator> <name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>step</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>step</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ff_fill_rectangle</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>draw</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>color</name></expr></argument>, <argument><expr><name><name>frame</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>frame</name><operator>-&gt;</operator><name>linesize</name></name></expr></argument>,

<argument><expr><name>x1</name></expr></argument>, <argument><expr><name>ym1</name></expr></argument>, <argument><expr><name>x2</name> <operator>-</operator> <name>x1</name></expr></argument>, <argument><expr><name>ym2</name> <operator>-</operator> <name>ym1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>step</name> <operator>==</operator> <literal type="number">1</literal> <operator>||</operator> <name>step</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ff_fill_rectangle</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>draw</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>color</name></expr></argument>, <argument><expr><name><name>frame</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>frame</name><operator>-&gt;</operator><name>linesize</name></name></expr></argument>,

<argument><expr><name>xm1</name></expr></argument>, <argument><expr><name>y1</name></expr></argument>, <argument><expr><name>xm2</name> <operator>-</operator> <name>xm1</name></expr></argument>, <argument><expr><name>y2</name> <operator>-</operator> <name>y1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>step</name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ff_fill_rectangle</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>draw</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>color</name></expr></argument>, <argument><expr><name><name>frame</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>frame</name><operator>-&gt;</operator><name>linesize</name></name></expr></argument>,

<argument><expr><name>x1</name></expr></argument>, <argument><expr><name>y1</name></expr></argument>, <argument><expr><name>x2</name> <operator>-</operator> <name>x1</name></expr></argument>, <argument><expr><name>y2</name> <operator>-</operator> <name>y1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name></type> <name>xmin</name> <init>= <expr><call><name>av_rescale</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>w</name></name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>xmax</name> <init>= <expr><call><name>av_rescale</name><argument_list>(<argument><expr><literal type="number">7</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>w</name></name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>ymin</name> <init>= <expr><call><name>av_rescale</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>h</name></name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>ymax</name> <init>= <expr><call><name>av_rescale</name><argument_list>(<argument><expr><literal type="number">7</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>h</name></name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>r</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>alpha</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>pts</name></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <name>ymin</name></expr>;</init> <condition><expr><name>y</name> <operator>+</operator> <literal type="number">15</literal> <operator>&lt;</operator> <name>ymax</name></expr>;</condition> <incr><expr><name>y</name> <operator>+=</operator> <literal type="number">16</literal></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <name>xmin</name></expr>;</init> <condition><expr><name>x</name> <operator>+</operator> <literal type="number">15</literal> <operator>&lt;</operator> <name>xmax</name></expr>;</condition> <incr><expr><name>x</name> <operator>+=</operator> <literal type="number">16</literal></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>x</name> <operator>^</operator> <name>y</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">16</literal></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">256</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>r</name> <operator>=</operator> <name>r</name> <operator>*</operator> <literal type="number">1664525</literal> <operator>+</operator> <literal type="number">1013904223</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>alpha</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>r</name> <operator>&gt;&gt;</operator> <literal type="number">24</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>set_color</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>color</name></expr></argument>, <argument><expr><literal type="number">0xFF00FF80</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_blend_mask</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>draw</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>color</name></expr></argument>, <argument><expr><name><name>frame</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>frame</name><operator>-&gt;</operator><name>linesize</name></name></expr></argument>,

<argument><expr><name><name>frame</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>frame</name><operator>-&gt;</operator><name>height</name></name></expr></argument>,

<argument><expr><name>alpha</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>w</name></name> <operator>&gt;=</operator> <literal type="number">16</literal> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>h</name></name> <operator>&gt;=</operator> <literal type="number">16</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name></type> <name>w</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>w</name></name> <operator>-</operator> <literal type="number">8</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>h</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>h</name></name> <operator>-</operator> <literal type="number">8</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>x</name> <init>= <expr><call><name>av_rescale_q</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pts</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>time_base</name></name></expr></argument>, <argument><expr><call><name>av_make_q</name><argument_list>(<argument><expr><literal type="number">233</literal></expr></argument>, <argument><expr><literal type="number">55</literal> <operator>*</operator> <name>w</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>%</operator> <operator>(</operator><name>w</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>y</name> <init>= <expr><call><name>av_rescale_q</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pts</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>time_base</name></name></expr></argument>, <argument><expr><call><name>av_make_q</name><argument_list>(<argument><expr><literal type="number">233</literal></expr></argument>, <argument><expr><literal type="number">89</literal> <operator>*</operator> <name>h</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>%</operator> <operator>(</operator><name>h</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>x</name> <operator>&gt;</operator> <name>w</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>x</name> <operator>=</operator> <operator>(</operator><name>w</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>-</operator> <name>x</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>y</name> <operator>&gt;</operator> <name>h</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>y</name> <operator>=</operator> <operator>(</operator><name>h</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>-</operator> <name>y</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>x</name> <operator>=</operator> <call><name>ff_draw_round_to_sub</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>draw</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>y</name> <operator>=</operator> <call><name>ff_draw_round_to_sub</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>draw</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_color</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>color</name></expr></argument>, <argument><expr><literal type="number">0xFF8000FF</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_fill_rectangle</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>draw</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>color</name></expr></argument>, <argument><expr><name><name>frame</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>frame</name><operator>-&gt;</operator><name>linesize</name></name></expr></argument>,

<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>time</name></decl>;</decl_stmt>

<expr_stmt><expr><name>time</name> <operator>=</operator> <call><name>av_rescale_q</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pts</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>time_base</name></name></expr></argument>, <argument><expr><call><name>av_make_q</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1000</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>%</operator> <literal type="number">86400000</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_color</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>color</name></expr></argument>, <argument><expr><literal type="number">0xC0000000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_blend_rectangle</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>draw</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>color</name></expr></argument>, <argument><expr><name><name>frame</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>frame</name><operator>-&gt;</operator><name>linesize</name></name></expr></argument>,

<argument><expr><name><name>frame</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>frame</name><operator>-&gt;</operator><name>height</name></name></expr></argument>,

<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">100</literal></expr></argument>, <argument><expr><literal type="number">36</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_color</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>color</name></expr></argument>, <argument><expr><literal type="number">0xFFFF8000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%02d:%02d:%02d.%03d\n%12"</literal><name>PRIi64</name></expr></argument>,

<argument><expr><name>time</name> <operator>/</operator> <literal type="number">3600000</literal></expr></argument>, <argument><expr><operator>(</operator><name>time</name> <operator>/</operator> <literal type="number">60000</literal><operator>)</operator> <operator>%</operator> <literal type="number">60</literal></expr></argument>, <argument><expr><operator>(</operator><name>time</name> <operator>/</operator> <literal type="number">1000</literal><operator>)</operator> <operator>%</operator> <literal type="number">60</literal></expr></argument>,

<argument><expr><name>time</name> <operator>%</operator> <literal type="number">1000</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>pts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>draw_text</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>frame</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>color</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>test2_init</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>TestSourceContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>fill_picture_fn</name></name> <operator>=</operator> <name>test2_fill_picture</name></expr>;</expr_stmt>

<return>return <expr><call><name>init</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>test2_query_formats</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>ff_set_common_formats</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><call><name>ff_draw_supported_pixel_formats</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>test2_config_props</name><parameter_list>(<parameter><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>inlink</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>inlink</name><operator>-&gt;</operator><name>src</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>TestSourceContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><call><name>ff_draw_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>draw</name></name></expr></argument>, <argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>format</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>w</name></name> <operator>=</operator> <call><name>ff_draw_round_to_sub</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>draw</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>w</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>h</name></name> <operator>=</operator> <call><name>ff_draw_round_to_sub</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>draw</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>h</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>av_image_check_size</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>w</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>h</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>config_props</name><argument_list>(<argument><expr><name>inlink</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVFilterPad</name></type> <name><name>avfilter_vsrc_testsrc2_outputs</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"default"</literal></expr>,

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,

<expr><operator>.</operator><name>request_frame</name> <operator>=</operator> <name>request_frame</name></expr>,

<expr><operator>.</operator><name>config_props</name> <operator>=</operator> <name>test2_config_props</name></expr>,

}</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFilter</name></type> <name>ff_vsrc_testsrc2</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"testsrc2"</literal></expr>,

<expr><operator>.</operator><name>description</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"Generate another test pattern."</literal></expr></argument>)</argument_list></call></expr>,

<expr><operator>.</operator><name>priv_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>TestSourceContext</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><operator>.</operator><name>priv_class</name> <operator>=</operator> <operator>&amp;</operator><name>testsrc2_class</name></expr>,

<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>test2_init</name></expr>,

<expr><operator>.</operator><name>uninit</name> <operator>=</operator> <name>uninit</name></expr>,

<expr><operator>.</operator><name>query_formats</name> <operator>=</operator> <name>test2_query_formats</name></expr>,

<expr><operator>.</operator><name>inputs</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>outputs</name> <operator>=</operator> <name>avfilter_vsrc_testsrc2_outputs</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_RGBTESTSRC_FILTER</name></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rgbtestsrc_options</name></cpp:macro> <cpp:value>options</cpp:value></cpp:define>

<expr_stmt><expr><call><name>AVFILTER_DEFINE_CLASS</name><argument_list>(<argument><expr><name>rgbtestsrc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>G</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>B</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>A</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type> <name>rgbtest_put_pixel</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_linesize</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>r</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>g</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>fmt</name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name></type> <name><name>rgba_map</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>v</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>fmt</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>AV_PIX_FMT_BGR444</name></expr>:</case> <expr_stmt><expr><operator>(</operator><operator>(</operator><name>uint16_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name>dst</name> <operator>+</operator> <name>y</name><operator>*</operator><name>dst_linesize</name><operator>)</operator><operator>)</operator><index>[<expr><name>x</name></expr>]</index> <operator>=</operator> <operator>(</operator><operator>(</operator><name>r</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>g</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>b</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>AV_PIX_FMT_RGB444</name></expr>:</case> <expr_stmt><expr><operator>(</operator><operator>(</operator><name>uint16_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name>dst</name> <operator>+</operator> <name>y</name><operator>*</operator><name>dst_linesize</name><operator>)</operator><operator>)</operator><index>[<expr><name>x</name></expr>]</index> <operator>=</operator> <operator>(</operator><operator>(</operator><name>b</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>g</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>r</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>AV_PIX_FMT_BGR555</name></expr>:</case> <expr_stmt><expr><operator>(</operator><operator>(</operator><name>uint16_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name>dst</name> <operator>+</operator> <name>y</name><operator>*</operator><name>dst_linesize</name><operator>)</operator><operator>)</operator><index>[<expr><name>x</name></expr>]</index> <operator>=</operator> <operator>(</operator><operator>(</operator><name>r</name><operator>&gt;&gt;</operator><literal type="number">3</literal><operator>)</operator><operator>&lt;&lt;</operator><literal type="number">10</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>g</name><operator>&gt;&gt;</operator><literal type="number">3</literal><operator>)</operator><operator>&lt;&lt;</operator><literal type="number">5</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>b</name><operator>&gt;&gt;</operator><literal type="number">3</literal><operator>)</operator></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>AV_PIX_FMT_RGB555</name></expr>:</case> <expr_stmt><expr><operator>(</operator><operator>(</operator><name>uint16_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name>dst</name> <operator>+</operator> <name>y</name><operator>*</operator><name>dst_linesize</name><operator>)</operator><operator>)</operator><index>[<expr><name>x</name></expr>]</index> <operator>=</operator> <operator>(</operator><operator>(</operator><name>b</name><operator>&gt;&gt;</operator><literal type="number">3</literal><operator>)</operator><operator>&lt;&lt;</operator><literal type="number">10</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>g</name><operator>&gt;&gt;</operator><literal type="number">3</literal><operator>)</operator><operator>&lt;&lt;</operator><literal type="number">5</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>r</name><operator>&gt;&gt;</operator><literal type="number">3</literal><operator>)</operator></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>AV_PIX_FMT_BGR565</name></expr>:</case> <expr_stmt><expr><operator>(</operator><operator>(</operator><name>uint16_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name>dst</name> <operator>+</operator> <name>y</name><operator>*</operator><name>dst_linesize</name><operator>)</operator><operator>)</operator><index>[<expr><name>x</name></expr>]</index> <operator>=</operator> <operator>(</operator><operator>(</operator><name>r</name><operator>&gt;&gt;</operator><literal type="number">3</literal><operator>)</operator><operator>&lt;&lt;</operator><literal type="number">11</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>g</name><operator>&gt;&gt;</operator><literal type="number">2</literal><operator>)</operator><operator>&lt;&lt;</operator><literal type="number">5</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>b</name><operator>&gt;&gt;</operator><literal type="number">3</literal><operator>)</operator></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>AV_PIX_FMT_RGB565</name></expr>:</case> <expr_stmt><expr><operator>(</operator><operator>(</operator><name>uint16_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name>dst</name> <operator>+</operator> <name>y</name><operator>*</operator><name>dst_linesize</name><operator>)</operator><operator>)</operator><index>[<expr><name>x</name></expr>]</index> <operator>=</operator> <operator>(</operator><operator>(</operator><name>b</name><operator>&gt;&gt;</operator><literal type="number">3</literal><operator>)</operator><operator>&lt;&lt;</operator><literal type="number">11</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>g</name><operator>&gt;&gt;</operator><literal type="number">2</literal><operator>)</operator><operator>&lt;&lt;</operator><literal type="number">5</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>r</name><operator>&gt;&gt;</operator><literal type="number">3</literal><operator>)</operator></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>AV_PIX_FMT_RGB24</name></expr>:</case>

<case>case <expr><name>AV_PIX_FMT_BGR24</name></expr>:</case>

<expr_stmt><expr><name>v</name> <operator>=</operator> <operator>(</operator><name>r</name> <operator>&lt;&lt;</operator> <operator>(</operator><name><name>rgba_map</name><index>[<expr><name>R</name></expr>]</index></name><operator>*</operator><literal type="number">8</literal><operator>)</operator><operator>)</operator> <operator>+</operator> <operator>(</operator><name>g</name> <operator>&lt;&lt;</operator> <operator>(</operator><name><name>rgba_map</name><index>[<expr><name>G</name></expr>]</index></name><operator>*</operator><literal type="number">8</literal><operator>)</operator><operator>)</operator> <operator>+</operator> <operator>(</operator><name>b</name> <operator>&lt;&lt;</operator> <operator>(</operator><name><name>rgba_map</name><index>[<expr><name>B</name></expr>]</index></name><operator>*</operator><literal type="number">8</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name>dst</name> <operator>+</operator> <literal type="number">3</literal><operator>*</operator><name>x</name> <operator>+</operator> <name>y</name><operator>*</operator><name>dst_linesize</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_WL24</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AV_PIX_FMT_RGBA</name></expr>:</case>

<case>case <expr><name>AV_PIX_FMT_BGRA</name></expr>:</case>

<case>case <expr><name>AV_PIX_FMT_ARGB</name></expr>:</case>

<case>case <expr><name>AV_PIX_FMT_ABGR</name></expr>:</case>

<expr_stmt><expr><name>v</name> <operator>=</operator> <operator>(</operator><name>r</name> <operator>&lt;&lt;</operator> <operator>(</operator><name><name>rgba_map</name><index>[<expr><name>R</name></expr>]</index></name><operator>*</operator><literal type="number">8</literal><operator>)</operator><operator>)</operator> <operator>+</operator> <operator>(</operator><name>g</name> <operator>&lt;&lt;</operator> <operator>(</operator><name><name>rgba_map</name><index>[<expr><name>G</name></expr>]</index></name><operator>*</operator><literal type="number">8</literal><operator>)</operator><operator>)</operator> <operator>+</operator> <operator>(</operator><name>b</name> <operator>&lt;&lt;</operator> <operator>(</operator><name><name>rgba_map</name><index>[<expr><name>B</name></expr>]</index></name><operator>*</operator><literal type="number">8</literal><operator>)</operator><operator>)</operator> <operator>+</operator> <operator>(</operator><literal type="number">255U</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name><name>rgba_map</name><index>[<expr><name>A</name></expr>]</index></name><operator>*</operator><literal type="number">8</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name>dst</name> <operator>+</operator> <literal type="number">4</literal><operator>*</operator><name>x</name> <operator>+</operator> <name>y</name><operator>*</operator><name>dst_linesize</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_WL32</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>rgbtest_fill_picture</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>frame</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>TestSourceContext</name> <modifier>*</modifier></type><name>test</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>, <decl><type ref="prev"/><name>w</name> <init>= <expr><name><name>frame</name><operator>-&gt;</operator><name>width</name></name></expr></init></decl>, <decl><type ref="prev"/><name>h</name> <init>= <expr><name><name>frame</name><operator>-&gt;</operator><name>height</name></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>h</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>w</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>c</name> <init>= <expr><literal type="number">256</literal><operator>*</operator><name>x</name><operator>/</operator><name>w</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>r</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>g</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>b</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><literal type="number">3</literal><operator>*</operator><name>y</name> <operator>&lt;</operator> <name>h</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>r</name> <operator>=</operator> <name>c</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><literal type="number">3</literal><operator>*</operator><name>y</name> <operator>&lt;</operator> <literal type="number">2</literal><operator>*</operator><name>h</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>g</name> <operator>=</operator> <name>c</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name>b</name> <operator>=</operator> <name>c</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>rgbtest_put_pixel</name><argument_list>(<argument><expr><name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>g</name></expr></argument>, <argument><expr><name>b</name></expr></argument>,

<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>outputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>format</name></expr></argument>, <argument><expr><name><name>test</name><operator>-&gt;</operator><name>rgba_map</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>rgbtest_init</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>TestSourceContext</name> <modifier>*</modifier></type><name>test</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>test</name><operator>-&gt;</operator><name>draw_once</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>test</name><operator>-&gt;</operator><name>fill_picture_fn</name></name> <operator>=</operator> <name>rgbtest_fill_picture</name></expr>;</expr_stmt>

<return>return <expr><call><name>init</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>rgbtest_query_formats</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>enum</name> <name>AVPixelFormat</name></name></type> <name><name>pix_fmts</name><index>[]</index></name> <init>= <expr><block>{

<expr><name>AV_PIX_FMT_RGBA</name></expr>, <expr><name>AV_PIX_FMT_ARGB</name></expr>, <expr><name>AV_PIX_FMT_BGRA</name></expr>, <expr><name>AV_PIX_FMT_ABGR</name></expr>,

<expr><name>AV_PIX_FMT_BGR24</name></expr>, <expr><name>AV_PIX_FMT_RGB24</name></expr>,

<expr><name>AV_PIX_FMT_RGB444</name></expr>, <expr><name>AV_PIX_FMT_BGR444</name></expr>,

<expr><name>AV_PIX_FMT_RGB565</name></expr>, <expr><name>AV_PIX_FMT_BGR565</name></expr>,

<expr><name>AV_PIX_FMT_RGB555</name></expr>, <expr><name>AV_PIX_FMT_BGR555</name></expr>,

<expr><name>AV_PIX_FMT_NONE</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFilterFormats</name> <modifier>*</modifier></type><name>fmts_list</name> <init>= <expr><call><name>ff_make_format_list</name><argument_list>(<argument><expr><name>pix_fmts</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>fmts_list</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>ff_set_common_formats</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>fmts_list</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>rgbtest_config_props</name><parameter_list>(<parameter><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>outlink</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>TestSourceContext</name> <modifier>*</modifier></type><name>test</name> <init>= <expr><name><name>outlink</name><operator>-&gt;</operator><name>src</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ff_fill_rgba_map</name><argument_list>(<argument><expr><name><name>test</name><operator>-&gt;</operator><name>rgba_map</name></name></expr></argument>, <argument><expr><name><name>outlink</name><operator>-&gt;</operator><name>format</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>config_props</name><argument_list>(<argument><expr><name>outlink</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVFilterPad</name></type> <name><name>avfilter_vsrc_rgbtestsrc_outputs</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"default"</literal></expr>,

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,

<expr><operator>.</operator><name>request_frame</name> <operator>=</operator> <name>request_frame</name></expr>,

<expr><operator>.</operator><name>config_props</name> <operator>=</operator> <name>rgbtest_config_props</name></expr>,

}</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFilter</name></type> <name>ff_vsrc_rgbtestsrc</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"rgbtestsrc"</literal></expr>,

<expr><operator>.</operator><name>description</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"Generate RGB test pattern."</literal></expr></argument>)</argument_list></call></expr>,

<expr><operator>.</operator><name>priv_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>TestSourceContext</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><operator>.</operator><name>priv_class</name> <operator>=</operator> <operator>&amp;</operator><name>rgbtestsrc_class</name></expr>,

<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>rgbtest_init</name></expr>,

<expr><operator>.</operator><name>uninit</name> <operator>=</operator> <name>uninit</name></expr>,

<expr><operator>.</operator><name>query_formats</name> <operator>=</operator> <name>rgbtest_query_formats</name></expr>,

<expr><operator>.</operator><name>inputs</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>outputs</name> <operator>=</operator> <name>avfilter_vsrc_rgbtestsrc_outputs</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_YUVTESTSRC_FILTER</name></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>yuvtestsrc_options</name></cpp:macro> <cpp:value>options</cpp:value></cpp:define>

<expr_stmt><expr><call><name>AVFILTER_DEFINE_CLASS</name><argument_list>(<argument><expr><name>yuvtestsrc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>yuvtest_fill_picture8</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>frame</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>, <decl><type ref="prev"/><name>w</name> <init>= <expr><name><name>frame</name><operator>-&gt;</operator><name>width</name></name></expr></init></decl>, <decl><type ref="prev"/><name>h</name> <init>= <expr><name><name>frame</name><operator>-&gt;</operator><name>height</name></name> <operator>/</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>AVPixFmtDescriptor</name> <modifier>*</modifier></type><name>desc</name> <init>= <expr><call><name>av_pix_fmt_desc_get</name><argument_list>(<argument><expr><name><name>frame</name><operator>-&gt;</operator><name>format</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>factor</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name><name>desc</name><operator>-&gt;</operator><name>comp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>depth</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>mid</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name><name>desc</name><operator>-&gt;</operator><name>comp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>depth</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>ydst</name> <init>= <expr><name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>udst</name> <init>= <expr><name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>vdst</name> <init>= <expr><name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ylinesize</name> <init>= <expr><name><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ulinesize</name> <init>= <expr><name><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>vlinesize</name> <init>= <expr><name><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>h</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>w</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>c</name> <init>= <expr><name>factor</name> <operator>*</operator> <name>x</name> <operator>/</operator> <name>w</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>ydst</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>udst</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <name>mid</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vdst</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <name>mid</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>ydst</name> <operator>+=</operator> <name>ylinesize</name></expr>;</expr_stmt>

<expr_stmt><expr><name>udst</name> <operator>+=</operator> <name>ulinesize</name></expr>;</expr_stmt>

<expr_stmt><expr><name>vdst</name> <operator>+=</operator> <name>vlinesize</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>h</name> <operator>+=</operator> <name>h</name></expr>;</expr_stmt>

<for>for <control>(<init>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>h</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>w</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>c</name> <init>= <expr><name>factor</name> <operator>*</operator> <name>x</name> <operator>/</operator> <name>w</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>ydst</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <name>mid</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>udst</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vdst</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <name>mid</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>ydst</name> <operator>+=</operator> <name>ylinesize</name></expr>;</expr_stmt>

<expr_stmt><expr><name>udst</name> <operator>+=</operator> <name>ulinesize</name></expr>;</expr_stmt>

<expr_stmt><expr><name>vdst</name> <operator>+=</operator> <name>vlinesize</name></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for <control>(<init>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name><name>frame</name><operator>-&gt;</operator><name>height</name></name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>w</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>c</name> <init>= <expr><name>factor</name> <operator>*</operator> <name>x</name> <operator>/</operator> <name>w</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>ydst</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <name>mid</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>udst</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <name>mid</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vdst</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>ydst</name> <operator>+=</operator> <name>ylinesize</name></expr>;</expr_stmt>

<expr_stmt><expr><name>udst</name> <operator>+=</operator> <name>ulinesize</name></expr>;</expr_stmt>

<expr_stmt><expr><name>vdst</name> <operator>+=</operator> <name>vlinesize</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>yuvtest_fill_picture16</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>frame</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>, <decl><type ref="prev"/><name>w</name> <init>= <expr><name><name>frame</name><operator>-&gt;</operator><name>width</name></name></expr></init></decl>, <decl><type ref="prev"/><name>h</name> <init>= <expr><name><name>frame</name><operator>-&gt;</operator><name>height</name></name> <operator>/</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>AVPixFmtDescriptor</name> <modifier>*</modifier></type><name>desc</name> <init>= <expr><call><name>av_pix_fmt_desc_get</name><argument_list>(<argument><expr><name><name>frame</name><operator>-&gt;</operator><name>format</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>factor</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name><name>desc</name><operator>-&gt;</operator><name>comp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>depth</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>mid</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name><name>desc</name><operator>-&gt;</operator><name>comp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>depth</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>ydst</name> <init>= <expr><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>udst</name> <init>= <expr><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>vdst</name> <init>= <expr><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ylinesize</name> <init>= <expr><name><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ulinesize</name> <init>= <expr><name><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>vlinesize</name> <init>= <expr><name><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>h</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>w</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>c</name> <init>= <expr><name>factor</name> <operator>*</operator> <name>x</name> <operator>/</operator> <name>w</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>ydst</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>udst</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <name>mid</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vdst</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <name>mid</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>ydst</name> <operator>+=</operator> <name>ylinesize</name></expr>;</expr_stmt>

<expr_stmt><expr><name>udst</name> <operator>+=</operator> <name>ulinesize</name></expr>;</expr_stmt>

<expr_stmt><expr><name>vdst</name> <operator>+=</operator> <name>vlinesize</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>h</name> <operator>+=</operator> <name>h</name></expr>;</expr_stmt>

<for>for <control>(<init>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>h</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>w</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>c</name> <init>= <expr><name>factor</name> <operator>*</operator> <name>x</name> <operator>/</operator> <name>w</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>ydst</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <name>mid</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>udst</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vdst</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <name>mid</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>ydst</name> <operator>+=</operator> <name>ylinesize</name></expr>;</expr_stmt>

<expr_stmt><expr><name>udst</name> <operator>+=</operator> <name>ulinesize</name></expr>;</expr_stmt>

<expr_stmt><expr><name>vdst</name> <operator>+=</operator> <name>vlinesize</name></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for <control>(<init>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name><name>frame</name><operator>-&gt;</operator><name>height</name></name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>w</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>c</name> <init>= <expr><name>factor</name> <operator>*</operator> <name>x</name> <operator>/</operator> <name>w</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>ydst</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <name>mid</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>udst</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <name>mid</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vdst</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>ydst</name> <operator>+=</operator> <name>ylinesize</name></expr>;</expr_stmt>

<expr_stmt><expr><name>udst</name> <operator>+=</operator> <name>ulinesize</name></expr>;</expr_stmt>

<expr_stmt><expr><name>vdst</name> <operator>+=</operator> <name>vlinesize</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>yuvtest_init</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>TestSourceContext</name> <modifier>*</modifier></type><name>test</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>test</name><operator>-&gt;</operator><name>draw_once</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><call><name>init</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>yuvtest_query_formats</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>enum</name> <name>AVPixelFormat</name></name></type> <name><name>pix_fmts</name><index>[]</index></name> <init>= <expr><block>{

<expr><name>AV_PIX_FMT_YUV444P</name></expr>, <expr><name>AV_PIX_FMT_YUVJ444P</name></expr>,

<expr><name>AV_PIX_FMT_YUV444P9</name></expr>, <expr><name>AV_PIX_FMT_YUV444P10</name></expr>,

<expr><name>AV_PIX_FMT_YUV444P12</name></expr>, <expr><name>AV_PIX_FMT_YUV444P14</name></expr>,

<expr><name>AV_PIX_FMT_YUV444P16</name></expr>,

<expr><name>AV_PIX_FMT_NONE</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFilterFormats</name> <modifier>*</modifier></type><name>fmts_list</name> <init>= <expr><call><name>ff_make_format_list</name><argument_list>(<argument><expr><name>pix_fmts</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>fmts_list</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>ff_set_common_formats</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>fmts_list</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>yuvtest_config_props</name><parameter_list>(<parameter><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>outlink</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>TestSourceContext</name> <modifier>*</modifier></type><name>test</name> <init>= <expr><name><name>outlink</name><operator>-&gt;</operator><name>src</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>AVPixFmtDescriptor</name> <modifier>*</modifier></type><name>desc</name> <init>= <expr><call><name>av_pix_fmt_desc_get</name><argument_list>(<argument><expr><name><name>outlink</name><operator>-&gt;</operator><name>format</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>test</name><operator>-&gt;</operator><name>fill_picture_fn</name></name> <operator>=</operator> <ternary><condition><expr><name><name>desc</name><operator>-&gt;</operator><name>comp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>depth</name> <operator>&gt;</operator> <literal type="number">8</literal></expr> ?</condition><then> <expr><name>yuvtest_fill_picture16</name></expr> </then><else>: <expr><name>yuvtest_fill_picture8</name></expr></else></ternary></expr>;</expr_stmt>

<return>return <expr><call><name>config_props</name><argument_list>(<argument><expr><name>outlink</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVFilterPad</name></type> <name><name>avfilter_vsrc_yuvtestsrc_outputs</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"default"</literal></expr>,

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,

<expr><operator>.</operator><name>request_frame</name> <operator>=</operator> <name>request_frame</name></expr>,

<expr><operator>.</operator><name>config_props</name> <operator>=</operator> <name>yuvtest_config_props</name></expr>,

}</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFilter</name></type> <name>ff_vsrc_yuvtestsrc</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"yuvtestsrc"</literal></expr>,

<expr><operator>.</operator><name>description</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"Generate YUV test pattern."</literal></expr></argument>)</argument_list></call></expr>,

<expr><operator>.</operator><name>priv_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>TestSourceContext</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><operator>.</operator><name>priv_class</name> <operator>=</operator> <operator>&amp;</operator><name>yuvtestsrc_class</name></expr>,

<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>yuvtest_init</name></expr>,

<expr><operator>.</operator><name>uninit</name> <operator>=</operator> <name>uninit</name></expr>,

<expr><operator>.</operator><name>query_formats</name> <operator>=</operator> <name>yuvtest_query_formats</name></expr>,

<expr><operator>.</operator><name>inputs</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>outputs</name> <operator>=</operator> <name>avfilter_vsrc_yuvtestsrc_outputs</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_PAL75BARS_FILTER</name> <operator>||</operator> <name>CONFIG_PAL100BARS_FILTER</name> <operator>||</operator> <name>CONFIG_SMPTEBARS_FILTER</name> <operator>||</operator> <name>CONFIG_SMPTEHDBARS_FILTER</name></expr></cpp:if>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>rainbow</name><index>[<expr><literal type="number">7</literal></expr>]</index><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><literal type="number">180</literal></expr>, <expr><literal type="number">128</literal></expr>, <expr><literal type="number">128</literal></expr>, <expr><literal type="number">255</literal></expr> }</block></expr>, 

<expr><block>{ <expr><literal type="number">162</literal></expr>, <expr><literal type="number">44</literal></expr>, <expr><literal type="number">142</literal></expr>, <expr><literal type="number">255</literal></expr> }</block></expr>, 

<expr><block>{ <expr><literal type="number">131</literal></expr>, <expr><literal type="number">156</literal></expr>, <expr><literal type="number">44</literal></expr>, <expr><literal type="number">255</literal></expr> }</block></expr>, 

<expr><block>{ <expr><literal type="number">112</literal></expr>, <expr><literal type="number">72</literal></expr>, <expr><literal type="number">58</literal></expr>, <expr><literal type="number">255</literal></expr> }</block></expr>, 

<expr><block>{ <expr><literal type="number">84</literal></expr>, <expr><literal type="number">184</literal></expr>, <expr><literal type="number">198</literal></expr>, <expr><literal type="number">255</literal></expr> }</block></expr>, 

<expr><block>{ <expr><literal type="number">65</literal></expr>, <expr><literal type="number">100</literal></expr>, <expr><literal type="number">212</literal></expr>, <expr><literal type="number">255</literal></expr> }</block></expr>, 

<expr><block>{ <expr><literal type="number">35</literal></expr>, <expr><literal type="number">212</literal></expr>, <expr><literal type="number">114</literal></expr>, <expr><literal type="number">255</literal></expr> }</block></expr>, 

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>rainbow100</name><index>[<expr><literal type="number">7</literal></expr>]</index><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><literal type="number">235</literal></expr>, <expr><literal type="number">128</literal></expr>, <expr><literal type="number">128</literal></expr>, <expr><literal type="number">255</literal></expr> }</block></expr>, 

<expr><block>{ <expr><literal type="number">210</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">146</literal></expr>, <expr><literal type="number">255</literal></expr> }</block></expr>, 

<expr><block>{ <expr><literal type="number">170</literal></expr>, <expr><literal type="number">166</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">255</literal></expr> }</block></expr>, 

<expr><block>{ <expr><literal type="number">145</literal></expr>, <expr><literal type="number">54</literal></expr>, <expr><literal type="number">34</literal></expr>, <expr><literal type="number">255</literal></expr> }</block></expr>, 

<expr><block>{ <expr><literal type="number">106</literal></expr>, <expr><literal type="number">202</literal></expr>, <expr><literal type="number">222</literal></expr>, <expr><literal type="number">255</literal></expr> }</block></expr>, 

<expr><block>{ <expr><literal type="number">81</literal></expr>, <expr><literal type="number">90</literal></expr>, <expr><literal type="number">240</literal></expr>, <expr><literal type="number">255</literal></expr> }</block></expr>, 

<expr><block>{ <expr><literal type="number">41</literal></expr>, <expr><literal type="number">240</literal></expr>, <expr><literal type="number">110</literal></expr>, <expr><literal type="number">255</literal></expr> }</block></expr>, 

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>rainbowhd</name><index>[<expr><literal type="number">7</literal></expr>]</index><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><literal type="number">180</literal></expr>, <expr><literal type="number">128</literal></expr>, <expr><literal type="number">128</literal></expr>, <expr><literal type="number">255</literal></expr> }</block></expr>, 

<expr><block>{ <expr><literal type="number">168</literal></expr>, <expr><literal type="number">44</literal></expr>, <expr><literal type="number">136</literal></expr>, <expr><literal type="number">255</literal></expr> }</block></expr>, 

<expr><block>{ <expr><literal type="number">145</literal></expr>, <expr><literal type="number">147</literal></expr>, <expr><literal type="number">44</literal></expr>, <expr><literal type="number">255</literal></expr> }</block></expr>, 

<expr><block>{ <expr><literal type="number">133</literal></expr>, <expr><literal type="number">63</literal></expr>, <expr><literal type="number">52</literal></expr>, <expr><literal type="number">255</literal></expr> }</block></expr>, 

<expr><block>{ <expr><literal type="number">63</literal></expr>, <expr><literal type="number">193</literal></expr>, <expr><literal type="number">204</literal></expr>, <expr><literal type="number">255</literal></expr> }</block></expr>, 

<expr><block>{ <expr><literal type="number">51</literal></expr>, <expr><literal type="number">109</literal></expr>, <expr><literal type="number">212</literal></expr>, <expr><literal type="number">255</literal></expr> }</block></expr>, 

<expr><block>{ <expr><literal type="number">28</literal></expr>, <expr><literal type="number">212</literal></expr>, <expr><literal type="number">120</literal></expr>, <expr><literal type="number">255</literal></expr> }</block></expr>, 

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>wobnair</name><index>[<expr><literal type="number">7</literal></expr>]</index><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><literal type="number">35</literal></expr>, <expr><literal type="number">212</literal></expr>, <expr><literal type="number">114</literal></expr>, <expr><literal type="number">255</literal></expr> }</block></expr>, 

<expr><block>{ <expr><literal type="number">19</literal></expr>, <expr><literal type="number">128</literal></expr>, <expr><literal type="number">128</literal></expr>, <expr><literal type="number">255</literal></expr> }</block></expr>, 

<expr><block>{ <expr><literal type="number">84</literal></expr>, <expr><literal type="number">184</literal></expr>, <expr><literal type="number">198</literal></expr>, <expr><literal type="number">255</literal></expr> }</block></expr>, 

<expr><block>{ <expr><literal type="number">19</literal></expr>, <expr><literal type="number">128</literal></expr>, <expr><literal type="number">128</literal></expr>, <expr><literal type="number">255</literal></expr> }</block></expr>, 

<expr><block>{ <expr><literal type="number">131</literal></expr>, <expr><literal type="number">156</literal></expr>, <expr><literal type="number">44</literal></expr>, <expr><literal type="number">255</literal></expr> }</block></expr>, 

<expr><block>{ <expr><literal type="number">19</literal></expr>, <expr><literal type="number">128</literal></expr>, <expr><literal type="number">128</literal></expr>, <expr><literal type="number">255</literal></expr> }</block></expr>, 

<expr><block>{ <expr><literal type="number">180</literal></expr>, <expr><literal type="number">128</literal></expr>, <expr><literal type="number">128</literal></expr>, <expr><literal type="number">255</literal></expr> }</block></expr>, 

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>white</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">235</literal></expr>, <expr><literal type="number">128</literal></expr>, <expr><literal type="number">128</literal></expr>, <expr><literal type="number">255</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>neg4ire</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">7</literal></expr>, <expr><literal type="number">128</literal></expr>, <expr><literal type="number">128</literal></expr>, <expr><literal type="number">255</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>pos4ire</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">24</literal></expr>, <expr><literal type="number">128</literal></expr>, <expr><literal type="number">128</literal></expr>, <expr><literal type="number">255</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>i_pixel</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">57</literal></expr>, <expr><literal type="number">156</literal></expr>, <expr><literal type="number">97</literal></expr>, <expr><literal type="number">255</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>q_pixel</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">44</literal></expr>, <expr><literal type="number">171</literal></expr>, <expr><literal type="number">147</literal></expr>, <expr><literal type="number">255</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>gray40</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">104</literal></expr>, <expr><literal type="number">128</literal></expr>, <expr><literal type="number">128</literal></expr>, <expr><literal type="number">255</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>gray15</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">49</literal></expr>, <expr><literal type="number">128</literal></expr>, <expr><literal type="number">128</literal></expr>, <expr><literal type="number">255</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>cyan</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">188</literal></expr>, <expr><literal type="number">154</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">255</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>yellow</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">219</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">138</literal></expr>, <expr><literal type="number">255</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>blue</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">32</literal></expr>, <expr><literal type="number">240</literal></expr>, <expr><literal type="number">118</literal></expr>, <expr><literal type="number">255</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>red</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">63</literal></expr>, <expr><literal type="number">102</literal></expr>, <expr><literal type="number">240</literal></expr>, <expr><literal type="number">255</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>black0</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">16</literal></expr>, <expr><literal type="number">128</literal></expr>, <expr><literal type="number">128</literal></expr>, <expr><literal type="number">255</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>black2</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">20</literal></expr>, <expr><literal type="number">128</literal></expr>, <expr><literal type="number">128</literal></expr>, <expr><literal type="number">255</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>black4</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">25</literal></expr>, <expr><literal type="number">128</literal></expr>, <expr><literal type="number">128</literal></expr>, <expr><literal type="number">255</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>neg2</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">12</literal></expr>, <expr><literal type="number">128</literal></expr>, <expr><literal type="number">128</literal></expr>, <expr><literal type="number">255</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>draw_bar</name><parameter_list>(<parameter><decl><type><name>TestSourceContext</name> <modifier>*</modifier></type><name>test</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name></type> <name><name>color</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>,

<parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>frame</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>AVPixFmtDescriptor</name> <modifier>*</modifier></type><name>desc</name> <init>= <expr><call><name>av_pix_fmt_desc_get</name><argument_list>(<argument><expr><name><name>frame</name><operator>-&gt;</operator><name>format</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p0</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>plane</name></decl>;</decl_stmt>

<expr_stmt><expr><name>x</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name><name>test</name><operator>-&gt;</operator><name>w</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>y</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><name><name>test</name><operator>-&gt;</operator><name>h</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>w</name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><call><name>FFMIN</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><name><name>test</name><operator>-&gt;</operator><name>w</name></name> <operator>-</operator> <name>x</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>h</name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><call><name>FFMIN</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name><name>test</name><operator>-&gt;</operator><name>h</name></name> <operator>-</operator> <name>y</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name>x</name> <operator>+</operator> <name>w</name> <operator>&lt;=</operator> <name><name>test</name><operator>-&gt;</operator><name>w</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name>y</name> <operator>+</operator> <name>h</name> <operator>&lt;=</operator> <name><name>test</name><operator>-&gt;</operator><name>h</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>plane</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>plane</name></expr>]</index></name></expr>;</condition> <incr><expr><name>plane</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>c</name> <init>= <expr><name><name>color</name><index>[<expr><name>plane</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>linesize</name> <init>= <expr><name><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>plane</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>px</name></decl>, <decl><type ref="prev"/><name>py</name></decl>, <decl><type ref="prev"/><name>pw</name></decl>, <decl><type ref="prev"/><name>ph</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>plane</name> <operator>==</operator> <literal type="number">1</literal> <operator>||</operator> <name>plane</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>px</name> <operator>=</operator> <name>x</name> <operator>&gt;&gt;</operator> <name><name>desc</name><operator>-&gt;</operator><name>log2_chroma_w</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>pw</name> <operator>=</operator> <call><name>AV_CEIL_RSHIFT</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><name><name>desc</name><operator>-&gt;</operator><name>log2_chroma_w</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>py</name> <operator>=</operator> <name>y</name> <operator>&gt;&gt;</operator> <name><name>desc</name><operator>-&gt;</operator><name>log2_chroma_h</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>ph</name> <operator>=</operator> <call><name>AV_CEIL_RSHIFT</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name><name>desc</name><operator>-&gt;</operator><name>log2_chroma_h</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>px</name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>

<expr_stmt><expr><name>pw</name> <operator>=</operator> <name>w</name></expr>;</expr_stmt>

<expr_stmt><expr><name>py</name> <operator>=</operator> <name>y</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ph</name> <operator>=</operator> <name>h</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>p0</name> <operator>=</operator> <name>p</name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>plane</name></expr>]</index></name> <operator>+</operator> <name>py</name> <operator>*</operator> <name>linesize</name> <operator>+</operator> <name>px</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>pw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>+=</operator> <name>linesize</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>ph</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>p</name> <operator>+=</operator> <name>linesize</name></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>p0</name></expr></argument>, <argument><expr><name>pw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>smptebars_query_formats</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>enum</name> <name>AVPixelFormat</name></name></type> <name><name>pix_fmts</name><index>[]</index></name> <init>= <expr><block>{

<expr><name>AV_PIX_FMT_YUV420P</name></expr>, <expr><name>AV_PIX_FMT_YUV422P</name></expr>,

<expr><name>AV_PIX_FMT_YUV440P</name></expr>, <expr><name>AV_PIX_FMT_YUV444P</name></expr>,

<expr><name>AV_PIX_FMT_YUV410P</name></expr>, <expr><name>AV_PIX_FMT_YUV411P</name></expr>,

<expr><name>AV_PIX_FMT_NONE</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFilterFormats</name> <modifier>*</modifier></type><name>fmts_list</name> <init>= <expr><call><name>ff_make_format_list</name><argument_list>(<argument><expr><name>pix_fmts</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>fmts_list</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>ff_set_common_formats</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>fmts_list</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVFilterPad</name></type> <name><name>smptebars_outputs</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"default"</literal></expr>,

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,

<expr><operator>.</operator><name>request_frame</name> <operator>=</operator> <name>request_frame</name></expr>,

<expr><operator>.</operator><name>config_props</name> <operator>=</operator> <name>config_props</name></expr>,

}</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_PAL75BARS_FILTER</name></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pal75bars_options</name></cpp:macro> <cpp:value>options</cpp:value></cpp:define>

<expr_stmt><expr><call><name>AVFILTER_DEFINE_CLASS</name><argument_list>(<argument><expr><name>pal75bars</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>pal75bars_fill_picture</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>picref</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>TestSourceContext</name> <modifier>*</modifier></type><name>test</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>r_w</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>x</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>AVPixFmtDescriptor</name> <modifier>*</modifier></type><name>pixdesc</name> <init>= <expr><call><name>av_pix_fmt_desc_get</name><argument_list>(<argument><expr><name><name>picref</name><operator>-&gt;</operator><name>format</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>picref</name><operator>-&gt;</operator><name>color_range</name></name> <operator>=</operator> <name>AVCOL_RANGE_MPEG</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>picref</name><operator>-&gt;</operator><name>colorspace</name></name> <operator>=</operator> <name>AVCOL_SPC_BT470BG</name></expr>;</expr_stmt>

<expr_stmt><expr><name>r_w</name> <operator>=</operator> <call><name>FFALIGN</name><argument_list>(<argument><expr><operator>(</operator><name><name>test</name><operator>-&gt;</operator><name>w</name></name> <operator>+</operator> <literal type="number">7</literal><operator>)</operator> <operator>/</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name><name>pixdesc</name><operator>-&gt;</operator><name>log2_chroma_w</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>draw_bar</name><argument_list>(<argument><expr><name>test</name></expr></argument>, <argument><expr><name>white</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>r_w</name></expr></argument>, <argument><expr><name><name>test</name><operator>-&gt;</operator><name>h</name></name></expr></argument>, <argument><expr><name>picref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>x</name> <operator>+=</operator> <name>r_w</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">7</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>draw_bar</name><argument_list>(<argument><expr><name>test</name></expr></argument>, <argument><expr><name><name>rainbow</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>r_w</name></expr></argument>, <argument><expr><name><name>test</name><operator>-&gt;</operator><name>h</name></name></expr></argument>, <argument><expr><name>picref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>x</name> <operator>+=</operator> <name>r_w</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>draw_bar</name><argument_list>(<argument><expr><name>test</name></expr></argument>, <argument><expr><name>black0</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>r_w</name></expr></argument>, <argument><expr><name><name>test</name><operator>-&gt;</operator><name>h</name></name></expr></argument>, <argument><expr><name>picref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>pal75bars_init</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>TestSourceContext</name> <modifier>*</modifier></type><name>test</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>test</name><operator>-&gt;</operator><name>fill_picture_fn</name></name> <operator>=</operator> <name>pal75bars_fill_picture</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>test</name><operator>-&gt;</operator><name>draw_once</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><call><name>init</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><name>AVFilter</name></type> <name>ff_vsrc_pal75bars</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"pal75bars"</literal></expr>,

<expr><operator>.</operator><name>description</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"Generate PAL 75% color bars."</literal></expr></argument>)</argument_list></call></expr>,

<expr><operator>.</operator><name>priv_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>TestSourceContext</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><operator>.</operator><name>priv_class</name> <operator>=</operator> <operator>&amp;</operator><name>pal75bars_class</name></expr>,

<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>pal75bars_init</name></expr>,

<expr><operator>.</operator><name>uninit</name> <operator>=</operator> <name>uninit</name></expr>,

<expr><operator>.</operator><name>query_formats</name> <operator>=</operator> <name>smptebars_query_formats</name></expr>,

<expr><operator>.</operator><name>inputs</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>outputs</name> <operator>=</operator> <name>smptebars_outputs</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_PAL100BARS_FILTER</name></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pal100bars_options</name></cpp:macro> <cpp:value>options</cpp:value></cpp:define>

<expr_stmt><expr><call><name>AVFILTER_DEFINE_CLASS</name><argument_list>(<argument><expr><name>pal100bars</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>pal100bars_fill_picture</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>picref</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>TestSourceContext</name> <modifier>*</modifier></type><name>test</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>r_w</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>x</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>AVPixFmtDescriptor</name> <modifier>*</modifier></type><name>pixdesc</name> <init>= <expr><call><name>av_pix_fmt_desc_get</name><argument_list>(<argument><expr><name><name>picref</name><operator>-&gt;</operator><name>format</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>picref</name><operator>-&gt;</operator><name>color_range</name></name> <operator>=</operator> <name>AVCOL_RANGE_MPEG</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>picref</name><operator>-&gt;</operator><name>colorspace</name></name> <operator>=</operator> <name>AVCOL_SPC_BT470BG</name></expr>;</expr_stmt>

<expr_stmt><expr><name>r_w</name> <operator>=</operator> <call><name>FFALIGN</name><argument_list>(<argument><expr><operator>(</operator><name><name>test</name><operator>-&gt;</operator><name>w</name></name> <operator>+</operator> <literal type="number">7</literal><operator>)</operator> <operator>/</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name><name>pixdesc</name><operator>-&gt;</operator><name>log2_chroma_w</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">7</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>draw_bar</name><argument_list>(<argument><expr><name>test</name></expr></argument>, <argument><expr><name><name>rainbow100</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>r_w</name></expr></argument>, <argument><expr><name><name>test</name><operator>-&gt;</operator><name>h</name></name></expr></argument>, <argument><expr><name>picref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>x</name> <operator>+=</operator> <name>r_w</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>draw_bar</name><argument_list>(<argument><expr><name>test</name></expr></argument>, <argument><expr><name>black0</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>r_w</name></expr></argument>, <argument><expr><name><name>test</name><operator>-&gt;</operator><name>h</name></name></expr></argument>, <argument><expr><name>picref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>pal100bars_init</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>TestSourceContext</name> <modifier>*</modifier></type><name>test</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>test</name><operator>-&gt;</operator><name>fill_picture_fn</name></name> <operator>=</operator> <name>pal100bars_fill_picture</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>test</name><operator>-&gt;</operator><name>draw_once</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><call><name>init</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><name>AVFilter</name></type> <name>ff_vsrc_pal100bars</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"pal100bars"</literal></expr>,

<expr><operator>.</operator><name>description</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"Generate PAL 100% color bars."</literal></expr></argument>)</argument_list></call></expr>,

<expr><operator>.</operator><name>priv_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>TestSourceContext</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><operator>.</operator><name>priv_class</name> <operator>=</operator> <operator>&amp;</operator><name>pal100bars_class</name></expr>,

<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>pal100bars_init</name></expr>,

<expr><operator>.</operator><name>uninit</name> <operator>=</operator> <name>uninit</name></expr>,

<expr><operator>.</operator><name>query_formats</name> <operator>=</operator> <name>smptebars_query_formats</name></expr>,

<expr><operator>.</operator><name>inputs</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>outputs</name> <operator>=</operator> <name>smptebars_outputs</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_SMPTEBARS_FILTER</name></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>smptebars_options</name></cpp:macro> <cpp:value>options</cpp:value></cpp:define>

<expr_stmt><expr><call><name>AVFILTER_DEFINE_CLASS</name><argument_list>(<argument><expr><name>smptebars</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>smptebars_fill_picture</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>picref</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>TestSourceContext</name> <modifier>*</modifier></type><name>test</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>r_w</name></decl>, <decl><type ref="prev"/><name>r_h</name></decl>, <decl><type ref="prev"/><name>w_h</name></decl>, <decl><type ref="prev"/><name>p_w</name></decl>, <decl><type ref="prev"/><name>p_h</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>tmp</name></decl>, <decl><type ref="prev"/><name>x</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>AVPixFmtDescriptor</name> <modifier>*</modifier></type><name>pixdesc</name> <init>= <expr><call><name>av_pix_fmt_desc_get</name><argument_list>(<argument><expr><name><name>picref</name><operator>-&gt;</operator><name>format</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>picref</name><operator>-&gt;</operator><name>colorspace</name></name> <operator>=</operator> <name>AVCOL_SPC_BT470BG</name></expr>;</expr_stmt>

<expr_stmt><expr><name>r_w</name> <operator>=</operator> <call><name>FFALIGN</name><argument_list>(<argument><expr><operator>(</operator><name><name>test</name><operator>-&gt;</operator><name>w</name></name> <operator>+</operator> <literal type="number">6</literal><operator>)</operator> <operator>/</operator> <literal type="number">7</literal></expr></argument>, <argument><expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name><name>pixdesc</name><operator>-&gt;</operator><name>log2_chroma_w</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>r_h</name> <operator>=</operator> <call><name>FFALIGN</name><argument_list>(<argument><expr><name><name>test</name><operator>-&gt;</operator><name>h</name></name> <operator>*</operator> <literal type="number">2</literal> <operator>/</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name><name>pixdesc</name><operator>-&gt;</operator><name>log2_chroma_h</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>w_h</name> <operator>=</operator> <call><name>FFALIGN</name><argument_list>(<argument><expr><name><name>test</name><operator>-&gt;</operator><name>h</name></name> <operator>*</operator> <literal type="number">3</literal> <operator>/</operator> <literal type="number">4</literal> <operator>-</operator> <name>r_h</name></expr></argument>, <argument><expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name><name>pixdesc</name><operator>-&gt;</operator><name>log2_chroma_h</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p_w</name> <operator>=</operator> <call><name>FFALIGN</name><argument_list>(<argument><expr><name>r_w</name> <operator>*</operator> <literal type="number">5</literal> <operator>/</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name><name>pixdesc</name><operator>-&gt;</operator><name>log2_chroma_w</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p_h</name> <operator>=</operator> <name><name>test</name><operator>-&gt;</operator><name>h</name></name> <operator>-</operator> <name>w_h</name> <operator>-</operator> <name>r_h</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">7</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>draw_bar</name><argument_list>(<argument><expr><name>test</name></expr></argument>, <argument><expr><name><name>rainbow</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>r_w</name></expr></argument>, <argument><expr><name>r_h</name></expr></argument>, <argument><expr><name>picref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>draw_bar</name><argument_list>(<argument><expr><name>test</name></expr></argument>, <argument><expr><name><name>wobnair</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>r_h</name></expr></argument>, <argument><expr><name>r_w</name></expr></argument>, <argument><expr><name>w_h</name></expr></argument>, <argument><expr><name>picref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>x</name> <operator>+=</operator> <name>r_w</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>draw_bar</name><argument_list>(<argument><expr><name>test</name></expr></argument>, <argument><expr><name>i_pixel</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>r_h</name> <operator>+</operator> <name>w_h</name></expr></argument>, <argument><expr><name>p_w</name></expr></argument>, <argument><expr><name>p_h</name></expr></argument>, <argument><expr><name>picref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>x</name> <operator>+=</operator> <name>p_w</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>draw_bar</name><argument_list>(<argument><expr><name>test</name></expr></argument>, <argument><expr><name>white</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>r_h</name> <operator>+</operator> <name>w_h</name></expr></argument>, <argument><expr><name>p_w</name></expr></argument>, <argument><expr><name>p_h</name></expr></argument>, <argument><expr><name>picref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>x</name> <operator>+=</operator> <name>p_w</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>draw_bar</name><argument_list>(<argument><expr><name>test</name></expr></argument>, <argument><expr><name>q_pixel</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>r_h</name> <operator>+</operator> <name>w_h</name></expr></argument>, <argument><expr><name>p_w</name></expr></argument>, <argument><expr><name>p_h</name></expr></argument>, <argument><expr><name>picref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>x</name> <operator>+=</operator> <name>p_w</name></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name>FFALIGN</name><argument_list>(<argument><expr><literal type="number">5</literal> <operator>*</operator> <name>r_w</name> <operator>-</operator> <name>x</name></expr></argument>, <argument><expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name><name>pixdesc</name><operator>-&gt;</operator><name>log2_chroma_w</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>draw_bar</name><argument_list>(<argument><expr><name>test</name></expr></argument>, <argument><expr><name>black0</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>r_h</name> <operator>+</operator> <name>w_h</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>p_h</name></expr></argument>, <argument><expr><name>picref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>x</name> <operator>+=</operator> <name>tmp</name></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name>FFALIGN</name><argument_list>(<argument><expr><name>r_w</name> <operator>/</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name><name>pixdesc</name><operator>-&gt;</operator><name>log2_chroma_w</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>draw_bar</name><argument_list>(<argument><expr><name>test</name></expr></argument>, <argument><expr><name>neg4ire</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>r_h</name> <operator>+</operator> <name>w_h</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>p_h</name></expr></argument>, <argument><expr><name>picref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>x</name> <operator>+=</operator> <name>tmp</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>draw_bar</name><argument_list>(<argument><expr><name>test</name></expr></argument>, <argument><expr><name>black0</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>r_h</name> <operator>+</operator> <name>w_h</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>p_h</name></expr></argument>, <argument><expr><name>picref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>x</name> <operator>+=</operator> <name>tmp</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>draw_bar</name><argument_list>(<argument><expr><name>test</name></expr></argument>, <argument><expr><name>pos4ire</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>r_h</name> <operator>+</operator> <name>w_h</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>p_h</name></expr></argument>, <argument><expr><name>picref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>x</name> <operator>+=</operator> <name>tmp</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>draw_bar</name><argument_list>(<argument><expr><name>test</name></expr></argument>, <argument><expr><name>black0</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>r_h</name> <operator>+</operator> <name>w_h</name></expr></argument>, <argument><expr><name><name>test</name><operator>-&gt;</operator><name>w</name></name> <operator>-</operator> <name>x</name></expr></argument>, <argument><expr><name>p_h</name></expr></argument>, <argument><expr><name>picref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>smptebars_init</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>TestSourceContext</name> <modifier>*</modifier></type><name>test</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>test</name><operator>-&gt;</operator><name>fill_picture_fn</name></name> <operator>=</operator> <name>smptebars_fill_picture</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>test</name><operator>-&gt;</operator><name>draw_once</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><call><name>init</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><name>AVFilter</name></type> <name>ff_vsrc_smptebars</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"smptebars"</literal></expr>,

<expr><operator>.</operator><name>description</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"Generate SMPTE color bars."</literal></expr></argument>)</argument_list></call></expr>,

<expr><operator>.</operator><name>priv_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>TestSourceContext</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><operator>.</operator><name>priv_class</name> <operator>=</operator> <operator>&amp;</operator><name>smptebars_class</name></expr>,

<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>smptebars_init</name></expr>,

<expr><operator>.</operator><name>uninit</name> <operator>=</operator> <name>uninit</name></expr>,

<expr><operator>.</operator><name>query_formats</name> <operator>=</operator> <name>smptebars_query_formats</name></expr>,

<expr><operator>.</operator><name>inputs</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>outputs</name> <operator>=</operator> <name>smptebars_outputs</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_SMPTEHDBARS_FILTER</name></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>smptehdbars_options</name></cpp:macro> <cpp:value>options</cpp:value></cpp:define>

<expr_stmt><expr><call><name>AVFILTER_DEFINE_CLASS</name><argument_list>(<argument><expr><name>smptehdbars</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>smptehdbars_fill_picture</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>picref</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>TestSourceContext</name> <modifier>*</modifier></type><name>test</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>d_w</name></decl>, <decl><type ref="prev"/><name>r_w</name></decl>, <decl><type ref="prev"/><name>r_h</name></decl>, <decl><type ref="prev"/><name>l_w</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>tmp</name></decl>, <decl><type ref="prev"/><name>x</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>y</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>AVPixFmtDescriptor</name> <modifier>*</modifier></type><name>pixdesc</name> <init>= <expr><call><name>av_pix_fmt_desc_get</name><argument_list>(<argument><expr><name><name>picref</name><operator>-&gt;</operator><name>format</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>picref</name><operator>-&gt;</operator><name>colorspace</name></name> <operator>=</operator> <name>AVCOL_SPC_BT709</name></expr>;</expr_stmt>

<expr_stmt><expr><name>d_w</name> <operator>=</operator> <call><name>FFALIGN</name><argument_list>(<argument><expr><name><name>test</name><operator>-&gt;</operator><name>w</name></name> <operator>/</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name><name>pixdesc</name><operator>-&gt;</operator><name>log2_chroma_w</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>r_h</name> <operator>=</operator> <call><name>FFALIGN</name><argument_list>(<argument><expr><name><name>test</name><operator>-&gt;</operator><name>h</name></name> <operator>*</operator> <literal type="number">7</literal> <operator>/</operator> <literal type="number">12</literal></expr></argument>, <argument><expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name><name>pixdesc</name><operator>-&gt;</operator><name>log2_chroma_h</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>draw_bar</name><argument_list>(<argument><expr><name>test</name></expr></argument>, <argument><expr><name>gray40</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d_w</name></expr></argument>, <argument><expr><name>r_h</name></expr></argument>, <argument><expr><name>picref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>x</name> <operator>+=</operator> <name>d_w</name></expr>;</expr_stmt>

<expr_stmt><expr><name>r_w</name> <operator>=</operator> <call><name>FFALIGN</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><operator>(</operator><name><name>test</name><operator>-&gt;</operator><name>w</name></name> <operator>+</operator> <literal type="number">3</literal><operator>)</operator> <operator>/</operator> <literal type="number">4</literal><operator>)</operator> <operator>*</operator> <literal type="number">3</literal><operator>)</operator> <operator>/</operator> <literal type="number">7</literal></expr></argument>, <argument><expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name><name>pixdesc</name><operator>-&gt;</operator><name>log2_chroma_w</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">7</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>draw_bar</name><argument_list>(<argument><expr><name>test</name></expr></argument>, <argument><expr><name><name>rainbowhd</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>r_w</name></expr></argument>, <argument><expr><name>r_h</name></expr></argument>, <argument><expr><name>picref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>x</name> <operator>+=</operator> <name>r_w</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>draw_bar</name><argument_list>(<argument><expr><name>test</name></expr></argument>, <argument><expr><name>gray40</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>test</name><operator>-&gt;</operator><name>w</name></name> <operator>-</operator> <name>x</name></expr></argument>, <argument><expr><name>r_h</name></expr></argument>, <argument><expr><name>picref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>y</name> <operator>=</operator> <name>r_h</name></expr>;</expr_stmt>

<expr_stmt><expr><name>r_h</name> <operator>=</operator> <call><name>FFALIGN</name><argument_list>(<argument><expr><name><name>test</name><operator>-&gt;</operator><name>h</name></name> <operator>/</operator> <literal type="number">12</literal></expr></argument>, <argument><expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name><name>pixdesc</name><operator>-&gt;</operator><name>log2_chroma_h</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>draw_bar</name><argument_list>(<argument><expr><name>test</name></expr></argument>, <argument><expr><name>cyan</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>d_w</name></expr></argument>, <argument><expr><name>r_h</name></expr></argument>, <argument><expr><name>picref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>x</name> <operator>=</operator> <name>d_w</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>draw_bar</name><argument_list>(<argument><expr><name>test</name></expr></argument>, <argument><expr><name>i_pixel</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>r_w</name></expr></argument>, <argument><expr><name>r_h</name></expr></argument>, <argument><expr><name>picref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>x</name> <operator>+=</operator> <name>r_w</name></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp</name> <operator>=</operator> <name>r_w</name> <operator>*</operator> <literal type="number">6</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>draw_bar</name><argument_list>(<argument><expr><name>test</name></expr></argument>, <argument><expr><name><name>rainbowhd</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>r_h</name></expr></argument>, <argument><expr><name>picref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>x</name> <operator>+=</operator> <name>tmp</name></expr>;</expr_stmt>

<expr_stmt><expr><name>l_w</name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>draw_bar</name><argument_list>(<argument><expr><name>test</name></expr></argument>, <argument><expr><name>blue</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name><name>test</name><operator>-&gt;</operator><name>w</name></name> <operator>-</operator> <name>x</name></expr></argument>, <argument><expr><name>r_h</name></expr></argument>, <argument><expr><name>picref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>y</name> <operator>+=</operator> <name>r_h</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>draw_bar</name><argument_list>(<argument><expr><name>test</name></expr></argument>, <argument><expr><name>yellow</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>d_w</name></expr></argument>, <argument><expr><name>r_h</name></expr></argument>, <argument><expr><name>picref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>x</name> <operator>=</operator> <name>d_w</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>draw_bar</name><argument_list>(<argument><expr><name>test</name></expr></argument>, <argument><expr><name>q_pixel</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>r_w</name></expr></argument>, <argument><expr><name>r_h</name></expr></argument>, <argument><expr><name>picref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>x</name> <operator>+=</operator> <name>r_w</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>tmp</name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <name><name>pixdesc</name><operator>-&gt;</operator><name>log2_chroma_w</name></name></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>yramp</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>yramp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>i</name> <operator>*</operator> <literal type="number">255</literal> <operator>/</operator> <name>tmp</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>yramp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">128</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>yramp</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">128</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>yramp</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="number">255</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>draw_bar</name><argument_list>(<argument><expr><name>test</name></expr></argument>, <argument><expr><name>yramp</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name><name>pixdesc</name><operator>-&gt;</operator><name>log2_chroma_w</name></name></expr></argument>, <argument><expr><name>r_h</name></expr></argument>, <argument><expr><name>picref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>x</name> <operator>+=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <name><name>pixdesc</name><operator>-&gt;</operator><name>log2_chroma_w</name></name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>draw_bar</name><argument_list>(<argument><expr><name>test</name></expr></argument>, <argument><expr><name>red</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name><name>test</name><operator>-&gt;</operator><name>w</name></name> <operator>-</operator> <name>x</name></expr></argument>, <argument><expr><name>r_h</name></expr></argument>, <argument><expr><name>picref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>y</name> <operator>+=</operator> <name>r_h</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>draw_bar</name><argument_list>(<argument><expr><name>test</name></expr></argument>, <argument><expr><name>gray15</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>d_w</name></expr></argument>, <argument><expr><name><name>test</name><operator>-&gt;</operator><name>h</name></name> <operator>-</operator> <name>y</name></expr></argument>, <argument><expr><name>picref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>x</name> <operator>=</operator> <name>d_w</name></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name>FFALIGN</name><argument_list>(<argument><expr><name>r_w</name> <operator>*</operator> <literal type="number">3</literal> <operator>/</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name><name>pixdesc</name><operator>-&gt;</operator><name>log2_chroma_w</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>draw_bar</name><argument_list>(<argument><expr><name>test</name></expr></argument>, <argument><expr><name>black0</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><name><name>test</name><operator>-&gt;</operator><name>h</name></name> <operator>-</operator> <name>y</name></expr></argument>, <argument><expr><name>picref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>x</name> <operator>+=</operator> <name>tmp</name></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name>FFALIGN</name><argument_list>(<argument><expr><name>r_w</name> <operator>*</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name><name>pixdesc</name><operator>-&gt;</operator><name>log2_chroma_w</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>draw_bar</name><argument_list>(<argument><expr><name>test</name></expr></argument>, <argument><expr><name>white</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><name><name>test</name><operator>-&gt;</operator><name>h</name></name> <operator>-</operator> <name>y</name></expr></argument>, <argument><expr><name>picref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>x</name> <operator>+=</operator> <name>tmp</name></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name>FFALIGN</name><argument_list>(<argument><expr><name>r_w</name> <operator>*</operator> <literal type="number">5</literal> <operator>/</operator> <literal type="number">6</literal></expr></argument>, <argument><expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name><name>pixdesc</name><operator>-&gt;</operator><name>log2_chroma_w</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>draw_bar</name><argument_list>(<argument><expr><name>test</name></expr></argument>, <argument><expr><name>black0</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><name><name>test</name><operator>-&gt;</operator><name>h</name></name> <operator>-</operator> <name>y</name></expr></argument>, <argument><expr><name>picref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>x</name> <operator>+=</operator> <name>tmp</name></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name>FFALIGN</name><argument_list>(<argument><expr><name>r_w</name> <operator>/</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name><name>pixdesc</name><operator>-&gt;</operator><name>log2_chroma_w</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>draw_bar</name><argument_list>(<argument><expr><name>test</name></expr></argument>, <argument><expr><name>neg2</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><name><name>test</name><operator>-&gt;</operator><name>h</name></name> <operator>-</operator> <name>y</name></expr></argument>, <argument><expr><name>picref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>x</name> <operator>+=</operator> <name>tmp</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>draw_bar</name><argument_list>(<argument><expr><name>test</name></expr></argument>, <argument><expr><name>black0</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><name><name>test</name><operator>-&gt;</operator><name>h</name></name> <operator>-</operator> <name>y</name></expr></argument>, <argument><expr><name>picref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>x</name> <operator>+=</operator> <name>tmp</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>draw_bar</name><argument_list>(<argument><expr><name>test</name></expr></argument>, <argument><expr><name>black2</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><name><name>test</name><operator>-&gt;</operator><name>h</name></name> <operator>-</operator> <name>y</name></expr></argument>, <argument><expr><name>picref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>x</name> <operator>+=</operator> <name>tmp</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>draw_bar</name><argument_list>(<argument><expr><name>test</name></expr></argument>, <argument><expr><name>black0</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><name><name>test</name><operator>-&gt;</operator><name>h</name></name> <operator>-</operator> <name>y</name></expr></argument>, <argument><expr><name>picref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>x</name> <operator>+=</operator> <name>tmp</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>draw_bar</name><argument_list>(<argument><expr><name>test</name></expr></argument>, <argument><expr><name>black4</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><name><name>test</name><operator>-&gt;</operator><name>h</name></name> <operator>-</operator> <name>y</name></expr></argument>, <argument><expr><name>picref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>x</name> <operator>+=</operator> <name>tmp</name></expr>;</expr_stmt>

<expr_stmt><expr><name>r_w</name> <operator>=</operator> <name>l_w</name> <operator>-</operator> <name>x</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>draw_bar</name><argument_list>(<argument><expr><name>test</name></expr></argument>, <argument><expr><name>black0</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>r_w</name></expr></argument>, <argument><expr><name><name>test</name><operator>-&gt;</operator><name>h</name></name> <operator>-</operator> <name>y</name></expr></argument>, <argument><expr><name>picref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>x</name> <operator>+=</operator> <name>r_w</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>draw_bar</name><argument_list>(<argument><expr><name>test</name></expr></argument>, <argument><expr><name>gray15</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name><name>test</name><operator>-&gt;</operator><name>w</name></name> <operator>-</operator> <name>x</name></expr></argument>, <argument><expr><name><name>test</name><operator>-&gt;</operator><name>h</name></name> <operator>-</operator> <name>y</name></expr></argument>, <argument><expr><name>picref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>smptehdbars_init</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>TestSourceContext</name> <modifier>*</modifier></type><name>test</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>test</name><operator>-&gt;</operator><name>fill_picture_fn</name></name> <operator>=</operator> <name>smptehdbars_fill_picture</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>test</name><operator>-&gt;</operator><name>draw_once</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><call><name>init</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><name>AVFilter</name></type> <name>ff_vsrc_smptehdbars</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"smptehdbars"</literal></expr>,

<expr><operator>.</operator><name>description</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"Generate SMPTE HD color bars."</literal></expr></argument>)</argument_list></call></expr>,

<expr><operator>.</operator><name>priv_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>TestSourceContext</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><operator>.</operator><name>priv_class</name> <operator>=</operator> <operator>&amp;</operator><name>smptehdbars_class</name></expr>,

<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>smptehdbars_init</name></expr>,

<expr><operator>.</operator><name>uninit</name> <operator>=</operator> <name>uninit</name></expr>,

<expr><operator>.</operator><name>query_formats</name> <operator>=</operator> <name>smptebars_query_formats</name></expr>,

<expr><operator>.</operator><name>inputs</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>outputs</name> <operator>=</operator> <name>smptebars_outputs</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_ALLYUV_FILTER</name></expr></cpp:if>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVOption</name></type> <name><name>allyuv_options</name><index>[]</index></name> <init>= <expr><block>{

<expr><name>COMMON_OPTIONS_NOSIZE</name>

<block>{ <expr><name>NULL</name></expr> }</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>AVFILTER_DEFINE_CLASS</name><argument_list>(<argument><expr><name>allyuv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>allyuv_fill_picture</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>frame</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>ys</name> <init>= <expr><name><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>us</name> <init>= <expr><name><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>vs</name> <init>= <expr><name><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <literal type="number">4096</literal></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <literal type="number">2048</literal></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>y</name> <operator>*</operator> <name>ys</name> <operator>+</operator> <name>x</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>x</name> <operator>/</operator> <literal type="number">8</literal><operator>)</operator> <operator>%</operator> <literal type="number">256</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>y</name> <operator>*</operator> <name>ys</name> <operator>+</operator> <literal type="number">4095</literal> <operator>-</operator> <name>x</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>x</name> <operator>/</operator> <literal type="number">8</literal><operator>)</operator> <operator>%</operator> <literal type="number">256</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <literal type="number">2048</literal></expr>;</condition> <incr><expr><name>x</name><operator>+=</operator><literal type="number">8</literal></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>vs</name> <operator>*</operator> <name>y</name> <operator>+</operator> <name>x</name> <operator>+</operator> <name>j</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>y</name><operator>%</operator><literal type="number">16</literal> <operator>+</operator> <operator>(</operator><name>j</name> <operator>%</operator> <literal type="number">8</literal><operator>)</operator> <operator>*</operator> <literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>vs</name> <operator>*</operator> <name>y</name> <operator>+</operator> <literal type="number">4095</literal> <operator>-</operator> <name>x</name> <operator>-</operator> <name>j</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><literal type="number">128</literal> <operator>+</operator> <name>y</name><operator>%</operator><literal type="number">16</literal> <operator>+</operator> <operator>(</operator><name>j</name> <operator>%</operator> <literal type="number">8</literal><operator>)</operator> <operator>*</operator> <literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <literal type="number">4096</literal></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>y</name> <operator>*</operator> <name>us</name> <operator>+</operator> <name>x</name></expr>]</index></name> <operator>=</operator> <literal type="number">256</literal> <operator>*</operator> <name>y</name> <operator>/</operator> <literal type="number">4096</literal></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>allyuv_init</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>TestSourceContext</name> <modifier>*</modifier></type><name>test</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>test</name><operator>-&gt;</operator><name>w</name></name> <operator>=</operator> <name><name>test</name><operator>-&gt;</operator><name>h</name></name> <operator>=</operator> <literal type="number">4096</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>test</name><operator>-&gt;</operator><name>draw_once</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>test</name><operator>-&gt;</operator><name>fill_picture_fn</name></name> <operator>=</operator> <name>allyuv_fill_picture</name></expr>;</expr_stmt>

<return>return <expr><call><name>init</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>allyuv_query_formats</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>enum</name> <name>AVPixelFormat</name></name></type> <name><name>pix_fmts</name><index>[]</index></name> <init>= <expr><block>{

<expr><name>AV_PIX_FMT_YUV444P</name></expr>, <expr><name>AV_PIX_FMT_GBRP</name></expr>,

<expr><name>AV_PIX_FMT_NONE</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFilterFormats</name> <modifier>*</modifier></type><name>fmts_list</name> <init>= <expr><call><name>ff_make_format_list</name><argument_list>(<argument><expr><name>pix_fmts</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>fmts_list</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>ff_set_common_formats</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>fmts_list</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVFilterPad</name></type> <name><name>avfilter_vsrc_allyuv_outputs</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"default"</literal></expr>,

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,

<expr><operator>.</operator><name>request_frame</name> <operator>=</operator> <name>request_frame</name></expr>,

<expr><operator>.</operator><name>config_props</name> <operator>=</operator> <name>config_props</name></expr>,

}</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFilter</name></type> <name>ff_vsrc_allyuv</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"allyuv"</literal></expr>,

<expr><operator>.</operator><name>description</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"Generate all yuv colors."</literal></expr></argument>)</argument_list></call></expr>,

<expr><operator>.</operator><name>priv_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>TestSourceContext</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><operator>.</operator><name>priv_class</name> <operator>=</operator> <operator>&amp;</operator><name>allyuv_class</name></expr>,

<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>allyuv_init</name></expr>,

<expr><operator>.</operator><name>uninit</name> <operator>=</operator> <name>uninit</name></expr>,

<expr><operator>.</operator><name>query_formats</name> <operator>=</operator> <name>allyuv_query_formats</name></expr>,

<expr><operator>.</operator><name>inputs</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>outputs</name> <operator>=</operator> <name>avfilter_vsrc_allyuv_outputs</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_ALLRGB_FILTER</name></expr></cpp:if>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVOption</name></type> <name><name>allrgb_options</name><index>[]</index></name> <init>= <expr><block>{

<expr><name>COMMON_OPTIONS_NOSIZE</name>

<block>{ <expr><name>NULL</name></expr> }</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>AVFILTER_DEFINE_CLASS</name><argument_list>(<argument><expr><name>allrgb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>allrgb_fill_picture</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>frame</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>linesize</name> <init>= <expr><name><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>line</name> <init>= <expr><name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <literal type="number">4096</literal></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><name>line</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <literal type="number">4096</literal></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>dst</name><operator>++</operator> <operator>=</operator> <name>x</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>dst</name><operator>++</operator> <operator>=</operator> <name>y</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>dst</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>x</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>y</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>line</name> <operator>+=</operator> <name>linesize</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>allrgb_init</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>TestSourceContext</name> <modifier>*</modifier></type><name>test</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>test</name><operator>-&gt;</operator><name>w</name></name> <operator>=</operator> <name><name>test</name><operator>-&gt;</operator><name>h</name></name> <operator>=</operator> <literal type="number">4096</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>test</name><operator>-&gt;</operator><name>draw_once</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>test</name><operator>-&gt;</operator><name>fill_picture_fn</name></name> <operator>=</operator> <name>allrgb_fill_picture</name></expr>;</expr_stmt>

<return>return <expr><call><name>init</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>allrgb_config_props</name><parameter_list>(<parameter><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>outlink</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>TestSourceContext</name> <modifier>*</modifier></type><name>test</name> <init>= <expr><name><name>outlink</name><operator>-&gt;</operator><name>src</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ff_fill_rgba_map</name><argument_list>(<argument><expr><name><name>test</name><operator>-&gt;</operator><name>rgba_map</name></name></expr></argument>, <argument><expr><name><name>outlink</name><operator>-&gt;</operator><name>format</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>config_props</name><argument_list>(<argument><expr><name>outlink</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>allrgb_query_formats</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>enum</name> <name>AVPixelFormat</name></name></type> <name><name>pix_fmts</name><index>[]</index></name> <init>= <expr><block>{

<expr><name>AV_PIX_FMT_RGB24</name></expr>, <expr><name>AV_PIX_FMT_NONE</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFilterFormats</name> <modifier>*</modifier></type><name>fmts_list</name> <init>= <expr><call><name>ff_make_format_list</name><argument_list>(<argument><expr><name>pix_fmts</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>fmts_list</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>ff_set_common_formats</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>fmts_list</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVFilterPad</name></type> <name><name>avfilter_vsrc_allrgb_outputs</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"default"</literal></expr>,

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,

<expr><operator>.</operator><name>request_frame</name> <operator>=</operator> <name>request_frame</name></expr>,

<expr><operator>.</operator><name>config_props</name> <operator>=</operator> <name>allrgb_config_props</name></expr>,

}</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFilter</name></type> <name>ff_vsrc_allrgb</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"allrgb"</literal></expr>,

<expr><operator>.</operator><name>description</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"Generate all RGB colors."</literal></expr></argument>)</argument_list></call></expr>,

<expr><operator>.</operator><name>priv_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>TestSourceContext</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><operator>.</operator><name>priv_class</name> <operator>=</operator> <operator>&amp;</operator><name>allrgb_class</name></expr>,

<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>allrgb_init</name></expr>,

<expr><operator>.</operator><name>uninit</name> <operator>=</operator> <name>uninit</name></expr>,

<expr><operator>.</operator><name>query_formats</name> <operator>=</operator> <name>allrgb_query_formats</name></expr>,

<expr><operator>.</operator><name>inputs</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>outputs</name> <operator>=</operator> <name>avfilter_vsrc_allrgb_outputs</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

</unit>
