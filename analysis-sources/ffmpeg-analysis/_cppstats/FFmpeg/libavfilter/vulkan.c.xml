<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavfilter\vulkan.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"formats.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vulkan.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"glslang.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FN_CREATING</name><parameter_list>(<parameter><type><name>ctx</name></type></parameter>, <parameter><type><name>type</name></type></parameter>, <parameter><type><name>shortname</name></type></parameter>, <parameter><type><name>array</name></type></parameter>, <parameter><type><name>num</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static av_always_inline type *create_ ##shortname(ctx *dctx) { type **array, *sctx = av_mallocz(sizeof(*sctx)); if (!sctx) return NULL; array = av_realloc_array(dctx-&gt;array, sizeof(*dctx-&gt;array), dctx-&gt;num + 1);if (!array) { av_free(sctx); return NULL; } dctx-&gt;array = array; dctx-&gt;array[dctx-&gt;num++] = sctx; return sctx; }</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>const</specifier> <name>VkComponentMapping</name></type> <name>ff_comp_identity_map</name> <init>= <expr><block>{

<expr><operator>.</operator><name>r</name> <operator>=</operator> <name>VK_COMPONENT_SWIZZLE_IDENTITY</name></expr>,

<expr><operator>.</operator><name>g</name> <operator>=</operator> <name>VK_COMPONENT_SWIZZLE_IDENTITY</name></expr>,

<expr><operator>.</operator><name>b</name> <operator>=</operator> <name>VK_COMPONENT_SWIZZLE_IDENTITY</name></expr>,

<expr><operator>.</operator><name>a</name> <operator>=</operator> <name>VK_COMPONENT_SWIZZLE_IDENTITY</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ff_vk_ret2str</name><parameter_list>(<parameter><decl><type><name>VkResult</name></type> <name>res</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CASE</name><parameter_list>(<parameter><type><name>VAL</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>case VAL: return #VAL</cpp:value></cpp:define>

<switch>switch <condition>(<expr><name>res</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>CASE</name><argument_list>(<argument><expr><name>VK_SUCCESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CASE</name><argument_list>(<argument><expr><name>VK_NOT_READY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CASE</name><argument_list>(<argument><expr><name>VK_TIMEOUT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CASE</name><argument_list>(<argument><expr><name>VK_EVENT_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CASE</name><argument_list>(<argument><expr><name>VK_EVENT_RESET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CASE</name><argument_list>(<argument><expr><name>VK_INCOMPLETE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CASE</name><argument_list>(<argument><expr><name>VK_ERROR_OUT_OF_HOST_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CASE</name><argument_list>(<argument><expr><name>VK_ERROR_OUT_OF_DEVICE_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CASE</name><argument_list>(<argument><expr><name>VK_ERROR_INITIALIZATION_FAILED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CASE</name><argument_list>(<argument><expr><name>VK_ERROR_DEVICE_LOST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CASE</name><argument_list>(<argument><expr><name>VK_ERROR_MEMORY_MAP_FAILED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CASE</name><argument_list>(<argument><expr><name>VK_ERROR_LAYER_NOT_PRESENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CASE</name><argument_list>(<argument><expr><name>VK_ERROR_EXTENSION_NOT_PRESENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CASE</name><argument_list>(<argument><expr><name>VK_ERROR_FEATURE_NOT_PRESENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CASE</name><argument_list>(<argument><expr><name>VK_ERROR_INCOMPATIBLE_DRIVER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CASE</name><argument_list>(<argument><expr><name>VK_ERROR_TOO_MANY_OBJECTS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CASE</name><argument_list>(<argument><expr><name>VK_ERROR_FORMAT_NOT_SUPPORTED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CASE</name><argument_list>(<argument><expr><name>VK_ERROR_FRAGMENTED_POOL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CASE</name><argument_list>(<argument><expr><name>VK_ERROR_SURFACE_LOST_KHR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CASE</name><argument_list>(<argument><expr><name>VK_ERROR_NATIVE_WINDOW_IN_USE_KHR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CASE</name><argument_list>(<argument><expr><name>VK_SUBOPTIMAL_KHR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CASE</name><argument_list>(<argument><expr><name>VK_ERROR_OUT_OF_DATE_KHR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CASE</name><argument_list>(<argument><expr><name>VK_ERROR_INCOMPATIBLE_DISPLAY_KHR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CASE</name><argument_list>(<argument><expr><name>VK_ERROR_VALIDATION_FAILED_EXT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CASE</name><argument_list>(<argument><expr><name>VK_ERROR_INVALID_SHADER_NV</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CASE</name><argument_list>(<argument><expr><name>VK_ERROR_OUT_OF_POOL_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CASE</name><argument_list>(<argument><expr><name>VK_ERROR_INVALID_EXTERNAL_HANDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CASE</name><argument_list>(<argument><expr><name>VK_ERROR_NOT_PERMITTED_EXT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<default>default:</default> <return>return <expr><literal type="string">"Unknown error"</literal></expr>;</return>

</block_content>}</block></switch>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>CASE</name></cpp:undef>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vk_alloc_mem</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>VkMemoryRequirements</name> <modifier>*</modifier></type><name>req</name></decl></parameter>,

<parameter><decl><type><name>VkMemoryPropertyFlagBits</name></type> <name>req_flags</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>alloc_extension</name></decl></parameter>,

<parameter><decl><type><name>VkMemoryPropertyFlagBits</name> <modifier>*</modifier></type><name>mem_flags</name></decl></parameter>, <parameter><decl><type><name>VkDeviceMemory</name> <modifier>*</modifier></type><name>mem</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VkResult</name></type> <name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>index</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VkPhysicalDeviceProperties</name></type> <name>props</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VkPhysicalDeviceMemoryProperties</name></type> <name>mprops</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VulkanFilterContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VkMemoryAllocateInfo</name></type> <name>alloc_info</name> <init>= <expr><block>{

<expr><operator>.</operator><name>sType</name> <operator>=</operator> <name>VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_INFO</name></expr>,

<expr><operator>.</operator><name>pNext</name> <operator>=</operator> <name>alloc_extension</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vkGetPhysicalDeviceProperties</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>hwctx</name><operator>-&gt;</operator><name>phys_dev</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>props</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vkGetPhysicalDeviceMemoryProperties</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>hwctx</name><operator>-&gt;</operator><name>phys_dev</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mprops</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>req_flags</name> <operator>&amp;</operator> <name>VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <call><name>FFALIGN</name><argument_list>(<argument><expr><name><name>req</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><name><name>props</name><operator>.</operator><name>limits</name><operator>.</operator><name>minMemoryMapAlignment</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>alloc_info</name><operator>.</operator><name>allocationSize</name></name> <operator>=</operator> <name><name>req</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>mprops</name><operator>.</operator><name>memoryTypeCount</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>req</name><operator>-&gt;</operator><name>memoryTypeBits</name></name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>i</name><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>mprops</name><operator>.</operator><name>memoryTypes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>propertyFlags</name> <operator>&amp;</operator> <name>req_flags</name><operator>)</operator> <operator>!=</operator> <name>req_flags</name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name>index</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>index</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"No memory type found for flags 0x%x\n"</literal></expr></argument>,

<argument><expr><name>req_flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>alloc_info</name><operator>.</operator><name>memoryTypeIndex</name></name> <operator>=</operator> <name>index</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>vkAllocateMemory</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>hwctx</name><operator>-&gt;</operator><name>act_dev</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>alloc_info</name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>hwctx</name><operator>-&gt;</operator><name>alloc</name></name></expr></argument>, <argument><expr><name>mem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>VK_SUCCESS</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to allocate memory: %s\n"</literal></expr></argument>,

<argument><expr><call><name>ff_vk_ret2str</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>mem_flags</name> <operator>|=</operator> <name><name>mprops</name><operator>.</operator><name>memoryTypes</name><index>[<expr><name>index</name></expr>]</index></name><operator>.</operator><name>propertyFlags</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_vk_create_buf</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>FFVkBuffer</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>,

<parameter><decl><type><name>VkBufferUsageFlags</name></type> <name>usage</name></decl></parameter>, <parameter><decl><type><name>VkMemoryPropertyFlagBits</name></type> <name>flags</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VkResult</name></type> <name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VkMemoryRequirements</name></type> <name>req</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VulkanFilterContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VkBufferCreateInfo</name></type> <name>buf_spawn</name> <init>= <expr><block>{

<expr><operator>.</operator><name>sType</name> <operator>=</operator> <name>VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO</name></expr>,

<expr><operator>.</operator><name>pNext</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>usage</name> <operator>=</operator> <name>usage</name></expr>,

<expr><operator>.</operator><name>sharingMode</name> <operator>=</operator> <name>VK_SHARING_MODE_EXCLUSIVE</name></expr>,

<expr><operator>.</operator><name>size</name> <operator>=</operator> <name>size</name></expr>, 

}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>vkCreateBuffer</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>hwctx</name><operator>-&gt;</operator><name>act_dev</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buf_spawn</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>buf</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>VK_SUCCESS</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to create buffer: %s\n"</literal></expr></argument>,

<argument><expr><call><name>ff_vk_ret2str</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_EXTERNAL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>vkGetBufferMemoryRequirements</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>hwctx</name><operator>-&gt;</operator><name>act_dev</name></name></expr></argument>, <argument><expr><name><name>buf</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>vk_alloc_mem</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>req</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>buf</name><operator>-&gt;</operator><name>flags</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>buf</name><operator>-&gt;</operator><name>mem</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>vkBindBufferMemory</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>hwctx</name><operator>-&gt;</operator><name>act_dev</name></name></expr></argument>, <argument><expr><name><name>buf</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name><name>buf</name><operator>-&gt;</operator><name>mem</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>VK_SUCCESS</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to bind memory to buffer: %s\n"</literal></expr></argument>,

<argument><expr><call><name>ff_vk_ret2str</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_EXTERNAL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_vk_map_buffers</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>FFVkBuffer</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name><name>mem</name><index>[]</index></name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>nb_buffers</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>invalidate</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VkResult</name></type> <name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VulkanFilterContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VkMappedMemoryRange</name> <modifier>*</modifier></type><name>inval_list</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>inval_count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nb_buffers</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>vkMapMemory</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>hwctx</name><operator>-&gt;</operator><name>act_dev</name></name></expr></argument>, <argument><expr><name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>mem</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><name>VK_WHOLE_SIZE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>mem</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>VK_SUCCESS</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to map buffer memory: %s\n"</literal></expr></argument>,

<argument><expr><call><name>ff_vk_ret2str</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_EXTERNAL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>invalidate</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nb_buffers</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>VkMappedMemoryRange</name></type> <name>ival_buf</name> <init>= <expr><block>{

<expr><operator>.</operator><name>sType</name> <operator>=</operator> <name>VK_STRUCTURE_TYPE_MAPPED_MEMORY_RANGE</name></expr>,

<expr><operator>.</operator><name>memory</name> <operator>=</operator> <name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>mem</name></expr>,

<expr><operator>.</operator><name>size</name> <operator>=</operator> <name>VK_WHOLE_SIZE</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>flags</name> <operator>&amp;</operator> <name>VK_MEMORY_PROPERTY_HOST_COHERENT_BIT</name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name>inval_list</name> <operator>=</operator> <call><name>av_fast_realloc</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>scratch</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>scratch_size</name></name></expr></argument>,

<argument><expr><operator>(</operator><operator>++</operator><name>inval_count</name><operator>)</operator><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>inval_list</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>inval_list</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>inval_list</name><index>[<expr><name>inval_count</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>ival_buf</name></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>inval_count</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>vkInvalidateMappedMemoryRanges</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>hwctx</name><operator>-&gt;</operator><name>act_dev</name></name></expr></argument>, <argument><expr><name>inval_count</name></expr></argument>,

<argument><expr><name>inval_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>VK_SUCCESS</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to invalidate memory: %s\n"</literal></expr></argument>,

<argument><expr><call><name>ff_vk_ret2str</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_EXTERNAL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_vk_unmap_buffers</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>FFVkBuffer</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nb_buffers</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>flush</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>err</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VkResult</name></type> <name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VulkanFilterContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VkMappedMemoryRange</name> <modifier>*</modifier></type><name>flush_list</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>flush_count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>flush</name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nb_buffers</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>VkMappedMemoryRange</name></type> <name>flush_buf</name> <init>= <expr><block>{

<expr><operator>.</operator><name>sType</name> <operator>=</operator> <name>VK_STRUCTURE_TYPE_MAPPED_MEMORY_RANGE</name></expr>,

<expr><operator>.</operator><name>memory</name> <operator>=</operator> <name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>mem</name></expr>,

<expr><operator>.</operator><name>size</name> <operator>=</operator> <name>VK_WHOLE_SIZE</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>flags</name> <operator>&amp;</operator> <name>VK_MEMORY_PROPERTY_HOST_COHERENT_BIT</name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name>flush_list</name> <operator>=</operator> <call><name>av_fast_realloc</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>scratch</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>scratch_size</name></name></expr></argument>,

<argument><expr><operator>(</operator><operator>++</operator><name>flush_count</name><operator>)</operator><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>flush_list</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>flush_list</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>flush_list</name><index>[<expr><name>flush_count</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>flush_buf</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>flush_count</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>vkFlushMappedMemoryRanges</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>hwctx</name><operator>-&gt;</operator><name>act_dev</name></name></expr></argument>, <argument><expr><name>flush_count</name></expr></argument>,

<argument><expr><name>flush_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>VK_SUCCESS</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to flush memory: %s\n"</literal></expr></argument>,

<argument><expr><call><name>ff_vk_ret2str</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <name>AVERROR_EXTERNAL</name></expr>;</expr_stmt> 

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nb_buffers</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vkUnmapMemory</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>hwctx</name><operator>-&gt;</operator><name>act_dev</name></name></expr></argument>, <argument><expr><name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>mem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<return>return <expr><name>err</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_vk_free_buf</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>FFVkBuffer</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VulkanFilterContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>buf</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>buf</name><operator>-&gt;</operator><name>buf</name></name> <operator>!=</operator> <name>VK_NULL_HANDLE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vkDestroyBuffer</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>hwctx</name><operator>-&gt;</operator><name>act_dev</name></name></expr></argument>, <argument><expr><name><name>buf</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>hwctx</name><operator>-&gt;</operator><name>alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>buf</name><operator>-&gt;</operator><name>mem</name></name> <operator>!=</operator> <name>VK_NULL_HANDLE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vkFreeMemory</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>hwctx</name><operator>-&gt;</operator><name>act_dev</name></name></expr></argument>, <argument><expr><name><name>buf</name><operator>-&gt;</operator><name>mem</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>hwctx</name><operator>-&gt;</operator><name>alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_vk_add_push_constant</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>VulkanPipeline</name> <modifier>*</modifier></type><name>pl</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>VkShaderStageFlagBits</name></type> <name>stage</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VkPushConstantRange</name> <modifier>*</modifier></type><name>pc</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>pl</name><operator>-&gt;</operator><name>push_consts</name></name> <operator>=</operator> <call><name>av_realloc_array</name><argument_list>(<argument><expr><name><name>pl</name><operator>-&gt;</operator><name>push_consts</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>pl</name><operator>-&gt;</operator><name>push_consts</name></name></expr></argument>)</argument_list></sizeof></expr></argument>,

<argument><expr><name><name>pl</name><operator>-&gt;</operator><name>push_consts_num</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pl</name><operator>-&gt;</operator><name>push_consts</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>pc</name> <operator>=</operator> <operator>&amp;</operator><name><name>pl</name><operator>-&gt;</operator><name>push_consts</name><index>[<expr><name><name>pl</name><operator>-&gt;</operator><name>push_consts_num</name></name><operator>++</operator></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>pc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>pc</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pc</name><operator>-&gt;</operator><name>stageFlags</name></name> <operator>=</operator> <name>stage</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pc</name><operator>-&gt;</operator><name>offset</name></name> <operator>=</operator> <name>offset</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pc</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<macro><name>FN_CREATING</name><argument_list>(<argument>VulkanFilterContext</argument>, <argument>FFVkExecContext</argument>, <argument>exec_ctx</argument>, <argument>exec_ctx</argument>, <argument>exec_ctx_num</argument>)</argument_list></macro>

<function><type><name>int</name></type> <name>ff_vk_create_exec_ctx</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>FFVkExecContext</name> <modifier>*</modifier><modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>queue</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VkResult</name></type> <name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>FFVkExecContext</name> <modifier>*</modifier></type><name>e</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VulkanFilterContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VkCommandPoolCreateInfo</name></type> <name>cqueue_create</name> <init>= <expr><block>{

<expr><operator>.</operator><name>sType</name> <operator>=</operator> <name>VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO</name></expr>,

<expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT</name></expr>,

<expr><operator>.</operator><name>queueFamilyIndex</name> <operator>=</operator> <name>queue</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VkCommandBufferAllocateInfo</name></type> <name>cbuf_create</name> <init>= <expr><block>{

<expr><operator>.</operator><name>sType</name> <operator>=</operator> <name>VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO</name></expr>,

<expr><operator>.</operator><name>level</name> <operator>=</operator> <name>VK_COMMAND_BUFFER_LEVEL_PRIMARY</name></expr>,

<expr><operator>.</operator><name>commandBufferCount</name> <operator>=</operator> <literal type="number">1</literal></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VkFenceCreateInfo</name></type> <name>fence_spawn</name> <init>= <expr><block>{ <expr><name>VK_STRUCTURE_TYPE_FENCE_CREATE_INFO</name></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>e</name> <operator>=</operator> <call><name>create_exec_ctx</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>e</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>vkCreateCommandPool</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>hwctx</name><operator>-&gt;</operator><name>act_dev</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cqueue_create</name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>hwctx</name><operator>-&gt;</operator><name>alloc</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>e</name><operator>-&gt;</operator><name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>VK_SUCCESS</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Command pool creation failure: %s\n"</literal></expr></argument>,

<argument><expr><call><name>ff_vk_ret2str</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>cbuf_create</name><operator>.</operator><name>commandPool</name></name> <operator>=</operator> <name><name>e</name><operator>-&gt;</operator><name>pool</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>vkAllocateCommandBuffers</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>hwctx</name><operator>-&gt;</operator><name>act_dev</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cbuf_create</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>e</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>VK_SUCCESS</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Command buffer alloc failure: %s\n"</literal></expr></argument>,

<argument><expr><call><name>ff_vk_ret2str</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>vkCreateFence</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>hwctx</name><operator>-&gt;</operator><name>act_dev</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fence_spawn</name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>hwctx</name><operator>-&gt;</operator><name>alloc</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>e</name><operator>-&gt;</operator><name>fence</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>VK_SUCCESS</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to create frame fence: %s\n"</literal></expr></argument>,

<argument><expr><call><name>ff_vk_ret2str</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>vkGetDeviceQueue</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>hwctx</name><operator>-&gt;</operator><name>act_dev</name></name></expr></argument>, <argument><expr><name>queue</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>e</name><operator>-&gt;</operator><name>queue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>ctx</name> <operator>=</operator> <name>e</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_vk_start_exec_recording</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>FFVkExecContext</name> <modifier>*</modifier></type><name>e</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VkResult</name></type> <name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VkCommandBufferBeginInfo</name></type> <name>cmd_start</name> <init>= <expr><block>{

<expr><operator>.</operator><name>sType</name> <operator>=</operator> <name>VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO</name></expr>,

<expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>sem_wait_cnt</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>sem_sig_cnt</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>vkBeginCommandBuffer</name><argument_list>(<argument><expr><name><name>e</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cmd_start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>VK_SUCCESS</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to start command recoding: %s\n"</literal></expr></argument>,

<argument><expr><call><name>ff_vk_ret2str</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_EXTERNAL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_vk_add_exec_dep</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>FFVkExecContext</name> <modifier>*</modifier></type><name>e</name></decl></parameter>,

<parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>frame</name></decl></parameter>, <parameter><decl><type><name>VkPipelineStageFlagBits</name></type> <name>in_wait_dst_flag</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVVkFrame</name> <modifier>*</modifier></type><name>f</name> <init>= <expr><operator>(</operator><name>AVVkFrame</name> <operator>*</operator><operator>)</operator><name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVHWFramesContext</name> <modifier>*</modifier></type><name>fc</name> <init>= <expr><operator>(</operator><name>AVHWFramesContext</name> <operator>*</operator><operator>)</operator><name><name>frame</name><operator>-&gt;</operator><name>hw_frames_ctx</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>planes</name> <init>= <expr><call><name>av_pix_fmt_count_planes</name><argument_list>(<argument><expr><name><name>fc</name><operator>-&gt;</operator><name>sw_format</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>planes</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>sem_wait</name></name> <operator>=</operator> <call><name>av_fast_realloc</name><argument_list>(<argument><expr><name><name>e</name><operator>-&gt;</operator><name>sem_wait</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>e</name><operator>-&gt;</operator><name>sem_wait_alloc</name></name></expr></argument>,

<argument><expr><operator>(</operator><name><name>e</name><operator>-&gt;</operator><name>sem_wait_cnt</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>e</name><operator>-&gt;</operator><name>sem_wait</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>e</name><operator>-&gt;</operator><name>sem_wait</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>sem_wait_dst</name></name> <operator>=</operator> <call><name>av_fast_realloc</name><argument_list>(<argument><expr><name><name>e</name><operator>-&gt;</operator><name>sem_wait_dst</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>e</name><operator>-&gt;</operator><name>sem_wait_dst_alloc</name></name></expr></argument>,

<argument><expr><operator>(</operator><name><name>e</name><operator>-&gt;</operator><name>sem_wait_cnt</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>e</name><operator>-&gt;</operator><name>sem_wait_dst</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>e</name><operator>-&gt;</operator><name>sem_wait_dst</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>sem_sig</name></name> <operator>=</operator> <call><name>av_fast_realloc</name><argument_list>(<argument><expr><name><name>e</name><operator>-&gt;</operator><name>sem_sig</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>e</name><operator>-&gt;</operator><name>sem_sig_alloc</name></name></expr></argument>,

<argument><expr><operator>(</operator><name><name>e</name><operator>-&gt;</operator><name>sem_sig_cnt</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>e</name><operator>-&gt;</operator><name>sem_sig</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>e</name><operator>-&gt;</operator><name>sem_sig</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>sem_wait</name><index>[<expr><name><name>e</name><operator>-&gt;</operator><name>sem_wait_cnt</name></name></expr>]</index></name> <operator>=</operator> <name><name>f</name><operator>-&gt;</operator><name>sem</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>sem_wait_dst</name><index>[<expr><name><name>e</name><operator>-&gt;</operator><name>sem_wait_cnt</name></name></expr>]</index></name> <operator>=</operator> <name>in_wait_dst_flag</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>sem_wait_cnt</name></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>sem_sig</name><index>[<expr><name><name>e</name><operator>-&gt;</operator><name>sem_sig_cnt</name></name></expr>]</index></name> <operator>=</operator> <name><name>f</name><operator>-&gt;</operator><name>sem</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>sem_sig_cnt</name></name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_vk_submit_exec_queue</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>FFVkExecContext</name> <modifier>*</modifier></type><name>e</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VkResult</name></type> <name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VulkanFilterContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VkSubmitInfo</name></type> <name>s_info</name> <init>= <expr><block>{

<expr><operator>.</operator><name>sType</name> <operator>=</operator> <name>VK_STRUCTURE_TYPE_SUBMIT_INFO</name></expr>,

<expr><operator>.</operator><name>commandBufferCount</name> <operator>=</operator> <literal type="number">1</literal></expr>,

<expr><operator>.</operator><name>pCommandBuffers</name> <operator>=</operator> <operator>&amp;</operator><name><name>e</name><operator>-&gt;</operator><name>buf</name></name></expr>,

<expr><operator>.</operator><name>pWaitSemaphores</name> <operator>=</operator> <name><name>e</name><operator>-&gt;</operator><name>sem_wait</name></name></expr>,

<expr><operator>.</operator><name>pWaitDstStageMask</name> <operator>=</operator> <name><name>e</name><operator>-&gt;</operator><name>sem_wait_dst</name></name></expr>,

<expr><operator>.</operator><name>waitSemaphoreCount</name> <operator>=</operator> <name><name>e</name><operator>-&gt;</operator><name>sem_wait_cnt</name></name></expr>,

<expr><operator>.</operator><name>pSignalSemaphores</name> <operator>=</operator> <name><name>e</name><operator>-&gt;</operator><name>sem_sig</name></name></expr>,

<expr><operator>.</operator><name>signalSemaphoreCount</name> <operator>=</operator> <name><name>e</name><operator>-&gt;</operator><name>sem_sig_cnt</name></name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vkEndCommandBuffer</name><argument_list>(<argument><expr><name><name>e</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>vkQueueSubmit</name><argument_list>(<argument><expr><name><name>e</name><operator>-&gt;</operator><name>queue</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>s_info</name></expr></argument>, <argument><expr><name><name>e</name><operator>-&gt;</operator><name>fence</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>VK_SUCCESS</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Unable to submit command buffer: %s\n"</literal></expr></argument>,

<argument><expr><call><name>ff_vk_ret2str</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_EXTERNAL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>vkWaitForFences</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>hwctx</name><operator>-&gt;</operator><name>act_dev</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>e</name><operator>-&gt;</operator><name>fence</name></name></expr></argument>, <argument><expr><name>VK_TRUE</name></expr></argument>, <argument><expr><name>UINT64_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vkResetFences</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>hwctx</name><operator>-&gt;</operator><name>act_dev</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>e</name><operator>-&gt;</operator><name>fence</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_vk_filter_query_formats</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>enum</name> <name>AVPixelFormat</name></name></type> <name><name>pixel_formats</name><index>[]</index></name> <init>= <expr><block>{

<expr><name>AV_PIX_FMT_VULKAN</name></expr>, <expr><name>AV_PIX_FMT_NONE</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFilterFormats</name> <modifier>*</modifier></type><name>pix_fmts</name> <init>= <expr><call><name>ff_make_format_list</name><argument_list>(<argument><expr><name>pixel_formats</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>pix_fmts</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>ff_set_common_formats</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>pix_fmts</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vulkan_filter_set_device</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>,

<parameter><decl><type><name>AVBufferRef</name> <modifier>*</modifier></type><name>device</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VulkanFilterContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_buffer_unref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>device_ref</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>device_ref</name></name> <operator>=</operator> <call><name>av_buffer_ref</name><argument_list>(<argument><expr><name>device</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>device_ref</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>device</name></name> <operator>=</operator> <operator>(</operator><name>AVHWDeviceContext</name><operator>*</operator><operator>)</operator><name><name>s</name><operator>-&gt;</operator><name>device_ref</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>hwctx</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>device</name><operator>-&gt;</operator><name>hwctx</name></name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vulkan_filter_set_frames</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>,

<parameter><decl><type><name>AVBufferRef</name> <modifier>*</modifier></type><name>frames</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VulkanFilterContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_buffer_unref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>frames_ref</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>frames_ref</name></name> <operator>=</operator> <call><name>av_buffer_ref</name><argument_list>(<argument><expr><name>frames</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>frames_ref</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_vk_filter_config_input</name><parameter_list>(<parameter><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>inlink</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>avctx</name> <init>= <expr><name><name>inlink</name><operator>-&gt;</operator><name>dst</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VulkanFilterContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVHWFramesContext</name> <modifier>*</modifier></type><name>input_frames</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>inlink</name><operator>-&gt;</operator><name>hw_frames_ctx</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Vulkan filtering requires a "</literal>

<literal type="string">"hardware frames context on the input.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>inputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <name>inlink</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>input_frames</name> <operator>=</operator> <operator>(</operator><name>AVHWFramesContext</name><operator>*</operator><operator>)</operator><name><name>inlink</name><operator>-&gt;</operator><name>hw_frames_ctx</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>input_frames</name><operator>-&gt;</operator><name>format</name></name> <operator>!=</operator> <name>AV_PIX_FMT_VULKAN</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>vulkan_filter_set_device</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name><name>input_frames</name><operator>-&gt;</operator><name>device_ref</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>vulkan_filter_set_frames</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>hw_frames_ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>input_format</name></name> <operator>=</operator> <name><name>input_frames</name><operator>-&gt;</operator><name>sw_format</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>output_format</name></name> <operator>==</operator> <name>AV_PIX_FMT_NONE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>output_format</name></name> <operator>=</operator> <name><name>input_frames</name><operator>-&gt;</operator><name>sw_format</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>output_width</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>output_width</name></name> <operator>=</operator> <name><name>inlink</name><operator>-&gt;</operator><name>w</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>output_height</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>output_height</name></name> <operator>=</operator> <name><name>inlink</name><operator>-&gt;</operator><name>h</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_vk_filter_config_output_inplace</name><parameter_list>(<parameter><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>outlink</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>avctx</name> <init>= <expr><name><name>outlink</name><operator>-&gt;</operator><name>src</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VulkanFilterContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_buffer_unref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>outlink</name><operator>-&gt;</operator><name>hw_frames_ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>device_ref</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>avctx</name><operator>-&gt;</operator><name>hw_device_ctx</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Vulkan filtering requires a "</literal>

<literal type="string">"Vulkan device.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>vulkan_filter_set_device</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>hw_device_ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>outlink</name><operator>-&gt;</operator><name>hw_frames_ctx</name></name> <operator>=</operator> <call><name>av_buffer_ref</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>frames_ref</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>outlink</name><operator>-&gt;</operator><name>hw_frames_ctx</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>outlink</name><operator>-&gt;</operator><name>w</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>output_width</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>outlink</name><operator>-&gt;</operator><name>h</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>output_height</name></name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_vk_filter_config_output</name><parameter_list>(<parameter><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>outlink</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>avctx</name> <init>= <expr><name><name>outlink</name><operator>-&gt;</operator><name>src</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VulkanFilterContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVBufferRef</name> <modifier>*</modifier></type><name>output_frames_ref</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVHWFramesContext</name> <modifier>*</modifier></type><name>output_frames</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_buffer_unref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>outlink</name><operator>-&gt;</operator><name>hw_frames_ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>device_ref</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>avctx</name><operator>-&gt;</operator><name>hw_device_ctx</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Vulkan filtering requires a "</literal>

<literal type="string">"Vulkan device.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>vulkan_filter_set_device</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>hw_device_ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>output_frames_ref</name> <operator>=</operator> <call><name>av_hwframe_ctx_alloc</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>device_ref</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>output_frames_ref</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>output_frames</name> <operator>=</operator> <operator>(</operator><name>AVHWFramesContext</name><operator>*</operator><operator>)</operator><name><name>output_frames_ref</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>output_frames</name><operator>-&gt;</operator><name>format</name></name> <operator>=</operator> <name>AV_PIX_FMT_VULKAN</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>output_frames</name><operator>-&gt;</operator><name>sw_format</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>output_format</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>output_frames</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>output_width</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>output_frames</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>output_height</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>av_hwframe_ctx_init</name><argument_list>(<argument><expr><name>output_frames_ref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to initialise output "</literal>

<literal type="string">"frames: %d.\n"</literal></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>outlink</name><operator>-&gt;</operator><name>hw_frames_ctx</name></name> <operator>=</operator> <name>output_frames_ref</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>outlink</name><operator>-&gt;</operator><name>w</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>output_width</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>outlink</name><operator>-&gt;</operator><name>h</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>output_height</name></name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<label><name>fail</name>:</label>

<expr_stmt><expr><call><name>av_buffer_unref</name><argument_list>(<argument><expr><operator>&amp;</operator><name>output_frames_ref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>err</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_vk_filter_init</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VulkanFilterContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>output_format</name></name> <operator>=</operator> <name>AV_PIX_FMT_NONE</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>glslang_init</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_EXTERNAL</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<macro><name>FN_CREATING</name><argument_list>(<argument>VulkanFilterContext</argument>, <argument>VkSampler</argument>, <argument>sampler</argument>, <argument>samplers</argument>, <argument>samplers_num</argument>)</argument_list></macro>

<function><type><name>VkSampler</name> <modifier>*</modifier></type><name>ff_vk_init_sampler</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>unnorm_coords</name></decl></parameter>,

<parameter><decl><type><name>VkFilter</name></type> <name>filt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VkResult</name></type> <name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VulkanFilterContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VkSamplerCreateInfo</name></type> <name>sampler_info</name> <init>= <expr><block>{

<expr><operator>.</operator><name>sType</name> <operator>=</operator> <name>VK_STRUCTURE_TYPE_SAMPLER_CREATE_INFO</name></expr>,

<expr><operator>.</operator><name>magFilter</name> <operator>=</operator> <name>filt</name></expr>,

<expr><operator>.</operator><name>minFilter</name> <operator>=</operator> <name><name>sampler_info</name><operator>.</operator><name>magFilter</name></name></expr>,

<expr><operator>.</operator><name>mipmapMode</name> <operator>=</operator> <name>unnorm_coords</name> <operator>?</operator> <name>VK_SAMPLER_MIPMAP_MODE_NEAREST</name> <operator>:</operator>

<name>VK_SAMPLER_MIPMAP_MODE_LINEAR</name></expr>,

<expr><operator>.</operator><name>addressModeU</name> <operator>=</operator> <name>VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_EDGE</name></expr>,

<expr><operator>.</operator><name>addressModeV</name> <operator>=</operator> <name><name>sampler_info</name><operator>.</operator><name>addressModeU</name></name></expr>,

<expr><operator>.</operator><name>addressModeW</name> <operator>=</operator> <name><name>sampler_info</name><operator>.</operator><name>addressModeU</name></name></expr>,

<expr><operator>.</operator><name>anisotropyEnable</name> <operator>=</operator> <name>VK_FALSE</name></expr>,

<expr><operator>.</operator><name>compareOp</name> <operator>=</operator> <name>VK_COMPARE_OP_NEVER</name></expr>,

<expr><operator>.</operator><name>borderColor</name> <operator>=</operator> <name>VK_BORDER_COLOR_FLOAT_TRANSPARENT_BLACK</name></expr>,

<expr><operator>.</operator><name>unnormalizedCoordinates</name> <operator>=</operator> <name>unnorm_coords</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VkSampler</name> <modifier>*</modifier></type><name>sampler</name> <init>= <expr><call><name>create_sampler</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>sampler</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>vkCreateSampler</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>hwctx</name><operator>-&gt;</operator><name>act_dev</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sampler_info</name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>hwctx</name><operator>-&gt;</operator><name>alloc</name></name></expr></argument>, <argument><expr><name>sampler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>VK_SUCCESS</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Unable to init sampler: %s\n"</literal></expr></argument>,

<argument><expr><call><name>ff_vk_ret2str</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>sampler</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_vk_mt_is_np_rgb</name><parameter_list>(<parameter><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>pix_fmt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>pix_fmt</name> <operator>==</operator> <name>AV_PIX_FMT_ABGR</name> <operator>||</operator> <name>pix_fmt</name> <operator>==</operator> <name>AV_PIX_FMT_BGRA</name> <operator>||</operator>

<name>pix_fmt</name> <operator>==</operator> <name>AV_PIX_FMT_RGBA</name> <operator>||</operator> <name>pix_fmt</name> <operator>==</operator> <name>AV_PIX_FMT_RGB24</name> <operator>||</operator>

<name>pix_fmt</name> <operator>==</operator> <name>AV_PIX_FMT_BGR24</name> <operator>||</operator> <name>pix_fmt</name> <operator>==</operator> <name>AV_PIX_FMT_RGB48</name> <operator>||</operator>

<name>pix_fmt</name> <operator>==</operator> <name>AV_PIX_FMT_RGBA64</name> <operator>||</operator> <name>pix_fmt</name> <operator>==</operator> <name>AV_PIX_FMT_RGB565</name> <operator>||</operator>

<name>pix_fmt</name> <operator>==</operator> <name>AV_PIX_FMT_BGR565</name> <operator>||</operator> <name>pix_fmt</name> <operator>==</operator> <name>AV_PIX_FMT_BGR0</name> <operator>||</operator>

<name>pix_fmt</name> <operator>==</operator> <name>AV_PIX_FMT_0BGR</name> <operator>||</operator> <name>pix_fmt</name> <operator>==</operator> <name>AV_PIX_FMT_RGB0</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ff_vk_shader_rep_fmt</name><parameter_list>(<parameter><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>pixfmt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>AVPixFmtDescriptor</name> <modifier>*</modifier></type><name>desc</name> <init>= <expr><call><name>av_pix_fmt_desc_get</name><argument_list>(<argument><expr><name>pixfmt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>high</name> <init>= <expr><name><name>desc</name><operator>-&gt;</operator><name>comp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>depth</name> <operator>&gt;</operator> <literal type="number">8</literal></expr></init></decl>;</decl_stmt>

<return>return <expr><ternary><condition><expr><name>high</name></expr> ?</condition><then> <expr><literal type="string">"rgba16f"</literal></expr> </then><else>: <expr><literal type="string">"rgba8"</literal></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_vk_create_imageview</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>VkImageView</name> <modifier>*</modifier></type><name>v</name></decl></parameter>, <parameter><decl><type><name>VkImage</name></type> <name>img</name></decl></parameter>,

<parameter><decl><type><name>VkFormat</name></type> <name>fmt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>VkComponentMapping</name></type> <name>map</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VulkanFilterContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VkImageViewCreateInfo</name></type> <name>imgview_spawn</name> <init>= <expr><block>{

<expr><operator>.</operator><name>sType</name> <operator>=</operator> <name>VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO</name></expr>,

<expr><operator>.</operator><name>pNext</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>image</name> <operator>=</operator> <name>img</name></expr>,

<expr><operator>.</operator><name>viewType</name> <operator>=</operator> <name>VK_IMAGE_VIEW_TYPE_2D</name></expr>,

<expr><operator>.</operator><name>format</name> <operator>=</operator> <name>fmt</name></expr>,

<expr><operator>.</operator><name>components</name> <operator>=</operator> <name>map</name></expr>,

<expr><operator>.</operator><name>subresourceRange</name> <operator>=</operator> <block>{

<expr><operator>.</operator><name>aspectMask</name> <operator>=</operator> <name>VK_IMAGE_ASPECT_COLOR_BIT</name></expr>,

<expr><operator>.</operator><name>baseMipLevel</name> <operator>=</operator> <literal type="number">0</literal></expr>,

<expr><operator>.</operator><name>levelCount</name> <operator>=</operator> <literal type="number">1</literal></expr>,

<expr><operator>.</operator><name>baseArrayLayer</name> <operator>=</operator> <literal type="number">0</literal></expr>,

<expr><operator>.</operator><name>layerCount</name> <operator>=</operator> <literal type="number">1</literal></expr>,

}</block></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VkResult</name></type> <name>ret</name> <init>= <expr><call><name>vkCreateImageView</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>hwctx</name><operator>-&gt;</operator><name>act_dev</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>imgview_spawn</name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>hwctx</name><operator>-&gt;</operator><name>alloc</name></name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>VK_SUCCESS</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to create imageview: %s\n"</literal></expr></argument>,

<argument><expr><call><name>ff_vk_ret2str</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_EXTERNAL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_vk_destroy_imageview</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>VkImageView</name> <modifier>*</modifier></type><name>v</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VulkanFilterContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>v</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>v</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>vkDestroyImageView</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>hwctx</name><operator>-&gt;</operator><name>act_dev</name></name></expr></argument>, <argument><expr><operator>*</operator><name>v</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>hwctx</name><operator>-&gt;</operator><name>alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>v</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<macro><name>FN_CREATING</name><argument_list>(<argument>VulkanPipeline</argument>, <argument>SPIRVShader</argument>, <argument>shader</argument>, <argument>shaders</argument>, <argument>shaders_num</argument>)</argument_list></macro>

<function><type><name>SPIRVShader</name> <modifier>*</modifier></type><name>ff_vk_init_shader</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>VulkanPipeline</name> <modifier>*</modifier></type><name>pl</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>VkShaderStageFlags</name></type> <name>stage</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>SPIRVShader</name> <modifier>*</modifier></type><name>shd</name> <init>= <expr><call><name>create_shader</name><argument_list>(<argument><expr><name>pl</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>shd</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_bprint_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>shd</name><operator>-&gt;</operator><name>src</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>AV_BPRINT_SIZE_UNLIMITED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>shd</name><operator>-&gt;</operator><name>shader</name><operator>.</operator><name>sType</name></name> <operator>=</operator> <name>VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_CREATE_INFO</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>shd</name><operator>-&gt;</operator><name>shader</name><operator>.</operator><name>stage</name></name> <operator>=</operator> <name>stage</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>shd</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <name>name</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GLSLF</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>#</operator><name>version</name> <operator>%</operator><name>i</name></expr></argument> ,<argument><expr><literal type="number">460</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<macro><name>GLSLC</name><argument_list>(<argument><literal type="number">0</literal></argument>, <argument>#define IS_WITHIN(v1, v2) ((v1.x &lt; v2.x) &amp;&amp; (v1.y &lt; v2.y))</argument> )</argument_list></macro><empty_stmt>;</empty_stmt>

<expr_stmt><expr><call><name>GLSLC</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>shd</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_vk_set_compute_shader_sizes</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>SPIRVShader</name> <modifier>*</modifier></type><name>shd</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name><name>local_size</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>shd</name><operator>-&gt;</operator><name>local_size</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>local_size</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>shd</name><operator>-&gt;</operator><name>local_size</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>local_size</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>shd</name><operator>-&gt;</operator><name>local_size</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>local_size</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_bprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>shd</name><operator>-&gt;</operator><name>src</name></name></expr></argument>, <argument><expr><literal type="string">"layout (local_size_x = %i, "</literal>

<literal type="string">"local_size_y = %i, local_size_z = %i) in;\n\n"</literal></expr></argument>,

<argument><expr><name><name>shd</name><operator>-&gt;</operator><name>local_size</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>shd</name><operator>-&gt;</operator><name>local_size</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>shd</name><operator>-&gt;</operator><name>local_size</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>print_shader</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>SPIRVShader</name> <modifier>*</modifier></type><name>shd</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>prio</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>line</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name><name>shd</name><operator>-&gt;</operator><name>src</name><operator>.</operator><name>str</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>start</name> <init>= <expr><name>p</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVBPrint</name></type> <name>buf</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_bprint_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>AV_BPRINT_SIZE_UNLIMITED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_bprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><literal type="string">"%i\t"</literal></expr></argument>, <argument><expr><operator>++</operator><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_bprint_append_data</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <name>start</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>start</name> <operator>=</operator> <operator>&amp;</operator><name><name>p</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>prio</name></expr></argument>, <argument><expr><literal type="string">"Shader %s: \n%s"</literal></expr></argument>, <argument><expr><name><name>shd</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>buf</name><operator>.</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_bprint_finalize</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_vk_compile_shader</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>SPIRVShader</name> <modifier>*</modifier></type><name>shd</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>entrypoint</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VkResult</name></type> <name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VulkanFilterContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VkShaderModuleCreateInfo</name></type> <name>shader_create</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GLSlangResult</name> <modifier>*</modifier></type><name>res</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>enum</name> <name>GLSlangStage</name></name></type> <name><name>emap</name><index>[]</index></name> <init>= <expr><block>{

<expr><index>[<expr><name>VK_SHADER_STAGE_VERTEX_BIT</name></expr>]</index> <operator>=</operator> <name>GLSLANG_VERTEX</name></expr>,

<expr><index>[<expr><name>VK_SHADER_STAGE_FRAGMENT_BIT</name></expr>]</index> <operator>=</operator> <name>GLSLANG_FRAGMENT</name></expr>,

<expr><index>[<expr><name>VK_SHADER_STAGE_COMPUTE_BIT</name></expr>]</index> <operator>=</operator> <name>GLSLANG_COMPUTE</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>shd</name><operator>-&gt;</operator><name>shader</name><operator>.</operator><name>pName</name></name> <operator>=</operator> <name>entrypoint</name></expr>;</expr_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>glslang_compile</name><argument_list>(<argument><expr><name><name>shd</name><operator>-&gt;</operator><name>src</name><operator>.</operator><name>str</name></name></expr></argument>, <argument><expr><name><name>emap</name><index>[<expr><name><name>shd</name><operator>-&gt;</operator><name>shader</name><operator>.</operator><name>stage</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>res</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>res</name><operator>-&gt;</operator><name>rval</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Error compiling shader %s: %s!\n"</literal></expr></argument>,

<argument><expr><name><name>shd</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><call><name>av_err2str</name><argument_list>(<argument><expr><name><name>res</name><operator>-&gt;</operator><name>rval</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>print_shader</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>shd</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>res</name><operator>-&gt;</operator><name>error_msg</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>res</name><operator>-&gt;</operator><name>error_msg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name><name>res</name><operator>-&gt;</operator><name>error_msg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name><name>res</name><operator>-&gt;</operator><name>rval</name></name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>print_shader</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>shd</name></expr></argument>, <argument><expr><name>AV_LOG_VERBOSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>shader_create</name><operator>.</operator><name>sType</name></name> <operator>=</operator> <name>VK_STRUCTURE_TYPE_SHADER_MODULE_CREATE_INFO</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>shader_create</name><operator>.</operator><name>pNext</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>shader_create</name><operator>.</operator><name>codeSize</name></name> <operator>=</operator> <name><name>res</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>shader_create</name><operator>.</operator><name>flags</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>shader_create</name><operator>.</operator><name>pCode</name></name> <operator>=</operator> <name><name>res</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>vkCreateShaderModule</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>hwctx</name><operator>-&gt;</operator><name>act_dev</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>shader_create</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>shd</name><operator>-&gt;</operator><name>shader</name><operator>.</operator><name>module</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>VK_SUCCESS</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Unable to create shader module: %s\n"</literal></expr></argument>,

<argument><expr><call><name>ff_vk_ret2str</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_EXTERNAL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_VERBOSE</name></expr></argument>, <argument><expr><literal type="string">"Shader %s linked! Size: %zu bytes\n"</literal></expr></argument>,

<argument><expr><name><name>shd</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>shader_create</name><operator>.</operator><name>codeSize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<struct><specifier>static</specifier> <specifier>const</specifier> struct <name>descriptor_props</name> <block>{

<decl_stmt><decl><type><name>size_t</name></type> <name>struct_size</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>type</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>is_uniform</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>mem_quali</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>dim_needed</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>buf_content</name></decl>;</decl_stmt> 

}</block> <decl><name><name>descriptor_props</name><index>[]</index></name> <init>= <expr><block>{

<expr><index>[<expr><name>VK_DESCRIPTOR_TYPE_SAMPLER</name></expr>]</index> <operator>=</operator> <block>{ <expr><sizeof>sizeof<argument_list>(<argument><expr><name>VkDescriptorImageInfo</name></expr></argument>)</argument_list></sizeof></expr>, <expr><literal type="string">"sampler"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, }</block></expr>,

<expr><index>[<expr><name>VK_DESCRIPTOR_TYPE_SAMPLED_IMAGE</name></expr>]</index> <operator>=</operator> <block>{ <expr><sizeof>sizeof<argument_list>(<argument><expr><name>VkDescriptorImageInfo</name></expr></argument>)</argument_list></sizeof></expr>, <expr><literal type="string">"texture"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, }</block></expr>,

<expr><index>[<expr><name>VK_DESCRIPTOR_TYPE_STORAGE_IMAGE</name></expr>]</index> <operator>=</operator> <block>{ <expr><sizeof>sizeof<argument_list>(<argument><expr><name>VkDescriptorImageInfo</name></expr></argument>)</argument_list></sizeof></expr>, <expr><literal type="string">"image"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, }</block></expr>,

<expr><index>[<expr><name>VK_DESCRIPTOR_TYPE_INPUT_ATTACHMENT</name></expr>]</index> <operator>=</operator> <block>{ <expr><sizeof>sizeof<argument_list>(<argument><expr><name>VkDescriptorImageInfo</name></expr></argument>)</argument_list></sizeof></expr>, <expr><literal type="string">"subpassInput"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, }</block></expr>,

<expr><index>[<expr><name>VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER</name></expr>]</index> <operator>=</operator> <block>{ <expr><sizeof>sizeof<argument_list>(<argument><expr><name>VkDescriptorImageInfo</name></expr></argument>)</argument_list></sizeof></expr>, <expr><literal type="string">"sampler"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, }</block></expr>,

<expr><index>[<expr><name>VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER</name></expr>]</index> <operator>=</operator> <block>{ <expr><sizeof>sizeof<argument_list>(<argument><expr><name>VkDescriptorBufferInfo</name></expr></argument>)</argument_list></sizeof></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, }</block></expr>,

<expr><index>[<expr><name>VK_DESCRIPTOR_TYPE_STORAGE_BUFFER</name></expr>]</index> <operator>=</operator> <block>{ <expr><sizeof>sizeof<argument_list>(<argument><expr><name>VkDescriptorBufferInfo</name></expr></argument>)</argument_list></sizeof></expr>, <expr><literal type="string">"buffer"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, }</block></expr>,

<expr><index>[<expr><name>VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC</name></expr>]</index> <operator>=</operator> <block>{ <expr><sizeof>sizeof<argument_list>(<argument><expr><name>VkDescriptorBufferInfo</name></expr></argument>)</argument_list></sizeof></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, }</block></expr>,

<expr><index>[<expr><name>VK_DESCRIPTOR_TYPE_STORAGE_BUFFER_DYNAMIC</name></expr>]</index> <operator>=</operator> <block>{ <expr><sizeof>sizeof<argument_list>(<argument><expr><name>VkDescriptorBufferInfo</name></expr></argument>)</argument_list></sizeof></expr>, <expr><literal type="string">"buffer"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, }</block></expr>,

<expr><index>[<expr><name>VK_DESCRIPTOR_TYPE_UNIFORM_TEXEL_BUFFER</name></expr>]</index> <operator>=</operator> <block>{ <expr><sizeof>sizeof<argument_list>(<argument><expr><name>VkBufferView</name></expr></argument>)</argument_list></sizeof></expr>, <expr><literal type="string">"samplerBuffer"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, }</block></expr>,

<expr><index>[<expr><name>VK_DESCRIPTOR_TYPE_STORAGE_TEXEL_BUFFER</name></expr>]</index> <operator>=</operator> <block>{ <expr><sizeof>sizeof<argument_list>(<argument><expr><name>VkBufferView</name></expr></argument>)</argument_list></sizeof></expr>, <expr><literal type="string">"imageBuffer"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, }</block></expr>,

}</block></expr></init></decl>;</struct>

<function><type><name>int</name></type> <name>ff_vk_add_descriptor_set</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>VulkanPipeline</name> <modifier>*</modifier></type><name>pl</name></decl></parameter>,

<parameter><decl><type><name>SPIRVShader</name> <modifier>*</modifier></type><name>shd</name></decl></parameter>, <parameter><decl><type><name>VulkanDescriptorSetBinding</name> <modifier>*</modifier></type><name>desc</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>num</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>only_print_to_shader</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VkResult</name></type> <name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VkDescriptorSetLayout</name> <modifier>*</modifier></type><name>layout</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VulkanFilterContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>only_print_to_shader</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>print</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>pl</name><operator>-&gt;</operator><name>desc_layout</name></name> <operator>=</operator> <call><name>av_realloc_array</name><argument_list>(<argument><expr><name><name>pl</name><operator>-&gt;</operator><name>desc_layout</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>pl</name><operator>-&gt;</operator><name>desc_layout</name></name></expr></argument>)</argument_list></sizeof></expr></argument>,

<argument><expr><name><name>pl</name><operator>-&gt;</operator><name>descriptor_sets_num</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pl</name><operator>-&gt;</operator><name>desc_layout</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>layout</name> <operator>=</operator> <operator>&amp;</operator><name><name>pl</name><operator>-&gt;</operator><name>desc_layout</name><index>[<expr><name><name>pl</name><operator>-&gt;</operator><name>descriptor_sets_num</name></name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>layout</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>layout</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<block>{<block_content> 

<decl_stmt><decl><type><name>VkDescriptorSetLayoutCreateInfo</name></type> <name>desc_create_layout</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VkDescriptorSetLayoutBinding</name> <modifier>*</modifier></type><name>desc_binding</name></decl>;</decl_stmt>

<expr_stmt><expr><name>desc_binding</name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>desc_binding</name></expr></argument>)</argument_list></sizeof><operator>*</operator><name>num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>desc_binding</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>desc_binding</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>binding</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>desc_binding</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>descriptorType</name> <operator>=</operator> <name><name>desc</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>desc_binding</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>descriptorCount</name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name><name>desc</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>elems</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>desc_binding</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>stageFlags</name> <operator>=</operator> <name><name>desc</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>stages</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>desc_binding</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>pImmutableSamplers</name> <operator>=</operator> <name><name>desc</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>samplers</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>desc_create_layout</name><operator>.</operator><name>sType</name></name> <operator>=</operator> <name>VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_CREATE_INFO</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>desc_create_layout</name><operator>.</operator><name>pBindings</name></name> <operator>=</operator> <name>desc_binding</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>desc_create_layout</name><operator>.</operator><name>bindingCount</name></name> <operator>=</operator> <name>num</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>vkCreateDescriptorSetLayout</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>hwctx</name><operator>-&gt;</operator><name>act_dev</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>desc_create_layout</name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>hwctx</name><operator>-&gt;</operator><name>alloc</name></name></expr></argument>, <argument><expr><name>layout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>desc_binding</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>VK_SUCCESS</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Unable to init descriptor set "</literal>

<literal type="string">"layout: %s\n"</literal></expr></argument>, <argument><expr><call><name>ff_vk_ret2str</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_EXTERNAL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block>

<block>{<block_content> 

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>pl</name><operator>-&gt;</operator><name>pool_size_desc_num</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name><name>pl</name><operator>-&gt;</operator><name>pool_size_desc</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>==</operator> <name><name>desc</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name>j</name> <operator>&gt;=</operator> <name><name>pl</name><operator>-&gt;</operator><name>pool_size_desc_num</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>pl</name><operator>-&gt;</operator><name>pool_size_desc</name></name> <operator>=</operator> <call><name>av_realloc_array</name><argument_list>(<argument><expr><name><name>pl</name><operator>-&gt;</operator><name>pool_size_desc</name></name></expr></argument>,

<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>pl</name><operator>-&gt;</operator><name>pool_size_desc</name></name></expr></argument>)</argument_list></sizeof></expr></argument>,

<argument><expr><operator>++</operator><name><name>pl</name><operator>-&gt;</operator><name>pool_size_desc_num</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pl</name><operator>-&gt;</operator><name>pool_size_desc</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pl</name><operator>-&gt;</operator><name>pool_size_desc</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>VkDescriptorPoolSize</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>pl</name><operator>-&gt;</operator><name>pool_size_desc</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>=</operator> <name><name>desc</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pl</name><operator>-&gt;</operator><name>pool_size_desc</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>descriptorCount</name> <operator>+=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name><name>desc</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>elems</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block>

<block>{<block_content> 

<decl_stmt><decl><type><name>VkDescriptorUpdateTemplateCreateInfo</name> <modifier>*</modifier></type><name>dt</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VkDescriptorUpdateTemplateEntry</name> <modifier>*</modifier></type><name>des_entries</name></decl>;</decl_stmt>

<expr_stmt><expr><name>des_entries</name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><name>num</name><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>VkDescriptorUpdateTemplateEntry</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>des_entries</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>des_entries</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>dstBinding</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>des_entries</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>descriptorType</name> <operator>=</operator> <name><name>desc</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>des_entries</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>descriptorCount</name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name><name>desc</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>elems</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>des_entries</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>dstArrayElement</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>des_entries</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>offset</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><name><name>desc</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>updater</name><operator>)</operator> <operator>-</operator> <operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><name>s</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>des_entries</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>stride</name> <operator>=</operator> <name><name>descriptor_props</name><index>[<expr><name><name>desc</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name></expr>]</index></name><operator>.</operator><name>struct_size</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>pl</name><operator>-&gt;</operator><name>desc_template_info</name></name> <operator>=</operator> <call><name>av_realloc_array</name><argument_list>(<argument><expr><name><name>pl</name><operator>-&gt;</operator><name>desc_template_info</name></name></expr></argument>,

<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>pl</name><operator>-&gt;</operator><name>desc_template_info</name></name></expr></argument>)</argument_list></sizeof></expr></argument>,

<argument><expr><name><name>pl</name><operator>-&gt;</operator><name>descriptor_sets_num</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pl</name><operator>-&gt;</operator><name>desc_template_info</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>dt</name> <operator>=</operator> <operator>&amp;</operator><name><name>pl</name><operator>-&gt;</operator><name>desc_template_info</name><index>[<expr><name><name>pl</name><operator>-&gt;</operator><name>descriptor_sets_num</name></name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>dt</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>dt</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dt</name><operator>-&gt;</operator><name>sType</name></name> <operator>=</operator> <name>VK_STRUCTURE_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_CREATE_INFO</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dt</name><operator>-&gt;</operator><name>templateType</name></name> <operator>=</operator> <name>VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_DESCRIPTOR_SET</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dt</name><operator>-&gt;</operator><name>descriptorSetLayout</name></name> <operator>=</operator> <operator>*</operator><name>layout</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dt</name><operator>-&gt;</operator><name>pDescriptorUpdateEntries</name></name> <operator>=</operator> <name>des_entries</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dt</name><operator>-&gt;</operator><name>descriptorUpdateEntryCount</name></name> <operator>=</operator> <name>num</name></expr>;</expr_stmt>

</block_content>}</block>

<expr_stmt><expr><name><name>pl</name><operator>-&gt;</operator><name>descriptor_sets_num</name></name><operator>++</operator></expr>;</expr_stmt>

<label><name>print</name>:</label>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>descriptor_props</name></name> <modifier>*</modifier></type><name>prop</name> <init>= <expr><operator>&amp;</operator><name><name>descriptor_props</name><index>[<expr><name><name>desc</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>GLSLA</name><argument_list>(<argument><expr><literal type="string">"layout (set = %i, binding = %i"</literal></expr></argument>, <argument><expr><name><name>pl</name><operator>-&gt;</operator><name>descriptor_sets_num</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>desc</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>mem_layout</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>GLSLA</name><argument_list>(<argument><expr><literal type="string">", %s"</literal></expr></argument>, <argument><expr><name><name>desc</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>mem_layout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>GLSLA</name><argument_list>(<argument><expr><literal type="string">")"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>prop</name><operator>-&gt;</operator><name>is_uniform</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>GLSLA</name><argument_list>(<argument><expr><literal type="string">" uniform"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>prop</name><operator>-&gt;</operator><name>mem_quali</name></name> <operator>&amp;&amp;</operator> <name><name>desc</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>mem_quali</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>GLSLA</name><argument_list>(<argument><expr><literal type="string">" %s"</literal></expr></argument>, <argument><expr><name><name>desc</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>mem_quali</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>prop</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>GLSLA</name><argument_list>(<argument><expr><literal type="string">" %s"</literal></expr></argument>, <argument><expr><name><name>prop</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>prop</name><operator>-&gt;</operator><name>dim_needed</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>GLSLA</name><argument_list>(<argument><expr><literal type="string">"%iD"</literal></expr></argument>, <argument><expr><name><name>desc</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>dimensions</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>GLSLA</name><argument_list>(<argument><expr><literal type="string">" %s"</literal></expr></argument>, <argument><expr><name><name>desc</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>prop</name><operator>-&gt;</operator><name>buf_content</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>GLSLA</name><argument_list>(<argument><expr><literal type="string">" {\n %s\n}"</literal></expr></argument>, <argument><expr><name><name>desc</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>buf_content</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>desc</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>elems</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>GLSLA</name><argument_list>(<argument><expr><literal type="string">"[%i]"</literal></expr></argument>, <argument><expr><name><name>desc</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>elems</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>GLSLA</name><argument_list>(<argument><expr><literal type="string">";\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>GLSLA</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_vk_update_descriptor_set</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>VulkanPipeline</name> <modifier>*</modifier></type><name>pl</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>set_id</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VulkanFilterContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vkUpdateDescriptorSetWithTemplate</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>hwctx</name><operator>-&gt;</operator><name>act_dev</name></name></expr></argument>,

<argument><expr><name><name>pl</name><operator>-&gt;</operator><name>desc_set</name><index>[<expr><name>set_id</name></expr>]</index></name></expr></argument>,

<argument><expr><name><name>pl</name><operator>-&gt;</operator><name>desc_template</name><index>[<expr><name>set_id</name></expr>]</index></name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_vk_update_push_exec</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>FFVkExecContext</name> <modifier>*</modifier></type><name>e</name></decl></parameter>,

<parameter><decl><type><name>VkShaderStageFlagBits</name></type> <name>stage</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>offset</name></decl></parameter>,

<parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>vkCmdPushConstants</name><argument_list>(<argument><expr><name><name>e</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name><name>e</name><operator>-&gt;</operator><name>bound_pl</name><operator>-&gt;</operator><name>pipeline_layout</name></name></expr></argument>,

<argument><expr><name>stage</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_vk_init_pipeline_layout</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>VulkanPipeline</name> <modifier>*</modifier></type><name>pl</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VkResult</name></type> <name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VulkanFilterContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<block>{<block_content> 

<decl_stmt><decl><type><name>VkDescriptorPoolCreateInfo</name></type> <name>pool_create_info</name> <init>= <expr><block>{

<expr><operator>.</operator><name>sType</name> <operator>=</operator> <name>VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_CREATE_INFO</name></expr>,

<expr><operator>.</operator><name>poolSizeCount</name> <operator>=</operator> <name><name>pl</name><operator>-&gt;</operator><name>pool_size_desc_num</name></name></expr>,

<expr><operator>.</operator><name>pPoolSizes</name> <operator>=</operator> <name><name>pl</name><operator>-&gt;</operator><name>pool_size_desc</name></name></expr>,

<expr><operator>.</operator><name>maxSets</name> <operator>=</operator> <name><name>pl</name><operator>-&gt;</operator><name>descriptor_sets_num</name></name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>vkCreateDescriptorPool</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>hwctx</name><operator>-&gt;</operator><name>act_dev</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pool_create_info</name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>hwctx</name><operator>-&gt;</operator><name>alloc</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pl</name><operator>-&gt;</operator><name>desc_pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pl</name><operator>-&gt;</operator><name>pool_size_desc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>VK_SUCCESS</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Unable to init descriptor set "</literal>

<literal type="string">"pool: %s\n"</literal></expr></argument>, <argument><expr><call><name>ff_vk_ret2str</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_EXTERNAL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block>

<block>{<block_content> 

<decl_stmt><decl><type><name>VkDescriptorSetAllocateInfo</name></type> <name>alloc_info</name> <init>= <expr><block>{

<expr><operator>.</operator><name>sType</name> <operator>=</operator> <name>VK_STRUCTURE_TYPE_DESCRIPTOR_SET_ALLOCATE_INFO</name></expr>,

<expr><operator>.</operator><name>descriptorPool</name> <operator>=</operator> <name><name>pl</name><operator>-&gt;</operator><name>desc_pool</name></name></expr>,

<expr><operator>.</operator><name>descriptorSetCount</name> <operator>=</operator> <name><name>pl</name><operator>-&gt;</operator><name>descriptor_sets_num</name></name></expr>,

<expr><operator>.</operator><name>pSetLayouts</name> <operator>=</operator> <name><name>pl</name><operator>-&gt;</operator><name>desc_layout</name></name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>pl</name><operator>-&gt;</operator><name>desc_set</name></name> <operator>=</operator> <call><name>av_malloc</name><argument_list>(<argument><expr><name><name>pl</name><operator>-&gt;</operator><name>descriptor_sets_num</name></name><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>pl</name><operator>-&gt;</operator><name>desc_set</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pl</name><operator>-&gt;</operator><name>desc_set</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>vkAllocateDescriptorSets</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>hwctx</name><operator>-&gt;</operator><name>act_dev</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>alloc_info</name></expr></argument>,

<argument><expr><name><name>pl</name><operator>-&gt;</operator><name>desc_set</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>VK_SUCCESS</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Unable to allocate descriptor set: %s\n"</literal></expr></argument>,

<argument><expr><call><name>ff_vk_ret2str</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_EXTERNAL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block>

<block>{<block_content> 

<decl_stmt><decl><type><name>VkPipelineLayoutCreateInfo</name></type> <name>spawn_pipeline_layout</name> <init>= <expr><block>{

<expr><operator>.</operator><name>sType</name> <operator>=</operator> <name>VK_STRUCTURE_TYPE_PIPELINE_LAYOUT_CREATE_INFO</name></expr>,

<expr><operator>.</operator><name>setLayoutCount</name> <operator>=</operator> <name><name>pl</name><operator>-&gt;</operator><name>descriptor_sets_num</name></name></expr>,

<expr><operator>.</operator><name>pSetLayouts</name> <operator>=</operator> <name><name>pl</name><operator>-&gt;</operator><name>desc_layout</name></name></expr>,

<expr><operator>.</operator><name>pushConstantRangeCount</name> <operator>=</operator> <name><name>pl</name><operator>-&gt;</operator><name>push_consts_num</name></name></expr>,

<expr><operator>.</operator><name>pPushConstantRanges</name> <operator>=</operator> <name><name>pl</name><operator>-&gt;</operator><name>push_consts</name></name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>vkCreatePipelineLayout</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>hwctx</name><operator>-&gt;</operator><name>act_dev</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>spawn_pipeline_layout</name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>hwctx</name><operator>-&gt;</operator><name>alloc</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pl</name><operator>-&gt;</operator><name>pipeline_layout</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pl</name><operator>-&gt;</operator><name>push_consts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pl</name><operator>-&gt;</operator><name>push_consts_num</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>VK_SUCCESS</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Unable to init pipeline layout: %s\n"</literal></expr></argument>,

<argument><expr><call><name>ff_vk_ret2str</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_EXTERNAL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block>

<block>{<block_content> 

<decl_stmt><decl><type><name>VkDescriptorUpdateTemplateCreateInfo</name> <modifier>*</modifier></type><name>desc_template_info</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>pl</name><operator>-&gt;</operator><name>desc_template</name></name> <operator>=</operator> <call><name>av_malloc</name><argument_list>(<argument><expr><name><name>pl</name><operator>-&gt;</operator><name>descriptor_sets_num</name></name><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>pl</name><operator>-&gt;</operator><name>desc_template</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pl</name><operator>-&gt;</operator><name>desc_template</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pl</name><operator>-&gt;</operator><name>descriptor_sets_num</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>desc_template_info</name> <operator>=</operator> <operator>&amp;</operator><name><name>pl</name><operator>-&gt;</operator><name>desc_template_info</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>desc_template_info</name><operator>-&gt;</operator><name>pipelineLayout</name></name> <operator>=</operator> <name><name>pl</name><operator>-&gt;</operator><name>pipeline_layout</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>vkCreateDescriptorUpdateTemplate</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>hwctx</name><operator>-&gt;</operator><name>act_dev</name></name></expr></argument>,

<argument><expr><name>desc_template_info</name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>hwctx</name><operator>-&gt;</operator><name>alloc</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>pl</name><operator>-&gt;</operator><name>desc_template</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name><name>desc_template_info</name><operator>-&gt;</operator><name>pDescriptorUpdateEntries</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>VK_SUCCESS</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Unable to init descriptor "</literal>

<literal type="string">"template: %s\n"</literal></expr></argument>, <argument><expr><call><name>ff_vk_ret2str</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_EXTERNAL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pl</name><operator>-&gt;</operator><name>desc_template_info</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<macro><name>FN_CREATING</name><argument_list>(<argument>VulkanFilterContext</argument>, <argument>VulkanPipeline</argument>, <argument>pipeline</argument>, <argument>pipelines</argument>, <argument>pipelines_num</argument>)</argument_list></macro>

<function><type><name>VulkanPipeline</name> <modifier>*</modifier></type><name>ff_vk_create_pipeline</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>create_pipeline</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>priv</name></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_vk_init_compute_pipeline</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>VulkanPipeline</name> <modifier>*</modifier></type><name>pl</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VkResult</name></type> <name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VulkanFilterContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VkComputePipelineCreateInfo</name></type> <name>pipe</name> <init>= <expr><block>{

<expr><operator>.</operator><name>sType</name> <operator>=</operator> <name>VK_STRUCTURE_TYPE_COMPUTE_PIPELINE_CREATE_INFO</name></expr>,

<expr><operator>.</operator><name>layout</name> <operator>=</operator> <name><name>pl</name><operator>-&gt;</operator><name>pipeline_layout</name></name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pl</name><operator>-&gt;</operator><name>shaders_num</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>pl</name><operator>-&gt;</operator><name>shaders</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name><name>shader</name><operator>.</operator><name>stage</name></name> <operator>&amp;</operator> <name>VK_SHADER_STAGE_COMPUTE_BIT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>pipe</name><operator>.</operator><name>stage</name></name> <operator>=</operator> <name><name>pl</name><operator>-&gt;</operator><name>shaders</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>shader</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <name><name>pl</name><operator>-&gt;</operator><name>shaders_num</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Can't init compute pipeline, no shader\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>vkCreateComputePipelines</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>hwctx</name><operator>-&gt;</operator><name>act_dev</name></name></expr></argument>, <argument><expr><name>VK_NULL_HANDLE</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>pipe</name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>hwctx</name><operator>-&gt;</operator><name>alloc</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pl</name><operator>-&gt;</operator><name>pipeline</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>VK_SUCCESS</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Unable to init compute pipeline: %s\n"</literal></expr></argument>,

<argument><expr><call><name>ff_vk_ret2str</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_EXTERNAL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>pl</name><operator>-&gt;</operator><name>bind_point</name></name> <operator>=</operator> <name>VK_PIPELINE_BIND_POINT_COMPUTE</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_vk_bind_pipeline_exec</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>FFVkExecContext</name> <modifier>*</modifier></type><name>e</name></decl></parameter>,

<parameter><decl><type><name>VulkanPipeline</name> <modifier>*</modifier></type><name>pl</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>vkCmdBindPipeline</name><argument_list>(<argument><expr><name><name>e</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name><name>pl</name><operator>-&gt;</operator><name>bind_point</name></name></expr></argument>, <argument><expr><name><name>pl</name><operator>-&gt;</operator><name>pipeline</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vkCmdBindDescriptorSets</name><argument_list>(<argument><expr><name><name>e</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name><name>pl</name><operator>-&gt;</operator><name>bind_point</name></name></expr></argument>, <argument><expr><name><name>pl</name><operator>-&gt;</operator><name>pipeline_layout</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><name><name>pl</name><operator>-&gt;</operator><name>descriptor_sets_num</name></name></expr></argument>, <argument><expr><name><name>pl</name><operator>-&gt;</operator><name>desc_set</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>bound_pl</name></name> <operator>=</operator> <name>pl</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>free_exec_ctx</name><parameter_list>(<parameter><decl><type><name>VulkanFilterContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>FFVkExecContext</name> <modifier>*</modifier></type><name>e</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>vkDestroyFence</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>hwctx</name><operator>-&gt;</operator><name>act_dev</name></name></expr></argument>, <argument><expr><name><name>e</name><operator>-&gt;</operator><name>fence</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>hwctx</name><operator>-&gt;</operator><name>alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>e</name><operator>-&gt;</operator><name>buf</name></name> <operator>!=</operator> <name>VK_NULL_HANDLE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vkFreeCommandBuffers</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>hwctx</name><operator>-&gt;</operator><name>act_dev</name></name></expr></argument>, <argument><expr><name><name>e</name><operator>-&gt;</operator><name>pool</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>e</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>e</name><operator>-&gt;</operator><name>pool</name></name> <operator>!=</operator> <name>VK_NULL_HANDLE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vkDestroyCommandPool</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>hwctx</name><operator>-&gt;</operator><name>act_dev</name></name></expr></argument>, <argument><expr><name><name>e</name><operator>-&gt;</operator><name>pool</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>hwctx</name><operator>-&gt;</operator><name>alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name><name>e</name><operator>-&gt;</operator><name>sem_wait</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name><name>e</name><operator>-&gt;</operator><name>sem_wait_dst</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name><name>e</name><operator>-&gt;</operator><name>sem_sig</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>free_pipeline</name><parameter_list>(<parameter><decl><type><name>VulkanFilterContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>VulkanPipeline</name> <modifier>*</modifier></type><name>pl</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pl</name><operator>-&gt;</operator><name>shaders_num</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>SPIRVShader</name> <modifier>*</modifier></type><name>shd</name> <init>= <expr><name><name>pl</name><operator>-&gt;</operator><name>shaders</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_bprint_finalize</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>shd</name><operator>-&gt;</operator><name>src</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vkDestroyShaderModule</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>hwctx</name><operator>-&gt;</operator><name>act_dev</name></name></expr></argument>, <argument><expr><name><name>shd</name><operator>-&gt;</operator><name>shader</name><operator>.</operator><name>module</name></name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>hwctx</name><operator>-&gt;</operator><name>alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>shd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>vkDestroyPipeline</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>hwctx</name><operator>-&gt;</operator><name>act_dev</name></name></expr></argument>, <argument><expr><name><name>pl</name><operator>-&gt;</operator><name>pipeline</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>hwctx</name><operator>-&gt;</operator><name>alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vkDestroyPipelineLayout</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>hwctx</name><operator>-&gt;</operator><name>act_dev</name></name></expr></argument>, <argument><expr><name><name>pl</name><operator>-&gt;</operator><name>pipeline_layout</name></name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>hwctx</name><operator>-&gt;</operator><name>alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pl</name><operator>-&gt;</operator><name>descriptor_sets_num</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>pl</name><operator>-&gt;</operator><name>desc_template</name></name> <operator>&amp;&amp;</operator> <name><name>pl</name><operator>-&gt;</operator><name>desc_template</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vkDestroyDescriptorUpdateTemplate</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>hwctx</name><operator>-&gt;</operator><name>act_dev</name></name></expr></argument>, <argument><expr><name><name>pl</name><operator>-&gt;</operator><name>desc_template</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>hwctx</name><operator>-&gt;</operator><name>alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pl</name><operator>-&gt;</operator><name>desc_layout</name></name> <operator>&amp;&amp;</operator> <name><name>pl</name><operator>-&gt;</operator><name>desc_layout</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vkDestroyDescriptorSetLayout</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>hwctx</name><operator>-&gt;</operator><name>act_dev</name></name></expr></argument>, <argument><expr><name><name>pl</name><operator>-&gt;</operator><name>desc_layout</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>hwctx</name><operator>-&gt;</operator><name>alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>pl</name><operator>-&gt;</operator><name>desc_pool</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vkDestroyDescriptorPool</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>hwctx</name><operator>-&gt;</operator><name>act_dev</name></name></expr></argument>, <argument><expr><name><name>pl</name><operator>-&gt;</operator><name>desc_pool</name></name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>hwctx</name><operator>-&gt;</operator><name>alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pl</name><operator>-&gt;</operator><name>desc_set</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pl</name><operator>-&gt;</operator><name>shaders</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pl</name><operator>-&gt;</operator><name>desc_layout</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pl</name><operator>-&gt;</operator><name>desc_template</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pl</name><operator>-&gt;</operator><name>push_consts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pl</name><operator>-&gt;</operator><name>push_consts_num</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pl</name><operator>-&gt;</operator><name>pool_size_desc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pl</name><operator>-&gt;</operator><name>desc_template_info</name></name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pl</name><operator>-&gt;</operator><name>descriptor_sets_num</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name><name>pl</name><operator>-&gt;</operator><name>desc_template_info</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>pDescriptorUpdateEntries</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pl</name><operator>-&gt;</operator><name>desc_template_info</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>pl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_vk_filter_uninit</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VulkanFilterContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>glslang_uninit</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>samplers_num</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vkDestroySampler</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>hwctx</name><operator>-&gt;</operator><name>act_dev</name></name></expr></argument>, <argument><expr><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>samplers</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>hwctx</name><operator>-&gt;</operator><name>alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>samplers</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>pipelines_num</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>free_pipeline</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>pipelines</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>pipelines</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>exec_ctx_num</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>free_exec_ctx</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>exec_ctx</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>exec_ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>scratch</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>scratch_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_buffer_unref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>device_ref</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_buffer_unref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>frames_ref</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

</unit>
