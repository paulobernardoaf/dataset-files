<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavfilter\vf_nlmeans_opencl.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;float.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avassert.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/common.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/imgutils.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/mem.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/opt.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/pixdesc.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avfilter.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"opencl.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"opencl_source.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"video.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>enum</name> <name>AVPixelFormat</name></name></type> <name><name>supported_formats</name><index>[]</index></name> <init>= <expr><block>{

<expr><name>AV_PIX_FMT_YUV420P</name></expr>,

<expr><name>AV_PIX_FMT_YUV444P</name></expr>,

<expr><name>AV_PIX_FMT_GBRP</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int</name></type> <name>is_format_supported</name><parameter_list>(<parameter><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>fmt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>supported_formats</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name><name>supported_formats</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>fmt</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<typedef>typedef <type><struct>struct <name>NLMeansOpenCLContext</name> <block>{

<decl_stmt><decl><type><name>OpenCLFilterContext</name></type> <name>ocf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>initialised</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>cl_kernel</name></type> <name>vert_kernel</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>cl_kernel</name></type> <name>horiz_kernel</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>cl_kernel</name></type> <name>accum_kernel</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>cl_kernel</name></type> <name>average_kernel</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>cl_mem</name></type> <name>integral_img</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>cl_mem</name></type> <name>weight</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>cl_mem</name></type> <name>sum</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>cl_mem</name></type> <name>overflow</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>double</name></type> <name>sigma</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>h</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>chroma_w</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>chroma_h</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>patch_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>patch_size_uv</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>research_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>research_size_uv</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>cl_command_queue</name></type> <name>command_queue</name></decl>;</decl_stmt>

}</block></struct></type> <name>NLMeansOpenCLContext</name>;</typedef>

<function><type><specifier>static</specifier> <name>int</name></type> <name>nlmeans_opencl_init</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>NLMeansOpenCLContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>cl_int</name></type> <name>cle</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>weight_buf_size</name> <init>= <expr><name>width</name> <operator>*</operator> <name>height</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>h</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>sigma</name></name> <operator>*</operator> <literal type="number">10</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>research_size</name></name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>research_size</name></name> <operator>|=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>,

<argument><expr><literal type="string">"research_size should be odd, set to %d"</literal></expr></argument>,

<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>research_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>patch_size</name></name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>patch_size</name></name> <operator>|=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>,

<argument><expr><literal type="string">"patch_size should be odd, set to %d"</literal></expr></argument>,

<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>patch_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>research_size_uv</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>research_size_uv</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>research_size</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>patch_size_uv</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>patch_size_uv</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>patch_size</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>ff_opencl_filter_load_program</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ff_opencl_source_nlmeans</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>command_queue</name></name> <operator>=</operator> <call><name>clCreateCommandQueue</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>ocf</name><operator>.</operator><name>hwctx</name><operator>-&gt;</operator><name>context</name></name></expr></argument>,

<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>ocf</name><operator>.</operator><name>hwctx</name><operator>-&gt;</operator><name>device_id</name></name></expr></argument>,

<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>cle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CL_FAIL_ON_ERROR</name><argument_list>(<argument><expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EIO</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"Failed to create OpenCL "</literal>

<literal type="string">"command queue %d.\n"</literal></expr></argument>, <argument><expr><name>cle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>vert_kernel</name></name> <operator>=</operator> <call><name>clCreateKernel</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>ocf</name><operator>.</operator><name>program</name></name></expr></argument>,

<argument><expr><literal type="string">"vert_sum"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>cle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CL_FAIL_ON_ERROR</name><argument_list>(<argument><expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EIO</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"Failed to create "</literal>

<literal type="string">"vert_sum kernel %d.\n"</literal></expr></argument>, <argument><expr><name>cle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>horiz_kernel</name></name> <operator>=</operator> <call><name>clCreateKernel</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>ocf</name><operator>.</operator><name>program</name></name></expr></argument>,

<argument><expr><literal type="string">"horiz_sum"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>cle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CL_FAIL_ON_ERROR</name><argument_list>(<argument><expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EIO</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"Failed to create "</literal>

<literal type="string">"horiz_sum kernel %d.\n"</literal></expr></argument>, <argument><expr><name>cle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>accum_kernel</name></name> <operator>=</operator> <call><name>clCreateKernel</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>ocf</name><operator>.</operator><name>program</name></name></expr></argument>,

<argument><expr><literal type="string">"weight_accum"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>cle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CL_FAIL_ON_ERROR</name><argument_list>(<argument><expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EIO</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"Failed to create "</literal>

<literal type="string">"accum kernel %d.\n"</literal></expr></argument>, <argument><expr><name>cle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>average_kernel</name></name> <operator>=</operator> <call><name>clCreateKernel</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>ocf</name><operator>.</operator><name>program</name></name></expr></argument>,

<argument><expr><literal type="string">"average"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>cle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CL_FAIL_ON_ERROR</name><argument_list>(<argument><expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EIO</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"Failed to create "</literal>

<literal type="string">"average kernel %d.\n"</literal></expr></argument>, <argument><expr><name>cle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>integral_img</name></name> <operator>=</operator> <call><name>clCreateBuffer</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>ocf</name><operator>.</operator><name>hwctx</name><operator>-&gt;</operator><name>context</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><literal type="number">4</literal> <operator>*</operator> <name>width</name> <operator>*</operator> <name>height</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>cl_int</name></expr></argument>)</argument_list></sizeof></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CL_FAIL_ON_ERROR</name><argument_list>(<argument><expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EIO</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"Failed to create "</literal>

<literal type="string">"integral image %d.\n"</literal></expr></argument>, <argument><expr><name>cle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>weight</name></name> <operator>=</operator> <call><name>clCreateBuffer</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>ocf</name><operator>.</operator><name>hwctx</name><operator>-&gt;</operator><name>context</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><name>weight_buf_size</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CL_FAIL_ON_ERROR</name><argument_list>(<argument><expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EIO</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"Failed to create "</literal>

<literal type="string">"weight buffer %d.\n"</literal></expr></argument>, <argument><expr><name>cle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>sum</name></name> <operator>=</operator> <call><name>clCreateBuffer</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>ocf</name><operator>.</operator><name>hwctx</name><operator>-&gt;</operator><name>context</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><name>weight_buf_size</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CL_FAIL_ON_ERROR</name><argument_list>(<argument><expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EIO</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"Failed to create "</literal>

<literal type="string">"sum buffer %d.\n"</literal></expr></argument>, <argument><expr><name>cle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>overflow</name></name> <operator>=</operator> <call><name>clCreateBuffer</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>ocf</name><operator>.</operator><name>hwctx</name><operator>-&gt;</operator><name>context</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>cl_int</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CL_FAIL_ON_ERROR</name><argument_list>(<argument><expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EIO</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"Failed to create "</literal>

<literal type="string">"overflow buffer %d.\n"</literal></expr></argument>, <argument><expr><name>cle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>initialised</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<label><name>fail</name>:</label>

<expr_stmt><expr><call><name>CL_RELEASE_KERNEL</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>vert_kernel</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CL_RELEASE_KERNEL</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>horiz_kernel</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CL_RELEASE_KERNEL</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>accum_kernel</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CL_RELEASE_KERNEL</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>average_kernel</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CL_RELEASE_MEMORY</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>integral_img</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CL_RELEASE_MEMORY</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>weight</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CL_RELEASE_MEMORY</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>sum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CL_RELEASE_MEMORY</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>overflow</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CL_RELEASE_QUEUE</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>command_queue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>err</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>nlmeans_plane</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>cl_mem</name></type> <name>dst</name></decl></parameter>, <parameter><decl><type><name>cl_mem</name></type> <name>src</name></decl></parameter>,

<parameter><decl><type><name>cl_int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>cl_int</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>cl_int</name></type> <name>p</name></decl></parameter>, <parameter><decl><type><name>cl_int</name></type> <name>r</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>NLMeansOpenCLContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>zero</name> <init>= <expr><literal type="number">0.0f</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name><name>worksize1</name><index>[]</index></name> <init>= <expr><block>{<expr><name>height</name></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name><name>worksize2</name><index>[]</index></name> <init>= <expr><block>{<expr><name>width</name></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name><name>worksize3</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{<expr><name>width</name></expr>, <expr><name>height</name></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>dx</name></decl>, <decl><type ref="prev"/><name>dy</name></decl>, <decl><type ref="prev"/><name>err</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>weight_buf_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>cl_int</name></type> <name>cle</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>nb_pixel</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>tmp</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"/><name>idx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>cl_int</name> <modifier>*</modifier></type><name>dxdy</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>weight_buf_size</name> <operator>=</operator> <name>width</name> <operator>*</operator> <name>height</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<expr_stmt><expr><name>cle</name> <operator>=</operator> <call><name>clEnqueueFillBuffer</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>command_queue</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>weight</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>zero</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>weight_buf_size</name></expr></argument>,

<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CL_FAIL_ON_ERROR</name><argument_list>(<argument><expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EIO</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"Failed to fill weight buffer: %d.\n"</literal></expr></argument>,

<argument><expr><name>cle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cle</name> <operator>=</operator> <call><name>clEnqueueFillBuffer</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>command_queue</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>sum</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>zero</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>weight_buf_size</name></expr></argument>,

<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CL_FAIL_ON_ERROR</name><argument_list>(<argument><expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EIO</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"Failed to fill sum buffer: %d.\n"</literal></expr></argument>,

<argument><expr><name>cle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>nb_pixel</name> <operator>=</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>r</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>r</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>dxdy</name> <operator>=</operator> <call><name>av_malloc</name><argument_list>(<argument><expr><name>nb_pixel</name> <operator>*</operator> <literal type="number">2</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>cl_int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name>av_malloc</name><argument_list>(<argument><expr><name>nb_pixel</name> <operator>*</operator> <literal type="number">2</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>dxdy</name> <operator>||</operator> <operator>!</operator><name>tmp</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>dx</name> <operator>=</operator> <operator>-</operator><name>r</name></expr>;</init> <condition><expr><name>dx</name> <operator>&lt;=</operator> <name>r</name></expr>;</condition> <incr><expr><name>dx</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>dy</name> <operator>=</operator> <operator>-</operator><name>r</name></expr>;</init> <condition><expr><name>dy</name> <operator>&lt;=</operator> <name>r</name></expr>;</condition> <incr><expr><name>dy</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>dx</name> <operator>||</operator> <name>dy</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>tmp</name><index>[<expr><name>idx</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>dx</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tmp</name><index>[<expr><name>idx</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>dy</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nb_pixel</name> <operator>/</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>dxdy</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">8</literal></expr>]</index></name> <operator>=</operator> <name><name>tmp</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">8</literal></expr>]</index></name></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>dxdy</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">8</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>tmp</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">8</literal> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>dxdy</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">8</literal> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>tmp</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">8</literal> <operator>+</operator> <literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>dxdy</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">8</literal> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>tmp</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">8</literal> <operator>+</operator> <literal type="number">6</literal></expr>]</index></name></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>dxdy</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">8</literal> <operator>+</operator> <literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name><name>tmp</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">8</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>dxdy</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">8</literal> <operator>+</operator> <literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <name><name>tmp</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">8</literal> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>dxdy</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">8</literal> <operator>+</operator> <literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <name><name>tmp</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">8</literal> <operator>+</operator> <literal type="number">5</literal></expr>]</index></name></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>dxdy</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">8</literal> <operator>+</operator> <literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <name><name>tmp</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">8</literal> <operator>+</operator> <literal type="number">7</literal></expr>]</index></name></expr>;</expr_stmt> 

</block_content>}</block></for>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nb_pixel</name> <operator>/</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>cl_int</name> <modifier>*</modifier></type><name>dx_cur</name> <init>= <expr><name>dxdy</name> <operator>+</operator> <literal type="number">8</literal> <operator>*</operator> <name>i</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>cl_int</name> <modifier>*</modifier></type><name>dy_cur</name> <init>= <expr><name>dxdy</name> <operator>+</operator> <literal type="number">8</literal> <operator>*</operator> <name>i</name> <operator>+</operator> <literal type="number">4</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>CL_SET_KERNEL_ARG</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>horiz_kernel</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>cl_mem</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>integral_img</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CL_SET_KERNEL_ARG</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>horiz_kernel</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>cl_mem</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CL_SET_KERNEL_ARG</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>horiz_kernel</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>cl_int</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CL_SET_KERNEL_ARG</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>horiz_kernel</name></name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>cl_int</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CL_SET_KERNEL_ARG</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>horiz_kernel</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>cl_int4</name></expr></argument>, <argument><expr><name>dx_cur</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CL_SET_KERNEL_ARG</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>horiz_kernel</name></name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><name>cl_int4</name></expr></argument>, <argument><expr><name>dy_cur</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cle</name> <operator>=</operator> <call><name>clEnqueueNDRangeKernel</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>command_queue</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>horiz_kernel</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>worksize1</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CL_FAIL_ON_ERROR</name><argument_list>(<argument><expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EIO</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"Failed to enqueue horiz_kernel: %d.\n"</literal></expr></argument>,

<argument><expr><name>cle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CL_SET_KERNEL_ARG</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>vert_kernel</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>cl_mem</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>integral_img</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CL_SET_KERNEL_ARG</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>vert_kernel</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>cl_mem</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>overflow</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CL_SET_KERNEL_ARG</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>vert_kernel</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>cl_int</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CL_SET_KERNEL_ARG</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>vert_kernel</name></name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>cl_int</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cle</name> <operator>=</operator> <call><name>clEnqueueNDRangeKernel</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>command_queue</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>vert_kernel</name></name></expr></argument>,

<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>worksize2</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CL_FAIL_ON_ERROR</name><argument_list>(<argument><expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EIO</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"Failed to enqueue vert_kernel: %d.\n"</literal></expr></argument>,

<argument><expr><name>cle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CL_SET_KERNEL_ARG</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>accum_kernel</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>cl_mem</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>sum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CL_SET_KERNEL_ARG</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>accum_kernel</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>cl_mem</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>weight</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CL_SET_KERNEL_ARG</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>accum_kernel</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>cl_mem</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>integral_img</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CL_SET_KERNEL_ARG</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>accum_kernel</name></name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>cl_mem</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CL_SET_KERNEL_ARG</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>accum_kernel</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>cl_int</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CL_SET_KERNEL_ARG</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>accum_kernel</name></name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><name>cl_int</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CL_SET_KERNEL_ARG</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>accum_kernel</name></name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><name>cl_int</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CL_SET_KERNEL_ARG</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>accum_kernel</name></name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>, <argument><expr><name>cl_float</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>h</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CL_SET_KERNEL_ARG</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>accum_kernel</name></name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>cl_int4</name></expr></argument>, <argument><expr><name>dx_cur</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CL_SET_KERNEL_ARG</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>accum_kernel</name></name></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>, <argument><expr><name>cl_int4</name></expr></argument>, <argument><expr><name>dy_cur</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cle</name> <operator>=</operator> <call><name>clEnqueueNDRangeKernel</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>command_queue</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>accum_kernel</name></name></expr></argument>,

<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>worksize3</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CL_FAIL_ON_ERROR</name><argument_list>(<argument><expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EIO</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"Failed to enqueue kernel: %d.\n"</literal></expr></argument>, <argument><expr><name>cle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dxdy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CL_SET_KERNEL_ARG</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>average_kernel</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>cl_mem</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CL_SET_KERNEL_ARG</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>average_kernel</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>cl_mem</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CL_SET_KERNEL_ARG</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>average_kernel</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>cl_mem</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>sum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CL_SET_KERNEL_ARG</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>average_kernel</name></name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>cl_mem</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>weight</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cle</name> <operator>=</operator> <call><name>clEnqueueNDRangeKernel</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>command_queue</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>average_kernel</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>worksize3</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CL_FAIL_ON_ERROR</name><argument_list>(<argument><expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EIO</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"Failed to enqueue average kernel: %d.\n"</literal></expr></argument>,

<argument><expr><name>cle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cle</name> <operator>=</operator> <call><name>clFlush</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>command_queue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CL_FAIL_ON_ERROR</name><argument_list>(<argument><expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EIO</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"Failed to flush command queue: %d.\n"</literal></expr></argument>, <argument><expr><name>cle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>fail</name>:</label>

<if_stmt><if>if <condition>(<expr><name>tmp</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>dxdy</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dxdy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>err</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>nlmeans_opencl_filter_frame</name><parameter_list>(<parameter><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>inlink</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>input</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>avctx</name> <init>= <expr><name><name>inlink</name><operator>-&gt;</operator><name>dst</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>outlink</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>outputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>NLMeansOpenCLContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>output</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVHWFramesContext</name> <modifier>*</modifier></type><name>input_frames_ctx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>AVPixFmtDescriptor</name> <modifier>*</modifier></type><name>desc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>in_format</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>cl_mem</name></type> <name>src</name></decl>, <decl><type ref="prev"/><name>dst</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>cl_int</name></type> <name>zero</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>w</name></decl>, <decl><type ref="prev"/><name>h</name></decl>, <decl><type ref="prev"/><name>err</name></decl>, <decl><type ref="prev"/><name>cle</name></decl>, <decl><type ref="prev"/><name>overflow</name></decl>, <decl><type ref="prev"/><name>p</name></decl>, <decl><type ref="prev"/><name>patch</name></decl>, <decl><type ref="prev"/><name>research</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Filter input: %s, %ux%u (%"</literal><name>PRId64</name><literal type="string">").\n"</literal></expr></argument>,

<argument><expr><call><name>av_get_pix_fmt_name</name><argument_list>(<argument><expr><name><name>input</name><operator>-&gt;</operator><name>format</name></name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name><name>input</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>input</name><operator>-&gt;</operator><name>height</name></name></expr></argument>, <argument><expr><name><name>input</name><operator>-&gt;</operator><name>pts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>input</name><operator>-&gt;</operator><name>hw_frames_ctx</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>input_frames_ctx</name> <operator>=</operator> <operator>(</operator><name>AVHWFramesContext</name><operator>*</operator><operator>)</operator><name><name>input</name><operator>-&gt;</operator><name>hw_frames_ctx</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>in_format</name> <operator>=</operator> <name><name>input_frames_ctx</name><operator>-&gt;</operator><name>sw_format</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>output</name> <operator>=</operator> <call><name>ff_get_video_buffer</name><argument_list>(<argument><expr><name>outlink</name></expr></argument>, <argument><expr><name><name>outlink</name><operator>-&gt;</operator><name>w</name></name></expr></argument>, <argument><expr><name><name>outlink</name><operator>-&gt;</operator><name>h</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>output</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>av_frame_copy_props</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><name>input</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>initialised</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>desc</name> <operator>=</operator> <call><name>av_pix_fmt_desc_get</name><argument_list>(<argument><expr><name>in_format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>is_format_supported</name><argument_list>(<argument><expr><name>in_format</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"input format %s not supported\n"</literal></expr></argument>,

<argument><expr><call><name>av_get_pix_fmt_name</name><argument_list>(<argument><expr><name>in_format</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>chroma_w</name></name> <operator>=</operator> <call><name>AV_CEIL_RSHIFT</name><argument_list>(<argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>w</name></name></expr></argument>, <argument><expr><name><name>desc</name><operator>-&gt;</operator><name>log2_chroma_w</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>chroma_h</name></name> <operator>=</operator> <call><name>AV_CEIL_RSHIFT</name><argument_list>(<argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>h</name></name></expr></argument>, <argument><expr><name><name>desc</name><operator>-&gt;</operator><name>log2_chroma_h</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>nlmeans_opencl_init</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>w</name></name></expr></argument>, <argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>h</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>cle</name> <operator>=</operator> <call><name>clEnqueueWriteBuffer</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>command_queue</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>overflow</name></name></expr></argument>, <argument><expr><name>CL_FALSE</name></expr></argument>,

<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>cl_int</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>zero</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CL_FAIL_ON_ERROR</name><argument_list>(<argument><expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EIO</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"Failed to initialize overflow"</literal>

<literal type="string">"detection buffer %d.\n"</literal></expr></argument>, <argument><expr><name>cle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>p</name> <operator>&lt;</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name><name>output</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>src</name> <operator>=</operator> <operator>(</operator><name>cl_mem</name><operator>)</operator> <name><name>input</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>p</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>dst</name> <operator>=</operator> <operator>(</operator><name>cl_mem</name><operator>)</operator> <name><name>output</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>p</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>dst</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>w</name> <operator>=</operator> <ternary><condition><expr><name>p</name></expr> ?</condition><then> <expr><name><name>ctx</name><operator>-&gt;</operator><name>chroma_w</name></name></expr> </then><else>: <expr><name><name>inlink</name><operator>-&gt;</operator><name>w</name></name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>h</name> <operator>=</operator> <ternary><condition><expr><name>p</name></expr> ?</condition><then> <expr><name><name>ctx</name><operator>-&gt;</operator><name>chroma_h</name></name></expr> </then><else>: <expr><name><name>inlink</name><operator>-&gt;</operator><name>h</name></name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>patch</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name>p</name></expr> ?</condition><then> <expr><name><name>ctx</name><operator>-&gt;</operator><name>patch_size_uv</name></name></expr> </then><else>: <expr><name><name>ctx</name><operator>-&gt;</operator><name>patch_size</name></name></expr></else></ternary><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>research</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name>p</name></expr> ?</condition><then> <expr><name><name>ctx</name><operator>-&gt;</operator><name>research_size_uv</name></name></expr> </then><else>: <expr><name><name>ctx</name><operator>-&gt;</operator><name>research_size</name></name></expr></else></ternary><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>nlmeans_plane</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>patch</name></expr></argument>, <argument><expr><name>research</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>cle</name> <operator>=</operator> <call><name>clEnqueueReadBuffer</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>command_queue</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>overflow</name></name></expr></argument>, <argument><expr><name>CL_FALSE</name></expr></argument>,

<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>cl_int</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>overflow</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CL_FAIL_ON_ERROR</name><argument_list>(<argument><expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EIO</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"Failed to read overflow: %d.\n"</literal></expr></argument>, <argument><expr><name>cle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cle</name> <operator>=</operator> <call><name>clFinish</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>command_queue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CL_FAIL_ON_ERROR</name><argument_list>(<argument><expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EIO</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"Failed to finish kernel: %d.\n"</literal></expr></argument>, <argument><expr><name>cle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>overflow</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"integral image overflow %d\n"</literal></expr></argument>, <argument><expr><name>overflow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>input</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Filter output: %s, %ux%u (%"</literal><name>PRId64</name><literal type="string">").\n"</literal></expr></argument>,

<argument><expr><call><name>av_get_pix_fmt_name</name><argument_list>(<argument><expr><name><name>output</name><operator>-&gt;</operator><name>format</name></name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name><name>output</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>output</name><operator>-&gt;</operator><name>height</name></name></expr></argument>, <argument><expr><name><name>output</name><operator>-&gt;</operator><name>pts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>ff_filter_frame</name><argument_list>(<argument><expr><name>outlink</name></expr></argument>, <argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</return>

<label><name>fail</name>:</label>

<expr_stmt><expr><call><name>clFinish</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>command_queue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>input</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>err</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>void</name></type> <name>nlmeans_opencl_uninit</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>NLMeansOpenCLContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>cl_int</name></type> <name>cle</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>CL_RELEASE_KERNEL</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>vert_kernel</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CL_RELEASE_KERNEL</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>horiz_kernel</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CL_RELEASE_KERNEL</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>accum_kernel</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CL_RELEASE_KERNEL</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>average_kernel</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CL_RELEASE_MEMORY</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>integral_img</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CL_RELEASE_MEMORY</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>weight</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CL_RELEASE_MEMORY</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>sum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CL_RELEASE_MEMORY</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>overflow</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CL_RELEASE_QUEUE</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>command_queue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_opencl_filter_uninit</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OFFSET</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>offsetof(NLMeansOpenCLContext, x)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLAGS</name></cpp:macro> <cpp:value>(AV_OPT_FLAG_FILTERING_PARAM | AV_OPT_FLAG_VIDEO_PARAM)</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVOption</name></type> <name><name>nlmeans_opencl_options</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><literal type="string">"s"</literal></expr>, <expr><literal type="string">"denoising strength"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>sigma</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_DOUBLE</name></expr>, <expr><block>{ <expr><operator>.</operator><name>dbl</name> <operator>=</operator> <literal type="number">1.0</literal></expr> }</block></expr>, <expr><literal type="number">1.0</literal></expr>, <expr><literal type="number">30.0</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"p"</literal></expr>, <expr><literal type="string">"patch size"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>patch_size</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">2</literal><operator>*</operator><literal type="number">3</literal><operator>+</operator><literal type="number">1</literal></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">99</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"pc"</literal></expr>, <expr><literal type="string">"patch size for chroma planes"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>patch_size_uv</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0</literal></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">99</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"r"</literal></expr>, <expr><literal type="string">"research window"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>research_size</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">7</literal><operator>*</operator><literal type="number">2</literal><operator>+</operator><literal type="number">1</literal></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">99</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"rc"</literal></expr>, <expr><literal type="string">"research window for chroma planes"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>research_size_uv</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0</literal></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">99</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>AVFILTER_DEFINE_CLASS</name><argument_list>(<argument><expr><name>nlmeans_opencl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVFilterPad</name></type> <name><name>nlmeans_opencl_inputs</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"default"</literal></expr>,

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,

<expr><operator>.</operator><name>filter_frame</name> <operator>=</operator> <operator>&amp;</operator><name>nlmeans_opencl_filter_frame</name></expr>,

<expr><operator>.</operator><name>config_props</name> <operator>=</operator> <operator>&amp;</operator><name>ff_opencl_filter_config_input</name></expr>,

}</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVFilterPad</name></type> <name><name>nlmeans_opencl_outputs</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"default"</literal></expr>,

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,

<expr><operator>.</operator><name>config_props</name> <operator>=</operator> <operator>&amp;</operator><name>ff_opencl_filter_config_output</name></expr>,

}</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFilter</name></type> <name>ff_vf_nlmeans_opencl</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"nlmeans_opencl"</literal></expr>,

<expr><operator>.</operator><name>description</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"Non-local means denoiser through OpenCL"</literal></expr></argument>)</argument_list></call></expr>,

<expr><operator>.</operator><name>priv_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>NLMeansOpenCLContext</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><operator>.</operator><name>priv_class</name> <operator>=</operator> <operator>&amp;</operator><name>nlmeans_opencl_class</name></expr>,

<expr><operator>.</operator><name>init</name> <operator>=</operator> <operator>&amp;</operator><name>ff_opencl_filter_init</name></expr>,

<expr><operator>.</operator><name>uninit</name> <operator>=</operator> <operator>&amp;</operator><name>nlmeans_opencl_uninit</name></expr>,

<expr><operator>.</operator><name>query_formats</name> <operator>=</operator> <operator>&amp;</operator><name>ff_opencl_filter_query_formats</name></expr>,

<expr><operator>.</operator><name>inputs</name> <operator>=</operator> <name>nlmeans_opencl_inputs</name></expr>,

<expr><operator>.</operator><name>outputs</name> <operator>=</operator> <name>nlmeans_opencl_outputs</name></expr>,

<expr><operator>.</operator><name>flags_internal</name> <operator>=</operator> <name>FF_FILTER_FLAG_HWFRAME_AWARE</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

</unit>
