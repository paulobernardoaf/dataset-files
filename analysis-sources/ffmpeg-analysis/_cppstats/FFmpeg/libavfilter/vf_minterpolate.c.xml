<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavfilter\vf_minterpolate.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"motion_estimation.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavcodec/mathops.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avassert.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/common.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/motion_vector.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/opt.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/pixdesc.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avfilter.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"formats.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"video.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"scene_sad.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ME_MODE_BIDIR</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ME_MODE_BILAT</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MC_MODE_OBMC</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MC_MODE_AOBMC</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SCD_METHOD_NONE</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SCD_METHOD_FDIFF</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NB_FRAMES</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NB_PIXEL_MVS</name></cpp:macro> <cpp:value>32</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NB_CLUSTERS</name></cpp:macro> <cpp:value>128</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALPHA_MAX</name></cpp:macro> <cpp:value>1024</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLUSTER_THRESHOLD</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PX_WEIGHT_MAX</name></cpp:macro> <cpp:value>255</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COST_PRED_SCALE</name></cpp:macro> <cpp:value>64</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>obmc_linear32</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name> <init>= <expr><block>{

<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,

<expr><literal type="number">0</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">20</literal></expr>, <expr><literal type="number">20</literal></expr>, <expr><literal type="number">20</literal></expr>, <expr><literal type="number">24</literal></expr>, <expr><literal type="number">24</literal></expr>, <expr><literal type="number">20</literal></expr>, <expr><literal type="number">20</literal></expr>, <expr><literal type="number">20</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">0</literal></expr>,

<expr><literal type="number">0</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">20</literal></expr>, <expr><literal type="number">20</literal></expr>, <expr><literal type="number">24</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">32</literal></expr>, <expr><literal type="number">32</literal></expr>, <expr><literal type="number">36</literal></expr>, <expr><literal type="number">40</literal></expr>, <expr><literal type="number">40</literal></expr>, <expr><literal type="number">36</literal></expr>, <expr><literal type="number">32</literal></expr>, <expr><literal type="number">32</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">24</literal></expr>, <expr><literal type="number">20</literal></expr>, <expr><literal type="number">20</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">0</literal></expr>,

<expr><literal type="number">0</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">20</literal></expr>, <expr><literal type="number">24</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">32</literal></expr>, <expr><literal type="number">36</literal></expr>, <expr><literal type="number">40</literal></expr>, <expr><literal type="number">44</literal></expr>, <expr><literal type="number">48</literal></expr>, <expr><literal type="number">52</literal></expr>, <expr><literal type="number">56</literal></expr>, <expr><literal type="number">56</literal></expr>, <expr><literal type="number">52</literal></expr>, <expr><literal type="number">48</literal></expr>, <expr><literal type="number">44</literal></expr>, <expr><literal type="number">40</literal></expr>, <expr><literal type="number">36</literal></expr>, <expr><literal type="number">32</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">24</literal></expr>, <expr><literal type="number">20</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">0</literal></expr>,

<expr><literal type="number">4</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">20</literal></expr>, <expr><literal type="number">24</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">32</literal></expr>, <expr><literal type="number">40</literal></expr>, <expr><literal type="number">44</literal></expr>, <expr><literal type="number">48</literal></expr>, <expr><literal type="number">52</literal></expr>, <expr><literal type="number">56</literal></expr>, <expr><literal type="number">60</literal></expr>, <expr><literal type="number">64</literal></expr>, <expr><literal type="number">68</literal></expr>, <expr><literal type="number">68</literal></expr>, <expr><literal type="number">64</literal></expr>, <expr><literal type="number">60</literal></expr>, <expr><literal type="number">56</literal></expr>, <expr><literal type="number">52</literal></expr>, <expr><literal type="number">48</literal></expr>, <expr><literal type="number">44</literal></expr>, <expr><literal type="number">40</literal></expr>, <expr><literal type="number">32</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">24</literal></expr>, <expr><literal type="number">20</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">4</literal></expr>,

<expr><literal type="number">4</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">20</literal></expr>, <expr><literal type="number">24</literal></expr>, <expr><literal type="number">32</literal></expr>, <expr><literal type="number">36</literal></expr>, <expr><literal type="number">40</literal></expr>, <expr><literal type="number">48</literal></expr>, <expr><literal type="number">52</literal></expr>, <expr><literal type="number">56</literal></expr>, <expr><literal type="number">64</literal></expr>, <expr><literal type="number">68</literal></expr>, <expr><literal type="number">76</literal></expr>, <expr><literal type="number">80</literal></expr>, <expr><literal type="number">84</literal></expr>, <expr><literal type="number">84</literal></expr>, <expr><literal type="number">80</literal></expr>, <expr><literal type="number">76</literal></expr>, <expr><literal type="number">68</literal></expr>, <expr><literal type="number">64</literal></expr>, <expr><literal type="number">56</literal></expr>, <expr><literal type="number">52</literal></expr>, <expr><literal type="number">48</literal></expr>, <expr><literal type="number">40</literal></expr>, <expr><literal type="number">36</literal></expr>, <expr><literal type="number">32</literal></expr>, <expr><literal type="number">24</literal></expr>, <expr><literal type="number">20</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">4</literal></expr>,

<expr><literal type="number">4</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">24</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">36</literal></expr>, <expr><literal type="number">44</literal></expr>, <expr><literal type="number">48</literal></expr>, <expr><literal type="number">56</literal></expr>, <expr><literal type="number">60</literal></expr>, <expr><literal type="number">68</literal></expr>, <expr><literal type="number">76</literal></expr>, <expr><literal type="number">80</literal></expr>, <expr><literal type="number">88</literal></expr>, <expr><literal type="number">96</literal></expr>,<expr><literal type="number">100</literal></expr>,<expr><literal type="number">100</literal></expr>, <expr><literal type="number">96</literal></expr>, <expr><literal type="number">88</literal></expr>, <expr><literal type="number">80</literal></expr>, <expr><literal type="number">76</literal></expr>, <expr><literal type="number">68</literal></expr>, <expr><literal type="number">60</literal></expr>, <expr><literal type="number">56</literal></expr>, <expr><literal type="number">48</literal></expr>, <expr><literal type="number">44</literal></expr>, <expr><literal type="number">36</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">24</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">4</literal></expr>,

<expr><literal type="number">4</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">20</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">32</literal></expr>, <expr><literal type="number">40</literal></expr>, <expr><literal type="number">48</literal></expr>, <expr><literal type="number">56</literal></expr>, <expr><literal type="number">64</literal></expr>, <expr><literal type="number">72</literal></expr>, <expr><literal type="number">80</literal></expr>, <expr><literal type="number">88</literal></expr>, <expr><literal type="number">92</literal></expr>,<expr><literal type="number">100</literal></expr>,<expr><literal type="number">108</literal></expr>,<expr><literal type="number">116</literal></expr>,<expr><literal type="number">116</literal></expr>,<expr><literal type="number">108</literal></expr>,<expr><literal type="number">100</literal></expr>, <expr><literal type="number">92</literal></expr>, <expr><literal type="number">88</literal></expr>, <expr><literal type="number">80</literal></expr>, <expr><literal type="number">72</literal></expr>, <expr><literal type="number">64</literal></expr>, <expr><literal type="number">56</literal></expr>, <expr><literal type="number">48</literal></expr>, <expr><literal type="number">40</literal></expr>, <expr><literal type="number">32</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">20</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">4</literal></expr>,

<expr><literal type="number">4</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">20</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">40</literal></expr>, <expr><literal type="number">48</literal></expr>, <expr><literal type="number">56</literal></expr>, <expr><literal type="number">64</literal></expr>, <expr><literal type="number">72</literal></expr>, <expr><literal type="number">80</literal></expr>, <expr><literal type="number">88</literal></expr>, <expr><literal type="number">96</literal></expr>,<expr><literal type="number">108</literal></expr>,<expr><literal type="number">116</literal></expr>,<expr><literal type="number">124</literal></expr>,<expr><literal type="number">132</literal></expr>,<expr><literal type="number">132</literal></expr>,<expr><literal type="number">124</literal></expr>,<expr><literal type="number">116</literal></expr>,<expr><literal type="number">108</literal></expr>, <expr><literal type="number">96</literal></expr>, <expr><literal type="number">88</literal></expr>, <expr><literal type="number">80</literal></expr>, <expr><literal type="number">72</literal></expr>, <expr><literal type="number">64</literal></expr>, <expr><literal type="number">56</literal></expr>, <expr><literal type="number">48</literal></expr>, <expr><literal type="number">40</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">20</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">4</literal></expr>,

<expr><literal type="number">4</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">24</literal></expr>, <expr><literal type="number">32</literal></expr>, <expr><literal type="number">44</literal></expr>, <expr><literal type="number">52</literal></expr>, <expr><literal type="number">60</literal></expr>, <expr><literal type="number">72</literal></expr>, <expr><literal type="number">80</literal></expr>, <expr><literal type="number">92</literal></expr>,<expr><literal type="number">100</literal></expr>,<expr><literal type="number">108</literal></expr>,<expr><literal type="number">120</literal></expr>,<expr><literal type="number">128</literal></expr>,<expr><literal type="number">136</literal></expr>,<expr><literal type="number">148</literal></expr>,<expr><literal type="number">148</literal></expr>,<expr><literal type="number">136</literal></expr>,<expr><literal type="number">128</literal></expr>,<expr><literal type="number">120</literal></expr>,<expr><literal type="number">108</literal></expr>,<expr><literal type="number">100</literal></expr>, <expr><literal type="number">92</literal></expr>, <expr><literal type="number">80</literal></expr>, <expr><literal type="number">72</literal></expr>, <expr><literal type="number">60</literal></expr>, <expr><literal type="number">52</literal></expr>, <expr><literal type="number">44</literal></expr>, <expr><literal type="number">32</literal></expr>, <expr><literal type="number">24</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">4</literal></expr>,

<expr><literal type="number">4</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">36</literal></expr>, <expr><literal type="number">48</literal></expr>, <expr><literal type="number">56</literal></expr>, <expr><literal type="number">68</literal></expr>, <expr><literal type="number">80</literal></expr>, <expr><literal type="number">88</literal></expr>,<expr><literal type="number">100</literal></expr>,<expr><literal type="number">112</literal></expr>,<expr><literal type="number">120</literal></expr>,<expr><literal type="number">132</literal></expr>,<expr><literal type="number">140</literal></expr>,<expr><literal type="number">152</literal></expr>,<expr><literal type="number">164</literal></expr>,<expr><literal type="number">164</literal></expr>,<expr><literal type="number">152</literal></expr>,<expr><literal type="number">140</literal></expr>,<expr><literal type="number">132</literal></expr>,<expr><literal type="number">120</literal></expr>,<expr><literal type="number">112</literal></expr>,<expr><literal type="number">100</literal></expr>, <expr><literal type="number">88</literal></expr>, <expr><literal type="number">80</literal></expr>, <expr><literal type="number">68</literal></expr>, <expr><literal type="number">56</literal></expr>, <expr><literal type="number">48</literal></expr>, <expr><literal type="number">36</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">4</literal></expr>,

<expr><literal type="number">4</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">40</literal></expr>, <expr><literal type="number">52</literal></expr>, <expr><literal type="number">64</literal></expr>, <expr><literal type="number">76</literal></expr>, <expr><literal type="number">88</literal></expr>, <expr><literal type="number">96</literal></expr>,<expr><literal type="number">108</literal></expr>,<expr><literal type="number">120</literal></expr>,<expr><literal type="number">132</literal></expr>,<expr><literal type="number">144</literal></expr>,<expr><literal type="number">156</literal></expr>,<expr><literal type="number">168</literal></expr>,<expr><literal type="number">180</literal></expr>,<expr><literal type="number">180</literal></expr>,<expr><literal type="number">168</literal></expr>,<expr><literal type="number">156</literal></expr>,<expr><literal type="number">144</literal></expr>,<expr><literal type="number">132</literal></expr>,<expr><literal type="number">120</literal></expr>,<expr><literal type="number">108</literal></expr>, <expr><literal type="number">96</literal></expr>, <expr><literal type="number">88</literal></expr>, <expr><literal type="number">76</literal></expr>, <expr><literal type="number">64</literal></expr>, <expr><literal type="number">52</literal></expr>, <expr><literal type="number">40</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">4</literal></expr>,

<expr><literal type="number">8</literal></expr>, <expr><literal type="number">20</literal></expr>, <expr><literal type="number">32</literal></expr>, <expr><literal type="number">44</literal></expr>, <expr><literal type="number">56</literal></expr>, <expr><literal type="number">68</literal></expr>, <expr><literal type="number">80</literal></expr>, <expr><literal type="number">92</literal></expr>,<expr><literal type="number">108</literal></expr>,<expr><literal type="number">120</literal></expr>,<expr><literal type="number">132</literal></expr>,<expr><literal type="number">144</literal></expr>,<expr><literal type="number">156</literal></expr>,<expr><literal type="number">168</literal></expr>,<expr><literal type="number">180</literal></expr>,<expr><literal type="number">192</literal></expr>,<expr><literal type="number">192</literal></expr>,<expr><literal type="number">180</literal></expr>,<expr><literal type="number">168</literal></expr>,<expr><literal type="number">156</literal></expr>,<expr><literal type="number">144</literal></expr>,<expr><literal type="number">132</literal></expr>,<expr><literal type="number">120</literal></expr>,<expr><literal type="number">108</literal></expr>, <expr><literal type="number">92</literal></expr>, <expr><literal type="number">80</literal></expr>, <expr><literal type="number">68</literal></expr>, <expr><literal type="number">56</literal></expr>, <expr><literal type="number">44</literal></expr>, <expr><literal type="number">32</literal></expr>, <expr><literal type="number">20</literal></expr>, <expr><literal type="number">8</literal></expr>,

<expr><literal type="number">8</literal></expr>, <expr><literal type="number">20</literal></expr>, <expr><literal type="number">32</literal></expr>, <expr><literal type="number">48</literal></expr>, <expr><literal type="number">60</literal></expr>, <expr><literal type="number">76</literal></expr>, <expr><literal type="number">88</literal></expr>,<expr><literal type="number">100</literal></expr>,<expr><literal type="number">116</literal></expr>,<expr><literal type="number">128</literal></expr>,<expr><literal type="number">140</literal></expr>,<expr><literal type="number">156</literal></expr>,<expr><literal type="number">168</literal></expr>,<expr><literal type="number">184</literal></expr>,<expr><literal type="number">196</literal></expr>,<expr><literal type="number">208</literal></expr>,<expr><literal type="number">208</literal></expr>,<expr><literal type="number">196</literal></expr>,<expr><literal type="number">184</literal></expr>,<expr><literal type="number">168</literal></expr>,<expr><literal type="number">156</literal></expr>,<expr><literal type="number">140</literal></expr>,<expr><literal type="number">128</literal></expr>,<expr><literal type="number">116</literal></expr>,<expr><literal type="number">100</literal></expr>, <expr><literal type="number">88</literal></expr>, <expr><literal type="number">76</literal></expr>, <expr><literal type="number">60</literal></expr>, <expr><literal type="number">48</literal></expr>, <expr><literal type="number">32</literal></expr>, <expr><literal type="number">20</literal></expr>, <expr><literal type="number">8</literal></expr>,

<expr><literal type="number">8</literal></expr>, <expr><literal type="number">20</literal></expr>, <expr><literal type="number">36</literal></expr>, <expr><literal type="number">52</literal></expr>, <expr><literal type="number">64</literal></expr>, <expr><literal type="number">80</literal></expr>, <expr><literal type="number">96</literal></expr>,<expr><literal type="number">108</literal></expr>,<expr><literal type="number">124</literal></expr>,<expr><literal type="number">136</literal></expr>,<expr><literal type="number">152</literal></expr>,<expr><literal type="number">168</literal></expr>,<expr><literal type="number">180</literal></expr>,<expr><literal type="number">196</literal></expr>,<expr><literal type="number">212</literal></expr>,<expr><literal type="number">224</literal></expr>,<expr><literal type="number">224</literal></expr>,<expr><literal type="number">212</literal></expr>,<expr><literal type="number">196</literal></expr>,<expr><literal type="number">180</literal></expr>,<expr><literal type="number">168</literal></expr>,<expr><literal type="number">152</literal></expr>,<expr><literal type="number">136</literal></expr>,<expr><literal type="number">124</literal></expr>,<expr><literal type="number">108</literal></expr>, <expr><literal type="number">96</literal></expr>, <expr><literal type="number">80</literal></expr>, <expr><literal type="number">64</literal></expr>, <expr><literal type="number">52</literal></expr>, <expr><literal type="number">36</literal></expr>, <expr><literal type="number">20</literal></expr>, <expr><literal type="number">8</literal></expr>,

<expr><literal type="number">8</literal></expr>, <expr><literal type="number">24</literal></expr>, <expr><literal type="number">40</literal></expr>, <expr><literal type="number">56</literal></expr>, <expr><literal type="number">68</literal></expr>, <expr><literal type="number">84</literal></expr>,<expr><literal type="number">100</literal></expr>,<expr><literal type="number">116</literal></expr>,<expr><literal type="number">132</literal></expr>,<expr><literal type="number">148</literal></expr>,<expr><literal type="number">164</literal></expr>,<expr><literal type="number">180</literal></expr>,<expr><literal type="number">192</literal></expr>,<expr><literal type="number">208</literal></expr>,<expr><literal type="number">224</literal></expr>,<expr><literal type="number">240</literal></expr>,<expr><literal type="number">240</literal></expr>,<expr><literal type="number">224</literal></expr>,<expr><literal type="number">208</literal></expr>,<expr><literal type="number">192</literal></expr>,<expr><literal type="number">180</literal></expr>,<expr><literal type="number">164</literal></expr>,<expr><literal type="number">148</literal></expr>,<expr><literal type="number">132</literal></expr>,<expr><literal type="number">116</literal></expr>,<expr><literal type="number">100</literal></expr>, <expr><literal type="number">84</literal></expr>, <expr><literal type="number">68</literal></expr>, <expr><literal type="number">56</literal></expr>, <expr><literal type="number">40</literal></expr>, <expr><literal type="number">24</literal></expr>, <expr><literal type="number">8</literal></expr>,

<expr><literal type="number">8</literal></expr>, <expr><literal type="number">24</literal></expr>, <expr><literal type="number">40</literal></expr>, <expr><literal type="number">56</literal></expr>, <expr><literal type="number">68</literal></expr>, <expr><literal type="number">84</literal></expr>,<expr><literal type="number">100</literal></expr>,<expr><literal type="number">116</literal></expr>,<expr><literal type="number">132</literal></expr>,<expr><literal type="number">148</literal></expr>,<expr><literal type="number">164</literal></expr>,<expr><literal type="number">180</literal></expr>,<expr><literal type="number">192</literal></expr>,<expr><literal type="number">208</literal></expr>,<expr><literal type="number">224</literal></expr>,<expr><literal type="number">240</literal></expr>,<expr><literal type="number">240</literal></expr>,<expr><literal type="number">224</literal></expr>,<expr><literal type="number">208</literal></expr>,<expr><literal type="number">192</literal></expr>,<expr><literal type="number">180</literal></expr>,<expr><literal type="number">164</literal></expr>,<expr><literal type="number">148</literal></expr>,<expr><literal type="number">132</literal></expr>,<expr><literal type="number">116</literal></expr>,<expr><literal type="number">100</literal></expr>, <expr><literal type="number">84</literal></expr>, <expr><literal type="number">68</literal></expr>, <expr><literal type="number">56</literal></expr>, <expr><literal type="number">40</literal></expr>, <expr><literal type="number">24</literal></expr>, <expr><literal type="number">8</literal></expr>,

<expr><literal type="number">8</literal></expr>, <expr><literal type="number">20</literal></expr>, <expr><literal type="number">36</literal></expr>, <expr><literal type="number">52</literal></expr>, <expr><literal type="number">64</literal></expr>, <expr><literal type="number">80</literal></expr>, <expr><literal type="number">96</literal></expr>,<expr><literal type="number">108</literal></expr>,<expr><literal type="number">124</literal></expr>,<expr><literal type="number">136</literal></expr>,<expr><literal type="number">152</literal></expr>,<expr><literal type="number">168</literal></expr>,<expr><literal type="number">180</literal></expr>,<expr><literal type="number">196</literal></expr>,<expr><literal type="number">212</literal></expr>,<expr><literal type="number">224</literal></expr>,<expr><literal type="number">224</literal></expr>,<expr><literal type="number">212</literal></expr>,<expr><literal type="number">196</literal></expr>,<expr><literal type="number">180</literal></expr>,<expr><literal type="number">168</literal></expr>,<expr><literal type="number">152</literal></expr>,<expr><literal type="number">136</literal></expr>,<expr><literal type="number">124</literal></expr>,<expr><literal type="number">108</literal></expr>, <expr><literal type="number">96</literal></expr>, <expr><literal type="number">80</literal></expr>, <expr><literal type="number">64</literal></expr>, <expr><literal type="number">52</literal></expr>, <expr><literal type="number">36</literal></expr>, <expr><literal type="number">20</literal></expr>, <expr><literal type="number">8</literal></expr>,

<expr><literal type="number">8</literal></expr>, <expr><literal type="number">20</literal></expr>, <expr><literal type="number">32</literal></expr>, <expr><literal type="number">48</literal></expr>, <expr><literal type="number">60</literal></expr>, <expr><literal type="number">76</literal></expr>, <expr><literal type="number">88</literal></expr>,<expr><literal type="number">100</literal></expr>,<expr><literal type="number">116</literal></expr>,<expr><literal type="number">128</literal></expr>,<expr><literal type="number">140</literal></expr>,<expr><literal type="number">156</literal></expr>,<expr><literal type="number">168</literal></expr>,<expr><literal type="number">184</literal></expr>,<expr><literal type="number">196</literal></expr>,<expr><literal type="number">208</literal></expr>,<expr><literal type="number">208</literal></expr>,<expr><literal type="number">196</literal></expr>,<expr><literal type="number">184</literal></expr>,<expr><literal type="number">168</literal></expr>,<expr><literal type="number">156</literal></expr>,<expr><literal type="number">140</literal></expr>,<expr><literal type="number">128</literal></expr>,<expr><literal type="number">116</literal></expr>,<expr><literal type="number">100</literal></expr>, <expr><literal type="number">88</literal></expr>, <expr><literal type="number">76</literal></expr>, <expr><literal type="number">60</literal></expr>, <expr><literal type="number">48</literal></expr>, <expr><literal type="number">32</literal></expr>, <expr><literal type="number">20</literal></expr>, <expr><literal type="number">8</literal></expr>,

<expr><literal type="number">8</literal></expr>, <expr><literal type="number">20</literal></expr>, <expr><literal type="number">32</literal></expr>, <expr><literal type="number">44</literal></expr>, <expr><literal type="number">56</literal></expr>, <expr><literal type="number">68</literal></expr>, <expr><literal type="number">80</literal></expr>, <expr><literal type="number">92</literal></expr>,<expr><literal type="number">108</literal></expr>,<expr><literal type="number">120</literal></expr>,<expr><literal type="number">132</literal></expr>,<expr><literal type="number">144</literal></expr>,<expr><literal type="number">156</literal></expr>,<expr><literal type="number">168</literal></expr>,<expr><literal type="number">180</literal></expr>,<expr><literal type="number">192</literal></expr>,<expr><literal type="number">192</literal></expr>,<expr><literal type="number">180</literal></expr>,<expr><literal type="number">168</literal></expr>,<expr><literal type="number">156</literal></expr>,<expr><literal type="number">144</literal></expr>,<expr><literal type="number">132</literal></expr>,<expr><literal type="number">120</literal></expr>,<expr><literal type="number">108</literal></expr>, <expr><literal type="number">92</literal></expr>, <expr><literal type="number">80</literal></expr>, <expr><literal type="number">68</literal></expr>, <expr><literal type="number">56</literal></expr>, <expr><literal type="number">44</literal></expr>, <expr><literal type="number">32</literal></expr>, <expr><literal type="number">20</literal></expr>, <expr><literal type="number">8</literal></expr>,

<expr><literal type="number">4</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">40</literal></expr>, <expr><literal type="number">52</literal></expr>, <expr><literal type="number">64</literal></expr>, <expr><literal type="number">76</literal></expr>, <expr><literal type="number">88</literal></expr>, <expr><literal type="number">96</literal></expr>,<expr><literal type="number">108</literal></expr>,<expr><literal type="number">120</literal></expr>,<expr><literal type="number">132</literal></expr>,<expr><literal type="number">144</literal></expr>,<expr><literal type="number">156</literal></expr>,<expr><literal type="number">168</literal></expr>,<expr><literal type="number">180</literal></expr>,<expr><literal type="number">180</literal></expr>,<expr><literal type="number">168</literal></expr>,<expr><literal type="number">156</literal></expr>,<expr><literal type="number">144</literal></expr>,<expr><literal type="number">132</literal></expr>,<expr><literal type="number">120</literal></expr>,<expr><literal type="number">108</literal></expr>, <expr><literal type="number">96</literal></expr>, <expr><literal type="number">88</literal></expr>, <expr><literal type="number">76</literal></expr>, <expr><literal type="number">64</literal></expr>, <expr><literal type="number">52</literal></expr>, <expr><literal type="number">40</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">4</literal></expr>,

<expr><literal type="number">4</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">36</literal></expr>, <expr><literal type="number">48</literal></expr>, <expr><literal type="number">56</literal></expr>, <expr><literal type="number">68</literal></expr>, <expr><literal type="number">80</literal></expr>, <expr><literal type="number">88</literal></expr>,<expr><literal type="number">100</literal></expr>,<expr><literal type="number">112</literal></expr>,<expr><literal type="number">120</literal></expr>,<expr><literal type="number">132</literal></expr>,<expr><literal type="number">140</literal></expr>,<expr><literal type="number">152</literal></expr>,<expr><literal type="number">164</literal></expr>,<expr><literal type="number">164</literal></expr>,<expr><literal type="number">152</literal></expr>,<expr><literal type="number">140</literal></expr>,<expr><literal type="number">132</literal></expr>,<expr><literal type="number">120</literal></expr>,<expr><literal type="number">112</literal></expr>,<expr><literal type="number">100</literal></expr>, <expr><literal type="number">88</literal></expr>, <expr><literal type="number">80</literal></expr>, <expr><literal type="number">68</literal></expr>, <expr><literal type="number">56</literal></expr>, <expr><literal type="number">48</literal></expr>, <expr><literal type="number">36</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">4</literal></expr>,

<expr><literal type="number">4</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">24</literal></expr>, <expr><literal type="number">32</literal></expr>, <expr><literal type="number">44</literal></expr>, <expr><literal type="number">52</literal></expr>, <expr><literal type="number">60</literal></expr>, <expr><literal type="number">72</literal></expr>, <expr><literal type="number">80</literal></expr>, <expr><literal type="number">92</literal></expr>,<expr><literal type="number">100</literal></expr>,<expr><literal type="number">108</literal></expr>,<expr><literal type="number">120</literal></expr>,<expr><literal type="number">128</literal></expr>,<expr><literal type="number">136</literal></expr>,<expr><literal type="number">148</literal></expr>,<expr><literal type="number">148</literal></expr>,<expr><literal type="number">136</literal></expr>,<expr><literal type="number">128</literal></expr>,<expr><literal type="number">120</literal></expr>,<expr><literal type="number">108</literal></expr>,<expr><literal type="number">100</literal></expr>, <expr><literal type="number">92</literal></expr>, <expr><literal type="number">80</literal></expr>, <expr><literal type="number">72</literal></expr>, <expr><literal type="number">60</literal></expr>, <expr><literal type="number">52</literal></expr>, <expr><literal type="number">44</literal></expr>, <expr><literal type="number">32</literal></expr>, <expr><literal type="number">24</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">4</literal></expr>,

<expr><literal type="number">4</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">20</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">40</literal></expr>, <expr><literal type="number">48</literal></expr>, <expr><literal type="number">56</literal></expr>, <expr><literal type="number">64</literal></expr>, <expr><literal type="number">72</literal></expr>, <expr><literal type="number">80</literal></expr>, <expr><literal type="number">88</literal></expr>, <expr><literal type="number">96</literal></expr>,<expr><literal type="number">108</literal></expr>,<expr><literal type="number">116</literal></expr>,<expr><literal type="number">124</literal></expr>,<expr><literal type="number">132</literal></expr>,<expr><literal type="number">132</literal></expr>,<expr><literal type="number">124</literal></expr>,<expr><literal type="number">116</literal></expr>,<expr><literal type="number">108</literal></expr>, <expr><literal type="number">96</literal></expr>, <expr><literal type="number">88</literal></expr>, <expr><literal type="number">80</literal></expr>, <expr><literal type="number">72</literal></expr>, <expr><literal type="number">64</literal></expr>, <expr><literal type="number">56</literal></expr>, <expr><literal type="number">48</literal></expr>, <expr><literal type="number">40</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">20</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">4</literal></expr>,

<expr><literal type="number">4</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">20</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">32</literal></expr>, <expr><literal type="number">40</literal></expr>, <expr><literal type="number">48</literal></expr>, <expr><literal type="number">56</literal></expr>, <expr><literal type="number">64</literal></expr>, <expr><literal type="number">72</literal></expr>, <expr><literal type="number">80</literal></expr>, <expr><literal type="number">88</literal></expr>, <expr><literal type="number">92</literal></expr>,<expr><literal type="number">100</literal></expr>,<expr><literal type="number">108</literal></expr>,<expr><literal type="number">116</literal></expr>,<expr><literal type="number">116</literal></expr>,<expr><literal type="number">108</literal></expr>,<expr><literal type="number">100</literal></expr>, <expr><literal type="number">92</literal></expr>, <expr><literal type="number">88</literal></expr>, <expr><literal type="number">80</literal></expr>, <expr><literal type="number">72</literal></expr>, <expr><literal type="number">64</literal></expr>, <expr><literal type="number">56</literal></expr>, <expr><literal type="number">48</literal></expr>, <expr><literal type="number">40</literal></expr>, <expr><literal type="number">32</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">20</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">4</literal></expr>,

<expr><literal type="number">4</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">24</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">36</literal></expr>, <expr><literal type="number">44</literal></expr>, <expr><literal type="number">48</literal></expr>, <expr><literal type="number">56</literal></expr>, <expr><literal type="number">60</literal></expr>, <expr><literal type="number">68</literal></expr>, <expr><literal type="number">76</literal></expr>, <expr><literal type="number">80</literal></expr>, <expr><literal type="number">88</literal></expr>, <expr><literal type="number">96</literal></expr>,<expr><literal type="number">100</literal></expr>,<expr><literal type="number">100</literal></expr>, <expr><literal type="number">96</literal></expr>, <expr><literal type="number">88</literal></expr>, <expr><literal type="number">80</literal></expr>, <expr><literal type="number">76</literal></expr>, <expr><literal type="number">68</literal></expr>, <expr><literal type="number">60</literal></expr>, <expr><literal type="number">56</literal></expr>, <expr><literal type="number">48</literal></expr>, <expr><literal type="number">44</literal></expr>, <expr><literal type="number">36</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">24</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">4</literal></expr>,

<expr><literal type="number">4</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">20</literal></expr>, <expr><literal type="number">24</literal></expr>, <expr><literal type="number">32</literal></expr>, <expr><literal type="number">36</literal></expr>, <expr><literal type="number">40</literal></expr>, <expr><literal type="number">48</literal></expr>, <expr><literal type="number">52</literal></expr>, <expr><literal type="number">56</literal></expr>, <expr><literal type="number">64</literal></expr>, <expr><literal type="number">68</literal></expr>, <expr><literal type="number">76</literal></expr>, <expr><literal type="number">80</literal></expr>, <expr><literal type="number">84</literal></expr>, <expr><literal type="number">84</literal></expr>, <expr><literal type="number">80</literal></expr>, <expr><literal type="number">76</literal></expr>, <expr><literal type="number">68</literal></expr>, <expr><literal type="number">64</literal></expr>, <expr><literal type="number">56</literal></expr>, <expr><literal type="number">52</literal></expr>, <expr><literal type="number">48</literal></expr>, <expr><literal type="number">40</literal></expr>, <expr><literal type="number">36</literal></expr>, <expr><literal type="number">32</literal></expr>, <expr><literal type="number">24</literal></expr>, <expr><literal type="number">20</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">4</literal></expr>,

<expr><literal type="number">4</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">20</literal></expr>, <expr><literal type="number">24</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">32</literal></expr>, <expr><literal type="number">40</literal></expr>, <expr><literal type="number">44</literal></expr>, <expr><literal type="number">48</literal></expr>, <expr><literal type="number">52</literal></expr>, <expr><literal type="number">56</literal></expr>, <expr><literal type="number">60</literal></expr>, <expr><literal type="number">64</literal></expr>, <expr><literal type="number">68</literal></expr>, <expr><literal type="number">68</literal></expr>, <expr><literal type="number">64</literal></expr>, <expr><literal type="number">60</literal></expr>, <expr><literal type="number">56</literal></expr>, <expr><literal type="number">52</literal></expr>, <expr><literal type="number">48</literal></expr>, <expr><literal type="number">44</literal></expr>, <expr><literal type="number">40</literal></expr>, <expr><literal type="number">32</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">24</literal></expr>, <expr><literal type="number">20</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">4</literal></expr>,

<expr><literal type="number">0</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">20</literal></expr>, <expr><literal type="number">24</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">32</literal></expr>, <expr><literal type="number">36</literal></expr>, <expr><literal type="number">40</literal></expr>, <expr><literal type="number">44</literal></expr>, <expr><literal type="number">48</literal></expr>, <expr><literal type="number">52</literal></expr>, <expr><literal type="number">56</literal></expr>, <expr><literal type="number">56</literal></expr>, <expr><literal type="number">52</literal></expr>, <expr><literal type="number">48</literal></expr>, <expr><literal type="number">44</literal></expr>, <expr><literal type="number">40</literal></expr>, <expr><literal type="number">36</literal></expr>, <expr><literal type="number">32</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">24</literal></expr>, <expr><literal type="number">20</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">0</literal></expr>,

<expr><literal type="number">0</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">20</literal></expr>, <expr><literal type="number">20</literal></expr>, <expr><literal type="number">24</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">32</literal></expr>, <expr><literal type="number">32</literal></expr>, <expr><literal type="number">36</literal></expr>, <expr><literal type="number">40</literal></expr>, <expr><literal type="number">40</literal></expr>, <expr><literal type="number">36</literal></expr>, <expr><literal type="number">32</literal></expr>, <expr><literal type="number">32</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">24</literal></expr>, <expr><literal type="number">20</literal></expr>, <expr><literal type="number">20</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">0</literal></expr>,

<expr><literal type="number">0</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">20</literal></expr>, <expr><literal type="number">20</literal></expr>, <expr><literal type="number">20</literal></expr>, <expr><literal type="number">24</literal></expr>, <expr><literal type="number">24</literal></expr>, <expr><literal type="number">20</literal></expr>, <expr><literal type="number">20</literal></expr>, <expr><literal type="number">20</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">0</literal></expr>,

<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>obmc_linear16</name><index>[<expr><literal type="number">256</literal></expr>]</index></name> <init>= <expr><block>{

<expr><literal type="number">0</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">0</literal></expr>,

<expr><literal type="number">4</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">20</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">32</literal></expr>, <expr><literal type="number">40</literal></expr>, <expr><literal type="number">44</literal></expr>, <expr><literal type="number">44</literal></expr>, <expr><literal type="number">40</literal></expr>, <expr><literal type="number">32</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">20</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">4</literal></expr>,

<expr><literal type="number">4</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">24</literal></expr>, <expr><literal type="number">36</literal></expr>, <expr><literal type="number">44</literal></expr>, <expr><literal type="number">56</literal></expr>, <expr><literal type="number">64</literal></expr>, <expr><literal type="number">76</literal></expr>, <expr><literal type="number">76</literal></expr>, <expr><literal type="number">64</literal></expr>, <expr><literal type="number">56</literal></expr>, <expr><literal type="number">44</literal></expr>, <expr><literal type="number">36</literal></expr>, <expr><literal type="number">24</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">4</literal></expr>,

<expr><literal type="number">8</literal></expr>, <expr><literal type="number">20</literal></expr>, <expr><literal type="number">36</literal></expr>, <expr><literal type="number">48</literal></expr>, <expr><literal type="number">64</literal></expr>, <expr><literal type="number">76</literal></expr>, <expr><literal type="number">92</literal></expr>,<expr><literal type="number">104</literal></expr>,<expr><literal type="number">104</literal></expr>, <expr><literal type="number">92</literal></expr>, <expr><literal type="number">76</literal></expr>, <expr><literal type="number">64</literal></expr>, <expr><literal type="number">48</literal></expr>, <expr><literal type="number">36</literal></expr>, <expr><literal type="number">20</literal></expr>, <expr><literal type="number">8</literal></expr>,

<expr><literal type="number">8</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">44</literal></expr>, <expr><literal type="number">64</literal></expr>, <expr><literal type="number">80</literal></expr>,<expr><literal type="number">100</literal></expr>,<expr><literal type="number">116</literal></expr>,<expr><literal type="number">136</literal></expr>,<expr><literal type="number">136</literal></expr>,<expr><literal type="number">116</literal></expr>,<expr><literal type="number">100</literal></expr>, <expr><literal type="number">80</literal></expr>, <expr><literal type="number">64</literal></expr>, <expr><literal type="number">44</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">8</literal></expr>,

<expr><literal type="number">12</literal></expr>, <expr><literal type="number">32</literal></expr>, <expr><literal type="number">56</literal></expr>, <expr><literal type="number">76</literal></expr>,<expr><literal type="number">100</literal></expr>,<expr><literal type="number">120</literal></expr>,<expr><literal type="number">144</literal></expr>,<expr><literal type="number">164</literal></expr>,<expr><literal type="number">164</literal></expr>,<expr><literal type="number">144</literal></expr>,<expr><literal type="number">120</literal></expr>,<expr><literal type="number">100</literal></expr>, <expr><literal type="number">76</literal></expr>, <expr><literal type="number">56</literal></expr>, <expr><literal type="number">32</literal></expr>, <expr><literal type="number">12</literal></expr>,

<expr><literal type="number">12</literal></expr>, <expr><literal type="number">40</literal></expr>, <expr><literal type="number">64</literal></expr>, <expr><literal type="number">92</literal></expr>,<expr><literal type="number">116</literal></expr>,<expr><literal type="number">144</literal></expr>,<expr><literal type="number">168</literal></expr>,<expr><literal type="number">196</literal></expr>,<expr><literal type="number">196</literal></expr>,<expr><literal type="number">168</literal></expr>,<expr><literal type="number">144</literal></expr>,<expr><literal type="number">116</literal></expr>, <expr><literal type="number">92</literal></expr>, <expr><literal type="number">64</literal></expr>, <expr><literal type="number">40</literal></expr>, <expr><literal type="number">12</literal></expr>,

<expr><literal type="number">16</literal></expr>, <expr><literal type="number">44</literal></expr>, <expr><literal type="number">76</literal></expr>,<expr><literal type="number">104</literal></expr>,<expr><literal type="number">136</literal></expr>,<expr><literal type="number">164</literal></expr>,<expr><literal type="number">196</literal></expr>,<expr><literal type="number">224</literal></expr>,<expr><literal type="number">224</literal></expr>,<expr><literal type="number">196</literal></expr>,<expr><literal type="number">164</literal></expr>,<expr><literal type="number">136</literal></expr>,<expr><literal type="number">104</literal></expr>, <expr><literal type="number">76</literal></expr>, <expr><literal type="number">44</literal></expr>, <expr><literal type="number">16</literal></expr>,

<expr><literal type="number">16</literal></expr>, <expr><literal type="number">44</literal></expr>, <expr><literal type="number">76</literal></expr>,<expr><literal type="number">104</literal></expr>,<expr><literal type="number">136</literal></expr>,<expr><literal type="number">164</literal></expr>,<expr><literal type="number">196</literal></expr>,<expr><literal type="number">224</literal></expr>,<expr><literal type="number">224</literal></expr>,<expr><literal type="number">196</literal></expr>,<expr><literal type="number">164</literal></expr>,<expr><literal type="number">136</literal></expr>,<expr><literal type="number">104</literal></expr>, <expr><literal type="number">76</literal></expr>, <expr><literal type="number">44</literal></expr>, <expr><literal type="number">16</literal></expr>,

<expr><literal type="number">12</literal></expr>, <expr><literal type="number">40</literal></expr>, <expr><literal type="number">64</literal></expr>, <expr><literal type="number">92</literal></expr>,<expr><literal type="number">116</literal></expr>,<expr><literal type="number">144</literal></expr>,<expr><literal type="number">168</literal></expr>,<expr><literal type="number">196</literal></expr>,<expr><literal type="number">196</literal></expr>,<expr><literal type="number">168</literal></expr>,<expr><literal type="number">144</literal></expr>,<expr><literal type="number">116</literal></expr>, <expr><literal type="number">92</literal></expr>, <expr><literal type="number">64</literal></expr>, <expr><literal type="number">40</literal></expr>, <expr><literal type="number">12</literal></expr>,

<expr><literal type="number">12</literal></expr>, <expr><literal type="number">32</literal></expr>, <expr><literal type="number">56</literal></expr>, <expr><literal type="number">76</literal></expr>,<expr><literal type="number">100</literal></expr>,<expr><literal type="number">120</literal></expr>,<expr><literal type="number">144</literal></expr>,<expr><literal type="number">164</literal></expr>,<expr><literal type="number">164</literal></expr>,<expr><literal type="number">144</literal></expr>,<expr><literal type="number">120</literal></expr>,<expr><literal type="number">100</literal></expr>, <expr><literal type="number">76</literal></expr>, <expr><literal type="number">56</literal></expr>, <expr><literal type="number">32</literal></expr>, <expr><literal type="number">12</literal></expr>,

<expr><literal type="number">8</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">44</literal></expr>, <expr><literal type="number">64</literal></expr>, <expr><literal type="number">80</literal></expr>,<expr><literal type="number">100</literal></expr>,<expr><literal type="number">116</literal></expr>,<expr><literal type="number">136</literal></expr>,<expr><literal type="number">136</literal></expr>,<expr><literal type="number">116</literal></expr>,<expr><literal type="number">100</literal></expr>, <expr><literal type="number">80</literal></expr>, <expr><literal type="number">64</literal></expr>, <expr><literal type="number">44</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">8</literal></expr>,

<expr><literal type="number">8</literal></expr>, <expr><literal type="number">20</literal></expr>, <expr><literal type="number">36</literal></expr>, <expr><literal type="number">48</literal></expr>, <expr><literal type="number">64</literal></expr>, <expr><literal type="number">76</literal></expr>, <expr><literal type="number">92</literal></expr>,<expr><literal type="number">104</literal></expr>,<expr><literal type="number">104</literal></expr>, <expr><literal type="number">92</literal></expr>, <expr><literal type="number">76</literal></expr>, <expr><literal type="number">64</literal></expr>, <expr><literal type="number">48</literal></expr>, <expr><literal type="number">36</literal></expr>, <expr><literal type="number">20</literal></expr>, <expr><literal type="number">8</literal></expr>,

<expr><literal type="number">4</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">24</literal></expr>, <expr><literal type="number">36</literal></expr>, <expr><literal type="number">44</literal></expr>, <expr><literal type="number">56</literal></expr>, <expr><literal type="number">64</literal></expr>, <expr><literal type="number">76</literal></expr>, <expr><literal type="number">76</literal></expr>, <expr><literal type="number">64</literal></expr>, <expr><literal type="number">56</literal></expr>, <expr><literal type="number">44</literal></expr>, <expr><literal type="number">36</literal></expr>, <expr><literal type="number">24</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">4</literal></expr>,

<expr><literal type="number">4</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">20</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">32</literal></expr>, <expr><literal type="number">40</literal></expr>, <expr><literal type="number">44</literal></expr>, <expr><literal type="number">44</literal></expr>, <expr><literal type="number">40</literal></expr>, <expr><literal type="number">32</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">20</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">4</literal></expr>,

<expr><literal type="number">0</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">0</literal></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>obmc_linear8</name><index>[<expr><literal type="number">64</literal></expr>]</index></name> <init>= <expr><block>{

<expr><literal type="number">4</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">20</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">20</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">4</literal></expr>,

<expr><literal type="number">12</literal></expr>, <expr><literal type="number">36</literal></expr>, <expr><literal type="number">60</literal></expr>, <expr><literal type="number">84</literal></expr>, <expr><literal type="number">84</literal></expr>, <expr><literal type="number">60</literal></expr>, <expr><literal type="number">36</literal></expr>, <expr><literal type="number">12</literal></expr>,

<expr><literal type="number">20</literal></expr>, <expr><literal type="number">60</literal></expr>,<expr><literal type="number">100</literal></expr>,<expr><literal type="number">140</literal></expr>,<expr><literal type="number">140</literal></expr>,<expr><literal type="number">100</literal></expr>, <expr><literal type="number">60</literal></expr>, <expr><literal type="number">20</literal></expr>,

<expr><literal type="number">28</literal></expr>, <expr><literal type="number">84</literal></expr>,<expr><literal type="number">140</literal></expr>,<expr><literal type="number">196</literal></expr>,<expr><literal type="number">196</literal></expr>,<expr><literal type="number">140</literal></expr>, <expr><literal type="number">84</literal></expr>, <expr><literal type="number">28</literal></expr>,

<expr><literal type="number">28</literal></expr>, <expr><literal type="number">84</literal></expr>,<expr><literal type="number">140</literal></expr>,<expr><literal type="number">196</literal></expr>,<expr><literal type="number">196</literal></expr>,<expr><literal type="number">140</literal></expr>, <expr><literal type="number">84</literal></expr>, <expr><literal type="number">28</literal></expr>,

<expr><literal type="number">20</literal></expr>, <expr><literal type="number">60</literal></expr>,<expr><literal type="number">100</literal></expr>,<expr><literal type="number">140</literal></expr>,<expr><literal type="number">140</literal></expr>,<expr><literal type="number">100</literal></expr>, <expr><literal type="number">60</literal></expr>, <expr><literal type="number">20</literal></expr>,

<expr><literal type="number">12</literal></expr>, <expr><literal type="number">36</literal></expr>, <expr><literal type="number">60</literal></expr>, <expr><literal type="number">84</literal></expr>, <expr><literal type="number">84</literal></expr>, <expr><literal type="number">60</literal></expr>, <expr><literal type="number">36</literal></expr>, <expr><literal type="number">12</literal></expr>,

<expr><literal type="number">4</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">20</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">20</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">4</literal></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>obmc_linear4</name><index>[<expr><literal type="number">16</literal></expr>]</index></name> <init>= <expr><block>{

<expr><literal type="number">16</literal></expr>, <expr><literal type="number">48</literal></expr>, <expr><literal type="number">48</literal></expr>, <expr><literal type="number">16</literal></expr>,

<expr><literal type="number">48</literal></expr>,<expr><literal type="number">144</literal></expr>,<expr><literal type="number">144</literal></expr>, <expr><literal type="number">48</literal></expr>,

<expr><literal type="number">48</literal></expr>,<expr><literal type="number">144</literal></expr>,<expr><literal type="number">144</literal></expr>, <expr><literal type="number">48</literal></expr>,

<expr><literal type="number">16</literal></expr>, <expr><literal type="number">48</literal></expr>, <expr><literal type="number">48</literal></expr>, <expr><literal type="number">16</literal></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier> <specifier>const</specifier></type> <name><name>obmc_tab_linear</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><init>= <expr><block>{

<expr><name>obmc_linear32</name></expr>, <expr><name>obmc_linear16</name></expr>, <expr><name>obmc_linear8</name></expr>, <expr><name>obmc_linear4</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<enum>enum <name>MIMode</name> <block>{

<decl><name>MI_MODE_DUP</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,

<decl><name>MI_MODE_BLEND</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,

<decl><name>MI_MODE_MCI</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>,

}</block>;</enum>

<typedef>typedef <type><struct>struct <name>Cluster</name> <block>{

<decl_stmt><decl><type><name>int64_t</name></type> <name><name>sum</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>nb</name></decl>;</decl_stmt>

}</block></struct></type> <name>Cluster</name>;</typedef>

<typedef>typedef <type><struct>struct <name>Block</name> <block>{

<decl_stmt><decl><type><name>int16_t</name></type> <name><name>mvs</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>cid</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>sbad</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>sb</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>Block</name></name> <modifier>*</modifier></type><name>subs</name></decl>;</decl_stmt>

}</block></struct></type> <name>Block</name>;</typedef>

<typedef>typedef <type><struct>struct <name>PixelMVS</name> <block>{

<decl_stmt><decl><type><name>int16_t</name></type> <name><name>mvs</name><index>[<expr><name>NB_PIXEL_MVS</name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

}</block></struct></type> <name>PixelMVS</name>;</typedef>

<typedef>typedef <type><struct>struct <name>PixelWeights</name> <block>{

<decl_stmt><decl><type><name>uint32_t</name></type> <name><name>weights</name><index>[<expr><name>NB_PIXEL_MVS</name></expr>]</index></name></decl>;</decl_stmt>

}</block></struct></type> <name>PixelWeights</name>;</typedef>

<typedef>typedef <type><struct>struct <name>PixelRefs</name> <block>{

<decl_stmt><decl><type><name>int8_t</name></type> <name><name>refs</name><index>[<expr><name>NB_PIXEL_MVS</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>nb</name></decl>;</decl_stmt>

}</block></struct></type> <name>PixelRefs</name>;</typedef>

<typedef>typedef <type><struct>struct <name>Frame</name> <block>{

<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>avf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Block</name> <modifier>*</modifier></type><name>blocks</name></decl>;</decl_stmt>

}</block></struct></type> <name>Frame</name>;</typedef>

<typedef>typedef <type><struct>struct <name>MIContext</name> <block>{

<decl_stmt><decl><type><specifier>const</specifier> <name>AVClass</name> <modifier>*</modifier></type><name>class</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVMotionEstContext</name></type> <name>me_ctx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVRational</name></type> <name>frame_rate</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>MIMode</name></name></type> <name>mi_mode</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>mc_mode</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>me_mode</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>me_method</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>mb_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>search_param</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>vsbmc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Frame</name></type> <name><name>frames</name><index>[<expr><name>NB_FRAMES</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Cluster</name></type> <name><name>clusters</name><index>[<expr><name>NB_CLUSTERS</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Block</name> <modifier>*</modifier></type><name>int_blocks</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PixelMVS</name> <modifier>*</modifier></type><name>pixel_mvs</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PixelWeights</name> <modifier>*</modifier></type><name>pixel_weights</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PixelRefs</name> <modifier>*</modifier></type><name>pixel_refs</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>int</name> <argument_list>(<argument><expr><operator>*</operator><name><name>mv_table</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>out_pts</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>b_width</name></decl>, <name>b_height</name>, <name>b_count</name>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>log2_mb_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>scd_method</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>scene_changed</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ff_scene_sad_fn</name></type> <name>sad</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>prev_mafd</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>scd_threshold</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>log2_chroma_w</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>log2_chroma_h</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>nb_planes</name></decl>;</decl_stmt>

}</block></struct></type> <name>MIContext</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OFFSET</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>offsetof(MIContext, x)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLAGS</name></cpp:macro> <cpp:value>AV_OPT_FLAG_VIDEO_PARAM|AV_OPT_FLAG_FILTERING_PARAM</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CONST</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>help</name></type></parameter>, <parameter><type><name>val</name></type></parameter>, <parameter><type><name>unit</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ name, help, 0, AV_OPT_TYPE_CONST, {.i64=val}, 0, 0, FLAGS, unit }</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVOption</name></type> <name><name>minterpolate_options</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><literal type="string">"fps"</literal></expr>, <expr><literal type="string">"output's frame rate"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>frame_rate</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_VIDEO_RATE</name></expr>, <expr><block>{<expr><operator>.</operator><name>str</name> <operator>=</operator> <literal type="string">"60"</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"mi_mode"</literal></expr>, <expr><literal type="string">"motion interpolation mode"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>mi_mode</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>MI_MODE_MCI</name></expr>}</block></expr>, <expr><name>MI_MODE_DUP</name></expr>, <expr><name>MI_MODE_MCI</name></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"mi_mode"</literal></expr> }</block></expr>,

<expr><call><name>CONST</name><argument_list>(<argument><expr><literal type="string">"dup"</literal></expr></argument>, <argument><expr><literal type="string">"duplicate frames"</literal></expr></argument>, <argument><expr><name>MI_MODE_DUP</name></expr></argument>, <argument><expr><literal type="string">"mi_mode"</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>CONST</name><argument_list>(<argument><expr><literal type="string">"blend"</literal></expr></argument>, <argument><expr><literal type="string">"blend frames"</literal></expr></argument>, <argument><expr><name>MI_MODE_BLEND</name></expr></argument>, <argument><expr><literal type="string">"mi_mode"</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>CONST</name><argument_list>(<argument><expr><literal type="string">"mci"</literal></expr></argument>, <argument><expr><literal type="string">"motion compensated interpolation"</literal></expr></argument>, <argument><expr><name>MI_MODE_MCI</name></expr></argument>, <argument><expr><literal type="string">"mi_mode"</literal></expr></argument>)</argument_list></call></expr>,

<expr><block>{ <expr><literal type="string">"mc_mode"</literal></expr>, <expr><literal type="string">"motion compensation mode"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>mc_mode</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>MC_MODE_OBMC</name></expr>}</block></expr>, <expr><name>MC_MODE_OBMC</name></expr>, <expr><name>MC_MODE_AOBMC</name></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"mc_mode"</literal></expr> }</block></expr>,

<expr><call><name>CONST</name><argument_list>(<argument><expr><literal type="string">"obmc"</literal></expr></argument>, <argument><expr><literal type="string">"overlapped block motion compensation"</literal></expr></argument>, <argument><expr><name>MC_MODE_OBMC</name></expr></argument>, <argument><expr><literal type="string">"mc_mode"</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>CONST</name><argument_list>(<argument><expr><literal type="string">"aobmc"</literal></expr></argument>, <argument><expr><literal type="string">"adaptive overlapped block motion compensation"</literal></expr></argument>, <argument><expr><name>MC_MODE_AOBMC</name></expr></argument>, <argument><expr><literal type="string">"mc_mode"</literal></expr></argument>)</argument_list></call></expr>,

<expr><block>{ <expr><literal type="string">"me_mode"</literal></expr>, <expr><literal type="string">"motion estimation mode"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>me_mode</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>ME_MODE_BILAT</name></expr>}</block></expr>, <expr><name>ME_MODE_BIDIR</name></expr>, <expr><name>ME_MODE_BILAT</name></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"me_mode"</literal></expr> }</block></expr>,

<expr><call><name>CONST</name><argument_list>(<argument><expr><literal type="string">"bidir"</literal></expr></argument>, <argument><expr><literal type="string">"bidirectional motion estimation"</literal></expr></argument>, <argument><expr><name>ME_MODE_BIDIR</name></expr></argument>, <argument><expr><literal type="string">"me_mode"</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>CONST</name><argument_list>(<argument><expr><literal type="string">"bilat"</literal></expr></argument>, <argument><expr><literal type="string">"bilateral motion estimation"</literal></expr></argument>, <argument><expr><name>ME_MODE_BILAT</name></expr></argument>, <argument><expr><literal type="string">"me_mode"</literal></expr></argument>)</argument_list></call></expr>,

<expr><block>{ <expr><literal type="string">"me"</literal></expr>, <expr><literal type="string">"motion estimation method"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>me_method</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>AV_ME_METHOD_EPZS</name></expr>}</block></expr>, <expr><name>AV_ME_METHOD_ESA</name></expr>, <expr><name>AV_ME_METHOD_UMH</name></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"me"</literal></expr> }</block></expr>,

<expr><call><name>CONST</name><argument_list>(<argument><expr><literal type="string">"esa"</literal></expr></argument>, <argument><expr><literal type="string">"exhaustive search"</literal></expr></argument>, <argument><expr><name>AV_ME_METHOD_ESA</name></expr></argument>, <argument><expr><literal type="string">"me"</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>CONST</name><argument_list>(<argument><expr><literal type="string">"tss"</literal></expr></argument>, <argument><expr><literal type="string">"three step search"</literal></expr></argument>, <argument><expr><name>AV_ME_METHOD_TSS</name></expr></argument>, <argument><expr><literal type="string">"me"</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>CONST</name><argument_list>(<argument><expr><literal type="string">"tdls"</literal></expr></argument>, <argument><expr><literal type="string">"two dimensional logarithmic search"</literal></expr></argument>, <argument><expr><name>AV_ME_METHOD_TDLS</name></expr></argument>, <argument><expr><literal type="string">"me"</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>CONST</name><argument_list>(<argument><expr><literal type="string">"ntss"</literal></expr></argument>, <argument><expr><literal type="string">"new three step search"</literal></expr></argument>, <argument><expr><name>AV_ME_METHOD_NTSS</name></expr></argument>, <argument><expr><literal type="string">"me"</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>CONST</name><argument_list>(<argument><expr><literal type="string">"fss"</literal></expr></argument>, <argument><expr><literal type="string">"four step search"</literal></expr></argument>, <argument><expr><name>AV_ME_METHOD_FSS</name></expr></argument>, <argument><expr><literal type="string">"me"</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>CONST</name><argument_list>(<argument><expr><literal type="string">"ds"</literal></expr></argument>, <argument><expr><literal type="string">"diamond search"</literal></expr></argument>, <argument><expr><name>AV_ME_METHOD_DS</name></expr></argument>, <argument><expr><literal type="string">"me"</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>CONST</name><argument_list>(<argument><expr><literal type="string">"hexbs"</literal></expr></argument>, <argument><expr><literal type="string">"hexagon-based search"</literal></expr></argument>, <argument><expr><name>AV_ME_METHOD_HEXBS</name></expr></argument>, <argument><expr><literal type="string">"me"</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>CONST</name><argument_list>(<argument><expr><literal type="string">"epzs"</literal></expr></argument>, <argument><expr><literal type="string">"enhanced predictive zonal search"</literal></expr></argument>, <argument><expr><name>AV_ME_METHOD_EPZS</name></expr></argument>, <argument><expr><literal type="string">"me"</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>CONST</name><argument_list>(<argument><expr><literal type="string">"umh"</literal></expr></argument>, <argument><expr><literal type="string">"uneven multi-hexagon search"</literal></expr></argument>, <argument><expr><name>AV_ME_METHOD_UMH</name></expr></argument>, <argument><expr><literal type="string">"me"</literal></expr></argument>)</argument_list></call></expr>,

<expr><block>{ <expr><literal type="string">"mb_size"</literal></expr>, <expr><literal type="string">"macroblock size"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>mb_size</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">16</literal></expr>}</block></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"search_param"</literal></expr>, <expr><literal type="string">"search parameter"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>search_param</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">32</literal></expr>}</block></expr>, <expr><literal type="number">4</literal></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"vsbmc"</literal></expr>, <expr><literal type="string">"variable-size block motion compensation"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>vsbmc</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"scd"</literal></expr>, <expr><literal type="string">"scene change detection method"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>scd_method</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>SCD_METHOD_FDIFF</name></expr>}</block></expr>, <expr><name>SCD_METHOD_NONE</name></expr>, <expr><name>SCD_METHOD_FDIFF</name></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"scene"</literal></expr> }</block></expr>,

<expr><call><name>CONST</name><argument_list>(<argument><expr><literal type="string">"none"</literal></expr></argument>, <argument><expr><literal type="string">"disable detection"</literal></expr></argument>, <argument><expr><name>SCD_METHOD_NONE</name></expr></argument>, <argument><expr><literal type="string">"scene"</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>CONST</name><argument_list>(<argument><expr><literal type="string">"fdiff"</literal></expr></argument>, <argument><expr><literal type="string">"frame difference"</literal></expr></argument>, <argument><expr><name>SCD_METHOD_FDIFF</name></expr></argument>, <argument><expr><literal type="string">"scene"</literal></expr></argument>)</argument_list></call></expr>,

<expr><block>{ <expr><literal type="string">"scd_threshold"</literal></expr>, <expr><literal type="string">"scene change threshold"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>scd_threshold</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_DOUBLE</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name> <operator>=</operator> <literal type="number">5.0</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">100.0</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>AVFILTER_DEFINE_CLASS</name><argument_list>(<argument><expr><name>minterpolate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function><type><specifier>static</specifier> <name>int</name></type> <name>query_formats</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>enum</name> <name>AVPixelFormat</name></name></type> <name><name>pix_fmts</name><index>[]</index></name> <init>= <expr><block>{

<expr><name>AV_PIX_FMT_YUV410P</name></expr>, <expr><name>AV_PIX_FMT_YUV411P</name></expr>,

<expr><name>AV_PIX_FMT_YUV420P</name></expr>, <expr><name>AV_PIX_FMT_YUV422P</name></expr>,

<expr><name>AV_PIX_FMT_YUV440P</name></expr>, <expr><name>AV_PIX_FMT_YUV444P</name></expr>,

<expr><name>AV_PIX_FMT_YUVJ444P</name></expr>, <expr><name>AV_PIX_FMT_YUVJ440P</name></expr>,

<expr><name>AV_PIX_FMT_YUVJ422P</name></expr>, <expr><name>AV_PIX_FMT_YUVJ420P</name></expr>,

<expr><name>AV_PIX_FMT_YUVJ411P</name></expr>,

<expr><name>AV_PIX_FMT_YUVA420P</name></expr>, <expr><name>AV_PIX_FMT_YUVA422P</name></expr>, <expr><name>AV_PIX_FMT_YUVA444P</name></expr>,

<expr><name>AV_PIX_FMT_GRAY8</name></expr>,

<expr><name>AV_PIX_FMT_NONE</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFilterFormats</name> <modifier>*</modifier></type><name>fmts_list</name> <init>= <expr><call><name>ff_make_format_list</name><argument_list>(<argument><expr><name>pix_fmts</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>fmts_list</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>ff_set_common_formats</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>fmts_list</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint64_t</name></type> <name>get_sbad</name><parameter_list>(<parameter><decl><type><name>AVMotionEstContext</name> <modifier>*</modifier></type><name>me_ctx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x_mv</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y_mv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>data_cur</name> <init>= <expr><name><name>me_ctx</name><operator>-&gt;</operator><name>data_cur</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>data_next</name> <init>= <expr><name><name>me_ctx</name><operator>-&gt;</operator><name>data_ref</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>linesize</name> <init>= <expr><name><name>me_ctx</name><operator>-&gt;</operator><name>linesize</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>mv_x1</name> <init>= <expr><name>x_mv</name> <operator>-</operator> <name>x</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>mv_y1</name> <init>= <expr><name>y_mv</name> <operator>-</operator> <name>y</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>mv_x</name></decl>, <decl><type ref="prev"/><name>mv_y</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>sbad</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>x</name> <operator>=</operator> <call><name>av_clip</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name><name>me_ctx</name><operator>-&gt;</operator><name>x_min</name></name></expr></argument>, <argument><expr><name><name>me_ctx</name><operator>-&gt;</operator><name>x_max</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>y</name> <operator>=</operator> <call><name>av_clip</name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><name><name>me_ctx</name><operator>-&gt;</operator><name>y_min</name></name></expr></argument>, <argument><expr><name><name>me_ctx</name><operator>-&gt;</operator><name>y_max</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>mv_x</name> <operator>=</operator> <call><name>av_clip</name><argument_list>(<argument><expr><name>x_mv</name> <operator>-</operator> <name>x</name></expr></argument>, <argument><expr><operator>-</operator><call><name>FFMIN</name><argument_list>(<argument><expr><name>x</name> <operator>-</operator> <name><name>me_ctx</name><operator>-&gt;</operator><name>x_min</name></name></expr></argument>, <argument><expr><name><name>me_ctx</name><operator>-&gt;</operator><name>x_max</name></name> <operator>-</operator> <name>x</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>FFMIN</name><argument_list>(<argument><expr><name>x</name> <operator>-</operator> <name><name>me_ctx</name><operator>-&gt;</operator><name>x_min</name></name></expr></argument>, <argument><expr><name><name>me_ctx</name><operator>-&gt;</operator><name>x_max</name></name> <operator>-</operator> <name>x</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>mv_y</name> <operator>=</operator> <call><name>av_clip</name><argument_list>(<argument><expr><name>y_mv</name> <operator>-</operator> <name>y</name></expr></argument>, <argument><expr><operator>-</operator><call><name>FFMIN</name><argument_list>(<argument><expr><name>y</name> <operator>-</operator> <name><name>me_ctx</name><operator>-&gt;</operator><name>y_min</name></name></expr></argument>, <argument><expr><name><name>me_ctx</name><operator>-&gt;</operator><name>y_max</name></name> <operator>-</operator> <name>y</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>FFMIN</name><argument_list>(<argument><expr><name>y</name> <operator>-</operator> <name><name>me_ctx</name><operator>-&gt;</operator><name>y_min</name></name></expr></argument>, <argument><expr><name><name>me_ctx</name><operator>-&gt;</operator><name>y_max</name></name> <operator>-</operator> <name>y</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>data_cur</name> <operator>+=</operator> <operator>(</operator><name>y</name> <operator>+</operator> <name>mv_y</name><operator>)</operator> <operator>*</operator> <name>linesize</name></expr>;</expr_stmt>

<expr_stmt><expr><name>data_next</name> <operator>+=</operator> <operator>(</operator><name>y</name> <operator>-</operator> <name>mv_y</name><operator>)</operator> <operator>*</operator> <name>linesize</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>me_ctx</name><operator>-&gt;</operator><name>mb_size</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>me_ctx</name><operator>-&gt;</operator><name>mb_size</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name>sbad</name> <operator>+=</operator> <call><name>FFABS</name><argument_list>(<argument><expr><name><name>data_cur</name><index>[<expr><name>x</name> <operator>+</operator> <name>mv_x</name> <operator>+</operator> <name>i</name> <operator>+</operator> <name>j</name> <operator>*</operator> <name>linesize</name></expr>]</index></name> <operator>-</operator> <name><name>data_next</name><index>[<expr><name>x</name> <operator>-</operator> <name>mv_x</name> <operator>+</operator> <name>i</name> <operator>+</operator> <name>j</name> <operator>*</operator> <name>linesize</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for></block_content></block></for>

<return>return <expr><name>sbad</name> <operator>+</operator> <operator>(</operator><call><name>FFABS</name><argument_list>(<argument><expr><name>mv_x1</name> <operator>-</operator> <name><name>me_ctx</name><operator>-&gt;</operator><name>pred_x</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>FFABS</name><argument_list>(<argument><expr><name>mv_y1</name> <operator>-</operator> <name><name>me_ctx</name><operator>-&gt;</operator><name>pred_y</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>*</operator> <name>COST_PRED_SCALE</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint64_t</name></type> <name>get_sbad_ob</name><parameter_list>(<parameter><decl><type><name>AVMotionEstContext</name> <modifier>*</modifier></type><name>me_ctx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x_mv</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y_mv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>data_cur</name> <init>= <expr><name><name>me_ctx</name><operator>-&gt;</operator><name>data_cur</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>data_next</name> <init>= <expr><name><name>me_ctx</name><operator>-&gt;</operator><name>data_ref</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>linesize</name> <init>= <expr><name><name>me_ctx</name><operator>-&gt;</operator><name>linesize</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>x_min</name> <init>= <expr><name><name>me_ctx</name><operator>-&gt;</operator><name>x_min</name></name> <operator>+</operator> <name><name>me_ctx</name><operator>-&gt;</operator><name>mb_size</name></name> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>x_max</name> <init>= <expr><name><name>me_ctx</name><operator>-&gt;</operator><name>x_max</name></name> <operator>-</operator> <name><name>me_ctx</name><operator>-&gt;</operator><name>mb_size</name></name> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>y_min</name> <init>= <expr><name><name>me_ctx</name><operator>-&gt;</operator><name>y_min</name></name> <operator>+</operator> <name><name>me_ctx</name><operator>-&gt;</operator><name>mb_size</name></name> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>y_max</name> <init>= <expr><name><name>me_ctx</name><operator>-&gt;</operator><name>y_max</name></name> <operator>-</operator> <name><name>me_ctx</name><operator>-&gt;</operator><name>mb_size</name></name> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>mv_x1</name> <init>= <expr><name>x_mv</name> <operator>-</operator> <name>x</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>mv_y1</name> <init>= <expr><name>y_mv</name> <operator>-</operator> <name>y</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>mv_x</name></decl>, <decl><type ref="prev"/><name>mv_y</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>sbad</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>x</name> <operator>=</operator> <call><name>av_clip</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>x_min</name></expr></argument>, <argument><expr><name>x_max</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>y</name> <operator>=</operator> <call><name>av_clip</name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><name>y_min</name></expr></argument>, <argument><expr><name>y_max</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>mv_x</name> <operator>=</operator> <call><name>av_clip</name><argument_list>(<argument><expr><name>x_mv</name> <operator>-</operator> <name>x</name></expr></argument>, <argument><expr><operator>-</operator><call><name>FFMIN</name><argument_list>(<argument><expr><name>x</name> <operator>-</operator> <name>x_min</name></expr></argument>, <argument><expr><name>x_max</name> <operator>-</operator> <name>x</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>FFMIN</name><argument_list>(<argument><expr><name>x</name> <operator>-</operator> <name>x_min</name></expr></argument>, <argument><expr><name>x_max</name> <operator>-</operator> <name>x</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>mv_y</name> <operator>=</operator> <call><name>av_clip</name><argument_list>(<argument><expr><name>y_mv</name> <operator>-</operator> <name>y</name></expr></argument>, <argument><expr><operator>-</operator><call><name>FFMIN</name><argument_list>(<argument><expr><name>y</name> <operator>-</operator> <name>y_min</name></expr></argument>, <argument><expr><name>y_max</name> <operator>-</operator> <name>y</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>FFMIN</name><argument_list>(<argument><expr><name>y</name> <operator>-</operator> <name>y_min</name></expr></argument>, <argument><expr><name>y_max</name> <operator>-</operator> <name>y</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <operator>-</operator><name><name>me_ctx</name><operator>-&gt;</operator><name>mb_size</name></name> <operator>/</operator> <literal type="number">2</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>me_ctx</name><operator>-&gt;</operator><name>mb_size</name></name> <operator>*</operator> <literal type="number">3</literal> <operator>/</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <operator>-</operator><name><name>me_ctx</name><operator>-&gt;</operator><name>mb_size</name></name> <operator>/</operator> <literal type="number">2</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>me_ctx</name><operator>-&gt;</operator><name>mb_size</name></name> <operator>*</operator> <literal type="number">3</literal> <operator>/</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name>sbad</name> <operator>+=</operator> <call><name>FFABS</name><argument_list>(<argument><expr><name><name>data_cur</name><index>[<expr><name>x</name> <operator>+</operator> <name>mv_x</name> <operator>+</operator> <name>i</name> <operator>+</operator> <operator>(</operator><name>y</name> <operator>+</operator> <name>mv_y</name> <operator>+</operator> <name>j</name><operator>)</operator> <operator>*</operator> <name>linesize</name></expr>]</index></name> <operator>-</operator> <name><name>data_next</name><index>[<expr><name>x</name> <operator>-</operator> <name>mv_x</name> <operator>+</operator> <name>i</name> <operator>+</operator> <operator>(</operator><name>y</name> <operator>-</operator> <name>mv_y</name> <operator>+</operator> <name>j</name><operator>)</operator> <operator>*</operator> <name>linesize</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for></block_content></block></for>

<return>return <expr><name>sbad</name> <operator>+</operator> <operator>(</operator><call><name>FFABS</name><argument_list>(<argument><expr><name>mv_x1</name> <operator>-</operator> <name><name>me_ctx</name><operator>-&gt;</operator><name>pred_x</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>FFABS</name><argument_list>(<argument><expr><name>mv_y1</name> <operator>-</operator> <name><name>me_ctx</name><operator>-&gt;</operator><name>pred_y</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>*</operator> <name>COST_PRED_SCALE</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint64_t</name></type> <name>get_sad_ob</name><parameter_list>(<parameter><decl><type><name>AVMotionEstContext</name> <modifier>*</modifier></type><name>me_ctx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x_mv</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y_mv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>data_ref</name> <init>= <expr><name><name>me_ctx</name><operator>-&gt;</operator><name>data_ref</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>data_cur</name> <init>= <expr><name><name>me_ctx</name><operator>-&gt;</operator><name>data_cur</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>linesize</name> <init>= <expr><name><name>me_ctx</name><operator>-&gt;</operator><name>linesize</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>x_min</name> <init>= <expr><name><name>me_ctx</name><operator>-&gt;</operator><name>x_min</name></name> <operator>+</operator> <name><name>me_ctx</name><operator>-&gt;</operator><name>mb_size</name></name> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>x_max</name> <init>= <expr><name><name>me_ctx</name><operator>-&gt;</operator><name>x_max</name></name> <operator>-</operator> <name><name>me_ctx</name><operator>-&gt;</operator><name>mb_size</name></name> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>y_min</name> <init>= <expr><name><name>me_ctx</name><operator>-&gt;</operator><name>y_min</name></name> <operator>+</operator> <name><name>me_ctx</name><operator>-&gt;</operator><name>mb_size</name></name> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>y_max</name> <init>= <expr><name><name>me_ctx</name><operator>-&gt;</operator><name>y_max</name></name> <operator>-</operator> <name><name>me_ctx</name><operator>-&gt;</operator><name>mb_size</name></name> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>mv_x</name> <init>= <expr><name>x_mv</name> <operator>-</operator> <name>x</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>mv_y</name> <init>= <expr><name>y_mv</name> <operator>-</operator> <name>y</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>sad</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>x</name> <operator>=</operator> <call><name>av_clip</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>x_min</name></expr></argument>, <argument><expr><name>x_max</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>y</name> <operator>=</operator> <call><name>av_clip</name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><name>y_min</name></expr></argument>, <argument><expr><name>y_max</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>x_mv</name> <operator>=</operator> <call><name>av_clip</name><argument_list>(<argument><expr><name>x_mv</name></expr></argument>, <argument><expr><name>x_min</name></expr></argument>, <argument><expr><name>x_max</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>y_mv</name> <operator>=</operator> <call><name>av_clip</name><argument_list>(<argument><expr><name>y_mv</name></expr></argument>, <argument><expr><name>y_min</name></expr></argument>, <argument><expr><name>y_max</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <operator>-</operator><name><name>me_ctx</name><operator>-&gt;</operator><name>mb_size</name></name> <operator>/</operator> <literal type="number">2</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>me_ctx</name><operator>-&gt;</operator><name>mb_size</name></name> <operator>*</operator> <literal type="number">3</literal> <operator>/</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <operator>-</operator><name><name>me_ctx</name><operator>-&gt;</operator><name>mb_size</name></name> <operator>/</operator> <literal type="number">2</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>me_ctx</name><operator>-&gt;</operator><name>mb_size</name></name> <operator>*</operator> <literal type="number">3</literal> <operator>/</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name>sad</name> <operator>+=</operator> <call><name>FFABS</name><argument_list>(<argument><expr><name><name>data_ref</name><index>[<expr><name>x_mv</name> <operator>+</operator> <name>i</name> <operator>+</operator> <operator>(</operator><name>y_mv</name> <operator>+</operator> <name>j</name><operator>)</operator> <operator>*</operator> <name>linesize</name></expr>]</index></name> <operator>-</operator> <name><name>data_cur</name><index>[<expr><name>x</name> <operator>+</operator> <name>i</name> <operator>+</operator> <operator>(</operator><name>y</name> <operator>+</operator> <name>j</name><operator>)</operator> <operator>*</operator> <name>linesize</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for></block_content></block></for>

<return>return <expr><name>sad</name> <operator>+</operator> <operator>(</operator><call><name>FFABS</name><argument_list>(<argument><expr><name>mv_x</name> <operator>-</operator> <name><name>me_ctx</name><operator>-&gt;</operator><name>pred_x</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>FFABS</name><argument_list>(<argument><expr><name>mv_y</name> <operator>-</operator> <name><name>me_ctx</name><operator>-&gt;</operator><name>pred_y</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>*</operator> <name>COST_PRED_SCALE</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>config_input</name><parameter_list>(<parameter><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>inlink</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>MIContext</name> <modifier>*</modifier></type><name>mi_ctx</name> <init>= <expr><name><name>inlink</name><operator>-&gt;</operator><name>dst</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVMotionEstContext</name> <modifier>*</modifier></type><name>me_ctx</name> <init>= <expr><operator>&amp;</operator><name><name>mi_ctx</name><operator>-&gt;</operator><name>me_ctx</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>AVPixFmtDescriptor</name> <modifier>*</modifier></type><name>desc</name> <init>= <expr><call><name>av_pix_fmt_desc_get</name><argument_list>(<argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>format</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>height</name> <init>= <expr><name><name>inlink</name><operator>-&gt;</operator><name>h</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>width</name> <init>= <expr><name><name>inlink</name><operator>-&gt;</operator><name>w</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>mi_ctx</name><operator>-&gt;</operator><name>log2_chroma_h</name></name> <operator>=</operator> <name><name>desc</name><operator>-&gt;</operator><name>log2_chroma_h</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mi_ctx</name><operator>-&gt;</operator><name>log2_chroma_w</name></name> <operator>=</operator> <name><name>desc</name><operator>-&gt;</operator><name>log2_chroma_w</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mi_ctx</name><operator>-&gt;</operator><name>nb_planes</name></name> <operator>=</operator> <call><name>av_pix_fmt_count_planes</name><argument_list>(<argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>format</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mi_ctx</name><operator>-&gt;</operator><name>log2_mb_size</name></name> <operator>=</operator> <call><name>av_ceil_log2_c</name><argument_list>(<argument><expr><name><name>mi_ctx</name><operator>-&gt;</operator><name>mb_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mi_ctx</name><operator>-&gt;</operator><name>mb_size</name></name> <operator>=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <name><name>mi_ctx</name><operator>-&gt;</operator><name>log2_mb_size</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mi_ctx</name><operator>-&gt;</operator><name>b_width</name></name> <operator>=</operator> <name>width</name> <operator>&gt;&gt;</operator> <name><name>mi_ctx</name><operator>-&gt;</operator><name>log2_mb_size</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mi_ctx</name><operator>-&gt;</operator><name>b_height</name></name> <operator>=</operator> <name>height</name> <operator>&gt;&gt;</operator> <name><name>mi_ctx</name><operator>-&gt;</operator><name>log2_mb_size</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mi_ctx</name><operator>-&gt;</operator><name>b_count</name></name> <operator>=</operator> <name><name>mi_ctx</name><operator>-&gt;</operator><name>b_width</name></name> <operator>*</operator> <name><name>mi_ctx</name><operator>-&gt;</operator><name>b_height</name></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>NB_FRAMES</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>Frame</name> <modifier>*</modifier></type><name>frame</name> <init>= <expr><operator>&amp;</operator><name><name>mi_ctx</name><operator>-&gt;</operator><name>frames</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>blocks</name></name> <operator>=</operator> <call><name>av_mallocz_array</name><argument_list>(<argument><expr><name><name>mi_ctx</name><operator>-&gt;</operator><name>b_count</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>Block</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>frame</name><operator>-&gt;</operator><name>blocks</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>mi_ctx</name><operator>-&gt;</operator><name>mi_mode</name></name> <operator>==</operator> <name>MI_MODE_MCI</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>mi_ctx</name><operator>-&gt;</operator><name>pixel_mvs</name></name> <operator>=</operator> <call><name>av_mallocz_array</name><argument_list>(<argument><expr><name>width</name> <operator>*</operator> <name>height</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>PixelMVS</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mi_ctx</name><operator>-&gt;</operator><name>pixel_weights</name></name> <operator>=</operator> <call><name>av_mallocz_array</name><argument_list>(<argument><expr><name>width</name> <operator>*</operator> <name>height</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>PixelWeights</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mi_ctx</name><operator>-&gt;</operator><name>pixel_refs</name></name> <operator>=</operator> <call><name>av_mallocz_array</name><argument_list>(<argument><expr><name>width</name> <operator>*</operator> <name>height</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>PixelRefs</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>mi_ctx</name><operator>-&gt;</operator><name>pixel_mvs</name></name> <operator>||</operator> <operator>!</operator><name><name>mi_ctx</name><operator>-&gt;</operator><name>pixel_weights</name></name> <operator>||</operator> <operator>!</operator><name><name>mi_ctx</name><operator>-&gt;</operator><name>pixel_refs</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>mi_ctx</name><operator>-&gt;</operator><name>me_mode</name></name> <operator>==</operator> <name>ME_MODE_BILAT</name></expr>)</condition><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>mi_ctx</name><operator>-&gt;</operator><name>int_blocks</name></name> <operator>=</operator> <call><name>av_mallocz_array</name><argument_list>(<argument><expr><name><name>mi_ctx</name><operator>-&gt;</operator><name>b_count</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>Block</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>mi_ctx</name><operator>-&gt;</operator><name>me_method</name></name> <operator>==</operator> <name>AV_ME_METHOD_EPZS</name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>mi_ctx</name><operator>-&gt;</operator><name>mv_table</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>av_mallocz_array</name><argument_list>(<argument><expr><name><name>mi_ctx</name><operator>-&gt;</operator><name>b_count</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>mi_ctx</name><operator>-&gt;</operator><name>mv_table</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>mi_ctx</name><operator>-&gt;</operator><name>mv_table</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>mi_ctx</name><operator>-&gt;</operator><name>scd_method</name></name> <operator>==</operator> <name>SCD_METHOD_FDIFF</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>mi_ctx</name><operator>-&gt;</operator><name>sad</name></name> <operator>=</operator> <call><name>ff_scene_sad_get_fn</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>mi_ctx</name><operator>-&gt;</operator><name>sad</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ff_me_init_context</name><argument_list>(<argument><expr><name>me_ctx</name></expr></argument>, <argument><expr><name><name>mi_ctx</name><operator>-&gt;</operator><name>mb_size</name></name></expr></argument>, <argument><expr><name><name>mi_ctx</name><operator>-&gt;</operator><name>search_param</name></name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name><name>mi_ctx</name><operator>-&gt;</operator><name>b_width</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>&lt;&lt;</operator> <name><name>mi_ctx</name><operator>-&gt;</operator><name>log2_mb_size</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name><name>mi_ctx</name><operator>-&gt;</operator><name>b_height</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>&lt;&lt;</operator> <name><name>mi_ctx</name><operator>-&gt;</operator><name>log2_mb_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>mi_ctx</name><operator>-&gt;</operator><name>me_mode</name></name> <operator>==</operator> <name>ME_MODE_BIDIR</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>me_ctx</name><operator>-&gt;</operator><name>get_cost</name></name> <operator>=</operator> <operator>&amp;</operator><name>get_sad_ob</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>mi_ctx</name><operator>-&gt;</operator><name>me_mode</name></name> <operator>==</operator> <name>ME_MODE_BILAT</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>me_ctx</name><operator>-&gt;</operator><name>get_cost</name></name> <operator>=</operator> <operator>&amp;</operator><name>get_sbad_ob</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<label><name>fail</name>:</label>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>NB_FRAMES</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mi_ctx</name><operator>-&gt;</operator><name>frames</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>blocks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mi_ctx</name><operator>-&gt;</operator><name>pixel_mvs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mi_ctx</name><operator>-&gt;</operator><name>pixel_weights</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mi_ctx</name><operator>-&gt;</operator><name>pixel_refs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>config_output</name><parameter_list>(<parameter><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>outlink</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>MIContext</name> <modifier>*</modifier></type><name>mi_ctx</name> <init>= <expr><name><name>outlink</name><operator>-&gt;</operator><name>src</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>outlink</name><operator>-&gt;</operator><name>frame_rate</name></name> <operator>=</operator> <name><name>mi_ctx</name><operator>-&gt;</operator><name>frame_rate</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>outlink</name><operator>-&gt;</operator><name>time_base</name></name> <operator>=</operator> <call><name>av_inv_q</name><argument_list>(<argument><expr><name><name>mi_ctx</name><operator>-&gt;</operator><name>frame_rate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ADD_PRED</name><parameter_list>(<parameter><type><name>preds</name></type></parameter>, <parameter><type><name>px</name></type></parameter>, <parameter><type><name>py</name></type></parameter>)</parameter_list></cpp:macro><cpp:value>do {preds.mvs[preds.nb][0] = px;preds.mvs[preds.nb][1] = py;preds.nb++;} while(0)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type> <name>search_mv</name><parameter_list>(<parameter><decl><type><name>MIContext</name> <modifier>*</modifier></type><name>mi_ctx</name></decl></parameter>, <parameter><decl><type><name>Block</name> <modifier>*</modifier></type><name>blocks</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mb_x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mb_y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dir</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVMotionEstContext</name> <modifier>*</modifier></type><name>me_ctx</name> <init>= <expr><operator>&amp;</operator><name><name>mi_ctx</name><operator>-&gt;</operator><name>me_ctx</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVMotionEstPredictor</name> <modifier>*</modifier></type><name>preds</name> <init>= <expr><name><name>me_ctx</name><operator>-&gt;</operator><name>preds</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Block</name> <modifier>*</modifier></type><name>block</name> <init>= <expr><operator>&amp;</operator><name><name>blocks</name><index>[<expr><name>mb_x</name> <operator>+</operator> <name>mb_y</name> <operator>*</operator> <name><name>mi_ctx</name><operator>-&gt;</operator><name>b_width</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>x_mb</name> <init>= <expr><name>mb_x</name> <operator>&lt;&lt;</operator> <name><name>mi_ctx</name><operator>-&gt;</operator><name>log2_mb_size</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>y_mb</name> <init>= <expr><name>mb_y</name> <operator>&lt;&lt;</operator> <name><name>mi_ctx</name><operator>-&gt;</operator><name>log2_mb_size</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>mb_i</name> <init>= <expr><name>mb_x</name> <operator>+</operator> <name>mb_y</name> <operator>*</operator> <name><name>mi_ctx</name><operator>-&gt;</operator><name>b_width</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>mv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{<expr><name>x_mb</name></expr>, <expr><name>y_mb</name></expr>}</block></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>mi_ctx</name><operator>-&gt;</operator><name>me_method</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>AV_ME_METHOD_ESA</name></expr>:</case>

<expr_stmt><expr><call><name>ff_me_search_esa</name><argument_list>(<argument><expr><name>me_ctx</name></expr></argument>, <argument><expr><name>x_mb</name></expr></argument>, <argument><expr><name>y_mb</name></expr></argument>, <argument><expr><name>mv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AV_ME_METHOD_TSS</name></expr>:</case>

<expr_stmt><expr><call><name>ff_me_search_tss</name><argument_list>(<argument><expr><name>me_ctx</name></expr></argument>, <argument><expr><name>x_mb</name></expr></argument>, <argument><expr><name>y_mb</name></expr></argument>, <argument><expr><name>mv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AV_ME_METHOD_TDLS</name></expr>:</case>

<expr_stmt><expr><call><name>ff_me_search_tdls</name><argument_list>(<argument><expr><name>me_ctx</name></expr></argument>, <argument><expr><name>x_mb</name></expr></argument>, <argument><expr><name>y_mb</name></expr></argument>, <argument><expr><name>mv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AV_ME_METHOD_NTSS</name></expr>:</case>

<expr_stmt><expr><call><name>ff_me_search_ntss</name><argument_list>(<argument><expr><name>me_ctx</name></expr></argument>, <argument><expr><name>x_mb</name></expr></argument>, <argument><expr><name>y_mb</name></expr></argument>, <argument><expr><name>mv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AV_ME_METHOD_FSS</name></expr>:</case>

<expr_stmt><expr><call><name>ff_me_search_fss</name><argument_list>(<argument><expr><name>me_ctx</name></expr></argument>, <argument><expr><name>x_mb</name></expr></argument>, <argument><expr><name>y_mb</name></expr></argument>, <argument><expr><name>mv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AV_ME_METHOD_DS</name></expr>:</case>

<expr_stmt><expr><call><name>ff_me_search_ds</name><argument_list>(<argument><expr><name>me_ctx</name></expr></argument>, <argument><expr><name>x_mb</name></expr></argument>, <argument><expr><name>y_mb</name></expr></argument>, <argument><expr><name>mv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AV_ME_METHOD_HEXBS</name></expr>:</case>

<expr_stmt><expr><call><name>ff_me_search_hexbs</name><argument_list>(<argument><expr><name>me_ctx</name></expr></argument>, <argument><expr><name>x_mb</name></expr></argument>, <argument><expr><name>y_mb</name></expr></argument>, <argument><expr><name>mv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AV_ME_METHOD_EPZS</name></expr>:</case>

<expr_stmt><expr><name><name>preds</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>nb</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>preds</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>nb</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ADD_PRED</name><argument_list>(<argument><expr><name><name>preds</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>mb_x</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ADD_PRED</name><argument_list>(<argument><expr><name><name>preds</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>mi_ctx</name><operator>-&gt;</operator><name>mv_table</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>mb_i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><name>dir</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>mi_ctx</name><operator>-&gt;</operator><name>mv_table</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>mb_i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><name>dir</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>mb_y</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ADD_PRED</name><argument_list>(<argument><expr><name><name>preds</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>mi_ctx</name><operator>-&gt;</operator><name>mv_table</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>mb_i</name> <operator>-</operator> <name><name>mi_ctx</name><operator>-&gt;</operator><name>b_width</name></name></expr>]</index><index>[<expr><name>dir</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>mi_ctx</name><operator>-&gt;</operator><name>mv_table</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>mb_i</name> <operator>-</operator> <name><name>mi_ctx</name><operator>-&gt;</operator><name>b_width</name></name></expr>]</index><index>[<expr><name>dir</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>mb_y</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>mb_x</name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;</operator> <name><name>mi_ctx</name><operator>-&gt;</operator><name>b_width</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ADD_PRED</name><argument_list>(<argument><expr><name><name>preds</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>mi_ctx</name><operator>-&gt;</operator><name>mv_table</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>mb_i</name> <operator>-</operator> <name><name>mi_ctx</name><operator>-&gt;</operator><name>b_width</name></name> <operator>+</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><name>dir</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>mi_ctx</name><operator>-&gt;</operator><name>mv_table</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>mb_i</name> <operator>-</operator> <name><name>mi_ctx</name><operator>-&gt;</operator><name>b_width</name></name> <operator>+</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><name>dir</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>preds</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>nb</name> <operator>==</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>me_ctx</name><operator>-&gt;</operator><name>pred_x</name></name> <operator>=</operator> <call><name>mid_pred</name><argument_list>(<argument><expr><name><name>preds</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>mvs</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>preds</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>mvs</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>preds</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>mvs</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>me_ctx</name><operator>-&gt;</operator><name>pred_y</name></name> <operator>=</operator> <call><name>mid_pred</name><argument_list>(<argument><expr><name><name>preds</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>mvs</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>preds</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>mvs</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>preds</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>mvs</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>preds</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>nb</name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>me_ctx</name><operator>-&gt;</operator><name>pred_x</name></name> <operator>=</operator> <call><name>mid_pred</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>preds</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>mvs</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>preds</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>mvs</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>me_ctx</name><operator>-&gt;</operator><name>pred_y</name></name> <operator>=</operator> <call><name>mid_pred</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>preds</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>mvs</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>preds</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>mvs</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>preds</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>nb</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>me_ctx</name><operator>-&gt;</operator><name>pred_x</name></name> <operator>=</operator> <name><name>preds</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>mvs</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>me_ctx</name><operator>-&gt;</operator><name>pred_y</name></name> <operator>=</operator> <name><name>preds</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>mvs</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>me_ctx</name><operator>-&gt;</operator><name>pred_x</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>me_ctx</name><operator>-&gt;</operator><name>pred_y</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>ADD_PRED</name><argument_list>(<argument><expr><name><name>preds</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>mi_ctx</name><operator>-&gt;</operator><name>mv_table</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>mb_i</name></expr>]</index><index>[<expr><name>dir</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>mi_ctx</name><operator>-&gt;</operator><name>mv_table</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>mb_i</name></expr>]</index><index>[<expr><name>dir</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ADD_PRED</name><argument_list>(<argument><expr><name><name>preds</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>mi_ctx</name><operator>-&gt;</operator><name>mv_table</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>mb_i</name></expr>]</index><index>[<expr><name>dir</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><name><name>mi_ctx</name><operator>-&gt;</operator><name>mv_table</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>mb_i</name></expr>]</index><index>[<expr><name>dir</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <name><name>mi_ctx</name><operator>-&gt;</operator><name>mv_table</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>mb_i</name></expr>]</index><index>[<expr><name>dir</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr></argument>,

<argument><expr><name><name>mi_ctx</name><operator>-&gt;</operator><name>mv_table</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>mb_i</name></expr>]</index><index>[<expr><name>dir</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><name><name>mi_ctx</name><operator>-&gt;</operator><name>mv_table</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>mb_i</name></expr>]</index><index>[<expr><name>dir</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>mi_ctx</name><operator>-&gt;</operator><name>mv_table</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>mb_i</name></expr>]</index><index>[<expr><name>dir</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>mb_x</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ADD_PRED</name><argument_list>(<argument><expr><name><name>preds</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>mi_ctx</name><operator>-&gt;</operator><name>mv_table</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>mb_i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><name>dir</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>mi_ctx</name><operator>-&gt;</operator><name>mv_table</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>mb_i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><name>dir</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>mb_y</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ADD_PRED</name><argument_list>(<argument><expr><name><name>preds</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>mi_ctx</name><operator>-&gt;</operator><name>mv_table</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>mb_i</name> <operator>-</operator> <name><name>mi_ctx</name><operator>-&gt;</operator><name>b_width</name></name></expr>]</index><index>[<expr><name>dir</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>mi_ctx</name><operator>-&gt;</operator><name>mv_table</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>mb_i</name> <operator>-</operator> <name><name>mi_ctx</name><operator>-&gt;</operator><name>b_width</name></name></expr>]</index><index>[<expr><name>dir</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>mb_x</name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;</operator> <name><name>mi_ctx</name><operator>-&gt;</operator><name>b_width</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ADD_PRED</name><argument_list>(<argument><expr><name><name>preds</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>mi_ctx</name><operator>-&gt;</operator><name>mv_table</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>mb_i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><name>dir</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>mi_ctx</name><operator>-&gt;</operator><name>mv_table</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>mb_i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><name>dir</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>mb_y</name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;</operator> <name><name>mi_ctx</name><operator>-&gt;</operator><name>b_height</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ADD_PRED</name><argument_list>(<argument><expr><name><name>preds</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>mi_ctx</name><operator>-&gt;</operator><name>mv_table</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>mb_i</name> <operator>+</operator> <name><name>mi_ctx</name><operator>-&gt;</operator><name>b_width</name></name></expr>]</index><index>[<expr><name>dir</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>mi_ctx</name><operator>-&gt;</operator><name>mv_table</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>mb_i</name> <operator>+</operator> <name><name>mi_ctx</name><operator>-&gt;</operator><name>b_width</name></name></expr>]</index><index>[<expr><name>dir</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>ff_me_search_epzs</name><argument_list>(<argument><expr><name>me_ctx</name></expr></argument>, <argument><expr><name>x_mb</name></expr></argument>, <argument><expr><name>y_mb</name></expr></argument>, <argument><expr><name>mv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mi_ctx</name><operator>-&gt;</operator><name>mv_table</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>mb_i</name></expr>]</index><index>[<expr><name>dir</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>mv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <name>x_mb</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mi_ctx</name><operator>-&gt;</operator><name>mv_table</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>mb_i</name></expr>]</index><index>[<expr><name>dir</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>mv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name>y_mb</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AV_ME_METHOD_UMH</name></expr>:</case>

<expr_stmt><expr><name><name>preds</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>nb</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ADD_PRED</name><argument_list>(<argument><expr><name><name>preds</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>mb_x</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ADD_PRED</name><argument_list>(<argument><expr><name><name>preds</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>blocks</name><index>[<expr><name>mb_i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>mvs</name><index>[<expr><name>dir</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>blocks</name><index>[<expr><name>mb_i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>mvs</name><index>[<expr><name>dir</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>mb_y</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ADD_PRED</name><argument_list>(<argument><expr><name><name>preds</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>blocks</name><index>[<expr><name>mb_i</name> <operator>-</operator> <name><name>mi_ctx</name><operator>-&gt;</operator><name>b_width</name></name></expr>]</index></name><operator>.</operator><name><name>mvs</name><index>[<expr><name>dir</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>blocks</name><index>[<expr><name>mb_i</name> <operator>-</operator> <name><name>mi_ctx</name><operator>-&gt;</operator><name>b_width</name></name></expr>]</index></name><operator>.</operator><name><name>mvs</name><index>[<expr><name>dir</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>mb_x</name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;</operator> <name><name>mi_ctx</name><operator>-&gt;</operator><name>b_width</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ADD_PRED</name><argument_list>(<argument><expr><name><name>preds</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>blocks</name><index>[<expr><name>mb_i</name> <operator>-</operator> <name><name>mi_ctx</name><operator>-&gt;</operator><name>b_width</name></name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>mvs</name><index>[<expr><name>dir</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>blocks</name><index>[<expr><name>mb_i</name> <operator>-</operator> <name><name>mi_ctx</name><operator>-&gt;</operator><name>b_width</name></name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>mvs</name><index>[<expr><name>dir</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>mb_x</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ADD_PRED</name><argument_list>(<argument><expr><name><name>preds</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>blocks</name><index>[<expr><name>mb_i</name> <operator>-</operator> <name><name>mi_ctx</name><operator>-&gt;</operator><name>b_width</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>mvs</name><index>[<expr><name>dir</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>blocks</name><index>[<expr><name>mb_i</name> <operator>-</operator> <name><name>mi_ctx</name><operator>-&gt;</operator><name>b_width</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>mvs</name><index>[<expr><name>dir</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>preds</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>nb</name> <operator>==</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>me_ctx</name><operator>-&gt;</operator><name>pred_x</name></name> <operator>=</operator> <call><name>mid_pred</name><argument_list>(<argument><expr><name><name>preds</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>mvs</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>preds</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>mvs</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>preds</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>mvs</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>me_ctx</name><operator>-&gt;</operator><name>pred_y</name></name> <operator>=</operator> <call><name>mid_pred</name><argument_list>(<argument><expr><name><name>preds</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>mvs</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>preds</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>mvs</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>preds</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>mvs</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>preds</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>nb</name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>me_ctx</name><operator>-&gt;</operator><name>pred_x</name></name> <operator>=</operator> <call><name>mid_pred</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>preds</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>mvs</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>preds</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>mvs</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>me_ctx</name><operator>-&gt;</operator><name>pred_y</name></name> <operator>=</operator> <call><name>mid_pred</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>preds</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>mvs</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>preds</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>mvs</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>preds</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>nb</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>me_ctx</name><operator>-&gt;</operator><name>pred_x</name></name> <operator>=</operator> <name><name>preds</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>mvs</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>me_ctx</name><operator>-&gt;</operator><name>pred_y</name></name> <operator>=</operator> <name><name>preds</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>mvs</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>me_ctx</name><operator>-&gt;</operator><name>pred_x</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>me_ctx</name><operator>-&gt;</operator><name>pred_y</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>ff_me_search_umh</name><argument_list>(<argument><expr><name>me_ctx</name></expr></argument>, <argument><expr><name>x_mb</name></expr></argument>, <argument><expr><name>y_mb</name></expr></argument>, <argument><expr><name>mv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<expr_stmt><expr><name><name>block</name><operator>-&gt;</operator><name>mvs</name><index>[<expr><name>dir</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>mv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <name>x_mb</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>block</name><operator>-&gt;</operator><name>mvs</name><index>[<expr><name>dir</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>mv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name>y_mb</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>bilateral_me</name><parameter_list>(<parameter><decl><type><name>MIContext</name> <modifier>*</modifier></type><name>mi_ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>Block</name> <modifier>*</modifier></type><name>block</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>mb_x</name></decl>, <decl><type ref="prev"/><name>mb_y</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>mb_y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>mb_y</name> <operator>&lt;</operator> <name><name>mi_ctx</name><operator>-&gt;</operator><name>b_height</name></name></expr>;</condition> <incr><expr><name>mb_y</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>mb_x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>mb_x</name> <operator>&lt;</operator> <name><name>mi_ctx</name><operator>-&gt;</operator><name>b_width</name></name></expr>;</condition> <incr><expr><name>mb_x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>block</name> <operator>=</operator> <operator>&amp;</operator><name><name>mi_ctx</name><operator>-&gt;</operator><name>int_blocks</name><index>[<expr><name>mb_x</name> <operator>+</operator> <name>mb_y</name> <operator>*</operator> <name><name>mi_ctx</name><operator>-&gt;</operator><name>b_width</name></name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>block</name><operator>-&gt;</operator><name>cid</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>block</name><operator>-&gt;</operator><name>sb</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>block</name><operator>-&gt;</operator><name>mvs</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>block</name><operator>-&gt;</operator><name>mvs</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></for></block_content></block></for>

<for>for <control>(<init><expr><name>mb_y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>mb_y</name> <operator>&lt;</operator> <name><name>mi_ctx</name><operator>-&gt;</operator><name>b_height</name></name></expr>;</condition> <incr><expr><name>mb_y</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>mb_x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>mb_x</name> <operator>&lt;</operator> <name><name>mi_ctx</name><operator>-&gt;</operator><name>b_width</name></name></expr>;</condition> <incr><expr><name>mb_x</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>search_mv</name><argument_list>(<argument><expr><name>mi_ctx</name></expr></argument>, <argument><expr><name><name>mi_ctx</name><operator>-&gt;</operator><name>int_blocks</name></name></expr></argument>, <argument><expr><name>mb_x</name></expr></argument>, <argument><expr><name>mb_y</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for></block_content></block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>var_size_bme</name><parameter_list>(<parameter><decl><type><name>MIContext</name> <modifier>*</modifier></type><name>mi_ctx</name></decl></parameter>, <parameter><decl><type><name>Block</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x_mb</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y_mb</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVMotionEstContext</name> <modifier>*</modifier></type><name>me_ctx</name> <init>= <expr><operator>&amp;</operator><name><name>mi_ctx</name><operator>-&gt;</operator><name>me_ctx</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>cost_sb</name></decl>, <decl><type ref="prev"/><name>cost_old</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>mb_size</name> <init>= <expr><name><name>me_ctx</name><operator>-&gt;</operator><name>mb_size</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>search_param</name> <init>= <expr><name><name>me_ctx</name><operator>-&gt;</operator><name>search_param</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>mv_x</name></decl>, <decl><type ref="prev"/><name>mv_y</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>me_ctx</name><operator>-&gt;</operator><name>mb_size</name></name> <operator>=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>n</name></expr>;</expr_stmt>

<expr_stmt><expr><name>cost_old</name> <operator>=</operator> <call><name><name>me_ctx</name><operator>-&gt;</operator><name>get_cost</name></name><argument_list>(<argument><expr><name>me_ctx</name></expr></argument>, <argument><expr><name>x_mb</name></expr></argument>, <argument><expr><name>y_mb</name></expr></argument>, <argument><expr><name>x_mb</name> <operator>+</operator> <name><name>block</name><operator>-&gt;</operator><name>mvs</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>y_mb</name> <operator>+</operator> <name><name>block</name><operator>-&gt;</operator><name>mvs</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>me_ctx</name><operator>-&gt;</operator><name>mb_size</name></name> <operator>=</operator> <name>mb_size</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>cost_old</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>block</name><operator>-&gt;</operator><name>sb</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>block</name><operator>-&gt;</operator><name>subs</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>block</name><operator>-&gt;</operator><name>subs</name></name> <operator>=</operator> <call><name>av_mallocz_array</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>Block</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>block</name><operator>-&gt;</operator><name>subs</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>block</name><operator>-&gt;</operator><name>sb</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>Block</name> <modifier>*</modifier></type><name>sb</name> <init>= <expr><operator>&amp;</operator><name><name>block</name><operator>-&gt;</operator><name>subs</name><index>[<expr><name>x</name> <operator>+</operator> <name>y</name> <operator>*</operator> <literal type="number">2</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>mv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{<expr><name>x_mb</name> <operator>+</operator> <name><name>block</name><operator>-&gt;</operator><name>mvs</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>, <expr><name>y_mb</name> <operator>+</operator> <name><name>block</name><operator>-&gt;</operator><name>mvs</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>me_ctx</name><operator>-&gt;</operator><name>mb_size</name></name> <operator>=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>n</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>me_ctx</name><operator>-&gt;</operator><name>search_param</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>me_ctx</name><operator>-&gt;</operator><name>pred_x</name></name> <operator>=</operator> <name><name>block</name><operator>-&gt;</operator><name>mvs</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>me_ctx</name><operator>-&gt;</operator><name>pred_y</name></name> <operator>=</operator> <name><name>block</name><operator>-&gt;</operator><name>mvs</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>cost_sb</name> <operator>=</operator> <call><name>ff_me_search_ds</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mi_ctx</name><operator>-&gt;</operator><name>me_ctx</name></name></expr></argument>, <argument><expr><name>x_mb</name> <operator>+</operator> <name><name>block</name><operator>-&gt;</operator><name>mvs</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>y_mb</name> <operator>+</operator> <name><name>block</name><operator>-&gt;</operator><name>mvs</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>mv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>mv_x</name> <operator>=</operator> <name><name>mv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <name>x_mb</name></expr>;</expr_stmt>

<expr_stmt><expr><name>mv_y</name> <operator>=</operator> <name><name>mv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name>y_mb</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>me_ctx</name><operator>-&gt;</operator><name>mb_size</name></name> <operator>=</operator> <name>mb_size</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>me_ctx</name><operator>-&gt;</operator><name>search_param</name></name> <operator>=</operator> <name>search_param</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>cost_sb</name> <operator>&lt;</operator> <name>cost_old</name> <operator>/</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>sb</name><operator>-&gt;</operator><name>mvs</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>mv_x</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sb</name><operator>-&gt;</operator><name>mvs</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>mv_y</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>=</operator> <call><name>var_size_bme</name><argument_list>(<argument><expr><name>mi_ctx</name></expr></argument>, <argument><expr><name>sb</name></expr></argument>, <argument><expr><name>x_mb</name> <operator>+</operator> <operator>(</operator><name>x</name> <operator>&lt;&lt;</operator> <operator>(</operator><name>n</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr></argument>, <argument><expr><name>y_mb</name> <operator>+</operator> <operator>(</operator><name>y</name> <operator>&lt;&lt;</operator> <operator>(</operator><name>n</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr></argument>, <argument><expr><name>n</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>sb</name><operator>-&gt;</operator><name>sb</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>block</name><operator>-&gt;</operator><name>sb</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for></block_content></block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>cluster_mvs</name><parameter_list>(<parameter><decl><type><name>MIContext</name> <modifier>*</modifier></type><name>mi_ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>changed</name></decl>, <decl><type ref="prev"/><name>c</name></decl>, <decl><type ref="prev"/><name>c_max</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>mb_x</name></decl>, <decl><type ref="prev"/><name>mb_y</name></decl>, <decl><type ref="prev"/><name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>mv_x</name></decl>, <decl><type ref="prev"/><name>mv_y</name></decl>, <decl><type ref="prev"/><name>avg_x</name></decl>, <decl><type ref="prev"/><name>avg_y</name></decl>, <decl><type ref="prev"/><name>dx</name></decl>, <decl><type ref="prev"/><name>dy</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>d</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Block</name> <modifier>*</modifier></type><name>block</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Cluster</name> <modifier>*</modifier></type><name>cluster</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>cluster_new</name></decl>;</decl_stmt>

<do>do <block>{<block_content>

<expr_stmt><expr><name>changed</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>mb_y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>mb_y</name> <operator>&lt;</operator> <name><name>mi_ctx</name><operator>-&gt;</operator><name>b_height</name></name></expr>;</condition> <incr><expr><name>mb_y</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>mb_x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>mb_x</name> <operator>&lt;</operator> <name><name>mi_ctx</name><operator>-&gt;</operator><name>b_width</name></name></expr>;</condition> <incr><expr><name>mb_x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>block</name> <operator>=</operator> <operator>&amp;</operator><name><name>mi_ctx</name><operator>-&gt;</operator><name>int_blocks</name><index>[<expr><name>mb_x</name> <operator>+</operator> <name>mb_y</name> <operator>*</operator> <name><name>mi_ctx</name><operator>-&gt;</operator><name>b_width</name></name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <name><name>block</name><operator>-&gt;</operator><name>cid</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>cluster</name> <operator>=</operator> <operator>&amp;</operator><name><name>mi_ctx</name><operator>-&gt;</operator><name>clusters</name><index>[<expr><name>c</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>mv_x</name> <operator>=</operator> <name><name>block</name><operator>-&gt;</operator><name>mvs</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>mv_y</name> <operator>=</operator> <name><name>block</name><operator>-&gt;</operator><name>mvs</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cluster</name><operator>-&gt;</operator><name>nb</name></name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name>avg_x</name> <operator>=</operator> <name><name>cluster</name><operator>-&gt;</operator><name>sum</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>/</operator> <name><name>cluster</name><operator>-&gt;</operator><name>nb</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>avg_y</name> <operator>=</operator> <name><name>cluster</name><operator>-&gt;</operator><name>sum</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>/</operator> <name><name>cluster</name><operator>-&gt;</operator><name>nb</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>dx</name> <operator>=</operator> <name>avg_x</name> <operator>-</operator> <name>mv_x</name></expr>;</expr_stmt>

<expr_stmt><expr><name>dy</name> <operator>=</operator> <name>avg_y</name> <operator>-</operator> <name>mv_y</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FFABS</name><argument_list>(<argument><expr><name>dx</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name>CLUSTER_THRESHOLD</name> <operator>||</operator> <call><name>FFABS</name><argument_list>(<argument><expr><name>dy</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name>CLUSTER_THRESHOLD</name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>d</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>d</name> <operator>&lt;</operator> <literal type="number">5</literal></expr>;</condition> <incr><expr><name>d</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name>mb_y</name> <operator>-</operator> <name>d</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>mb_y</name> <operator>+</operator> <name>d</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>mi_ctx</name><operator>-&gt;</operator><name>b_height</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name>mb_x</name> <operator>-</operator> <name>d</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>mb_x</name> <operator>+</operator> <name>d</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>mi_ctx</name><operator>-&gt;</operator><name>b_width</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>Block</name> <modifier>*</modifier></type><name>nb</name> <init>= <expr><operator>&amp;</operator><name><name>mi_ctx</name><operator>-&gt;</operator><name>int_blocks</name><index>[<expr><name>x</name> <operator>+</operator> <name>y</name> <operator>*</operator> <name><name>mi_ctx</name><operator>-&gt;</operator><name>b_width</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>nb</name><operator>-&gt;</operator><name>cid</name></name> <operator>&gt;</operator> <name><name>block</name><operator>-&gt;</operator><name>cid</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>nb</name><operator>-&gt;</operator><name>cid</name></name> <operator>&lt;</operator> <name>c</name> <operator>||</operator> <name>c</name> <operator>==</operator> <name><name>block</name><operator>-&gt;</operator><name>cid</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>c</name> <operator>=</operator> <name><name>nb</name><operator>-&gt;</operator><name>cid</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for></block_content></block></for></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name><name>block</name><operator>-&gt;</operator><name>cid</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>c</name> <operator>=</operator> <name>c_max</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>&gt;=</operator> <name>NB_CLUSTERS</name></expr>)</condition> <block>{<block_content>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>cluster_new</name> <operator>=</operator> <operator>&amp;</operator><name><name>mi_ctx</name><operator>-&gt;</operator><name>clusters</name><index>[<expr><name>c</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cluster_new</name><operator>-&gt;</operator><name>sum</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+=</operator> <name>mv_x</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cluster_new</name><operator>-&gt;</operator><name>sum</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+=</operator> <name>mv_y</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cluster</name><operator>-&gt;</operator><name>sum</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-=</operator> <name>mv_x</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cluster</name><operator>-&gt;</operator><name>sum</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-=</operator> <name>mv_y</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cluster_new</name><operator>-&gt;</operator><name>nb</name></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cluster</name><operator>-&gt;</operator><name>nb</name></name><operator>--</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>c_max</name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name>c_max</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>block</name><operator>-&gt;</operator><name>cid</name></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>

<expr_stmt><expr><name>changed</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for></block_content></block></for>

</block_content>}</block> while <condition>(<expr><name>changed</name></expr>)</condition>;</do>

<for>for <control>(<init><expr><name>mb_y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>mb_y</name> <operator>&lt;</operator> <name><name>mi_ctx</name><operator>-&gt;</operator><name>b_height</name></name></expr>;</condition> <incr><expr><name>mb_y</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>mb_x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>mb_x</name> <operator>&lt;</operator> <name><name>mi_ctx</name><operator>-&gt;</operator><name>b_width</name></name></expr>;</condition> <incr><expr><name>mb_x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>block</name> <operator>=</operator> <operator>&amp;</operator><name><name>mi_ctx</name><operator>-&gt;</operator><name>int_blocks</name><index>[<expr><name>mb_x</name> <operator>+</operator> <name>mb_y</name> <operator>*</operator> <name><name>mi_ctx</name><operator>-&gt;</operator><name>b_width</name></name></expr>]</index></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name>mb_y</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>mb_y</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name><name>mi_ctx</name><operator>-&gt;</operator><name>b_height</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name>mb_x</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>mb_x</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name><name>mi_ctx</name><operator>-&gt;</operator><name>b_width</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>dx</name> <operator>=</operator> <name>x</name> <operator>-</operator> <name>mb_x</name></expr>;</expr_stmt>

<expr_stmt><expr><name>dy</name> <operator>=</operator> <name>y</name> <operator>-</operator> <name>mb_y</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>x</name> <operator>-</operator> <name>mb_x</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>y</name> <operator>-</operator> <name>mb_y</name><operator>)</operator> <operator>||</operator> <operator>!</operator><name>dx</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>dy</name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>mb_x</name> <operator>||</operator> <operator>!</operator><name>mb_y</name> <operator>||</operator> <name>mb_x</name> <operator>==</operator> <name><name>mi_ctx</name><operator>-&gt;</operator><name>b_width</name></name> <operator>-</operator> <literal type="number">1</literal> <operator>||</operator> <name>mb_y</name> <operator>==</operator> <name><name>mi_ctx</name><operator>-&gt;</operator><name>b_height</name></name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>block</name><operator>-&gt;</operator><name>cid</name></name> <operator>!=</operator> <name><name>mi_ctx</name><operator>-&gt;</operator><name>int_blocks</name><index>[<expr><name>x</name> <operator>+</operator> <name>y</name> <operator>*</operator> <name><name>mi_ctx</name><operator>-&gt;</operator><name>b_width</name></name></expr>]</index></name><operator>.</operator><name>cid</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>dx</name> <operator>&amp;&amp;</operator> <name><name>block</name><operator>-&gt;</operator><name>cid</name></name> <operator>==</operator> <name><name>mi_ctx</name><operator>-&gt;</operator><name>int_blocks</name><index>[<expr><name>x</name> <operator>+</operator> <operator>(</operator><name>mb_y</name> <operator>-</operator> <name>dy</name><operator>)</operator> <operator>*</operator> <name><name>mi_ctx</name><operator>-&gt;</operator><name>b_width</name></name></expr>]</index></name><operator>.</operator><name>cid</name> <operator>||</operator>

<operator>!</operator><name>dy</name> <operator>&amp;&amp;</operator> <name><name>block</name><operator>-&gt;</operator><name>cid</name></name> <operator>==</operator> <name><name>mi_ctx</name><operator>-&gt;</operator><name>int_blocks</name><index>[<expr><operator>(</operator><name>mb_x</name> <operator>-</operator> <name>dx</name><operator>)</operator> <operator>+</operator> <name>y</name> <operator>*</operator> <name><name>mi_ctx</name><operator>-&gt;</operator><name>b_width</name></name></expr>]</index></name><operator>.</operator><name>cid</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>=</operator> <call><name>var_size_bme</name><argument_list>(<argument><expr><name>mi_ctx</name></expr></argument>, <argument><expr><name>block</name></expr></argument>, <argument><expr><name>mb_x</name> <operator>&lt;&lt;</operator> <name><name>mi_ctx</name><operator>-&gt;</operator><name>log2_mb_size</name></name></expr></argument>, <argument><expr><name>mb_y</name> <operator>&lt;&lt;</operator> <name><name>mi_ctx</name><operator>-&gt;</operator><name>log2_mb_size</name></name></expr></argument>, <argument><expr><name><name>mi_ctx</name><operator>-&gt;</operator><name>log2_mb_size</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for></block_content></block></for>

</block_content>}</block></for></block_content></block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>inject_frame</name><parameter_list>(<parameter><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>inlink</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>avf_in</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>inlink</name><operator>-&gt;</operator><name>dst</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>MIContext</name> <modifier>*</modifier></type><name>mi_ctx</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Frame</name></type> <name>frame_tmp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>mb_x</name></decl>, <decl><type ref="prev"/><name>mb_y</name></decl>, <decl><type ref="prev"/><name>dir</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mi_ctx</name><operator>-&gt;</operator><name>frames</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>avf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>frame_tmp</name> <operator>=</operator> <name><name>mi_ctx</name><operator>-&gt;</operator><name>frames</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mi_ctx</name><operator>-&gt;</operator><name>frames</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>mi_ctx</name><operator>-&gt;</operator><name>frames</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>mi_ctx</name><operator>-&gt;</operator><name>frames</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name>NB_FRAMES</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mi_ctx</name><operator>-&gt;</operator><name>frames</name><index>[<expr><name>NB_FRAMES</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>frame_tmp</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mi_ctx</name><operator>-&gt;</operator><name>frames</name><index>[<expr><name>NB_FRAMES</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>avf</name> <operator>=</operator> <name>avf_in</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>mi_ctx</name><operator>-&gt;</operator><name>mi_mode</name></name> <operator>==</operator> <name>MI_MODE_MCI</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>mi_ctx</name><operator>-&gt;</operator><name>me_method</name></name> <operator>==</operator> <name>AV_ME_METHOD_EPZS</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>mi_ctx</name><operator>-&gt;</operator><name>mv_table</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>memcpy</name><argument_list>(<argument><expr><name><name>mi_ctx</name><operator>-&gt;</operator><name>mv_table</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>mi_ctx</name><operator>-&gt;</operator><name>mv_table</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>mi_ctx</name><operator>-&gt;</operator><name>mv_table</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>mi_ctx</name><operator>-&gt;</operator><name>b_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mi_ctx</name><operator>-&gt;</operator><name>mv_table</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>memcpy</name><argument_list>(<argument><expr><name><name>mi_ctx</name><operator>-&gt;</operator><name>mv_table</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>mi_ctx</name><operator>-&gt;</operator><name>mv_table</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>mi_ctx</name><operator>-&gt;</operator><name>mv_table</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>mi_ctx</name><operator>-&gt;</operator><name>b_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>mi_ctx</name><operator>-&gt;</operator><name>me_mode</name></name> <operator>==</operator> <name>ME_MODE_BIDIR</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>mi_ctx</name><operator>-&gt;</operator><name>frames</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>avf</name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>dir</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>dir</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>dir</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>mi_ctx</name><operator>-&gt;</operator><name>me_ctx</name><operator>.</operator><name>linesize</name></name> <operator>=</operator> <name><name>mi_ctx</name><operator>-&gt;</operator><name>frames</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name><name>avf</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mi_ctx</name><operator>-&gt;</operator><name>me_ctx</name><operator>.</operator><name>data_cur</name></name> <operator>=</operator> <name><name>mi_ctx</name><operator>-&gt;</operator><name>frames</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name><name>avf</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mi_ctx</name><operator>-&gt;</operator><name>me_ctx</name><operator>.</operator><name>data_ref</name></name> <operator>=</operator> <name><name>mi_ctx</name><operator>-&gt;</operator><name>frames</name><index>[<expr><ternary><condition><expr><name>dir</name></expr> ?</condition><then> <expr><literal type="number">3</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>]</index></name><operator>.</operator><name><name>avf</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>mb_y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>mb_y</name> <operator>&lt;</operator> <name><name>mi_ctx</name><operator>-&gt;</operator><name>b_height</name></name></expr>;</condition> <incr><expr><name>mb_y</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>mb_x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>mb_x</name> <operator>&lt;</operator> <name><name>mi_ctx</name><operator>-&gt;</operator><name>b_width</name></name></expr>;</condition> <incr><expr><name>mb_x</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>search_mv</name><argument_list>(<argument><expr><name>mi_ctx</name></expr></argument>, <argument><expr><name><name>mi_ctx</name><operator>-&gt;</operator><name>frames</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>blocks</name></expr></argument>, <argument><expr><name>mb_x</name></expr></argument>, <argument><expr><name>mb_y</name></expr></argument>, <argument><expr><name>dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for></block_content></block></for>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>mi_ctx</name><operator>-&gt;</operator><name>me_mode</name></name> <operator>==</operator> <name>ME_MODE_BILAT</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>Block</name> <modifier>*</modifier></type><name>block</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>mi_ctx</name><operator>-&gt;</operator><name>frames</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>avf</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>mi_ctx</name><operator>-&gt;</operator><name>me_ctx</name><operator>.</operator><name>linesize</name></name> <operator>=</operator> <name><name>mi_ctx</name><operator>-&gt;</operator><name>frames</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>avf</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mi_ctx</name><operator>-&gt;</operator><name>me_ctx</name><operator>.</operator><name>data_cur</name></name> <operator>=</operator> <name><name>mi_ctx</name><operator>-&gt;</operator><name>frames</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>avf</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mi_ctx</name><operator>-&gt;</operator><name>me_ctx</name><operator>.</operator><name>data_ref</name></name> <operator>=</operator> <name><name>mi_ctx</name><operator>-&gt;</operator><name>frames</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name><name>avf</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bilateral_me</name><argument_list>(<argument><expr><name>mi_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>mi_ctx</name><operator>-&gt;</operator><name>mc_mode</name></name> <operator>==</operator> <name>MC_MODE_AOBMC</name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>mb_y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>mb_y</name> <operator>&lt;</operator> <name><name>mi_ctx</name><operator>-&gt;</operator><name>b_height</name></name></expr>;</condition> <incr><expr><name>mb_y</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>mb_x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>mb_x</name> <operator>&lt;</operator> <name><name>mi_ctx</name><operator>-&gt;</operator><name>b_width</name></name></expr>;</condition> <incr><expr><name>mb_x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>x_mb</name> <init>= <expr><name>mb_x</name> <operator>&lt;&lt;</operator> <name><name>mi_ctx</name><operator>-&gt;</operator><name>log2_mb_size</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>y_mb</name> <init>= <expr><name>mb_y</name> <operator>&lt;&lt;</operator> <name><name>mi_ctx</name><operator>-&gt;</operator><name>log2_mb_size</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>block</name> <operator>=</operator> <operator>&amp;</operator><name><name>mi_ctx</name><operator>-&gt;</operator><name>int_blocks</name><index>[<expr><name>mb_x</name> <operator>+</operator> <name>mb_y</name> <operator>*</operator> <name><name>mi_ctx</name><operator>-&gt;</operator><name>b_width</name></name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>block</name><operator>-&gt;</operator><name>sbad</name></name> <operator>=</operator> <call><name>get_sbad</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mi_ctx</name><operator>-&gt;</operator><name>me_ctx</name></name></expr></argument>, <argument><expr><name>x_mb</name></expr></argument>, <argument><expr><name>y_mb</name></expr></argument>, <argument><expr><name>x_mb</name> <operator>+</operator> <name><name>block</name><operator>-&gt;</operator><name>mvs</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>y_mb</name> <operator>+</operator> <name><name>block</name><operator>-&gt;</operator><name>mvs</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for></block_content></block></for>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>mi_ctx</name><operator>-&gt;</operator><name>vsbmc</name></name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>NB_CLUSTERS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>mi_ctx</name><operator>-&gt;</operator><name>clusters</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>sum</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mi_ctx</name><operator>-&gt;</operator><name>clusters</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>sum</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mi_ctx</name><operator>-&gt;</operator><name>clusters</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>nb</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>mb_y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>mb_y</name> <operator>&lt;</operator> <name><name>mi_ctx</name><operator>-&gt;</operator><name>b_height</name></name></expr>;</condition> <incr><expr><name>mb_y</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>mb_x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>mb_x</name> <operator>&lt;</operator> <name><name>mi_ctx</name><operator>-&gt;</operator><name>b_width</name></name></expr>;</condition> <incr><expr><name>mb_x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>block</name> <operator>=</operator> <operator>&amp;</operator><name><name>mi_ctx</name><operator>-&gt;</operator><name>int_blocks</name><index>[<expr><name>mb_x</name> <operator>+</operator> <name>mb_y</name> <operator>*</operator> <name><name>mi_ctx</name><operator>-&gt;</operator><name>b_width</name></name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mi_ctx</name><operator>-&gt;</operator><name>clusters</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>sum</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+=</operator> <name><name>block</name><operator>-&gt;</operator><name>mvs</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mi_ctx</name><operator>-&gt;</operator><name>clusters</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>sum</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+=</operator> <name><name>block</name><operator>-&gt;</operator><name>mvs</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for></block_content></block></for>

<expr_stmt><expr><name><name>mi_ctx</name><operator>-&gt;</operator><name>clusters</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>nb</name> <operator>=</operator> <name><name>mi_ctx</name><operator>-&gt;</operator><name>b_count</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>=</operator> <call><name>cluster_mvs</name><argument_list>(<argument><expr><name>mi_ctx</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>detect_scene_change</name><parameter_list>(<parameter><decl><type><name>MIContext</name> <modifier>*</modifier></type><name>mi_ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVMotionEstContext</name> <modifier>*</modifier></type><name>me_ctx</name> <init>= <expr><operator>&amp;</operator><name><name>mi_ctx</name><operator>-&gt;</operator><name>me_ctx</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p1</name> <init>= <expr><name><name>mi_ctx</name><operator>-&gt;</operator><name>frames</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>avf</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ptrdiff_t</name></type> <name>linesize1</name> <init>= <expr><name><name>mi_ctx</name><operator>-&gt;</operator><name>frames</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>avf</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p2</name> <init>= <expr><name><name>mi_ctx</name><operator>-&gt;</operator><name>frames</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name><name>avf</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ptrdiff_t</name></type> <name>linesize2</name> <init>= <expr><name><name>mi_ctx</name><operator>-&gt;</operator><name>frames</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name><name>avf</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>mi_ctx</name><operator>-&gt;</operator><name>scd_method</name></name> <operator>==</operator> <name>SCD_METHOD_FDIFF</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>double</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>mafd</name></decl>, <decl><type ref="prev"/><name>diff</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>sad</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name><name>mi_ctx</name><operator>-&gt;</operator><name>sad</name></name><argument_list>(<argument><expr><name>p1</name></expr></argument>, <argument><expr><name>linesize1</name></expr></argument>, <argument><expr><name>p2</name></expr></argument>, <argument><expr><name>linesize2</name></expr></argument>, <argument><expr><name><name>me_ctx</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>me_ctx</name><operator>-&gt;</operator><name>height</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sad</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>emms_c</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>mafd</name> <operator>=</operator> <operator>(</operator><name>double</name><operator>)</operator> <name>sad</name> <operator>/</operator> <operator>(</operator><name><name>me_ctx</name><operator>-&gt;</operator><name>height</name></name> <operator>*</operator> <name><name>me_ctx</name><operator>-&gt;</operator><name>width</name></name> <operator>*</operator> <literal type="number">3</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>diff</name> <operator>=</operator> <call><name>fabs</name><argument_list>(<argument><expr><name>mafd</name> <operator>-</operator> <name><name>mi_ctx</name><operator>-&gt;</operator><name>prev_mafd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>av_clipf</name><argument_list>(<argument><expr><call><name>FFMIN</name><argument_list>(<argument><expr><name>mafd</name></expr></argument>, <argument><expr><name>diff</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">100.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mi_ctx</name><operator>-&gt;</operator><name>prev_mafd</name></name> <operator>=</operator> <name>mafd</name></expr>;</expr_stmt>

<return>return <expr><name>ret</name> <operator>&gt;=</operator> <name><name>mi_ctx</name><operator>-&gt;</operator><name>scd_threshold</name></name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ADD_PIXELS</name><parameter_list>(<parameter><type><name>b_weight</name></type></parameter>, <parameter><type><name>mv_x</name></type></parameter>, <parameter><type><name>mv_y</name></type></parameter>)</parameter_list></cpp:macro><cpp:value>do {if (!b_weight || pixel_refs-&gt;nb + 1 &gt;= NB_PIXEL_MVS)continue;pixel_refs-&gt;refs[pixel_refs-&gt;nb] = 1;pixel_weights-&gt;weights[pixel_refs-&gt;nb] = b_weight * (ALPHA_MAX - alpha);pixel_mvs-&gt;mvs[pixel_refs-&gt;nb][0] = av_clip((mv_x * alpha) / ALPHA_MAX, x_min, x_max);pixel_mvs-&gt;mvs[pixel_refs-&gt;nb][1] = av_clip((mv_y * alpha) / ALPHA_MAX, y_min, y_max);pixel_refs-&gt;nb++;pixel_refs-&gt;refs[pixel_refs-&gt;nb] = 2;pixel_weights-&gt;weights[pixel_refs-&gt;nb] = b_weight * alpha;pixel_mvs-&gt;mvs[pixel_refs-&gt;nb][0] = av_clip(-mv_x * (ALPHA_MAX - alpha) / ALPHA_MAX, x_min, x_max);pixel_mvs-&gt;mvs[pixel_refs-&gt;nb][1] = av_clip(-mv_y * (ALPHA_MAX - alpha) / ALPHA_MAX, y_min, y_max);pixel_refs-&gt;nb++;} while(0)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type> <name>bidirectional_obmc</name><parameter_list>(<parameter><decl><type><name>MIContext</name> <modifier>*</modifier></type><name>mi_ctx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>alpha</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>width</name> <init>= <expr><name><name>mi_ctx</name><operator>-&gt;</operator><name>frames</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>avf</name><operator>-&gt;</operator><name>width</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>height</name> <init>= <expr><name><name>mi_ctx</name><operator>-&gt;</operator><name>frames</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>avf</name><operator>-&gt;</operator><name>height</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>mb_y</name></decl>, <decl><type ref="prev"/><name>mb_x</name></decl>, <decl><type ref="prev"/><name>dir</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>mi_ctx</name><operator>-&gt;</operator><name>pixel_refs</name><index>[<expr><name>x</name> <operator>+</operator> <name>y</name> <operator>*</operator> <name>width</name></expr>]</index></name><operator>.</operator><name>nb</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></for></block_content></block></for>

<for>for <control>(<init><expr><name>dir</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>dir</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>dir</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>mb_y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>mb_y</name> <operator>&lt;</operator> <name><name>mi_ctx</name><operator>-&gt;</operator><name>b_height</name></name></expr>;</condition> <incr><expr><name>mb_y</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>mb_x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>mb_x</name> <operator>&lt;</operator> <name><name>mi_ctx</name><operator>-&gt;</operator><name>b_width</name></name></expr>;</condition> <incr><expr><name>mb_x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>a</name> <init>= <expr><ternary><condition><expr><name>dir</name></expr> ?</condition><then> <expr><name>alpha</name></expr> </then><else>: <expr><operator>(</operator><name>ALPHA_MAX</name> <operator>-</operator> <name>alpha</name><operator>)</operator></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>mv_x</name> <init>= <expr><name><name>mi_ctx</name><operator>-&gt;</operator><name>frames</name><index>[<expr><literal type="number">2</literal> <operator>-</operator> <name>dir</name></expr>]</index></name><operator>.</operator><name><name>blocks</name><index>[<expr><name>mb_x</name> <operator>+</operator> <name>mb_y</name> <operator>*</operator> <name><name>mi_ctx</name><operator>-&gt;</operator><name>b_width</name></name></expr>]</index></name><operator>.</operator><name><name>mvs</name><index>[<expr><name>dir</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>mv_y</name> <init>= <expr><name><name>mi_ctx</name><operator>-&gt;</operator><name>frames</name><index>[<expr><literal type="number">2</literal> <operator>-</operator> <name>dir</name></expr>]</index></name><operator>.</operator><name><name>blocks</name><index>[<expr><name>mb_x</name> <operator>+</operator> <name>mb_y</name> <operator>*</operator> <name><name>mi_ctx</name><operator>-&gt;</operator><name>b_width</name></name></expr>]</index></name><operator>.</operator><name><name>mvs</name><index>[<expr><name>dir</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>start_x</name></decl>, <decl><type ref="prev"/><name>start_y</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>startc_x</name></decl>, <decl><type ref="prev"/><name>startc_y</name></decl>, <decl><type ref="prev"/><name>endc_x</name></decl>, <decl><type ref="prev"/><name>endc_y</name></decl>;</decl_stmt>

<expr_stmt><expr><name>start_x</name> <operator>=</operator> <operator>(</operator><name>mb_x</name> <operator>&lt;&lt;</operator> <name><name>mi_ctx</name><operator>-&gt;</operator><name>log2_mb_size</name></name><operator>)</operator> <operator>-</operator> <name><name>mi_ctx</name><operator>-&gt;</operator><name>mb_size</name></name> <operator>/</operator> <literal type="number">2</literal> <operator>+</operator> <name>mv_x</name> <operator>*</operator> <name>a</name> <operator>/</operator> <name>ALPHA_MAX</name></expr>;</expr_stmt>

<expr_stmt><expr><name>start_y</name> <operator>=</operator> <operator>(</operator><name>mb_y</name> <operator>&lt;&lt;</operator> <name><name>mi_ctx</name><operator>-&gt;</operator><name>log2_mb_size</name></name><operator>)</operator> <operator>-</operator> <name><name>mi_ctx</name><operator>-&gt;</operator><name>mb_size</name></name> <operator>/</operator> <literal type="number">2</literal> <operator>+</operator> <name>mv_y</name> <operator>*</operator> <name>a</name> <operator>/</operator> <name>ALPHA_MAX</name></expr>;</expr_stmt>

<expr_stmt><expr><name>startc_x</name> <operator>=</operator> <call><name>av_clip</name><argument_list>(<argument><expr><name>start_x</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>width</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>startc_y</name> <operator>=</operator> <call><name>av_clip</name><argument_list>(<argument><expr><name>start_y</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>height</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>endc_x</name> <operator>=</operator> <call><name>av_clip</name><argument_list>(<argument><expr><name>start_x</name> <operator>+</operator> <operator>(</operator><literal type="number">2</literal> <operator>&lt;&lt;</operator> <name><name>mi_ctx</name><operator>-&gt;</operator><name>log2_mb_size</name></name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>width</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>endc_y</name> <operator>=</operator> <call><name>av_clip</name><argument_list>(<argument><expr><name>start_y</name> <operator>+</operator> <operator>(</operator><literal type="number">2</literal> <operator>&lt;&lt;</operator> <name><name>mi_ctx</name><operator>-&gt;</operator><name>log2_mb_size</name></name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>height</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>dir</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>mv_x</name> <operator>=</operator> <operator>-</operator><name>mv_x</name></expr>;</expr_stmt>

<expr_stmt><expr><name>mv_y</name> <operator>=</operator> <operator>-</operator><name>mv_y</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <name>startc_y</name></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>endc_y</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>y_min</name> <init>= <expr><operator>-</operator><name>y</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>y_max</name> <init>= <expr><name>height</name> <operator>-</operator> <name>y</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <name>startc_x</name></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>endc_x</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>x_min</name> <init>= <expr><operator>-</operator><name>x</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>x_max</name> <init>= <expr><name>width</name> <operator>-</operator> <name>x</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>obmc_weight</name> <init>= <expr><name><name>obmc_tab_linear</name><index>[<expr><literal type="number">4</literal> <operator>-</operator> <name><name>mi_ctx</name><operator>-&gt;</operator><name>log2_mb_size</name></name></expr>]</index><index>[<expr><operator>(</operator><name>x</name> <operator>-</operator> <name>start_x</name><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><name>y</name> <operator>-</operator> <name>start_y</name><operator>)</operator> <operator>&lt;&lt;</operator> <operator>(</operator><name><name>mi_ctx</name><operator>-&gt;</operator><name>log2_mb_size</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PixelMVS</name> <modifier>*</modifier></type><name>pixel_mvs</name> <init>= <expr><operator>&amp;</operator><name><name>mi_ctx</name><operator>-&gt;</operator><name>pixel_mvs</name><index>[<expr><name>x</name> <operator>+</operator> <name>y</name> <operator>*</operator> <name>width</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PixelWeights</name> <modifier>*</modifier></type><name>pixel_weights</name> <init>= <expr><operator>&amp;</operator><name><name>mi_ctx</name><operator>-&gt;</operator><name>pixel_weights</name><index>[<expr><name>x</name> <operator>+</operator> <name>y</name> <operator>*</operator> <name>width</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PixelRefs</name> <modifier>*</modifier></type><name>pixel_refs</name> <init>= <expr><operator>&amp;</operator><name><name>mi_ctx</name><operator>-&gt;</operator><name>pixel_refs</name><index>[<expr><name>x</name> <operator>+</operator> <name>y</name> <operator>*</operator> <name>width</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ADD_PIXELS</name><argument_list>(<argument><expr><name>obmc_weight</name></expr></argument>, <argument><expr><name>mv_x</name></expr></argument>, <argument><expr><name>mv_y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></for></block_content></block></for></block_content></block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>set_frame_data</name><parameter_list>(<parameter><decl><type><name>MIContext</name> <modifier>*</modifier></type><name>mi_ctx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>alpha</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>avf_out</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>, <decl><type ref="prev"/><name>plane</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>plane</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>plane</name> <operator>&lt;</operator> <name><name>mi_ctx</name><operator>-&gt;</operator><name>nb_planes</name></name></expr>;</condition> <incr><expr><name>plane</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>width</name> <init>= <expr><name><name>avf_out</name><operator>-&gt;</operator><name>width</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>height</name> <init>= <expr><name><name>avf_out</name><operator>-&gt;</operator><name>height</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>chroma</name> <init>= <expr><name>plane</name> <operator>==</operator> <literal type="number">1</literal> <operator>||</operator> <name>plane</name> <operator>==</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>x_mv</name></decl>, <decl><type ref="prev"/><name>y_mv</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>weight_sum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>val</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PixelMVS</name> <modifier>*</modifier></type><name>pixel_mvs</name> <init>= <expr><operator>&amp;</operator><name><name>mi_ctx</name><operator>-&gt;</operator><name>pixel_mvs</name><index>[<expr><name>x</name> <operator>+</operator> <name>y</name> <operator>*</operator> <name><name>avf_out</name><operator>-&gt;</operator><name>width</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PixelWeights</name> <modifier>*</modifier></type><name>pixel_weights</name> <init>= <expr><operator>&amp;</operator><name><name>mi_ctx</name><operator>-&gt;</operator><name>pixel_weights</name><index>[<expr><name>x</name> <operator>+</operator> <name>y</name> <operator>*</operator> <name><name>avf_out</name><operator>-&gt;</operator><name>width</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PixelRefs</name> <modifier>*</modifier></type><name>pixel_refs</name> <init>= <expr><operator>&amp;</operator><name><name>mi_ctx</name><operator>-&gt;</operator><name>pixel_refs</name><index>[<expr><name>x</name> <operator>+</operator> <name>y</name> <operator>*</operator> <name><name>avf_out</name><operator>-&gt;</operator><name>width</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pixel_refs</name><operator>-&gt;</operator><name>nb</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name>weight_sum</name> <operator>+=</operator> <name><name>pixel_weights</name><operator>-&gt;</operator><name>weights</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>weight_sum</name> <operator>||</operator> <operator>!</operator><name><name>pixel_refs</name><operator>-&gt;</operator><name>nb</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>pixel_weights</name><operator>-&gt;</operator><name>weights</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>ALPHA_MAX</name> <operator>-</operator> <name>alpha</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pixel_refs</name><operator>-&gt;</operator><name>refs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pixel_mvs</name><operator>-&gt;</operator><name>mvs</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pixel_mvs</name><operator>-&gt;</operator><name>mvs</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pixel_weights</name><operator>-&gt;</operator><name>weights</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>alpha</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pixel_refs</name><operator>-&gt;</operator><name>refs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pixel_mvs</name><operator>-&gt;</operator><name>mvs</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pixel_mvs</name><operator>-&gt;</operator><name>mvs</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pixel_refs</name><operator>-&gt;</operator><name>nb</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>weight_sum</name> <operator>=</operator> <name>ALPHA_MAX</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pixel_refs</name><operator>-&gt;</operator><name>nb</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>Frame</name> <modifier>*</modifier></type><name>frame</name> <init>= <expr><operator>&amp;</operator><name><name>mi_ctx</name><operator>-&gt;</operator><name>frames</name><index>[<expr><name><name>pixel_refs</name><operator>-&gt;</operator><name>refs</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>chroma</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>x_mv</name> <operator>=</operator> <operator>(</operator><name>x</name> <operator>&gt;&gt;</operator> <name><name>mi_ctx</name><operator>-&gt;</operator><name>log2_chroma_w</name></name><operator>)</operator> <operator>+</operator> <name><name>pixel_mvs</name><operator>-&gt;</operator><name>mvs</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>/</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name><name>mi_ctx</name><operator>-&gt;</operator><name>log2_chroma_w</name></name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>y_mv</name> <operator>=</operator> <operator>(</operator><name>y</name> <operator>&gt;&gt;</operator> <name><name>mi_ctx</name><operator>-&gt;</operator><name>log2_chroma_h</name></name><operator>)</operator> <operator>+</operator> <name><name>pixel_mvs</name><operator>-&gt;</operator><name>mvs</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>/</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name><name>mi_ctx</name><operator>-&gt;</operator><name>log2_chroma_h</name></name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>x_mv</name> <operator>=</operator> <name>x</name> <operator>+</operator> <name><name>pixel_mvs</name><operator>-&gt;</operator><name>mvs</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>y_mv</name> <operator>=</operator> <name>y</name> <operator>+</operator> <name><name>pixel_mvs</name><operator>-&gt;</operator><name>mvs</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>val</name> <operator>+=</operator> <name><name>pixel_weights</name><operator>-&gt;</operator><name>weights</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name><name>frame</name><operator>-&gt;</operator><name>avf</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>plane</name></expr>]</index><index>[<expr><name>x_mv</name> <operator>+</operator> <name>y_mv</name> <operator>*</operator> <name><name>frame</name><operator>-&gt;</operator><name>avf</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>plane</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>ROUNDED_DIV</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>weight_sum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>chroma</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>avf_out</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>plane</name></expr>]</index><index>[<expr><operator>(</operator><name>x</name> <operator>&gt;&gt;</operator> <name><name>mi_ctx</name><operator>-&gt;</operator><name>log2_chroma_w</name></name><operator>)</operator> <operator>+</operator> <operator>(</operator><name>y</name> <operator>&gt;&gt;</operator> <name><name>mi_ctx</name><operator>-&gt;</operator><name>log2_chroma_h</name></name><operator>)</operator> <operator>*</operator> <name><name>avf_out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>plane</name></expr>]</index></name></expr>]</index></name> <operator>=</operator> <name>val</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>avf_out</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>plane</name></expr>]</index><index>[<expr><name>x</name> <operator>+</operator> <name>y</name> <operator>*</operator> <name><name>avf_out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>plane</name></expr>]</index></name></expr>]</index></name> <operator>=</operator> <name>val</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></for></block_content></block></for>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>var_size_bmc</name><parameter_list>(<parameter><decl><type><name>MIContext</name> <modifier>*</modifier></type><name>mi_ctx</name></decl></parameter>, <parameter><decl><type><name>Block</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x_mb</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y_mb</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>alpha</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>sb_x</name></decl>, <decl><type ref="prev"/><name>sb_y</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>width</name> <init>= <expr><name><name>mi_ctx</name><operator>-&gt;</operator><name>frames</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>avf</name><operator>-&gt;</operator><name>width</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>height</name> <init>= <expr><name><name>mi_ctx</name><operator>-&gt;</operator><name>frames</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>avf</name><operator>-&gt;</operator><name>height</name></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>sb_y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>sb_y</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>sb_y</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>sb_x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>sb_x</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>sb_x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>Block</name> <modifier>*</modifier></type><name>sb</name> <init>= <expr><operator>&amp;</operator><name><name>block</name><operator>-&gt;</operator><name>subs</name><index>[<expr><name>sb_x</name> <operator>+</operator> <name>sb_y</name> <operator>*</operator> <literal type="number">2</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sb</name><operator>-&gt;</operator><name>sb</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>var_size_bmc</name><argument_list>(<argument><expr><name>mi_ctx</name></expr></argument>, <argument><expr><name>sb</name></expr></argument>, <argument><expr><name>x_mb</name> <operator>+</operator> <operator>(</operator><name>sb_x</name> <operator>&lt;&lt;</operator> <operator>(</operator><name>n</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr></argument>, <argument><expr><name>y_mb</name> <operator>+</operator> <operator>(</operator><name>sb_y</name> <operator>&lt;&lt;</operator> <operator>(</operator><name>n</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr></argument>, <argument><expr><name>n</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>alpha</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>mv_x</name> <init>= <expr><name><name>sb</name><operator>-&gt;</operator><name>mvs</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>mv_y</name> <init>= <expr><name><name>sb</name><operator>-&gt;</operator><name>mvs</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>start_x</name> <init>= <expr><name>x_mb</name> <operator>+</operator> <operator>(</operator><name>sb_x</name> <operator>&lt;&lt;</operator> <operator>(</operator><name>n</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>start_y</name> <init>= <expr><name>y_mb</name> <operator>+</operator> <operator>(</operator><name>sb_y</name> <operator>&lt;&lt;</operator> <operator>(</operator><name>n</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>end_x</name> <init>= <expr><name>start_x</name> <operator>+</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>n</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>end_y</name> <init>= <expr><name>start_y</name> <operator>+</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>n</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <name>start_y</name></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>end_y</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>y_min</name> <init>= <expr><operator>-</operator><name>y</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>y_max</name> <init>= <expr><name>height</name> <operator>-</operator> <name>y</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <name>start_x</name></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>end_x</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>x_min</name> <init>= <expr><operator>-</operator><name>x</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>x_max</name> <init>= <expr><name>width</name> <operator>-</operator> <name>x</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PixelMVS</name> <modifier>*</modifier></type><name>pixel_mvs</name> <init>= <expr><operator>&amp;</operator><name><name>mi_ctx</name><operator>-&gt;</operator><name>pixel_mvs</name><index>[<expr><name>x</name> <operator>+</operator> <name>y</name> <operator>*</operator> <name>width</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PixelWeights</name> <modifier>*</modifier></type><name>pixel_weights</name> <init>= <expr><operator>&amp;</operator><name><name>mi_ctx</name><operator>-&gt;</operator><name>pixel_weights</name><index>[<expr><name>x</name> <operator>+</operator> <name>y</name> <operator>*</operator> <name>width</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PixelRefs</name> <modifier>*</modifier></type><name>pixel_refs</name> <init>= <expr><operator>&amp;</operator><name><name>mi_ctx</name><operator>-&gt;</operator><name>pixel_refs</name><index>[<expr><name>x</name> <operator>+</operator> <name>y</name> <operator>*</operator> <name>width</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ADD_PIXELS</name><argument_list>(<argument><expr><name>PX_WEIGHT_MAX</name></expr></argument>, <argument><expr><name>mv_x</name></expr></argument>, <argument><expr><name>mv_y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for></block_content></block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>bilateral_obmc</name><parameter_list>(<parameter><decl><type><name>MIContext</name> <modifier>*</modifier></type><name>mi_ctx</name></decl></parameter>, <parameter><decl><type><name>Block</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mb_x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mb_y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>alpha</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>width</name> <init>= <expr><name><name>mi_ctx</name><operator>-&gt;</operator><name>frames</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>avf</name><operator>-&gt;</operator><name>width</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>height</name> <init>= <expr><name><name>mi_ctx</name><operator>-&gt;</operator><name>frames</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>avf</name><operator>-&gt;</operator><name>height</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Block</name> <modifier>*</modifier></type><name>nb</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>nb_x</name></decl>, <decl><type ref="prev"/><name>nb_y</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name><name>sbads</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>mv_x</name> <init>= <expr><name><name>block</name><operator>-&gt;</operator><name>mvs</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>mv_y</name> <init>= <expr><name><name>block</name><operator>-&gt;</operator><name>mvs</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>start_x</name></decl>, <decl><type ref="prev"/><name>start_y</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>startc_x</name></decl>, <decl><type ref="prev"/><name>startc_y</name></decl>, <decl><type ref="prev"/><name>endc_x</name></decl>, <decl><type ref="prev"/><name>endc_y</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>mi_ctx</name><operator>-&gt;</operator><name>mc_mode</name></name> <operator>==</operator> <name>MC_MODE_AOBMC</name></expr>)</condition><block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>nb_y</name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>mb_y</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>nb_y</name> <operator>&lt;</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>mb_y</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name><name>mi_ctx</name><operator>-&gt;</operator><name>b_height</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>nb_y</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>nb_x</name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>mb_x</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>nb_x</name> <operator>&lt;</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>mb_x</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name><name>mi_ctx</name><operator>-&gt;</operator><name>b_width</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>nb_x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>x_nb</name> <init>= <expr><name>nb_x</name> <operator>&lt;&lt;</operator> <name><name>mi_ctx</name><operator>-&gt;</operator><name>log2_mb_size</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>y_nb</name> <init>= <expr><name>nb_y</name> <operator>&lt;&lt;</operator> <name><name>mi_ctx</name><operator>-&gt;</operator><name>log2_mb_size</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>nb_x</name> <operator>-</operator> <name>mb_x</name> <operator>||</operator> <name>nb_y</name> <operator>-</operator> <name>mb_y</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>sbads</name><index>[<expr><name>nb_x</name> <operator>-</operator> <name>mb_x</name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <operator>(</operator><name>nb_y</name> <operator>-</operator> <name>mb_y</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <call><name>get_sbad</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mi_ctx</name><operator>-&gt;</operator><name>me_ctx</name></name></expr></argument>, <argument><expr><name>x_nb</name></expr></argument>, <argument><expr><name>y_nb</name></expr></argument>, <argument><expr><name>x_nb</name> <operator>+</operator> <name><name>block</name><operator>-&gt;</operator><name>mvs</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>y_nb</name> <operator>+</operator> <name><name>block</name><operator>-&gt;</operator><name>mvs</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for></block_content></block></for></block_content></block></if></if_stmt>

<expr_stmt><expr><name>start_x</name> <operator>=</operator> <operator>(</operator><name>mb_x</name> <operator>&lt;&lt;</operator> <name><name>mi_ctx</name><operator>-&gt;</operator><name>log2_mb_size</name></name><operator>)</operator> <operator>-</operator> <name><name>mi_ctx</name><operator>-&gt;</operator><name>mb_size</name></name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>start_y</name> <operator>=</operator> <operator>(</operator><name>mb_y</name> <operator>&lt;&lt;</operator> <name><name>mi_ctx</name><operator>-&gt;</operator><name>log2_mb_size</name></name><operator>)</operator> <operator>-</operator> <name><name>mi_ctx</name><operator>-&gt;</operator><name>mb_size</name></name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>startc_x</name> <operator>=</operator> <call><name>av_clip</name><argument_list>(<argument><expr><name>start_x</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>width</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>startc_y</name> <operator>=</operator> <call><name>av_clip</name><argument_list>(<argument><expr><name>start_y</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>height</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>endc_x</name> <operator>=</operator> <call><name>av_clip</name><argument_list>(<argument><expr><name>start_x</name> <operator>+</operator> <operator>(</operator><literal type="number">2</literal> <operator>&lt;&lt;</operator> <name><name>mi_ctx</name><operator>-&gt;</operator><name>log2_mb_size</name></name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>width</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>endc_y</name> <operator>=</operator> <call><name>av_clip</name><argument_list>(<argument><expr><name>start_y</name> <operator>+</operator> <operator>(</operator><literal type="number">2</literal> <operator>&lt;&lt;</operator> <name><name>mi_ctx</name><operator>-&gt;</operator><name>log2_mb_size</name></name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>height</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <name>startc_y</name></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>endc_y</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>y_min</name> <init>= <expr><operator>-</operator><name>y</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>y_max</name> <init>= <expr><name>height</name> <operator>-</operator> <name>y</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <name>startc_x</name></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>endc_x</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>x_min</name> <init>= <expr><operator>-</operator><name>x</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>x_max</name> <init>= <expr><name>width</name> <operator>-</operator> <name>x</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>obmc_weight</name> <init>= <expr><name><name>obmc_tab_linear</name><index>[<expr><literal type="number">4</literal> <operator>-</operator> <name><name>mi_ctx</name><operator>-&gt;</operator><name>log2_mb_size</name></name></expr>]</index><index>[<expr><operator>(</operator><name>x</name> <operator>-</operator> <name>start_x</name><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><name>y</name> <operator>-</operator> <name>start_y</name><operator>)</operator> <operator>&lt;&lt;</operator> <operator>(</operator><name><name>mi_ctx</name><operator>-&gt;</operator><name>log2_mb_size</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PixelMVS</name> <modifier>*</modifier></type><name>pixel_mvs</name> <init>= <expr><operator>&amp;</operator><name><name>mi_ctx</name><operator>-&gt;</operator><name>pixel_mvs</name><index>[<expr><name>x</name> <operator>+</operator> <name>y</name> <operator>*</operator> <name>width</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PixelWeights</name> <modifier>*</modifier></type><name>pixel_weights</name> <init>= <expr><operator>&amp;</operator><name><name>mi_ctx</name><operator>-&gt;</operator><name>pixel_weights</name><index>[<expr><name>x</name> <operator>+</operator> <name>y</name> <operator>*</operator> <name>width</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PixelRefs</name> <modifier>*</modifier></type><name>pixel_refs</name> <init>= <expr><operator>&amp;</operator><name><name>mi_ctx</name><operator>-&gt;</operator><name>pixel_refs</name><index>[<expr><name>x</name> <operator>+</operator> <name>y</name> <operator>*</operator> <name>width</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>mi_ctx</name><operator>-&gt;</operator><name>mc_mode</name></name> <operator>==</operator> <name>MC_MODE_AOBMC</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>nb_x</name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>x</name> <operator>-</operator> <name>start_x</name><operator>)</operator> <operator>&gt;&gt;</operator> <operator>(</operator><name><name>mi_ctx</name><operator>-&gt;</operator><name>log2_mb_size</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>*</operator> <literal type="number">2</literal> <operator>-</operator> <literal type="number">3</literal><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>nb_y</name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>y</name> <operator>-</operator> <name>start_y</name><operator>)</operator> <operator>&gt;&gt;</operator> <operator>(</operator><name><name>mi_ctx</name><operator>-&gt;</operator><name>log2_mb_size</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>*</operator> <literal type="number">2</literal> <operator>-</operator> <literal type="number">3</literal><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>nb_x</name> <operator>||</operator> <name>nb_y</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>sbad</name> <init>= <expr><name><name>sbads</name><index>[<expr><name>nb_x</name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <operator>(</operator><name>nb_y</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <literal type="number">3</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>nb</name> <operator>=</operator> <operator>&amp;</operator><name><name>mi_ctx</name><operator>-&gt;</operator><name>int_blocks</name><index>[<expr><name>mb_x</name> <operator>+</operator> <name>nb_x</name> <operator>+</operator> <operator>(</operator><name>mb_y</name> <operator>+</operator> <name>nb_y</name><operator>)</operator> <operator>*</operator> <name><name>mi_ctx</name><operator>-&gt;</operator><name>b_width</name></name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>sbad</name> <operator>&amp;&amp;</operator> <name>sbad</name> <operator>!=</operator> <name>UINT64_MAX</name> <operator>&amp;&amp;</operator> <name><name>nb</name><operator>-&gt;</operator><name>sbad</name></name> <operator>!=</operator> <name>UINT64_MAX</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>phi</name> <init>= <expr><call><name>av_clip</name><argument_list>(<argument><expr><name>ALPHA_MAX</name> <operator>*</operator> <name><name>nb</name><operator>-&gt;</operator><name>sbad</name></name> <operator>/</operator> <name>sbad</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>ALPHA_MAX</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>obmc_weight</name> <operator>=</operator> <name>obmc_weight</name> <operator>*</operator> <name>phi</name> <operator>/</operator> <name>ALPHA_MAX</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ADD_PIXELS</name><argument_list>(<argument><expr><name>obmc_weight</name></expr></argument>, <argument><expr><name>mv_x</name></expr></argument>, <argument><expr><name>mv_y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>interpolate</name><parameter_list>(<parameter><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>inlink</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>avf_out</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>inlink</name><operator>-&gt;</operator><name>dst</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>outlink</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>outputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>MIContext</name> <modifier>*</modifier></type><name>mi_ctx</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>plane</name></decl>, <decl><type ref="prev"/><name>alpha</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>pts</name></decl>;</decl_stmt>

<expr_stmt><expr><name>pts</name> <operator>=</operator> <call><name>av_rescale</name><argument_list>(<argument><expr><name><name>avf_out</name><operator>-&gt;</operator><name>pts</name></name></expr></argument>, <argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator> <name>ALPHA_MAX</name> <operator>*</operator> <name><name>outlink</name><operator>-&gt;</operator><name>time_base</name><operator>.</operator><name>num</name></name> <operator>*</operator> <name><name>inlink</name><operator>-&gt;</operator><name>time_base</name><operator>.</operator><name>den</name></name></expr></argument>,

<argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator> <name><name>outlink</name><operator>-&gt;</operator><name>time_base</name><operator>.</operator><name>den</name></name> <operator>*</operator> <name><name>inlink</name><operator>-&gt;</operator><name>time_base</name><operator>.</operator><name>num</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>alpha</name> <operator>=</operator> <operator>(</operator><name>pts</name> <operator>-</operator> <name><name>mi_ctx</name><operator>-&gt;</operator><name>frames</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>avf</name><operator>-&gt;</operator><name>pts</name></name> <operator>*</operator> <name>ALPHA_MAX</name><operator>)</operator> <operator>/</operator> <operator>(</operator><name><name>mi_ctx</name><operator>-&gt;</operator><name>frames</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name><name>avf</name><operator>-&gt;</operator><name>pts</name></name> <operator>-</operator> <name><name>mi_ctx</name><operator>-&gt;</operator><name>frames</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>avf</name><operator>-&gt;</operator><name>pts</name></name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>alpha</name> <operator>=</operator> <call><name>av_clip</name><argument_list>(<argument><expr><name>alpha</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>ALPHA_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>alpha</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>alpha</name> <operator>==</operator> <name>ALPHA_MAX</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_frame_copy</name><argument_list>(<argument><expr><name>avf_out</name></expr></argument>, <argument><expr><ternary><condition><expr><name>alpha</name></expr> ?</condition><then> <expr><name><name>mi_ctx</name><operator>-&gt;</operator><name>frames</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>avf</name></expr> </then><else>: <expr><name><name>mi_ctx</name><operator>-&gt;</operator><name>frames</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>avf</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>mi_ctx</name><operator>-&gt;</operator><name>scene_changed</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_frame_copy</name><argument_list>(<argument><expr><name>avf_out</name></expr></argument>, <argument><expr><ternary><condition><expr><name>alpha</name> <operator>&gt;</operator> <name>ALPHA_MAX</name> <operator>/</operator> <literal type="number">2</literal></expr> ?</condition><then> <expr><name><name>mi_ctx</name><operator>-&gt;</operator><name>frames</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>avf</name></expr> </then><else>: <expr><name><name>mi_ctx</name><operator>-&gt;</operator><name>frames</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>avf</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<switch>switch<condition>(<expr><name><name>mi_ctx</name><operator>-&gt;</operator><name>mi_mode</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>MI_MODE_DUP</name></expr>:</case>

<expr_stmt><expr><call><name>av_frame_copy</name><argument_list>(<argument><expr><name>avf_out</name></expr></argument>, <argument><expr><ternary><condition><expr><name>alpha</name> <operator>&gt;</operator> <name>ALPHA_MAX</name> <operator>/</operator> <literal type="number">2</literal></expr> ?</condition><then> <expr><name><name>mi_ctx</name><operator>-&gt;</operator><name>frames</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>avf</name></expr> </then><else>: <expr><name><name>mi_ctx</name><operator>-&gt;</operator><name>frames</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>avf</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>MI_MODE_BLEND</name></expr>:</case>

<for>for <control>(<init><expr><name>plane</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>plane</name> <operator>&lt;</operator> <name><name>mi_ctx</name><operator>-&gt;</operator><name>nb_planes</name></name></expr>;</condition> <incr><expr><name>plane</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>width</name> <init>= <expr><name><name>avf_out</name><operator>-&gt;</operator><name>width</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>height</name> <init>= <expr><name><name>avf_out</name><operator>-&gt;</operator><name>height</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>plane</name> <operator>==</operator> <literal type="number">1</literal> <operator>||</operator> <name>plane</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>width</name> <operator>=</operator> <call><name>AV_CEIL_RSHIFT</name><argument_list>(<argument><expr><name>width</name></expr></argument>, <argument><expr><name><name>mi_ctx</name><operator>-&gt;</operator><name>log2_chroma_w</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>height</name> <operator>=</operator> <call><name>AV_CEIL_RSHIFT</name><argument_list>(<argument><expr><name>height</name></expr></argument>, <argument><expr><name><name>mi_ctx</name><operator>-&gt;</operator><name>log2_chroma_h</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>avf_out</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>plane</name></expr>]</index><index>[<expr><name>x</name> <operator>+</operator> <name>y</name> <operator>*</operator> <name><name>avf_out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>plane</name></expr>]</index></name></expr>]</index></name> <operator>=</operator>

<operator>(</operator><name>alpha</name> <operator>*</operator> <name><name>mi_ctx</name><operator>-&gt;</operator><name>frames</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name><name>avf</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>plane</name></expr>]</index><index>[<expr><name>x</name> <operator>+</operator> <name>y</name> <operator>*</operator> <name><name>mi_ctx</name><operator>-&gt;</operator><name>frames</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name><name>avf</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>plane</name></expr>]</index></name></expr>]</index></name> <operator>+</operator>

<operator>(</operator><name>ALPHA_MAX</name> <operator>-</operator> <name>alpha</name><operator>)</operator> <operator>*</operator> <name><name>mi_ctx</name><operator>-&gt;</operator><name>frames</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>avf</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>plane</name></expr>]</index><index>[<expr><name>x</name> <operator>+</operator> <name>y</name> <operator>*</operator> <name><name>mi_ctx</name><operator>-&gt;</operator><name>frames</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>avf</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>plane</name></expr>]</index></name></expr>]</index></name> <operator>+</operator> <literal type="number">512</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">10</literal></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></for>

<break>break;</break>

<case>case <expr><name>MI_MODE_MCI</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>mi_ctx</name><operator>-&gt;</operator><name>me_mode</name></name> <operator>==</operator> <name>ME_MODE_BIDIR</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>bidirectional_obmc</name><argument_list>(<argument><expr><name>mi_ctx</name></expr></argument>, <argument><expr><name>alpha</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_frame_data</name><argument_list>(<argument><expr><name>mi_ctx</name></expr></argument>, <argument><expr><name>alpha</name></expr></argument>, <argument><expr><name>avf_out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>mi_ctx</name><operator>-&gt;</operator><name>me_mode</name></name> <operator>==</operator> <name>ME_MODE_BILAT</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>mb_x</name></decl>, <decl><type ref="prev"/><name>mb_y</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Block</name> <modifier>*</modifier></type><name>block</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name><name>mi_ctx</name><operator>-&gt;</operator><name>frames</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>avf</name><operator>-&gt;</operator><name>height</name></name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name><name>mi_ctx</name><operator>-&gt;</operator><name>frames</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>avf</name><operator>-&gt;</operator><name>width</name></name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>mi_ctx</name><operator>-&gt;</operator><name>pixel_refs</name><index>[<expr><name>x</name> <operator>+</operator> <name>y</name> <operator>*</operator> <name><name>mi_ctx</name><operator>-&gt;</operator><name>frames</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>avf</name><operator>-&gt;</operator><name>width</name></name></expr>]</index></name><operator>.</operator><name>nb</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></for></block_content></block></for>

<for>for <control>(<init><expr><name>mb_y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>mb_y</name> <operator>&lt;</operator> <name><name>mi_ctx</name><operator>-&gt;</operator><name>b_height</name></name></expr>;</condition> <incr><expr><name>mb_y</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>mb_x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>mb_x</name> <operator>&lt;</operator> <name><name>mi_ctx</name><operator>-&gt;</operator><name>b_width</name></name></expr>;</condition> <incr><expr><name>mb_x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>block</name> <operator>=</operator> <operator>&amp;</operator><name><name>mi_ctx</name><operator>-&gt;</operator><name>int_blocks</name><index>[<expr><name>mb_x</name> <operator>+</operator> <name>mb_y</name> <operator>*</operator> <name><name>mi_ctx</name><operator>-&gt;</operator><name>b_width</name></name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>block</name><operator>-&gt;</operator><name>sb</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>var_size_bmc</name><argument_list>(<argument><expr><name>mi_ctx</name></expr></argument>, <argument><expr><name>block</name></expr></argument>, <argument><expr><name>mb_x</name> <operator>&lt;&lt;</operator> <name><name>mi_ctx</name><operator>-&gt;</operator><name>log2_mb_size</name></name></expr></argument>, <argument><expr><name>mb_y</name> <operator>&lt;&lt;</operator> <name><name>mi_ctx</name><operator>-&gt;</operator><name>log2_mb_size</name></name></expr></argument>, <argument><expr><name><name>mi_ctx</name><operator>-&gt;</operator><name>log2_mb_size</name></name></expr></argument>, <argument><expr><name>alpha</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>bilateral_obmc</name><argument_list>(<argument><expr><name>mi_ctx</name></expr></argument>, <argument><expr><name>block</name></expr></argument>, <argument><expr><name>mb_x</name></expr></argument>, <argument><expr><name>mb_y</name></expr></argument>, <argument><expr><name>alpha</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for></block_content></block></for>

<expr_stmt><expr><call><name>set_frame_data</name><argument_list>(<argument><expr><name>mi_ctx</name></expr></argument>, <argument><expr><name>alpha</name></expr></argument>, <argument><expr><name>avf_out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>filter_frame</name><parameter_list>(<parameter><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>inlink</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>avf_in</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>inlink</name><operator>-&gt;</operator><name>dst</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>outlink</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>outputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>MIContext</name> <modifier>*</modifier></type><name>mi_ctx</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avf_in</name><operator>-&gt;</operator><name>pts</name></name> <operator>==</operator> <name>AV_NOPTS_VALUE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_filter_frame</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>outputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>avf_in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>mi_ctx</name><operator>-&gt;</operator><name>frames</name><index>[<expr><name>NB_FRAMES</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>avf</name> <operator>||</operator> <name><name>avf_in</name><operator>-&gt;</operator><name>pts</name></name> <operator>&lt;</operator> <name><name>mi_ctx</name><operator>-&gt;</operator><name>frames</name><index>[<expr><name>NB_FRAMES</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>avf</name><operator>-&gt;</operator><name>pts</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_VERBOSE</name></expr></argument>, <argument><expr><literal type="string">"Initializing out pts from input pts %"</literal><name>PRId64</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name><name>avf_in</name><operator>-&gt;</operator><name>pts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mi_ctx</name><operator>-&gt;</operator><name>out_pts</name></name> <operator>=</operator> <call><name>av_rescale_q</name><argument_list>(<argument><expr><name><name>avf_in</name><operator>-&gt;</operator><name>pts</name></name></expr></argument>, <argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>time_base</name></name></expr></argument>, <argument><expr><name><name>outlink</name><operator>-&gt;</operator><name>time_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>mi_ctx</name><operator>-&gt;</operator><name>frames</name><index>[<expr><name>NB_FRAMES</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>avf</name></expr>)</condition><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>=</operator> <call><name>inject_frame</name><argument_list>(<argument><expr><name>inlink</name></expr></argument>, <argument><expr><call><name>av_frame_clone</name><argument_list>(<argument><expr><name>avf_in</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>=</operator> <call><name>inject_frame</name><argument_list>(<argument><expr><name>inlink</name></expr></argument>, <argument><expr><name>avf_in</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>mi_ctx</name><operator>-&gt;</operator><name>frames</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>avf</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>mi_ctx</name><operator>-&gt;</operator><name>scene_changed</name></name> <operator>=</operator> <call><name>detect_scene_change</name><argument_list>(<argument><expr><name>mi_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>avf_out</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>av_compare_ts</name><argument_list>(<argument><expr><name><name>mi_ctx</name><operator>-&gt;</operator><name>out_pts</name></name></expr></argument>, <argument><expr><name><name>outlink</name><operator>-&gt;</operator><name>time_base</name></name></expr></argument>, <argument><expr><name><name>mi_ctx</name><operator>-&gt;</operator><name>frames</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name><name>avf</name><operator>-&gt;</operator><name>pts</name></name></expr></argument>, <argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>time_base</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>avf_out</name> <operator>=</operator> <call><name>ff_get_video_buffer</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>outputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>w</name></name></expr></argument>, <argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>h</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_frame_copy_props</name><argument_list>(<argument><expr><name>avf_out</name></expr></argument>, <argument><expr><name><name>mi_ctx</name><operator>-&gt;</operator><name>frames</name><index>[<expr><name>NB_FRAMES</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>avf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avf_out</name><operator>-&gt;</operator><name>pts</name></name> <operator>=</operator> <name><name>mi_ctx</name><operator>-&gt;</operator><name>out_pts</name></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>interpolate</name><argument_list>(<argument><expr><name>inlink</name></expr></argument>, <argument><expr><name>avf_out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_filter_frame</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>outputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>avf_out</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>void</name></type> <name>free_blocks</name><parameter_list>(<parameter><decl><type><name>Block</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sb</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>block</name><operator>-&gt;</operator><name>subs</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>free_blocks</name><argument_list>(<argument><expr><name><name>block</name><operator>-&gt;</operator><name>subs</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>sb</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>void</name></type> <name>uninit</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>MIContext</name> <modifier>*</modifier></type><name>mi_ctx</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>m</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mi_ctx</name><operator>-&gt;</operator><name>pixel_mvs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mi_ctx</name><operator>-&gt;</operator><name>pixel_weights</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mi_ctx</name><operator>-&gt;</operator><name>pixel_refs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>mi_ctx</name><operator>-&gt;</operator><name>int_blocks</name></name></expr>)</condition><block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>m</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>m</name> <operator>&lt;</operator> <name><name>mi_ctx</name><operator>-&gt;</operator><name>b_count</name></name></expr>;</condition> <incr><expr><name>m</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>free_blocks</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mi_ctx</name><operator>-&gt;</operator><name>int_blocks</name><index>[<expr><name>m</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mi_ctx</name><operator>-&gt;</operator><name>int_blocks</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>NB_FRAMES</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>Frame</name> <modifier>*</modifier></type><name>frame</name> <init>= <expr><operator>&amp;</operator><name><name>mi_ctx</name><operator>-&gt;</operator><name>frames</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>frame</name><operator>-&gt;</operator><name>blocks</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>frame</name><operator>-&gt;</operator><name>avf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mi_ctx</name><operator>-&gt;</operator><name>mv_table</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVFilterPad</name></type> <name><name>minterpolate_inputs</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"default"</literal></expr>,

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,

<expr><operator>.</operator><name>filter_frame</name> <operator>=</operator> <name>filter_frame</name></expr>,

<expr><operator>.</operator><name>config_props</name> <operator>=</operator> <name>config_input</name></expr>,

}</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVFilterPad</name></type> <name><name>minterpolate_outputs</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"default"</literal></expr>,

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,

<expr><operator>.</operator><name>config_props</name> <operator>=</operator> <name>config_output</name></expr>,

}</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFilter</name></type> <name>ff_vf_minterpolate</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"minterpolate"</literal></expr>,

<expr><operator>.</operator><name>description</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"Frame rate conversion using Motion Interpolation."</literal></expr></argument>)</argument_list></call></expr>,

<expr><operator>.</operator><name>priv_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>MIContext</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><operator>.</operator><name>priv_class</name> <operator>=</operator> <operator>&amp;</operator><name>minterpolate_class</name></expr>,

<expr><operator>.</operator><name>uninit</name> <operator>=</operator> <name>uninit</name></expr>,

<expr><operator>.</operator><name>query_formats</name> <operator>=</operator> <name>query_formats</name></expr>,

<expr><operator>.</operator><name>inputs</name> <operator>=</operator> <name>minterpolate_inputs</name></expr>,

<expr><operator>.</operator><name>outputs</name> <operator>=</operator> <name>minterpolate_outputs</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

</unit>
