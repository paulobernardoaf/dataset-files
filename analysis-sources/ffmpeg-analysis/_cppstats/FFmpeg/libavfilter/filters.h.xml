<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavfilter\filters.h"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avfilter.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FFERROR_NOT_READY</name></cpp:macro> <cpp:value>FFERRTAG('N','R','D','Y')</cpp:value></cpp:define>

<function_decl><type><name>void</name></type> <name>ff_filter_set_ready</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>filter</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>priority</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>ff_inlink_process_commands</name><parameter_list>(<parameter><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>link</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>AVFrame</name> <modifier>*</modifier></type><name>frame</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>ff_inlink_evaluate_timeline_at_frame</name><parameter_list>(<parameter><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>link</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>AVFrame</name> <modifier>*</modifier></type><name>frame</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>size_t</name></type> <name>ff_inlink_queued_frames</name><parameter_list>(<parameter><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>link</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>ff_inlink_check_available_frame</name><parameter_list>(<parameter><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>link</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>ff_inlink_queued_samples</name><parameter_list>(<parameter><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>link</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>ff_inlink_check_available_samples</name><parameter_list>(<parameter><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>link</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>min</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>ff_inlink_consume_frame</name><parameter_list>(<parameter><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>link</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier><modifier>*</modifier></type><name>rframe</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>ff_inlink_consume_samples</name><parameter_list>(<parameter><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>link</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>min</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>max</name></decl></parameter>,

<parameter><decl><type><name>AVFrame</name> <modifier>*</modifier><modifier>*</modifier></type><name>rframe</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>ff_inlink_peek_frame</name><parameter_list>(<parameter><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>link</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>idx</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>ff_inlink_make_frame_writable</name><parameter_list>(<parameter><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>link</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier><modifier>*</modifier></type><name>rframe</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>ff_inlink_acknowledge_status</name><parameter_list>(<parameter><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>link</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>rstatus</name></decl></parameter>, <parameter><decl><type><name>int64_t</name> <modifier>*</modifier></type><name>rpts</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>ff_inlink_request_frame</name><parameter_list>(<parameter><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>link</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>ff_inlink_set_status</name><parameter_list>(<parameter><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>link</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>status</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>ff_outlink_frame_wanted</name><parameter_list>(<parameter><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>link</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name><name>link</name><operator>-&gt;</operator><name>frame_wanted_out</name></name></expr>;</return>

</block_content>}</block></function>

<function_decl><type><name>int</name></type> <name>ff_outlink_get_status</name><parameter_list>(<parameter><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>link</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>ff_outlink_set_status</name><parameter_list>(<parameter><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>link</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>status</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>pts</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>ff_avfilter_link_set_in_status</name><argument_list>(<argument><expr><name>link</name></expr></argument>, <argument><expr><name>status</name></expr></argument>, <argument><expr><name>pts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF_FILTER_FORWARD_STATUS_BACK</name><parameter_list>(<parameter><type><name>outlink</name></type></parameter>, <parameter><type><name>inlink</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { int ret = ff_outlink_get_status(outlink); if (ret) { ff_inlink_set_status(inlink, ret); return 0; } } while (0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF_FILTER_FORWARD_STATUS_BACK_ALL</name><parameter_list>(<parameter><type><name>outlink</name></type></parameter>, <parameter><type><name>filter</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { int ret = ff_outlink_get_status(outlink); if (ret) { unsigned i; for (i = 0; i &lt; filter-&gt;nb_inputs; i++) ff_inlink_set_status(filter-&gt;inputs[i], ret); return 0; } } while (0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF_FILTER_FORWARD_STATUS</name><parameter_list>(<parameter><type><name>inlink</name></type></parameter>, <parameter><type><name>outlink</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { int status; int64_t pts; if (ff_inlink_acknowledge_status(inlink, &amp;status, &amp;pts)) { ff_outlink_set_status(outlink, status, pts); return 0; } } while (0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF_FILTER_FORWARD_STATUS_ALL</name><parameter_list>(<parameter><type><name>inlink</name></type></parameter>, <parameter><type><name>filter</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { int status; int64_t pts; if (ff_inlink_acknowledge_status(inlink, &amp;status, &amp;pts)) { unsigned i; for (i = 0; i &lt; filter-&gt;nb_outputs; i++) ff_outlink_set_status(filter-&gt;outputs[i], status, pts); return 0; } } while (0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF_FILTER_FORWARD_WANTED</name><parameter_list>(<parameter><type><name>outlink</name></type></parameter>, <parameter><type><name>inlink</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { if (ff_outlink_frame_wanted(outlink)) { ff_inlink_request_frame(inlink); return 0; } } while (0)</cpp:value></cpp:define>

</unit>
