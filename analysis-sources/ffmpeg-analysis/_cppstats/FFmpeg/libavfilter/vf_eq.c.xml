<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavfilter\vf_eq.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavfilter/internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/common.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/imgutils.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/opt.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/pixdesc.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vf_eq.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>void</name></type> <name>create_lut</name><parameter_list>(<parameter><decl><type><name>EQParameters</name> <modifier>*</modifier></type><name>param</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>g</name> <init>= <expr><literal type="number">1.0</literal> <operator>/</operator> <name><name>param</name><operator>-&gt;</operator><name>gamma</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>lw</name> <init>= <expr><literal type="number">1.0</literal> <operator>-</operator> <name><name>param</name><operator>-&gt;</operator><name>gamma_weight</name></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">256</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>double</name></type> <name>v</name> <init>= <expr><name>i</name> <operator>/</operator> <literal type="number">255.0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>v</name> <operator>=</operator> <name><name>param</name><operator>-&gt;</operator><name>contrast</name></name> <operator>*</operator> <operator>(</operator><name>v</name> <operator>-</operator> <literal type="number">0.5</literal><operator>)</operator> <operator>+</operator> <literal type="number">0.5</literal> <operator>+</operator> <name><name>param</name><operator>-&gt;</operator><name>brightness</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>v</name> <operator>&lt;=</operator> <literal type="number">0.0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>param</name><operator>-&gt;</operator><name>lut</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>v</name> <operator>=</operator> <name>v</name> <operator>*</operator> <name>lw</name> <operator>+</operator> <call><name>pow</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>g</name></expr></argument>)</argument_list></call> <operator>*</operator> <name><name>param</name><operator>-&gt;</operator><name>gamma_weight</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>v</name> <operator>&gt;=</operator> <literal type="number">1.0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>param</name><operator>-&gt;</operator><name>lut</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">255</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>param</name><operator>-&gt;</operator><name>lut</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">256.0</literal> <operator>*</operator> <name>v</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>param</name><operator>-&gt;</operator><name>lut_clean</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>apply_lut</name><parameter_list>(<parameter><decl><type><name>EQParameters</name> <modifier>*</modifier></type><name>param</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_stride</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>param</name><operator>-&gt;</operator><name>lut_clean</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>create_lut</name><argument_list>(<argument><expr><name>param</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>h</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>w</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>dst</name><index>[<expr><name>y</name> <operator>*</operator> <name>dst_stride</name> <operator>+</operator> <name>x</name></expr>]</index></name> <operator>=</operator> <name><name>param</name><operator>-&gt;</operator><name>lut</name><index>[<expr><name><name>src</name><index>[<expr><name>y</name> <operator>*</operator> <name>src_stride</name> <operator>+</operator> <name>x</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>process_c</name><parameter_list>(<parameter><decl><type><name>EQParameters</name> <modifier>*</modifier></type><name>param</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_stride</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>, <decl><type ref="prev"/><name>pel</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>contrast</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><name><name>param</name><operator>-&gt;</operator><name>contrast</name></name> <operator>*</operator> <literal type="number">256</literal> <operator>*</operator> <literal type="number">16</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>brightness</name> <init>= <expr><operator>(</operator><operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><literal type="number">100.0</literal> <operator>*</operator> <name><name>param</name><operator>-&gt;</operator><name>brightness</name></name> <operator>+</operator> <literal type="number">100.0</literal><operator>)</operator> <operator>*</operator> <literal type="number">511</literal><operator>)</operator> <operator>/</operator> <literal type="number">200</literal> <operator>-</operator> <literal type="number">128</literal> <operator>-</operator> <name>contrast</name> <operator>/</operator> <literal type="number">32</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>h</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>w</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>pel</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name><name>src</name><index>[<expr><name>y</name> <operator>*</operator> <name>src_stride</name> <operator>+</operator> <name>x</name></expr>]</index></name> <operator>*</operator> <name>contrast</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">12</literal><operator>)</operator> <operator>+</operator> <name>brightness</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>pel</name> <operator>&amp;</operator> <operator>~</operator><literal type="number">255</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>pel</name> <operator>=</operator> <operator>(</operator><operator>-</operator><name>pel</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">31</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>dst</name><index>[<expr><name>y</name> <operator>*</operator> <name>dst_stride</name> <operator>+</operator> <name>x</name></expr>]</index></name> <operator>=</operator> <name>pel</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>check_values</name><parameter_list>(<parameter><decl><type><name>EQParameters</name> <modifier>*</modifier></type><name>param</name></decl></parameter>, <parameter><decl><type><name>EQContext</name> <modifier>*</modifier></type><name>eq</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>param</name><operator>-&gt;</operator><name>contrast</name></name> <operator>==</operator> <literal type="number">1.0</literal> <operator>&amp;&amp;</operator> <name><name>param</name><operator>-&gt;</operator><name>brightness</name></name> <operator>==</operator> <literal type="number">0.0</literal> <operator>&amp;&amp;</operator> <name><name>param</name><operator>-&gt;</operator><name>gamma</name></name> <operator>==</operator> <literal type="number">1.0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>param</name><operator>-&gt;</operator><name>adjust</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>param</name><operator>-&gt;</operator><name>gamma</name></name> <operator>==</operator> <literal type="number">1.0</literal> <operator>&amp;&amp;</operator> <call><name>fabs</name><argument_list>(<argument><expr><name><name>param</name><operator>-&gt;</operator><name>contrast</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">7.9</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>param</name><operator>-&gt;</operator><name>adjust</name></name> <operator>=</operator> <name><name>eq</name><operator>-&gt;</operator><name>process</name></name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>param</name><operator>-&gt;</operator><name>adjust</name></name> <operator>=</operator> <name>apply_lut</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>set_contrast</name><parameter_list>(<parameter><decl><type><name>EQContext</name> <modifier>*</modifier></type><name>eq</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>eq</name><operator>-&gt;</operator><name>contrast</name></name> <operator>=</operator> <call><name>av_clipf</name><argument_list>(<argument><expr><call><name>av_expr_eval</name><argument_list>(<argument><expr><name><name>eq</name><operator>-&gt;</operator><name>contrast_pexpr</name></name></expr></argument>, <argument><expr><name><name>eq</name><operator>-&gt;</operator><name>var_values</name></name></expr></argument>, <argument><expr><name>eq</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1000.0</literal></expr></argument>, <argument><expr><literal type="number">1000.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>eq</name><operator>-&gt;</operator><name>param</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>contrast</name> <operator>=</operator> <name><name>eq</name><operator>-&gt;</operator><name>contrast</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>eq</name><operator>-&gt;</operator><name>param</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>lut_clean</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>check_values</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>eq</name><operator>-&gt;</operator><name>param</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>eq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>set_brightness</name><parameter_list>(<parameter><decl><type><name>EQContext</name> <modifier>*</modifier></type><name>eq</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>eq</name><operator>-&gt;</operator><name>brightness</name></name> <operator>=</operator> <call><name>av_clipf</name><argument_list>(<argument><expr><call><name>av_expr_eval</name><argument_list>(<argument><expr><name><name>eq</name><operator>-&gt;</operator><name>brightness_pexpr</name></name></expr></argument>, <argument><expr><name><name>eq</name><operator>-&gt;</operator><name>var_values</name></name></expr></argument>, <argument><expr><name>eq</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1.0</literal></expr></argument>, <argument><expr><literal type="number">1.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>eq</name><operator>-&gt;</operator><name>param</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>brightness</name> <operator>=</operator> <name><name>eq</name><operator>-&gt;</operator><name>brightness</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>eq</name><operator>-&gt;</operator><name>param</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>lut_clean</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>check_values</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>eq</name><operator>-&gt;</operator><name>param</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>eq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>set_gamma</name><parameter_list>(<parameter><decl><type><name>EQContext</name> <modifier>*</modifier></type><name>eq</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>eq</name><operator>-&gt;</operator><name>gamma</name></name> <operator>=</operator> <call><name>av_clipf</name><argument_list>(<argument><expr><call><name>av_expr_eval</name><argument_list>(<argument><expr><name><name>eq</name><operator>-&gt;</operator><name>gamma_pexpr</name></name></expr></argument>, <argument><expr><name><name>eq</name><operator>-&gt;</operator><name>var_values</name></name></expr></argument>, <argument><expr><name>eq</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0.1</literal></expr></argument>, <argument><expr><literal type="number">10.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>eq</name><operator>-&gt;</operator><name>gamma_r</name></name> <operator>=</operator> <call><name>av_clipf</name><argument_list>(<argument><expr><call><name>av_expr_eval</name><argument_list>(<argument><expr><name><name>eq</name><operator>-&gt;</operator><name>gamma_r_pexpr</name></name></expr></argument>, <argument><expr><name><name>eq</name><operator>-&gt;</operator><name>var_values</name></name></expr></argument>, <argument><expr><name>eq</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0.1</literal></expr></argument>, <argument><expr><literal type="number">10.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>eq</name><operator>-&gt;</operator><name>gamma_g</name></name> <operator>=</operator> <call><name>av_clipf</name><argument_list>(<argument><expr><call><name>av_expr_eval</name><argument_list>(<argument><expr><name><name>eq</name><operator>-&gt;</operator><name>gamma_g_pexpr</name></name></expr></argument>, <argument><expr><name><name>eq</name><operator>-&gt;</operator><name>var_values</name></name></expr></argument>, <argument><expr><name>eq</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0.1</literal></expr></argument>, <argument><expr><literal type="number">10.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>eq</name><operator>-&gt;</operator><name>gamma_b</name></name> <operator>=</operator> <call><name>av_clipf</name><argument_list>(<argument><expr><call><name>av_expr_eval</name><argument_list>(<argument><expr><name><name>eq</name><operator>-&gt;</operator><name>gamma_b_pexpr</name></name></expr></argument>, <argument><expr><name><name>eq</name><operator>-&gt;</operator><name>var_values</name></name></expr></argument>, <argument><expr><name>eq</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0.1</literal></expr></argument>, <argument><expr><literal type="number">10.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>eq</name><operator>-&gt;</operator><name>gamma_weight</name></name> <operator>=</operator> <call><name>av_clipf</name><argument_list>(<argument><expr><call><name>av_expr_eval</name><argument_list>(<argument><expr><name><name>eq</name><operator>-&gt;</operator><name>gamma_weight_pexpr</name></name></expr></argument>, <argument><expr><name><name>eq</name><operator>-&gt;</operator><name>var_values</name></name></expr></argument>, <argument><expr><name>eq</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0.0</literal></expr></argument>, <argument><expr><literal type="number">1.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>eq</name><operator>-&gt;</operator><name>param</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>gamma</name> <operator>=</operator> <name><name>eq</name><operator>-&gt;</operator><name>gamma</name></name> <operator>*</operator> <name><name>eq</name><operator>-&gt;</operator><name>gamma_g</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>eq</name><operator>-&gt;</operator><name>param</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>gamma</name> <operator>=</operator> <call><name>sqrt</name><argument_list>(<argument><expr><name><name>eq</name><operator>-&gt;</operator><name>gamma_b</name></name> <operator>/</operator> <name><name>eq</name><operator>-&gt;</operator><name>gamma_g</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>eq</name><operator>-&gt;</operator><name>param</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>gamma</name> <operator>=</operator> <call><name>sqrt</name><argument_list>(<argument><expr><name><name>eq</name><operator>-&gt;</operator><name>gamma_r</name></name> <operator>/</operator> <name><name>eq</name><operator>-&gt;</operator><name>gamma_g</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>eq</name><operator>-&gt;</operator><name>param</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>gamma_weight</name> <operator>=</operator> <name><name>eq</name><operator>-&gt;</operator><name>gamma_weight</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>eq</name><operator>-&gt;</operator><name>param</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>lut_clean</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>check_values</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>eq</name><operator>-&gt;</operator><name>param</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>eq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>set_saturation</name><parameter_list>(<parameter><decl><type><name>EQContext</name> <modifier>*</modifier></type><name>eq</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>eq</name><operator>-&gt;</operator><name>saturation</name></name> <operator>=</operator> <call><name>av_clipf</name><argument_list>(<argument><expr><call><name>av_expr_eval</name><argument_list>(<argument><expr><name><name>eq</name><operator>-&gt;</operator><name>saturation_pexpr</name></name></expr></argument>, <argument><expr><name><name>eq</name><operator>-&gt;</operator><name>var_values</name></name></expr></argument>, <argument><expr><name>eq</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0.0</literal></expr></argument>, <argument><expr><literal type="number">3.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>eq</name><operator>-&gt;</operator><name>param</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>contrast</name> <operator>=</operator> <name><name>eq</name><operator>-&gt;</operator><name>saturation</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>eq</name><operator>-&gt;</operator><name>param</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>lut_clean</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>check_values</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>eq</name><operator>-&gt;</operator><name>param</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>eq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>set_expr</name><parameter_list>(<parameter><decl><type><name>AVExpr</name> <modifier>*</modifier><modifier>*</modifier></type><name>pexpr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>expr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>option</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>log_ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVExpr</name> <modifier>*</modifier></type><name>old</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>pexpr</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>old</name> <operator>=</operator> <operator>*</operator><name>pexpr</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>av_expr_parse</name><argument_list>(<argument><expr><name>pexpr</name></expr></argument>, <argument><expr><name>expr</name></expr></argument>, <argument><expr><name>var_names</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>log_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>log_ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"Error when parsing the expression '%s' for %s\n"</literal></expr></argument>,

<argument><expr><name>expr</name></expr></argument>, <argument><expr><name>option</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>pexpr</name> <operator>=</operator> <name>old</name></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_expr_free</name><argument_list>(<argument><expr><name>old</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_eq_init</name><parameter_list>(<parameter><decl><type><name>EQContext</name> <modifier>*</modifier></type><name>eq</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>eq</name><operator>-&gt;</operator><name>process</name></name> <operator>=</operator> <name>process_c</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ARCH_X86</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ff_eq_init_x86</name><argument_list>(<argument><expr><name>eq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>initialize</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>EQContext</name> <modifier>*</modifier></type><name>eq</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ff_eq_init</name><argument_list>(<argument><expr><name>eq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>set_expr</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>eq</name><operator>-&gt;</operator><name>contrast_pexpr</name></name></expr></argument>, <argument><expr><name><name>eq</name><operator>-&gt;</operator><name>contrast_expr</name></name></expr></argument>, <argument><expr><literal type="string">"contrast"</literal></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator>

<operator>(</operator><name>ret</name> <operator>=</operator> <call><name>set_expr</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>eq</name><operator>-&gt;</operator><name>brightness_pexpr</name></name></expr></argument>, <argument><expr><name><name>eq</name><operator>-&gt;</operator><name>brightness_expr</name></name></expr></argument>, <argument><expr><literal type="string">"brightness"</literal></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator>

<operator>(</operator><name>ret</name> <operator>=</operator> <call><name>set_expr</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>eq</name><operator>-&gt;</operator><name>saturation_pexpr</name></name></expr></argument>, <argument><expr><name><name>eq</name><operator>-&gt;</operator><name>saturation_expr</name></name></expr></argument>, <argument><expr><literal type="string">"saturation"</literal></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator>

<operator>(</operator><name>ret</name> <operator>=</operator> <call><name>set_expr</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>eq</name><operator>-&gt;</operator><name>gamma_pexpr</name></name></expr></argument>, <argument><expr><name><name>eq</name><operator>-&gt;</operator><name>gamma_expr</name></name></expr></argument>, <argument><expr><literal type="string">"gamma"</literal></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator>

<operator>(</operator><name>ret</name> <operator>=</operator> <call><name>set_expr</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>eq</name><operator>-&gt;</operator><name>gamma_r_pexpr</name></name></expr></argument>, <argument><expr><name><name>eq</name><operator>-&gt;</operator><name>gamma_r_expr</name></name></expr></argument>, <argument><expr><literal type="string">"gamma_r"</literal></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator>

<operator>(</operator><name>ret</name> <operator>=</operator> <call><name>set_expr</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>eq</name><operator>-&gt;</operator><name>gamma_g_pexpr</name></name></expr></argument>, <argument><expr><name><name>eq</name><operator>-&gt;</operator><name>gamma_g_expr</name></name></expr></argument>, <argument><expr><literal type="string">"gamma_g"</literal></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator>

<operator>(</operator><name>ret</name> <operator>=</operator> <call><name>set_expr</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>eq</name><operator>-&gt;</operator><name>gamma_b_pexpr</name></name></expr></argument>, <argument><expr><name><name>eq</name><operator>-&gt;</operator><name>gamma_b_expr</name></name></expr></argument>, <argument><expr><literal type="string">"gamma_b"</literal></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator>

<operator>(</operator><name>ret</name> <operator>=</operator> <call><name>set_expr</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>eq</name><operator>-&gt;</operator><name>gamma_weight_pexpr</name></name></expr></argument>, <argument><expr><name><name>eq</name><operator>-&gt;</operator><name>gamma_weight_expr</name></name></expr></argument>, <argument><expr><literal type="string">"gamma_weight"</literal></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>eq</name><operator>-&gt;</operator><name>eval_mode</name></name> <operator>==</operator> <name>EVAL_MODE_INIT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>set_gamma</name><argument_list>(<argument><expr><name>eq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_contrast</name><argument_list>(<argument><expr><name>eq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_brightness</name><argument_list>(<argument><expr><name>eq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_saturation</name><argument_list>(<argument><expr><name>eq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>void</name></type> <name>uninit</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>EQContext</name> <modifier>*</modifier></type><name>eq</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_expr_free</name><argument_list>(<argument><expr><name><name>eq</name><operator>-&gt;</operator><name>contrast_pexpr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name><name>eq</name><operator>-&gt;</operator><name>contrast_pexpr</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_expr_free</name><argument_list>(<argument><expr><name><name>eq</name><operator>-&gt;</operator><name>brightness_pexpr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name><name>eq</name><operator>-&gt;</operator><name>brightness_pexpr</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_expr_free</name><argument_list>(<argument><expr><name><name>eq</name><operator>-&gt;</operator><name>saturation_pexpr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name><name>eq</name><operator>-&gt;</operator><name>saturation_pexpr</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_expr_free</name><argument_list>(<argument><expr><name><name>eq</name><operator>-&gt;</operator><name>gamma_pexpr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name><name>eq</name><operator>-&gt;</operator><name>gamma_pexpr</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_expr_free</name><argument_list>(<argument><expr><name><name>eq</name><operator>-&gt;</operator><name>gamma_weight_pexpr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name><name>eq</name><operator>-&gt;</operator><name>gamma_weight_pexpr</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_expr_free</name><argument_list>(<argument><expr><name><name>eq</name><operator>-&gt;</operator><name>gamma_r_pexpr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name><name>eq</name><operator>-&gt;</operator><name>gamma_r_pexpr</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_expr_free</name><argument_list>(<argument><expr><name><name>eq</name><operator>-&gt;</operator><name>gamma_g_pexpr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name><name>eq</name><operator>-&gt;</operator><name>gamma_g_pexpr</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_expr_free</name><argument_list>(<argument><expr><name><name>eq</name><operator>-&gt;</operator><name>gamma_b_pexpr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name><name>eq</name><operator>-&gt;</operator><name>gamma_b_pexpr</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>config_props</name><parameter_list>(<parameter><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>inlink</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>EQContext</name> <modifier>*</modifier></type><name>eq</name> <init>= <expr><name><name>inlink</name><operator>-&gt;</operator><name>dst</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>eq</name><operator>-&gt;</operator><name>var_values</name><index>[<expr><name>VAR_N</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>eq</name><operator>-&gt;</operator><name>var_values</name><index>[<expr><name>VAR_R</name></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><name><name>inlink</name><operator>-&gt;</operator><name>frame_rate</name><operator>.</operator><name>num</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>inlink</name><operator>-&gt;</operator><name>frame_rate</name><operator>.</operator><name>den</name></name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then>

<expr><name>NAN</name></expr> </then><else>: <expr><call><name>av_q2d</name><argument_list>(<argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>frame_rate</name></name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>query_formats</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>enum</name> <name>AVPixelFormat</name></name></type> <name><name>pixel_fmts_eq</name><index>[]</index></name> <init>= <expr><block>{

<expr><name>AV_PIX_FMT_GRAY8</name></expr>,

<expr><name>AV_PIX_FMT_YUV410P</name></expr>,

<expr><name>AV_PIX_FMT_YUV411P</name></expr>,

<expr><name>AV_PIX_FMT_YUV420P</name></expr>,

<expr><name>AV_PIX_FMT_YUV422P</name></expr>,

<expr><name>AV_PIX_FMT_YUV444P</name></expr>,

<expr><name>AV_PIX_FMT_NONE</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFilterFormats</name> <modifier>*</modifier></type><name>fmts_list</name> <init>= <expr><call><name>ff_make_format_list</name><argument_list>(<argument><expr><name>pixel_fmts_eq</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>fmts_list</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>ff_set_common_formats</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>fmts_list</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TS2T</name><parameter_list>(<parameter><type><name>ts</name></type></parameter>, <parameter><type><name>tb</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((ts) == AV_NOPTS_VALUE ? NAN : (double)(ts) * av_q2d(tb))</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>int</name></type> <name>filter_frame</name><parameter_list>(<parameter><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>inlink</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>in</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>inlink</name><operator>-&gt;</operator><name>dst</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>outlink</name> <init>= <expr><name><name>inlink</name><operator>-&gt;</operator><name>dst</name><operator>-&gt;</operator><name>outputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EQContext</name> <modifier>*</modifier></type><name>eq</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>out</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>pos</name> <init>= <expr><name><name>in</name><operator>-&gt;</operator><name>pkt_pos</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>AVPixFmtDescriptor</name> <modifier>*</modifier></type><name>desc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name>out</name> <operator>=</operator> <call><name>ff_get_video_buffer</name><argument_list>(<argument><expr><name>outlink</name></expr></argument>, <argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>w</name></name></expr></argument>, <argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>h</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>out</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_frame_copy_props</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>desc</name> <operator>=</operator> <call><name>av_pix_fmt_desc_get</name><argument_list>(<argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>format</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>eq</name><operator>-&gt;</operator><name>var_values</name><index>[<expr><name>VAR_N</name></expr>]</index></name> <operator>=</operator> <name><name>inlink</name><operator>-&gt;</operator><name>frame_count_out</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>eq</name><operator>-&gt;</operator><name>var_values</name><index>[<expr><name>VAR_POS</name></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><name>pos</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr> ?</condition><then> <expr><name>NAN</name></expr> </then><else>: <expr><name>pos</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>eq</name><operator>-&gt;</operator><name>var_values</name><index>[<expr><name>VAR_T</name></expr>]</index></name> <operator>=</operator> <call><name>TS2T</name><argument_list>(<argument><expr><name><name>in</name><operator>-&gt;</operator><name>pts</name></name></expr></argument>, <argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>time_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>eq</name><operator>-&gt;</operator><name>eval_mode</name></name> <operator>==</operator> <name>EVAL_MODE_FRAME</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>set_gamma</name><argument_list>(<argument><expr><name>eq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_contrast</name><argument_list>(<argument><expr><name>eq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_brightness</name><argument_list>(<argument><expr><name>eq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_saturation</name><argument_list>(<argument><expr><name>eq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>desc</name><operator>-&gt;</operator><name>nb_components</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>w</name> <init>= <expr><name><name>inlink</name><operator>-&gt;</operator><name>w</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>h</name> <init>= <expr><name><name>inlink</name><operator>-&gt;</operator><name>h</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">1</literal> <operator>||</operator> <name>i</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>w</name> <operator>=</operator> <call><name>AV_CEIL_RSHIFT</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><name><name>desc</name><operator>-&gt;</operator><name>log2_chroma_w</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>h</name> <operator>=</operator> <call><name>AV_CEIL_RSHIFT</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name><name>desc</name><operator>-&gt;</operator><name>log2_chroma_h</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>eq</name><operator>-&gt;</operator><name>param</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>adjust</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>eq</name><operator>-&gt;</operator><name>param</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>adjust</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>eq</name><operator>-&gt;</operator><name>param</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,

<argument><expr><name><name>in</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>in</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_image_copy_plane</name><argument_list>(<argument><expr><name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,

<argument><expr><name><name>in</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>in</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>ff_filter_frame</name><argument_list>(<argument><expr><name>outlink</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>set_param</name><parameter_list>(<parameter><decl><type><name>AVExpr</name> <modifier>*</modifier><modifier>*</modifier></type><name>pexpr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>args</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>,

<parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>set_fn</name>)<parameter_list>(<parameter><decl><type><name>EQContext</name> <modifier>*</modifier></type><name>eq</name></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>EQContext</name> <modifier>*</modifier></type><name>eq</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>set_expr</name><argument_list>(<argument><expr><name>pexpr</name></expr></argument>, <argument><expr><name>args</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>eq</name><operator>-&gt;</operator><name>eval_mode</name></name> <operator>==</operator> <name>EVAL_MODE_INIT</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>set_fn</name><argument_list>(<argument><expr><name>eq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>process_command</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>args</name></decl></parameter>,

<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>res</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>res_len</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>EQContext</name> <modifier>*</modifier></type><name>eq</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SET_PARAM</name><parameter_list>(<parameter><type><name>param_name</name></type></parameter>, <parameter><type><name>set_fn_name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>if (!strcmp(cmd, #param_name)) return set_param(&amp;eq-&gt;param_name##_pexpr, args, cmd, set_##set_fn_name, ctx);</cpp:value></cpp:define>

<macro><name>SET_PARAM</name><argument_list>(<argument>contrast</argument>, <argument>contrast</argument>)</argument_list></macro>

<if_stmt><else>else<block type="pseudo"><block_content> <macro><name>SET_PARAM</name><argument_list>(<argument>brightness</argument>, <argument>brightness</argument>)</argument_list></macro>

<if_stmt><else>else<block type="pseudo"><block_content> <macro><name>SET_PARAM</name><argument_list>(<argument>saturation</argument>, <argument>saturation</argument>)</argument_list></macro>

<if_stmt><else>else<block type="pseudo"><block_content> <macro><name>SET_PARAM</name><argument_list>(<argument>gamma</argument>, <argument>gamma</argument>)</argument_list></macro>

<if_stmt><else>else<block type="pseudo"><block_content> <macro><name>SET_PARAM</name><argument_list>(<argument>gamma_r</argument>, <argument>gamma</argument>)</argument_list></macro>

<if_stmt><else>else<block type="pseudo"><block_content> <macro><name>SET_PARAM</name><argument_list>(<argument>gamma_g</argument>, <argument>gamma</argument>)</argument_list></macro>

<if_stmt><else>else<block type="pseudo"><block_content> <macro><name>SET_PARAM</name><argument_list>(<argument>gamma_b</argument>, <argument>gamma</argument>)</argument_list></macro>

<if_stmt><else>else<block type="pseudo"><block_content> <macro><name>SET_PARAM</name><argument_list>(<argument>gamma_weight</argument>, <argument>gamma</argument>)</argument_list></macro>

<if_stmt><else>else<block type="pseudo"><block_content> <return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOSYS</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></else></if_stmt></block_content></block></else></if_stmt></block_content></block></else></if_stmt></block_content></block></else></if_stmt></block_content></block></else></if_stmt></block_content></block></else></if_stmt></block_content></block></else></if_stmt></block_content></block></else></if_stmt>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVFilterPad</name></type> <name><name>eq_inputs</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"default"</literal></expr>,

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,

<expr><operator>.</operator><name>filter_frame</name> <operator>=</operator> <name>filter_frame</name></expr>,

<expr><operator>.</operator><name>config_props</name> <operator>=</operator> <name>config_props</name></expr>,

}</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVFilterPad</name></type> <name><name>eq_outputs</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"default"</literal></expr>,

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,

}</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OFFSET</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>offsetof(EQContext, x)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLAGS</name></cpp:macro> <cpp:value>AV_OPT_FLAG_FILTERING_PARAM|AV_OPT_FLAG_VIDEO_PARAM</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TFLAGS</name></cpp:macro> <cpp:value>AV_OPT_FLAG_FILTERING_PARAM|AV_OPT_FLAG_VIDEO_PARAM|AV_OPT_FLAG_RUNTIME_PARAM</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVOption</name></type> <name><name>eq_options</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><literal type="string">"contrast"</literal></expr>, <expr><literal type="string">"set the contrast adjustment, negative values give a negative image"</literal></expr>,

<expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>contrast_expr</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_STRING</name></expr>, <expr><block>{<expr><operator>.</operator><name>str</name> <operator>=</operator> <literal type="string">"1.0"</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>TFLAGS</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"brightness"</literal></expr>, <expr><literal type="string">"set the brightness adjustment"</literal></expr>,

<expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>brightness_expr</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_STRING</name></expr>, <expr><block>{<expr><operator>.</operator><name>str</name> <operator>=</operator> <literal type="string">"0.0"</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>TFLAGS</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"saturation"</literal></expr>, <expr><literal type="string">"set the saturation adjustment"</literal></expr>,

<expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>saturation_expr</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_STRING</name></expr>, <expr><block>{<expr><operator>.</operator><name>str</name> <operator>=</operator> <literal type="string">"1.0"</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>TFLAGS</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"gamma"</literal></expr>, <expr><literal type="string">"set the initial gamma value"</literal></expr>,

<expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>gamma_expr</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_STRING</name></expr>, <expr><block>{<expr><operator>.</operator><name>str</name> <operator>=</operator> <literal type="string">"1.0"</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>TFLAGS</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"gamma_r"</literal></expr>, <expr><literal type="string">"gamma value for red"</literal></expr>,

<expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>gamma_r_expr</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_STRING</name></expr>, <expr><block>{<expr><operator>.</operator><name>str</name> <operator>=</operator> <literal type="string">"1.0"</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>TFLAGS</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"gamma_g"</literal></expr>, <expr><literal type="string">"gamma value for green"</literal></expr>,

<expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>gamma_g_expr</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_STRING</name></expr>, <expr><block>{<expr><operator>.</operator><name>str</name> <operator>=</operator> <literal type="string">"1.0"</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>TFLAGS</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"gamma_b"</literal></expr>, <expr><literal type="string">"gamma value for blue"</literal></expr>,

<expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>gamma_b_expr</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_STRING</name></expr>, <expr><block>{<expr><operator>.</operator><name>str</name> <operator>=</operator> <literal type="string">"1.0"</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>TFLAGS</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"gamma_weight"</literal></expr>, <expr><literal type="string">"set the gamma weight which reduces the effect of gamma on bright areas"</literal></expr>,

<expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>gamma_weight_expr</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_STRING</name></expr>, <expr><block>{<expr><operator>.</operator><name>str</name> <operator>=</operator> <literal type="string">"1.0"</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>TFLAGS</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"eval"</literal></expr>, <expr><literal type="string">"specify when to evaluate expressions"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>eval_mode</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>EVAL_MODE_INIT</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>EVAL_MODE_NB</name><operator>-</operator><literal type="number">1</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"eval"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"init"</literal></expr>, <expr><literal type="string">"eval expressions once during initialization"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>EVAL_MODE_INIT</name></expr>}</block></expr>, <expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>FLAGS</name></expr>, <expr><operator>.</operator><name>unit</name> <operator>=</operator> <literal type="string">"eval"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"frame"</literal></expr>, <expr><literal type="string">"eval expressions per-frame"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>EVAL_MODE_FRAME</name></expr>}</block></expr>, <expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>FLAGS</name></expr>, <expr><operator>.</operator><name>unit</name> <operator>=</operator> <literal type="string">"eval"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>AVFILTER_DEFINE_CLASS</name><argument_list>(<argument><expr><name>eq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>AVFilter</name></type> <name>ff_vf_eq</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"eq"</literal></expr>,

<expr><operator>.</operator><name>description</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"Adjust brightness, contrast, gamma, and saturation."</literal></expr></argument>)</argument_list></call></expr>,

<expr><operator>.</operator><name>priv_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>EQContext</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><operator>.</operator><name>priv_class</name> <operator>=</operator> <operator>&amp;</operator><name>eq_class</name></expr>,

<expr><operator>.</operator><name>inputs</name> <operator>=</operator> <name>eq_inputs</name></expr>,

<expr><operator>.</operator><name>outputs</name> <operator>=</operator> <name>eq_outputs</name></expr>,

<expr><operator>.</operator><name>process_command</name> <operator>=</operator> <name>process_command</name></expr>,

<expr><operator>.</operator><name>query_formats</name> <operator>=</operator> <name>query_formats</name></expr>,

<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>initialize</name></expr>,

<expr><operator>.</operator><name>uninit</name> <operator>=</operator> <name>uninit</name></expr>,

<expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>AVFILTER_FLAG_SUPPORT_TIMELINE_GENERIC</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

</unit>
