<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavfilter\vf_il.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/opt.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/imgutils.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/pixdesc.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avfilter.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>

<enum>enum <name>FilterMode</name> <block>{

<decl><name>MODE_NONE</name></decl>,

<decl><name>MODE_INTERLEAVE</name></decl>,

<decl><name>MODE_DEINTERLEAVE</name></decl>

}</block>;</enum>

<typedef>typedef <type><struct>struct <name>IlContext</name> <block>{

<decl_stmt><decl><type><specifier>const</specifier> <name>AVClass</name> <modifier>*</modifier></type><name>class</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>luma_mode</name></decl>, <name>chroma_mode</name>, <name>alpha_mode</name>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>luma_swap</name></decl>, <name>chroma_swap</name>, <name>alpha_swap</name>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>nb_planes</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>linesize</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>, <name>chroma_height</name>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>has_alpha</name></decl>;</decl_stmt>

}</block></struct></type> <name>IlContext</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OFFSET</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>offsetof(IlContext, x)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLAGS</name></cpp:macro> <cpp:value>AV_OPT_FLAG_FILTERING_PARAM|AV_OPT_FLAG_VIDEO_PARAM|AV_OPT_FLAG_RUNTIME_PARAM</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVOption</name></type> <name><name>il_options</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{<expr><literal type="string">"luma_mode"</literal></expr>, <expr><literal type="string">"select luma mode"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>luma_mode</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>MODE_NONE</name></expr>}</block></expr>, <expr><name>MODE_NONE</name></expr>, <expr><name>MODE_DEINTERLEAVE</name></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"luma_mode"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"l"</literal></expr>, <expr><literal type="string">"select luma mode"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>luma_mode</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>MODE_NONE</name></expr>}</block></expr>, <expr><name>MODE_NONE</name></expr>, <expr><name>MODE_DEINTERLEAVE</name></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"luma_mode"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"none"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>MODE_NONE</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"luma_mode"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"interleave"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>MODE_INTERLEAVE</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"luma_mode"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"i"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>MODE_INTERLEAVE</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"luma_mode"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"deinterleave"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>MODE_DEINTERLEAVE</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"luma_mode"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"d"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>MODE_DEINTERLEAVE</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"luma_mode"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"chroma_mode"</literal></expr>, <expr><literal type="string">"select chroma mode"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>chroma_mode</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>MODE_NONE</name></expr>}</block></expr>, <expr><name>MODE_NONE</name></expr>, <expr><name>MODE_DEINTERLEAVE</name></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"chroma_mode"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"c"</literal></expr>, <expr><literal type="string">"select chroma mode"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>chroma_mode</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>MODE_NONE</name></expr>}</block></expr>, <expr><name>MODE_NONE</name></expr>, <expr><name>MODE_DEINTERLEAVE</name></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"chroma_mode"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"none"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>MODE_NONE</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"chroma_mode"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"interleave"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>MODE_INTERLEAVE</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"chroma_mode"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"i"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>MODE_INTERLEAVE</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"chroma_mode"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"deinterleave"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>MODE_DEINTERLEAVE</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"chroma_mode"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"d"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>MODE_DEINTERLEAVE</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"chroma_mode"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"alpha_mode"</literal></expr>, <expr><literal type="string">"select alpha mode"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>alpha_mode</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>MODE_NONE</name></expr>}</block></expr>, <expr><name>MODE_NONE</name></expr>, <expr><name>MODE_DEINTERLEAVE</name></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"alpha_mode"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"a"</literal></expr>, <expr><literal type="string">"select alpha mode"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>alpha_mode</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>MODE_NONE</name></expr>}</block></expr>, <expr><name>MODE_NONE</name></expr>, <expr><name>MODE_DEINTERLEAVE</name></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"alpha_mode"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"none"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>MODE_NONE</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"alpha_mode"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"interleave"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>MODE_INTERLEAVE</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"alpha_mode"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"i"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>MODE_INTERLEAVE</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"alpha_mode"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"deinterleave"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>MODE_DEINTERLEAVE</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"alpha_mode"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"d"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>MODE_DEINTERLEAVE</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"alpha_mode"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"luma_swap"</literal></expr>, <expr><literal type="string">"swap luma fields"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>luma_swap</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_BOOL</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">0</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FLAGS</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"ls"</literal></expr>, <expr><literal type="string">"swap luma fields"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>luma_swap</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_BOOL</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">0</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FLAGS</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"chroma_swap"</literal></expr>, <expr><literal type="string">"swap chroma fields"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>chroma_swap</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_BOOL</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">0</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FLAGS</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"cs"</literal></expr>, <expr><literal type="string">"swap chroma fields"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>chroma_swap</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_BOOL</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">0</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FLAGS</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"alpha_swap"</literal></expr>, <expr><literal type="string">"swap alpha fields"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>alpha_swap</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_BOOL</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">0</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FLAGS</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"as"</literal></expr>, <expr><literal type="string">"swap alpha fields"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>alpha_swap</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_BOOL</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">0</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FLAGS</name></expr>}</block></expr>,

<expr><block>{<expr><name>NULL</name></expr>}</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>AVFILTER_DEFINE_CLASS</name><argument_list>(<argument><expr><name>il</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function><type><specifier>static</specifier> <name>int</name></type> <name>query_formats</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVFilterFormats</name> <modifier>*</modifier></type><name>formats</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>fmt</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>fmt</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><call><name>av_pix_fmt_desc_get</name><argument_list>(<argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>fmt</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>AVPixFmtDescriptor</name> <modifier>*</modifier></type><name>desc</name> <init>= <expr><call><name>av_pix_fmt_desc_get</name><argument_list>(<argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>desc</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_PIX_FMT_FLAG_PAL</name><operator>)</operator> <operator>&amp;&amp;</operator>

<operator>!</operator><operator>(</operator><name><name>desc</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_PIX_FMT_FLAG_HWACCEL</name><operator>)</operator> <operator>&amp;&amp;</operator>

<operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_add_format</name><argument_list>(<argument><expr><operator>&amp;</operator><name>formats</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><call><name>ff_set_common_formats</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>formats</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>config_input</name><parameter_list>(<parameter><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>inlink</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>IlContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>inlink</name><operator>-&gt;</operator><name>dst</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>AVPixFmtDescriptor</name> <modifier>*</modifier></type><name>desc</name> <init>= <expr><call><name>av_pix_fmt_desc_get</name><argument_list>(<argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>format</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>nb_planes</name></name> <operator>=</operator> <call><name>av_pix_fmt_count_planes</name><argument_list>(<argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>format</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>has_alpha</name></name> <operator>=</operator> <operator>!</operator><operator>!</operator><operator>(</operator><name><name>desc</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_PIX_FMT_FLAG_ALPHA</name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>av_image_fill_linesizes</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>linesize</name></name></expr></argument>, <argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>format</name></name></expr></argument>, <argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>w</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>chroma_height</name></name> <operator>=</operator> <call><name>AV_CEIL_RSHIFT</name><argument_list>(<argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>h</name></name></expr></argument>, <argument><expr><name><name>desc</name><operator>-&gt;</operator><name>log2_chroma_h</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>interleave</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>dst_linesize</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_linesize</name></decl></parameter>,

<parameter><decl><type><name><name>enum</name> <name>FilterMode</name></name></type> <name>mode</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>swap</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>a</name> <init>= <expr><name>swap</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>b</name> <init>= <expr><literal type="number">1</literal> <operator>-</operator> <name>a</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>m</name> <init>= <expr><name>h</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>mode</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>MODE_DEINTERLEAVE</name></expr>:</case>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>m</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <name>dst_linesize</name> <operator>*</operator> <name>y</name></expr></argument> , <argument><expr><name>src</name> <operator>+</operator> <name>src_linesize</name> <operator>*</operator> <operator>(</operator><name>y</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <name>a</name><operator>)</operator></expr></argument>, <argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <name>dst_linesize</name> <operator>*</operator> <operator>(</operator><name>y</name> <operator>+</operator> <name>m</name><operator>)</operator></expr></argument>, <argument><expr><name>src</name> <operator>+</operator> <name>src_linesize</name> <operator>*</operator> <operator>(</operator><name>y</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <name>b</name><operator>)</operator></expr></argument>, <argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<break>break;</break>

<case>case <expr><name>MODE_NONE</name></expr>:</case>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>m</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <name>dst_linesize</name> <operator>*</operator> <name>y</name> <operator>*</operator> <literal type="number">2</literal></expr></argument> , <argument><expr><name>src</name> <operator>+</operator> <name>src_linesize</name> <operator>*</operator> <operator>(</operator><name>y</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <name>a</name><operator>)</operator></expr></argument>, <argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <name>dst_linesize</name> <operator>*</operator> <operator>(</operator><name>y</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>, <argument><expr><name>src</name> <operator>+</operator> <name>src_linesize</name> <operator>*</operator> <operator>(</operator><name>y</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <name>b</name><operator>)</operator></expr></argument>, <argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<break>break;</break>

<case>case <expr><name>MODE_INTERLEAVE</name></expr>:</case>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>m</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <name>dst_linesize</name> <operator>*</operator> <operator>(</operator><name>y</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <name>a</name><operator>)</operator></expr></argument>, <argument><expr><name>src</name> <operator>+</operator> <name>src_linesize</name> <operator>*</operator> <name>y</name></expr></argument> , <argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <name>dst_linesize</name> <operator>*</operator> <operator>(</operator><name>y</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <name>b</name><operator>)</operator></expr></argument>, <argument><expr><name>src</name> <operator>+</operator> <name>src_linesize</name> <operator>*</operator> <operator>(</operator><name>y</name> <operator>+</operator> <name>m</name><operator>)</operator></expr></argument>, <argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>filter_frame</name><parameter_list>(<parameter><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>inlink</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>inpicref</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>IlContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>inlink</name><operator>-&gt;</operator><name>dst</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>outlink</name> <init>= <expr><name><name>inlink</name><operator>-&gt;</operator><name>dst</name><operator>-&gt;</operator><name>outputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>out</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>comp</name></decl>;</decl_stmt>

<expr_stmt><expr><name>out</name> <operator>=</operator> <call><name>ff_get_video_buffer</name><argument_list>(<argument><expr><name>outlink</name></expr></argument>, <argument><expr><name><name>outlink</name><operator>-&gt;</operator><name>w</name></name></expr></argument>, <argument><expr><name><name>outlink</name><operator>-&gt;</operator><name>h</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>out</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>inpicref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_frame_copy_props</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>inpicref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>interleave</name><argument_list>(<argument><expr><name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>inpicref</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>h</name></name></expr></argument>,

<argument><expr><name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>inpicref</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>luma_mode</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>luma_swap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>comp</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>comp</name> <operator>&lt;</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>nb_planes</name></name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>has_alpha</name></name><operator>)</operator></expr>;</condition> <incr><expr><name>comp</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>interleave</name><argument_list>(<argument><expr><name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>comp</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>inpicref</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>comp</name></expr>]</index></name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>comp</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>chroma_height</name></name></expr></argument>,

<argument><expr><name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>comp</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>inpicref</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>comp</name></expr>]</index></name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>chroma_mode</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>chroma_swap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>has_alpha</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>comp</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>nb_planes</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>interleave</name><argument_list>(<argument><expr><name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>comp</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>inpicref</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>comp</name></expr>]</index></name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>comp</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>h</name></name></expr></argument>,

<argument><expr><name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>comp</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>inpicref</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>comp</name></expr>]</index></name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>alpha_mode</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>alpha_swap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>inpicref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>ff_filter_frame</name><argument_list>(<argument><expr><name>outlink</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVFilterPad</name></type> <name><name>inputs</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"default"</literal></expr>,

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,

<expr><operator>.</operator><name>filter_frame</name> <operator>=</operator> <name>filter_frame</name></expr>,

<expr><operator>.</operator><name>config_props</name> <operator>=</operator> <name>config_input</name></expr>,

}</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVFilterPad</name></type> <name><name>outputs</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"default"</literal></expr>,

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,

}</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFilter</name></type> <name>ff_vf_il</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"il"</literal></expr>,

<expr><operator>.</operator><name>description</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"Deinterleave or interleave fields."</literal></expr></argument>)</argument_list></call></expr>,

<expr><operator>.</operator><name>priv_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>IlContext</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><operator>.</operator><name>query_formats</name> <operator>=</operator> <name>query_formats</name></expr>,

<expr><operator>.</operator><name>inputs</name> <operator>=</operator> <name>inputs</name></expr>,

<expr><operator>.</operator><name>outputs</name> <operator>=</operator> <name>outputs</name></expr>,

<expr><operator>.</operator><name>priv_class</name> <operator>=</operator> <operator>&amp;</operator><name>il_class</name></expr>,

<expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>AVFILTER_FLAG_SUPPORT_TIMELINE_GENERIC</name></expr>,

<expr><operator>.</operator><name>process_command</name> <operator>=</operator> <name>ff_filter_process_command</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

</unit>
