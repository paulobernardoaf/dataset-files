<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\git-analysis\_cppstats_featurelocations\git\parse-options.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>PARSE_OPTIONS_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PARSE_OPTIONS_H</name></cpp:macro></cpp:define>





<enum>enum <name>parse_opt_type</name> <block>{

<decl><name>OPTION_END</name></decl>,
<decl><name>OPTION_ARGUMENT</name></decl>,
<decl><name>OPTION_GROUP</name></decl>,
<decl><name>OPTION_NUMBER</name></decl>,
<decl><name>OPTION_ALIAS</name></decl>,

<decl><name>OPTION_BIT</name></decl>,
<decl><name>OPTION_NEGBIT</name></decl>,
<decl><name>OPTION_BITOP</name></decl>,
<decl><name>OPTION_COUNTUP</name></decl>,
<decl><name>OPTION_SET_INT</name></decl>,

<decl><name>OPTION_STRING</name></decl>,
<decl><name>OPTION_INTEGER</name></decl>,
<decl><name>OPTION_MAGNITUDE</name></decl>,
<decl><name>OPTION_CALLBACK</name></decl>,
<decl><name>OPTION_LOWLEVEL_CALLBACK</name></decl>,
<decl><name>OPTION_FILENAME</name></decl>
}</block>;</enum>

<enum>enum <name>parse_opt_flags</name> <block>{
<decl><name>PARSE_OPT_KEEP_DASHDASH</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,
<decl><name>PARSE_OPT_STOP_AT_NON_OPTION</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>,
<decl><name>PARSE_OPT_KEEP_ARGV0</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>,
<decl><name>PARSE_OPT_KEEP_UNKNOWN</name> <init>= <expr><literal type="number">8</literal></expr></init></decl>,
<decl><name>PARSE_OPT_NO_INTERNAL_HELP</name> <init>= <expr><literal type="number">16</literal></expr></init></decl>,
<decl><name>PARSE_OPT_ONE_SHOT</name> <init>= <expr><literal type="number">32</literal></expr></init></decl>
}</block>;</enum>

<enum>enum <name>parse_opt_option_flags</name> <block>{
<decl><name>PARSE_OPT_OPTARG</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,
<decl><name>PARSE_OPT_NOARG</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>,
<decl><name>PARSE_OPT_NONEG</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>,
<decl><name>PARSE_OPT_HIDDEN</name> <init>= <expr><literal type="number">8</literal></expr></init></decl>,
<decl><name>PARSE_OPT_LASTARG_DEFAULT</name> <init>= <expr><literal type="number">16</literal></expr></init></decl>,
<decl><name>PARSE_OPT_NODASH</name> <init>= <expr><literal type="number">32</literal></expr></init></decl>,
<decl><name>PARSE_OPT_LITERAL_ARGHELP</name> <init>= <expr><literal type="number">64</literal></expr></init></decl>,
<decl><name>PARSE_OPT_SHELL_EVAL</name> <init>= <expr><literal type="number">256</literal></expr></init></decl>,
<decl><name>PARSE_OPT_NOCOMPLETE</name> <init>= <expr><literal type="number">512</literal></expr></init></decl>,
<decl><name>PARSE_OPT_COMP_ARG</name> <init>= <expr><literal type="number">1024</literal></expr></init></decl>,
<decl><name>PARSE_OPT_CMDMODE</name> <init>= <expr><literal type="number">2048</literal></expr></init></decl>
}</block>;</enum>

<enum>enum <name>parse_opt_result</name> <block>{
<decl><name>PARSE_OPT_COMPLETE</name> <init>= <expr><operator>-</operator><literal type="number">3</literal></expr></init></decl>,
<decl><name>PARSE_OPT_HELP</name> <init>= <expr><operator>-</operator><literal type="number">2</literal></expr></init></decl>,
<decl><name>PARSE_OPT_ERROR</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>, 
<decl><name>PARSE_OPT_DONE</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, 
<decl><name>PARSE_OPT_NON_OPTION</name></decl>,
<decl><name>PARSE_OPT_UNKNOWN</name></decl>
}</block>;</enum>

<struct_decl>struct <name>option</name>;</struct_decl>
<typedef>typedef <function_decl><type><name>int</name></type> <name>parse_opt_cb</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>option</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>unset</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<struct_decl>struct <name>parse_opt_ctx_t</name>;</struct_decl>
<typedef>typedef <function_decl><type><name><name>enum</name> <name>parse_opt_result</name></name></type> <name>parse_opt_ll_cb</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>parse_opt_ctx_t</name></name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>option</name></name> <modifier>*</modifier></type><name>opt</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>unset</name></decl></parameter>)</parameter_list>;</function_decl></typedef>




























































<struct>struct <name>option</name> <block>{
<decl_stmt><decl><type><name><name>enum</name> <name>parse_opt_type</name></name></type> <name>type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>short_name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>long_name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>value</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>argh</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>help</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>parse_opt_cb</name> <modifier>*</modifier></type><name>callback</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>intptr_t</name></type> <name>defval</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>parse_opt_ll_cb</name> <modifier>*</modifier></type><name>ll_callback</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>intptr_t</name></type> <name>extra</name></decl>;</decl_stmt>
}</block>;</struct>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPT_BIT_F</name><parameter_list>(<parameter><type><name>s</name></type></parameter>, <parameter><type><name>l</name></type></parameter>, <parameter><type><name>v</name></type></parameter>, <parameter><type><name>h</name></type></parameter>, <parameter><type><name>b</name></type></parameter>, <parameter><type><name>f</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ OPTION_BIT, (s), (l), (v), NULL, (h), PARSE_OPT_NOARG|(f), NULL, (b) }</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPT_COUNTUP_F</name><parameter_list>(<parameter><type><name>s</name></type></parameter>, <parameter><type><name>l</name></type></parameter>, <parameter><type><name>v</name></type></parameter>, <parameter><type><name>h</name></type></parameter>, <parameter><type><name>f</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ OPTION_COUNTUP, (s), (l), (v), NULL, (h), PARSE_OPT_NOARG|(f) }</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPT_SET_INT_F</name><parameter_list>(<parameter><type><name>s</name></type></parameter>, <parameter><type><name>l</name></type></parameter>, <parameter><type><name>v</name></type></parameter>, <parameter><type><name>h</name></type></parameter>, <parameter><type><name>i</name></type></parameter>, <parameter><type><name>f</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ OPTION_SET_INT, (s), (l), (v), NULL, (h), PARSE_OPT_NOARG | (f), NULL, (i) }</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPT_BOOL_F</name><parameter_list>(<parameter><type><name>s</name></type></parameter>, <parameter><type><name>l</name></type></parameter>, <parameter><type><name>v</name></type></parameter>, <parameter><type><name>h</name></type></parameter>, <parameter><type><name>f</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>OPT_SET_INT_F(s, l, v, h, 1, f)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPT_CALLBACK_F</name><parameter_list>(<parameter><type><name>s</name></type></parameter>, <parameter><type><name>l</name></type></parameter>, <parameter><type><name>v</name></type></parameter>, <parameter><type><name>a</name></type></parameter>, <parameter><type><name>h</name></type></parameter>, <parameter><type><name>f</name></type></parameter>, <parameter><type><name>cb</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ OPTION_CALLBACK, (s), (l), (v), (a), (h), (f), (cb) }</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPT_STRING_F</name><parameter_list>(<parameter><type><name>s</name></type></parameter>, <parameter><type><name>l</name></type></parameter>, <parameter><type><name>v</name></type></parameter>, <parameter><type><name>a</name></type></parameter>, <parameter><type><name>h</name></type></parameter>, <parameter><type><name>f</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ OPTION_STRING, (s), (l), (v), (a), (h), (f) }</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPT_INTEGER_F</name><parameter_list>(<parameter><type><name>s</name></type></parameter>, <parameter><type><name>l</name></type></parameter>, <parameter><type><name>v</name></type></parameter>, <parameter><type><name>h</name></type></parameter>, <parameter><type><name>f</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ OPTION_INTEGER, (s), (l), (v), N_("n"), (h), (f) }</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPT_END</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>{ OPTION_END }</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPT_ARGUMENT</name><parameter_list>(<parameter><type><name>l</name></type></parameter>, <parameter><type><name>v</name></type></parameter>, <parameter><type><name>h</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ OPTION_ARGUMENT, 0, (l), (v), NULL, (h), PARSE_OPT_NOARG, NULL, 1 }</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPT_GROUP</name><parameter_list>(<parameter><type><name>h</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ OPTION_GROUP, 0, NULL, NULL, NULL, (h) }</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPT_BIT</name><parameter_list>(<parameter><type><name>s</name></type></parameter>, <parameter><type><name>l</name></type></parameter>, <parameter><type><name>v</name></type></parameter>, <parameter><type><name>h</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>OPT_BIT_F(s, l, v, h, b, 0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPT_BITOP</name><parameter_list>(<parameter><type><name>s</name></type></parameter>, <parameter><type><name>l</name></type></parameter>, <parameter><type><name>v</name></type></parameter>, <parameter><type><name>h</name></type></parameter>, <parameter><type><name>set</name></type></parameter>, <parameter><type><name>clear</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ OPTION_BITOP, (s), (l), (v), NULL, (h), PARSE_OPT_NOARG|PARSE_OPT_NONEG, NULL, (set), NULL, (clear) }</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPT_NEGBIT</name><parameter_list>(<parameter><type><name>s</name></type></parameter>, <parameter><type><name>l</name></type></parameter>, <parameter><type><name>v</name></type></parameter>, <parameter><type><name>h</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ OPTION_NEGBIT, (s), (l), (v), NULL, (h), PARSE_OPT_NOARG, NULL, (b) }</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPT_COUNTUP</name><parameter_list>(<parameter><type><name>s</name></type></parameter>, <parameter><type><name>l</name></type></parameter>, <parameter><type><name>v</name></type></parameter>, <parameter><type><name>h</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>OPT_COUNTUP_F(s, l, v, h, 0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPT_SET_INT</name><parameter_list>(<parameter><type><name>s</name></type></parameter>, <parameter><type><name>l</name></type></parameter>, <parameter><type><name>v</name></type></parameter>, <parameter><type><name>h</name></type></parameter>, <parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>OPT_SET_INT_F(s, l, v, h, i, 0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPT_BOOL</name><parameter_list>(<parameter><type><name>s</name></type></parameter>, <parameter><type><name>l</name></type></parameter>, <parameter><type><name>v</name></type></parameter>, <parameter><type><name>h</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>OPT_BOOL_F(s, l, v, h, 0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPT_HIDDEN_BOOL</name><parameter_list>(<parameter><type><name>s</name></type></parameter>, <parameter><type><name>l</name></type></parameter>, <parameter><type><name>v</name></type></parameter>, <parameter><type><name>h</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ OPTION_SET_INT, (s), (l), (v), NULL, (h), PARSE_OPT_NOARG | PARSE_OPT_HIDDEN, NULL, 1}</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPT_CMDMODE</name><parameter_list>(<parameter><type><name>s</name></type></parameter>, <parameter><type><name>l</name></type></parameter>, <parameter><type><name>v</name></type></parameter>, <parameter><type><name>h</name></type></parameter>, <parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ OPTION_SET_INT, (s), (l), (v), NULL, (h), PARSE_OPT_CMDMODE|PARSE_OPT_NOARG|PARSE_OPT_NONEG, NULL, (i) }</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPT_INTEGER</name><parameter_list>(<parameter><type><name>s</name></type></parameter>, <parameter><type><name>l</name></type></parameter>, <parameter><type><name>v</name></type></parameter>, <parameter><type><name>h</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>OPT_INTEGER_F(s, l, v, h, 0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPT_MAGNITUDE</name><parameter_list>(<parameter><type><name>s</name></type></parameter>, <parameter><type><name>l</name></type></parameter>, <parameter><type><name>v</name></type></parameter>, <parameter><type><name>h</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ OPTION_MAGNITUDE, (s), (l), (v), N_("n"), (h), PARSE_OPT_NONEG }</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPT_STRING</name><parameter_list>(<parameter><type><name>s</name></type></parameter>, <parameter><type><name>l</name></type></parameter>, <parameter><type><name>v</name></type></parameter>, <parameter><type><name>a</name></type></parameter>, <parameter><type><name>h</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>OPT_STRING_F(s, l, v, a, h, 0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPT_STRING_LIST</name><parameter_list>(<parameter><type><name>s</name></type></parameter>, <parameter><type><name>l</name></type></parameter>, <parameter><type><name>v</name></type></parameter>, <parameter><type><name>a</name></type></parameter>, <parameter><type><name>h</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ OPTION_CALLBACK, (s), (l), (v), (a), (h), 0, &amp;parse_opt_string_list }</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPT_UYN</name><parameter_list>(<parameter><type><name>s</name></type></parameter>, <parameter><type><name>l</name></type></parameter>, <parameter><type><name>v</name></type></parameter>, <parameter><type><name>h</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ OPTION_CALLBACK, (s), (l), (v), NULL, (h), PARSE_OPT_NOARG, &amp;parse_opt_tertiary }</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPT_EXPIRY_DATE</name><parameter_list>(<parameter><type><name>s</name></type></parameter>, <parameter><type><name>l</name></type></parameter>, <parameter><type><name>v</name></type></parameter>, <parameter><type><name>h</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ OPTION_CALLBACK, (s), (l), (v), N_("expiry-date"),(h), 0, parse_opt_expiry_date_cb }</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPT_CALLBACK</name><parameter_list>(<parameter><type><name>s</name></type></parameter>, <parameter><type><name>l</name></type></parameter>, <parameter><type><name>v</name></type></parameter>, <parameter><type><name>a</name></type></parameter>, <parameter><type><name>h</name></type></parameter>, <parameter><type><name>f</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>OPT_CALLBACK_F(s, l, v, a, h, 0, f)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPT_NUMBER_CALLBACK</name><parameter_list>(<parameter><type><name>v</name></type></parameter>, <parameter><type><name>h</name></type></parameter>, <parameter><type><name>f</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ OPTION_NUMBER, 0, NULL, (v), NULL, (h), PARSE_OPT_NOARG | PARSE_OPT_NONEG, (f) }</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPT_FILENAME</name><parameter_list>(<parameter><type><name>s</name></type></parameter>, <parameter><type><name>l</name></type></parameter>, <parameter><type><name>v</name></type></parameter>, <parameter><type><name>h</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ OPTION_FILENAME, (s), (l), (v), N_("file"), (h) }</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPT_COLOR_FLAG</name><parameter_list>(<parameter><type><name>s</name></type></parameter>, <parameter><type><name>l</name></type></parameter>, <parameter><type><name>v</name></type></parameter>, <parameter><type><name>h</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ OPTION_CALLBACK, (s), (l), (v), N_("when"), (h), PARSE_OPT_OPTARG, parse_opt_color_flag_cb, (intptr_t)"always" }</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPT_NOOP_NOARG</name><parameter_list>(<parameter><type><name>s</name></type></parameter>, <parameter><type><name>l</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ OPTION_CALLBACK, (s), (l), NULL, NULL, N_("no-op (backward compatibility)"), PARSE_OPT_HIDDEN | PARSE_OPT_NOARG, parse_opt_noop_cb }</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPT_ALIAS</name><parameter_list>(<parameter><type><name>s</name></type></parameter>, <parameter><type><name>l</name></type></parameter>, <parameter><type><name>source_long_name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ OPTION_ALIAS, (s), (l), (source_long_name) }</cpp:value></cpp:define>















<function_decl><type><name>int</name></type> <name>parse_options</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>prefix</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>option</name></name> <modifier>*</modifier></type><name>options</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier> <specifier>const</specifier></type> <name><name>usagestr</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>NORETURN</name> <name>void</name></type> <name>usage_with_options</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier> <specifier>const</specifier> <modifier>*</modifier></type><name>usagestr</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>option</name></name> <modifier>*</modifier></type><name>options</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>NORETURN</name> <name>void</name></type> <name>usage_msg_opt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>msg</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier> <specifier>const</specifier> <modifier>*</modifier></type><name>usagestr</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>option</name></name> <modifier>*</modifier></type><name>options</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>optbug</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>option</name></name> <modifier>*</modifier></type><name>opt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>reason</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>optname</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>option</name></name> <modifier>*</modifier></type><name>opt</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>;</function_decl>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BUG_ON_OPT_NEG</name><parameter_list>(<parameter><type><name>unset</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { if ((unset)) BUG("option callback does not expect negation"); } while (0)</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BUG_ON_OPT_ARG</name><parameter_list>(<parameter><type><name>arg</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { if ((arg)) BUG("option callback does not expect an argument"); } while (0)</cpp:value></cpp:define>









<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BUG_ON_OPT_NEG_NOARG</name><parameter_list>(<parameter><type><name>unset</name></type></parameter>, <parameter><type><name>arg</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { BUG_ON_OPT_NEG(unset); if(!(arg)) BUG("option callback expects an argument"); } while(0)</cpp:value></cpp:define>












<struct>struct <name>parse_opt_ctx_t</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>out</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>argc</name></decl>, <decl><type ref="prev"/><name>cpidx</name></decl>, <decl><type ref="prev"/><name>total</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>opt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>prefix</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>alias_groups</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name><name>struct</name> <name>option</name></name> <modifier>*</modifier></type><name>updated_options</name></decl>;</decl_stmt>
}</block>;</struct>

<function_decl><type><name>void</name></type> <name>parse_options_start</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>parse_opt_ctx_t</name></name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>prefix</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>option</name></name> <modifier>*</modifier></type><name>options</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>parse_options_step</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>parse_opt_ctx_t</name></name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>option</name></name> <modifier>*</modifier></type><name>options</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier> <specifier>const</specifier></type> <name><name>usagestr</name><index>[]</index></name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>parse_options_end</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>parse_opt_ctx_t</name></name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name><name>struct</name> <name>option</name></name> <modifier>*</modifier></type><name>parse_options_dup</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>option</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name><name>struct</name> <name>option</name></name> <modifier>*</modifier></type><name>parse_options_concat</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>option</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>option</name></name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>int</name></type> <name>parse_opt_abbrev_cb</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>option</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>parse_opt_expiry_date_cb</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>option</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>parse_opt_color_flag_cb</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>option</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>parse_opt_verbosity_cb</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>option</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>parse_opt_object_name</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>option</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>parse_opt_object_id</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>option</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>parse_opt_commits</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>option</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>parse_opt_commit</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>option</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>parse_opt_tertiary</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>option</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>parse_opt_string_list</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>option</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>parse_opt_noop_cb</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>option</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name><name>enum</name> <name>parse_opt_result</name></name></type> <name>parse_opt_unknown_cb</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>parse_opt_ctx_t</name></name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>option</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>parse_opt_passthru</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>option</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>parse_opt_passthru_argv</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>option</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPT__VERBOSE</name><parameter_list>(<parameter><type><name>var</name></type></parameter>, <parameter><type><name>h</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>OPT_COUNTUP('v', "verbose", (var), (h))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPT__QUIET</name><parameter_list>(<parameter><type><name>var</name></type></parameter>, <parameter><type><name>h</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>OPT_COUNTUP('q', "quiet", (var), (h))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPT__VERBOSITY</name><parameter_list>(<parameter><type><name>var</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ OPTION_CALLBACK, 'v', "verbose", (var), NULL, N_("be more verbose"), PARSE_OPT_NOARG, &amp;parse_opt_verbosity_cb, 0 }, { OPTION_CALLBACK, 'q', "quiet", (var), NULL, N_("be more quiet"), PARSE_OPT_NOARG, &amp;parse_opt_verbosity_cb, 0 }</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPT__DRY_RUN</name><parameter_list>(<parameter><type><name>var</name></type></parameter>, <parameter><type><name>h</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>OPT_BOOL('n', "dry-run", (var), (h))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPT__FORCE</name><parameter_list>(<parameter><type><name>var</name></type></parameter>, <parameter><type><name>h</name></type></parameter>, <parameter><type><name>f</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>OPT_COUNTUP_F('f', "force", (var), (h), (f))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPT__ABBREV</name><parameter_list>(<parameter><type><name>var</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ OPTION_CALLBACK, 0, "abbrev", (var), N_("n"), N_("use &lt;n&gt; digits to display SHA-1s"), PARSE_OPT_OPTARG, &amp;parse_opt_abbrev_cb, 0 }</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPT__COLOR</name><parameter_list>(<parameter><type><name>var</name></type></parameter>, <parameter><type><name>h</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>OPT_COLOR_FLAG(0, "color", (var), (h))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPT_COLUMN</name><parameter_list>(<parameter><type><name>s</name></type></parameter>, <parameter><type><name>l</name></type></parameter>, <parameter><type><name>v</name></type></parameter>, <parameter><type><name>h</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ OPTION_CALLBACK, (s), (l), (v), N_("style"), (h), PARSE_OPT_OPTARG, parseopt_column_callback }</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPT_PASSTHRU</name><parameter_list>(<parameter><type><name>s</name></type></parameter>, <parameter><type><name>l</name></type></parameter>, <parameter><type><name>v</name></type></parameter>, <parameter><type><name>a</name></type></parameter>, <parameter><type><name>h</name></type></parameter>, <parameter><type><name>f</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ OPTION_CALLBACK, (s), (l), (v), (a), (h), (f), parse_opt_passthru }</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPT_PASSTHRU_ARGV</name><parameter_list>(<parameter><type><name>s</name></type></parameter>, <parameter><type><name>l</name></type></parameter>, <parameter><type><name>v</name></type></parameter>, <parameter><type><name>a</name></type></parameter>, <parameter><type><name>h</name></type></parameter>, <parameter><type><name>f</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ OPTION_CALLBACK, (s), (l), (v), (a), (h), (f), parse_opt_passthru_argv }</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_OPT_CONTAINS_OR_WITH</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>variable</name></type></parameter>, <parameter><type><name>help</name></type></parameter>, <parameter><type><name>flag</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ OPTION_CALLBACK, 0, name, (variable), N_("commit"), (help), PARSE_OPT_LASTARG_DEFAULT | flag, parse_opt_commits, (intptr_t) "HEAD" }</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPT_CONTAINS</name><parameter_list>(<parameter><type><name>v</name></type></parameter>, <parameter><type><name>h</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>_OPT_CONTAINS_OR_WITH("contains", v, h, PARSE_OPT_NONEG)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPT_NO_CONTAINS</name><parameter_list>(<parameter><type><name>v</name></type></parameter>, <parameter><type><name>h</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>_OPT_CONTAINS_OR_WITH("no-contains", v, h, PARSE_OPT_NONEG)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPT_WITH</name><parameter_list>(<parameter><type><name>v</name></type></parameter>, <parameter><type><name>h</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>_OPT_CONTAINS_OR_WITH("with", v, h, PARSE_OPT_HIDDEN | PARSE_OPT_NONEG)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPT_WITHOUT</name><parameter_list>(<parameter><type><name>v</name></type></parameter>, <parameter><type><name>h</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>_OPT_CONTAINS_OR_WITH("without", v, h, PARSE_OPT_HIDDEN | PARSE_OPT_NONEG)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPT_CLEANUP</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>OPT_STRING(0, "cleanup", v, N_("mode"), N_("how to strip spaces and #comments from message"))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPT_PATHSPEC_FROM_FILE</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>OPT_FILENAME(0, "pathspec-from-file", v, N_("read pathspec from file"))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPT_PATHSPEC_FILE_NUL</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>OPT_BOOL(0, "pathspec-file-nul", v, N_("with --pathspec-from-file, pathspec elements are separated with NUL character"))</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
