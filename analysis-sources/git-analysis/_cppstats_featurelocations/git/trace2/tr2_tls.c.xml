<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\git-analysis\_cppstats_featurelocations\git\trace2\tr2_tls.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cache.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"thread-utils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"trace2/tr2_tls.h"</cpp:file></cpp:include>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TR2_REGION_NESTING_INITIAL_SIZE</name></cpp:macro> <cpp:value>(100)</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>tr2tls_thread_ctx</name></name> <modifier>*</modifier></type><name>tr2tls_thread_main</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>uint64_t</name></type> <name>tr2tls_us_start_process</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>pthread_mutex_t</name></type> <name>tr2tls_mutex</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>pthread_key_t</name></type> <name>tr2tls_key</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>tr2_next_thread_id</name></decl>;</decl_stmt> 

<function><type><name>void</name></type> <name>tr2tls_start_process_clock</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>tr2tls_us_start_process</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>







<expr_stmt><expr><name>tr2tls_us_start_process</name> <operator>=</operator> <call><name>getnanotime</name><argument_list>()</argument_list></call> <operator>/</operator> <literal type="number">1000</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name><name>struct</name> <name>tr2tls_thread_ctx</name></name> <modifier>*</modifier></type><name>tr2tls_create_self</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>thread_name</name></decl></parameter>,
<parameter><decl><type><name>uint64_t</name></type> <name>us_thread_start</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>tr2tls_thread_ctx</name></name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><call><name>xcalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>ctx</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>






<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>alloc</name></name> <operator>=</operator> <name>TR2_REGION_NESTING_INITIAL_SIZE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>array_us_start</name></name> <operator>=</operator> <operator>(</operator><name>uint64_t</name> <operator>*</operator><operator>)</operator><call><name>xcalloc</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>alloc</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>array_us_start</name><index>[<expr><name><name>ctx</name><operator>-&gt;</operator><name>nr_open_regions</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>us_thread_start</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>thread_id</name></name> <operator>=</operator> <call><name>tr2tls_locked_increment</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tr2_next_thread_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strbuf_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>thread_name</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>thread_id</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>strbuf_addf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>thread_name</name></name></expr></argument>, <argument><expr><literal type="string">"th%02d:"</literal></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>thread_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>strbuf_addstr</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>thread_name</name></name></expr></argument>, <argument><expr><name>thread_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>thread_name</name><operator>.</operator><name>len</name></name> <operator>&gt;</operator> <name>TR2_MAX_THREAD_NAME</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>strbuf_setlen</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>thread_name</name></name></expr></argument>, <argument><expr><name>TR2_MAX_THREAD_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>pthread_setspecific</name><argument_list>(<argument><expr><name>tr2tls_key</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ctx</name></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>struct</name> <name>tr2tls_thread_ctx</name></name> <modifier>*</modifier></type><name>tr2tls_get_self</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>tr2tls_thread_ctx</name></name> <modifier>*</modifier></type><name>ctx</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>HAVE_THREADS</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>tr2tls_thread_main</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ctx</name> <operator>=</operator> <call><name>pthread_getspecific</name><argument_list>(<argument><expr><name>tr2tls_key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>






<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ctx</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ctx</name> <operator>=</operator> <call><name>tr2tls_create_self</name><argument_list>(<argument><expr><literal type="string">"unknown"</literal></expr></argument>, <argument><expr><call><name>getnanotime</name><argument_list>()</argument_list></call> <operator>/</operator> <literal type="number">1000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>ctx</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>tr2tls_is_main_thread</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>HAVE_THREADS</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>pthread_getspecific</name><argument_list>(<argument><expr><name>tr2tls_key</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>tr2tls_thread_main</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>tr2tls_unset_self</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>tr2tls_thread_ctx</name></name> <modifier>*</modifier></type><name>ctx</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ctx</name> <operator>=</operator> <call><name>tr2tls_get_self</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pthread_setspecific</name><argument_list>(<argument><expr><name>tr2tls_key</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>array_us_start</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>tr2tls_push_self</name><parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name>us_now</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>tr2tls_thread_ctx</name></name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><call><name>tr2tls_get_self</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ALLOC_GROW</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>array_us_start</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>nr_open_regions</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>array_us_start</name><index>[<expr><name><name>ctx</name><operator>-&gt;</operator><name>nr_open_regions</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>us_now</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>tr2tls_pop_self</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>tr2tls_thread_ctx</name></name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><call><name>tr2tls_get_self</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>nr_open_regions</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>BUG</name><argument_list>(<argument><expr><literal type="string">"no open regions in thread '%s'"</literal></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>thread_name</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>nr_open_regions</name></name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>tr2tls_pop_unwind_self</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>tr2tls_thread_ctx</name></name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><call><name>tr2tls_get_self</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>nr_open_regions</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>tr2tls_pop_self</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></while>
</block_content>}</block></function>

<function><type><name>uint64_t</name></type> <name>tr2tls_region_elasped_self</name><parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name>us</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>tr2tls_thread_ctx</name></name> <modifier>*</modifier></type><name>ctx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>us_start</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ctx</name> <operator>=</operator> <call><name>tr2tls_get_self</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>nr_open_regions</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>us_start</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>array_us_start</name><index>[<expr><name><name>ctx</name><operator>-&gt;</operator><name>nr_open_regions</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<return>return <expr><name>us</name> <operator>-</operator> <name>us_start</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>uint64_t</name></type> <name>tr2tls_absolute_elapsed</name><parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name>us</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>tr2tls_thread_main</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>us</name> <operator>-</operator> <name>tr2tls_us_start_process</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>tr2tls_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>tr2tls_start_process_clock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pthread_key_create</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tr2tls_key</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>init_recursive_mutex</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tr2tls_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tr2tls_thread_main</name> <operator>=</operator>
<call><name>tr2tls_create_self</name><argument_list>(<argument><expr><literal type="string">"main"</literal></expr></argument>, <argument><expr><name>tr2tls_us_start_process</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>tr2tls_release</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>tr2tls_unset_self</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tr2tls_thread_main</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pthread_mutex_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tr2tls_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pthread_key_delete</name><argument_list>(<argument><expr><name>tr2tls_key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>tr2tls_locked_increment</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>current_value</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tr2tls_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>current_value</name> <operator>=</operator> <operator>*</operator><name>p</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <name>current_value</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tr2tls_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>current_value</name></expr>;</return>
</block_content>}</block></function>
</unit>
