<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\git-analysis\_cppstats_featurelocations\git\oidset.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>OIDSET_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OIDSET_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"khash.h"</cpp:file></cpp:include>
















<struct>struct <name>oidset</name> <block>{
<decl_stmt><decl><type><name>kh_oid_set_t</name></type> <name>set</name></decl>;</decl_stmt>
}</block>;</struct>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OIDSET_INIT</name></cpp:macro> <cpp:value>{ { 0 } }</cpp:value></cpp:define>








<function_decl><type><name>void</name></type> <name>oidset_init</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>oidset</name></name> <modifier>*</modifier></type><name>set</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>initial_size</name></decl></parameter>)</parameter_list>;</function_decl>




<function_decl><type><name>int</name></type> <name>oidset_contains</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>oidset</name></name> <modifier>*</modifier></type><name>set</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>oid</name></decl></parameter>)</parameter_list>;</function_decl>








<function_decl><type><name>int</name></type> <name>oidset_insert</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>oidset</name></name> <modifier>*</modifier></type><name>set</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>oid</name></decl></parameter>)</parameter_list>;</function_decl>






<function_decl><type><name>int</name></type> <name>oidset_remove</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>oidset</name></name> <modifier>*</modifier></type><name>set</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>oid</name></decl></parameter>)</parameter_list>;</function_decl>





<function_decl><type><name>void</name></type> <name>oidset_clear</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>oidset</name></name> <modifier>*</modifier></type><name>set</name></decl></parameter>)</parameter_list>;</function_decl>







<function_decl><type><name>void</name></type> <name>oidset_parse_file</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>oidset</name></name> <modifier>*</modifier></type><name>set</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list>;</function_decl>

<struct>struct <name>oidset_iter</name> <block>{
<decl_stmt><decl><type><name>kh_oid_set_t</name> <modifier>*</modifier></type><name>set</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>khiter_t</name></type> <name>iter</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>oidset_iter_init</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>oidset</name></name> <modifier>*</modifier></type><name>set</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>oidset_iter</name></name> <modifier>*</modifier></type><name>iter</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>set</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>set</name><operator>-&gt;</operator><name>set</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>iter</name></name> <operator>=</operator> <call><name>kh_begin</name><argument_list>(<argument><expr><name><name>iter</name><operator>-&gt;</operator><name>set</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>oidset_iter_next</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>oidset_iter</name></name> <modifier>*</modifier></type><name>iter</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<for>for <control>(<init>;</init> <condition><expr><name><name>iter</name><operator>-&gt;</operator><name>iter</name></name> <operator>!=</operator> <call><name>kh_end</name><argument_list>(<argument><expr><name><name>iter</name><operator>-&gt;</operator><name>set</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name><name>iter</name><operator>-&gt;</operator><name>iter</name></name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>kh_exist</name><argument_list>(<argument><expr><name><name>iter</name><operator>-&gt;</operator><name>set</name></name></expr></argument>, <argument><expr><name><name>iter</name><operator>-&gt;</operator><name>iter</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>&amp;</operator><call><name>kh_key</name><argument_list>(<argument><expr><name><name>iter</name><operator>-&gt;</operator><name>set</name></name></expr></argument>, <argument><expr><name><name>iter</name><operator>-&gt;</operator><name>iter</name></name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>oidset_iter_first</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>oidset</name></name> <modifier>*</modifier></type><name>set</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>oidset_iter</name></name> <modifier>*</modifier></type><name>iter</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>oidset_iter_init</name><argument_list>(<argument><expr><name>set</name></expr></argument>, <argument><expr><name>iter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>oidset_iter_next</name><argument_list>(<argument><expr><name>iter</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</unit>
